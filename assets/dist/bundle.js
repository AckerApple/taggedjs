var t={626:(t,n,e)=>{e.d(n,{y:()=>d});var r=e(870),o=e(229),a=e(6224),s=e(9626);function c(t){return 0===t.length?s.y:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var i=e(7301),l=e(7873),u=e(6708),d=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var a,s=this,c=(a=t)&&a instanceof r.Lv||function(t){return t&&(0,l.m)(t.next)&&(0,l.m)(t.error)&&(0,l.m)(t.complete)}(a)&&(0,o.Nn)(a)?t:new r.Hp(t,n,e);return(0,u.x)((function(){var t=s,n=t.operator,e=t.source;c.add(n?n.call(c,e):e?s._subscribe(c):s._trySubscribe(c))})),c},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=p(n))((function(n,o){var a=new r.Hp({next:function(n){try{t(n)}catch(t){o(t),a.unsubscribe()}},error:o,complete:n});e.subscribe(a)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[a.L]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return c(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=p(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function p(t){var n;return null!==(n=null!=t?t:i.v.Promise)&&void 0!==n?n:Promise}},870:(t,n,e)=>{e.d(n,{Hp:()=>v,Lv:()=>h});var r=e(7582),o=e(7873),a=e(229),s=e(7301),c=e(3046),i=e(8770),l=u("C",void 0,void 0);function u(t,n,e){return{kind:t,value:n,error:e}}var d=e(1729),p=e(6708),h=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,(0,a.Nn)(n)&&n.add(e)):e.destination=m,e}return(0,r.ZT)(n,t),n.create=function(t,n,e){return new v(t,n,e)},n.prototype.next=function(t){this.isStopped?y(function(t){return u("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?y(u("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?y(l,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(a.w0),g=Function.prototype.bind;function f(t,n){return g.call(t,n)}var x=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){b(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){b(t)}else b(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){b(t)}},t}(),v=function(t){function n(n,e,r){var a,c,i=t.call(this)||this;(0,o.m)(n)||!n?a={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:i&&s.v.useDeprecatedNextContext?((c=Object.create(n)).unsubscribe=function(){return i.unsubscribe()},a={next:n.next&&f(n.next,c),error:n.error&&f(n.error,c),complete:n.complete&&f(n.complete,c)}):a=n;return i.destination=new x(a),i}return(0,r.ZT)(n,t),n}(h);function b(t){s.v.useDeprecatedSynchronousErrorHandling?(0,p.O)(t):(0,c.h)(t)}function y(t,n){var e=s.v.onStoppedNotification;e&&d.z.setTimeout((function(){return e(t,n)}))}var m={closed:!0,next:i.Z,error:function(t){throw t},complete:i.Z}},229:(t,n,e)=>{e.d(n,{Lc:()=>i,w0:()=>c,Nn:()=>l});var r=e(7582),o=e(7873),a=(0,e(6813).d)((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}})),s=e(6821),c=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,s,c;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var l=(0,r.XA)(i),d=l.next();!d.done;d=l.next()){d.value.remove(this)}}catch(n){t={error:n}}finally{try{d&&!d.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else i.remove(this);var p=this.initialTeardown;if((0,o.m)(p))try{p()}catch(t){c=t instanceof a?t.errors:[t]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var g=(0,r.XA)(h),f=g.next();!f.done;f=g.next()){var x=f.value;try{u(x)}catch(t){c=null!=c?c:[],t instanceof a?c=(0,r.ev)((0,r.ev)([],(0,r.CR)(c)),(0,r.CR)(t.errors)):c.push(t)}}}catch(t){e={error:t}}finally{try{f&&!f.done&&(s=g.return)&&s.call(g)}finally{if(e)throw e.error}}}if(c)throw new a(c)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)u(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&(0,s.P)(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&(0,s.P)(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}(),i=c.EMPTY;function l(t){return t instanceof c||t&&"closed"in t&&(0,o.m)(t.remove)&&(0,o.m)(t.add)&&(0,o.m)(t.unsubscribe)}function u(t){(0,o.m)(t)?t():t.unsubscribe()}},7301:(t,n,e)=>{e.d(n,{v:()=>r});var r={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},1910:(t,n,e)=>{e.d(n,{z:()=>k});var r=e(9972),o=e(9626);function a(){return void 0===(t=1)&&(t=1/0),(0,r.z)(o.y,t);var t}var s=e(3542),c=e(7067),i=e(7936),l=e(7221),u=e(3575);function d(t,n){return void 0===n&&(n=0),(0,l.e)((function(e,r){e.subscribe((0,u.x)(r,(function(e){return(0,i.f)(r,t,(function(){return r.next(e)}),n)}),(function(){return(0,i.f)(r,t,(function(){return r.complete()}),n)}),(function(e){return(0,i.f)(r,t,(function(){return r.error(e)}),n)})))}))}function p(t,n){return void 0===n&&(n=0),(0,l.e)((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}var h=e(626);var g=e(4407),f=e(7873);function x(t,n){if(!t)throw new Error("Iterable cannot be null");return new h.y((function(e){(0,i.f)(e,n,(function(){var r=t[Symbol.asyncIterator]();(0,i.f)(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}var v=e(8671),b=e(3927),y=e(9187),m=e(2804),w=e(5785),_=e(7326),S=e(1619);function C(t,n){if(null!=t){if((0,v.c)(t))return function(t,n){return(0,c.Xf)(t).pipe(p(n),d(n))}(t,n);if((0,y.z)(t))return function(t,n){return new h.y((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if((0,b.t)(t))return function(t,n){return(0,c.Xf)(t).pipe(p(n),d(n))}(t,n);if((0,w.D)(t))return x(t,n);if((0,m.T)(t))return function(t,n){return new h.y((function(e){var r;return(0,i.f)(e,n,(function(){r=t[g.h](),(0,i.f)(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return(0,f.m)(null==r?void 0:r.return)&&r.return()}}))}(t,n);if((0,S.L)(t))return function(t,n){return x((0,S.Q)(t),n)}(t,n)}throw(0,_.z)(t)}function k(){for(var t,n,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return a()((t=e,(n=(0,s.yG)(e))?C(t,n):(0,c.Xf)(t)))}},7067:(t,n,e)=>{e.d(n,{Xf:()=>f});var r=e(7582),o=e(9187),a=e(3927),s=e(626),c=e(8671),i=e(5785),l=e(7326),u=e(2804),d=e(1619),p=e(7873),h=e(3046),g=e(6224);function f(t){if(t instanceof s.y)return t;if(null!=t){if((0,c.c)(t))return b=t,new s.y((function(t){var n=b[g.L]();if((0,p.m)(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((0,o.z)(t))return v=t,new s.y((function(t){for(var n=0;n<v.length&&!t.closed;n++)t.next(v[n]);t.complete()}));if((0,a.t)(t))return f=t,new s.y((function(t){f.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,h.h)}));if((0,i.D)(t))return x(t);if((0,u.T)(t))return e=t,new s.y((function(t){var n,o;try{for(var a=(0,r.XA)(e),s=a.next();!s.done;s=a.next()){var c=s.value;if(t.next(c),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=a.return)&&o.call(a)}finally{if(n)throw n.error}}t.complete()}));if((0,d.L)(t))return n=t,x((0,d.Q)(n))}var n,e,f,v,b;throw(0,l.z)(t)}function x(t){return new s.y((function(n){(function(t,n){var e,o,a,s;return(0,r.mG)(this,void 0,void 0,(function(){var c,i;return(0,r.Jh)(this,(function(l){switch(l.label){case 0:l.trys.push([0,5,6,11]),e=(0,r.KL)(t),l.label=1;case 1:return[4,e.next()];case 2:if((o=l.sent()).done)return[3,4];if(c=o.value,n.next(c),n.closed)return[2];l.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return i=l.sent(),a={error:i},[3,11];case 6:return l.trys.push([6,,9,10]),o&&!o.done&&(s=e.return)?[4,s.call(e)]:[3,8];case 7:l.sent(),l.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))}))})(t,n).catch((function(t){return n.error(t)}))}))}},3575:(t,n,e)=>{e.d(n,{x:()=>o});var r=e(7582);function o(t,n,e,r,o){return new a(t,n,e,r,o)}var a=function(t){function n(n,e,r,o,a,s){var c=t.call(this,n)||this;return c.onFinalize=a,c.shouldUnsubscribe=s,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return(0,r.ZT)(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(e(870).Lv)},8412:(t,n,e)=>{e.d(n,{U:()=>a});var r=e(7221),o=e(3575);function a(t,n){return(0,r.e)((function(e,r){var a=0;e.subscribe((0,o.x)(r,(function(e){r.next(t.call(n,e,a++))})))}))}},9972:(t,n,e)=>{e.d(n,{z:()=>l});var r=e(8412),o=e(7067),a=e(7221),s=e(7936),c=e(3575);var i=e(7873);function l(t,n,e){return void 0===e&&(e=1/0),(0,i.m)(n)?l((function(e,a){return(0,r.U)((function(t,r){return n(e,t,a,r)}))((0,o.Xf)(t(e,a)))}),e):("number"==typeof n&&(e=n),(0,a.e)((function(n,r){return function(t,n,e,r,a,i,l,u){var d=[],p=0,h=0,g=!1,f=function(){!g||d.length||p||n.complete()},x=function(t){return p<r?v(t):d.push(t)},v=function(t){i&&n.next(t),p++;var u=!1;(0,o.Xf)(e(t,h++)).subscribe((0,c.x)(n,(function(t){null==a||a(t),i?x(t):n.next(t)}),(function(){u=!0}),void 0,(function(){if(u)try{p--;for(var t=function(){var t=d.shift();l?(0,s.f)(n,l,(function(){return v(t)})):v(t)};d.length&&p<r;)t();f()}catch(t){n.error(t)}})))};return t.subscribe((0,c.x)(n,x,(function(){g=!0,f()}))),function(){null==u||u()}}(n,r,t,e)})))}},1729:(t,n,e)=>{e.d(n,{z:()=>o});var r=e(7582),o={setTimeout:function(t,n){for(var e=[],a=2;a<arguments.length;a++)e[a-2]=arguments[a];var s=o.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,(0,r.ev)([t,n],(0,r.CR)(e))):setTimeout.apply(void 0,(0,r.ev)([t,n],(0,r.CR)(e)))},clearTimeout:function(t){var n=o.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0}},4407:(t,n,e)=>{e.d(n,{h:()=>r});var r="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"},6224:(t,n,e)=>{e.d(n,{L:()=>r});var r="function"==typeof Symbol&&Symbol.observable||"@@observable"},3542:(t,n,e)=>{e.d(n,{yG:()=>a});var r=e(6983);function o(t){return t[t.length-1]}function a(t){return(0,r.K)(o(t))?t.pop():void 0}},6821:(t,n,e)=>{function r(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}e.d(n,{P:()=>r})},6813:(t,n,e)=>{function r(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}e.d(n,{d:()=>r})},6708:(t,n,e)=>{e.d(n,{O:()=>s,x:()=>a});var r=e(7301),o=null;function a(t){if(r.v.useDeprecatedSynchronousErrorHandling){var n=!o;if(n&&(o={errorThrown:!1,error:null}),t(),n){var e=o,a=e.errorThrown,s=e.error;if(o=null,a)throw s}}else t()}function s(t){r.v.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=t)}},7936:(t,n,e)=>{function r(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var a=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(a),!o)return a}e.d(n,{f:()=>r})},9626:(t,n,e)=>{function r(t){return t}e.d(n,{y:()=>r})},9187:(t,n,e)=>{e.d(n,{z:()=>r});var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},5785:(t,n,e)=>{e.d(n,{D:()=>o});var r=e(7873);function o(t){return Symbol.asyncIterator&&(0,r.m)(null==t?void 0:t[Symbol.asyncIterator])}},7873:(t,n,e)=>{function r(t){return"function"==typeof t}e.d(n,{m:()=>r})},8671:(t,n,e)=>{e.d(n,{c:()=>a});var r=e(6224),o=e(7873);function a(t){return(0,o.m)(t[r.L])}},2804:(t,n,e)=>{e.d(n,{T:()=>a});var r=e(4407),o=e(7873);function a(t){return(0,o.m)(null==t?void 0:t[r.h])}},3927:(t,n,e)=>{e.d(n,{t:()=>o});var r=e(7873);function o(t){return(0,r.m)(null==t?void 0:t.then)}},1619:(t,n,e)=>{e.d(n,{L:()=>s,Q:()=>a});var r=e(7582),o=e(7873);function a(t){return(0,r.FC)(this,arguments,(function(){var n,e,o;return(0,r.Jh)(this,(function(a){switch(a.label){case 0:n=t.getReader(),a.label=1;case 1:a.trys.push([1,,9,10]),a.label=2;case 2:return[4,(0,r.qq)(n.read())];case 3:return e=a.sent(),o=e.value,e.done?[4,(0,r.qq)(void 0)]:[3,5];case 4:return[2,a.sent()];case 5:return[4,(0,r.qq)(o)];case 6:return[4,a.sent()];case 7:return a.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function s(t){return(0,o.m)(null==t?void 0:t.getReader)}},6983:(t,n,e)=>{e.d(n,{K:()=>o});var r=e(7873);function o(t){return t&&(0,r.m)(t.schedule)}},7221:(t,n,e)=>{e.d(n,{e:()=>o});var r=e(7873);function o(t){return function(n){if(function(t){return(0,r.m)(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}},8770:(t,n,e)=>{function r(){}e.d(n,{Z:()=>r})},3046:(t,n,e)=>{e.d(n,{h:()=>a});var r=e(7301),o=e(1729);function a(t){o.z.setTimeout((function(){var n=r.v.onUnhandledError;if(!n)throw t;n(t)}))}},7326:(t,n,e)=>{function r(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}e.d(n,{z:()=>r})},854:(t,n,e)=>{e.d(n,{kQ:()=>W,c_:()=>z});var r=e(2387);const o=(0,r._q)((({name:t,array:n,included:e,columnNames:o,allColumnNames:c})=>{let i,l=!1,u=!1;const d=(0,r.SB)([]);(0,r.$q)((t=>[{mouseOverEditShow:l,edit:u,editFormula:i}]=t({mouseOverEditShow:l,edit:u,editFormula:i})));return r.dy.dom(s.allStrings431691[0],(function(){const n=o.indexOf(t);n>=0?o.splice(n,1):o.push(t)}),e&&"checked",t,(()=>l=!0),(()=>l=!1),u||l?"visible":"hidden",(()=>u=!u),e&&o.length!==c.length?r.dy.dom(s.allStrings431691[1],(()=>{o.length=0,o.push(...c)})):r.dy.dom(s.allStrings431691[2],(()=>{o.length=0,o.push(t)})),u&&r.dy.dom(s.allStrings431691[3],i&&r.dy.dom(s.allStrings431691[4],(t=>{return e=i,r=t.target.value,e.stringFormula=r,void(e.value=a(r,{array:n}));var e,r}),i.value),d.map((t=>r.dy.dom(s.allStrings431691[5],t.title,(()=>i=t),t.value).key(t))),(()=>{const e=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;d.push({title:"sum",stringFormula:e,value:a(e,{array:n})})})))}));function a(t,n={}){return function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{isNaN,Math,Number,Date,...n})}const s={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},c=(0,r._q)((({array:t,showAll:n,showKids:e,toggleColumnDialog:o,columnNames:a,formatChange:s,allowMaximize:c,everySimpleValue:l})=>r.dy.dom(i.allStrings122184[0],t.length&&r.dy.dom(i.allStrings122184[1],a.map((t=>r.dy.dom(i.allStrings122184[2],o&&"pointer",o,t).key(t)))),t.map((t=>r.dy.dom(i.allStrings122184[3],a.map((o=>r.dy.dom(i.allStrings122184[4],C({value:t[o],showLevels:0,showAll:n,showKids:n||e,isRootDump:!1,formatChange:s,allowMaximize:c})).key(t[o])))).key(t)))))),i={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},l=(0,r._q)((({array:t,showLevels:n,showAll:e,showKids:o,columnNames:a,formatChange:s,toggleColumnDialog:c,allowMaximize:i,everySimpleValue:l})=>r.dy.dom(u.allStrings152127[0],t.map(((t,o)=>{const d=function(t,n){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,n){if(!n)return t;const e={};return n.forEach((n=>{(t.hasOwnProperty(n)||n in t)&&(e[n]=t[n])})),e}(t,n)}(t,a);return r.dy.dom(u.allStrings152127[1],C({value:d,showLevels:n,showAll:e,showKids:!0,isRootDump:!1,formatChange:s,onHeaderClick:c,allowMaximize:i,everySimpleValue:l})).key(o)})))));const u={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},d=(0,r._q)((({showLevels:t,showAll:n,showKids:e,array:a,arrayView:s,formatChange:i,allowMaximize:u,everySimpleValue:d})=>{const h=(0,r.YP)([a,a.length],(()=>a.length?function(t){return t.reduce(((t,n)=>{if(n&&"object"==typeof n){if(Array.isArray(n))return t;Object.keys(n).forEach((n=>{t.includes(n)||t.push(n)}))}return t}),[])}(a):[]));let g;const f=(0,r.YP)([h],(()=>[...h]));let x=!1;const v=(0,r.SB)((()=>"columnDialog"+performance.now()));(0,r.$q)((t=>[{columnNames:g,showColumnDialog:x}]=t({columnNames:g,showColumnDialog:x}))),r.YP.noInit([f.length],(()=>{g||(g=f)}));const b=()=>{x=!x;const t=document.getElementById(v);x?t.showModal():t.close()},y="table"===s?c({showAll:n,showKids:e,array:a,toggleColumnDialog:b,columnNames:g||h,formatChange:i,everySimpleValue:d}):l({array:a,showLevels:t,showAll:n,showKids:e,formatChange:i,columnNames:g||h,toggleColumnDialog:b,allowMaximize:u,everySimpleValue:d});return r.dy.dom(p.allStrings463171[0],y,v,h.map((t=>{const n=void 0===g||g.includes(t);return r.dy.dom(p.allStrings463171[1],o({name:t,array:a,included:n,columnNames:g||f,allColumnNames:h})).key(t)})),b)}));const p={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},h=(0,r._q)((({key:t,value:n,show:e,showAll:o,showKids:a,showLevels:s,formatChange:c,allowMaximize:i,everySimpleValue:l})=>{let u,p,h=!1;(0,r.$q)((t=>[{showLower:u,arrayView:p,maximize:h}]=t({showLower:u,arrayView:p,maximize:h}))),(0,r.RW)((t=>[a]=t(a))),(0,r.RW)((t=>[o]=t(o))),r.YP.noInit([e],(([t])=>u=t)),r.YP.noInit([o],(([t])=>u=t));const f=(0,r.SB)((()=>"maximize-dump-"+performance.now())),x=()=>{h=!h,h&&document.getElementById(f).showModal()},v=o||u||a||null==u&&s>0,b=e=>r.dy.dom(g.allStrings479370[0],(()=>{if(void 0===u)return o=a=u=!v;o=a=u=!u}),t,"table"===p?"bold":"",(()=>p="table"===p?void 0:"table"),"table"===p?"flex":"table",n.length,e&&r.dy.dom(g.allStrings479370[1],x)),y={showLevels:s,showAll:o,showKids:a,formatChange:c,array:n,arrayView:p,allowMaximize:i,everySimpleValue:l};return r.dy.dom(g.allStrings479370[3],b(i),v&&r.dy.dom(g.allStrings479370[2],d(y)),f,h&&b(!1),h&&r.dy.dom(g.allStrings479370[4],d({...y,allowMaximize:!1})),(()=>document.getElementById(f).close()))})),g={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function f(t){var n=document.createElement("textarea");n.value=t,document.body.appendChild(n),n.select(),n.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(n)}function x({key:t,value:n,onHeaderClick:e,everySimpleValue:o}){const a=n.search&&("https://"===n.slice(0,8)||"http://"===n.slice(0,7));let s;return s=o?v({value:n,everySimpleValue:o}):a?b(n):v({value:n}),r.dy.dom(y.allStrings246978[0],t&&r.dy.dom(y.allStrings246978[1],e&&"pointer",e,t),s)}const v=(0,r._q)((({value:t,everySimpleValue:n})=>{const e=[void 0,null,"null"].includes(t),o=t,a=!isNaN(o)&&o>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(o):"";let s=0;(0,r.$q)((t=>[s]=t(s)));let c=t;return n&&(c=n(t)),c=(null===c?"null":!1===c&&"false")||void 0===c&&"undefined"||c,r.dy.dom(y.allStrings246978[2],(()=>{s=Date.now()}),(n=>{if(Date.now()-s>300)return n.preventDefault(),n.stopPropagation(),!0;f(t)}),e?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||e&&"white"||"",a,c)}));const b=t=>r.dy.dom(y.allStrings246978[3],(()=>f(t)),t,t),y={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},m=(0,r._q)((({key:t,showKids:n,show:e,showLevels:o,value:a,showAll:s,onHeaderClick:c,formatChange:i,allowMaximize:l,everySimpleValue:u})=>{let d,p=!1;const h=(0,r.SB)((()=>"maximize-dump-"+performance.now()));(0,r.$q)((t=>[{showLower:d,maximize:p}]=t({showLower:d,maximize:p}))),(0,r.RW)((t=>[n]=t(n))),r.YP.noInit([e],(([t])=>d=t)),r.YP.noInit([s],(([t])=>d=t));const g=!t||n||d||void 0===d&&o>0,f=()=>{p=!p,p&&document.getElementById(h).showModal()},x=e=>r.dy.dom(w.allStrings470244[0],d?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===d)return s=n=d=!(s||n||d);n=d=!d}),t,Object.keys(a).length,e&&r.dy.dom(w.allStrings470244[1],f)),v=t=>r.dy.dom(w.allStrings470244[2],Object.entries(a).map((([e,a])=>r.dy.dom(w.allStrings470244[3],a&&"object"==typeof a?"flex-grow:1;":"flex: 1 1 10em;",C({value:a,key:e,show:d,showAll:s,showLevels:o-1,showKids:s||n,isRootDump:!1,formatChange:i,onHeaderClick:c,allowMaximize:t,everySimpleValue:u})).key(e))));return r.dy.dom(w.allStrings470244[4],t&&x(l),g&&v(l),h,p&&x(!1),p&&v(!1),(()=>document.getElementById(h).close()))})),w={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},_=(0,r._q)((({value:t,format:n,showAll:e,formatChange:o,showAllChange:a})=>r.dy.dom(S.allStrings440833[0],!n||"flex"===n&&r.dy.dom(S.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e?"background-color:#33cd5f;":"background-color:#444444"),(()=>a(e=!e))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n&&"flex"!==n?"background-color:#444444":"background-color:#33cd5f;"),(()=>o(n="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===n?"background-color:#33cd5f;":"background-color:#444444"),(()=>o(n="json")),(()=>function(t){const n=JSON.stringify(t,null,2);f(n)}(t)))));const S={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},C=(0,r._q)((({key:t,value:n,showKids:e=!1,showLevels:o=-1,showAll:a=!1,format:s="flex",formatChange:c=(t=>s=t),isRootDump:i=!0,onHeaderClick:l,allowMaximize:u,everySimpleValue:d})=>{i&&void 0===u&&(u=!0);const p=null===n?"null":typeof n;let h,g=!1;return(0,r.RW)((t=>[s]=t(s))),(0,r.RW)((t=>[a]=t(a))),(0,r.RW)((t=>[o]=t(o))),(0,r.$q)((t=>[{show:g,arrayView:h}]=t({show:g,arrayView:h}))),(0,r.nc)((()=>{(o=o>=0&&o||(-1===o&&!t&&n&&n instanceof Object?2:0))>0&&(g=!0)})),[null,void 0].includes(n)?x({key:t,value:p,onHeaderClick:l,everySimpleValue:d}):["boolean","number","string"].includes(p)?x({key:t,value:n,onHeaderClick:l,everySimpleValue:d}):V({value:n,showKids:e,key:t,onHeaderClick:l,everySimpleValue:d,format:s,isRootDump:i,showAll:a,showAllChange:t=>a=t,formatChange:c,show:g,showLevels:o,allowMaximize:u})}));let k=0;const V=({value:t,showKids:n,key:e,onHeaderClick:o,everySimpleValue:a,format:s,isRootDump:c,showAll:i,showAllChange:l,formatChange:u,show:d,showLevels:p,allowMaximize:g})=>{if(null===t)return n?x({key:e,value:"null",onHeaderClick:o,everySimpleValue:a}):r.dy.dom(T.allStrings306188[0]);const f=Array.isArray(t);return r.dy.dom(T.allStrings306188[2],"taggedjs-dump-"+ ++k,c&&_({value:t,format:s,showAll:i,showAllChange:l,formatChange:u}),"json"===s&&r.dy.dom(T.allStrings306188[1],JSON.stringify(t,null,2))||(f?h({key:e,value:t,show:d,showAll:i,showKids:n,showLevels:p,formatChange:u,allowMaximize:g,everySimpleValue:a}):m({key:e,show:d,showKids:n,showLevels:p,value:t,showAll:i,formatChange:u,onHeaderClick:o,allowMaximize:g,everySimpleValue:a})))},T={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]};var J=e(8232);const B=(0,r._q)((()=>{let t="",n=0,e="",o=!1;(0,r.$q)((r=>[{userJsonString:t,renderCount:n,userJson:e,badEval:o}]=r({userJsonString:t,renderCount:n,userJson:e,badEval:o}))),++n;const a=(0,r.SB)((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return r.dy.dom(I.allStrings183632[0],(n=>{t=n.target.value;try{e=function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{}),t=JSON.stringify(e,null,2)}catch(n){o=!0;try{JSON.parse(t)}catch(t){e=Object.getOwnPropertyNames(t).reduce(((n,e)=>(n[e]=t[e])&&n||n),{})}}}),""===e?"":t,""===e?"":r.dy.dom(I.allStrings183632[1],C({value:e})),C(a),(0,J.v)({renderCount:n,name:"dumpContent"}))}));const I={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};var L=e(7582),j=e(626),P=e(229),E=(0,e(6813).d)((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),A=e(6821),O=e(6708),D=function(t){function n(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return(0,L.ZT)(n,t),n.prototype.lift=function(t){var n=new N(this,this);return n.operator=t,n},n.prototype._throwIfClosed=function(){if(this.closed)throw new E},n.prototype.next=function(t){var n=this;(0,O.x)((function(){var e,r;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var o=(0,L.XA)(n.currentObservers),a=o.next();!a.done;a=o.next()){a.value.next(t)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}}))},n.prototype.error=function(t){var n=this;(0,O.x)((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},n.prototype.complete=function(){var t=this;(0,O.x)((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var n=this,e=this,r=e.hasError,o=e.isStopped,a=e.observers;return r||o?P.Lc:(this.currentObservers=null,a.push(t),new P.w0((function(){n.currentObservers=null,(0,A.P)(a,t)})))},n.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new j.y;return t.source=this,t},n.create=function(t,n){return new N(t,n)},n}(j.y),N=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return(0,L.ZT)(n,t),n.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},n.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},n.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},n.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:P.Lc},n}(D),$=e(1910),q=e(3542),H=e(7221);function M(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=(0,q.yG)(t);return(0,H.e)((function(n,r){(e?(0,$.z)(t,n,e):(0,$.z)(t,n)).subscribe(r)}))}var R=e(9149);const z=20,X=(0,r._q)((t=>{let n=1,e="white";return(0,r.$q)((t=>[{borderColor:e,width:n}]=t({borderColor:e,width:n}))),r.dy.dom(Z.allStrings1340697[2],n,e,t,n,(t=>n=Number(t.target.value)),n,(t=>e=t.target.value),""===e?"selected":"","black"===e?"selected":"","blue"===e?"selected":"","white"===e?"selected":"")})),W=(0,r._q)((()=>{const t=(0,r.SB)((()=>new r.xQ)),n=(0,r.SB)((()=>new r.v0(3))),e=(0,r.SB)((()=>new r.v0(["a","b","c"]))),o=(0,r.SB)((()=>new r.v0(0))),a=(0,r.SB)((()=>new r.v0(1)));let s=0,c=!0,i=!1,l=0,u=z,d=!1;const p=(0,r.SB)((()=>new r.xQ({added:0,removed:0})));(0,r.$q)((t=>[{renderCount:s,orangeToggle:c,boldToggle:i,counter:l,showHideFx:d,staggerBy:u}]=t({renderCount:s,orangeToggle:c,boldToggle:i,counter:l,showHideFx:d,staggerBy:u}))),++s;const h=(0,r.Ld)(o,(()=>r.dy.dom(Z.allStrings1340697[3],(()=>{++l}),l,(()=>o.next(o.value+1)))));return r.dy.dom(Z.allStrings1340697[4],l,h,(()=>++l),l,(()=>d=!d),d&&r.dy.dom(Z.allStrings1340697[5],(0,R.fx)({duration:"10ms"})),d&&r.dy.dom(Z.allStrings1340697[6],(0,R.fx)({duration:"10ms",stagger:u})),d&&r.dy.dom(Z.allStrings1340697[7],(0,R.fx)({duration:"10ms",stagger:2*u})),d&&(((t=10)=>{const n=(0,r.iB)();return r.dy.dom(Z.allStrings1340697[1],(0,R.fx)({stagger:t,duration:".1s"}),n).acceptInnerHTML(n)})(u).innerHTML=G()),(0,r.Ld)(p,(t=>t.added)),(0,r.Ld)(p,(t=>t.removed)),(t=>u=Number(t.target.value)),X(r.dy.dom(Z.allStrings1340697[8])),B(),(0,J.v)({renderCount:s,name:"ContentDebug"}),U(),Y({sub0:t,sub1:n}),U(),'<script>alert("i should never run but be seen on page")<\/script>',r.dy.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),r.dy.dom(Z.allStrings1340697[9]),"3px solid orange",c?"3px solid orange":"3px solid green",(()=>c=!c),c,i?{style:"font-weight:bold;"}:{},(()=>i=!i),i?"true":"false",54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",(0,r.Ld)(t),(0,r.Ld)(e,(t=>t.map((t=>r.dy.dom(Z.allStrings1340697[10],t).key(t))))),(0,r.Ld)(e,(t=>t.map((t=>r.dy.dom(Z.allStrings1340697[11],t,t).key(t))))),(0,r.Te)(t,-1),(0,r.Ld)(o),(0,r.Ld)(o,(()=>55)),K(),(0,r.Ld)((0,r.aj)([o,a]).pipe((t=>t[1]))),(0,r.Ld)((0,r.aj)([o,a]).pipe((0,r.Ut)((t=>Promise.resolve(r.dy.dom(Z.allStrings1340697[12])))))),(0,J.v)({renderCount:s,name:"ContentDebug"}))}));function U(){return r.dy.dom(Z.allStrings1340697[13],"test0","test1","test3")}const Y=(0,r._q)((({sub0:t,sub1:n})=>{let e=!1;const o=(0,r.SB)((()=>new D));return(0,r.$q)((t=>[e]=t(e))),r.dy.dom(Z.allStrings1340697[14],(0,r.Ld)(t),(()=>t.next((t.value||0)+1)),(()=>o.next(t.value=(t.value||0)+1)),(()=>e=!e),e?"show":"hide",e,e&&(0,r.Ld)(t),e&&(0,r.Ld)(t,F),e&&(0,r.Ld)(t,Q),(0,r.Ld)(n,Q),(0,r.Ld)(o,Q),(0,r.Ld)(o.pipe(M(33)),Q),(0,r.Ld)(o.pipe(M(void 0)),(t=>Q(t))),(0,r.Ld)(o,(t=>Q(t))))})),F=t=>r.dy.dom(Z.allStrings1340697[15],t),Q=(0,r._q)((t=>r.dy.dom(Z.allStrings1340697[16],t))),G=(0,r._q)((()=>r.dy.dom(Z.allStrings1340697[17]))),K=(0,r._q)((()=>{let t=!0,n=0,e=0;return(0,r.$q)((r=>[{hideShow:t,destroyCount:n,clickCounter:e}]=r({hideShow:t,destroyCount:n,clickCounter:e}))),r.dy.dom(Z.allStrings1340697[18],t&&r.dy.dom(Z.allStrings1340697[19],(0,r.ho)((t=>t.innerHTML=Date.now().toString()),{onDestroy:()=>++n}),(()=>++e),e),(()=>t=!t),n)})),Z={allStrings1340697:[[{nn:"div",at:[[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["style",["border-width:",":tagvar0:","px;border-color:",":tagvar1:",";border-style:solid;"]],["id","dynamic-border-element"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"text",tc:"borderWidth:"},{nn:"input",at:[["id","dynamic-border-width"],["type","range"],["min","0"],["max","10"],["step","1"],["value",{tagJsVar:3},null],["change",{tagJsVar:4},null]]},{nn:"text",tc:" - "},{nn:"text",v:5},{nn:"text",tc:"px"}]},{nn:"div",ch:[{nn:"text",tc:"borderColor:"},{nn:"select",at:[["id","dynamic-border-color"],["change",{tagJsVar:6},null]],ch:[{nn:"option",at:[[{tagJsVar:7}],["value",""]]},{nn:"option",at:[[{tagJsVar:8}],["value","black"]],ch:[{nn:"text",tc:"black"}]},{nn:"option",at:[[{tagJsVar:9}],["value","blue"]],ch:[{nn:"text",tc:"blue"}]},{nn:"option",at:[[{tagJsVar:10}],["value","white"]],ch:[{nn:"text",tc:"white"}]}]}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:16}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:17},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:18}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:20},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:22},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:23},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:24}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:25}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:26},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:27}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:28},{nn:"text",tc:" "},{nn:"text",v:29},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:34},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:35},{nn:"text",tc:"22"},{nn:"text",v:36},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:37},{nn:"text",tc:"__tagVar0"},{nn:"text",v:38},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:39},{nn:"text",tc:'"'}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:40}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:41}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:42}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:43}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:44}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:45}]}]},{nn:"text",v:46},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:47}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:48}]}]}]}]}]},{nn:"text",v:49},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"text",tc:"inner html tag"}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]}},842:(t,n,e)=>{e.r(n),e.d(n,{fxTime:()=>o});var r=e(1078);const o=160;function a(t){return new Promise((n=>setTimeout(n,t)))}(0,r.yY)("⠇ array testing",(()=>{(0,r.it)("signal array count and items",(()=>{const t=(0,r.L7)("signal-array-count"),n=Number(t.innerText);for(let t=0;t<n;t++)(0,r.l_)((0,r.o5)(`#signal-array-item-${t}`)).toBe(1);(0,r.l_)((0,r.o5)(`#signal-array-item-${n}`)).toBe(0)})),(0,r.it)("push signal array button",(()=>{const t=(0,r.L7)("signal-array-count"),n=Number(t.innerText),e=(0,r.L7)("push-signal-array-btn");e.click();const o=Number(t.innerText);(0,r.l_)(o).toBe(n+1),(0,r.l_)((0,r.o5)(`#signal-array-item-${n}`)).toBe(1),e.click(),(0,r.l_)(Number(t.innerText)).toBe(n+2),(0,r.l_)((0,r.o5)(`#signal-array-item-${n+1}`)).toBe(1)})),(0,r.it)("arrays counter display matches item counter displays",(()=>{const t=(0,r.L7)("arrays-counter-display"),n=Number(t.innerText),e=(0,r.L7)("signal-array-count"),o=Number(e.innerText);for(let t=0;t<o;t++){const e=(0,r.L7)(`signal-array-item-counter-display-${t}`);(0,r.l_)(e).toBeDefined(),(0,r.l_)(Number(e.innerText)).toBe(n)}document.querySelector("#signal-array-increase-counter").click();const a=Number(t.innerText);(0,r.l_)(a).toBe(n+1);for(let t=0;t<o;t++){const n=(0,r.L7)(`signal-array-item-counter-display-${t}`);(0,r.l_)(Number(n.innerText)).toBe(a)}})),(0,r.it)("signal array item delete button with animation",(async()=>{const t=(0,r.L7)("signal-array-count");0===Number(t.innerText)&&(0,r.L7)("push-signal-array-btn").click();const n=Number(t.innerText);(0,r.l_)((0,r.o5)("#signal-array-item-0")).toBe(1);(0,r.L7)("signal-array-item-delete-btn-0").click(),await a(o),(0,r.l_)(Number(t.innerText)).toBe(n-1),(0,r.l_)((0,r.o5)("#signal-array-item-"+(n-1))).toBe(0);const e=Number(t.innerText);for(let t=0;t<e;t++){const n=(0,r.o5)(`#signal-array-item-${t}`);(0,r.l_)(n).toBe(1,`Expected only one #signal-array-item-${t} but got ${n}`)}})),(0,r.it)("array basics",(()=>{(0,r.l_)((0,r.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,r.l_)(t.length).toBe(0);const n=(0,r.o5)("#score-data-0-1-inside-button");(0,r.l_)(n).toBe(0),(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const e=(0,r.L7)("score-data-0-1-inside-button"),o=(0,r.L7)("score-data-0-1-inside-display");let a=o.innerText;const s=(0,r.L7)("score-data-0-1-outside-button"),c=(0,r.L7)("score-data-0-1-outside-display"),i=c.innerText;(0,r.l_)(a).toBe(i),e.click(),(0,r.l_)(o.innerText).toBe(c.innerText),(0,r.l_)(o).toBe((0,r.L7)("score-data-0-1-inside-display")),(0,r.l_)(a).toBe((Number(o.innerText)-1).toString()),(0,r.l_)(a).toBe((Number(c.innerText)-1).toString()),s.click(),(0,r.l_)(o.innerText).toBe(c.innerText),(0,r.l_)(a).toBe((Number(o.innerText)-2).toString()),(0,r.l_)(a).toBe((Number(c.innerText)-2).toString())})),(0,r.it)("🗑️ deletes",(async()=>{(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(0),(0,r.l_)((0,r.o5)("#player-edit-btn-0")).toBe(1);const t=(0,r.L7)("player-edit-btn-0")._click();(0,r.l_)(t).toBe("no-data-ever"),(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(1);const n=await(0,r.L7)("player-remove-promise-btn-0")._click();(0,r.l_)(n).toBe("promise-no-data-ever"),await a(o),await n,(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(0),(0,r.l_)((0,r.o5)("#player-edit-btn-0")).toBe(0)})),(0,r.it)("add then deletes",(async()=>{(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1),(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(2),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(2),(0,r.L7)("player-edit-btn-0").click();const t=await(0,r.L7)("player-remove-promise-btn-0").click();(0,r.l_)(t).toBe("promise-no-data-ever"),await a(o-10),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1),(0,r.L7)("player-edit-btn-0").click();const n=await(0,r.L7)("player-remove-promise-btn-0").click();(0,r.l_)(n).toBe("promise-no-data-ever"),await a(o+25),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(0),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},2178:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.yY)("🏹 special attributes",(()=>{(0,r.it)("style and class tests",(async()=>{(0,r.l_)((0,r.QX)("#attr-input-abc")).toBe(1),(0,r.l_)((0,r.QX)("#toggle-backgrounds")).toBe(1),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,r.L7)("attr-dynamic-inline-class").classList;(0,r.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,r.V4)("#toggle-backgrounds"),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,r.V4)("#toggle-backgrounds"),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,r.it)("subscribe attributes colors",(()=>{const t=(0,r.L7)("subscribe-style-dot-bg-color-changer"),n=(0,r.L7)("subscribe-style-bg-color"),e=(0,r.L7)("multiple-subscribe-bg-color"),o=(0,r.L7)("toggle-color-btn"),a=(0,r.L7)("clear-color-btn");(0,r.l_)(t.style.backgroundColor).toBe("red"),(0,r.l_)(n.style.backgroundColor).toBe("red"),(0,r.l_)(e.style.backgroundColor).toBe("pink"),(0,r.l_)(o.innerText).toBe("Toggle Color ()"),o.click(),(0,r.l_)(o.innerText).toBe("Toggle Color (red)"),(0,r.l_)(t.style.backgroundColor).toBe("red"),(0,r.l_)(n.style.backgroundColor).toBe("red"),(0,r.l_)(e.style.backgroundColor).toBe("green"),o.click(),(0,r.l_)(o.innerText).toBe("Toggle Color (blue)"),(0,r.l_)(t.style.backgroundColor).toBe("blue"),(0,r.l_)(n.style.backgroundColor).toBe("blue"),(0,r.l_)(e.style.backgroundColor).toBe("purple"),a.click(),(0,r.l_)(t.style.backgroundColor).toBe(""),(0,r.l_)(n.style.backgroundColor).toBe(""),(0,r.l_)(e.style.backgroundColor).toBe("pink")})),(0,r.it)("hide/show attributes affects subscription count",(()=>{const t=(0,r.L7)("toggle-attributes-btn"),n=(0,r.L7)("subscriptions-count"),e=Number(n.innerText);(0,r.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,r.l_)(t.innerText).toBe("Show Attributes");const o=Number(n.innerText);(0,r.l_)(o).toBe(e-2),t.click(),(0,r.l_)(t.innerText).toBe("Hide Attributes");const a=Number(n.innerText);(0,r.l_)(a).toBe(e)})),(0,r.it)("style object converts to individual CSS properties",(()=>{const t=(0,r.L7)("style-object-test"),n=(0,r.L7)("toggle-backgrounds");(0,r.l_)(n.checked).toBe(!0),(0,r.l_)(t.style.backgroundColor).toBe("orange"),(0,r.l_)(t.style.padding).toBe("10px"),(0,r.l_)(t.style.border).toBe("2px solid black"),(0,r.l_)(t.style.borderRadius).toBe("8px"),(0,r.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("lightgray"),(0,r.l_)(t.style.padding).toBe("10px"),(0,r.l_)(t.style.border).toBe("2px solid black"),(0,r.l_)(t.style.borderRadius).toBe("4px"),(0,r.l_)(t.style.boxShadow).toBe("none"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("orange"),(0,r.l_)(t.style.borderRadius).toBe("8px"),(0,r.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,r.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,r.L7)("style-set-property-test"),n=(0,r.L7)("toggle-backgrounds");(0,r.l_)(n.checked).toBe(!0),(0,r.l_)(t.style.backgroundColor).toBe("red"),(0,r.l_)(t.style.color).toBe("white"),(0,r.l_)(t.style.padding).toBe("5px"),(0,r.l_)(t.style.marginTop).toBe("10px"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("blue"),(0,r.l_)(t.style.color).toBe("white"),(0,r.l_)(t.style.padding).toBe("5px"),(0,r.l_)(t.style.marginTop).toBe("10px"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("red")}))}))},9566:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.it)("elements exists",(()=>{(0,r.l_)((0,r.L7)("h1-app")).toBeDefined();const t=(0,r.L7)("toggle-test");(0,r.l_)(t).toBeDefined(),(0,r.l_)(t.innerText).toBe("toggle test")})),(0,r.it)("toggle test",(()=>{const t=(0,r.L7)("toggle-test");(0,r.l_)(t.innerText).toBe("toggle test"),t.click(),(0,r.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,r.l_)(t.innerText).toBe("toggle test");const n=(0,r.L7)("props-debug-textarea");(0,r.l_)(n.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')}))},1527:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.yY)("👶 👧child tests",(()=>{(0,r.it)("child tests",(()=>{(0,r.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,r.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,r.it)("a",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,r.it)("b",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,r.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,r.it)("c",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},4118:(t,n,e)=>{e.r(n);var r=e(1078),o=e(854);console.log("📄 content.test.ts: Loading... window.describe available?",typeof window.describe);let a=0;async function s(t,n,e=5e3){const o=Date.now();for(;Date.now()-o<e;){if((0,r.QX)(t)===n)return await(0,r._v)(50),!0;await(0,r._v)(10)}throw new Error(`Timeout waiting for element count. Expected ${n} elements matching '${t}', but found ${(0,r.QX)(t)}`)}(0,r.yY)("📰 content",(()=>{(0,r.it)("basic",(()=>{(0,r.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,r.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,r.l_)((0,r.dy)("#content-dom-parse-0-0")).toBe((0,r.dy)("#content-dom-parse-0-1"))})),(0,r.it)("html",(()=>{(0,r.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,r.it)("spacing",(()=>{(0,r.l_)((0,r.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,r.l_)((0,r.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,r.l_)((0,r.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,r.it)("style.",(()=>{(0,r.l_)((0,r.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.l_)((0,r.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.V4)("#toggle-border-orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,r.V4)("#toggle-border-orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,r.it)("style set as object",(()=>{(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,r.V4)("#toggle-bold"),(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,r.V4)("#toggle-bold"),(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,r.yY)("no parent element tests",(()=>{(0,r.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,r.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,r.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,r.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,r.it)("subscribe",(async()=>{a>0?console.warn("⏭️ skipped test that only passes the first time"):((0,r.l_)((0,r._8)("content-subscribe-sub0")).toBe(""),(0,r.l_)((0,r._8)("content-subscribe-sub0-with")).toBe("-1"))})),(0,r.yY)("passed in subscription",(()=>{(0,r.it)("increase subscription",(async()=>{const t=(0,r.L7)("passed-in-sub-increase"),n=(0,r.L7)("passed-in-sub-hide-show"),e=(0,r.L7)("passed-in-sub-hideShow-value");(0,r.l_)(e.textContent).toBe(""),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),n.click();let o=(0,r._8)("passed-in-output");(0,r.l_)(e.textContent).toBe("true"),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${o}||1`,"failed after hide"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${o}||2`),t.click(),o=(0,r._8)("passed-in-output"),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe(`0||${o}||0`),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${o}||1`,"failed third increase"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${o}||2`),n.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1","failed closing"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,r.it)("increase runs",(()=>{++a})),(0,r.it)("concat style",(()=>{(0,r.L7)("dynamic-border-width").value=2,(0,r.L7)("dynamic-border-color").value="white",(0,r.VJ)("#dynamic-border-width"),(0,r.VJ)("#dynamic-border-color"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,r.L7)("dynamic-border-width").value=1,(0,r.L7)("dynamic-border-color").value="blue",(0,r.VJ)("#dynamic-border-width"),(0,r.VJ)("#dynamic-border-color"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,r.it)("tagvar injections",(()=>{(0,r.l_)((0,r.L7)("inject-tagvar-0").innerText).toBe((0,r.L7)("inject-read-tagvar-0").innerText),(0,r.l_)((0,r.L7)("inject-tagvar-1").innerText).toBe((0,r.L7)("inject-read-tagvar-1").innerText),(0,r.l_)((0,r.L7)("inject-tagvar-2").innerText).toBe((0,r.L7)("inject-read-tagvar-2").innerText)})),(0,r.it)("animates",(async()=>{if(!document.querySelector("#content-toggle-fx"))return void console.warn("⚠️ Skipping animation test - Content view not loaded properly in test environment");(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"Initial state: should have 0 test elements").toBe(0),(0,r.V4)("#content-toggle-fx"),await s("[name=test-the-tester]",3),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After show click: should have 3 test elements").toBe(3);const t=(0,r.QX)(".animate__animated[name=test-the-tester]");(0,r.l_)(t,"After show click: should have at least 1 animating element").toBeGreaterThan(0),await(0,r._v)(o.c_/2),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"During animation: should still have 3 test elements").toBe(3),(0,r.l_)((0,r.dZ)("#outer-html-fx-test"),"During animation: inner html should be rendered").toBe("inner html tag"),await async function(t,n,e=5e3){const o=Date.now();for(;Date.now()-o<e;){if((0,r.QX)(`.animate__animated${t}`)===n)return await(0,r._v)(50),!0;await(0,r._v)(10)}throw new Error(`Timeout waiting for animations to complete. Expected ${n} animating elements matching '.animate__animated${t}', but found ${(0,r.QX)(`.animate__animated${t}`)}`)}("[name=test-the-tester]",0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After animation complete: should have 3 test elements").toBe(3),(0,r.l_)((0,r.QX)(".animate__animated[name=test-the-tester]"),"After animation complete: should have 0 animating elements").toBe(0),(0,r.V4)("#content-toggle-fx");const n=(0,r.QX)(".animate__animated[name=test-the-tester]");(0,r.l_)(n,"After hide click: should have at least 1 animating element").toBeGreaterThan(0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After hide click: should still have 3 test elements").toBe(3),await s("[name=test-the-tester]",0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After hide animation: should have 0 test elements").toBe(0),(0,r.l_)((0,r.QX)(".animate__animated[name=test-the-tester]"),"After hide animation: should have 0 animating elements").toBe(0)})),(0,r.it)("host",(()=>{let t=Number((0,r._8)("hostDestroyCount"));(0,r.l_)(isNaN(Number((0,r._8)("hostedContent")))).toBe(!1),(0,r.cS)("hostHideShow"),(0,r.l_)(Number((0,r._8)("hostDestroyCount"))).toBe(t+1),(0,r.l_)((0,r._8)("hostedContent")).toBe(""),(0,r.cS)("hostHideShow"),(0,r.l_)(isNaN(Number((0,r._8)("hostedContent")))).toBe(!1),(0,r.l_)(Number((0,r._8)("hostDestroyCount"))).toBe(t+1)}))}))},8428:(t,n,e)=>{e.r(n),e.d(n,{clickSpeedAmount:()=>o});var r=e(1078);(0,r.yY)("💯 counters",(()=>{const t="0"===(0,r.dy)("#🍄-slowChangeCount");(0,r.it)("basics",(()=>{const n=(0,r.L7)("set-main-counter-input");(0,r.l_)(n).toBeDefined(),n.value="0",(0,r.Sb)(n);const e=Number((0,r.dy)("#counters_render_count")),o=Number((0,r.dy)("#inner_counters_render_count"));(0,r.wG)("#conditional-counter",0);const s=(0,r._8)("👉-counter-sub-count");(0,r.di)("#❤️-increase-counter","#❤️-counter-display"),(0,r.l_)((0,r._8)("👉-counter-sub-count")).toBe(s),(0,r.l_)((0,r.dy)("#counters_render_count")).toBe((e+2).toString());let c=(o+2).toString(),i=(0,r.dy)("#inner_counters_render_count");(0,r.l_)(i).toBe(c);const l=(0,r.dy)("#🔥-init-counter");(0,r.l_)(l).toBe("1"),(0,r.di)("#❤️-inner-counter","#❤️-inner-display"),c=(e+4).toString(),i=(0,r.dy)("#counters_render_count"),(0,r.l_)(i).toBe(c),i=(0,r.dy)("#inner_counters_render_count"),c=(o+4).toString(),(0,r.l_)(i).toBe(c),(0,r.di)("#🥦-standalone-counter","#🥦-standalone-display"),c=(e+6).toString(),i=(0,r.dy)("#counters_render_count"),(0,r.l_)(i).toBe(c),i=(0,r.dy)("#inner_counters_render_count"),c=(o+4).toString(),(0,r.l_)(i).toBe(c),(0,r.wG)("#conditional-counter",1),(0,r.wG)("#conditional-display",1),t&&(0,r.l_)((0,r.dy)("#conditional-display")).toBe("2"),i=(0,r._8)("❤️💧-shallow-display"),(0,r.di)("#conditional-counter","#conditional-display"),(0,r.l_)(i).toBe((0,r._8)("❤️💧-shallow-display")),(0,r.di)("#❤️-inner-counter","#❤️-inner-display"),(0,r.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),a("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),a("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),a("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),a("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,r.it)("piped subject",(()=>{if(t){const t=(0,r.dy)("#🥦-standalone-display"),n=(0,r.dy)("#🪈-pipedSubject");(0,r.l_)(n).toBe(t,`firstRun failure pipe0. Expected "${n}" toBe empty-string`),(0,r.l_)((0,r.dy)("#🪈-pipedSubject-2")).toBe(t,"firstRun failure pipe2")}(0,r.V4)("#🥦-subject-increase-counter");const n=(0,r.dy)("#🪈-pipedSubject"),e=(0,r.dy)("#🥦-standalone-display");(0,r.l_)(n).toBe(e),(0,r.l_)((0,r.dy)("#🪈-pipedSubject-2")).toBe((0,r.dy)("#🥦-standalone-display"))}))}));const o=600;function a(t,n,e){const a=(0,r._8)(n),s=(0,r.L7)(t),c=(0,r.L7)(e);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)s.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)c.click();console.timeEnd(`⌚️ outer ${t}`);const i=(Number(a)+o).toString();(0,r.l_)((0,r._8)(n)).toBe(i)}},4236:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.it)("destroys",(async()=>{(0,r.l_)((0,r.QX)("#destroyCount")).toBe(1),(0,r.l_)((0,r.QX)("#toggle-destroys")).toBe(1),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(1);let t=Number((0,r.dy)("#destroyCount"));(0,r.V4)("#toggle-destroys");let n=Number((0,r.dy)("#destroyCount"));(0,r.l_)(n).toBe(t+2),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(0),t=n,(0,r.V4)("#toggle-destroys"),n=Number((0,r.dy)("#destroyCount")),(0,r.l_)(n).toBe(t),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(1)}))},3835:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.yY)("taggedjs-dump",(()=>{(0,r.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,r.L7)("taggedjs-dump-user-textarea");(0,r.l_)(t.value).toBe(""),t.value="{test:22}",(0,r.b$)(t),(0,r.l_)(t.value).toBe("{test:22}");const n=(0,r.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,r.l_)(n.length).toBe(1),(0,r.l_)(n[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,r.b$)(t);const e=(0,r.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,r.l_)(e.length).toBe(2),(0,r.l_)(e[0].innerText).toBe("test"),(0,r.l_)(e[1].innerText).toBe("testb"),t.value="",(0,r.b$)(t)}))}))},1157:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.it)("function in props",(async()=>{(0,r.di)("#fun_in_prop1","#fun_in_prop_display"),(0,r.di)("#fun_in_prop2","#fun_in_prop_display"),(0,r.di)("#fun_in_prop3","#fun_in_prop_display"),(0,r.l_)((0,r.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,r.V4)("#toggle-fun-in-child"),(0,r.V4)("#fun-parent-button"),(0,r.V4)("#toggle-fun-in-child"),(0,r.V4)("#fun-parent-button"),(0,r.l_)((0,r.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},6774:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.it)("🪞 mirror testing",(()=>{(0,r.wG)("#mirror-counter-display",2),(0,r.wG)("#mirror-counter-button",2);const t=Number((0,r._8)("mirror-counter-display"));(0,r.L7)("mirror-counter-button").click(),(0,r.l_)(t+1).toBe(Number((0,r._8)("mirror-counter-display"))),(0,r.wG)("#mirror-counter-display",2),(0,r.Lo)("#mirror-counter-display")}))},7994:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.it)("oneRender",(()=>{(0,r.l_)((0,r.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,r.di)("#👍-counter-button","#👍-counter-display"),(0,r.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,r.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,r.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,r.l_)((0,r.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},8749:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.yY)("🧳 props",(()=>{(0,r.it)("test duels",(()=>{(0,r.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,r.it)("child prop communications",(()=>{(0,r.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,r.it)("basics",(()=>{const t=(0,r.dy)("#propsOneLevelFunUpdate-🥩-display"),n=(0,r.dy)("#propsDebug-🥩-change-count-display");(0,r.l_)(n).toBe((Number(t)+1).toString());const e=(0,r.L7)("propsDebug-🥩-0-display").innerHTML,o=(0,r.L7)("propsDebug-🥩-1-display").innerHTML,a=(0,r.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,s=Number(e),c=Number(o),i=Number(a);(0,r.l_)(c).toBe(i),(0,r.l_)(s+2).toBe(c)})),(0,r.it)("letProp",(()=>{(0,r.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,r.dy)("#propsDebug-🥩-0-display")),n=(0,r.IO)("#propsDebug-🥩-2-button")[0]._click();(0,r.l_)(n).toBe("no-data-ever"),(0,r.l_)((0,r.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,r.l_)((0,r.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,r.L7)("propsDebug-🥩-1-button").click()})),(0,r.it)("props as functions",(()=>{const t=Number((0,r._8)("sync-prop-number-display"));(0,r.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,r.L7)("sync-prop-child-button").click(),(0,r.Fr)("#sync-prop-number-display",(t+2).toString()),(0,r.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,r.Fr)("#sync-prop-number-display",(t+2).toString()),(0,r.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},8530:(t,n,e)=>{e.r(n);var r=e(7582),o=function(t){function n(n,e){return t.call(this)||this}return(0,r.ZT)(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(e(229).w0),a={setInterval:function(t,n){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];var s=a.delegate;return(null==s?void 0:s.setInterval)?s.setInterval.apply(s,(0,r.ev)([t,n],(0,r.CR)(e))):setInterval.apply(void 0,(0,r.ev)([t,n],(0,r.CR)(e)))},clearInterval:function(t){var n=a.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},s=e(6821),c=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return(0,r.ZT)(n,t),n.prototype.schedule=function(t,n){var e;if(void 0===n&&(n=0),this.closed)return this;this.state=t;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,n)),this.pending=!0,this.delay=n,this.id=null!==(e=this.id)&&void 0!==e?e:this.requestAsyncId(o,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),a.setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;null!=n&&a.clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},n.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,(0,s.P)(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(o),i={now:function(){return(i.delegate||Date).now()},delegate:void 0},l=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=i.now,t}(),u=new(function(t){function n(n,e){void 0===e&&(e=l.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r}return(0,r.ZT)(n,t),n.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(l))(c),d=u,p=e(1910),h=e(626),g=new h.y((function(t){return t.complete()}));var f=e(7221),x=e(3575);function v(t){return t<=0?function(){return g}:(0,f.e)((function(n,e){var r=0;n.subscribe((0,x.x)(e,(function(n){++r<=t&&(e.next(n),t<=r&&e.complete())})))}))}var b=e(8770);var y=e(8412);var m=e(9972),w=e(7067);function _(t,n){return n?function(e){return(0,p.z)(n.pipe(v(1),(0,f.e)((function(t,n){t.subscribe((0,x.x)(n,b.Z))}))),e.pipe(_(t)))}:(0,m.z)((function(n,e){return(0,w.Xf)(t(n,e)).pipe(v(1),function(t){return(0,y.U)((function(){return t}))}(n))}))}var S=e(6983);function C(t,n,e){void 0===t&&(t=0),void 0===e&&(e=d);var r=-1;return null!=n&&((0,S.K)(n)?e=n:r=n),new h.y((function(n){var o,a=(o=t)instanceof Date&&!isNaN(o)?+t-e.now():t;a<0&&(a=0);var s=0;return e.schedule((function(){n.closed||(n.next(s++),0<=r?this.schedule(void 0,r):n.complete())}),a)}))}function k(t,n){void 0===n&&(n=u);var e=C(t,n);return _((function(){return e}))}var V=e(1078);(0,V.yY)("🫴 providers",(()=>{(0,V.it)("basics",(()=>{(0,V.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,V.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,V.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,V.it)("inner outer debug",(()=>{(0,V.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,V.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,V.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,V.yY)("host attributes",(()=>{(0,V.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,V.l_)(t).toBeDefined(),t){const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(255, 0, 0)")||n.borderColor.includes("red");(0,V.l_)(e).toBe(!0),(0,V.l_)(n.borderWidth).toBe("2px"),(0,V.l_)(n.borderStyle).toBe("solid")}})),(0,V.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,V.l_)(t).toBeDefined(),t){const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(0, 128, 0)")||n.borderColor.includes("green");(0,V.l_)(e).toBe(!0),(0,V.l_)(n.borderWidth).toBe("2px"),(0,V.l_)(n.borderStyle).toBe("solid")}})),(0,V.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,V.l_)(t).toBeDefined(),t&&(0,V.l_)(t.innerHTML.trim()).toBe("wonderful")})),(0,V.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),n=document.getElementById("in-cycle-child");(0,V.l_)(t).toBeDefined(),(0,V.l_)(n).toBeDefined(),t&&n&&(0,V.l_)(t.contains(n)).toBe(!0)})),(0,V.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),n=document.getElementById("in-cycle-parent");if((0,V.l_)(t).toBeDefined(),(0,V.l_)(n).toBeDefined(),t&&n){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,V.wS)(t),await k(0);const e=window.getComputedStyle(n),r=e.borderColor.includes("blue")||e.borderColor.includes("rgb(0, 0, 255)");(0,V.l_)(r).toBe(!0,`in-cycle-parent should be blue not ${e.borderColor}`)}})),(0,V.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),n=document.getElementById("in-cycle-child");if((0,V.l_)(t).toBeDefined(),(0,V.l_)(n).toBeDefined(),t&&n){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0})),await k(0);const e=window.getComputedStyle(n),r=e.borderColor.includes("purple")||e.borderColor.includes("rgb(128, 0, 128)");(0,V.l_)(r).toBe(!0)}}))}))}))},8232:(t,n,e)=>{e.d(n,{v:()=>o});var r=e(2387);const o=({renderCount:t,name:n})=>r.dy.dom(a.allStrings21541[0],n,n+"_render_count",t),a={allStrings21541:[[{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"("},{nn:"text",v:0},{nn:"text",tc:" render count "},{nn:"span",at:[["id",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]},{nn:"text",tc:")"}]}]}]]}},8451:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.it)("basic app subject",(()=>{const t=(0,r.dZ)("#app-counter-subject-value-display");(0,r.V4)("#app-counter-subject-button");const n=(0,r.dZ)("#app-counter-subject-value-display");(0,r.l_)(Number(t)).toBe(Number(n)-1)}))},3168:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.yY)("🔀 tagSwitching",(()=>{(0,r.it)("0",(()=>{(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(1),(0,r.l_)((0,r.o5)("#tag-switch-dropdown")).toBe(1),(0,r.l_)((0,r.o5)("#tagSwitch-1-hello")).toBe(2),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,r.it)("1",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="1",t._change({target:t}),(0,r.wG)("#tagSwitch-1-hello",5),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("2",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="2",t._change({target:t}),(0,r.wG)("#tagSwitch-1-hello",2),(0,r.wG)("#tagSwitch-2-hello",4),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("3",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="3",t._change({target:t}),(0,r.l_)((0,r.o5)("#tagSwitch-1-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.wG)("#tagSwitch-3-hello",7),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("4",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="",t._change({target:t}),(0,r.wG)("#select-tag-above",1),(0,r.wG)("#tag-switch-dropdown",1),(0,r.wG)("#tagSwitch-1-hello",2),(0,r.wG)("#tagSwitch-2-hello",0),(0,r.wG)("#tagSwitch-3-hello",0)}))}))},8525:(t,n,e)=>{function r(t){const n=((new Error).stack||"").split("\n")[3]||"";return{toBe(e,r){if(t!==e){const o="function"==typeof r?r():r,a=o||`Expected ${JSON.stringify(e)} but got ${JSON.stringify(t)}`,s=new Error(a);throw s.stack=a+"\n"+n+(s.stack?"\n"+s.stack:""),s}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(n){if("number"!=typeof t||!(t>n))throw new Error(`Expected ${t} to be greater than ${n}`)},toHaveLength(n){const e=t;if(!("length"in e)||e.length!==n)throw new Error(`Expected length ${n} but got ${e.length||"undefined"}`)},not:{toBe(n){if(t===n)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(n)}`)}}}}e.d(n,{l:()=>s});const o=void 0!==globalThis.vitest,a=o?globalThis.expect:null;const s=o&&a?function(t,n){if(void 0!==n){const e=a(t);return{toBe(t){try{e.toBe(t)}catch(t){throw new Error(n)}},toBeDefined(){try{e.toBeDefined()}catch(t){throw new Error(n)}},toBeUndefined(){try{e.toBeUndefined()}catch(t){throw new Error(n)}},toBeGreaterThan(t){try{e.toBeGreaterThan(t)}catch(t){throw new Error(n)}},toHaveLength(t){try{e.toHaveLength(t)}catch(t){throw new Error(n)}},not:{toBe(t){try{e.not.toBe(t)}catch(t){throw new Error(n)}}},to:{be:{greaterThan:t=>{try{e.toBeGreaterThan(t)}catch(t){throw new Error(n)}}}}}}const e=a(t);return{...e,to:{be:{greaterThan:n=>a(t).toBeGreaterThan(n)}},toBe:t=>e.toBe(t)}}:function(t,n){if(void 0!==n){const e=r(t);return{toBe(t){e.toBe(t,n)},toBeDefined(){e.toBeDefined()},toBeUndefined(){e.toBeUndefined()},toBeGreaterThan(t){e.toBeGreaterThan(t)},toHaveLength(t){e.toHaveLength(t)},not:{toBe(t){e.not.toBe(t)}},to:{be:{greaterThan:t=>{e.toBeGreaterThan(t)}}}}}const e=r(t);return{...e,to:{be:{greaterThan:t=>{e.toBeGreaterThan(t)}}}}}},1078:(t,n,e)=>{e.d(n,{L7:()=>b,wS:()=>f,VJ:()=>g,V4:()=>l,cS:()=>u,dQ:()=>d,QX:()=>a,yY:()=>L,o5:()=>s,l_:()=>o.l,wG:()=>S,Fr:()=>k,Lo:()=>C,T_:()=>i,dy:()=>x,_8:()=>y,it:()=>I,WB:()=>p,Sb:()=>h,IO:()=>c,_v:()=>_,di:()=>T,Iq:()=>J,dZ:()=>v,b$:()=>w});var r=e(9995),o=e(8525);function a(t){return document.querySelectorAll(t).length}const s=a;function c(t){return document.querySelectorAll(t)}function i(t){return c(t).forEach((t=>t.focus()))}function l(t){[...c(t)].forEach((t=>t.click()))}function u(t){l("#"+t)}function d(t,n=0){c(t)[n].click()}function p(t,n){const e=new KeyboardEvent("keydown",{key:n,bubbles:!0});t.dispatchEvent(e)}function h(t,n){const e=new KeyboardEvent("keyup",{key:n,bubbles:!0});t.dispatchEvent(e)}function g(t,n=0){f(c(t)[n])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function x(t){let n="";return c(t).forEach((t=>n+=t.innerHTML)),n}function v(t){let n="";return c(t).forEach((t=>n+=t.textContent)),n}function b(t){return document.getElementById(t)}function y(t){const n=document.getElementById(t);return n?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const m=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(m)}function _(t){return new Promise((n=>setTimeout(n,t)))}function S(t,n,e){const r=document.querySelectorAll(t),a=r.length;return e=e||`Expected ${n} elements to match query ${t} but found ${a}`,(0,o.l)(a).toBe(n,e),r}function C(...t){const n=t.reduce(((t,n)=>{const e=document.querySelectorAll(n);return t.push(...e),t}),[]);if(0===n.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const e=n.pop().innerHTML;n.forEach((t=>(0,o.l)(t.innerHTML).toBe(e)))}function k(t,n){(0,o.l)(x(t)).toBe(n)}function V(t,n,{elementCountExpected:e}={elementCountExpected:1},r,a,s=0){(0,o.l)(t.length).toBe(e,(()=>`Expected ${r} to be ${e} elements but is instead ${t.length}`)),(0,o.l)(n.length).toBe(e,(()=>`Expected ${a} to be ${e} elements but is instead ${n.length}`)),t.forEach(((t,n)=>{const e=document.querySelectorAll(a)[n];(0,o.l)(document.body.contains(e)).toBe(!0,`The selected element ${a} is no longer an element on the document body BEFORE clicking ${r}`);let c=Number(e?.innerText);(0,o.l)(typeof t.click).toBe("function"),t.click(),(0,o.l)(e).toBeDefined(),(0,o.l)(document.body.contains(e)).toBe(!0,`The selected element ${a} is no longer an element on the document body AFTER clicking ${r}`);let i=c+1;c=Number(e.innerText),(0,o.l)(document.body.contains(e)).toBe(!0),(0,o.l)(i).toBe(c,(()=>`After click ${r}, counter test ${s+1} of ${s+2} expected ${a} to be value ${i} but it is ${c}`)),t.click(),c=Number(e?.innerText),++i,(0,o.l)(i).toBe(c,(()=>`Counter test ${s+2} of ${s+2} expected ${a} to increase value to ${i} but it is ${c}`))}))}function T(t,n,{elementCountExpected:e}={elementCountExpected:1}){return V(document.querySelectorAll(t),document.querySelectorAll(n),{elementCountExpected:e},t,n)}function J(...t){const[n,e]=t.shift();let r=S(e,1),a=S(n,1);const s=r[0].innerText;V(a,r,{elementCountExpected:1},n,e);let c=2;t.forEach((([t,i],l)=>{r=S(i,1),a=S(t,1);let u=r[0],d=u.innerText;const p=(Number(s)+c).toString();(0,o.l)(d).toBe(p,(()=>`Expected second ${i} increase provider to be increased to ${s} but got ${d}`)),V(a,r,{elementCountExpected:1},n,e,l+2),u=r[0],d=u.innerText;const h=c+2;(0,o.l)(d).toBe((Number(s)+h).toString(),(()=>`Expected ${i} innerText to be ${Number(s)+h} but instead it is ${d}`)),c+=2}))}const B=void 0!==globalThis.vitest,I=B?globalThis.it:r.it,L=B?globalThis.describe:r.y;B&&globalThis.beforeEach,B&&globalThis.afterEach},9995:(t,n,e)=>{e.d(n,{executeBrowserTests:()=>l,it:()=>c,y:()=>i});e(8525);let r=null,o=new Map,a=[];const s=void 0!==globalThis.vitest,c=s?globalThis.it:(t,n)=>{const e={name:t,fn:n,suite:r};a.push(e);const s=o.get(r)||[];s.push(e),o.set(r,s)},i=s?globalThis.describe:(t,n)=>{const e=r;r=t,o.set(t,[]),n(),r=e};async function l(){let t=0,n=0;const e=[];console.log(`🧪 Running ${a.length} tests...\n`);const s=new Map;for(const t of a){const n=t.suite||null,e=s.get(n)||[];e.push(t),s.set(n,e)}for(const[r,o]of s){r&&console.log(`${r}`);for(const a of o){const o=r?"  ":"";try{await a.fn(),t++,console.log(`${o}✅ ${a.name}`)}catch(t){n++,e.push({test:a.name,suite:a.suite,error:t}),console.error(`${o}❌ ${a.name}`),console.error(t)}}r&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${n} failed`),e.length>0&&(console.error("\n❌ Failed Tests:"),e.forEach((({test:t,suite:n,error:e})=>{const r=n?`${n} > ${t}`:t;if(console.error(`\n${r}:`),console.error(e),e.stack){e.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),a=[],o.clear(),r=null,0===n}},3337:(t,n,e)=>{e.r(n);var r=e(1078);function o(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let n=0;n<500;n++)t.value="aaa - "+n,(0,r.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const n=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)n[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const e=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)e[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,r.yY)("☑️ todos",(function(){const t=(0,r.IO)(".new-todo")[0];(0,r.it)("todos add one remove one",(async function(){(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),(0,r.V4)("#todo-view-all-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),(0,r.l_)(t).toBeDefined(),t.value="one",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(1),(0,r.V4)("button.destroy"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0)})),(0,r.it)("todos basic",(async function(){window.location.hash="#/",await(0,r._v)(1),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),t.value="one",(0,r.WB)(t,"Enter"),(0,r.V4)("input.toggle"),(0,r.V4)("button.destroy"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),t.value="one",(0,r.WB)(t,"Enter"),t.value="two",(0,r.WB)(t,"Enter");const n=(0,r.IO)("input.toggle")[1];n.click(),(0,r.l_)(n.checked).toBe(!0),t.value="three",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.V4)("#todo-view-active-link"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.l_)(window.location.hash).toBe("#/active"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(2),(0,r.V4)("#todo-view-completed-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(1),(0,r.V4)("#todo-view-all-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(2),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(1),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(0)})),(0,r.it)("todos editing",(function(){t.value="one",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0);let n=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,r.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(n),(0,r.l_)((0,r.IO)("input.new-todo").length).toBe(1),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(1),(0,r.T_)("input#edit-todo-input");const e=(0,r.IO)("input#edit-todo-input")[0];e.value="two",(0,r.WB)(e,"Enter"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(1),(0,r.l_)((0,r.IO)("input.new-todo").length).toBe(1),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0)})),(0,r.it)("⌚️ todos speedometer",o)}))},702:(t,n,e)=>{e.r(n);var r=e(1078);(0,r.yY)("⌚️ watch tests",(()=>{const t=(0,r.dy)("#🍄-slowChangeCount"),n="0"===t;(0,r.it)("basic",(async()=>{const e=Number((0,r._8)("watch-testing-num-display"));(0,r.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("false"),n?((0,r.l_)((0,r.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe("false"),(0,r.l_)((0,r.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,r.l_)((0,r.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,r.l_)(Number((0,r.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,r.l_)((0,r.dy)("#🦷-watchTruthAsSub")).toBe((0,r.dy)("#🦷-truthSubChangeCount"))),(0,r.V4)("#watch-testing-num-button"),(0,r.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,r.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,r.l_)((0,r.dy)("#🍄‍🟫-subjectChangeCount")).toBe((e+2).toString()),(0,r.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const o=Number((0,r.dy)("#🦷-truthChangeCount"));(0,r.V4)("#🦷-truthChange-button");let a=(o+1).toString();(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("true"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),a=(o+1).toString(),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("false"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),a=(o+2).toString(),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("true"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),(0,r.V4)("#🦷-reset-button");const s=(0,r.dy)("#🦷-watchTruth"),c=(0,r.dy)("#🦷-watchTruthAsSub");(0,r.l_)(c).toBe(s)}))}))},2387:(t,n,e)=>{e.d(n,{Ef:()=>T,_i:()=>ne,xQ:()=>Tt,v0:()=>Pr,KU:()=>Er,sj:()=>D,tg:()=>bo,IX:()=>to,tv:()=>Jn,uz:()=>Wr,_:()=>Yr,G7:()=>wn,aj:()=>Ct,Wq:()=>et,KR:()=>_n,iB:()=>Co,FU:()=>xr,fm:()=>Io,ho:()=>ko,dy:()=>go,Kn:()=>lt,DE:()=>st,RW:()=>Rr,ev:()=>Zr,Zx:()=>fr,nc:()=>Qr,J8:()=>mo,Kf:()=>W,a:()=>Xr,td:()=>Lr,SB:()=>Or,$q:()=>Mr,fo:()=>Hr,Ld:()=>Jr,Te:()=>Br,_q:()=>ee,bX:()=>yo,YP:()=>Dr,Ut:()=>Ar});const r=":tagvar",o=":";function a(t){if(t.startsWith("class."))return"class";const n=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==n?n:!!t.startsWith("style.")&&"style"}const s=new RegExp(r+"(\\d+)"+o,"g");function c(t){return t.search&&t.startsWith(r)?t.search(s):-1}const i=/(:tagvar\d+:)/,l="ondoubleclick",u=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,d=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function p(t){const n=[],e=[],a=[];let s=null,c=-1,l=0;const p=new RegExp(d,"g");for(t=function(t){return t.replace(h,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(t);l<t.length;){const d=p.exec(t);if(!d)break;const[h,f,v]=d,y=h.startsWith("</"),m=h.endsWith("/>");if(l<d.index){const n=t.slice(l,d.index);if(n.trim()){const t=x(n);for(let n of t)n.startsWith(r)&&n.search(i)>=0&&-1===n.search(_)&&(n=r+ ++c+o),g(s,e,n)}}if(l=d.index+h.length,y){s=a.pop()||null;continue}const w=[];let S;for(;null!==(S=u.exec(v));)c=b(S,c,n,w);const C={nn:f};w.length&&(C.at=w),s?(s.ch||(s.ch=[]),s.ch.push(C)):e.push(C),m||(a.push(s),s=C)}if(l<t.length){const n=t.slice(l);if(n.trim()){const t=x(n);for(const n of t)n.startsWith(r)&&++c,g(s,e,n)}}return e}const h=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function g(t,n,e){!function(t,n,e){t?(t.ch||(t.ch=[]),t.ch.push(e)):n.push(e)}(t,n,{nn:"text",tc:f(e)})}function f(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function x(t){return t.split(i).filter(v)}function v(t){return""!==t}function b(t,n,e,c){const i=t[1]||t[3]||t[5];let u=t[2]||t[4]||t[6];if(void 0===i)return n;const d=""!==t[2],p=void 0===u&&d,h=i.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===l.length&&t===l?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(i.slice(0,r.length)===r){const t=r+ ++n+o;return e.push(["at",t]),c.push([t]),n}if(t[0].startsWith(i)&&t[0].slice(i.length,t[0].length).search(/\s+$/)>=0)return c.push([g]),n;const a=t[3];if(a.search(_)>=0){u=a;const t=[g,u];return c.push(t),n}u=r+ ++n+o}d||(u=t[2]);const f=u.split(m).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(s)>=0&&++n})));const x=[g,u],v=a(h);return v&&x.push(v),"style"===g?(c.unshift(x),n):(c.push(x),n)}const y=new RegExp(r+"(\\d+)"+o,"gi"),m=new RegExp("("+r+"\\d+"+o+")","gi"),w=r.slice(0,r.length-1),_=new RegExp(w+"&#x72;(\\d+)"+o,"gi"),S=w+"&#x72;$1"+o;function C(t,n){const e=function(t,n){const e=t;return function(t,n){const e=[];for(let a=0;a<t.length;++a){const s=t[a].replace(y,S);a<n.length?e.push(s+r+a+o):e.push(s)}return function(t,n,e){const a=e.length-n.length;if(a>0)for(let e=a;e>0;--e)t.push(r+(n.length+e-1)+o)}(e,t,n),e}(e,n)}(t,n).join("");return p(e)}const k="";var V,T;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(V||(V={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(T||(T={}));const J={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},B="ch";function I(t,n,e=[],r=[]){const o=t;for(let t=0;t<o.length;t++){const a=[...r,t],s=o[t];if(s.at){const t=s.at;s.at=j(t,n)}if(s.ch){const t=s.ch,r=[...a,B];s.ch=I(t,n,e,r)}t=L(s,n,o,t)}return o}function L(t,n,e,a){if("text"!==t.nn)return a;const c=t;let i,l=c.tc;if(typeof l!==V.string)return a;for(;null!==(i=s.exec(l));){const t=i[1],c=parseInt(t,10);if(!isNaN(c)&&c<n){const t=r+c+o,n=l.slice(i.index+t.length);e.splice(a,1,{nn:"text",v:c}),l=n,s.lastIndex=0}}return c.tc=l,a}function j(t,n){const e=[];for(const o of t){const[t,a,s]=o;if(t.startsWith(r)){const o=parseInt(t.replace(r,""),10);if(!isNaN(o)&&o<n){e.push([{tagJsVar:o}]);continue}}if(typeof a===V.string&&a.startsWith(r)){const o=parseInt(a.replace(r,""),10);if(!isNaN(o)&&o<n){e.push([t,{tagJsVar:o},s]);continue}}e.push(o)}return e}function P(t){return t.length}const E={};function A(t,n){const e=function(t){const n=t.map(P);return n.push(t.length),Number(n.join(""))}(t),r=E[e],o=r&&function(t,n,e){if(e&&e.strings.length===t.length&&e.strings.every(((n,e)=>n===t[e]))&&e.values.length===n.length)return!0;return!1}(t,n,r);if(o)return r.domMetaMap;const a=I(C(t,n),n.length),s={interpolation:void 0,string:void 0,strings:t,values:n,domMetaMap:a};return E[e]=s,a}const O=function(){};function D(t){N.length&&(N[N.length-1].paintRemoves.push(...q),q=[]),N.push({promise:t,paintRemoves:q}),q=[]}let N=[],$=[],q=[],H=[],M=[],R=[];const z={locks:0,removeLocks:0};function X(t,n){n.textContent=t}function W(){if(!(z.locks>0))return function(){(function(){if(N.length){const t=N.map((t=>t.promise.then((()=>{const n=t.paintRemoves;for(const t of n)t[0](...t[1])}))));N=[];const n=q;return Promise.all(t).then((()=>{for(const t of n)t[0](...t[1])}))}for(const t of q)t[0](...t[1])})(),q=[];for(const t of H)t[0](...t[1]);for(const t of M)t[0](...t[1]);for(const t of $)t[0](...t[1])}(),void function(){$=[],H=[],M=[];const t=R;R=[];for(const n of t)n[0](...n[1])}()}function U(t,n){q.push([Y,[t,n]])}function Y(t,n){t.parentNode.removeChild(t)}function F(t,n){t.parentNode.insertBefore(n,t)}function Q(t,n){t.appendChild(n)}const G="object"==typeof document&&document.createElement("div");function K(t){return G.innerHTML=t,document.createTextNode(G.innerHTML)}function Z(t,n,e=O){const r=K(n);F(t,r),e(r)}function tt(t,n,e=O){G.innerHTML=n;const r=document.createTextNode(G.textContent);F(t,r),e(r)}function nt(t,n,e){G.innerHTML=n;const r=document.createTextNode(G.textContent);Q(t,r),e(r)}function et(t,n){const e=rt(t.subContext,n);return delete t.subContext,e}function rt(t,n){t.deleted=!0;const e=t.appendMarker;if(e&&(U(e,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const r=t.contextItem;return r.tagJsVar.delete(r,n),76}function ot(t){if(!t)return!1;switch(t.tagJsType){case J.dom:case J.tag:case J.templater:return!0}return!1}function at(t){const n=t?.tagJsType;return n===J.tagComponent||n===J.stateRender}function st(t){return lt(t)&&typeof t.subscribe===T.function}function ct(t){return t&&it(t.then)}function it(t){return typeof t===T.function}function lt(t){return typeof t===T.object&&null!==t}function ut(t){return Array.isArray(t)}function dt(t){return t.renderCount=t.renderCount||0,t.global={}}function pt(){return It.stateConfig.support}function ht(t){return It.stateConfig.support=t}function gt(t){let n=t;for(;n.ownerSupport&&!at(n.templater);)n=n.ownerSupport;return n.context.global.newest||n}function ft(...t){return t}function xt(t){const n=It.stateConfig;return n.states[n.statesIndex]=t,++n.statesIndex,t(ft)}function vt(t){const n=It.stateConfig,e=n.statesIndex,r=gt(n.prevSupport).states[e];let o=[];r((function(...t){return o=t,t}));return n.states[n.statesIndex]=t,++n.statesIndex,t((function(...t){return o}))}function bt(t){const n=It.stateConfig;n.handlers.handler=St,n.handlers.statesHandler=xt,n.rearray=[],n.stateArray=[],n.states=[],n.statesIndex=0,ht(t)}function yt(t,n,e){const r=It.stateConfig;r.rearray=e,r.stateArray=[],r.states=[],r.statesIndex=0,r.handlers.handler=_t,r.handlers.statesHandler=vt,r.prevSupport=n,ht(t)}class mt{}function wt(t){const n=t.callback;if(!n)return t.defaultValue;const[e]=function(t){const[n]=t(mt),[e]=t(n);return[n,e]}(n);return e}function _t(){const t=It.stateConfig,n=t.rearray[t.stateArray.length];return t.stateArray.push(n),n.defaultValue}function St(t){const n=It.stateConfig;let e=t;if(typeof t===T.function&&(e=t()),typeof e===T.function){const t=e;e=function(...n){return t(...n)},e.original=t}const r={get:function(){return wt(r)},defaultValue:e};return n.stateArray.push(r),e}function Ct(t){const n=new Tt;return n.subscribeWith=n=>{const e=[],r=[],o=(o,a)=>{e[a]=!0,r[a]=o;if(e.length===t.length){for(const t of e)if(!t)return;n(r,s)}},a=[...t],s=a.shift().subscribe((t=>o(t,0))),c=a.map(((t,n)=>t.subscribe((t=>o(t,n+1)))));return s.subscriptions=c,s},n}function kt(t,n,e){const r=Tt.globalSubCount$;Tt.globalSubCount$.next(r.value+1);const o=function(){o.unsubscribe()};return o.callback=n,o.subscriptions=[],o.unsubscribe=function(){return function(t,n,e){!function(t,n){const e=t.findIndex((t=>t.callback===n));-1!==e&&t.splice(e,1)}(n,e);const r=Tt.globalSubCount$;Tt.globalSubCount$.next(r.value-1),t.unsubscribe=()=>t;const o=t.subscriptions;for(const t of o)t.unsubscribe();return t}(o,e,n)},o.add=t=>(o.subscriptions.push(t),o),o.next=t=>{n(t,o)},o}function Vt(t,n,e){const r=[...n],o=r.shift(),a=t=>{if(r.length)return Vt(t,r,e);e(t)};let s=a;const c=o(t,{setHandler:t=>s=t,next:a});s(c)}class Tt{constructor(t,n){this.value=t,this.onSubscription=n,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this)}subscribe(t){const n=kt(0,t,this.subscribers),e=this.subscribeWith;if(e){if(this.methods.length){const e=t;t=t=>{Vt(t,this.methods,(t=>e(t,n)))}}return e(t)}return this.subscribers.push(n),this.onSubscription&&this.onSubscription(n),n}next(t){this.value=t,this.emit()}emit(){const t=this.value,n=this.subscribers;for(const e of n)e.callback(t,e)}toPromise(){return new Promise((t=>{this.subscribe(((n,e)=>{e.unsubscribe(),t(n)}))}))}toCallback(t){const n=this.subscribe(((e,r)=>{const o=r?.unsubscribe;o?o():setTimeout((()=>n.unsubscribe()),0),t(e)}));return this}pipe(...t){const n=new Tt(this.value);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return Ct(t.map((t=>{if(st(t))return t;return new Tt(t,(n=>(n.next(t),n)))})))}}Tt.globalSubCount$=new Tt(0);function Jt(t){Object.defineProperty(t,"value",{set(n){t._value=n,t.emit()},get:()=>t._value})}const Bt=new Tt(void 0,(function(t){pt()||t.next()})),It={stateConfig:{stateArray:[],version:Date.now(),handlers:{handler:St,statesHandler:xt}},tagClosed$:Bt};function Lt(t,n,e){const r=t.tagJsVar.checkValueChange(n,t,e);return-1===r||co(n,t,e,r),r}function jt(t,n,e,r,o){const a=n.context;a.locked=!0,e.element=r,eo(e),function(t,n,e,r,o){n.tagJsVar.processInit(t,n,e,r,o)}(t,e,n,r,o),ro(),delete a.locked,e.value=t}function Pt(t){switch(t){case void 0:case!1:case null:return k}return t}function Et(t,n,e){return t===n.value?-1:Lt(n,t,e)}function At(t,n,e){"object"!=typeof t[n]&&(t[n]={});for(const r in e)H.push([$t,[t,n,r,e[r]]]);if(t[n].setProperty)for(const r in e)H.push([Nt,[t,n,r,e[r]]])}function Ot(t,n,e){t.setAttribute(n,"")}function Dt(t,n,e){if(void 0!==e&&!1!==e&&null!==e)return lt(e)?At(t,n,e):void t.setAttribute(n,e);t.removeAttribute(n)}function Nt(t,n,e,r){t[n].setProperty(e,r)}function $t(t,n,e,r){t[n][e]=r}function qt(t,n,e,r){switch(r){case"autofocus":return void H.push([Xt,[e]]);case"autoselect":return void H.push([zt,[e]]);case"style":{const r=t.split(".");return void H.push([Ht,[e,r,n]])}case"class":return void function(t,n,e){const r=t.split(".");if(r.shift(),n){for(const t of r)H.push([Mt,[e,t]]);return}for(const t of r)H.push([Rt,[e,t]])}(t,n,e)}throw new Error(`Invalid special attribute of ${r}. ${t}`)}function Ht(t,n,e){const r=n[1];t.style[r]=e,t.style.setProperty(r,e)}function Mt(t,n){t.classList.add(n)}function Rt(t,n){t.classList.remove(n)}function zt(t){t.select()}function Xt(t){t.focus()}function Wt(t,n){const e=function(t,n,e=[]){const r=t.context;e.push({support:t,renderCount:r.renderCount,provider:n});const o=n.children;for(let t=o.length-1;t>=0;--t){const r=o[t],a=r.context;e.push({support:r,renderCount:a.renderCount,provider:n})}return e}(t,n);return e}function Ut(t){return t.support}function Yt(t,n){return Ft(t,n)}function Ft(t,n){if(null===t||typeof t!==T.object)return t;if(n<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const e=ut(t)?[]:Object.create(Object.getPrototypeOf(t));if(ut(t))for(let r=0;r<t.length;r++)e[r]=Ft(t[r],n-1);else for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=Ft(t[r],n-1));return e}function Qt(t,n,e){return Gt(t,n,e)}function Gt(t,n,e){return!(t!==n&&(r=t,o=n,!it(r)||!it(o)||r.toString()!==o.toString()))||(e<0||typeof t===T.object&&typeof n===T.object&&(t instanceof Date&&n instanceof Date?t.getTime()===n.getTime():ut(t)&&ut(n)?function(t,n,e){if(t.length!==n.length)return!1;for(let r=0;r<t.length;r++)if(!Gt(t[r],n[r],e-1))return!1;return!0}(t,n,e-1):!ut(t)&&!ut(n)&&function(t,n,e){const r=Object.keys(t),o=Object.keys(n);if(0===r.length&&0===o.length)return!0;if(r.length!==o.length)return!1;for(const a of r){if(!o.includes(a)||!Gt(t[a],n[a],e-1))return!1}return!0}(t,n,e-1)));var r,o}function Kt(t,n){const e=t.length;for(let r=0;r<e;++r){const e=t[r],o=n[r];if(ut(e)&&ut(o)){if(e===o)continue;return 3}if(typeof e!==T.function||typeof o!==T.function)if(typeof e!==T.object){if(e!==o)return 3.3}else if(typeof n===T.object){const t=Object.entries(e);for(const n of t){if(!Zt(n,o))return 3.1}}}return!1}function Zt([t,n],e){const r=e[t];return typeof n===T.function&&typeof r===T.function||r===n}function tn(t){return t.map(nn)}function nn(t,n){const e=t,r=t?.tagJsType;if(r)switch(r){case J.signal:case J.subscribe:case J.stateRender:return;case J.dom:case J.tag:case J.templater:return tn(e.values)}return ut(t)?tn(e):Yt(t,n)}function en(t){return nn(t,se)}function rn(t){return nn(t,ce)}function on(t,n,e){const r={templater:t,context:n,castedProps:e,appSupport:void 0},o=n.global;return o.blocked=[],o.destroy$=new Tt,r}function an(t,n,e,r){n.appSupport=e;const o=t.props;return o&&(n.propsConfig=function(t,n,e){const r=t.templater;if(r.tagJsType!==J.stateRender){switch(r.propWatch){case ne.IMMUTABLE:return t.propsConfig={latest:n,castProps:e};case ne.SHALLOW:return t.propsConfig={latest:n.map(en),castProps:e}}return t.propsConfig={latest:n.map(rn),castProps:e}}}(n,o,r)),n}function sn(t,n){const e=n.providers;if(e)for(const t of e)for(let e=t.children.length-1;e>=0;--e){t.children[e].context.global===n&&t.children.splice(e,1)}n.destroy$&&n.destroy$.next(),t.context.renderCount=0}function cn(t,n){for(const e of t){const t=e.lastArray;if(t){cn(t,n);continue}const r=e.value;if(r?.tagJsType===J.subscribe){r.delete(e,n),e.deleted=!0;continue}const o=e.global;if(!o)continue;const a=o.newest,s=o.subscriptions;s&&s.forEach(un),at(a.templater)&&sn(a,o);cn(e.contexts,a)}}function ln(t,n=[],e=[]){for(const r of t){const t=r.global;if(!t)continue;const o=t.newest;if(o){n.push(o);const r=t.subscriptions;r&&e.push(...r)}const a=r.contexts;a&&ln(a,n,e)}return{tags:n,subs:e}}function un(t){t.unsubscribe()}function dn(t,n,e,r){const o=t.length-1,a=n-r,s=a<0||o<a,c=e[n];if(s)return pn(c),1;const i=function(t,n,e,r,o){const a=n&&t!==n.arrayValue;if(a)return pn(e),r.splice(o,1),2;return 0}(c.value.arrayValue,t[n],c,e,n);return i}function pn(t){!function(t,n){if(t){return void bn(t.oldest,t)}const e=n.simpleValueElm;delete n.simpleValueElm,U(e)}(t.global,t)}function hn(t,n){return ut(t)?-1:(gn(n),9)}function gn(t){fn(t,t.lastArray)}function fn(t,n){for(let t=0;t<n.length;++t)pn(n[t]);delete t.lastArray}function xn(t,n){const e=t.global;!function(t,n){for(const e of t){if(e.locked)continue;if(e.withinOwnerElement){const t=e.tagJsVar;if(t&&"host"===t.tagJsType){const n=e.supportOwner;t.delete(e,n)}continue}const t=e.lastArray;if(t){fn(e,t);continue}const r=e.simpleValueElm;if(r){delete e.simpleValueElm,U(r);continue}const o=e.global;if(void 0===o)continue;if(!0===o.deleted)continue;o.deleted=!0;o.oldest&&xn(e,n)}}(t.contexts,n),function(t){const n=t.htmlDomMeta;for(let t=n.length-1;t>=0;--t){vn(n[t]),n.splice(t,1)}}(e)}function vn(t){const n=t.marker;n&&U(n);const e=t.domElement;e&&U(e,"destroyClone")}function bn(t,n){const e=t.context;n.deleted=!0,e.renderCount=0;const r=[];return cn(e.contexts,t),n.destroy$&&sn(t,n),xn(e,r),r}function yn(t,n){const e=mn(t,n);return!(e||!n.templater.tag?._innerHTML||!mn(t.outerHTML,n))||e}function mn(t,n){const e=t.templater,r=n.templater,o=e?.tag||t,a=r.tag;if(e?.tagJsType===J.stateRender)return e.dom===r.dom;switch(o.tagJsType){case J.dom:return a?.tagJsType===J.dom&&function(t,n){const e=t.dom,r=n.dom;return e===r}(o,a);case J.tag:{const e=function(t,n,e,r){const o=t.strings,a=n.strings;if(o.length!==a.length)return!1;if(!o.every(((t,n)=>a[n].length===t.length)))return!1;const s=e.templater.values||t.values,c=r.templater.values||n.values;return function(t,n){const e=t.length===n.length;if(!e)return!1;const r=n.every((function(n,e){const r=t[e];if(typeof n===T.function&&typeof r===T.function){return!!(n.toString()===r.toString())}return!0}));if(r)return!0;return!1}(s,c)}(o,a,t,n);return e}}throw new Error(`unknown tagJsType of ${o.tagJsType}`)}function wn(t,n){const e=n.global,r=e?.newest;if(ot(t)){return yn(t,r)?(so(n,t,r),-1):(bn(r,e),dt(n),7)}const o=t?.tagJsType;if(o){return!0===so(n,t,e.newest.ownerSupport)?-1:88}return _n(n),8}function _n(t){const n=t.global,e=n?.newest;bn(e,n),delete t.global,t.renderCount=0}function Sn(t,n,e,r){const o={value:t,valueIndex:n.length,valueIndexSetBy:"addOneContext",tagJsVar:hr(t),withinOwnerElement:e,parentContext:r};return n.push(o),o}function Cn(t,n,e,r,o,a,s){const c=document.createTextNode(k),i=Sn(t,n,o>0,r);return i.placeholder=c,a?M.push([Q,[a,c]]):$.push([F,[s,c]]),jt(t,e,i,a,s),i}function kn(t,n,e,r,o,a,s,c){const i=[];s&&void 0===c&&(c=document.createTextNode(k),M.push([Q,[s,c]]),s=void 0);for(let l=0;l<t.length;++l){const u=t[l],d=u.v;if(!isNaN(d)){Cn(n[o.length],o,e,r,a,s,c);continue}const p={};if(i.push(p),"text"===u.nn){Tn(p,u,s,c);continue}const{createdContexts:h,domElement:g}=Vn(p,u,n,e,o,s,c),f={parentContext:r,contexts:h,tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,valueIndexSetBy:"attachDomElements",withinOwnerElement:!0};u.ch&&(p.ch=kn(u.ch,n,e,f,o,a+1,g,c).dom)}return{dom:i,contexts:o}}function Vn(t,n,e,r,o,a,s){const c=t.domElement=document.createElement(n.nn),i=[];if(n.at)for(const t of n.at){const n=t[0],a=t[1],s=t[2]||!1,l=Ye(e,n,c,r,t.length>1?Dt:Ot,o,s,a);"object"==typeof l&&i.push(l)}return a?M.push([Q,[a,c]]):$.push([F,[s,c]]),{domElement:c,createdContexts:i}}function Tn(t,n,e,r){const o=t,a=o.tc=n.tc;e?M.push([nt,[e,a,function(t){o.domElement=t}]]):$.push([tt,[r,a,function(t){o.domElement=t}]])}function Jn(t,n,e){const r=t.context.global;r.oldest=t,r.newest=t,++z.locks;const o=function(t,n,e,r){const o=function(t){const n=t.templater,e=n.tag;if(e.tagJsType===J.dom)return e.dom;const r=e.strings;return A(r,e.values)}(t),a=t.templater.tag,s=a.values,c=[];t.context.contexts=c;const i=kn(o,s,t,n,c,0,e,r);return i}(t,t.context,n,e);return r.htmlDomMeta=o.dom,--z.locks,o}function Bn(t,n){const e=n.global.newest,r=n.placeholder;return e.ownerSupport=t,Jn(e,void 0,r),e}function In(t){const n={tagJsType:J.templater,processInit:Pn,checkValueChange:wn};return n.tag=t,t.templater=n,n}function Ln(t,n,e){const r=function(t,n,e,r,o){const a={templater:t,context:r,castedProps:o,appSupport:void 0};return a.ownerSupport=n,a.appSupport=e,a}(t,n,n.appSupport,e);return e.contexts=[],r}function jn(t,n,e,r,o){const a=Ln(t,e,n);a.ownerSupport=e;const s=Jn(a,r,r?void 0:o);for(const t of s.dom)t.marker&&(r?M.push([Q,[r,t.marker]]):$.push([F,[o,t.marker]])),t.domElement&&(r?M.push([Q,[r,t.domElement]]):$.push([F,[o,t.domElement]]));return a}function Pn(t,n,e,r,o){return r?jn(t,n,e,r,o):Bn(e,n)}function En(t,n){const e={tagJsType:J.templater,processInit:Pn,processInitAttribute:O,processUpdate:Et,checkValueChange:wn,delete:_n,propWatch:t,props:n,key:function(t){return e.arrayValue=t,e}};return e}const An=[];function On(t){const n=t.context;return fe(t.templater)?ve(t):ge(t,t,n)}function Dn(t,n,e){return t.map((function(t){return function(t,n,e,r){if(ot(t)||!t)return t;if(!n)return t;return Nn(t,n,e,r)}(t,n.ownerSupport,n,e)}))}function Nn(t,n,e,r,o){if(!t)return t;if(t.tagJsType)return t;if(typeof t===T.function)return r<=1?function(t,n,e){const r=t.mem;if(r)return t;const o=function(...t){return function(t,n,e,r){const o=r.context.global,a=o?.newest||r,s=void 0===pt(),c=t.apply(n,e),i=function(){const t=a.context;return t.global&&!0!==t.locked?(On(a),c):c};if(s)return i();return It.tagClosed$.toCallback(i),c}(o.mem,n,t,e)};return o.original=t,o.mem=t,Object.assign(o,t),o}(t,o,n):t;if(r===ce)return t;return qn(t)?t:ut(t)?function(t,n,e,r){for(let o=t.length-1;o>=0;--o){const a=t[o];if(t[o]=Nn(a,e,n,r+1,t),typeof a===T.function){if(a.mem)continue;$n(r+1,o,a,t,n)}}return t}(t,e,n,r):function(t,n,e,r){const o=Object.keys(t);for(const a of o){const o=t[a],s=Nn(o,e,n,r+1,t);if(t[a]===s)continue;const c=Object.getOwnPropertyDescriptor(t,a);if(!(c?.get||c?.set)&&(t[a]=s,typeof s===T.function)){if(o.mem)continue;$n(r+1,a,o,t,n)}}return t}(t,e,n,r)}function $n(t,n,e,r,o){if(t>0){const t=o.context.global;r[n].subscription=t.destroy$.toCallback((function(){r[n]=e}))}}function qn(t){return typeof t!==T.object||!t||t.tagJsType}function Hn(t,n,e,r){const o=n.original,a=t.tagJsType===J.stateRender,s=It.stateConfig;let c;return ht(e),a?c=t():(c=o(...r),typeof c===T.function&&(c=c())),c.templater=t,t.tag=c,e.state=s.stateArray,e.states=s.states,e}function Mn(t,n,e,r,o){const a=on(t,r,o);return a.ownerSupport=n,an(t,a,e,o)}function Rn(t,n,e){const r=t.propWatch===ne.DEEP?ce:se,o=t.props,a=n.propsConfig;let s=a.castProps;const c=e?.propsConfig,i=c?.castProps;i&&(a.castProps=i,s=ue(n,e,e.ownerSupport,o,r));return s||Dn(o,n,0)}class zn extends Error{constructor(t,n,e={}){super(t),this.name=zn.name,this.details={...e,errorCode:n}}}class Xn extends zn{constructor(t,n){super(t,"state-mismatch-error",n),this.name=Xn.name}}class Wn extends zn{constructor(t,n){super(t,"sync-callback-error",n),this.name=Wn.name}}function Un(t,n){const e=t.rearray;e.length&&e.length!==t.stateArray.length&&function(t,n,e){const r=`Saved states between renders are inconsistent. Expected ${t.length} states got ${e.stateArray.length}.`,o=n.templater?.wrapper;let a=o;(o?.original||o?.original)&&(a=o.original);const s={oldStates:e.stateArray,newStates:e.rearray,tagFunction:a,templater:n.templater},c=new Xn(r,s);throw console.error(Yn,s),c}(e,n,t)}const Yn="State tracking requires same number of state calls on every render. This error typically occurs when a state call is only reachable behind a condition. Also, wrapping tags that have state, with tag(), often helps when tag is only reachable by a condition.";function Fn(t,n){const e=t.context;++e.renderCount;const r=It.stateConfig;t.state=r.stateArray,t.states=r.states,e.global.newest=t,Un(r,t),delete r.prevSupport,delete r.support,delete r.stateArray,delete r.states,It.tagClosed$.next(n)}function Qn(t,n,e,r){!function(t,n){const e=n?.state;if(e)return void yt(t,n,e);bt(t)}(t,n);const o=t.templater;let a;if(o.tagJsType===J.stateRender){const n=o;a=Mn(o,r,t.appSupport,e),Hn(o,n,a)}else{a=(0,o.wrapper)(t,e,n)}return Fn(a,r),a.ownerSupport=t.ownerSupport,a}function Gn(t,n,e,r,o){dt(n);const a=function(t,n,e){const r=En(ne.DEEP);r.tagJsType=t.tagJsType;const o=Ln(r,e,n);function a(){return r.tag=t(),o}return r.wrapper=a,a.tagJsType=t.tagJsType,a.original=t.original||t,o}(t,n,e);return Qn(a,void 0,n),jn(a.templater,n,e,r,o)}function Kn(t,n,e,r){const o=Mn(t,e,e.appSupport,n),a=o.propsConfig;if(a){const n=t.tagJsType!==J.tagComponent?[]:Rn(t,o);a.castProps=n}return function(t,n){const e=Jn(t,n,void 0);for(const t of e.dom)t.domElement&&M.push([Q,[n,t.domElement]]),t.marker&&M.push([Q,[n,t.marker]]);return t}(Qn(o,n.global.newest,n),r)}function Zn(t,n,e,r){if(dt(n),r){return Kn(t,n,e,r)}const o=function(t,n,e){const r=Mn(t,e,e.appSupport,n),o=r.propsConfig;if(o){const n=t.tagJsType!==J.tagComponent?[]:Rn(t,r);o.castProps=n}const a=Qn(r,n.global.newest,n);return Jn(a,void 0,n.placeholder),a}(t,n,e);return o}let te=0;var ne;function ee(t,n=ne.SHALLOW){const e=function(...r){const o=En(n,r);o.tagJsType=J.tagComponent,o.processInit=Zn;const a=function(t,n){return function(e,r,o){const a=Rn(t,e,o),s=e.ownerSupport,c=Mn(t,s,e.appSupport,r,a);return Hn(t,n,c,a)}}(o,e);return a.original=t,o.wrapper=a,o},r=t;return e.original=t,r.tags=An,r.setUse=It,r.ValueTypes=J,r.tagIndex=te++,An.push(e),e}function re(t,n,e){if(ye(t,n))return 11;switch(e){case ne.NONE:return 1;case ne.SHALLOW:return Kt(t,n);case ne.IMMUTABLE:return ae(t,n)}return function(t,n){let e=t,r=n;e=[...t],r=[...n||[]];if(!e.every(((t,n)=>function(t,n,e,r){const o=r[n];if(typeof t===T.object){const n={...t},e={...o||{}},r=Object.entries(n).every((([t,r])=>oe(r,e[t],(()=>{delete n[t],delete e[t]}))));return r}return oe(t,o,(function(){e.splice(n,1),r.splice(n,1)}))}(t,n,e,r))))return 7;return!1}(t,n)}function oe(t,n,e){if(typeof t!==T.function)return!!Qt(t,n,ce)&&4;if(typeof n!==T.function)return!1;const r=n?.original;r&&(n=r);t.original&&(t=t.original);return t.toString()===n.toString()?(e(),5):(e(),6)}function ae(t,n){const e=t.length;for(let r=0;r<e;++r){if(t[r]!==n[r])return 2}return!1}!function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(ne||(ne={})),ee.getElement=function(){return It.stateConfig.context.element},ee.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},ee.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},ee.deepPropWatch=ee,ee.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},ee.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},ee.immutableProps=function(t){return ee(t,ne.IMMUTABLE)},ee.watchProps=function(t){return ee(t,ne.SHALLOW)},Object.defineProperty(ee,"renderOnce",{set(t){t.tagJsType=J.renderOnce,t.processInit=Gn,t.processUpdate=Et,t.delete=_n,t.checkValueChange=function(){return-1}}}),Object.defineProperty(ee,"use",{set(t){t.original={setUse:It,tags:An},t.tagJsType=J.stateRender,t.processInit=Zn,t.processUpdate=Et,t.checkValueChange=wn,t.delete=_n}});const se=3,ce=10;function ie(t,n,e,r,o,a){return null==t||a>o?n:typeof t===T.function?n.mem?(t.mem=n.mem,n):(t.mem=n,t):qn(n)?n:ut(n)?function(t,n,e,r,o,a){for(let s=t.length-1;s>=0;--s){const c=t[s],i=n[s];t[s]=ie(i,c,e,r,a,o+1)}return t}(n,t,e,r,a,o):function(t,n,e,r,o,a){const s=Object.keys(t);for(const c of s){const s=t[c],i=ie(n[c],s,e,r,a,o+1);if(s===i)continue;const l=Object.getOwnPropertyDescriptor(t,c)?.set;l||(t[c]=i)}return t}(n,t,e,r,a,o)}function le(t,n,e){const r=e.global,o=r.newest,a=o.templater.wrapper;let s=n.templater.wrapper,c=!1;const i=n.templater.tagJsType,l=J.stateRender===i||J.renderOnce===i;if(l)c=n.templater.tagJsType===J.renderOnce||yn(o,n);else if(a&&s){const t=o.templater.tag?._innerHTML;t&&(s=n.outerHTML);c=a.original===s.original}const u=n.templater;if(!c)return void function(t,n,e){const r=t.global,o=r.oldest;bn(o,r),dt(t),n.processInit(n,t,e,void 0,t.placeholder)}(e,u,t);const d=l||function(t,n){return re(n.props,t.propsConfig.latest,t.templater.propWatch)}(o,u);if(d)e.locked?r.blocked.push(n):(xe(n),++e.renderCount);else{!function(t,n,e,r,o){const a=t.props,s=ue(n,e,r,a,o),c=n.propsConfig;c.castProps=s;const i=e.propsConfig;i.latest=c.latest}(u,n,o,t,u.propWatch===ne.DEEP?ce:se)}}function ue(t,n,e,r,o,a=-1){const s=n.context.global;if(!s||!s.newest){const n=Dn(r,t,a);r.push(...n);return t.propsConfig.castProps=n,r}const c=(n=s.newest||n).propsConfig.castProps,i=[];for(let n=0;n<r.length;++n){const s=r[n],l=ie(c[n],s,t,e,o,a+1);i.push(l)}return t.propsConfig.castProps=i,i}function de(t){const n=t.context,e=n.global,{subs:r,tags:o}=ln(n.contexts);pe(n);for(const t of o){if(!0===t.context.global.deleted)return;pe(t.context)}e.subscriptions&&r.forEach(un),dt(n)}function pe(t){t.global.deleted=!0,xn(t,[])}function he(t,n,e){const r=Qn(t,n,e),o=!n||yn(n,r);if(o){if(n){const t=n.templater.tag;if(t&&e.renderCount>0){const e=n?.templater,r=e?.tag;!function(t,n,e){if(t.tagJsType===J.dom){const r=e?.dom;return void(r!==t.dom&&de(n))}if(e){const r=e.strings;if(r){const e=r?.length;e!==t.strings.length&&de(n)}}}(t,n,r)}}}else{!function(t,n){const e=t.context.global;let r=-1;const o=e.providers=e.providers||[],a=o.length-1;for(;r++<a;){const t=o[r];let a=-1;const s=t.children.length-1;for(;a++<s;)if(e===t.children[a].context.global)return t.children.splice(a,1),void t.children.push(n)}}(n,r),de(n);const t=r.context.global;t.oldest=r,t.newest=r}return r.ownerSupport=t.ownerSupport,{support:r,wasLikeTags:o}}function ge(t,n,e){const r=he(n,t,e),o=e.global;return r.wasLikeTags?(ao(o.oldest,r.support),r.support):Bn(n,e)}function fe(t){return J.templater===t.tagJsType}function xe(t){const n=t.context,e=n.global,r=fe(t.templater);if(n.locked)return e.blocked.push(t),t;if(r){return ve(t)}n.locked=!0,e.blocked.length&&(t=e.blocked.pop(),e.blocked=[]);const o=ge(e.newest,t,n);return delete n.locked,o}function ve(t){return xe(gt(t).context.global.newest)}function be(t,n){const e=function(t,n){const e=t.props,r=n.propsConfig,o=r.latest;if(ye(e,o))return!0;switch(t.propWatch){case ne.IMMUTABLE:return ae(e,o);case ne.SHALLOW:return Kt(e,o)}return!Qt(e,o,ce)}(t,n);return!!e}function ye(t,n){return t.length!==n.length}function me(t,n=[]){const e=t.context,r=fe(t.templater),o=t.ownerSupport;if(e.locked)return n.push(t),n;if(r)return me(o,n);const a=t,s=at(a.templater),c=t.templater.tagJsType,i=o&&c!==J.stateRender&&(!s||be(a.templater,a)),l=function(t){const n=t.context.global.providers;if(!n)return[];const e=[];for(const t of n){const n=Wt(t.owner,t);e.push(...n.map(Ut))}return e}(a);return n.push(...l),i?(me(o,n),s&&n.push(a),n):(n.push(a),n)}function we(t){++z.locks,t.forEach(_e),--z.locks,W()}function _e(t){const n=t.context.global;n&&xe(n.newest)}function Se(t,n){for(let e=0;e<t.length;++e){Te(t[e],n[e])}}let Ce;function ke(...t){return Ce=t,t}function Ve(){return Ce}function Te(t,n){t(ke,1),n(Ve,2)}function Je(t,n,e,r){for(let e=t.length-1;e>=0;--e){const r=t[e].get(),o=n[e].callback;o&&o(r)}for(let t=r.length-1;t>=0;--t){Ie.length=0,Be=0;(0,r[t])(Le),e[t](je)}}let Be=0;const Ie=[];function Le(...t){return Ie.push(t),t}function je(...t){return Ie[Be++]}function Pe(t,n,e,r,{resolvePromise:o,resolveValue:a}){if(ct(t)){return n.context.locked=!0,t.then(function(t,n){return e=>{if(!0===t.context.global.deleted)return n(e);const r=t.context,o=t.context.global;var a,s;delete r.locked,a=t,s=o.newest,Se(a.states,s.states);return we(me(t)),n(e)}}(n,o))}return a(t)}function Ee(t,n){const e=n.context.global,r=function(t,n){if(!0!==e.deleted)return function(t,n,e,r){const o=gt(n),a=o.context;a.locked=!0;const s=t.apply(e,r);delete a.locked;return function(t,n){n.context.global;return function(t,n,e){return we(me(t)),Pe(n,t,0,0,{resolvePromise:De,resolveValue:Ne})}(n,t)}(s,o)}(r.tagFunction,r.support,t,n)};return r.tagFunction=t,r.support=n,r}const Ae="no-data-ever",Oe="promise-no-data-ever";function De(){return Oe}function Ne(){return Ae}function $e(t,n,e,r){const o=t.appElement;"blur"===n&&(n="focusout");const a="_"+n,s=t.context.global.events;if(!s[n]){const t=function(t){t.originalStopPropagation=t.stopPropagation,qe(t,a,t.target)};s[n]=t,o.addEventListener(n,t)}e[a]=r,e[n]=r}function qe(t,n,e){const r=e[n];if(r){let n=!1;if(t.stopPropagation=function(){n=!0,t.originalStopPropagation.call(t)},r(t),t.defaultPrevented||n)return}const o=e.parentNode;o&&qe(t,n,o)}function He(t,n,e,r){const o=function(...n){return o.tagFunction(t,n)};o.tagFunction=n,o.support=e,$e(e.appSupport,r,t,o)}function Me(t){return null==t||!1===t}function Re(t,n){t.removeAttribute(n)}function ze(t,n,e,r){const o=n,a=t;if(a?.tagJsType){const r=n.value;if(!r?.tagJsType)return a.isAttr=!0,eo(n),a.processInitAttribute(o.attrName,t,o.element,a,o,e),ro(),void(o.tagJsVar=a);r.checkValueChange(a,n,e);return}if(o.isNameOnly)return function(t,n,e,r,o,a,s){if(e){if(Me(n))return void r.removeAttribute(e);if(typeof e===T.object)if(typeof n===T.object)for(const t in e)t in n||H.push([Re,[r,t]]);else for(const t in e)H.push([Re,[r,t]])}Fe(t,n,r,o,a,s)}(r,t,o.value,o.element,e,o.howToSet,[]),void(o.value=t);const s=o.element;!function(t,n,e,r,o,a,s){if(it(t))return function(t,n,e,r,o,a,s){const c=t.templater.wrapper;if((c?.tagJsType||c?.original?.tagJsType)!==J.renderOnce)return Ge(s,n,t,r,e);return Qe(n,e,r,o,a,t)}(o,t,r,n,s,a,e);Qe(t,r,n,s,a,o)}(t,o.attrName,o,s,e,o.howToSet,o.isSpecial),n.value=t}function Xe(t,n,e,r,o,a,s){const i=r.length;function l(r){const a=function(t,n,e){return t.reduce(((t,r)=>{if(c(r)>=0){const r=e++,o=n[r];return t.push(o),t}return t.push(r),t}),[])}(n,r,i).join("");o(e,t,a)}return n.forEach((n=>{if(c(n)>=0){const o=r.length,c=hr(n),i={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:c,valueIndex:r.length,valueIndexSetBy:"createDynamicArrayAttribute",parentContext:s};c.processUpdate=function(t,n,e,r){l(r)};const u=a[o];i.value=u,r.push(i)}})),l(a),r}function We(t,n,e,r,o,a,s,c){const i=hr(n),l={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:i,valueIndex:c,valueIndexSetBy:"createDynamicAttribute",parentContext:a.context};return r.push(l),i.processUpdate=ze,function(t,n,e,r,o,a,s){if(e.element=r,e.howToSet=o,typeof n===T.function)return Ge(e,n,a,t,r);if(e.attrName=t,e.isSpecial=s,n?.tagJsType)return void function(t,n,e,r,o){n.processInitAttribute(t,n,o,n,e,r),e.tagJsVar=n}(t,n,e,a,r);Ze(t,n,r,o,s)}(t,n,l,e,o,a,s),l.value=n,l}function Ue(t){return lt(t)&&"tagJsVar"in t?t.tagJsVar:-1}function Ye(t,n,e,r,o,a,s,c){const i=Ue(n),l=i>=0,u=t[i],d=u;if(d?.tagJsType)return function(t,n,e,r,o,a,s,c){const i=Sn(t,n,!0,o.context);return i.element=s,i.valueIndex=r,i.valueIndexSetBy="processTagJsVarAttribute",i.isAttr=!0,i.isNameOnly=c,i.stateOwner=gt(o),i.supportOwner=o,eo(i),e.processInitAttribute(a,e,s,e,i,o),ro(),i.oldTagJsVar=i.tagJsVar,i.tagJsVar=e,i}(c,a,d,i,r,n,e,l);if(l){const n=Sn(u,a,!0,r.context);n.valueIndex=i,n.valueIndexSetBy="processAttribute",n.isAttr=!0,n.element=e,n.isNameOnly=!0,n.howToSet=o;return n.tagJsVar.processUpdate=ze,Fe(t,u,e,r,o,a),n}if(Array.isArray(c))return Xe(n,c,e,a,o,t,r.context);const p=Ue(c);if(p>=0){return We(n,t[p],e,a,o,r,s,p)}Ze(n,c,e,o,s)}function Fe(t,n,e,r,o,s){if(!Me(n))if(typeof n!==T.object)0!==n.length&&o(e,n,k);else for(const o in n){Ye(t,o,e,r,Dt,s,a(o),n[o])}}function Qe(t,n,e,r,o,a){if(!1===r){switch(t){case void 0:case!1:case null:return void H.push([Ke,[n,e]])}if(it(t))return He(n,t,a,e);o(n,e,t)}else qt(e,t,n,r)}function Ge(t,n,e,r,o){n=Ee(n,e);return t.tagJsVar.processUpdate=ze,He(o,n,e,r)}function Ke(t,n){t.removeAttribute(n)}function Ze(t,n,e,r,o){if(o)return qt(t,n,e,o);r(e,t,n)}function tr(t,n,e,r,o){n.value;const a=n.tagJsVar,s=t;if(a.checkValueChange(s,n,e)>=0){a.delete(n,e),r.removeAttribute(o);const s=hr(t);s.isAttr=!0,s.processInitAttribute(o,t,r,s,n,e),n.tagJsVar=s}}function nr(t,n,e,r,o){r.delete=er,r.checkValueChange=sr,o.tagJsVar=r,o.tagJsVar.processUpdate=(n,r,o)=>{tr(n,r,o,e,t)};const s=a(t);Ze(t,n,e,Dt,s)}function er(t){const n=t.element,e=t.attrName;n.removeAttribute(e)}function rr(t){return{tagJsType:"simple",value:t,processInitAttribute:nr,processInit:or,delete:ar,checkValueChange:cr,processUpdate:Et}}function or(t,n,e,r,o){const a=Pt(t);o=n.placeholder;const s=n.paint=[Z,[o,a,function(t){n.simpleValueElm=t,delete n.paint}]];$.push(s)}function ar(t){const n=t.simpleValueElm;if(delete t.simpleValueElm,!n)throw new Error("issue starts here no elm");U(n,"deleteSimpleValue")}function sr(t,n){return null==t||!(typeof t===T.object)?-1:6}function cr(t,n){return null!=t&&typeof t===T.object?(ar(n),6):(function(t,n){const e=Pt(t);if(n.paint)return void(n.paint[1][1]=e);const r=n.simpleValueElm;H.push([X,[e,r]])}(t,n),-1)}function ir(t,n,e,r){const o=void 0===t.lastArray;o&&(t.lastArray=[]);const a=t.lastArray;let s=t.placeholder,c=0;const i=[];if(!o){for(let t=0;t<a.length;++t){const e=a[t],r=dn(n,t,a,c);0!==r?2!==r?c+=r:t-=1:i.push(e)}t.lastArray=i}const l=n.length;for(let o=0;o<l;++o){s=lr(n,o,t.lastArray,e,s,r).placeholder}}function lr(t,n,e,r,o,a){const s=t[n],c=e[n];if(c)return function(t,n,e,r,o,a,s){const c=e.length>o;if(c)return Et(t,n,r),n;const i=gr(t,r,e,a,s);return e.push(i),i}(s,c,e,r,n,o,a);const i=gr(s,r,e,o,a);return e.push(i),i}function ur(t){return{tagJsType:"array",value:t,processInitAttribute:O,processInit:pr,processUpdate:dr,checkValueChange:hn,delete:gn}}function dr(t,n,e){-1===Et(t,n,e)&&ir(n,t,e)}function pr(t,n,e,r){ir(n,t,e,r)}function hr(t){const n=t?.tagJsType;return n?t:function(t){if(ut(t))return ur(t);return rr(t)}(t)}function gr(t,n,e,r,o){const a=document.createTextNode(k),s={value:t,tagJsVar:hr(t),withinOwnerElement:!1,placeholder:a,parentContext:n.context,valueIndex:e.length,valueIndexSetBy:"createAndProcessContextItem"};return o||$.push([F,[r,a]]),jt(t,n,s,o,r),o&&M.push([Q,[o,a]]),s}function fr(t,n,e,r){return n.hasEmitted=!0,n.contextItem=gr(t,e,[],r)}function xr(t,n){let e;return t&&(e=n=document.createTextNode(k),M.push([Q,[t,n]])),{appendMarker:e,insertBefore:n}}function vr(t,n,e){if(-1===io(t,n,e)&&t.callback){Cr(t,n.subContext)}}function br(t,n,e,r,o){const a=t.Observables,{appendMarker:s,insertBefore:c}=xr(r,o);let i=function(t,n,r){fr(t,r,e,c),_r(n),i=r.tagJsVar.onOutput=function(t,n,r){const o=r.contextItem;Lt(o,t,e),o.tagJsVar.processUpdate(t,o,e,[t]),_r(n)}};const l=yr(a,e,((t,n,e)=>i(t,n,e)),t);return l.appendMarker=s,n.subContext=l,t.processUpdate=vr,t.onOutput=i,l}function yr(t,n,e,r){function o(t,n){c.lastValues[n]={value:t,tagJsVar:hr(t),oldTagJsVar:c.lastValues[n]?.tagJsVar},a(c.lastValues,n)}function a(t,n){const r=c.tagJsVar;if(r?.callback){const n=r.callback(...t.map((t=>t.value)));e(n,s,c)}else e(t[n].value,s,c)}let s=!0;const c={lastValues:[],subValueHandler:o,valuesHandler:a,tagJsVar:r,subscriptions:[]};return t.forEach(((t,n)=>{s=!0,c.subscriptions.push(t.subscribe((t=>o(t,n)))),s=!1})),r.onOutput=e,c}function mr(t){t.subContext.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function wr(t,n){const e=t.subContext;return mr(t),rt(e,n)}function _r(t){t||It.stateConfig.support||W()}function Sr(t,n,e,r,o){const a=br(t,n,e,r,o);return a.hasEmitted||Cr(t,a),a}function Cr(t,n){const e=t.Observables[0];if(!n.hasEmitted)return"withDefault"in t?void n.subValueHandler(t.withDefault,0):"value"in e?void n.subValueHandler(e.value,0):void 0;const r=n.lastValues[0].value;n.subValueHandler(r,0)}function kr(t,n,e,r){br({tagJsType:J.subscribe,states:[],Observables:[t]},n,e,r)}function Vr(t,n,e,r,o,s){n.delete=mr;const c=a(t),i=function(n,r){Ze(t,n,e,Dt,c),_r(r)},l=yr(n.Observables,0,i,n);return o.subContext=l,o.value=n,o.tagJsVar=n,o.tagJsVar.processUpdate=function(n,r,a){tr(n,o,a,e,t)},{subContext:l,onOutput:i}}function Tr(t,n,e,r,o,a){const{subContext:s}=Vr(t,n,e,0,o);s.hasEmitted||function(t,n){const e=n.tagJsVar,r=e.onOutput;if(r===O)throw new Error("blankhandler not converted");const o=t.Observables;let a=o[0]?.value||t.withDefault;t.callback&&(a=t.callback(a));r(a,!0,n)}(n,s)}function Jr(t,n){const e=pt(),r=e?gt(e).states:[];return{onOutput:O,tagJsType:J.subscribe,processInitAttribute:Vr,processInit:br,checkValueChange:Ir,processUpdate:io,delete:wr,callback:n,states:r,Observables:[t]}}function Br(t,n,e){return{onOutput:O,tagJsType:J.subscribe,processInitAttribute:Tr,processInit:Sr,checkValueChange:Ir,processUpdate:O,delete:wr,callback:e,withDefault:n,states:gt(pt()).states,Observables:[t]}}function Ir(t,n){if(!t?.tagJsType)return 1;const e=t.Observables;if(!e)return 2;const r=n.value.Observables;if(!r||r.length!==e.length)return 3;return e.every(((t,n)=>t===r[n]))?-1:4}function Lr(t){return pt()?Or((()=>jr(t))):jr(t)}function jr(t){let n=t;const e=new Set,r=t=>{e.forEach((n=>n(t)))};return{tagJsType:J.signal,checkValueChange:Ir,processInitAttribute:O,processInit:kr,processUpdate:vr,get value(){return n},set value(t){n!==t&&(n=t,r(t))},delete:wr,emit:r,subscribe(t){t(n),e.add(t);const r=()=>e.delete(t);return r.unsubscribe=r,r}}}class Pr extends Tt{constructor(t){super(t),this.value=t}subscribe(t){const n=super.subscribe(t);return t(this.value,n),n}}class Er extends Tt{constructor(t){super(t),this.value=t,this._value=t,Jt(this)}subscribe(t){const n=super.subscribe(t);return t(this._value,n),n}}function Ar(t){return(n,e)=>{e.setHandler((()=>{}));t(n).then((t=>e.next(t)))}}function Or(t){return It.stateConfig.handlers.handler(t)}const Dr=(t,n)=>$r(t,n),Nr=t=>t;const $r=(t,n,{init:e,before:r,final:o=Nr}={})=>{const a=Or({pastResult:void 0,values:void 0}),s=a.values;if(void 0===s){if(r&&!r(t))return a.values=t,a.pastResult;const c=(e||n)(t,s);return a.pastResult=o(c),a.values=t,a.pastResult}if(t.every(((t,n)=>t===s[n])))return a.pastResult;if(r&&!r(t))return a.values=t,a.pastResult;const c=n(t,s);return a.pastResult=o(c),s.length=0,s.push(...t),a.pastResult};function qr(t,n){return Object.defineProperty(n,"noInit",{get(){const n=t();return n.setup.init=()=>{},n}}),Object.defineProperty(n,"asSubject",{get(){const n=t(),e=Or((()=>pt())),r=Or((()=>new Pr(void 0))),o=Or((()=>({stateArray:It.stateConfig.stateArray,states:It.stateConfig.states}))),a=(t,a)=>($r(t,((t,n)=>{const s=pt(),c=a(t,n);if(s!==e){const t=o.stateArray,n=e.context.global.oldest;Je(t,n.state,o.states,n.states)}r.next(c)}),n.setup),r);return a.setup=n.setup,qr((()=>a),a),a}}),Object.defineProperty(n,"truthy",{get(){const n=t();return n.setup.before=t=>t.every((t=>t)),n}}),n}function Hr(t){return pt()?Or((()=>new Tt(t))):new Tt(t)}function Mr(t){return It.stateConfig.handlers.statesHandler(t)}function Rr(t){const n=Lr([]),e=Lr(0),r=Lr(0);let o=[],a=0;return r.value=e.value,t(((...t)=>(o=t,n.value))),Dr(o,(()=>{++a,n.value=o,t((()=>o))})),Mr(((o,s)=>{if(a)return t(((...t)=>(s&&1!==s||(n.value=t),n.value))),r.value=e.value,void++e.value;t((()=>n.value))})),++a,n.value}function zr(){return{stateDiff:0,provider:void 0}}qr((()=>function(t){const n=(n,e)=>$r(n,e,t);return n.setup=t,qr((()=>n),n),n}({})),Dr),Hr._value=t=>{const n=Or((function(){return{stateArray:It.stateConfig.stateArray,states:It.stateConfig.states}})),e=pt();return Or((function(){return new Pr(t).pipe((t=>(Je(e.state,n.stateArray,e.states,n.states),t)))}))},Hr.all=function(t){const n=Or((()=>({stateArray:It.stateConfig.stateArray,states:It.stateConfig.states}))),e=pt();return Tt.all(t).pipe((t=>(Je(e.state,n.stateArray,e.states,n.states),t)))};const Xr={create:t=>{const n=Or(zr);if(n.stateDiff){let t=n.stateDiff;for(;t--;)Or(void 0);return Or(void 0)}const e=Or((()=>{const e=It.stateConfig,r=e.stateArray.length,o=t.prototype?new t:t(),a=e.support,s=e.stateArray.length-r,c={constructMethod:t,instance:o,stateDiff:s,owner:a,children:[]};n.provider=c;const i=a.context.global;return(i.providers=i.providers||[]).push(c),n.stateDiff=s,o})),r=t,o=r.compareTo=r.toString();return n.provider.constructMethod.compareTo=o,e},inject:function(t){return Or((function(){const n=t,e=n.compareTo=n.compareTo||t.toString(),r=pt(),o=[];let a={ownerSupport:r.ownerSupport};for(;a.ownerSupport;){const t=a.ownerSupport.context.global.providers;if(!t){a=a.ownerSupport;continue}const n=t.find((t=>{o.push(t);if(t.constructMethod.compareTo===e)return!0}));if(n){const t=r.context.global;return(t.providers=t.providers||[]).push(n),n.children.push(r),n.instance}a=a.ownerSupport}const s=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${s}. Available providers`,o),new Error(s)}))}};function Wr(t){const n=pt();if(!n)throw Fr;return Ur(n,It.stateConfig,t)}function Ur(t,n,e){const r=n.states;return function(...n){return t.context.renderCount>0?function(t,n,e,...r){const o=t.context.global.newest,a=e(...r);return xe(o),ct(a)&&a.finally((()=>{xe(o)})),a}(t,r,e,...n):e(...n)}}const Yr=()=>{const t=pt();if(!t)throw Fr;const n=It.stateConfig;return function(e){return Ur(t,n,e)}},Fr=new Wn("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function Qr(t){Or((()=>{const n=t(),e=pt();return Pe(n,e,e.context.global,0,{resolvePromise:Gr,resolveValue:Kr})}))}function Gr(t){return t}function Kr(t){return t}function Zr(t){Or((function(){pt().context.global.destroy$.toCallback(t)}))}function to(t=[]){return pt()?Or((()=>no(jr(t)))):no(jr(t))}function no(t){const n=["push","pop","splice","shift","unshift"],e=["map","reduce","forEach","every"],r=new Proxy(t,{get(o,a){return isNaN(a)?"length"===a?t.value.length:n.includes(a)?r[s=a]=(...n)=>{const e=t.value[s](...n);return t.emit(t.value),e}:e.includes(a)?t.value[a].bind(t.value):t[a]:t.value[a];var s},set:(n,e,r)=>isNaN(e)?"length"===e?(t.value.length=r,t.emit(t.value),!0):(t[e]=r,!0):(t.value[e]=r,t.emit(t.value),!0)});return r}function eo(t){return It.stateConfig.context=t}function ro(){delete It.stateConfig.context}function oo(t,n,e,r){const o=e[n];if(o.deleted)return;const a=t[o.valueIndex];if(a===o.value)return;const s=o.tagJsVar;eo(o),s.processUpdate(a,o,r,t),ro(),o.value=a}function ao(t,n){const e=t.context.contexts;!function(t,n){const e=n.templater,r=n.templater.tag,o=e.values||r.values,a=t.templater.tag;a.values=o}(t,n),++z.locks,function(t,n){const e=t.templater.tag.values;let r=0;const o=e.length;for(;r<o;)oo(e,r,n,t),++r}(t,e),--z.locks,W()}function so(t,n,e){if(at(n))return void 0===t.global&&dt(t),function(t,n,e){const r=n.global;if(!r.newest)return void t.processInit(t,n,e,void 0,n.placeholder);const o=Mn(t,e,e.appSupport,n);le(e,o,n)}(n,t,e),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n,!0;const r=t.global;if(r){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n;const o=r.newest;if(o)return typeof n===T.function||function(t,n,e,r){let o=e.templater||e;const a=t.templater.tag;a&&a._innerHTML&&(o=e.outerHTML||e._innerHTML.outerHTML);const s=Mn(o,r,r.appSupport,n);ao(t.context.global.oldest,s)}(o,t,n,e),!0}return n.processInit(n,t,e,void 0,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n,!0}function co(t,n,e,r){const o=t&&t.tagJsType;if(o){if(o===J.renderOnce)return;so(n,t,e)}else{if(ut(t))return ir(n,t,e),n.oldTagJsVar=n.tagJsVar,void(n.tagJsVar=ur(t));typeof t!==T.function?r&&function(t,n){n.value=t,n.oldTagJsVar=n.tagJsVar,n.tagJsVar=rr(t);const e=n.placeholder,r=Pt(t),o=n.paint=[Z,[e,r,function(t){n.simpleValueElm=t,delete n.paint}]];$.push(o)}(t,n):n.value=t}}function io(t,n,e){const r=n.subContext,o=lo(J.subscribe,t,e,n);return o||(r&&r.hasEmitted?(r.tagJsVar=t,r.valuesHandler(r.lastValues,0),-1):-1)}function lo(t,n,e,r){if(!n||!n.tagJsType||n.tagJsType!==t){return r.tagJsVar.delete(r,e),co(n,r,e,99),99}}function uo(t,n,e,r,o){const a=t;let s=a.templater;s||(s=In(a));const c=dt(n);return r?jn(s,n,e,r,o):(c.newest=Ln(s,e,n),Bn(e,n))}function po(t,n,e,r,o){uo(t.outerHTML,n,e,r,o);n.tagJsVar.processUpdate=function(t,n,e){Lt(n,t?.outerHTML||t,e)},t.checkValueChange=ho}function ho(t,n){return wn(t,n)}function go(t,...n){const e=function(t,n){const e={values:n,ownerSupport:pt(),tagJsType:J.tag,processInitAttribute:O,processInit:uo,processUpdate:Et,checkValueChange:wn,delete:_n,strings:t,key:t=>(e.arrayValue=t,e),setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=po,e},acceptInnerHTML:function(t){return t.owner=e,e},html:function(t,n){return e.children={strings:t,values:n},e}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n),r=En(ne.NONE);return r.tag=e,e.templater=r,e}go.dom=function(t,...n){return function(t,n){const e={values:n,ownerSupport:pt(),dom:t,tagJsType:J.dom,processInitAttribute:O,processInit:uo,processUpdate:Et,checkValueChange:wn,delete:_n,key:function(t){return e.arrayValue=t,e},setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=po,e},acceptInnerHTML:function(t){return t.owner=e,e},html:{dom:function(t,n){return e.children={dom:t,values:n},e}}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n)};function fo(t,n){t.domElement&&n.appendChild(t.domElement),t.marker&&n.appendChild(t.marker)}function xo(t,n,e){const r=n.global,o=on(t,n);return an(t,o,o),o.appElement=e,r.oldest=r.oldest||o,r.newest=o,o}function vo(t,n,e,r,o,a,s){const c=document.createTextNode(k);An.push(e.wrapper||{original:e});const i=function(t,n,e,r,o){r.placeholder=n;const a=r.global,s=a.oldest,c=a.newest===s,i=Mn(t,a.newest,a.newest.appSupport,r);c||yt(i,a.newest,s.state);if(t.tagJsType===J.stateRender)return function(t,n,e,r,o){const a=t.wrapper||{original:t};if(!n){const n=xo(t,r,o);return Fn(n),n}return Hn(t,a,e),Fn(e),e}(t,o,i,r,e);const l=t.wrapper,u=l(i,r);return Fn(i),u}(e,c,o,a,s);if(n.isApp=!0,s&&(r.tag=i.templater.tag),!o)throw new Error(`Cannot tagElement, element received is type ${typeof o} and not type Element`);o.destroy=function(){const t=n.events;for(const n in t){const e=t[n];o.removeEventListener(n,e)}n.events={},++z.locks;const e=bn(i,n);return--z.locks,W(),e},++z.locks;const l=function(t,n,e,r,o,a){console.debug("🏷️ Building element into tag...",{element:n,app:o,support:t});const s=Jn(t,n,void 0);e.oldest=t,e.newest=t;let c=r.setUse;if(r.tagJsType!==J.stateRender){const t=o.original;c=t.setUse,t.isApp=!0}n.setUse=c,n.ValueTypes=J,bo.push({element:n,support:t});const i=document.createDocumentFragment();i.appendChild(a);for(const t of s.dom)fo(t,i);return console.debug("🏷️ Element Tag DOM built ✅"),i}(i,o,n,e,t,c);return--z.locks,W(),o.appendChild(l),{support:i,tags:An,ValueTypes:J}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const bo=[];function yo(t,n,e){const r=bo.findIndex((t=>t.element===n));if(r>=0){const t=bo[r].support;bn(t,t.context.global),bo.splice(r,1),console.warn("Found and destroyed app element already rendered to element",{element:n})}let o=()=>c(e);o.propWatch=ne.NONE,o.tagJsType=J.stateRender,o.processUpdate=Et,o.props=[e],o.isApp=!0;const a=function(t,n){const e={value:t,valueIndex:0,valueIndexSetBy:"getNewSubject",withinOwnerElement:!1,renderCount:0,global:void 0,tagJsVar:{tagJsType:"templater",checkValueChange:wn,delete:_n,processInitAttribute:O,processInit:function(){console.debug("do nothing app function")},processUpdate:Et}},r=dt(e);return r.events={},xo(t,e,n),e}(o,n),s=a.global;bt(s.newest);let c=t(e);const i=typeof c==T.function;return i||(at(c)?(s.newest.propsConfig={latest:[e],castProps:[e]},o.propWatch=c.propWatch,o.tagJsType=c.tagJsType,o.wrapper=c.wrapper,o=c):(o.tag=c,c=t)),vo(t,s,o,c,n,a,i)}function mo(t){if(!t)return O;const n=pt();if(!n)throw new Error("output must be used in render sync fashion");return(...e)=>{const r=n.ownerSupport;return wo(e,t,r)}}function wo(t,n,e){const r=e.context.global.newest;Se(r.states,e.states);const o=n(...t);return Se(e.states,r.states),R.push([()=>{r.context.global&&(++z.locks,On(r),--z.locks,W())},[]]),o}function _o(t,n,e){const r=t.owner._innerHTML;r.processInit=r.oldProcessInit;const o=n.subContext?.contextItem;Lt(o,r,e)}function So(t,n,e,r,o){n.subContext={},t.processUpdate=_o,function(t,n,e,r,o){const{appendMarker:a,insertBefore:s}=xr(o,r),c=e.subContext;c.appendMarker=a;const i=t.owner,l=i._innerHTML;l.processInit=l.oldProcessInit,fr(l,c,n,s)}(t,e,n,o,r)}function Co(){return{tagJsType:"innerHTML",checkValueChange:()=>-1,processInitAttribute:O,processInit:So,processUpdate:_o,delete:et}}function ko(t,n={}){return{tagJsType:J.host,processInitAttribute:To,checkValueChange:()=>-1,processInit:Jo,processUpdate:Vo,delete:Bo,options:{callback:t,...n}}}function Vo(t,n,e){const r=lo(J.host,t,e,n);if(r)return r;const o=n.element;t.options.callback(o,t,n,n.state)}function To(t,n,e,r,o){return Jo(n,o)}function Jo(t,n){const e=n.element,r=n.state={};eo(n),function(t,n,e,r){n.options.callback(t,n,e,r);const o=n.options;o.onInit&&o.onInit(t,n,e,r)}(e,t,n,r),ro()}function Bo(t){const n=t,e=n.tagJsVar,r=e.options;if(r.onDestroy){const o=n.element;wo([],(function(){eo(t);const a=r.onDestroy(o,e,n,n.state);return ro(),a}),t.stateOwner)}}ko.onInit=t=>ko((()=>{}),{onInit:t}),ko.onDestroy=t=>ko((()=>{}),{onDestroy:t});const Io={tagElement:yo,renderWithSupport:he,renderSupport:xe,renderTagOnly:Qn,paint:W}},9149:(t,n,e)=>{function r({fxIn:t,fxOut:n,outPositionAbsolute:e=!0}){return{in:(n,e)=>o({fxName:t,...n},e),out:(t,r)=>a({fxName:n,outPositionAbsolute:e,...t},r)}}e.d(n,{tw:()=>b,fx:()=>x,rW:()=>f});const o=async({target:t,fxName:n="fadeInUp"},e)=>(t.style.opacity="0",e&&await c(e),t.style.opacity="1",s(n,t)),a=async({target:t,outPositionAbsolute:n=!0,fxName:e="fadeOutUp"},r)=>(n&&function(t){t.style.zIndex=t.style.zIndex||1;const n=t.offsetTop+"px",e=t.offsetLeft+"px",r=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",o=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=n,t.style.left=e,t.style.width=r,t.style.height=o,t.style.position="absolute"}),0)}(t),r&&await c(r),s(e,t));function s(t,n){let e;const r=new Promise((function(t){e=t}));return n.classList.add("animate__animated","animate__"+t),n.addEventListener("animationend",(function r(o){o.target===n&&(n.classList.remove("animate__animated","animate__"+t),n.removeEventListener("animationend",r),e(void 0))})),r}function c(t){return new Promise((n=>{setTimeout(n,t)}))}var i=e(2387);const{in:l,out:u}=r({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:d,out:p}=r({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:h,out:g}=r({fxIn:"fadeIn",fxOut:"fadeOut"}),f=({stagger:t=100,fxIn:n,fxOut:e,duration:r="2s",inName:o="fadeInUp",outName:a="fadeOutDown",outPositionAbsolute:s=!1}={})=>{let c=0;const l=v((function(n){n.style.setProperty("--animate-duration",r);const e=t*c++;return l.fxIn({target:n},e).then((()=>{--c}))}),(function(n){n.style.setProperty("--animate-duration",r);const e=t*c++,o=l.fxOut({target:n},e).then((()=>{--c}));return(0,i.sj)(o),o}),n,e,o,a,s);return l.host},x=({fxIn:t,fxOut:n,stagger:e,inName:r="fadeInUp",outName:o="fadeOutDown",duration:a=".2s",outPositionAbsolute:s=!1}={})=>{const c=v((t=>(t.style.setProperty("--animate-duration",a),c.fxIn({target:t},e))),(t=>{t.style.setProperty("--animate-duration",a);const n=c.fxOut({target:t},e);return(0,i.sj)(n),n}),t,n,r,o,s);return c.host};function v(t,n,e,o,a,s,c){if(!e||!o){const t=r({fxIn:a,fxOut:s,outPositionAbsolute:c});e||(e=t.in),o||(o=t.out)}return{fxIn:e,fxOut:o,host:(0,i.ho)((()=>{}),{onInit:t,onDestroy:n})}}function b({fxIn:t,fxOut:n,duration:e=".2s",outPositionAbsolute:o=!1}={duration:".2s",outPositionAbsolute:!1}){if(!t||!n){const e=r({fxIn:"fadeInUp",fxOut:"fadeOutDown",outPositionAbsolute:o});t||(t=e.in),n||(n=e.out)}const a=(0,i.iB)();return i.dy`
    <div oninit=${t} ondestroy=${n} style.--animate-duration=${e}>${a}</div>
  `.acceptInnerHTML(a)}},7582:(t,n,e)=>{e.d(n,{CR:()=>i,FC:()=>d,Jh:()=>s,KL:()=>p,XA:()=>c,ZT:()=>o,ev:()=>l,mG:()=>a,qq:()=>u});var r=function(t,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},r(t,n)};function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function a(t,n,e,r){return new(e||(e=Promise))((function(o,a){function s(t){try{i(r.next(t))}catch(t){a(t)}}function c(t){try{i(r.throw(t))}catch(t){a(t)}}function i(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,c)}i((r=r.apply(t,n||[])).next())}))}function s(t,n){var e,r,o,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=c(0),s.throw=c(1),s.return=c(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function c(c){return function(i){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;s&&(s=0,c[0]&&(a=0)),a;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=n.call(t,a)}catch(t){c=[6,t],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,i])}}}Object.create;function c(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,a=e.call(t),s=[];try{for(;(void 0===n||n-- >0)&&!(r=a.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return s}function l(t,n,e){if(e||2===arguments.length)for(var r,o=0,a=n.length;o<a;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function d(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),a=[];return r=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",(function(t){return function(n){return Promise.resolve(n).then(t,l)}})),r[Symbol.asyncIterator]=function(){return this},r;function s(t,n){o[t]&&(r[t]=function(n){return new Promise((function(e,r){a.push([t,n,e,r])>1||c(t,n)}))},n&&(r[t]=n(r[t])))}function c(t,n){try{(e=o[t](n)).value instanceof u?Promise.resolve(e.value.v).then(i,l):d(a[0][2],e)}catch(t){d(a[0][3],t)}var e}function i(t){c("next",t)}function l(t){c("throw",t)}function d(t,n){t(n),a.shift(),a.length&&c(a[0][0],a[0][1])}}function p(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=c(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){(function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)})(r,o,(n=t[e](n)).done,n.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={exports:{}};return t[r](a,a.exports,e),a.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{e.d(r,{gV:()=>hn,jG:()=>yn,fm:()=>t.fm,KH:()=>wn,bX:()=>t.bX,mK:()=>D});var t=e(2387),n=e(8232);const o=(0,t._q)((()=>(e=(0,t.fo)(0),r=(0,t.td)(0),o=0,s=0,c=(0,t.$q)((t=>[{renderCount:s,counter:o}]=t({renderCount:s,counter:o}))))=>(++s,t.dy.dom(a.allStrings2265941[1],(0,t.Ld)(e),r,o,(()=>{++o,e.next(o),r.value=o}),(0,n.v)({renderCount:s,name:"insideMultiRender"}))))),a={allStrings2265941:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"div",ch:[{nn:"span",ch:[{nn:"text",tc:"👍"},{nn:"span",at:[["id","👍-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"button",at:[["type","button"],["id","👍-counter-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"++👍"}]}]},{nn:"text",v:3},{nn:"hr"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"insideMultiRender"}]},{nn:"text",v:4}]}],[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var s=e(9995);let c=null;function i(t=!0,n,r){null!==c&&(clearTimeout(c),console.debug("🏃 Cleared previous testing to start again..."));c=setTimeout((async()=>{n=n||u.views,console.debug("🏃 Prepare test suites...");const o=await async function(t,n=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let r=0;n&&(await Promise.resolve().then(e.bind(e,8451)),++r),t.includes(l.Content)&&(await Promise.resolve().then(e.bind(e,4118)),await Promise.resolve().then(e.bind(e,3835)),++r),t.includes(l.Counters)&&(await Promise.resolve().then(e.bind(e,8428)),++r),t.includes(l.Props)&&(await Promise.resolve().then(e.bind(e,8749)),++r),t.includes(l.ProviderDebug)&&(await Promise.resolve().then(e.bind(e,8530)),++r),t.includes(l.TagSwitchDebug)&&(await Promise.resolve().then(e.bind(e,3168)),++r),t.includes(l.Child)&&(await Promise.resolve().then(e.bind(e,1527)),++r),t.includes(l.Arrays)&&(await Promise.resolve().then(e.bind(e,842)),++r),t.includes(l.Mirroring)&&(await Promise.resolve().then(e.bind(e,6774)),++r),t.includes(l.WatchTesting)&&(await Promise.resolve().then(e.bind(e,702)),++r),t.includes(l.FunInPropsTag)&&(await Promise.resolve().then(e.bind(e,1157)),++r),t.includes(l.AttributeDebug)&&(await Promise.resolve().then(e.bind(e,2178)),++r),t.includes(l.OneRender)&&(await Promise.resolve().then(e.bind(e,7994)),++r),t.includes(l.Todo)&&(await Promise.resolve().then(e.bind(e,3337)),++r),t.includes(l.Destroys)&&(await Promise.resolve().then(e.bind(e,4236)),++r),console.debug(`🏃 Running ${r} test suites...`);try{const t=Date.now(),n=await(0,s.executeBrowserTests)(),e=Date.now()-t;return console.info(`✅ tests completed in ${e}ms`),n}catch(t){return console.error("❌ tests failed:",t),!1}}(n,r);t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var l;!function(t){t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug"}(l||(l={}));const u=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(l)});return JSON.parse(t)}();function d(){localStorage.taggedjs=JSON.stringify(u)}const p=Object.values(l),h=(n=p)=>{const e=[...n].sort(((t,n)=>t.localeCompare(n)));return t.dy.dom(v.allStrings428820[0],e.map((n=>t.dy.dom(v.allStrings428820[1],"view-type-"+n,"view-type-"+n,u.views.includes(n)&&"checked",(()=>function(t,n=!0){u.views.includes(t)?f(t):g.next({type:t,checkTesting:n});d()}(n)),"view-type-"+n,n,`isolated.html#${n}`,`#${n}`).key(n))),n.length>1&&t.dy.dom(v.allStrings428820[2],(()=>n.forEach((t=>{x(t,!1),d()}))),(()=>n.forEach((t=>{f(t),d()})))))};h.tempNote="sections";const g=new t.xQ;function f(t){u.views=u.views.filter((n=>n!==t))}function x(t,n=!0){u.views.push(t),n&&u.autoTest&&i()}const v={allStrings428820:[[{nn:"div",ch:[{nn:"h3",ch:[{nn:"text",tc:"Sections"}]},{nn:"text",tc:"\x3c!-- checkbox menu --\x3e"},{nn:"div",at:[["style","display:flex;gap:1em;flex-wrap:wrap;margin:1em;"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n\n        "},{nn:"text",v:1}]}]}],[{nn:"div",at:[["style","flex:1;white-space:nowrap;"]],ch:[{nn:"input",at:[["type","checkbox"],["id",{tagJsVar:0},null],["name",{tagJsVar:1},null],[{tagJsVar:2}],["click",{tagJsVar:3},null]]},{nn:"label",at:[["for",{tagJsVar:4},null]],ch:[{nn:"text",tc:"&nbsp;"},{nn:"text",v:5}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;text-decoration:none;"],["href",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🔗"}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"↗️"}]}]}],[{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"&nbsp;all"}]}]},{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"&nbsp;none"}]}]}]]},b=(0,t._q)(((n,e)=>t.dy.dom(y.allStrings19347[0],n,(()=>e(n))))),y={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},m=(0,t._q)(((e,r,o)=>(a="other",s=0,c=0,i=(0,t.$q)((t=>[{other:a,counter:s,renderCount:c}]=t({other:a,counter:s,renderCount:c}))),l=++c,{addArrayItem:u,myFunction:d,deleteItem:p,child:h,array:g}=e)=>t.dy.dom(w.allStrings598669[0],r.function.original?"taggjedjs-wrapped":"nowrap",r.count,h.myChildFunction.original?"taggjedjs-wrapped":"nowrap",d.original?"taggjedjs-wrapped":"nowrap",d,(0,t.J8)(h.myChildFunction),o,C.function,(()=>++s),g.length,g.map((t=>b(t,p).key(t))),u,s,(0,n.v)({renderCount:c,name:"funInProps_tag_child"})))),w={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},_=(0,t._q)((e=>(r=0,o=(0,t.$q)((t=>[r]=t(r))),a=++r,s=(t=>{if("Enter"===t.key){const n=t.target.value.trim();e(n),t.target.value=""}}))=>t.dy.dom(S.allStrings66965[0],s,(t=>{e(t.target.value),t.target.value=""}),e,(0,n.v)({renderCount:r,name:"addArrayComponent"})))),S={allStrings66965:[[{nn:"input",at:[["type","text"],["keyup",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"add by outside"}]},{nn:"text",v:3},{nn:"text",tc:"\n"}]]},C={function:()=>++C.count,count:0},k=(0,t._q)((()=>(e=[],r=0,o=0,a=!0,s="a",c=(()=>++r),i=(0,t.$q)((t=>[{array:e,counter:r,renderCount:o,showChild:a,somethingElse:s}]=t({array:e,counter:r,renderCount:o,showChild:a,somethingElse:s}))),l=++o,u=(t=>{e=e.map((t=>t)),e.push("string"==typeof t?t:"push"+e.length)}),d=(t=>e=e.filter((n=>n!==t))))=>t.dy.dom(V.allStrings360652[0],c,r,(0,n.v)({renderCount:o,name:"funInProps_tag_parent"}),C.function.original?"taggjedjs-wrapped":"nowrap",C.count,(()=>a=!a),e.length,u,a&&m({myFunction:c,array:e,addArrayItem:u,deleteItem:d,child:{myChildFunction:c}},C,c),_(u)))),V={allStrings360652:[[{nn:"button",at:[["id","fun-parent-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🤰 ++parent"}]},{nn:"span",at:[["id","fun_in_prop_display"]],ch:[{nn:"text",v:1}]},{nn:"text",v:2},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"🆎 main:"}]},{nn:"span",at:[["id","main_wrap_state"]],ch:[{nn:"text",v:3}]},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"button",at:[["id","toggle-fun-in-child"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"toggle child"}]},{nn:"text",tc:"array length: "},{nn:"text",v:6},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"reset add"}]},{nn:"hr"},{nn:"text",v:8},{nn:"text",tc:"\n  \n  "},{nn:"text",v:9},{nn:"text",tc:"\n"}]]},T=t._q.immutableProps(((n,e,r)=>(o=!1,a=(0,t.$q)((t=>[o]=t(o))))=>t.dy.dom(B.allStrings172763[0],n.completed,o,o?t.dy.dom(B.allStrings172763[2],n.title,(()=>o=!1),(t=>J(t,(t=>{!function(t,n,e,r){if(0===t.length)return void r.removeItem(n.id);r.updateToByIndex(n,{title:t},e)}(t,n,r,e),o=!1})))):t.dy.dom(B.allStrings172763[1],n.completed&&"✅",(t=>e.toggleItem(n,r)),n.completed&&"checked",(()=>e.toggleItem(n,r)),(()=>o=!o),n.title,(()=>e.removeItemByIndex(r))))));function J(t,n){if("Enter"===t.key){return n(t.target.value.trim()),!0}}const B={allStrings172763:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},I={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},L=t._q.immutableProps(((n,e,r,o)=>t.dy.dom(j.allStrings77156[0],o,o>1&&"s","/"===r,"/active"===r,"/completed"===r,n-o>0&&t.dy.dom(j.allStrings77156[1],(()=>e()))))),j={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const P=()=>window.location.hash.substring(1)||"/",E=()=>{const n=(0,t.SB)((()=>({route:P(),location:window.location}))),e=(0,t.uz)((t=>n.route=P())),r=(0,t.SB)((()=>(t=>{const n=()=>t(P());return window.addEventListener("hashchange",n),n})(e)));return(0,t.ev)((()=>window.removeEventListener("hashchange",r))),n},A=[],O=function(t){function n(n,e,r){return t[r]={...n,...e},t}return{addItem:function(n){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"===t?n:3&n|8).toString(16)})),title:n,completed:!1}),t},removeItem:function(n){return t.filter((t=>t.id!==n))},toggleItem:function(t,e){return n(t,{completed:!t.completed},e)},removeAll:function(){return t=[]},toggleAll:function(n){for(let e=t.length-1;e>=0;--e)t[e]={...t[e],completed:n};return t},removeCompleted:function(){for(let n=t.length-1;n>=0;--n)t[n].completed&&t.splice(n,1);return t},removeItemByIndex:function(n){return t.splice(n,1),t},completeItem:function(t,e){return n(t,{completed:!0},e)},updateItemByIndex:function(n,e){return t[e]={...n},t},updateToByIndex:n}}(A),D=()=>{const n=E().route,e=A.filter((t=>!t.completed)).length,r="/completed"===n,o="/active"===n&&A.filter((t=>!t.completed))||r&&A.filter((t=>t.completed))||A,a=A.length;return t.dy.dom(N.allStrings150746[0],!1,(n=>t._q.renderOnce=()=>t.dy.dom(I.allStrings47860[0],(t=>{J(t,(t=>n.addItem(t)))&&(t.target.value="")})))(O),a>0&&t.dy.dom(N.allStrings150746[1],e<1,(t=>O.toggleAll(t.target.checked)),o.map(((t,n)=>T(t,O,n).key(t.id))),L(a,O.removeCompleted,n,e)))},N={allStrings150746:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},$=(0,t._q)(((e,r,o)=>{let a=0,s=0;return(0,t.$q)((t=>[{counter:a,renderCount:s}]=t({counter:a,renderCount:s}))),++s,t.dy.dom(H.allStrings128026[0],o,(0,t.DE)(o),o instanceof Array,(()=>++a),a,a,(0,n.v)({renderCount:s,name:"innerHtmlTest"}))})),q=(0,t._q)(((n,e)=>(r=0,o=0,a=(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),s=++o)=>t.dy.dom(H.allStrings128026[1],n,e,(()=>++r),r,r,!1))),H={allStrings128026:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"no props test"}]},{nn:"div",at:[["style","border:2px solid purple;"]],ch:[{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectInstance:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectTagArray:"},{nn:"text",v:2}]},{nn:"button",at:[["id","innerHtmlTest-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"increase innerHtmlTest "},{nn:"text",v:4}]},{nn:"span",at:[["id","innerHtmlTest-counter-display"]],ch:[{nn:"text",v:5}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},M=(0,t._q)(((n,e,r)=>t.dy.dom(z.allStrings795052[0],n,e,r))),R=(0,t._q)(((e="childTests")=>(e=0,r=0,o=(0,t.$q)((t=>[{renderCount:e,counter:r}]=t({renderCount:e,counter:r}))),a=++e)=>t.dy.dom(z.allStrings795052[2],M(1,2,t.dy.dom(z.allStrings795052[3],Date.now())),$({},2,t.dy.dom(z.allStrings795052[4],(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest"}))),(()=>{const n=(0,t.iB)();return t.dy.dom(z.allStrings795052[1],11,n,22).acceptInnerHTML(n)})().innerHTML=t.dy.dom(z.allStrings795052[5],(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest-c"})),q(22,t.dy.dom(z.allStrings795052[6],(()=>++r),r,r,(0,n.v)({renderCount:e,name:"innerHtmlPropsTest child"}))),function({child:n}){return t.dy.dom(z.allStrings795052[8],n)}({child:t.dy.dom(z.allStrings795052[7],(()=>++r),r,r)}),(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests"}))));const z={allStrings795052:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"xxxxx"}]},{nn:"div",ch:[{nn:"text",tc:"hello other world "},{nn:"text",v:0},{nn:"text",tc:" - "},{nn:"text",v:1}]},{nn:"div",at:[["style","border:2px solid red;"]],ch:[{nn:"text",tc:"***"},{nn:"text",v:2},{nn:"text",tc:"***"}]}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child as prop"}]},{nn:"text",v:0}]}]]};let X=(0,t.td)(0);const W=(0,t._q)((()=>(e=!0,r=0,o=(0,t.$q)((t=>[{renderCount:r,on:e}]=t({renderCount:r,on:e}))),a=++r)=>t.dy.dom(Y.allStrings72990[0],X,e,e&&U(),(()=>{e=!e}),e?"destroy":"restore",(0,n.v)({renderCount:r,name:"destroys"})))),U=(0,t._q)((()=>(n=(0,t.ev)((()=>{++X.value})))=>t.dy.dom(Y.allStrings72990[1],t.ho.onDestroy((()=>{++X.value}))))),Y={allStrings72990:[[{nn:"text",tc:"\n  destroyCount: "},{nn:"span",at:[["id","destroyCount"]],ch:[{nn:"text",v:0}]},{nn:"text",tc:"on/off: "},{nn:"text",v:1},{nn:"text",tc:"\n  \n  "},{nn:"text",v:2},{nn:"button",at:[["id","toggle-destroys"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","destroyable-content"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"will be destroyed"}]}]]};var F=e(9149);const Q=(0,t._q)((({score:e,playerIndex:r})=>{let o=0;return(0,t.$q)((t=>[o]=t(o))),++o,t.dy.dom(G.allStrings67878[0],e.frame,`score-data-${r}-${e.frame}-inside-button`,(()=>++e.score),e.score,`score-data-${r}-${e.frame}-inside-display`,e.score,(()=>++o),(0,n.v)({renderCount:o,name:"scoreData"+e.frame}))})),G={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},K=(0,t._q)((()=>(e=(0,t.SB)([]),r=0,o=0,a=(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))))=>{const s=(0,t.IX)(["d","e","f"]),c=(0,t.SB)(["a","b","c"]),i=(0,t.SB)((()=>(0,F.rW)({stagger:10,duration:".1s"}))),l=()=>({name:"Person "+e.length,scores:"0,".repeat(0).split(",").map(((t,n)=>({frame:n+1,score:Math.floor(4*Math.random())+1})))});function u(t){for(let n=0;n<t;++n)s[s.length]=s.length.toString()}return++r,t.dy.dom(tt.allStrings873968[0],o,s.length,(0,t.Ld)(s,(n=>n.map(((n,e)=>t.dy.dom(tt.allStrings873968[1],i,`signal-array-item-${e}`,e,`signal-array-item-counter-display-${e}`,o,n,s.length,`signal-array-item-delete-btn-${e}`,(()=>{s.splice(e,1)}),(()=>++o),o).key(n))))),(()=>++o),o,(()=>u(1)),(()=>u(10)),(()=>{setTimeout((()=>{s[s.length]=s.length.toString()}),1e3)}),(()=>{setTimeout((()=>{s.length=0}),1e3)}),c.map(((n,e)=>t.dy.dom(tt.allStrings873968[2],o,e,n,c.length,(()=>{c.splice(e,1)})).key(n))),(()=>++o),o,(()=>c[c.length]=c.length.toString()),Z({players:e,getNewPlayer:l}),(()=>{e.push(l())}),e.length+1,(()=>{e.push(l()),e.push(l()),e.push(l())}),(()=>{e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l())}),e.length>0&&t.dy.dom(tt.allStrings873968[3],(0,F.fx)({duration:".1s"}),(()=>e.length=0)),(0,n.v)({renderCount:r,name:"arrayTests.ts"}))})),Z=(0,t._q)((({players:n,getNewPlayer:e})=>{const r=n.map(((r,o)=>function(n,e,r,o){return t.dy.dom(tt.allStrings873968[5],(0,F.fx)({duration:".1s"}),n.name,e,n.scores.map(((n,e)=>t.dy.dom(tt.allStrings873968[6],(0,F.fx)(),`score-data-${e}-${n.frame}-outside-button`,(()=>++n.score),n.score,`score-data-${e}-${n.frame}-outside-display`,n.score,Q({score:n,playerIndex:e})).key(n))),n.edit&&t.dy.dom(tt.allStrings873968[7],(()=>{r.splice(e,1),n.edit=!n.edit})),n.edit&&t.dy.dom(tt.allStrings873968[8],"player-remove-promise-btn-"+e,(async()=>{n.edit=!n.edit,r.splice(e,1)})),"player-edit-btn-"+e,(()=>n.edit=!n.edit),(()=>{r.splice(e,0,o())}))}(r,o,n,e).key(r)));return t.dy.dom(tt.allStrings873968[4],r)}));const tt={allStrings873968:[[{nn:"text",tc:"\x3c!--arrayTests.js--\x3e"},{nn:"span",ch:[{nn:"text",tc:"count display:"},{nn:"span",at:[["id","arrays-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"signal array test "},{nn:"sup",at:[["id","signal-array-count"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"button",at:[["type","button"],["id","signal-array-increase-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:4}]},{nn:"button",at:[["type","button"],["id","push-signal-array-btn"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"add number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"add 10 number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"add number by delay"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"delay clear array"}]}]}]},{nn:"fieldset",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"simple array test"}]},{nn:"text",v:9},{nn:"div",ch:[{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:11}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"add number"}]}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:13}]},{nn:"button",at:[["id","array-test-push-item"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"push item "},{nn:"text",v:15}]},{nn:"button",at:[["click",{tagJsVar:16},null]],ch:[{nn:"text",tc:"push 3 items"}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"push 9 items"}]},{nn:"text",v:18},{nn:"text",tc:"\n\n    "},{nn:"text",v:19},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","border:1px solid black;border-radius:.2em"],[{tagJsVar:0}],["id",{tagJsVar:1},null]],ch:[{nn:"text",tc:"index:"},{nn:"text",v:2},{nn:"text",tc:" counter:"},{nn:"span",at:[["id",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",tc:" content:"},{nn:"text",v:5},{nn:"text",tc:" length:"},{nn:"text",v:6},{nn:"button",at:[["id",{tagJsVar:7},null],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:10}]}]}],[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"text",v:0},{nn:"text",tc:" index:"},{nn:"text",v:1},{nn:"text",tc:" x:"},{nn:"text",v:2},{nn:"text",tc:" length:"},{nn:"text",v:3},{nn:"button",at:[["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]}]}],[{nn:"button",at:[[{tagJsVar:0}],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove all"}]}],[{nn:"text",tc:"\x3c!-- playersLoop.js --\x3e"},{nn:"text",v:0},{nn:"text",tc:"\x3c!-- end:playersLoop.js --\x3e"}],[{nn:"div",at:[["style","background-color:black;"],[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",tc:"name:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"index:"},{nn:"text",v:2}]},{nn:"div",at:[["style","background-color:purple;padding:.5em"]],ch:[{nn:"text",tc:"scores:\n        "},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n      "},{nn:"text",v:5},{nn:"button",at:[["id",{tagJsVar:6},null],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"edit"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"add before"}]}]}],[{nn:"div",at:[["class","animate__slow"],[{tagJsVar:0}]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"outer score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6}]}]}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"remove"}]}],[{nn:"button",at:[["id",{tagJsVar:0},null],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove by promise"}]}]]},nt=(0,t._q)(((e="tagSwitchDebug")=>{let r=null,o=0;(0,t.$q)((t=>[{renderCount:o,selectedTag:r}]=t({renderCount:o,selectedTag:r})));let a="select tag below";switch(r){case null:a="null, select tag below";break;case"":a=t.dy.dom(ct.allStrings484932[0]);break;case"1":a=rt({title:"value switch"});break;case"2":a=ot({title:"value switch"});break;case"3":a=at({title:"value switch"})}let s=t.dy.dom(ct.allStrings484932[1]);switch(r){case null:s=t.dy.dom(ct.allStrings484932[2]);break;case"":s=t.dy.dom(ct.allStrings484932[3]);break;case"1":s=rt({title:"tag switch"});break;case"2":s=ot({title:"tag switch"});break;case"3":s=at({title:"tag switch"})}return++o,t.dy.dom(ct.allStrings484932[4],(null===r?"null":void 0===r&&"undefined")||""===r&&"empty-string"||r,(function(t){r=t.target.value,"undefined"===r&&(r=void 0),"null"===r&&(r=null)}),"string"!=typeof r||r.length?{}:{selected:!0},void 0===r?{selected:!0}:{},null===r?{selected:!0}:{},"1"===r?{selected:!0}:{},"2"===r?{selected:!0}:{},"3"===r?{selected:!0}:{},a,s,"3"===r?at({title:"ternary simple"}):rt({title:"ternary simple"}),et({selectedTag:r}),st({selectedTag:r}),(0,n.v)({renderCount:o,name:"tagSwitchDebug"}))})),et=(0,t._q)((({selectedTag:n})=>{const e="3"===n?at({title:"ternaryPropTest"}):rt({title:"ternaryPropTest"});return t.dy.dom(ct.allStrings484932[5],n,e)})),rt=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[6],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),ot=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[7],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),at=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[8],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),st=(0,t._q)((({selectedTag:n},e="arraySwitching")=>{switch(n){case void 0:return t.dy.dom(ct.allStrings484932[9]);case null:return t.dy.dom(ct.allStrings484932[10]);case"":return t.dy.dom(ct.allStrings484932[11]);case"1":return t.dy.dom(ct.allStrings484932[12],rt({title:`tag ${n}`}));case"2":return t.dy.dom(ct.allStrings484932[13],["b","c"].map((e=>t.dy.dom(ct.allStrings484932[14],ot({title:`array ${n} ${e}`})).key(e))));case"3":return t.dy.dom(ct.allStrings484932[15],["d","e","f"].map((e=>t.dy.dom(ct.allStrings484932[16],at({title:`array ${n} ${e}`})).key(e))))}return t.dy.dom(ct.allStrings484932[17])})),ct={allStrings484932:[[{nn:"div",at:[["id","empty-string-1"]]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"null, select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"empty-string, select tag above"}]}],[{nn:"div",at:[["id","selectTag-wrap"]],ch:[{nn:"text",tc:"selectedTag: |"},{nn:"text",v:0},{nn:"text",tc:"|"}]},{nn:"select",at:[["id","tag-switch-dropdown"],["change",{tagJsVar:1},null]],ch:[{nn:"option"},{nn:"text",tc:"\x3c!-- TODO: implement selected attribute ---\x3e"},{nn:"option",at:[["value",""],[{tagJsVar:2}]],ch:[{nn:"text",tc:"empty-string"}]},{nn:"option",at:[["value","undefined"],[{tagJsVar:3}]],ch:[{nn:"text",tc:"undefined"}]},{nn:"option",at:[["value","null"],[{tagJsVar:4}]],ch:[{nn:"text",tc:"null"}]},{nn:"option",at:[["value","1"],[{tagJsVar:5}]],ch:[{nn:"text",tc:"tag 1"}]},{nn:"option",at:[["value","2"],[{tagJsVar:6}]],ch:[{nn:"text",tc:"tag 2"}]},{nn:"option",at:[["value","3"],[{tagJsVar:7}]],ch:[{nn:"text",tc:"tag 3"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],["id","switch-tests-wrap"]],ch:[{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 1 - string | Tag"}]},{nn:"div",ch:[{nn:"text",v:8}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 2 - Tag"}]},{nn:"div",ch:[{nn:"text",v:9}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3 - ternary (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:10}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3.2 - ternary via prop (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:11}]}]},{nn:"div",at:[["style","border:1px solid red;flex-grow:1"],["id","arraySwitching-test-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 4 - arraySwitching"}]},{nn:"div",at:[["id","arraySwitching-wrap"]],ch:[{nn:"text",v:12}]}]}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["id","ternaryPropTest-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:":"},{nn:"text",v:1}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag1"]],ch:[{nn:"div",at:[["id","tagSwitch-1-hello"]],ch:[{nn:"text",tc:"Hello 1 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag2"]],ch:[{nn:"div",at:[["id","tagSwitch-2-hello"]],ch:[{nn:"text",tc:"Hello 2 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag3"]],ch:[{nn:"div",at:[["id","tagSwitch-3-hello"]],ch:[{nn:"text",tc:"Hello 3 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"text",tc:"its an undefined value"}],[{nn:"text",tc:"its a null value"}],[{nn:"text",tc:"space"}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",tc:"nothing to show for in arrays"}]]},it=(0,t._q)((()=>{const n=lt();return t.dy.dom(ut.allStrings156734[0],n,n)})),lt=()=>{let n=0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(ut.allStrings156734[1],n,(()=>++n),n)},ut={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},dt=(e,r)=>t._q.use=(o=(0,t.SB)("statePropDebug.tag.ts"),a=!1,s=0,c=(0,t.$q)((t=>[{edit:a,renderCount:s}]=t({edit:a,renderCount:s}))),i=++s)=>t.dy.dom(pt.allStrings53929[0],e,(()=>a=!a),a,r,(0,n.v)({renderCount:s,name:"statePropDebug-tag"})),pt={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},ht=(0,t._q)(((e="propsDebugMain")=>(e=0,r=0,o=0,a={test:33,x:"y"},s=(0,t.SB)((()=>new Date)),c=JSON.stringify(a,null,2),i=!0,l=(0,t.$q)((t=>[{syncPropNumber:e,propNumber:r,renderCount:o,propsJson:a,date:s,statePropDisplay:i}]=t({syncPropNumber:e,propNumber:r,renderCount:o,propsJson:a,date:s,statePropDisplay:i}))))=>t.dy.dom(bt.allStrings3197847[0],(t=>a=JSON.parse(t.target.value)),c,c,++o,(()=>++r),r,r,xt({propNumber:r,propsJson:a,propNumberChange:t=>{r=t}}),e,(()=>++e),(0,n.v)({renderCount:o,name:"sync_props_callback"}),ft({syncPropNumber:e,propNumberChange:t=>e=t,parentTest:t=>t}),i&&dt(r,t.dy.dom(bt.allStrings3197847[1])),(()=>i=!i),s,function(t){const n=new Date(t),e=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),o=String(n.getDate()).padStart(2,"0"),a=String(n.getHours()).padStart(2,"0"),s=String(n.getMinutes()).padStart(2,"0");return{date:`${e}-${r}-${o}`,time:`${a}:${s}`}}(s).date,(t=>{const n=t.target.value;s=new Date(n)}),gt({date:s})))),gt=(0,t._q)((({date:n})=>t.dy.dom(bt.allStrings3197847[2],n))),ft=(0,t._q)((({syncPropNumber:e,propNumberChange:r,parentTest:o})=>(a=(0,t.SB)("syncPropDebug"),s=0,c=0,i=(0,t.$q)((t=>[{counter:s,renderCount:c}]=t({counter:s,renderCount:c}))))=>(++c,e%2==1&&r(e+=1),t.dy.dom(bt.allStrings3197847[3],e,(()=>r(++e)),s,o(s),(()=>{o(++s)}),(0,n.v)({renderCount:c,name:"child_sync_props_callback"}))))),xt=(0,t._q)((({propNumber:n,propsJson:e,propNumberChange:r})=>(o=(0,t.SB)("propsDebug"),a=0,s=0,c=(0,t.RW)((t=>[n]=t(n))),i=n,l=(0,t.$q)((t=>[{renderCount:a,propNumberChangeCount:s,myPropNumber:i}]=t({renderCount:a,propNumberChangeCount:s,myPropNumber:i}))),u=(0,t.YP)([n],(()=>i=n)),d=(0,t.YP)([i],(()=>++s)))=>t.dy.dom(bt.allStrings3197847[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(d,null,2),(()=>r(++i)),i,i,(()=>++n),n,n,(()=>++a),++a,(()=>++i),i,s,vt({propNumber:i,callback:()=>++i})))),vt=t._q.immutableProps((({propNumber:e,callback:r})=>(o=(0,t.SB)("propFnUpdateTest"),a=0,s=(0,t.$q)((t=>[a]=t(a))))=>(++a,t.dy.dom(bt.allStrings3197847[5],r,e,e,(0,n.v)({renderCount:a,name:"propFnUpdateTest"})))));const bt={allStrings3197847:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},yt=(0,t._q)((n=>t.dy.dom(mt.allStrings248805[0],(()=>n.showDialog=!1),n.showDialog?t.dy.dom(mt.allStrings248805[1],JSON.stringify(n,null,2)):"no dialog"))),mt={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]};class wt{constructor(){this.tagDebug=0,this.showDialog=!1}}const _t=()=>({counter:0});function St(){return{upper:t.a.create(Ct),test:0}}function Ct(){return(0,t.SB)("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const kt=(0,t._q)(((e="providerDebugBase")=>{t.a.create(_t);const r=t.a.create(wt),o=t.a.create(St),a=["red","blue","green","purple","orange"];let s=0,c=0,i="red",l="green",u="green";return(0,t.$q)((t=>[{propCounter:s,renderCount:c,cycleColorParent:i,cycleColorChild:l,cycleColorChild2:u}]=t({propCounter:s,renderCount:c,cycleColorParent:i,cycleColorChild:l,cycleColorChild2:u}))),r.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++c,t.dy.dom(Lt.allStrings6783656[0],o.test,o.upper?.test||"?",r.tagDebug||"?",(()=>++o.test),o.test,o.test,(()=>++o.upper.test),o.upper.test,o.upper.test,(()=>++r.tagDebug),r.tagDebug,r.tagDebug,(()=>++s),s,s,(()=>r.showDialog=!0),r.showDialog,Vt({propCounter:s,propCounterChange:t=>{s=t}}),c,(0,n.v)({renderCount:c,name:"providerDebugBase"}),yt(r),(t=>i=t.target.value),a.map((n=>t.dy.dom(Lt.allStrings6783656[1],n,i===n,n).key(n))),(t=>l=t.target.value),a.map((n=>t.dy.dom(Lt.allStrings6783656[2],n,l===n,n).key(n))),(t=>u=t.target.value),a.map((n=>t.dy.dom(Lt.allStrings6783656[3],n,u===n,n).key(n))),Jt(i),Bt(l),It(u))})),Vt=(0,t._q)((({propCounter:e,propCounterChange:r,_:o="providerDebug.js@child"})=>{const a=t.a.inject(_t),s=t.a.inject(St),c=t.a.inject(wt),i=t.a.inject(Ct);let l=!1,u=0;(0,t.$q)((t=>[{showProProps:l,renderCount:u}]=t({showProProps:l,renderCount:u})));const d=(0,t._)(),p=(0,t.SB)((()=>new t.xQ));return(0,t.nc)((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),p.subscribe((t=>{d((n=>{s.test=t}))()}))})),++u,t.dy.dom(Lt.allStrings6783656[7],(()=>++s.test),s.test,s.test,(()=>++i.test),i.test,i.test,(()=>++a.counter),a.counter,a.counter,(()=>p.next(s.test+1)),s.test,(()=>++c.tagDebug),c.tagDebug,c.tagDebug,(()=>r(++e)),e,e,(()=>c.showDialog=!0),c.showDialog,(()=>l=!l),l?"hide":"show",l&&t.dy.dom(Lt.allStrings6783656[8],(0,F.fx)(),Tt(c)),u,(0,n.v)({renderCount:u,name:"providerDebugInner"}))})),Tt=(0,t._q)((n=>t.dy.dom(Lt.allStrings6783656[9],JSON.stringify(n,null,2)))),Jt=(n="red")=>(0,t.ho)((()=>{const e=t._q.getElement();e.style.border="2px solid "+n,e.style.display="flex",e.style.gap="1em"})),Bt=(n="green")=>(0,t.ho)((()=>{const e=t._q.getElement();e.style.border="2px solid "+n,e.style.flex="1",e.innerHTML="wonderful"})),It=(n="green")=>(0,t.ho)((()=>{const e=t._q.getElement();e.style.border="2px solid "+n,e.style.flex="1",e.innerHTML="wonderful too"})),Lt={allStrings6783656:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"In-Cycle Context Communication"}]},{nn:"div",at:[["style","margin-bottom: 1em"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:21},null]],ch:[{nn:"text",v:22}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:23},null]],ch:[{nn:"text",v:24}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:25},null]],ch:[{nn:"text",v:26}]}]}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:27}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:28}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",v:29}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}]]},jt=(0,t._q)((({label:n,memory:e})=>{let r=!1,o=!1;return(0,t.$q)((t=>[{mouseOverEditShow:r,edit:o}]=t({mouseOverEditShow:r,edit:o}))),t.dy.dom(Pt.allStrings140407[0],(()=>r=!0),(()=>r=!1),n,e.counter,r||"false",(()=>++e.counter),o||r?"visible":"hidden",(()=>o=!o))})),Pt={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Et=Date.now(),At=t._q.immutableProps((({appCounterSubject:n},e="countersDebug")=>((0,t.SB)("countersDebug state"),t.dy.dom(qt.allStrings9522277[0],(0,t.Ld)(t.xQ.globalSubCount$),(()=>console.info("subs",t.xQ.globalSubs)),(()=>n.next((n.value||0)+1)),(0,t.Ld)(n),n.value,$t())))),Ot=t._q.deepPropWatch((({propCounter:e,increasePropCounter:r})=>(o=0,a=0,s=0,c=(0,t.$q)((t=>[{elmInitCount:s,otherCounter:o,renderCount:a}]=t({elmInitCount:s,otherCounter:o,renderCount:a}))),i=++a)=>t.dy.dom(qt.allStrings9522277[1],t.ho.onInit((()=>++s)),s,r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"inner_counters"})))),Dt=t._q.watchProps((({propCounter:e,increasePropCounter:r})=>{let o=0,a=0;return(0,t.$q)((t=>[{otherCounter:o,renderCount:a}]=t({otherCounter:o,renderCount:a}))),++a,t.dy.dom(qt.allStrings9522277[2],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"shallow_counters"}))})),Nt=t._q.immutableProps((({propCounter:e,increasePropCounter:r})=>{let o=0,a=0;return(0,t.$q)((t=>[{otherCounter:o,renderCount:a}]=t({otherCounter:o,renderCount:a}))),++a,t.dy.dom(qt.allStrings9522277[3],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"immutable_counters"}))})),$t=()=>t._q.use=(e=0,r=0,o=0,a=0,s=0,c=0,i=0,l=(0,t._)(),u=(0,t.uz)((t=>{t})),d=(()=>{++c}),p=(0,t.SB)((()=>({propCounter:c,increasePropCounter:d}))),h=(0,t.$q)((t=>[{counter:o,renderCount:s,propCounter:c,initCounter:i,immutableProps:p,statesRenderCount:e,statesRenderCount2:r}]=t({counter:o,renderCount:s,propCounter:c,initCounter:i,immutableProps:p,statesRenderCount:e,statesRenderCount2:r}))),g=(0,t.SB)((()=>new t.xQ(o))),f=(0,t.SB)((()=>new t.xQ(0))),x=(0,t.SB)((()=>new t.v0("222"))),v=(()=>{++o,x.next("333-"+o)}),b=t.xQ.all([x,g]),y=t.fo.all([x,g]),m=(0,t.SB)((()=>({counter:0}))),w=(0,t.SB)((()=>Date.now())),_=(0,t.nc)((()=>{++i,console.info("countersDebug.ts: 👉 i should only ever run once"),g.subscribe(l((t=>{o=t}))),g.subscribe(u)})))=>(p.propCounter!==c&&(p={propCounter:c,increasePropCounter:d}),++s,t.dy.dom(qt.allStrings9522277[5],i,e,(()=>{++e}),r,(()=>{++r}),(t=>o=Number(t.target.value)||0),d,c,c,v,o,o>1&&t.dy.dom(qt.allStrings9522277[6],v,o,o),(()=>g.next(o+1)),(0,t.Ld)(g),(()=>{setTimeout((()=>{f.next(f.value+1)}),10)}),(0,t.Ld)(f),(0,t.Ld)(b,(()=>o)),(0,t.Ld)(y,(()=>o)),!0,jt({label:"a-a-😻",memory:m}),jt({label:"b-b-😻",memory:m}),m.counter,(()=>++m.counter),Ot({propCounter:c,increasePropCounter:d}),Dt({propCounter:c,increasePropCounter:d}),Nt(p),(({propCounter:e,increasePropCounter:r})=>{let o=0,a=0,s="noWatchPropCounters";return(0,t.$q)((t=>[{otherCounter:o,renderCount:a,noWatchPropCounters:s}]=t({otherCounter:o,renderCount:a,noWatchPropCounters:s}))),++a,t.dy.dom(qt.allStrings9522277[4],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"nowatch_counters"}))})({propCounter:c,increasePropCounter:d}),t.ho.onInit((t=>t.innerText=(Date.now()-Et).toString())),t.ho.onInit((t=>t.innerText=(Date.now()-w).toString())),(0,n.v)({renderCount:s,name:"counters"}))),qt={allStrings9522277:[[{nn:"text",tc:"\x3c!--counters--\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"text",tc:"👉 Subscription count:"},{nn:"span",at:[["id","👉-counter-sub-count"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"log subs"}]},{nn:"div",ch:[{nn:"button",at:[["id","counters-app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-display"]],ch:[{nn:"text",v:3}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-subject-display"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],[{tagJsVar:0}]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"text",tc:"🔥 elmInitCount:"},{nn:"span",at:[["id","🔥-init-counter"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️-inner-counter"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"❤️-inner-counter propCounter:"},{nn:"text",v:3}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-inner-display"]],ch:[{nn:"text",v:4}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🤿-deep-counter"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤿 otherCounter:"},{nn:"text",v:6}]},{nn:"span",ch:[{nn:"text",tc:"🤿 "},{nn:"span",at:[["id","🤿-deep-display"]],ch:[{nn:"text",v:7}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:8}]},{nn:"text",v:9},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"text",tc:"initCounter:"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"😱 statesRenderCount:"},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"😱 ++statesRenderCount"}]}]},{nn:"div",ch:[{nn:"text",tc:"😱😱 statesRenderCount2:"},{nn:"text",v:3},{nn:"button",at:[["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"😱😱 ++statesRenderCount2"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"input",at:[["id","set-main-counter-input"],["placeholder","input counter value"],["keyup",{tagJsVar:5},null]]},{nn:"div",ch:[{nn:"button",at:[["id","❤️-increase-counter"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"❤️ propCounter:"},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-counter-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-standalone-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥦 stand alone counters"}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","🥦-standalone-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"text",v:11},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-counter"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🥦&lt;"},{nn:"span",at:[["id","subject-counter-subject-display"]],ch:[{nn:"text",v:13}]},{nn:"text",tc:"&gt;"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-async-counter"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🔀 🥦 ++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🔀 🥦&lt;"},{nn:"span",at:[["id","subject-async-counter-subject-display"]],ch:[{nn:"text",v:15}]},{nn:"text",tc:"&gt;"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 1"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject"]],ch:[{nn:"text",v:16}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 2"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject-2"]],ch:[{nn:"text",v:17}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shared memory"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:.5em"],["class.bold.text-blue",{tagJsVar:18},"class"]],ch:[{nn:"text",v:19},{nn:"text",tc:"\n      "},{nn:"text",v:20}]},{nn:"text",tc:"memory.counter:😻"},{nn:"text",v:21},{nn:"button",at:[["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"increase 😻"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"inner counter"}]},{nn:"text",v:23}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shallow props"}]},{nn:"text",v:24}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"immutable props"}]},{nn:"text",v:25}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"nowatch props"}]},{nn:"text",v:26}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ page load to display in&nbsp;"},{nn:"span",at:[[{tagJsVar:27}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ read in&nbsp;"},{nn:"span",at:[[{tagJsVar:28}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"text",v:29},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","conditional-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"conditional counter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","conditional-display"]],ch:[{nn:"text",v:2}]}]}]}]]},Ht=(0,t._q)((()=>{let n=!0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(Mt.allStrings52782[0],5,5,n&&t.dy.dom(Mt.allStrings52782[1]),n&&t.dy.dom(Mt.allStrings52782[2]))})),Mt={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]};var Rt=e(854);const zt=t._q.deepPropWatch((()=>(n=0,e=0,r=0,o=0,a=!1,s=0,c=0,i=(0,t.$q)((t=>[{stateNum:n,stateNumChangeCount:e,slowChangeCount:r,subjectChangeCount:o,truthChange:a,truthChangeCount:s,truthSubChangeCount:c}]=t({stateNum:n,stateNumChangeCount:e,slowChangeCount:r,subjectChangeCount:o,truthChange:a,truthChangeCount:s,truthSubChangeCount:c}))),l=(0,t.YP)([n],(()=>++e)),u=t.YP.noInit([n],(0,t.uz)((()=>++r))),d=t.YP.asSubject([n],(0,t.uz)((()=>++o))),p=t.YP.truthy([a],(0,t.uz)((()=>++s))),h=t.YP.truthy.asSubject([a],(0,t.uz)((t=>++c))))=>t.dy.dom(Xt.allStrings2187613[0],n,(()=>++n),e,r,u,o,(0,t.Ld)(d),a?"true":"false",p||"false",s,(0,t.Ld)(h),c,(()=>a=!a),a?"true":"false"))),Xt={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},Wt=(0,t._q)((()=>{const n=(0,t.SB)((()=>new t.xQ)),e=(0,t.SB)((()=>new t.v0("purple"))),r=(0,t.SB)((()=>new t.v0("green")));let o=!1;return(0,t.$q)((t=>[{shouldHideAttributes:o}]=t({shouldHideAttributes:o}))),t.dy.dom(Ut.allStrings219820[0],o?"":t.dy.dom(Ut.allStrings219820[1],(0,t.Te)(n,"red"),(0,t.Te)(n,"red",(t=>"background-color:"+t)),"blue"===n.value&&(0,t.Ld)(e,(t=>"background-color:"+t))||"red"===n.value&&(0,t.Ld)(r,(t=>"background-color:"+t))||"background-color:pink;"),(()=>{const t=n.value;n.next("red"===t?"blue":"red")}),(0,t.Ld)(n),(()=>o=!o),o?"Show":"Hide",(()=>n.next("")),(0,t.Te)(t.xQ.globalSubCount$,t.xQ.globalSubCount$.value))})),Ut={allStrings219820:[[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe attributes"}]},{nn:"text",v:0},{nn:"button",at:[["id","toggle-color-btn"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"Toggle Color ("},{nn:"text",v:2},{nn:"text",tc:")"}]},{nn:"button",at:[["id","toggle-attributes-btn"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4},{nn:"text",tc:" Attributes"}]},{nn:"button",at:[["id","clear-color-btn"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"Clear Color"}]},{nn:"text",tc:"subscriptions: "},{nn:"span",at:[["id","subscriptions-count"]],ch:[{nn:"text",v:6}]}]}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"],["id","subscribe-attributes-wrap"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe special attribute"}]},{nn:"span",at:[["id","subscribe-style-dot-bg-color-changer"],["style.background-color",{tagJsVar:0},"style"]],ch:[{nn:"text",tc:"background color changer"}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe style attribute"}]},{nn:"span",at:[["style",{tagJsVar:1},null],["id","subscribe-style-bg-color"]],ch:[{nn:"text",tc:"subscribe bg color"}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"sometimes subscribe style attribute"}]},{nn:"span",at:[["style",{tagJsVar:2},null],["id","multiple-subscribe-bg-color"]],ch:[{nn:"text",tc:"multiple subscribe bg color"}]}]}]}]}]]},Yt=(0,t._q)((()=>{let n="a",e=!0;return(0,t.$q)((t=>[{selected:n,isOrange:e}]=t({selected:n,isOrange:e}))),t.dy.dom(Ft.allStrings214806[0],(t=>n=t.target.value),["a","b","c"].map((e=>t.dy.dom(Ft.allStrings214806[1],e,e==n?"selected":"",e,e==n?"true":"false").key(e))),(t=>e=t.target.checked),e&&"checked",e?"true":"false",e?"orange":"",e?"black":"",!!e,!!e,e?"background-orange text-black":"",{class:"text-white"+(e?" background-orange":"")},{backgroundColor:e?"orange":"lightgray",padding:"10px",border:"2px solid black",borderRadius:e?"8px":"4px",boxShadow:e?"2px 2px 4px rgba(0,0,0,0.3)":"none"},{"background-color":e?"red":"blue",color:"white",padding:"5px","margin-top":"10px"},Wt())})),Ft={allStrings214806:[[{nn:"input",at:[["id","attr-input-abc"],["placeholder","a b or c"],["change",{tagJsVar:0},null]]},{nn:"select",at:[["id","select-sample-drop-down"]],ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Special Attributes"}]},{nn:"div",ch:[{nn:"input",at:[["type","checkbox"],["id","toggle-backgrounds"],["change",{tagJsVar:2},null],[{tagJsVar:3}]]},{nn:"text",tc:" - toggle backgrounds:"},{nn:"text",v:4}]},{nn:"div",at:[["style","display: flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"ol",ch:[{nn:"li",ch:[{nn:"div",at:[["id","attr-style-strings"],["style.background-color",{tagJsVar:5},"style"],["style.color",{tagJsVar:6},"style"]],ch:[{nn:"text",tc:"style.background-color=&dollar;{'orange'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-class-booleans"],["class.background-orange",{tagJsVar:7},"class"],["class.text-black",{tagJsVar:8},"class"]],ch:[{nn:"text",tc:"class.background-orange=&dollar;{true}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-inline-class"],["class",{tagJsVar:9},null]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange text-black'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-dynamic-inline-class"],[{tagJsVar:10}]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange'} but always white"}]}]}]}]},{nn:"fieldset",at:[["style","margin-top: 1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"style object attribute"}]},{nn:"div",at:[["style",{tagJsVar:11},null],["id","style-object-test"]],ch:[{nn:"text",tc:"Style object test"}]},{nn:"div",at:[["style",{tagJsVar:12},null],["id","style-set-property-test"]],ch:[{nn:"text",tc:"style property test"}]}]},{nn:"style",ch:[{nn:"text",tc:".background-orange {background-color:orange}\n      .text-black {color:black}\n      .text-white {color:white}"}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"option",at:[["value",{tagJsVar:0},null],[{tagJsVar:1}]],ch:[{nn:"text",v:2},{nn:"text",tc:" - "},{nn:"text",v:3}]}]]},Qt=[{view:l.OneRender,tag:()=>t._q.renderOnce=(e=new t.KU(0),r=0)=>{++r;const s=t.xQ.all([0,"all",4]);return t.dy.dom(a.allStrings2265941[0],(0,t.Ld)(s.pipe((t=>JSON.stringify(t)))),(0,t.Ld)(e),(()=>++e.value),(0,n.v)({renderCount:r,name:"oneRender_tag_ts"}),o())},emoji:"1️⃣"},{view:l.Props,tag:ht,emoji:"🧳"},{view:l.WatchTesting,tag:zt,emoji:"⌚️"},{view:l.TableDebug,tag:Ht},{view:l.ProviderDebug,tag:kt},{view:l.TagSwitchDebug,tag:nt,emoji:"🔀"},{view:l.Mirroring,tag:it,emoji:"🪞"},{view:l.Arrays,tag:K,emoji:"⠇"},{view:l.Content,tag:Rt.kQ,emoji:"📰",debug:!0},{view:l.Child,tag:R,emoji:"👶"},{view:l.Destroys,tag:W,emoji:"🗑️"},{view:l.FunInPropsTag,tag:k},{view:l.AttributeDebug,tag:Yt,emoji:"🏹"},{view:l.Todo,tag:(0,t._q)(D)},{view:l.Counters,tag:At,emoji:"💯"}],Gt=(0,t._q)(((n,e=u.views)=>{const r=(0,t.SB)((()=>Qt.filter((t=>{if(e.includes(t.view))return!0})).map((({view:t,title:e,emoji:r,tag:o,...a})=>({title:e||t,output:t===l.Counters?o({appCounterSubject:n}):o(),view:t,emoji:r,...a}))).sort(((t,n)=>t.view.localeCompare(n.view)))));return t.dy.dom(Zt.allStrings1668920[0],r.map((t=>Kt(t).key(t.view))))})),Kt=n=>{const{emoji:e,view:r,title:o,output:a,debug:s}=n;return t.dy.dom(Zt.allStrings1668920[1],r,e,o,n.contentHide?"none":"",a,"section_"+n.view,(()=>n.contentHide=!n.contentHide),n.contentHide?"grey":"")},Zt={allStrings1668920:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["style","flex:2 2 20em"]],ch:[{nn:"a",at:[["id",{tagJsVar:0},null]],ch:[{nn:"text",tc:"\x3c!-- ⚓️ --\x3e"}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",v:1},{nn:"text",tc:" "},{nn:"text",v:2}]},{nn:"div",at:[["style.display",{tagJsVar:3},"style"]],ch:[{nn:"text",v:4}]},{nn:"div",at:[["style","display:flex;"]],ch:[{nn:"button",at:[["style","flex:1;"],["id",{tagJsVar:5},null],["click",{tagJsVar:6},null],["style.background-color",{tagJsVar:7},"style"]],ch:[{nn:"text",tc:"👁️ hide/show"}]}]}]},{nn:"div",at:[["style","font-size:0.6em;text-align:right;"]],ch:[{nn:"a",at:[["href","#top"]],ch:[{nn:"text",tc:"⏫"}]}]}]}]]},tn=3e3,nn=6e3,en=(0,t._q)((()=>{let n,e,r=0,o=0,a=0;(0,t.$q)((t=>[{intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a}]=t({intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a})));const s=(0,t._)(),c=()=>++r,i=()=>{console.info("🟢 interval test 0 started..."),a=0,e=setInterval(s((()=>{a+=500,a>=tn&&(a=0)})),500),console.info("▶️ interval started"),n=setInterval(s((()=>{c()})),tn)},l=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return(0,t.nc)(i),(0,t.ev)(l),++o,t.dy.dom(on.allStrings838008[0],tn,n,c,r,o,tn,a,a,(()=>{n||e?l():i()}),n||e?"red":"green",(()=>setTimeout(s((()=>{a+=200})),1e3)))})),rn=(0,t._q)((()=>{let n,e,r=0,o=0,a=0;(0,t.$q)((t=>[{intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a}]=t({intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a})));const s=(0,t._)(),c=()=>++r;const i=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function l(){if(n)return i();console.info("🟢 interval test 1 started..."),a=0,e=setInterval(s((()=>{a+=500,a>=nn&&(a=0)})),500),n=setInterval(s((()=>{c(),console.info("slow interval ran")})),nn)}return(0,t.nc)(l),(0,t.ev)(i),++o,t.dy.dom(on.allStrings838008[1],nn,n,c,r,o,nn,a,a,l,n?"red":"green")})),on={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},an=(0,t._q)((()=>{let n="tagJsDebug.js",e=!1,r=0;return(0,t.$q)((t=>[{_firstState:n,showIntervals:e,renderCount:r}]=t({_firstState:n,showIntervals:e,renderCount:r}))),++r,t.dy.dom(sn.allStrings77500[0],(()=>e=!e),e&&t.dy.dom(sn.allStrings77500[1],(0,F.fx)(),en(),rn()))})),sn={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};function cn(){const t=E(),n=t.route,e=t.location.pathname;if(e&&"counters/"===n)return"counters";if(e&&"content/"===n)return"content";if(e.endsWith("isolated.html"))return"isolated";return e.includes("todo/www")?"todo":"home"}const ln=()=>t._q.use=(n=cn())=>t.dy.dom(un.allStrings120829[0],"home"===n?".5":"1","home"===n?void 0:"#/","isolated"===n?".5":"1","isolated"===n?void 0:"isolated.html","counters"===n?".5":"1","counters"===n?void 0:"#counters/","content"===n?".5":"1","content"===n?void 0:"#content/","todo"===n?".5":"1","todo"===n?void 0:"todo/www/"),un={allStrings120829:[[{nn:"div",ch:[{nn:"a",at:[["style.opacity",{tagJsVar:0},"style"],["href",{tagJsVar:1},null]],ch:[{nn:"text",tc:"home"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:2},"style"],["href",{tagJsVar:3},null]],ch:[{nn:"text",tc:"isolated"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:4},"style"],["href",{tagJsVar:5},null]],ch:[{nn:"text",tc:"counters"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:6},"style"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"content"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:8},"style"],["href",{tagJsVar:9},null]],ch:[{nn:"text",tc:"todo app"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["href","https://github.com/AckerApple/taggedjs"],["target","_blank"]],ch:[{nn:"text",tc:"repo"}]}]}]]},dn=Date.now();function pn(){return function(n=cn()){let e=!1;return(0,t.$q)((t=>[{showHide:e}]=t({showHide:e}))),console.log("🍒 App rendered",dn),t.dy.dom(xn.allStrings2805014[0],4,(()=>e=!e),e,e&&fn(),ln(),"home"===n&&gn(),"counters"===n&&$t(),"content"===n&&(0,Rt.kQ)())}}pn.isApp=!0;const hn=(0,t._q)(pn),gn=()=>t._q.use=(r=!0,o=0,a=!1,s=null,c=(0,t.SB)((()=>new t.xQ(o))),i=0,l="🟦",u=(0,t.$q)((t=>[{showSections:r,appCounter:o,toggleValue:a,testTimeout:s,renderCount:i,testEmoji:l}]=t({showSections:r,appCounter:o,toggleValue:a,testTimeout:s,renderCount:i,testEmoji:l}))),d=(()=>{a=!a}))=>{const p=(0,t._)(),g=p((t=>l=t?"✅":"❌"));function f(t=!0,n=(()=>{})){l="🟦";s=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const r=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(e.bind(e,9566)),await Promise.resolve().then(e.bind(e,8451)),await Promise.resolve().then(e.bind(e,4118)),await Promise.resolve().then(e.bind(e,3835)),await Promise.resolve().then(e.bind(e,8428)),await Promise.resolve().then(e.bind(e,8749)),await Promise.resolve().then(e.bind(e,3168)),await Promise.resolve().then(e.bind(e,842)),await Promise.resolve().then(e.bind(e,6774)),await Promise.resolve().then(e.bind(e,7994)),await Promise.resolve().then(e.bind(e,1157)),await Promise.resolve().then(e.bind(e,2178)),await Promise.resolve().then(e.bind(e,4236)),await Promise.resolve().then(e.bind(e,702)),await Promise.resolve().then(e.bind(e,1527)),await Promise.resolve().then(e.bind(e,8530)),await Promise.resolve().then(e.bind(e,3337));try{const t=Date.now();if(window.mocha)await new Promise(((t,n)=>{window.mocha.run((e=>{e>0?n(new Error(`${e} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(e.bind(e,9995));if(!await t())throw new Error("Tests failed")}const n=Date.now()-t;return console.info(`✅ all tests passed in ${n}ms`),Qt.map((t=>{document.getElementById("section_"+t.view).click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();n(r),t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return(0,t.ev)((function(){clearTimeout(s),s=null})),(0,t.nc)((function(){console.info("1️⃣ app init should only run once"),f(!1,g),c.subscribe(p((t=>o=t)))})),++i,t.dy.dom(xn.allStrings2805014[1],(()=>f(!0,g)),l,(()=>{c.next(o+1)}),(()=>++o),o,(0,t.Ld)(c),c.value,(()=>d()),a,(0,n.v)({name:"app",renderCount:i}),(0,t.Ld)(t.xQ.globalSubCount$),h(),(()=>r=!r),r&&Gt(c),an())},fn=(0,t._q)((()=>t.dy.dom(xn.allStrings2805014[2],(0,F.tw)().innerHTML=t.dy.dom(xn.allStrings2805014[3])))),xn={allStrings2805014:[[{nn:"text",tc:"\x3c!--app.js--\x3e"},{nn:"h1",at:[["id","h1-app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - "},{nn:"text",v:0}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"show/hide "},{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n\n\n      "},{nn:"text",v:4},{nn:"text",tc:"\n\n      "},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n    "}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"run tests "},{nn:"text",v:1}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:9},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:10},{nn:"text",tc:")"}]}]}]},{nn:"a",at:[["name","top"],["id","top"]]},{nn:"text",v:11},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"button",at:[["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"toggle sections"}]},{nn:"text",v:13},{nn:"text",tc:"\n\n      "},{nn:"text",v:14}]}],[{nn:"hr"},{nn:"text",v:0},{nn:"hr"}],[{nn:"text",tc:"\n    Hello animated world\n  "}]]};function vn(){u.autoTest=u.autoTest=!u.autoTest,d()}const bn={allStrings62947:[[{nn:"text",tc:"\n  auto testing "},{nn:"input",at:[["type","checkbox"],[{tagJsVar:0}],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"run tests"}]}]]},yn=()=>t._q.use=(e=(0,t.SB)("isolated app state"),r=0,o=0,a=(0,t.SB)((()=>new t.xQ(o))),s=!1,c=(0,t.$q)((t=>[{renderCount:r,appCounter:o,toggleValue:s}]=t({renderCount:r,appCounter:o,toggleValue:s}))),l=(()=>s=!s),d=(0,t._)())=>{const p=E().route.split("/").map((t=>t.trim())).filter((t=>t.length));let g;return p.length&&(g=p),(0,t.nc)((()=>{console.info("1️⃣ app init should only run once"),a.subscribe(d((t=>{o=t})))})),++r,t.dy.dom(mn.allStrings1054570[0],p,ln(),(()=>{a.next(o+1)}),(()=>{++o}),o,(0,t.Ld)(a),a.value,l,s,(f=g,t._q.use=(n=(0,t.nc)((()=>{u.autoTest&&i(!1,f,x)})))=>t.dy.dom(bn.allStrings62947[0],u.autoTest&&"checked",vn,(()=>i(!0,f,x)))),(0,n.v)({name:"app",renderCount:r}),(0,t.Ld)(t.xQ.globalSubCount$),h(g),Gt(a,g),(0,n.v)({renderCount:r,name:"isolatedApp"}));var f,x};g.subscribe((({type:t,checkTesting:n})=>{x(t,n)}));const mn={allStrings1054570:[[{nn:"text",tc:"\x3c!--isolatedApp.js--\x3e"},{nn:"h1",at:[["id","app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - isolated"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"(no HMR)"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"route: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"div",ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"text",tc:" "},{nn:"text",v:9}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:10},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:11},{nn:"text",tc:")"}]}]}]},{nn:"text",v:12},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]}]]};function wn(){const n=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),r=e[0]?.toLowerCase();if(r&&["isolated.html","index-static.html"].includes(r)){const e=Date.now();(0,t.bX)(yn,n,{test:1});const r=Date.now()-e;return void console.info(`⏱️ isolated render in ${r}ms`)}const o=Date.now();(0,t.bX)(hn,n,{test:1});const a=Date.now()-o;console.info(`⏱️ rendered in ${a}ms`)}})();var o=r.gV,a=r.jG,s=r.fm,c=r.KH,i=r.bX,l=r.mK;export{o as App,a as IsolatedApp,s as hmr,c as run,i as tagElement,l as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLLE1BQU8sQ0FBQyxTQUFVLENBQUUsU0FBWSxHQUFLLFFBQVUsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFFBQVcsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQWtCLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sd0JBQXlCLENBQUMsU0FBVSxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxDQUFFLFNBQVksSUFBTSxDQUFDLFFBQVMsTUFBUSxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxDQUFFLFNBQVksSUFBTSxDQUFDLFFBQVMsVUFBVyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxXQUFjLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLENBQUUsU0FBWSxJQUFNLENBQUMsUUFBUyxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFVBQWEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsQ0FBRSxTQUFZLEtBQU8sQ0FBQyxRQUFTLFVBQVcsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQXFCLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsT0FBUSxVQUFXLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9CQUFzQixDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsT0FBUSxVQUFXLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG1CQUFzQixDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sd0NBQW9DLENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFD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R0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9CQUF1QixDQUFFLEdBQU0sT0FBUSxHQUFNLG1DQUF3QyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLE9BQVEsR0FBTSxTQUFjLENBQUUsR0FBTSxPQUFRLEdBQU0saURBQTZDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsZ0JBQWlCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZUFBa0IsQ0FBRSxHQUFNLE9BQVEsR0FBTSx1Q0FBNEMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBYyxDQUFFLEdBQU0sT0FBUSxHQUFNLDREQUF3RCxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxnQkFBaUIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sdUNBQTRDLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBYyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxnQkFBaUIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sd0JBQTJCLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLGFBQWUsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sK0JBQXNDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsZ0JBQWlCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHlDQUEyQyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBCQUEyQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxvQ0FBeUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxpQ0FBbUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSwwQkFBMkIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sS0FBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLE9BQVEsR0FBTSxXQUFpQixDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0saUJBQW9CLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsd0RBQXlELEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLHdDQUF5QyxHQUFNLENBQUMsQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUMsUUFBUyxnQkFBaUIsR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGVBQWtCLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBWSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDJCQUE0QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxRQUFZLENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFDLFFBQVMsZ0JBQWlCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxtQkFBc0IsQ0FBRSxHQUFNLE9BQVEsR0FBTSxVQUFZLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sOEJBQStCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFFBQVksQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUMsUUFBUyxnQkFBaUIsR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHNCQUF5QixDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxLQUFNLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG1CQUFzQixDQUFFLEdBQU0sT0FBUSxFQUFLLFFBQVksQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUMsUUFBUyxnQkFBaUIsR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDRCQUErQixDQUFFLEdBQU0sT0FBUSxHQUFNLFVBQVksQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSxnQ0FBaUMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssUUFBWSxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBQyxRQUFTLGdCQUFpQixHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUJBQXNCLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBWSxDQUFFLEdBQU0sT0FBUSxFQUFLLE1BQVMsQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUMsUUFBUyxnQkFBaUIsR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG1CQUFzQixDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLGtDQUFtQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxRQUFXLENBQUUsR0FBTSxPQUFRLEdBQU0sbUJBQXFCLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sa0NBQW1DLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFFBQVksQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFDLFFBQVMsZ0JBQWlCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxtQkFBc0IsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBVSxDQUFFLEdBQU0sT0FBUSxHQUFNLG1CQUFxQixDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLHdDQUF5QyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxRQUFZLENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFDLFFBQVMsZ0JBQWlCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSw4QkFBaUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSw0Q0FBNkMsR0FBTSxDQUFDLENBQUUsR0FBTSxJQUFLLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGVBQW1CLENBQUUsR0FBTSxPQUFRLEdBQU0sbUJBQXFCLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sNENBQTZDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLGNBQXFCLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxPQUFRLG1CQUFvQixDQUFDLENBQUUsU0FBWSxLQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDBCQUE2QixDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLE9BQVEsbUJBQW9CLENBQUMsQ0FBRSxTQUFZLEtBQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sMEJBQTZCLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsT0FBUSxtQkFBb0IsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSwwQkFBNkIsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHVDQUF5QyxDQUFDLENBQUUsR0FBTSxJQUFLLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFVBQWEsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE1BQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxJQUFLLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGNBQWlCLENBQUMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFTLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sY0FBZ0IsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssT0FBVyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBCQUEyQixDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxtQkFBc0IsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxzQkFBdUIsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0saUJBQW9CLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMkJBQTRCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHVCQUF5QixDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZUFBaUIsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSxpQ0FBa0MsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssT0FBVyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBZSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWUsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWUsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxzQkFBdUIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxXQUFlLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0sc0JBQXVCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBWSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FB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QUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQWtCLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUNBQXFDLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sdUJBQXdCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLFNBQVksQ0FBQyxDQUFFLEdBQU0sSUFBSyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQkFBeUIsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxtQ0FBb0MsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sc0NBQXdDLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLEtBQU8sQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0scUNBQXNDLEdBQU0s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T0FBUSxFQUFLLE1BQVMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksSUFBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGtCQUFxQixDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sa0JBQXFCLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBVyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsNkNBQThDLENBQUMsQ0FBRSxTQUFZLElBQU0sQ0FBQyxLQUFNLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBWSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxhQUFlLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sYUFBZSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUJBQXNCLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLE9BQVEsVUFBVyxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxjQUFnQixDQUFFLEdBQU0sT0FBUSxFQUFLLFNBQWEsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sc0JBQTBCLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsQ0FBRSxTQUFZLElBQU0sQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0saUJBQW9CLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxpQ0FBNkIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sc0NBQWtDLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUywyQkFBNEIsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBVyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBWSxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyx5Q0FBMEMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUJBQXVCLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBYSxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUJBQXVCLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxpQkFBa0IsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0seUJBQTJCLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssT0FBVyxDQUFFLEdBQU0sT0FBUSxFQUFLLFFBQVksQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sYUFBZ0IsQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sMEJDckV2cktLLElBQWlCLFNBQUksQ0FBQ0MsRUFBSyxvQkFDcEMsSUFBSUMsRUFBYyxLQUNkcDVDLEVBQWMsR0FDbEIsU0FBT25ILEtBQVVtSCxjQUFhbzVDLGdCQUFpQnZnRCxFQUFJLENBQUVtSCxjQUFhbzVDLGtCQVVsRSxJQUFJQyxFQUFZLG1CQUNoQixPQUFRRCxHQUNKLEtBQUssS0FDREMsRUFBWSx5QkFDWixNQUNKLElBQUssR0FDREEsRUFBWSxLQUFLdmdELElBQUksR0FBV3dnRCxpQkFBaUIsSUFDakQsTUFDSixJQUFLLElBQ0RELEVBQVlFLEdBQUssQ0FBRS8vQyxNQUFPLGlCQUMxQixNQUNKLElBQUssSUFDRDYvQyxFQUFZRyxHQUFLLENBQUVoZ0QsTUFBTyxpQkFDMUIsTUFDSixJQUFLLElBQ0Q2L0MsRUFBWUksR0FBSyxDQUFFamdELE1BQU8saUJBR2xDLElBQUlrZ0QsRUFBYSxLQUFLNWdELElBQUksR0FBV3dnRCxpQkFBaUIsSUFDdEQsT0FBUUYsR0FDSixLQUFLLEtBQ0RNLEVBQWEsS0FBSzVnRCxJQUFJLEdBQVd3Z0QsaUJBQWlCLElBQ2xELE1BQ0osSUFBSyxHQUNESSxFQUFhLEtBQUs1Z0QsSUFBSSxHQUFXd2dELGlCQUFpQixJQUNsRCxNQUNKLElBQUssSUFDREksRUFBYUgsR0FBSyxDQUFFLy9DLE1BQU8sZUFDM0IsTUFDSixJQUFLLElBQ0RrZ0QsRUFBYUYsR0FBSyxDQUFFaGdELE1BQU8sZUFDM0IsTUFDSixJQUFLLElBQ0RrZ0QsRUFBYUQsR0FBSyxDQUFFamdELE1BQU8sZUFJbkMsUUFERXdHLEVBQ0ssS0FBS2xILElBQUksR0FBV3dnRCxpQkFBaUIsSUFBb0IsT0FBaEJGLEVBQXdCLFlBQ3BEL3NELElBQWhCK3NELEdBQTZCLGNBQ2IsS0FBaEJBLEdBQXNCLGdCQUN0QkEsR0FqREosU0FBMkIxNkMsR0FDdkIwNkMsRUFBYzE2QyxFQUFNckYsT0FBTy9PLE1BQ1AsY0FBaEI4dUQsSUFDQUEsT0FBYy9zRCxHQUVFLFNBQWhCK3NELElBQ0FBLEVBQWMsS0FFdEIsR0F5QzZELGlCQUFsQixHQUErQkEsRUFBWWh3RCxPQUE4QixDQUFDLEVBQXRCLENBQUV1d0QsVUFBVSxRQUE2QnR0RCxJQUFoQitzRCxFQUE0QixDQUFFTyxVQUFVLEdBQVMsQ0FBQyxFQUFtQixPQUFoQlAsRUFBdUIsQ0FBRU8sVUFBVSxHQUFTLENBQUMsRUFBbUIsTUFBaEJQLEVBQXNCLENBQUVPLFVBQVUsR0FBUyxDQUFDLEVBQW1CLE1BQWhCUCxFQUFzQixDQUFFTyxVQUFVLEdBQVMsQ0FBQyxFQUFtQixNQUFoQlAsRUFBc0IsQ0FBRU8sVUFBVSxHQUFTLENBQUMsRUFBR04sRUFBV0ssRUFBNEIsTUFBaEJOLEVBQXNCSyxHQUFLLENBQUVqZ0QsTUFBTyxtQkFBc0IrL0MsR0FBSyxDQUFFLy9DLE1BQU8sbUJBQXFCb2dELEdBQWdCLENBQUVSLGdCQUFnQlMsR0FBZSxDQUFFVCxpQkFBZ0IsT0FBZSxDQUFFcDVDLGNBQWFyUixLQUFNLG1CQUFvQixJQUVobEJpckQsSUFBa0IsU0FBSSxFQUFHUixrQkFDbEMsTUFBTVUsRUFBeUIsTUFBaEJWLEVBQXNCSyxHQUFLLENBQUVqZ0QsTUFBTyxvQkFBdUIrL0MsR0FBSyxDQUFFLy9DLE1BQU8sb0JBQ3hGLE9BQU8sS0FBS1YsSUFBSSxHQUFXd2dELGlCQUFpQixHQUFJRixFQUFhVSxFQUFPLElBRTNEUCxJQUFPLFNBQUksRUFBRy8vQyxZQUN2QixJQUFJcUosRUFBVSxFQUNWN0MsRUFBYyxFQUdsQixPQUZBLFNBQU9uSCxLQUFVZ0ssVUFBUzdDLGdCQUFpQm5ILEVBQUksQ0FBRWdLLFVBQVM3QyxvQkFDeERBLEVBQ0ssS0FBS2xILElBQUksR0FBV3dnRCxpQkFBaUIsR0FBSTkvQyxHQUFPLE1BQVFxSixHQUFTQSxHQUFTLE9BQWUsQ0FBRTdDLGNBQWFyUixLQUFNLFNBQVUsSUFFdEg2cUQsSUFBTyxTQUFJLEVBQUdoZ0QsWUFDdkIsSUFBSXFKLEVBQVUsRUFDVjdDLEVBQWMsRUFHbEIsT0FGQSxTQUFPbkgsS0FBVWdLLFVBQVM3QyxnQkFBaUJuSCxFQUFJLENBQUVnSyxVQUFTN0Msb0JBQ3hEQSxFQUNLLEtBQUtsSCxJQUFJLEdBQVd3Z0QsaUJBQWlCLEdBQUk5L0MsR0FBTyxNQUFRcUosR0FBU0EsR0FBUyxPQUFlLENBQUU3QyxjQUFhclIsS0FBTSxTQUFVLElBRXRIOHFELElBQU8sU0FBSSxFQUFHamdELFlBQ3ZCLElBQUlxSixFQUFVLEVBQ1Y3QyxFQUFjLEVBR2xCLE9BRkEsU0FBT25ILEtBQVVnSyxVQUFTN0MsZ0JBQWlCbkgsRUFBSSxDQUFFZ0ssVUFBUzdDLG9CQUN4REEsRUFDSyxLQUFLbEgsSUFBSSxHQUFXd2dELGlCQUFpQixHQUFJOS9DLEdBQU8sTUFBUXFKLEdBQVNBLEdBQVMsT0FBZSxDQUFFN0MsY0FBYXJSLEtBQU0sU0FBVSxJQUV0SGtyRCxJQUFpQixTQUFJLEVBQUdULGVBQWVwZSxFQUFJLG9CQUNwRCxPQUFRb2UsR0FDSixVQUFLL3NELEVBQ0QsT0FBTyxLQUFLeU0sSUFBSSxHQUFXd2dELGlCQUFpQixJQUNoRCxLQUFLLEtBQ0QsT0FBTyxLQUFLeGdELElBQUksR0FBV3dnRCxpQkFBaUIsS0FDaEQsSUFBSyxHQUVELE9BQU8sS0FBS3hnRCxJQUFJLEdBQVd3Z0QsaUJBQWlCLEtBQ2hELElBQUssSUFDRCxPQUFPLEtBQUt4Z0QsSUFBSSxHQUFXd2dELGlCQUFpQixJQUFLQyxHQUFLLENBQUUvL0MsTUFBTyxPQUFPNC9DLE9BQzFFLElBQUssSUFDRCxPQUFPLEtBQUt0Z0QsSUFBSSxHQUFXd2dELGlCQUFpQixJQUFLLENBQUMsSUFBSyxLQUFLL3FELEtBQUl4QyxHQUFLLEtBQUsrTSxJQUFJLEdBQVd3Z0QsaUJBQWlCLElBQUtFLEdBQUssQ0FBRWhnRCxNQUFPLFNBQVM0L0MsS0FBZXJ0RCxPQUFRME4sSUFBSTFOLE1BQ3JLLElBQUssSUFDRCxPQUFPLEtBQUsrTSxJQUFJLEdBQVd3Z0QsaUJBQWlCLElBQUssQ0FBQyxJQUFLLElBQUssS0FBSy9xRCxLQUFJeEMsR0FBSyxLQUFLK00sSUFBSSxHQUFXd2dELGlCQUFpQixJQUFLRyxHQUFLLENBQUVqZ0QsTUFBTyxTQUFTNC9DLEtBQWVydEQsT0FBUTBOLElBQUkxTixNQUU5SyxPQUFPLEtBQUsrTSxJQUFJLEdBQVd3Z0QsaUJBQWlCLElBQUksSUFHOUMsR0FBYSxDQUFFQSxpQkFBa0IsQ0FBQyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0scUJBQXVCLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sdUJBQTBCLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sNkJBQWdDLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUNBQXdDLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxtQkFBb0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sa0JBQW9CLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVUsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx1QkFBd0IsQ0FBQyxTQUFVLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxVQUFZLENBQUUsR0FBTSxPQUFRLEdBQU0sc0RBQWtELENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsSUFBSyxDQUFDLENBQUUsU0FBWSxLQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGtCQUFxQixDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLGFBQWMsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxlQUFrQixDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLFFBQVMsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxVQUFhLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsS0FBTSxDQUFDLENBQUUsU0FBWSxLQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxLQUFNLENBQUMsQ0FBRSxTQUFZLEtBQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sV0FBYyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLEtBQU0sQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxhQUFpQixDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLHdDQUF5QyxDQUFDLEtBQU0sc0JBQXVCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLHNDQUF1QyxHQUFNLENBQUMsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sMkJBQThCLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVcsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxzQ0FBdUMsR0FBTSxDQUFDLENBQUUsR0FBTSxLQUFNLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGtCQUFxQixDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsc0NBQXVDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sS0FBTSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSwwQ0FBNkMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssUUFBWSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLHNDQUF1QyxHQUFNLENBQUMsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scURBQXdELENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFFBQVksQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxvQ0FBcUMsQ0FBQyxLQUFNLDZCQUE4QixHQUFNLENBQUMsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sNkJBQWdDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0sd0JBQXlCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFVBQWUsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBVyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0seUJBQTBCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxLQUFPLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsNEJBQTZCLENBQUMsS0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWUsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGFBQWUsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsNEJBQTZCLENBQUMsS0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWUsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGFBQWUsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsNEJBQTZCLENBQUMsS0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWUsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGFBQWUsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sMkJBQTZCLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxxQkFBdUIsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFVBQVksQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9DQ3BHMXpJUyxJQUFZLFNBQUksS0FDekIsTUFBTXIv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QVEsR0FBTSxXQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0seUJBQTRCLENBQUUsR0FBTSxPQUFRLEdBQU0sdUJBQXlCLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sNkJBQThCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQW1CLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0saUJBQXFCLENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxlQUFrQixDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFDLE9BQVEsUUFBUyxDQUFDLFFBQVMsQ0FBRSxTQUFZLElBQU0sTUFBTyxDQUFDLFNBQVUsQ0FBRSxTQUFZLElBQU0sUUFBVSxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVUsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHVCQUF5QixDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBVyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG1DQUErQixDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSw0QkFBOEIsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSw0QkFBNkIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBCQUEyQixDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxhQUFpQixDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDhCQUErQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxPQUFRLEdBQU0sY0FBZ0IsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSxpQ0FBa0MsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLCtCQUFnQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxVQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDhCQUEwQixDQUFFLEdBQU0sS0FBTSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxnQkFBbUIsQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUMsUUFBUyw0REFBNkQsQ0FBQyxPQUFRLE9BQVEsQ0FBQyxTQUFVLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0VBQThELENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxLQUFNLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGtCQUFxQixDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBQyxRQUFTLHdEQUF5RCxDQUFDLE9BQVEsT0FBUSxDQUFDLGFBQWMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSwwQkFBMkIsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sd0JBQTBCLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDRCQUE2QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBCQUEyQixDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxtQ0FBcUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sbUNBQW9DLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVcsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxvREFBcUQsQ0FBQyxRQUFTLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQWtCLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMs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T0FBUSxFQUFLLE1BQVMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQkFBd0IsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsT0FBUSx1QkFBd0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sb0NBQXVDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsdUJBQXdCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxrQkFBb0IsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx1QkFBd0IsQ0FBQyxTQUFVLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssUUFBWSxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBQyxRQUFTLHFCQUFzQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxpQkFBbUIsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxzQkFBdUIsQ0FBQyxTQUFVLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssUUFBWSxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBQyxRQUFTLHFCQUFzQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxrQkFBb0IsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3QkFBeUIsQ0FBQyxTQUFVLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssVUFBZSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLG1CQUFvQixDQUFDLENBQUUsU0FBWSxNQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLGtCQUFtQixDQUFDLENBQUUsU0FBWSxPQUFVLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0scUJBQXNCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFdBQWdCLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxNQUFPLENBQUMsV0FBWSxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE1BQVMsQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxXQUFZLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssTUFBTyxDQUFDLFdBQVksQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sd0NBQXlDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHFDQUF1QyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBDQUEyQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxTQUFjLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sd0NBQXlDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHFDQUF1QyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBDQUEyQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxVQUFlLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sd0NBQXlDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHFDQUF1QyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDBDQUEyQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxVQUFlLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSx1Q0FBbUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0saUNBQWtDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDhCQUFnQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEs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LENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBVyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDJCQUE0QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxTQUFjLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMseUNBQTBDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLHdCQUF5QixDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxvQkFBc0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSx5QkFBMEIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssV0FBaUIsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQWtCLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxTQUFXLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyx5Q0FBMEMsR0FBTSxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMseUNBQTBDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLHdCQUF5QixDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxxQkFBdUIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSx5QkFBMEIsR0FBTSxDQUFDLENBQUUsR0FBTSxP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QUFFLEdBQU0sT0FBUSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sUUFBVyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxPQUFRLFVBQVcsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyx5QkFBMEIsQ0FBRSxTQUFZLEdBQUssVUFBVyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxnQkFBbUIsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsT0FBUSxVQUFXLENBQUMsUUFBUyxDQUFFLFNBQVksSUFBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGlDQUFvQyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHlCQUEyQixDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxRQUFXLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQWtCLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxPQUFRLFVBQVcsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLEtBQU8sQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFDLE9BQVEsU0FBVSxDQUFDLE1BQU8sS0FBTSxDQUFDLE1BQU8sQ0FBRSxTQUFZLEdBQUssTUFBTyxDQUFDLE9BQVEsS0FBTSxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssUUFBVSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFFBQVcsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsT0FBUSxV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T0FDbkIsUUFBVzZuRCxHQUFLM25ELEVBQVMsQ0FBRWlFLEtBQU0sSUFDakMsTUFBTTJrRCxFQUFNN3FELEtBQUsrQixNQUFRNjFDLEVBQ3pCNXBDLFFBQVE2cEMsS0FBSyxrQkFBa0JnVCxNQUNuQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcmdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9leGVjdXRlU2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb2x1bW5FZGl0b3IuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2FycmF5VGFibGUuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2FycmF5RGlzcGxheS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R1bXAvYXJyYXlzRGlzcGxheS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R1bXAvZHVtcEFycmF5LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb3B5VGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9kdW1wU2ltcGxlLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9kdW1wT2JqZWN0LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb250cm9sUGFuZWwudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2R1bXAudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wQ29udGVudC50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbnRlbnREZWJ1Zy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9hdHRyaWJ1dGVzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhc2ljLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NoaWxkLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY291bnRlcnMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVzdHJveXMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcENvbnRlbnQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnVuSW5Qcm9wcy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9taXJyb3IudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb25lUmVuZGVyLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb3BzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZGVsYXlXaGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXBUby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdmlkZXJzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlckNvdW50LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhcnQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnU3dpdGNoLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Rlc3RpbmcvZXhwZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL2V4cGVjdC13cmFwcGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL2VsbVNlbGVjdG9ycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy9leHBlY3QuaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy90ZXN0UnVubmVyLnRzIiwid2VicGFjazovLy8uL3NyYy90b2Rvcy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy93YXRjaC50ZXN0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9Eb21UYWcudHlwZS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2lzU3BlY2lhbEF0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9nZXRUYWdWYXJJbmRleC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL3BhcnNlSFRNTC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL2h0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9WYWx1ZVR5cGVzLmVudW0udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9yZXBsYWNlUGxhY2Vob2xkZXJzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9nZXRTdHJpbmdzSWQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2RvbU1ldGFDb2xsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2lzTGFzdFJ1bk1hdGNoZWQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3BhaW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvZGVsZXRlQ29udGV4dFN1YkNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaXNJbnN0YW5jZS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZXMudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc3RhdGUudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvZ2V0U3RhdGVWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZUhhbmRsZXJzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3QvY29tYmluZUxhdGVzdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdWJqZWN0L3N1YmplY3QudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3ViamVjdC9TdWJqZWN0LmNsYXNzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3RhZ0Nsb3NlZCQuc3ViamVjdC50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zZXRVc2VNZW1vcnkub2JqZWN0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvZG9tUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc0ZpcnN0U3ViamVjdFZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2Nhc3RUZXh0VmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9zcGVjaWFsQXR0cmlidXRlLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL2hhbmRsZVByb3ZpZGVyQ2hhbmdlcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9wcm92aWRlcnNDaGFuZ2VDaGVjay5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9kZWVwRnVuY3Rpb25zLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9zaGFsbG93UHJvcE1hdGNoLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9jbG9uZVZhbHVlQXJyYXkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3Byb3BzL2Nsb25lUHJvcHNCeS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3RhZ1J1bm5lci50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvZGVzdHJveUNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9jb21wYXJlQXJyYXlJdGVtcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY2hlY2tEZXN0cm95UHJldmlvdXMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3NtYXJ0UmVtb3ZlS2lkcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2lzTGlrZVRhZ3MuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2NoZWNrVGFnVmFsdWVDaGFuZ2UuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2FkZE9uZUNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9hdHRhY2hEeW5hbWljRG9tLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9kb20vYXR0YWNoRG9tRWxlbWVudHMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9wcm9jZXNzTmV3U3ViamVjdFRhZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NUYWdJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9nZXRUZW1wbGF0ZXJSZXN1bHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3RhZy51dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvcHJvcHMvc2FmZVJlbmRlclN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZXhlY3V0ZVdyYXAuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2dldFRhZ1dyYXAuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZXJyb3JzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9jaGVja1N0YXRlTWlzbWF0Y2guZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2FmdGVyUmVuZGVyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci91cGRhdGUvcHJvY2Vzc1JlbmRlck9uY2VJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvb25lUmVuZGVyVG9TdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc0ZpcnN0U3ViamVjdENvbXBvbmVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NUYWdSZXN1bHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9wcm9jZXNzVGFnQ29tcG9uZW50SW5pdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9oYXNQcm9wQ2hhbmdlcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvaGFzU3VwcG9ydENoYW5nZWQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3N5bmNQcmlvclByb3BGdW5jdGlvbi5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nQXJyYXkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS91cGRhdGVFeGlzdGluZ09iamVjdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9zb2Z0RGVzdHJveVN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlbmRlcldpdGhTdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJFeGlzdGluZ1RhZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFVwVGFncy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3JlbmRlclRhZ0FycmF5LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3N5bmNTdGF0ZXMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9jaGVja1RvUmVzb2x2ZVByb21pc2UuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9iaW5kU3ViamVjdENhbGxiYWNrLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlQ2FsbGJhY2suZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2F0dHJpYnV0ZXMvaXNOb0Rpc3BsYXlWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3VwZGF0ZU5hbWVPbmx5QXR0clZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NVcGRhdGVBdHRyQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2NyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2dldFRhZ0pzVmFyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9wcm9jZXNzQXR0cmlidXRlVXBkYXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9wcm9jZXNzU2ltcGxlQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9nZXRTaW1wbGVUYWdWYXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9wcm9jZXNzUmVndWxhclZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0FycmF5LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9nZXRBcnJheVRhZ0pzVmFyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy92YWx1ZVRvVGFnSnNWYXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9jcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0uZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9vbkZpcnN0U3ViQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvZ3VhcmFudGVlSW5zZXJ0QmVmb3JlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3NldHVwU3Vic2NyaWJlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1N1YnNjcmliZVdpdGguZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3N1YnNjcmliZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvc3Vic2NyaWJlV2l0aC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zaWduYWwuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3ViamVjdC9WYWx1ZVN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3ViamVjdC93aWxsLmZ1bmN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS93YXRjaC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdWJqZWN0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3N0YXRlcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9sZXRQcm9wLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3Byb3ZpZGVycy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9jYWxsYmFjay5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9jYWxsYmFja1N0YXRlVXBkYXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL2NhbGxiYWNrTWFrZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvb25Jbml0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL29uRGVzdHJveS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9hcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvcHJvY2Vzc1VwZGF0ZUNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3VwZGF0ZS91cGRhdGVTdXBwb3J0QnkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS90cnlVcGRhdGVUb1RhZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL2hhbmRsZVN0aWxsVGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvdXBkYXRlVG9EaWZmVmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9jaGVja1N0aWxsU3Vic2NyaXB0aW9uLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc0RvbVRhZ0luaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3Byb2Nlc3NPdXRlckRvbVRhZ0luaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2h0bWwudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2dldERvbVRhZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvcmVnaXN0ZXJOZXdUYWdFbGVtZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9sb2FkTmV3QmFzZVN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlbmRlclRhZ0VsZW1lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3RhZ0VsZW1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL291dHB1dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvZ2V0SW5uZXJIVE1MLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9ob3N0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90YWdnZWRqcy1hbmltYXRlLWNzcy9qcy9jcmVhdGVGeC5mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFnZ2VkanMtYW5pbWF0ZS1jc3MvanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4vc3JjL29uZVJlbmRlci50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3J1blRlc3RpbmcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb2xhdGVkQXBwLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb25TZWxlY3Rvci50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5RnVuLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnVuSW5Qcm9wc0NoaWxkLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYWRkQXJyYXlDb21wb25lbnQudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9mdW5JblByb3BzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby9jb21wb25lbnRzL2l0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vY29tcG9uZW50cy9oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vY29tcG9uZW50cy9mb290ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vSGFzaFJvdXRlci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby90b2Rvcy5hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vcmVkdWNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5uZXJIdG1sVGVzdHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NoaWxkVGVzdHMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kZXN0cm95cy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5U2NvcmVEYXRhLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXJyYXlzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnU3dpdGNoRGVidWcuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9taXJyb3JpbmcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZVByb3BEZWJ1Zy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Byb3BzRGVidWcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9wcm92aWRlckRpYWxvZy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb3ZpZGVycy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vdXNlb3Zlci50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvdW50ZXJzRGVidWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlRGVidWcuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy93YXRjaFRlc3RpbmcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9zdWJzY3JpYmVBdHRyaWJ1dGVzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXR0cmlidXRlRGVidWcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9yZW5kZXJlZFNlY3Rpb25zLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW50ZXJ2YWxEZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnSnNEZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWVudS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Rlc3RzLnRzIiwid2VicGFjazovLy8uL3NyYy9hdXRvVGVzdGluZ0NvbnRyb2xzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaXNvbGF0ZWRBcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3J1bi5mdW5jdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGlkZW50aXR5LCBjb25jdXJyZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcCIsImltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSwgZGVsYXkpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7IH0sIGRlbGF5KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGwoKShmcm9tKGFyZ3MsIHBvcFNjaGVkdWxlcihhcmdzKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsRmluYWxpemVyKSB7XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhY3RpdmUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgIWJ1ZmZlci5sZW5ndGggJiYgIWFjdGl2ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBleHBhbmQgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgYWN0aXZlKys7XG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViU2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIGlubmVyU3ViU2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoICYmIGFjdGl2ZSA8IGNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IG51bGwgfHwgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbEZpbmFsaXplcigpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0VGltZW91dC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydCB2YXIgaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4vaXNTY2hlZHVsZXInO1xuZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BSZXN1bHRTZWxlY3RvcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24obGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFNjaGVkdWxlcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzU2NoZWR1bGVyKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BOdW1iZXIoYXJncywgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnbnVtYmVyJyA/IGFyZ3MucG9wKCkgOiBkZWZhdWx0VmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbnZhciBjb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGVTY2hlZHVsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXdhaXQsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yXzEoKSB7XG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdChyZWFkZXIucmVhZCgpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0LCBfX2F3YWl0KHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImltcG9ydCB7IGh0bWwsIHN0YXRlLCBzdGF0ZXMsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGNvbHVtbkVkaXRvciA9IHRhZygoeyBuYW1lLCBhcnJheSwgaW5jbHVkZWQsIGNvbHVtbk5hbWVzLCBhbGxDb2x1bW5OYW1lcyB9KSA9PiB7XG4gICAgbGV0IG1vdXNlT3ZlckVkaXRTaG93ID0gZmFsc2U7XG4gICAgbGV0IGVkaXQgPSBmYWxzZTtcbiAgICBsZXQgZWRpdEZvcm11bGEgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgZm9ybXVsYXMgPSBzdGF0ZShbXSk7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgbW91c2VPdmVyRWRpdFNob3csIGVkaXQsIGVkaXRGb3JtdWxhXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgbW91c2VPdmVyRWRpdFNob3csIGVkaXQsIGVkaXRGb3JtdWxhXG4gICAgfSkpO1xuICAgIGNvbnN0IGdvQWxsID0gKCkgPT4ge1xuICAgICAgICBjb2x1bW5OYW1lcy5sZW5ndGggPSAwO1xuICAgICAgICBjb2x1bW5OYW1lcy5wdXNoKC4uLmFsbENvbHVtbk5hbWVzKTtcbiAgICB9O1xuICAgIGNvbnN0IGdvT25seSA9ICgpID0+IHtcbiAgICAgICAgY29sdW1uTmFtZXMubGVuZ3RoID0gMDtcbiAgICAgICAgY29sdW1uTmFtZXMucHVzaChuYW1lKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjb2x1bW5OYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29sdW1uTmFtZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5OYW1lcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICBjb25zdCBhZGRTdW1Gb3JtdWxhID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHJpbmdGb3JtdWxhID0gYFxuICAgICAgYXJyYXkucmVkdWNlKChhbGwsIGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpdGVtWycke25hbWV9J11cbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKSA/IGFsbCA6IChhbGwgKyB2YWx1ZSlcbiAgICAgIH0sIDApXG4gICAgYDtcbiAgICAgICAgZm9ybXVsYXMucHVzaCh7XG4gICAgICAgICAgICB0aXRsZTogJ3N1bScsXG4gICAgICAgICAgICBzdHJpbmdGb3JtdWxhLFxuICAgICAgICAgICAgdmFsdWU6IHNhbmRib3hSdW5FdmFsKHN0cmluZ0Zvcm11bGEsIHsgYXJyYXkgfSlcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVGb3JtdWxhID0gKGZvcm11bGEsIG5ld0Zvcm11bGEpID0+IHtcbiAgICAgICAgZm9ybXVsYS5zdHJpbmdGb3JtdWxhID0gbmV3Rm9ybXVsYTtcbiAgICAgICAgZm9ybXVsYS52YWx1ZSA9IHNhbmRib3hSdW5FdmFsKG5ld0Zvcm11bGEsIHsgYXJyYXkgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzBdLCB0b2dnbGUsIGluY2x1ZGVkICYmICdjaGVja2VkJywgbmFtZSwgKCkgPT4gbW91c2VPdmVyRWRpdFNob3cgPSB0cnVlLCAoKSA9PiBtb3VzZU92ZXJFZGl0U2hvdyA9IGZhbHNlLCAoZWRpdCB8fCBtb3VzZU92ZXJFZGl0U2hvdykgPyAndmlzaWJsZScgOiAnaGlkZGVuJywgKCkgPT4gZWRpdCA9ICFlZGl0LCBpbmNsdWRlZCAmJiBjb2x1bW5OYW1lcy5sZW5ndGggIT09IGFsbENvbHVtbk5hbWVzLmxlbmd0aCA/IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQzMTY5MVsxXSwgZ29BbGwpIDogaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzJdLCBnb09ubHkpLCBlZGl0ICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQzMTY5MVszXSwgZWRpdEZvcm11bGEgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzRdLCAoZXZ0KSA9PiB1cGRhdGVGb3JtdWxhKGVkaXRGb3JtdWxhLCBldnQudGFyZ2V0LnZhbHVlKSwgZWRpdEZvcm11bGEudmFsdWUpLCBmb3JtdWxhcy5tYXAoZm9ybXVsYSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0MzE2OTFbNV0sIGZvcm11bGEudGl0bGUsICgpID0+IGVkaXRGb3JtdWxhID0gZm9ybXVsYSwgZm9ybXVsYS52YWx1ZSkua2V5KGZvcm11bGEpKSwgYWRkU3VtRm9ybXVsYSkpO1xufSk7XG5mdW5jdGlvbiBzYW5kYm94UnVuRXZhbChzdHJpbmdGb3JtdWxhLCBjb250ZXh0ID0ge30pIHtcbiAgICByZXR1cm4gc2FuZGJveEV2YWwoc3RyaW5nRm9ybXVsYSwgeyBpc05hTiwgTWF0aCwgTnVtYmVyLCBEYXRlLCAuLi5jb250ZXh0IH0pO1xufVxuLy8gZXhlY3V0ZSBzY3JpcHQgaW4gcHJpdmF0ZSBjb250ZXh0XG5mdW5jdGlvbiBzYW5kYm94RXZhbChzcmMsIGN0eCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICAgIHJldHVybiBzcmM7XG4gICAgfVxuICAgIGN0eCA9IG5ldyBQcm94eShjdHgsIHsgaGFzOiAoKSA9PiB0cnVlIH0pO1xuICAgIGxldCBmdW5jID0gKG5ldyBGdW5jdGlvbihcIndpdGgodGhpcykgeyByZXR1cm4gKFwiICsgc3JjICsgXCIpfVwiKSk7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjdHgpO1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQzMTY5MTogW1t7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY3Vyc29yOnBvaW50ZXI7XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAxIH1dXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDtcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJtb3VzZW92ZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF0sIFtcIm1vdXNlb3V0XCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS52aXNpYmlsaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIFwic3R5bGVcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4pqZ77iPJm5ic3A7XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY29sb3I6Ymx1ZTtcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWxsXCIgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY29sb3I6Ymx1ZTtcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwib25seVwiIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJTtwYWRkaW5nOjAuM2VtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZvbnQtc2l6ZTowLjdlbTt0ZXh0LWFsaWduOmNlbnRlcjtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ29sdW1uIFNldHRpbmdzXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1bVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowLjNlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZWRpdCBmb3JtdWxhXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKcj++4j1wiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBhcnJheVRhYmxlID0gdGFnKCh7IGFycmF5LCBcbi8vIHNob3dMZXZlbHMsXG5zaG93QWxsLCBzaG93S2lkcywgdG9nZ2xlQ29sdW1uRGlhbG9nLCBjb2x1bW5OYW1lcywgZm9ybWF0Q2hhbmdlLCBhbGxvd01heGltaXplLCBldmVyeVNpbXBsZVZhbHVlLCB9KSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFswXSwgYXJyYXkubGVuZ3RoICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFsxXSwgY29sdW1uTmFtZXMubWFwKGtleSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMjIxODRbMl0sIHRvZ2dsZUNvbHVtbkRpYWxvZyAmJiAncG9pbnRlcicsIHRvZ2dsZUNvbHVtbkRpYWxvZywga2V5KS5rZXkoa2V5KSkpLCBhcnJheS5tYXAocm93ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFszXSwgY29sdW1uTmFtZXMubWFwKG5hbWUgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTIyMTg0WzRdLCBkdW1wKHtcbiAgICAgICAgdmFsdWU6IHJvd1tuYW1lXSxcbiAgICAgICAgc2hvd0xldmVsczogMCxcbiAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgc2hvd0tpZHM6IHNob3dBbGwgfHwgc2hvd0tpZHMsXG4gICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgfSkpLmtleShyb3dbbmFtZV0pKSkua2V5KHJvdykpKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczEyMjE4NDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IHRhYmxlIC0tPjwhLS0gb3ZlcmZsb3cteTogc2Nyb2xsOyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXgtaGVpZ2h0OiA4MDBweDttYXgtd2lkdGg6MTAwdnc7b3ZlcmZsb3c6IHNjcm9sbDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0YWJsZVwiLCBcImF0XCI6IFtbXCJjZWxscGFkZGluZ1wiLCBcIjJcIl0sIFtcImNlbGxzcGFjaW5nXCIsIFwiMlwiXSwgW1wiYm9yZGVyXCIsIFwiMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGJvZHlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcInRoZWFkXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicG9zaXRpb246IHN0aWNreTt0b3A6IDA7Zm9udC1zaXplOiAwLjhlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0clwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGhcIiwgXCJhdFwiOiBbW1wic3R5bGUuY3Vyc29yXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIFwic3R5bGVcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcInRyXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBhcnJheURpc3BsYXkgPSB0YWcoKHsgYXJyYXksIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLCBjb2x1bW5OYW1lcywgZm9ybWF0Q2hhbmdlLCB0b2dnbGVDb2x1bW5EaWFsb2csIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTUyMTI3WzBdLCBhcnJheS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1WYWx1ZUtleXMoaXRlbSwgY29sdW1uTmFtZXMpO1xuICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTUyMTI3WzFdLCBkdW1wKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgc2hvd0xldmVscyxcbiAgICAgICAgICAgIHNob3dBbGwsXG4gICAgICAgICAgICBzaG93S2lkczogdHJ1ZSwgLy8gc2hvd0FsbCB8fCBzaG93S2lkcyxcbiAgICAgICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICAgICAgb25IZWFkZXJDbGljazogdG9nZ2xlQ29sdW1uRGlhbG9nLFxuICAgICAgICAgICAgYWxsb3dNYXhpbWl6ZSxcbiAgICAgICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgICAgIH0pKS5rZXkoaW5kZXgpO1xuICAgIH0pKTtcbn0pO1xuZnVuY3Rpb24gcGFyYW1WYWx1ZUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSkge1xuICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddLmluY2x1ZGVzKHR5cGVvZiAoaW5wdXRPYmplY3QpKSkge1xuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0T2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJPYmplY3RCeUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSk7XG59XG5mdW5jdGlvbiBmaWx0ZXJPYmplY3RCeUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSkge1xuICAgIGlmICgha2V5c0FycmF5KSB7XG4gICAgICAgIC8vIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKGlucHV0T2JqZWN0KVxuICAgICAgICAvLyByZXR1cm4gey4uLmlucHV0T2JqZWN0fSAvLyBtdXN0IGJlIGNsb25lIHNvIHVuY2hlY2tpbmcgaXRlbXMgZG9lcyBub3QgY2hhbmdlIG9yaWdpbmFsIG9iamVjdFxuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkT2JqZWN0ID0ge307XG4gICAga2V5c0FycmF5LmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGlucHV0T2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgfHwga2V5IGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBmaWx0ZXJlZE9iamVjdFtrZXldID0gaW5wdXRPYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZE9iamVjdDtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxNTIxMjc6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV1dIH07XG4iLCJpbXBvcnQgeyBjb2x1bW5FZGl0b3IgfSBmcm9tIFwiLi9jb2x1bW5FZGl0b3IuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBodG1sLCBzdGF0ZSwgc3RhdGVzLCB0YWcsIHdhdGNoIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBhcnJheVRhYmxlIH0gZnJvbSBcIi4vYXJyYXlUYWJsZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IGFycmF5RGlzcGxheSB9IGZyb20gXCIuL2FycmF5RGlzcGxheS50YWdcIjtcbmV4cG9ydCBjb25zdCBhcnJheXNEaXNwbGF5ID0gdGFnKCh7IHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLCBhcnJheSwgYXJyYXlWaWV3LCBmb3JtYXRDaGFuZ2UsIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICAvLyB1c2VkIHRvIGRpc3BsYXkgbGlzdCBvZiBhbGwgcG9zc2libGUgY29sdW1uc1xuICAgIGNvbnN0IGFsbENvbHVtbk5hbWVzID0gd2F0Y2goW2FycmF5LCBhcnJheS5sZW5ndGhdLCAoKSA9PiBhcnJheS5sZW5ndGggPyBnZXRBbGxLZXlzKGFycmF5KSA6IFtdKTtcbiAgICAvLyBhbiBlZGl0YWJsZSBsaXN0IG9mIGNvbHVtbiBuYW1lc1xuICAgIGxldCBjb2x1bW5OYW1lcyA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBkZWZhdWx0Q29sdW1uTmFtZXMgPSB3YXRjaChbYWxsQ29sdW1uTmFtZXNdLCAoKSA9PiBbLi4uYWxsQ29sdW1uTmFtZXNdKTtcbiAgICBsZXQgc2hvd0NvbHVtbkRpYWxvZyA9IGZhbHNlO1xuICAgIGNvbnN0IHVuaXF1ZUlkID0gc3RhdGUoKCkgPT4gJ2NvbHVtbkRpYWxvZycgKyBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBjb2x1bW5OYW1lcywgc2hvd0NvbHVtbkRpYWxvZyB9XSA9IGdldCh7IGNvbHVtbk5hbWVzLCBzaG93Q29sdW1uRGlhbG9nIH0pKTtcbiAgICB3YXRjaC5ub0luaXQoW2RlZmF1bHRDb2x1bW5OYW1lcy5sZW5ndGhdLCAoKSA9PiB7XG4gICAgICAgIGlmICghY29sdW1uTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbHVtbk5hbWVzID0gZGVmYXVsdENvbHVtbk5hbWVzO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgdG9nZ2xlQ29sdW1uRGlhbG9nID0gKCkgPT4ge1xuICAgICAgICBzaG93Q29sdW1uRGlhbG9nID0gIXNob3dDb2x1bW5EaWFsb2c7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh1bmlxdWVJZCk7XG4gICAgICAgIGlmIChzaG93Q29sdW1uRGlhbG9nKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5jbG9zZSgpOyAvLyA8LSBlbGVtZW50IGhhcyBvbmNsb3NlIGV2ZW50IHRoYXQgaXMgY2FsbGVkIHNsb3dcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgYXJyYXlUYWcgPSBhcnJheVZpZXcgPT09ICd0YWJsZScgPyBhcnJheVRhYmxlKHtcbiAgICAgICAgc2hvd0FsbCwgc2hvd0tpZHMsXG4gICAgICAgIGFycmF5LCB0b2dnbGVDb2x1bW5EaWFsb2csXG4gICAgICAgIGNvbHVtbk5hbWVzOiBjb2x1bW5OYW1lcyB8fCBhbGxDb2x1bW5OYW1lcyxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLCBldmVyeVNpbXBsZVZhbHVlLFxuICAgIH0pIDogYXJyYXlEaXNwbGF5KHtcbiAgICAgICAgYXJyYXksIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGNvbHVtbk5hbWVzOiBjb2x1bW5OYW1lcyB8fCBhbGxDb2x1bW5OYW1lcyxcbiAgICAgICAgdG9nZ2xlQ29sdW1uRGlhbG9nLFxuICAgICAgICBhbGxvd01heGltaXplLCBldmVyeVNpbXBsZVZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ2MzE3MVswXSwgYXJyYXlUYWcsIHVuaXF1ZUlkLCBhbGxDb2x1bW5OYW1lcy5tYXAobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVkID0gY29sdW1uTmFtZXMgPT09IHVuZGVmaW5lZCB8fCBjb2x1bW5OYW1lcy5pbmNsdWRlcyhuYW1lKTtcbiAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ2MzE3MVsxXSwgY29sdW1uRWRpdG9yKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgIGluY2x1ZGVkLFxuICAgICAgICAgICAgY29sdW1uTmFtZXM6IGNvbHVtbk5hbWVzIHx8IGRlZmF1bHRDb2x1bW5OYW1lcyxcbiAgICAgICAgICAgIGFsbENvbHVtbk5hbWVzLFxuICAgICAgICB9KSkua2V5KG5hbWUpO1xuICAgIH0pLCB0b2dnbGVDb2x1bW5EaWFsb2cpO1xufSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsS2V5cyhhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGFsbCwgeCkgPT4ge1xuICAgICAgICBpZiAoeCAmJiB0eXBlb2YgKHgpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmtleXMoeCkuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhbGwuaW5jbHVkZXMoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBhbHJlYWR5IGhhdmUgaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWxsLnB1c2goeCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sIFtdKTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M0NjMxNzE6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGlhbG9nXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowXCJdLCBbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJkdW1wLWRpYWxvZ1wiXSwgW1wibW91c2Vkb3duXCIsIFwidmFyIHIgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyhyLnRvcDw9ZXZlbnQuY2xpZW50WSYmZXZlbnQuY2xpZW50WTw9ci50b3Arci5oZWlnaHQmJnIubGVmdDw9ZXZlbnQuY2xpZW50WCYmZXZlbnQuY2xpZW50WDw9ci5sZWZ0K3Iud2lkdGgpIHx8IHRoaXMuY2xvc2UoKVwiXSwgW1wiZHJhZ3N0YXJ0XCIsIFwiY29uc3Qge2UsZHQsdH0gPSB7dDp0aGlzLGU6ZXZlbnQsZHQ6ZXZlbnQuZGF0YVRyYW5zZmVyfTtjb25zdCBkPXQuZHJhZz10LmRyYWd8fHt4OjAseTowfTtkLmluaXRYPWQueDtkLnN0YXJ0WD1ldmVudC5jbGllbnRYLXQub2Zmc2V0TGVmdDtkLnN0YXJ0WT1ldmVudC5jbGllbnRZLXQub2Zmc2V0VG9wO3Qub25kcmFnb3Zlcj1lLnRhcmdldC5vbmRyYWdvdmVyPShlKT0+ZS5wcmV2ZW50RGVmYXVsdCgpO2R0LmVmZmVjdEFsbG93ZWQ9J21vdmUnO2R0LmRyb3BFZmZlY3Q9J21vdmUnXCJdLCBbXCJkcmFnXCIsIFwiY29uc3Qge3QsZSxkdCxkfT17ZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXIsZDp0aGlzLmRyYWd9OyBpZihlLmNsaWVudFg9PT0wKSByZXR1cm47ZC54ID0gZC54ICsgZS5vZmZzZXRYIC0gZC5zdGFydFg7IGQueSA9IGQueSArIGUub2Zmc2V0WSAtIGQuc3RhcnRZOyB0aGlzLnN0eWxlLmxlZnQgPSBkLnggKyAncHgnOyB0aGlzLnN0eWxlLnRvcCA9IGQueSsncHgnO1wiXSwgW1wiZHJhZ2VuZFwiLCBcImNvbnN0IHt0LGUsZH09e3Q6dGhpcyxlOmV2ZW50LGQ6dGhpcy5kcmFnfTtpZiAoZC5pbml0WCA9PT0gZC54KSB7ZC54PWQueCtlLm9mZnNldFgtKGQuc3RhcnRYLWQueCk7ZC55PWQueStlLm9mZnNldFktKGQuc3RhcnRZLWQueSk7dGhpcy5zdHlsZS50cmFuc2Zvcm09dHJhbnNsYXRlM2QoZC54KydweCcsIGQueSsncHgnLCAwKX07dGhpcy5kcmFnZ2FibGU9ZmFsc2VcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtO2JhY2tncm91bmQtY29sb3I6IzY2Njtjb2xvcjp3aGl0ZTtcIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNvbHVtbiBNb2RpZmllclwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCVcIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+FpyBjbG9zZVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtmbGV4LXdyYXA6d3JhcFwiXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy13YXJuaW5nXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGFycmF5c0Rpc3BsYXkgfSBmcm9tIFwiLi9hcnJheXNEaXNwbGF5LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgaHRtbCwgbGV0UHJvcCwgc3RhdGUsIHN0YXRlcywgdGFnLCB3YXRjaCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGR1bXBBcnJheSA9IHRhZygoeyAvLyBkdW1wQXJyYXlcbmtleSwgdmFsdWUsIHNob3csIHNob3dBbGwsIHNob3dLaWRzLCBcbi8vIGFycmF5VmlldyxcbnNob3dMZXZlbHMsIGZvcm1hdENoYW5nZSwgYWxsb3dNYXhpbWl6ZSwgZXZlcnlTaW1wbGVWYWx1ZSwgfSkgPT4ge1xuICAgIGxldCBzaG93TG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGFycmF5VmlldyA9IHVuZGVmaW5lZDtcbiAgICBsZXQgbWF4aW1pemUgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHNob3dMb3dlciwgYXJyYXlWaWV3LCBtYXhpbWl6ZSB9XSA9IGdldCh7IHNob3dMb3dlciwgYXJyYXlWaWV3LCBtYXhpbWl6ZSB9KSk7XG4gICAgbGV0UHJvcChnZXQgPT4gW3Nob3dLaWRzXSA9IGdldChzaG93S2lkcykpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93QWxsXSA9IGdldChzaG93QWxsKSk7XG4gICAgd2F0Y2gubm9Jbml0KFtzaG93XSwgKFtzaG93XSkgPT4gc2hvd0xvd2VyID0gc2hvdyk7XG4gICAgd2F0Y2gubm9Jbml0KFtzaG93QWxsXSwgKFtzaG93QWxsXSkgPT4gc2hvd0xvd2VyID0gc2hvd0FsbCk7XG4gICAgY29uc3QgbWF4aW1pemVJZCA9IHN0YXRlKCgpID0+ICdtYXhpbWl6ZS1kdW1wLScgKyBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgY29uc3QgdG9nZ2xlTWF4aW1pemUgPSAoKSA9PiB7XG4gICAgICAgIG1heGltaXplID0gIW1heGltaXplO1xuICAgICAgICBpZiAobWF4aW1pemUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1heGltaXplSWQpLnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtaW5pbWl6ZSA9ICgpID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1heGltaXplSWQpLmNsb3NlKCk7XG4gICAgY29uc3QgZHVtcEJvZHkgPSAoc2hvd0FsbCB8fCBzaG93TG93ZXIgfHwgc2hvd0tpZHMgfHwgKHNob3dMb3dlciA9PSB1bmRlZmluZWQgJiYgc2hvd0xldmVscyA+IDApKTtcbiAgICBjb25zdCBnZXRIZWFkZXIgPSAoYWxsb3dNYXhpbWl6ZSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc5MzcwWzBdLCAoKSA9PiB7XG4gICAgICAgIGlmIChzaG93TG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dBbGwgPSBzaG93S2lkcyA9IHNob3dMb3dlciA9ICFkdW1wQm9keTtcbiAgICAgICAgfVxuICAgICAgICBzaG93QWxsID0gc2hvd0tpZHMgPSBzaG93TG93ZXIgPSAhc2hvd0xvd2VyO1xuICAgIH0sIGtleSwgYXJyYXlWaWV3ID09PSAndGFibGUnID8gJ2JvbGQnIDogJycsICgpID0+IGFycmF5VmlldyA9IGFycmF5VmlldyA9PT0gJ3RhYmxlJyA/IHVuZGVmaW5lZCA6ICd0YWJsZScsIGFycmF5VmlldyA9PT0gJ3RhYmxlJyA/ICdmbGV4JyA6ICd0YWJsZScsIHZhbHVlLmxlbmd0aCwgYWxsb3dNYXhpbWl6ZSAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NzkzNzBbMV0sIHRvZ2dsZU1heGltaXplKSk7XG4gICAgY29uc3QgZGlzcGxheU9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGFycmF5OiB2YWx1ZSxcbiAgICAgICAgYXJyYXlWaWV3OiBhcnJheVZpZXcsXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgfTtcbiAgICBjb25zdCBnZXRCb2R5ID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc5MzcwWzJdLCBhcnJheXNEaXNwbGF5KGRpc3BsYXlPcHRpb25zKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3OTM3MFszXSwgZ2V0SGVhZGVyKGFsbG93TWF4aW1pemUpLCBkdW1wQm9keSAmJiBnZXRCb2R5KCksIG1heGltaXplSWQsIG1heGltaXplICYmIGdldEhlYWRlcihmYWxzZSksIG1heGltaXplICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3OTM3MFs0XSwgYXJyYXlzRGlzcGxheSh7IC4uLmRpc3BsYXlPcHRpb25zLCBhbGxvd01heGltaXplOiBmYWxzZSB9KSksIG1pbmltaXplKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQ3OTM3MDogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1hcnJheS1sYWJlbFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJzdXBcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJvcGFjaXR5OjgwJTtmb250LXNpemU6NzUlO3BhZGRpbmctbGVmdDowLjRlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO1wiXSwgW1wic3R5bGUuZm9udC13ZWlnaHRcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJzdHlsZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dIH0sIHsgXCJublwiOiBcInN1cFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6ODAlO2ZvbnQtc2l6ZTo3NSU7cGFkZGluZy1sZWZ0OjAuNGVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiW1wiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgICZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTBweDtoZWlnaHQ6MTBweDtib3JkZXI6MXB4IHNvbGlkIHdoaXRlO2JvcmRlci10b3Atd2lkdGg6M3B4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO1wiXV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IGRpc3BsYXlzIHdyYXAgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidGFnZ2VkanMtYXJyYXktYm9keVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLWFycmF5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBtYXhpbWl6ZSAtLT5cIiB9LCB7IFwibm5cIjogXCJkaWFsb2dcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOjBcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcImR1bXAtZGlhbG9nXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJ2YXIgciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7KHIudG9wPD1ldmVudC5jbGllbnRZJiZldmVudC5jbGllbnRZPD1yLnRvcCtyLmhlaWdodCYmci5sZWZ0PD1ldmVudC5jbGllbnRYJiZldmVudC5jbGllbnRYPD1yLmxlZnQrci53aWR0aCkgfHwgdGhpcy5jbG9zZSgpXCJdLCBbXCJkcmFnc3RhcnRcIiwgXCJjb25zdCB7ZSxkdCx0fSA9IHt0OnRoaXMsZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXJ9O2NvbnN0IGQ9dC5kcmFnPXQuZHJhZ3x8e3g6MCx5OjB9O2QuaW5pdFg9ZC54O2Quc3RhcnRYPWV2ZW50LmNsaWVudFgtdC5vZmZzZXRMZWZ0O2Quc3RhcnRZPWV2ZW50LmNsaWVudFktdC5vZmZzZXRUb3A7dC5vbmRyYWdvdmVyPWUudGFyZ2V0Lm9uZHJhZ292ZXI9KGUpPT5lLnByZXZlbnREZWZhdWx0KCk7ZHQuZWZmZWN0QWxsb3dlZD0nbW92ZSc7ZHQuZHJvcEVmZmVjdD0nbW92ZSdcIl0sIFtcImRyYWdcIiwgXCJjb25zdCB7dCxlLGR0LGR9PXtlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2ZlcixkOnRoaXMuZHJhZ307IGlmKGUuY2xpZW50WD09PTApIHJldHVybjtkLnggPSBkLnggKyBlLm9mZnNldFggLSBkLnN0YXJ0WDsgZC55ID0gZC55ICsgZS5vZmZzZXRZIC0gZC5zdGFydFk7IHRoaXMuc3R5bGUubGVmdCA9IGQueCArICdweCc7IHRoaXMuc3R5bGUudG9wID0gZC55KydweCc7XCJdLCBbXCJkcmFnZW5kXCIsIFwiY29uc3Qge3QsZSxkfT17dDp0aGlzLGU6ZXZlbnQsZDp0aGlzLmRyYWd9O2lmIChkLmluaXRYID09PSBkLngpIHtkLng9ZC54K2Uub2Zmc2V0WC0oZC5zdGFydFgtZC54KTtkLnk9ZC55K2Uub2Zmc2V0WS0oZC5zdGFydFktZC55KTt0aGlzLnN0eWxlLnRyYW5zZm9ybT10cmFuc2xhdGUzZChkLngrJ3B4JywgZC55KydweCcsIDApfTt0aGlzLmRyYWdnYWJsZT1mYWxzZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJVwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlIGFycmF5XCIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ0ZXh0LWFsaWduOmxlZnQ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO21hcmdpbjowLjJlbTtnYXA6MC4yZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGNvcHlUZXh0KHRleHQpIHtcbiAgICB2YXIgY29weVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGNvcHlUZXh0LnZhbHVlID0gdGV4dDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvcHlUZXh0KTtcbiAgICBjb3B5VGV4dC5zZWxlY3QoKTtcbiAgICBjb3B5VGV4dC5zZXRTZWxlY3Rpb25SYW5nZSgwLCA5OTk5OSk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29weVRleHQpO1xufVxuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGNvcHlUZXh0IH0gZnJvbSBcIi4vY29weVRleHQuZnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBkdW1wU2ltcGxlKHsga2V5LCB2YWx1ZSwgb25IZWFkZXJDbGljaywgZXZlcnlTaW1wbGVWYWx1ZSB9KSB7XG4gICAgY29uc3QgaXNMaW5rVmFsdWUgPSB2YWx1ZS5zZWFyY2ggJiYgKHZhbHVlLnNsaWNlKDAsIDgpID09PSAnaHR0cHM6Ly8nIHx8IHZhbHVlLnNsaWNlKDAsIDcpID09PSAnaHR0cDovLycpO1xuICAgIC8vIGNvbnN0IHJlc3VsdCA9IGV2ZXJ5U2ltcGxlVmFsdWUgJiYgZXZlcnlTaW1wbGVWYWx1ZSh2YWx1ZSwga2V5KVxuICAgIGxldCBkaXNwbGF5VmFsdWU7XG4gICAgaWYgKGV2ZXJ5U2ltcGxlVmFsdWUpIHtcbiAgICAgICAgZGlzcGxheVZhbHVlID0gc2ltcGxlVmFsdWUoeyB2YWx1ZSwgZXZlcnlTaW1wbGVWYWx1ZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRpc3BsYXlWYWx1ZSA9IGlzTGlua1ZhbHVlID8gbGlua1ZhbHVlKHZhbHVlKSA6IHNpbXBsZVZhbHVlKHsgdmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMF0sIGtleSAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMV0sIG9uSGVhZGVyQ2xpY2sgJiYgXCJwb2ludGVyXCIsIG9uSGVhZGVyQ2xpY2ssIGtleSksIGRpc3BsYXlWYWx1ZSk7XG59XG5jb25zdCBzaW1wbGVWYWx1ZSA9IHRhZygoeyB2YWx1ZSwgZXZlcnlTaW1wbGVWYWx1ZSB9KSA9PiB7XG4gICAgY29uc3QgaXNMaWtlTnVsbCA9IFt1bmRlZmluZWQsIG51bGwsICdudWxsJ10uaW5jbHVkZXModmFsdWUpO1xuICAgIGNvbnN0IG51bWJlciA9IHZhbHVlO1xuICAgIGNvbnN0IGlzTGFyZ2VOdW1iZXIgPSAhaXNOYU4obnVtYmVyKSAmJiBudW1iZXIgPiAxMDAwMDAwMDAwO1xuICAgIGNvbnN0IHRpdGxlID0gIWlzTGFyZ2VOdW1iZXIgPyAnJyA6IGdldExhcmdlTnVtYmVyVGl0bGUobnVtYmVyKTtcbiAgICBsZXQgZG93blRpbWUgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW2Rvd25UaW1lXSA9IGdldChkb3duVGltZSkpO1xuICAgIGNvbnN0IHN0YXJ0TW91c2VEb3duID0gKCkgPT4ge1xuICAgICAgICBkb3duVGltZSA9IERhdGUubm93KCk7XG4gICAgfTtcbiAgICBjb25zdCBtYXJrTW91c2VVcCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGRvd25UaW1lID4gMzAwKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gYSBtYW51YWwgZHJhZyBjb3B5IGlzIHRha2luZyBwbGFjZVxuICAgICAgICB9XG4gICAgICAgIGNvcHlUZXh0KHZhbHVlKTsgLy8gYSByZWd1bGFyIGNsaWNrIHRvb2sgcGxhY2VcbiAgICB9O1xuICAgIGxldCBkaXNwbGF5VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoZXZlcnlTaW1wbGVWYWx1ZSkge1xuICAgICAgICBkaXNwbGF5VmFsdWUgPSBldmVyeVNpbXBsZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgZGlzcGxheVZhbHVlID0gZGlzcGxheVZhbHVlID09PSBudWxsICYmICdudWxsJyB8fCBkaXNwbGF5VmFsdWUgPT09IGZhbHNlICYmICdmYWxzZScgfHwgZGlzcGxheVZhbHVlID09PSB1bmRlZmluZWQgJiYgJ3VuZGVmaW5lZCcgfHwgZGlzcGxheVZhbHVlO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMl0sIHN0YXJ0TW91c2VEb3duLCBtYXJrTW91c2VVcCwgaXNMaWtlTnVsbCA/ICdyZ2JhKDAsMCwwLC41KScgOiAnJywgKHZhbHVlID09PSB0cnVlICYmICcjMjhhNTRjJykgfHxcbiAgICAgICAgKHZhbHVlID09PSBmYWxzZSAmJiAnI2U0MjExMicpIHx8XG4gICAgICAgIGlzTGlrZU51bGwgJiYgJ3doaXRlJyB8fCAnJywgdGl0bGUsIGRpc3BsYXlWYWx1ZSk7XG59KTtcbmZ1bmN0aW9uIGdldExhcmdlTnVtYmVyVGl0bGUobnVtYmVyKSB7XG4gICAgcmV0dXJuIG51bWJlciA+IDk0NjcwMjgwMDAwMCA/XG4gICAgICAgICdNaWxsaXNlY29uZHMgPiBVbml4IGVwb2NoOlxcbicgKyAobmV3IERhdGUobnVtYmVyKS50b0xvY2FsZVN0cmluZygpKSA6XG4gICAgICAgICdTZWNvbmRzID4gVW5peCBlcG9jaDpcXG4nICsgKG5ldyBEYXRlKG51bWJlciAqIDEwMDApLnRvTG9jYWxlU3RyaW5nKCkpO1xufVxuY29uc3QgbGlua1ZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0Njk3OFszXSwgKCkgPT4gY29weVRleHQodmFsdWUpLCB2YWx1ZSwgdmFsdWUpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyNDY5Nzg6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjc1JTtmbGV4OjEgMSAxMGVtO2NvbG9yOiMxMTExMTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1zaW1wbGUtbGFiZWxcIl0sIFtcInN0eWxlLmN1cnNvclwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBcInN0eWxlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJjdXJzb3I6cG9pbnRlcjtcIl0sIFtcImNsYXNzXCIsIFwiaG92ZXItYmctd2FybmluZyBhY3RpdmUtYmctZW5lcmdpemVkXCJdLCBbXCJtb3VzZWRvd25cIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcIm1vdXNldXBcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcInN0eWxlLmJhY2tncm91bmQtY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJzdHlsZVwiXSwgW1wic3R5bGUuY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgXCJzdHlsZVwiXSwgW1widGl0bGVcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dLCBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1widGFyZ2V0XCIsIFwiX2JsYW5rXCJdLCBbXCJjbGFzc1wiLCBcImhvdmVyLWJnLXdhcm5pbmcgYWN0aXZlLWJnLWVuZXJnaXplZFwiXSwgW1widGl0bGVcIiwgXCJ0YXAgdG8gY29weVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBsZXRQcm9wLCBzdGF0ZSwgc3RhdGVzLCB0YWcsIHdhdGNoIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBkdW1wT2JqZWN0ID0gdGFnKCh7IC8vIGR1bXBPYmplY3RcbmtleSwgc2hvd0tpZHMsIHNob3csIHNob3dMZXZlbHMsIHZhbHVlLCBzaG93QWxsLCBvbkhlYWRlckNsaWNrLCBmb3JtYXRDaGFuZ2UsIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICBsZXQgc2hvd0xvd2VyID0gdW5kZWZpbmVkO1xuICAgIGxldCBtYXhpbWl6ZSA9IGZhbHNlO1xuICAgIGNvbnN0IG1heGltaXplSWQgPSBzdGF0ZSgoKSA9PiAnbWF4aW1pemUtZHVtcC0nICsgcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvd0xvd2VyLCBtYXhpbWl6ZSB9XSA9IGdldCh7IHNob3dMb3dlciwgbWF4aW1pemUgfSkpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93S2lkc10gPSBnZXQoc2hvd0tpZHMpKTtcbiAgICB3YXRjaC5ub0luaXQoW3Nob3ddLCAoW3Nob3ddKSA9PiBzaG93TG93ZXIgPSBzaG93KTtcbiAgICB3YXRjaC5ub0luaXQoW3Nob3dBbGxdLCAoW3Nob3dBbGxdKSA9PiBzaG93TG93ZXIgPSBzaG93QWxsKTtcbiAgICBjb25zdCBjb250aW51ZUR1bXAgPSAha2V5IHx8IHNob3dLaWRzIHx8IHNob3dMb3dlciB8fCAoc2hvd0xvd2VyID09PSB1bmRlZmluZWQgJiYgc2hvd0xldmVscyA+IDApO1xuICAgIGNvbnN0IHRvZ2dsZU1heGltaXplID0gKCkgPT4ge1xuICAgICAgICBtYXhpbWl6ZSA9ICFtYXhpbWl6ZTtcbiAgICAgICAgaWYgKG1heGltaXplKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXhpbWl6ZUlkKS5zaG93TW9kYWwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbWluaW1pemUgPSAoKSA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXhpbWl6ZUlkKS5jbG9zZSgpO1xuICAgIGNvbnN0IGdldEhlYWQgPSAoYWxsb3dNYXhpbWl6ZSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDcwMjQ0WzBdLCBzaG93TG93ZXIgPyAnYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6YmxhY2s7JyA6ICcnLCAoKSA9PiB7XG4gICAgICAgIGlmIChzaG93TG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dBbGwgPSBzaG93S2lkcyA9IHNob3dMb3dlciA9ICEoc2hvd0FsbCB8fCBzaG93S2lkcyB8fCBzaG93TG93ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNob3dLaWRzID0gc2hvd0xvd2VyID0gIXNob3dMb3dlcjtcbiAgICB9LCBrZXksIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgsIGFsbG93TWF4aW1pemUgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDcwMjQ0WzFdLCB0b2dnbGVNYXhpbWl6ZSkpO1xuICAgIGNvbnN0IGdldER1bXBCb2R5ID0gKGFsbG93TWF4aW1pemUpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3MDI0NFsyXSwgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NzAyNDRbM10sICF2YWx1ZSB8fCB0eXBlb2YgKHZhbHVlKSAhPT0gJ29iamVjdCcgPyAnZmxleDogMSAxIDEwZW07JyA6ICdmbGV4LWdyb3c6MTsnLCBkdW1wKHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGtleSxcbiAgICAgICAgc2hvdzogc2hvd0xvd2VyLFxuICAgICAgICBzaG93QWxsLFxuICAgICAgICBzaG93TGV2ZWxzOiBzaG93TGV2ZWxzIC0gMSxcbiAgICAgICAgc2hvd0tpZHM6IHNob3dBbGwgfHwgc2hvd0tpZHMsXG4gICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgfSkpLmtleShrZXkpKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3MDI0NFs0XSwga2V5ICYmIGdldEhlYWQoYWxsb3dNYXhpbWl6ZSksIGNvbnRpbnVlRHVtcCAmJiBnZXREdW1wQm9keShhbGxvd01heGltaXplKSwgbWF4aW1pemVJZCwgbWF4aW1pemUgJiYgZ2V0SGVhZChmYWxzZSksIG1heGltaXplICYmIGdldER1bXBCb2R5KGZhbHNlKSwgbWluaW1pemUpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDcwMjQ0OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1vYmplY3QtbGFiZWxcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwic3VwXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwib3BhY2l0eTo4MCU7Zm9udC1zaXplOjc1JTtwYWRkaW5nLWxlZnQ6MC40ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ7XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ9XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JvcmRlcjoxcHggc29saWQgd2hpdGU7Ym9yZGVyLXRvcC13aWR0aDozcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7XCJdXSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLW9iamVjdC1ib2R5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSByZWN1cnNlIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1vYmplY3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDogMSAxIDEwZW07dGV4dC1hbGlnbjpsZWZ0O1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLW9iamVjdC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBtYXhpbWl6ZSAtLT5cIiB9LCB7IFwibm5cIjogXCJkaWFsb2dcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOjBcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcImR1bXAtZGlhbG9nXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJ2YXIgciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7KHIudG9wPD1ldmVudC5jbGllbnRZJiZldmVudC5jbGllbnRZPD1yLnRvcCtyLmhlaWdodCYmci5sZWZ0PD1ldmVudC5jbGllbnRYJiZldmVudC5jbGllbnRYPD1yLmxlZnQrci53aWR0aCkgfHwgdGhpcy5jbG9zZSgpXCJdLCBbXCJkcmFnc3RhcnRcIiwgXCJjb25zdCB7ZSxkdCx0fSA9IHt0OnRoaXMsZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXJ9O2NvbnN0IGQ9dC5kcmFnPXQuZHJhZ3x8e3g6MCx5OjB9O2QuaW5pdFg9ZC54O2Quc3RhcnRYPWV2ZW50LmNsaWVudFgtdC5vZmZzZXRMZWZ0O2Quc3RhcnRZPWV2ZW50LmNsaWVudFktdC5vZmZzZXRUb3A7dC5vbmRyYWdvdmVyPWUudGFyZ2V0Lm9uZHJhZ292ZXI9KGUpPT5lLnByZXZlbnREZWZhdWx0KCk7ZHQuZWZmZWN0QWxsb3dlZD0nbW92ZSc7ZHQuZHJvcEVmZmVjdD0nbW92ZSdcIl0sIFtcImRyYWdcIiwgXCJjb25zdCB7dCxlLGR0LGR9PXtlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2ZlcixkOnRoaXMuZHJhZ307IGlmKGUuY2xpZW50WD09PTApIHJldHVybjtkLnggPSBkLnggKyBlLm9mZnNldFggLSBkLnN0YXJ0WDsgZC55ID0gZC55ICsgZS5vZmZzZXRZIC0gZC5zdGFydFk7IHRoaXMuc3R5bGUubGVmdCA9IGQueCArICdweCc7IHRoaXMuc3R5bGUudG9wID0gZC55KydweCc7XCJdLCBbXCJkcmFnZW5kXCIsIFwiY29uc3Qge3QsZSxkfT17dDp0aGlzLGU6ZXZlbnQsZDp0aGlzLmRyYWd9O2lmIChkLmluaXRYID09PSBkLngpIHtkLng9ZC54K2Uub2Zmc2V0WC0oZC5zdGFydFgtZC54KTtkLnk9ZC55K2Uub2Zmc2V0WS0oZC5zdGFydFktZC55KTt0aGlzLnN0eWxlLnRyYW5zZm9ybT10cmFuc2xhdGUzZChkLngrJ3B4JywgZC55KydweCcsIDApfTt0aGlzLmRyYWdnYWJsZT1mYWxzZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJVwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlIG9iamVjdFwiIH1dIH1dIH1dIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBjb3B5VGV4dCB9IGZyb20gXCIuL2NvcHlUZXh0LmZ1bmN0aW9uXCI7XG5leHBvcnQgY29uc3QgY29udHJvbFBhbmVsID0gdGFnKCh7IHZhbHVlLCBmb3JtYXQsIHNob3dBbGwsIGZvcm1hdENoYW5nZSwgc2hvd0FsbENoYW5nZSwgfSkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NDA4MzNbMF0sICFmb3JtYXQgfHwgZm9ybWF0ID09PSAnZmxleCcgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDQwODMzWzFdLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIiArXG4gICAgICAgIChzaG93QWxsID8gJ2JhY2tncm91bmQtY29sb3I6IzMzY2Q1ZjsnIDogJ2JhY2tncm91bmQtY29sb3I6IzQ0NDQ0NCcpLCAoKSA9PiBzaG93QWxsQ2hhbmdlKHNob3dBbGwgPSAhc2hvd0FsbCkpLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIiArXG4gICAgICAgICghZm9ybWF0IHx8IGZvcm1hdCA9PT0gJ2ZsZXgnID8gJ2JhY2tncm91bmQtY29sb3I6IzMzY2Q1ZjsnIDogJ2JhY2tncm91bmQtY29sb3I6IzQ0NDQ0NCcpLCAoKSA9PiBmb3JtYXRDaGFuZ2UoZm9ybWF0ID0gJ2ZsZXgnKSwgXCJtYXJnaW46MXB4O2JvcmRlci1yYWRpdXM6NXB4O2NvbG9yOndoaXRlO2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXg7cGFkZGluZy1sZWZ0OjAuMmVtO3BhZGRpbmctcmlnaHQ6MC4yZW07XCIgK1xuICAgICAgICAoZm9ybWF0ID09PSAnanNvbicgPyAnYmFja2dyb3VuZC1jb2xvcjojMzNjZDVmOycgOiAnYmFja2dyb3VuZC1jb2xvcjojNDQ0NDQ0JyksICgpID0+IGZvcm1hdENoYW5nZShmb3JtYXQgPSAnanNvbicpLCAoKSA9PiBjb3B5QXNKc29uVGV4dCh2YWx1ZSkpO1xufSk7XG5mdW5jdGlvbiBjb3B5QXNKc29uVGV4dCh2YWx1ZSkge1xuICAgIGNvbnN0IHRleHQgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMik7XG4gICAgY29weVRleHQodGV4dCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDQwODMzOiBbW3sgXCJublwiOiBcInN0eWxlXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRpYWxvZy5kdW1wLWRpYWxvZzo6YmFja2Ryb3Age1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpOyAvKiBTZXQgYSBzZW1pLXRyYW5zcGFyZW50IGJsYWNrIGJhY2tncm91bmQgKi9cXG4gICAgICB9XFxuXFxuICAgICAgLmNoaWxkLW1hcmdpbi14eHMge21hcmdpbjowLjJlbTt9XFxuICAgICAgXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLmhvdmVyLWJnLXdhcm5pbmc6aG92ZXIge2JhY2tncm91bmQtY29sb3I6I2ZjZjhlM31cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuaG92ZXItYmctYmFsYW5jZWQ6aG92ZXIge2JhY2tncm91bmQtY29sb3I6IzMzY2Q1Zn1cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuYWN0aXZlLWJnLWVuZXJnaXplZDphY3RpdmUge2JhY2tncm91bmQtY29sb3I6I2ZmYzkwMH1cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuYmctZGFyayB7YmFja2dyb3VuZC1jb2xvcjojNDQ0NDQ0fVxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC5iZy1iYWxhbmNlZCB7YmFja2dyb3VuZC1jb2xvcjojMzNjZDVmfVxcbiAgICAgIFxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1vYmplY3Qge21hcmdpbjowLjJlbTtwYWRkaW5nOjAuMmVtO292ZXJmbG93OmF1dG87ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO31cXG4gICAgICAudGFnZ2VkanMtZHVtcCAudGFnZ2VkanMtb2JqZWN0LWxhYmVsIHtcXG4gICAgICAgIHBhZGRpbmc6MC4yZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZvbnQtc2l6ZTo2NSU7Y29sb3I6d2hpdGU7XFxuICAgICAgICBib3JkZXItY29sb3I6d2hpdGU7ZmxleC1ncm93OjE7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzODdlZjU7XFxuICAgICAgfVxcblxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1zaW1wbGUtbGFiZWwge1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6YmxhY2s7Zm9udC1zaXplOjY1JTtib3JkZXItY29sb3I6d2hpdGU7bGluZS1oZWlnaHQ6IDk1JTtmb250LXdlaWdodDpib2xkO1xcbiAgICAgIH1cXG5cXG4gICAgICAudGFnZ2VkanMtZHVtcCAudGFnZ2VkanMtb2JqZWN0LWJvZHktd3JhcCB7XFxuICAgICAgICBkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXBcXG4gICAgICB9XFxuXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLW9iamVjdC13cmFwIHtcXG4gICAgICAgIGZvbnQtc2l6ZTo5MCU7Y29sb3I6IzExMTExMTtiYWNrZ3JvdW5kLWNvbG9yOiNkOWVkZjc7Ym9yZGVyOjFweCBzb2xpZCBibGFjaztib3JkZXItcmFkaXVzOjVweDtmbGV4LWRpcmVjdGlvbjogY29sdW1uO2Rpc3BsYXk6ZmxleDtcXG4gICAgICB9XFxuICAgICAgXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLWFycmF5LWxhYmVsIHtcXG4gICAgICAgIHBhZGRpbmc6MC4yZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZsZXgtZ3JvdzoxO2ZvbnQtc2l6ZTo2NSU7Ym9yZGVyLWNvbG9yOndoaXRlO2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6I2VmNDczYTtcXG4gICAgICB9XFxuXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLWFycmF5LWJvZHkge1xcbiAgICAgICAgdGV4dC1hbGlnbjpsZWZ0O2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDttYXJnaW46MC4yZW07Z2FwOjAuMmVtXFxuICAgICAgfVxcbiAgICAgIFxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1hcnJheS13cmFwIHtcXG4gICAgICAgIGNvbG9yOiMxMTExMTE7YmFja2dyb3VuZC1jb2xvcjojZjJkZWRlO2JvcmRlcjoxcHggc29saWQgYmxhY2s7Ym9yZGVyLXJhZGl1czo1cHg7ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtkaXNwbGF5OmZsZXhcXG4gICAgICB9XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7bGluZS1oZWlnaHQ6IDkwJTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwb3NpdGlvbjpyZWxhdGl2ZTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7Zm9udC1zaXplOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTE4cHg7cmlnaHQ6LTZweFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy1iYWxhbmNlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJmbGV4XCIgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy1iYWxhbmNlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJqc29uXCIgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIl0sIFtcImNsYXNzXCIsIFwiYmctZGFyayBob3Zlci1iZy1iYWxhbmNlZCBhY3RpdmUtYmctZW5lcmdpemVkXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvcHlcIiB9XSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImNsYXNzXCIsIFwiaG92ZXItYmctYmFsYW5jZWRcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJ0aXRsZVwiLCBcImhpZGUvc2hvdyBhbGwgc3ViIG9iamVjdHNcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GBXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBvbkluaXQsIHRhZywgbGV0UHJvcCwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wQXJyYXkgfSBmcm9tIFwiLi9kdW1wQXJyYXkudGFnXCI7XG5pbXBvcnQgeyBkdW1wU2ltcGxlIH0gZnJvbSBcIi4vZHVtcFNpbXBsZS50YWdcIjtcbmltcG9ydCB7IGR1bXBPYmplY3QgfSBmcm9tIFwiLi9kdW1wT2JqZWN0LnRhZ1wiO1xuaW1wb3J0IHsgY29udHJvbFBhbmVsIH0gZnJvbSBcIi4vY29udHJvbFBhbmVsLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IGR1bXAgPSB0YWcoKHsgLy8gZHVtcCB0YWdcbmtleSwgdmFsdWUsIHNob3dLaWRzID0gZmFsc2UsIHNob3dMZXZlbHMgPSAtMSwgc2hvd0FsbCA9IGZhbHNlLCBmb3JtYXQgPSAnZmxleCcsIGZvcm1hdENoYW5nZSA9IHggPT4gZm9ybWF0ID0geCwgaXNSb290RHVtcCA9IHRydWUsIG9uSGVhZGVyQ2xpY2ssIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICBpZiAoaXNSb290RHVtcCAmJiBhbGxvd01heGltaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsb3dNYXhpbWl6ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGlzT2JqZWN0ID0gKCkgPT4gdmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBPYmplY3Q7XG4gICAgY29uc3QgdHlwaW5nID0gdmFsdWUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgKHZhbHVlKTtcbiAgICBsZXQgc2hvdyA9IGZhbHNlO1xuICAgIGxldFByb3AoZ2V0ID0+IFtmb3JtYXRdID0gZ2V0KGZvcm1hdCkpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93QWxsXSA9IGdldChzaG93QWxsKSk7XG4gICAgbGV0UHJvcChnZXQgPT4gW3Nob3dMZXZlbHNdID0gZ2V0KHNob3dMZXZlbHMpKTtcbiAgICBsZXQgYXJyYXlWaWV3ID0gdW5kZWZpbmVkO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvdywgYXJyYXlWaWV3IH1dID0gZ2V0KHsgc2hvdywgYXJyYXlWaWV3IH0pKTtcbiAgICBvbkluaXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBsZXZlbHNEZWZpbmVkID0gKHNob3dMZXZlbHMgPj0gMCAmJiBzaG93TGV2ZWxzKTtcbiAgICAgICAgLy8gZGV0ZWN0IGF1dG8gbGV2ZWxzIChkZWZhdWx0KSBhbmQgaWYgb2JqZWN0IGxldHMgb25seSBzaG93IDIgbGV2ZWxzIGRlZXBcbiAgICAgICAgY29uc3QgYXV0b1Nob3dPYmplY3RMZXZlbHMgPSBzaG93TGV2ZWxzID09PSAtMSAmJiAha2V5ICYmIGlzT2JqZWN0KCk7XG4gICAgICAgIHNob3dMZXZlbHMgPSBsZXZlbHNEZWZpbmVkIHx8IChhdXRvU2hvd09iamVjdExldmVscyA/IDIgOiAwKTtcbiAgICAgICAgaWYgKHNob3dMZXZlbHMgPiAwKSB7XG4gICAgICAgICAgICBzaG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qIElGIDE6IHVuZGVmaW5lZCBFTFNFIGdvdG8gc2ltcGxlVGVtcGxhdGUgKi9cbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBkdW1wU2ltcGxlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHR5cGluZyxcbiAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyogSUYgMjogc2ltcGxlIHZhbHVlIEVMU0UgZ290byBvYmplY3RUZW1wbGF0ZSAqL1xuICAgIGlmIChbJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ3N0cmluZyddLmluY2x1ZGVzKHR5cGluZykpIHtcbiAgICAgICAgcmV0dXJuIGR1bXBTaW1wbGUoeyBrZXk6IGtleSwgdmFsdWUsIG9uSGVhZGVyQ2xpY2ssIGV2ZXJ5U2ltcGxlVmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRPYmplY3RUZW1wbGF0ZSh7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzaG93S2lkcyxcbiAgICAgICAga2V5LFxuICAgICAgICBvbkhlYWRlckNsaWNrLFxuICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICBmb3JtYXQsXG4gICAgICAgIGlzUm9vdER1bXAsXG4gICAgICAgIHNob3dBbGwsXG4gICAgICAgIHNob3dBbGxDaGFuZ2U6ICh4KSA9PiBzaG93QWxsID0geCxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICBzaG93LFxuICAgICAgICBzaG93TGV2ZWxzLFxuICAgICAgICBhbGxvd01heGltaXplLFxuICAgIH0pO1xufSk7XG5sZXQgZHVtcENvdW50ID0gMDtcbmNvbnN0IGdldE9iamVjdFRlbXBsYXRlID0gKHsgdmFsdWUsIHNob3dLaWRzLCBrZXksIG9uSGVhZGVyQ2xpY2ssIGV2ZXJ5U2ltcGxlVmFsdWUsIGZvcm1hdCwgaXNSb290RHVtcCwgc2hvd0FsbCwgc2hvd0FsbENoYW5nZSwgZm9ybWF0Q2hhbmdlLCBzaG93LCBzaG93TGV2ZWxzLCBhbGxvd01heGltaXplLCB9KSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGlmICghc2hvd0tpZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMDYxODhbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkdW1wU2ltcGxlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6ICdudWxsJyxcbiAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkodmFsdWUpOyAvLyAoIWZvcm1hdCB8fCBmb3JtYXQ9PT0nZmxleCcpICYmICgodmFsdWUgYXMgYW55KS5wdXNoICYmICh2YWx1ZSBhcyBhbnkpLnBvcClcbiAgICBjb25zdCBnZXRBcnJheUR1bXAgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBkdW1wQXJyYXkoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBzaG93LFxuICAgICAgICAgICAgLy8gYXJyYXlWaWV3LFxuICAgICAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgICAgIHNob3dLaWRzLFxuICAgICAgICAgICAgc2hvd0xldmVscyxcbiAgICAgICAgICAgIGZvcm1hdENoYW5nZSxcbiAgICAgICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGdldE9iamVjdER1bXAgPSAoKSA9PiBkdW1wT2JqZWN0KHtcbiAgICAgICAga2V5LFxuICAgICAgICBzaG93LFxuICAgICAgICAvLyBzaG93Q2hhbmdlOiB4ID0+IHNob3dDaGFuZ2VWYWx1ZShzaG93ID0geCksXG4gICAgICAgIHNob3dLaWRzLFxuICAgICAgICBzaG93TGV2ZWxzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICBvbkhlYWRlckNsaWNrLFxuICAgICAgICBhbGxvd01heGltaXplLFxuICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgIH0pO1xuICAgIGNvbnN0IGdldEpzb25EdW1wID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzA2MTg4WzFdLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMikpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMDYxODhbMl0sIGB0YWdnZWRqcy1kdW1wLSR7KytkdW1wQ291bnR9YCwgaXNSb290RHVtcCAmJiBjb250cm9sUGFuZWwoe1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZm9ybWF0LFxuICAgICAgICBzaG93QWxsLFxuICAgICAgICBzaG93QWxsQ2hhbmdlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgfSksIChmb3JtYXQgPT09ICdqc29uJyAmJiBnZXRKc29uRHVtcCgpKSB8fCAoaXNBcnJheSA/IGdldEFycmF5RHVtcCgpIDogZ2V0T2JqZWN0RHVtcCgpKSk7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczMwNjE4ODogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJubyBraWRzXCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCU7aGVpZ2h0OjI1dmg7bWluLWhlaWdodDo0MDBweDtjb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO1wiXSwgW1wiZGlzYWJsZWRcIl0sIFtcIndyYXBcIiwgXCJvZmZcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLWR1bXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcywgc3RhdGUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGR1bXAgfSBmcm9tIFwiLi9kdW1wXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IGR1bXBDb250ZW50ID0gdGFnKCgpID0+IHtcbiAgICBsZXQgdXNlckpzb25TdHJpbmcgPSAnJztcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGxldCB1c2VySnNvbiA9ICcnO1xuICAgIGxldCBiYWRFdmFsID0gZmFsc2U7XG4gICAgc3RhdGVzKGdldCA9PiBbeyB1c2VySnNvblN0cmluZywgcmVuZGVyQ291bnQsIHVzZXJKc29uLCBiYWRFdmFsIH1dID0gZ2V0KHsgdXNlckpzb25TdHJpbmcsIHJlbmRlckNvdW50LCB1c2VySnNvbiwgYmFkRXZhbCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICAvLyBjb25zdCB1c2VySnNvbiA9IEpTT04ucGFyc2UodXNlckpzb25TdHJpbmcpXG4gICAgY29uc3QgY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHVzZXJKc29uU3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdXNlckpzb24gPSBzYW5kYm94RXZhbCh1c2VySnNvblN0cmluZywge30pO1xuICAgICAgICAgICAgdXNlckpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh1c2VySnNvbiwgbnVsbCwgMik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgYmFkRXZhbCA9IHRydWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEpTT04ucGFyc2UodXNlckpzb25TdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHVzZXJKc29uID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZXJyKS5yZWR1Y2UoKGEsIGtleSkgPT4gKGFba2V5XSA9IGVycltrZXldKSAmJiBhIHx8IGEsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2FtcGxlRHVtcCA9IHN0YXRlKCgpID0+ICh7XG4gICAgICAgIHNob3dMZXZlbHM6IDE1LFxuICAgICAgICBzaG93QWxsOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdGVzdDoge1xuICAgICAgICAgICAgICAgIGFub3RoZXJPbmU6IDIyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJyYXlUZXN0OiBbe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc29tZXRoaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgc3RyZWV0OiAnNDM2MScgfSxcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbiB0aGlzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgc3RyZWV0OiAnMjIzNScgfSxcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd3b3JsZCcsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB7IHN0cmVldDogJzQ3ODUnIH0sXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTgzNjMyWzBdLCBjaGFuZ2UsIHVzZXJKc29uID09PSBcIlwiID8gXCJcIiA6IHVzZXJKc29uU3RyaW5nLCB1c2VySnNvbiA9PT0gXCJcIiA/IFwiXCIgOiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxODM2MzJbMV0sIGR1bXAoe1xuICAgICAgICB2YWx1ZTogdXNlckpzb25cbiAgICB9KSksIGR1bXAoc2FtcGxlRHVtcCksIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdkdW1wQ29udGVudCcgfSkpO1xufSk7XG4vLyBleGVjdXRlIHNjcmlwdCBpbiBwcml2YXRlIGNvbnRleHRcbmZ1bmN0aW9uIHNhbmRib3hFdmFsKHNyYywgY3R4KSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG4gICAgY3R4ID0gbmV3IFByb3h5KGN0eCwgeyBoYXM6ICgpID0+IHRydWUgfSk7XG4gICAgbGV0IGZ1bmMgPSAobmV3IEZ1bmN0aW9uKFwid2l0aCh0aGlzKSB7IHJldHVybiAoXCIgKyBzcmMgKyBcIil9XCIpKTtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGN0eCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTgzNjMyOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDthbGlnbi1pdGVtOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtnYXA6LjVlbTtwYWRkaW5nOi41ZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtaW4td2lkdGg6MzAwcHg7bWluLWhlaWdodDo0MDBweDtmbGV4OjFcIl0sIFtcImlkXCIsIFwidGFnZ2VkanMtZHVtcC11c2VyLXRleHRhcmVhXCJdLCBbXCJ3cmFwXCIsIFwib2ZmXCJdLCBbXCJwbGFjZWhvbGRlclwiLCBcInBhc3RlIGpzb24gaGVyZVwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1heC13aWR0aDo5MDBweFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDoxO21pbi13aWR0aDoxMTBweDt3aWR0aDoxMDAlO21heC13aWR0aDo5MDBweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjUpO21pbi13aWR0aDozMDBweFwiXSwgW1wiaWRcIiwgXCJ0YWdnZWRqcy1kdW1wLXVzZXItcmVzdWx0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwoKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcywgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBFTVBUWV9TVUJTQ1JJUFRJT04gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3ViamVjdC5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBBbm9ueW1vdXNTdWJqZWN0KHRoaXMsIHRoaXMpO1xuICAgICAgICBzdWJqZWN0Lm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3Rocm93SWZDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBBcnJheS5mcm9tKF90aGlzLm9ic2VydmVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoX3RoaXMuY3VycmVudE9ic2VydmVycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBfdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBfdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBfdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IHRoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3ViamVjdC5wcm90b3R5cGUsIFwib2JzZXJ2ZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5vYnNlcnZlcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHRoaXMuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lclN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9pbm5lclN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZCwgb2JzZXJ2ZXJzID0gX2Eub2JzZXJ2ZXJzO1xuICAgICAgICBpZiAoaGFzRXJyb3IgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIG9ic2VydmVycy5wdXNoKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgICAgIGFyclJlbW92ZShvYnNlcnZlcnMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhyb3duRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIFN1YmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3Q7XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IFN1YmplY3QgfTtcbnZhciBBbm9ueW1vdXNTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5vbnltb3VzU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXJyKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29tcGxldGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICB9O1xuICAgIHJldHVybiBBbm9ueW1vdXNTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBBbm9ueW1vdXNTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4uL29ic2VydmFibGUvY29uY2F0JztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGgoKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKHZhbHVlcyk7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAoc2NoZWR1bGVyID8gY29uY2F0KHZhbHVlcywgc291cmNlLCBzY2hlZHVsZXIpIDogY29uY2F0KHZhbHVlcywgc291cmNlKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcCIsImltcG9ydCB7IHN1YnNjcmliZVdpdGgsIGh0bWwsIHRhZywgVmFsdWVTdWJqZWN0LCBzdGF0ZSwgY29tYmluZUxhdGVzdCwgd2lsbFByb21pc2UsIHN0YXRlcywgc3Vic2NyaWJlLCBTdWJqZWN0LCBnZXRJbm5lckhUTUwsIGhvc3QgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGR1bXBDb250ZW50IH0gZnJvbSBcIi4vZHVtcENvbnRlbnQudGFnXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgU3ViamVjdCBhcyBSeFN1YmplY3QsIHN0YXJ0V2l0aCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBmeCB9IGZyb20gXCJ0YWdnZWRqcy1hbmltYXRlLWNzc1wiO1xuZXhwb3J0IGNvbnN0IHRlc3RTdGFnZ2VyQnkgPSAyMDtcbmNvbnN0IGFuaW1hdGVXcmFwID0gKGNvdW50cywgc3RhZ2dlckJ5ID0gdGVzdFN0YWdnZXJCeSkgPT4ge1xuICAgIGNvbnN0IGlubmVySFRNTCA9IGdldElubmVySFRNTCgpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMzQwNjk3WzBdLCBmeCh7IHN0YWdnZXI6IHN0YWdnZXJCeSwgZHVyYXRpb246ICcuMXMnIH0pLCBpbm5lckhUTUwpLmFjY2VwdElubmVySFRNTChpbm5lckhUTUwpO1xufTtcbmNvbnN0IG91dGVySHRtbCA9IChzdGFnZ2VyQnkgPSAxMCkgPT4ge1xuICAgIGNvbnN0IGlubmVySFRNTCA9IGdldElubmVySFRNTCgpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMzQwNjk3WzFdLCBmeCh7IHN0YWdnZXI6IHN0YWdnZXJCeSwgZHVyYXRpb246ICcuMXMnIH0pLCBpbm5lckhUTUwpLmFjY2VwdElubmVySFRNTChpbm5lckhUTUwpO1xufTtcbmV4cG9ydCBjb25zdCBjb25jYXRTdHlsZXMgPSB0YWcoKGlubmVySFRNTCkgPT4ge1xuICAgIGxldCB3aWR0aCA9IDE7XG4gICAgbGV0IGJvcmRlckNvbG9yID0gJ3doaXRlJztcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IGJvcmRlckNvbG9yLCB3aWR0aCB9XSA9IGdldCh7IGJvcmRlckNvbG9yLCB3aWR0aCB9KSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbMl0sIHdpZHRoLCBib3JkZXJDb2xvciwgaW5uZXJIVE1MLCB3aWR0aCwgZXZlbnQgPT4gd2lkdGggPSBOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKSwgd2lkdGgsIGV2ZW50ID0+IGJvcmRlckNvbG9yID0gZXZlbnQudGFyZ2V0LnZhbHVlLCBib3JkZXJDb2xvciA9PT0gJycgPyAnc2VsZWN0ZWQnIDogJycsIGJvcmRlckNvbG9yID09PSAnYmxhY2snID8gJ3NlbGVjdGVkJyA6ICcnLCBib3JkZXJDb2xvciA9PT0gJ2JsdWUnID8gJ3NlbGVjdGVkJyA6ICcnLCBib3JkZXJDb2xvciA9PT0gJ3doaXRlJyA/ICdzZWxlY3RlZCcgOiAnJyk7XG59KTtcbmV4cG9ydCBjb25zdCBjb250ZW50ID0gdGFnKCgpID0+IHtcbiAgICBjb25zdCBzdWIwID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoKSk7XG4gICAgY29uc3Qgc3ViMSA9IHN0YXRlKCgpID0+IG5ldyBWYWx1ZVN1YmplY3QoMykpO1xuICAgIGNvbnN0IHN1YkFycmF5ID0gc3RhdGUoKCkgPT4gbmV3IFZhbHVlU3ViamVjdChbJ2EnLCAnYicsICdjJ10pKTtcbiAgICBjb25zdCB2czAgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KDApKTtcbiAgICBjb25zdCB2czEgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KDEpKTtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGxldCBvcmFuZ2VUb2dnbGUgPSB0cnVlO1xuICAgIGxldCBib2xkVG9nZ2xlID0gZmFsc2U7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCBzdGFnZ2VyQnkgPSB0ZXN0U3RhZ2dlckJ5O1xuICAgIGxldCBzaG93SGlkZUZ4ID0gZmFsc2U7XG4gICAgY29uc3QgY291bnRzID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoeyBhZGRlZDogMCwgcmVtb3ZlZDogMCB9KSk7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgcmVuZGVyQ291bnQsIG9yYW5nZVRvZ2dsZSwgYm9sZFRvZ2dsZSwgY291bnRlciwgc2hvd0hpZGVGeCwgc3RhZ2dlckJ5LFxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIHJlbmRlckNvdW50LCBvcmFuZ2VUb2dnbGUsIGJvbGRUb2dnbGUsIGNvdW50ZXIsIHNob3dIaWRlRngsIHN0YWdnZXJCeSxcbiAgICB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICBjb25zdCBkb20gPSBbe1xuICAgICAgICAgICAgbm46ICdiJywgY2g6IFt7XG4gICAgICAgICAgICAgICAgICAgIG5uOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHRjOiAnYmlnJyxcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9XTtcbiAgICBjb25zdCBpbmplY3Rpb25UZXN0ID0gJzxzY3JpcHQ+YWxlcnQoXCJpIHNob3VsZCBuZXZlciBydW4gYnV0IGJlIHNlZW4gb24gcGFnZVwiKTwvc2NyaXB0Pic7XG4gICAgY29uc3QgcGlwZSA9IHN1YnNjcmliZSh2czAsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbM10sICgpID0+IHtcbiAgICAgICAgICAgICsrY291bnRlcjtcbiAgICAgICAgfSwgY291bnRlciwgKCkgPT4gdnMwLm5leHQodnMwLnZhbHVlICsgMSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMzQwNjk3WzRdLCBjb3VudGVyLCBwaXBlLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsICgpID0+IHNob3dIaWRlRnggPSAhc2hvd0hpZGVGeCwgc2hvd0hpZGVGeCAmJiAoaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTM0MDY5N1s1XSwgZngoeyBkdXJhdGlvbjogJzEwbXMnIH0pKSksIHNob3dIaWRlRnggJiYgKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbNl0sIGZ4KHsgZHVyYXRpb246ICcxMG1zJywgc3RhZ2dlcjogc3RhZ2dlckJ5IH0pKSksIHNob3dIaWRlRnggJiYgKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbN10sIGZ4KHsgZHVyYXRpb246ICcxMG1zJywgc3RhZ2dlcjogc3RhZ2dlckJ5ICogMiB9KSkpLCBzaG93SGlkZUZ4ICYmIChvdXRlckh0bWwoc3RhZ2dlckJ5KS5pbm5lckhUTUwgPSBpbm5lckh0bWxUYWcoKSksIHN1YnNjcmliZShjb3VudHMsIGNvdW50cyA9PiBjb3VudHMuYWRkZWQpLCBzdWJzY3JpYmUoY291bnRzLCBjb3VudHMgPT4gY291bnRzLnJlbW92ZWQpLCBldmVudCA9PiBzdGFnZ2VyQnkgPSBOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKSwgY29uY2F0U3R5bGVzKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbOF0pKSwgZHVtcENvbnRlbnQoKSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ0NvbnRlbnREZWJ1ZycgfSksIG51bWJlcmVkTm9QYXJlbnRzKCksIHBhc3NTdWJzY3JpcHRpb24oeyBzdWIwLCBzdWIxIH0pLCBudW1iZXJlZE5vUGFyZW50cygpLCBpbmplY3Rpb25UZXN0LCBodG1sLmRvbShkb20pLCBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMzQwNjk3WzldKSwgXCIzcHggc29saWQgb3JhbmdlXCIsIG9yYW5nZVRvZ2dsZSA/IFwiM3B4IHNvbGlkIG9yYW5nZVwiIDogXCIzcHggc29saWQgZ3JlZW5cIiwgKCkgPT4gb3JhbmdlVG9nZ2xlID0gIW9yYW5nZVRvZ2dsZSwgb3JhbmdlVG9nZ2xlLCBib2xkVG9nZ2xlID8geyBzdHlsZTogJ2ZvbnQtd2VpZ2h0OmJvbGQ7JyB9IDoge30sICgpID0+IGJvbGRUb2dnbGUgPSAhYm9sZFRvZ2dsZSwgYm9sZFRvZ2dsZSA/ICd0cnVlJyA6ICdmYWxzZScsIDU0LCAnaGVsbG8nLCAwLCBmYWxzZSwgbnVsbCwgdW5kZWZpbmVkLCB0cnVlLCAneycsICd9JywgJ3snLCAnfScsICc8ZGl2PmhlbGxvPC9kaXY+Jywgc3Vic2NyaWJlKHN1YjApLCBzdWJzY3JpYmUoc3ViQXJyYXksIGFycmF5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCh4ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbMTBdLCB4KS5rZXkoeCkpO1xuICAgIH0pLCBzdWJzY3JpYmUoc3ViQXJyYXksIGFycmF5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCh4ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbMTFdLCB4LCB4KS5rZXkoeCkpO1xuICAgIH0pLCBzdWJzY3JpYmVXaXRoKHN1YjAsIC0xKSwgc3Vic2NyaWJlKHZzMCksIHN1YnNjcmliZSh2czAsICgpID0+IDU1KSwgdGVzdEhvc3QoKSwgc3Vic2NyaWJlKGNvbWJpbmVMYXRlc3QoW3ZzMCwgdnMxXSkucGlwZSh4ID0+IHhbMV0pKSwgc3Vic2NyaWJlKGNvbWJpbmVMYXRlc3QoW3ZzMCwgdnMxXSkucGlwZSh3aWxsUHJvbWlzZSh4ID0+IFByb21pc2UucmVzb2x2ZShodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMzQwNjk3WzEyXSkpKSkpLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnQ29udGVudERlYnVnJyB9KSk7XG59KTtcbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJlZE5vUGFyZW50cygpIHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTM0MDY5N1sxM10sICd0ZXN0MCcsICd0ZXN0MScsICd0ZXN0MycpO1xufVxuY29uc3QgcGFzc1N1YnNjcmlwdGlvbiA9IHRhZygoeyBzdWIwLCBzdWIxLCB9KSA9PiB7XG4gICAgbGV0IG9uT2ZmID0gZmFsc2U7XG4gICAgLy8gY29uc3Qgb2IgPSBzdGF0ZSgoKSA9PiBuZXcgT2JzZXJ2YWJsZSgpKSBhcyBhbnlcbiAgICBjb25zdCBvYiA9IHN0YXRlKCgpID0+IG5ldyBSeFN1YmplY3QoKSk7XG4gICAgc3RhdGVzKGdldCA9PiBbb25PZmZdID0gZ2V0KG9uT2ZmKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbMTRdLCBzdWJzY3JpYmUoc3ViMCksICgpID0+IHN1YjAubmV4dCgoc3ViMC52YWx1ZSB8fCAwKSArIDEpLCAoKSA9PiBvYi5uZXh0KHN1YjAudmFsdWUgPSAoc3ViMC52YWx1ZSB8fCAwKSArIDEpLCAoKSA9PiBvbk9mZiA9ICFvbk9mZiwgb25PZmYgPyAnc2hvdycgOiAnaGlkZScsIG9uT2ZmLCBvbk9mZiAmJiBzdWJzY3JpYmUoc3ViMCksIG9uT2ZmICYmIHN1YnNjcmliZShzdWIwLCBudW1iZXJGdW4pLCBvbk9mZiAmJiBzdWJzY3JpYmUoc3ViMCwgbnVtYmVyVGFnKSwgc3Vic2NyaWJlKHN1YjEsIG51bWJlclRhZyksIHN1YnNjcmliZShvYiwgbnVtYmVyVGFnKSwgc3Vic2NyaWJlKG9iLnBpcGUoc3RhcnRXaXRoKDMzKSksIG51bWJlclRhZyksIHN1YnNjcmliZShvYi5waXBlKHN0YXJ0V2l0aCh1bmRlZmluZWQpKSwgKHgpID0+IG51bWJlclRhZyh4KSksIHN1YnNjcmliZShvYiwgKHgpID0+IG51bWJlclRhZyh4KSkpO1xufSk7XG5jb25zdCBudW1iZXJGdW4gPSAoeCkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMzQwNjk3WzE1XSwgeCk7XG59O1xuY29uc3QgbnVtYmVyVGFnID0gdGFnKCh4KSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbMTZdLCB4KTtcbn0pO1xuY29uc3QgaW5uZXJIdG1sVGFnID0gdGFnKCgpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTM0MDY5N1sxN10pO1xufSk7XG5jb25zdCB0ZXN0SG9zdCA9IHRhZygoKSA9PiB7XG4gICAgbGV0IGhpZGVTaG93ID0gdHJ1ZTtcbiAgICBsZXQgZGVzdHJveUNvdW50ID0gMDtcbiAgICBsZXQgY2xpY2tDb3VudGVyID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgICAgICBoaWRlU2hvdywgZGVzdHJveUNvdW50LCBjbGlja0NvdW50ZXIsXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgaGlkZVNob3csIGRlc3Ryb3lDb3VudCwgY2xpY2tDb3VudGVyLFxuICAgIH0pKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTM0MDY5N1sxOF0sIGhpZGVTaG93ICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEzNDA2OTdbMTldLCBob3N0KGVsZW1lbnQgPT4gZWxlbWVudC5pbm5lckhUTUwgPSBEYXRlLm5vdygpLnRvU3RyaW5nKCksIHtcbiAgICAgICAgb25EZXN0cm95OiAoKSA9PiArK2Rlc3Ryb3lDb3VudCxcbiAgICB9KSwgKCkgPT4gKytjbGlja0NvdW50ZXIsIGNsaWNrQ291bnRlciksICgpID0+IGhpZGVTaG93ID0gIWhpZGVTaG93LCBkZXN0cm95Q291bnQpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTM0MDY5NzogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW3sgXCJ0YWdKc1ZhclwiOiAwIH1dLCBbXCJzdHlsZS5ib3JkZXJcIiwgXCIxcHggc29saWQgb3JhbmdlXCIsIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwib3V0ZXItaHRtbC1meC10ZXN0XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV0sIFtcInN0eWxlLmJvcmRlclwiLCBcIjFweCBzb2xpZCBvcmFuZ2VcIiwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgW1wiYm9yZGVyLXdpZHRoOlwiLCBcIjp0YWd2YXIwOlwiLCBcInB4O2JvcmRlci1jb2xvcjpcIiwgXCI6dGFndmFyMTpcIiwgXCI7Ym9yZGVyLXN0eWxlOnNvbGlkO1wiXV0sIFtcImlkXCIsIFwiZHluYW1pYy1ib3JkZXItZWxlbWVudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImJvcmRlcldpZHRoOlwiIH0sIHsgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZHluYW1pYy1ib3JkZXItd2lkdGhcIl0sIFtcInR5cGVcIiwgXCJyYW5nZVwiXSwgW1wibWluXCIsIFwiMFwiXSwgW1wibWF4XCIsIFwiMTBcIl0sIFtcInN0ZXBcIiwgXCIxXCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgLSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInB4XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImJvcmRlckNvbG9yOlwiIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImR5bmFtaWMtYm9yZGVyLWNvbG9yXCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW3sgXCJ0YWdKc1ZhclwiOiA3IH1dLCBbXCJ2YWx1ZVwiLCBcIlwiXV0gfSwgeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1t7IFwidGFnSnNWYXJcIjogOCB9XSwgW1widmFsdWVcIiwgXCJibGFja1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImJsYWNrXCIgfV0gfSwgeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1t7IFwidGFnSnNWYXJcIjogOSB9XSwgW1widmFsdWVcIiwgXCJibHVlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYmx1ZVwiIH1dIH0sIHsgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbeyBcInRhZ0pzVmFyXCI6IDEwIH1dLCBbXCJ2YWx1ZVwiLCBcIndoaXRlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid2hpdGVcIiB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIGluc2lkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIHZzMFwiIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBjb250ZW50LWRlYnVnLXRlc3RpbmcgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwaXBlZCBzdWJqZWN0IGNsaWNrIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwaXBlLWNvdW50ZXItY2xpY2stZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmNyZWFzZSBvdXRzaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoaWRlIHNob3dcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXRvZ2dsZS1meFwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2dnbGUgaGlkZXNob3cgZnhcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWRkZWQ6IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWZ4LWFkZGVkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDtcXG4gICAgICAgICAgcmVtb3ZlZDogXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtZngtcmVtb3ZlZFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGFnZ2VyQnk6XCIgfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcInJhbmdlXCJdLCBbXCJtaW5cIiwgXCIxMFwiXSwgW1wibWF4XCIsIFwiMzAwXCJdLCBbXCJzdGVwXCIsIFwiMVwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMSB9LCBudWxsXV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMiB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiRHVtcCBDb250ZW50XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTQgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJub1BhcmVudFRhZ0ZpZWxkc2V0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIk5vIFBhcmVudCBUZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTUgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJub1BhcmVudFRhZ0ZpZWxkc2V0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlBhc3Mgc3Vic2NyaXB0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTYgfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJub1BhcmVudHNUZXN0Mi1zdGFydFwiXV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTcgfSwgeyBcIm5uXCI6IFwiaHJcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJub1BhcmVudHNUZXN0Mi1lbmRcIl1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmplY3Rpb24gdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdGlvbi10ZXN0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5qZWN0aW9uIHRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTggfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaGVsbG8tYmlnLWRvbS13b3JsZFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhlbGxvIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiB3b3JsZFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhlbGxvLWJpZy1zdHJpbmctd29ybGRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoZWxsbyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgd29ybGRcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGFndmFyIGluamVjdGlvblwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3QtdGFndmFyLTBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImIzU4O3RhZ3ZhcjAmIzU4O1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIj09PVwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdC1yZWFkLXRhZ3Zhci0wXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOnRhZ3ZhJiN4NzI7MDpcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3QtdGFndmFyLTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImIzU4O3RhZ3ZhcngweCYjNTg7XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPT09XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0LXJlYWQtdGFndmFyLTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6dGFndmFyeDB4OlwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdC10YWd2YXItMlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiYjNTg7dGFndmFyMCYjNTg7XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPT09XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0LXJlYWQtdGFndmFyLTJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6dGFndmEmI3g3MjswOlwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN0eWxlLXNpbXBsZS1ib3JkZXItb3JhbmdlXCJdLCBbXCJzdHlsZS5ib3JkZXJcIiwgXCIzcHggc29saWQgb3JhbmdlXCIsIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzaW1wbGUgb3JhbmdlIGJvcmRlclwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN0eWxlLXZhci1ib3JkZXItb3JhbmdlXCJdLCBbXCJzdHlsZS5ib3JkZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDIxIH0sIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ2YXIgb3JhbmdlIGJvcmRlclwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzdHlsZS10b2dnbGUtYm9yZGVyLW9yYW5nZVwiXSwgW1wic3R5bGUuYm9yZGVyXCIsIHsgXCJ0YWdKc1ZhclwiOiAyMiB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidG9nZ2xlIG9yYW5nZSBib3JkZXJcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtYm9yZGVyLW9yYW5nZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwib3JhbmdlIHRvZ2dsZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyNCB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3R5bGUtdG9nZ2xlLWJvbGRcIl0sIFt7IFwidGFnSnNWYXJcIjogMjUgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2dnbGUgb3JhbmdlIGJvcmRlclwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRvZ2dsZS1ib2xkXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMjYgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJib2xkIHRvZ2dsZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyNyB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJoZWxsby1zcGFjaW5nLWRvbS13b3JsZFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyOSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgd29ybGRzXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW07Zm9udC1zaXplOjAuOGVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiemVybyB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC4wIFlvdSBzaG91bGQgc2VlIFxcXCIwXFxcIiBoZXJlID0+IFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb29mIHlvdSBjYW5ub3Qgc2VlIGZhbHNlIHZhbHVlcyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJmYWxzZSB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC4xIFlvdSBzaG91bGQgc2VlIFxcXCJcXFwiIGhlcmUgPT4gXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJudWxsIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjIgWW91IHNob3VsZCBzZWUgXFxcIlxcXCIgaGVyZSA9PiBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInVuZGVmaW5lZCB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC4zIFlvdSBzaG91bGQgc2VlIFxcXCJcXFwiIGhlcmUgPT4gXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvb2YgeW91IGNhbiBzZWUgdHJ1ZSBib29sZWFucyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0cnVlIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjQgWW91IHNob3VsZCBzZWUgXFxcInRydWVcXFwiIGhlcmUgPT4gXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvb2YgeW91IGNhbiB0cnkgdG8gdXNlIHRoZSB0YWdWYXIgc3ludGF4IC0tPlwiIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC41IFlvdSBzaG91bGQgc2VlIFxcXCJ7MjJ9XFxcIiBoZXJlID0+IFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIyMlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM2IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuNiBZb3Ugc2hvdWxkIHNlZSBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiX190YWdWYXIwXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzggfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIiBoZXJlID0+IFxcXCJ7X190YWdWYXIwfVxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNob3VsZCBiZSBhIHNhZmUgc3RyaW5nIG5vIGh0bWwmbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1kb20tcGFyc2UtMC0wXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIiZsdDtkaXYmZ3Q7aGVsbG8mbHQ7L2RpdiZndDtcXFwiXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7XFxuICAgICAgICBoZXJlID0+Jm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtZG9tLXBhcnNlLTAtMVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzOSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlN1YnNjcmliZSgpXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW07Zm9udC1zaXplOjAuOGVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjAgPT09IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXN1YnNjcmliZS1zdWIwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWJzY3JpYmUgbWFwXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMCA9PT0gXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtc3Vic2NyaWJlLXN1Yi1tYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0MSB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZSBzZWxlY3RcIiB9XSB9LCB7IFwibm5cIjogXCJzZWxlY3RcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIFwiXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic2VsZWN0IG9wdGlvblwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQyIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3Vic2NyaWJlIHdpdGggZGVmYXVsdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjAgPT09IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXN1YnNjcmliZS1zdWIwLXdpdGhcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0MyB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInZhbHVlIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIwID09PSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0NCB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInBpcGVkIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1zdWJqZWN0LXBpcGUtZGlzcGxheTBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI1NVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOz09PSZuYnNwO1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXN1YmplY3QtcGlwZS1kaXNwbGF5MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQ1IH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQ2IH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29tYmluZUxhdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZS1kaXNwbGF5MFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjFcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDs9PT0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGUtZGlzcGxheTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0NyB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbWJpbmVMYXRlc3QgcGlwZWQgaHRtbFwiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZUh0bWwtZGlzcGxheTBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJiXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImJvbGQgNzdcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDs9PT0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGVIdG1sLWRpc3BsYXkxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNDggfV0gfV0gfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNDkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJuYW1lXCIsIFwidGVzdC10aGUtdGVzdGVyXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0ZXN0IHRoZSB0ZXN0ZXIgLSAwXCIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wibmFtZVwiLCBcInRlc3QtdGhlLXRlc3RlclwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGVzdCB0aGUgdGVzdGVyIC0gMVwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcIm5hbWVcIiwgXCJ0ZXN0LXRoZS10ZXN0ZXJcIl0sIFt7IFwidGFnSnNWYXJcIjogMCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRlc3QgdGhlIHRlc3RlciAtIDJcIiB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgdGVzdCB0aGUgdGVzdGVyMlxcbiAgICAgIFwiIH1dLCBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJiaWdcIiB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkYlcIiB9LCB7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GIXCIgfV0sIFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dLCBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJib2xkIDc3XCIgfV0gfV0sIFt7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbnRlbnQxXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29udGVudDJcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb250ZW50M1wiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbnRlbnQ0XCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9XSwgW3sgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3ViLXZhbHVlOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tb3V0cHV0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWluY3JlYXNlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YjAgaW5jcmVhc2VcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLW5leHRcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwib2IgaW5jcmVhc2VcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWhpZGUtc2hvd1wiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoaWRlL3Nob3cgb24vb2ZmID0gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm9uT2ZmVmFsdWU6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItaGlkZVNob3ctdmFsdWVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGVzdCAwXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIwfHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8MFwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGVzdCAxXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIxfHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8MVwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXgyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMnx8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDJcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4M1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjN8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHwzXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI0fHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDRcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4NFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjV8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8NVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXg0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiNnx8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHw2XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI3fHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDdcIiB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInlvdXIgZnVuIG51bWJlciBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwieW91ciB0YWcgbnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lciBodG1sIHRhZ1wiIH1dLCBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJob3N0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJob3N0SGlkZVNob3dcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRlc3Ryb3lDb3VudDogXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhvc3REZXN0cm95Q291bnRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhvc3RlZENvbnRlbnRcIl0sIFt7IFwidGFnSnNWYXJcIjogMCB9XV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY2xpY2tDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBlbG1Db3VudCB9IGZyb20gJy4vdGVzdGluZyc7XG5leHBvcnQgY29uc3QgZnhUaW1lID0gMTYwO1xuZGVzY3JpYmUoJ+KghyBhcnJheSB0ZXN0aW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaWduYWwgYXJyYXkgY291bnQgYW5kIGl0ZW1zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWxBcnJheUNvdW50ID0gYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50Jyk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIC8vIENoZWNrIGluaXRpYWwgYXJyYXkgaXRlbXMgbWF0Y2ggY291bnRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0aWFsQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgZXhwZWN0KGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpfWApKS50b0JlKDEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIG5vIGV4dHJhIGl0ZW1zIGV4aXN0XG4gICAgICAgIGV4cGVjdChlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aW5pdGlhbENvdW50fWApKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCdwdXNoIHNpZ25hbCBhcnJheSBidXR0b24nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbEFycmF5Q291bnQgPSBieUlkKCdzaWduYWwtYXJyYXktY291bnQnKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbENvdW50ID0gTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgY29uc3QgcHVzaEJ0biA9IGJ5SWQoJ3B1c2gtc2lnbmFsLWFycmF5LWJ0bicpO1xuICAgICAgICAvLyBDbGljayBwdXNoIGJ1dHRvblxuICAgICAgICBwdXNoQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGNvdW50IGluY3JlYXNlZFxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChuZXdDb3VudCkudG9CZShpbml0aWFsQ291bnQgKyAxKTtcbiAgICAgICAgLy8gQ2hlY2sgbmV3IGl0ZW0gZXhpc3RzXG4gICAgICAgIGV4cGVjdChlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aW5pdGlhbENvdW50fWApKS50b0JlKDEpO1xuICAgICAgICAvLyBDbGljayBhZ2FpblxuICAgICAgICBwdXNoQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGNvdW50IGluY3JlYXNlZCBhZ2FpblxuICAgICAgICBleHBlY3QoTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KSkudG9CZShpbml0aWFsQ291bnQgKyAyKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpbml0aWFsQ291bnQgKyAxfWApKS50b0JlKDEpO1xuICAgIH0pO1xuICAgIGl0KCdhcnJheXMgY291bnRlciBkaXNwbGF5IG1hdGNoZXMgaXRlbSBjb3VudGVyIGRpc3BsYXlzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudGVyRGlzcGxheSA9IGJ5SWQoJ2FycmF5cy1jb3VudGVyLWRpc3BsYXknKTtcbiAgICAgICAgY29uc3QgY291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgZWFjaCBzaWduYWwgYXJyYXkgaXRlbSBjb3VudGVyIGRpc3BsYXkgbWF0Y2hlcyB0aGUgbWFpbiBjb3VudGVyXG4gICAgICAgIGNvbnN0IHNpZ25hbEFycmF5Q291bnQgPSBieUlkKCdzaWduYWwtYXJyYXktY291bnQnKTtcbiAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db3VudGVyID0gYnlJZChgc2lnbmFsLWFycmF5LWl0ZW0tY291bnRlci1kaXNwbGF5LSR7aX1gKTtcbiAgICAgICAgICAgIGV4cGVjdChpdGVtQ291bnRlcikudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChOdW1iZXIoaXRlbUNvdW50ZXIuaW5uZXJUZXh0KSkudG9CZShjb3VudGVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsaWNrIGEgY291bnRlciBidXR0b24gdG8gaW5jcmVtZW50XG4gICAgICAgIGNvbnN0IGNvdW50ZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lnbmFsLWFycmF5LWluY3JlYXNlLWNvdW50ZXInKTtcbiAgICAgICAgY291bnRlckJ1dHRvbi5jbGljaygpO1xuICAgICAgICAvLyBWZXJpZnkgYWxsIGNvdW50ZXJzIHVwZGF0ZWRcbiAgICAgICAgY29uc3QgbmV3Q291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChuZXdDb3VudGVyVmFsdWUpLnRvQmUoY291bnRlclZhbHVlICsgMSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbUNvdW50ZXIgPSBieUlkKGBzaWduYWwtYXJyYXktaXRlbS1jb3VudGVyLWRpc3BsYXktJHtpfWApO1xuICAgICAgICAgICAgZXhwZWN0KE51bWJlcihpdGVtQ291bnRlci5pbm5lclRleHQpKS50b0JlKG5ld0NvdW50ZXJWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpdCgnc2lnbmFsIGFycmF5IGl0ZW0gZGVsZXRlIGJ1dHRvbiB3aXRoIGFuaW1hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmFsQXJyYXlDb3VudCA9IGJ5SWQoJ3NpZ25hbC1hcnJheS1jb3VudCcpO1xuICAgICAgICBjb25zdCBpbml0aWFsQ291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgaXRlbSB0byBkZWxldGVcbiAgICAgICAgaWYgKGluaXRpYWxDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgYnlJZCgncHVzaC1zaWduYWwtYXJyYXktYnRuJykuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBjb25zdCBpbmRleFRvRGVsZXRlID0gMDtcbiAgICAgICAgLy8gVmVyaWZ5IGl0ZW0gZXhpc3RzIGJlZm9yZSBkZWxldGlvblxuICAgICAgICBleHBlY3QoZWxtQ291bnQoYCNzaWduYWwtYXJyYXktaXRlbS0ke2luZGV4VG9EZWxldGV9YCkpLnRvQmUoMSk7XG4gICAgICAgIC8vIENsaWNrIGRlbGV0ZSBidXR0b25cbiAgICAgICAgY29uc3QgZGVsZXRlQnRuID0gYnlJZChgc2lnbmFsLWFycmF5LWl0ZW0tZGVsZXRlLWJ0bi0ke2luZGV4VG9EZWxldGV9YCk7XG4gICAgICAgIGRlbGV0ZUJ0bi5jbGljaygpO1xuICAgICAgICAvLyBXYWl0IGZvciBhbmltYXRpb24gdG8gY29tcGxldGVcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lKTtcbiAgICAgICAgLy8gQ2hlY2sgY291bnQgZGVjcmVhc2VkXG4gICAgICAgIGV4cGVjdChOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpKS50b0JlKGN1cnJlbnRDb3VudCAtIDEpO1xuICAgICAgICAvLyBDaGVjayBpdGVtIG5vIGxvbmdlciBleGlzdHNcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtjdXJyZW50Q291bnQgLSAxfWApKS50b0JlKDApO1xuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgcmVtYWluaW5nIGl0ZW1zLCBjaGVjayB0aGV5J3ZlIGJlZW4gcmUtaW5kZXhlZFxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSBlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aX1gKTtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudCkudG9CZSgxLCBgRXhwZWN0ZWQgb25seSBvbmUgI3NpZ25hbC1hcnJheS1pdGVtLSR7aX0gYnV0IGdvdCAke2NvdW50fWApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaXQoJ2FycmF5IGJhc2ljcycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjYXJyYXktdGVzdC1wdXNoLWl0ZW0nKSkudG9CZSgxKTtcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpO1xuICAgICAgICBleHBlY3QoYnV0dG9ucy5sZW5ndGgpLnRvQmUoMCk7IC8vIERpZCBub3QgZXhwZWN0IHNjb3JpbmcgYnV0dG9uIDAtMSB0byBiZSBwcmVzZW50XG4gICAgICAgIGNvbnN0IGluc2lkZUNvdW50ID0gZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1pbnNpZGUtYnV0dG9uJyk7XG4gICAgICAgIGV4cGVjdChpbnNpZGVDb3VudCkudG9CZSgwKTtcbiAgICAgICAgLy8gYWRkIHBsYXllciAwXG4gICAgICAgIGJ5SWQoJ2FycmF5LXRlc3QtcHVzaC1pdGVtJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDEsICdzY29yZSBkYXRhIGluc2lkZSBidXR0b24gYmFkJyk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLW91dHNpZGUtYnV0dG9uJykpLnRvQmUoMSwgJ3Njb3JlIGRhdGEgb3V0c2lkZSBidXR0b24gYmFkJyk7XG4gICAgICAgIGNvbnN0IGluc2lkZUVsbSA9IGJ5SWQoJ3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKTtcbiAgICAgICAgY29uc3QgaW5zaWRlRGlzcGxheSA9IGJ5SWQoJ3Njb3JlLWRhdGEtMC0xLWluc2lkZS1kaXNwbGF5Jyk7XG4gICAgICAgIGxldCBpbmRleFZhbHVlID0gaW5zaWRlRGlzcGxheS5pbm5lclRleHQ7XG4gICAgICAgIGNvbnN0IG91dHNpZGVFbG0gPSBieUlkKCdzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpO1xuICAgICAgICBjb25zdCBvdXRzaWRlRGlzcGxheSA9IGJ5SWQoJ3Njb3JlLWRhdGEtMC0xLW91dHNpZGUtZGlzcGxheScpO1xuICAgICAgICBjb25zdCBvdXRzaWRlVmFsdWUgPSBvdXRzaWRlRGlzcGxheS5pbm5lclRleHQ7XG4gICAgICAgIGV4cGVjdChpbmRleFZhbHVlKS50b0JlKG91dHNpZGVWYWx1ZSk7XG4gICAgICAgIC8vIHNjb3JlIGZvciBwbGF5ZXIgMFxuICAgICAgICBpbnNpZGVFbG0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluc2lkZURpc3BsYXkuaW5uZXJUZXh0KS50b0JlKG91dHNpZGVEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChpbnNpZGVEaXNwbGF5KS50b0JlKGJ5SWQoJ3Njb3JlLWRhdGEtMC0xLWluc2lkZS1kaXNwbGF5JykpOyAvLyB0ZXN0IGVsZW1lbnQgI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1kaXNwbGF5IHdhcyBub3QgcmVkcmF3blxuICAgICAgICBleHBlY3QoaW5kZXhWYWx1ZSkudG9CZSgoTnVtYmVyKGluc2lkZURpc3BsYXkuaW5uZXJUZXh0KSAtIDEpLnRvU3RyaW5nKCkpO1xuICAgICAgICBleHBlY3QoaW5kZXhWYWx1ZSkudG9CZSgoTnVtYmVyKG91dHNpZGVEaXNwbGF5LmlubmVyVGV4dCkgLSAxKS50b1N0cmluZygpKTtcbiAgICAgICAgLy8gc2NvcmUgZm9yIHBsYXllciAwXG4gICAgICAgIG91dHNpZGVFbG0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluc2lkZURpc3BsYXkuaW5uZXJUZXh0KS50b0JlKG91dHNpZGVEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChpbmRleFZhbHVlKS50b0JlKChOdW1iZXIoaW5zaWRlRGlzcGxheS5pbm5lclRleHQpIC0gMikudG9TdHJpbmcoKSk7XG4gICAgICAgIGV4cGVjdChpbmRleFZhbHVlKS50b0JlKChOdW1iZXIob3V0c2lkZURpc3BsYXkuaW5uZXJUZXh0KSAtIDIpLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuICAgIGl0KCfwn5eR77iPIGRlbGV0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3BsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tMCcpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNwbGF5ZXItZWRpdC1idG4tMCcpKS50b0JlKDEpO1xuICAgICAgICAvLyBzdGFydCBlZGl0IG1vdmVcbiAgICAgICAgY29uc3QgeCA9IGJ5SWQoJ3BsYXllci1lZGl0LWJ0bi0wJykuX2NsaWNrKCk7XG4gICAgICAgIGV4cGVjdCh4KS50b0JlKCduby1kYXRhLWV2ZXInKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjcGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykpLnRvQmUoMSk7XG4gICAgICAgIC8vIHJlbW92ZSBwbGF5ZXIgMVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBieUlkKCdwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLTAnKS5fY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncHJvbWlzZS1uby1kYXRhLWV2ZXInKTtcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lKTsgLy8gYW5pbWF0aW9uXG4gICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjcGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3BsYXllci1lZGl0LWJ0bi0wJykpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ2FkZCB0aGVuIGRlbGV0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIGFkZCBwbGF5ZXIgMVxuICAgICAgICBieUlkKCdhcnJheS10ZXN0LXB1c2gtaXRlbScpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKSkudG9CZSgxKTtcbiAgICAgICAgLy8gYWRkIHBsYXllciAyXG4gICAgICAgIGJ5SWQoJ2FycmF5LXRlc3QtcHVzaC1pdGVtJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDIpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDIpO1xuICAgICAgICAvLyBlZGl0IHBsYXllciAxXG4gICAgICAgIGJ5SWQoJ3BsYXllci1lZGl0LWJ0bi0wJykuY2xpY2soKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnlJZCgncGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncHJvbWlzZS1uby1kYXRhLWV2ZXInKTtcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lIC0gMTApOyAvLyBhbmltYXRpb25cbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDEpO1xuICAgICAgICAvLyBlZGl0IHdobyBpcyBub3cgcGxheWVyIDEgd2hvIHdhcyBwbGF5ZXIgMlxuICAgICAgICBieUlkKCdwbGF5ZXItZWRpdC1idG4tMCcpLmNsaWNrKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCBieUlkKCdwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLTAnKS5jbGljaygpO1xuICAgICAgICBleHBlY3QocmVzdWx0MikudG9CZSgncHJvbWlzZS1uby1kYXRhLWV2ZXInKTtcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lICsgMjUpOyAvLyBhbmltYXRpb25cbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDApO1xuICAgIH0pO1xufSk7XG5mdW5jdGlvbiBkZWxheSh0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCB0aW1lKSk7XG59XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBjbGljaywgY291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/Cfj7kgc3BlY2lhbCBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgIGl0KCdzdHlsZSBhbmQgY2xhc3MgdGVzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb3VudCgnI2F0dHItaW5wdXQtYWJjJykpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChjb3VudCgnI3RvZ2dsZS1iYWNrZ3JvdW5kcycpKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoYnlJZCgnYXR0ci1zdHlsZS1zdHJpbmdzJykuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWNsYXNzLWJvb2xlYW5zJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWlubGluZS1jbGFzcycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNFbGVtZW50ID0gYnlJZCgnYXR0ci1keW5hbWljLWlubGluZS1jbGFzcycpO1xuICAgICAgICBjb25zdCBkeW5hbWljQ2xhc3NMaXN0ID0gZHluYW1pY0VsZW1lbnQuY2xhc3NMaXN0O1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmR5bmFtaWNDbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKHRydWUpO1xuICAgICAgICBjbGljaygnI3RvZ2dsZS1iYWNrZ3JvdW5kcycpO1xuICAgICAgICBleHBlY3QoYnlJZCgnYXR0ci1zdHlsZS1zdHJpbmdzJykuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCcnKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWNsYXNzLWJvb2xlYW5zJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1pbmxpbmUtY2xhc3MnKS5jbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWR5bmFtaWMtaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZShmYWxzZSk7XG4gICAgICAgIC8vIHB1dCBiYWNrXG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJhY2tncm91bmRzJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdhdHRyLXN0eWxlLXN0cmluZ3MnKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ29yYW5nZScpO1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmJ5SWQoJ2F0dHItY2xhc3MtYm9vbGVhbnMnKS5jbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmJ5SWQoJ2F0dHItaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWR5bmFtaWMtaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgICBpdCgnc3Vic2NyaWJlIGF0dHJpYnV0ZXMgY29sb3JzJywgKCkgPT4ge1xuICAgICAgICAvLyBUZXN0IGluaXRpYWwgYmFja2dyb3VuZCBjb2xvcnNcbiAgICAgICAgY29uc3QgYmdDb2xvckNoYW5nZXIgPSBieUlkKCdzdWJzY3JpYmUtc3R5bGUtZG90LWJnLWNvbG9yLWNoYW5nZXInKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlQmdDb2xvciA9IGJ5SWQoJ3N1YnNjcmliZS1zdHlsZS1iZy1jb2xvcicpO1xuICAgICAgICBjb25zdCBtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3IgPSBieUlkKCdtdWx0aXBsZS1zdWJzY3JpYmUtYmctY29sb3InKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlQ29sb3JCdG4gPSBieUlkKCd0b2dnbGUtY29sb3ItYnRuJyk7XG4gICAgICAgIGNvbnN0IGNsZWFyQ29sb3JCdG4gPSBieUlkKCdjbGVhci1jb2xvci1idG4nKTtcbiAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZSAtIGFsbCBzaG91bGQgYmUgcmVkL3BpbmtcbiAgICAgICAgZXhwZWN0KGJnQ29sb3JDaGFuZ2VyLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncmVkJyk7XG4gICAgICAgIGV4cGVjdChzdWJzY3JpYmVCZ0NvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncmVkJyk7XG4gICAgICAgIGV4cGVjdChtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdwaW5rJyk7XG4gICAgICAgIC8vIFRvZ2dsZSBDb2xvciBidXR0b24gc2hvdWxkIHNob3cgZW1wdHkgaW5pdGlhbGx5XG4gICAgICAgIGV4cGVjdCh0b2dnbGVDb2xvckJ0bi5pbm5lclRleHQpLnRvQmUoJ1RvZ2dsZSBDb2xvciAoKScpO1xuICAgICAgICAvLyBDbGljayBUb2dnbGUgQ29sb3IgLSBzaG91bGQgY2hhbmdlIHRvIHJlZFxuICAgICAgICB0b2dnbGVDb2xvckJ0bi5jbGljaygpO1xuICAgICAgICBleHBlY3QodG9nZ2xlQ29sb3JCdG4uaW5uZXJUZXh0KS50b0JlKCdUb2dnbGUgQ29sb3IgKHJlZCknKTtcbiAgICAgICAgLy8gQ29sb3JzIHNob3VsZCBiZSByZWQvcmVkL2dyZWVuIGFmdGVyIGZpcnN0IHRvZ2dsZVxuICAgICAgICBleHBlY3QoYmdDb2xvckNoYW5nZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICAgICAgZXhwZWN0KHN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICAgICAgZXhwZWN0KG11bHRpcGxlU3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2dyZWVuJyk7XG4gICAgICAgIC8vIENsaWNrIFRvZ2dsZSBDb2xvciBhZ2FpbiAtIHNob3VsZCBjaGFuZ2UgdG8gYmx1ZVxuICAgICAgICB0b2dnbGVDb2xvckJ0bi5jbGljaygpO1xuICAgICAgICBleHBlY3QodG9nZ2xlQ29sb3JCdG4uaW5uZXJUZXh0KS50b0JlKCdUb2dnbGUgQ29sb3IgKGJsdWUpJyk7XG4gICAgICAgIC8vIENvbG9ycyBzaG91bGQgYmUgYmx1ZS9ibHVlL3B1cnBsZSBhZnRlciBzZWNvbmQgdG9nZ2xlXG4gICAgICAgIGV4cGVjdChiZ0NvbG9yQ2hhbmdlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2JsdWUnKTtcbiAgICAgICAgZXhwZWN0KHN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdibHVlJyk7XG4gICAgICAgIGV4cGVjdChtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdwdXJwbGUnKTtcbiAgICAgICAgLy8gQ2xpY2sgQ2xlYXIgQ29sb3IgYnV0dG9uXG4gICAgICAgIGNsZWFyQ29sb3JCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ29sb3JzIHNob3VsZCBiZSBlbXB0eS9lbXB0eS9waW5rIGFmdGVyIGNsZWFyXG4gICAgICAgIGV4cGVjdChiZ0NvbG9yQ2hhbmdlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJycpO1xuICAgICAgICBleHBlY3Qoc3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJycpO1xuICAgICAgICBleHBlY3QobXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncGluaycpO1xuICAgIH0pO1xuICAgIGl0KCdoaWRlL3Nob3cgYXR0cmlidXRlcyBhZmZlY3RzIHN1YnNjcmlwdGlvbiBjb3VudCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9nZ2xlQXR0cmlidXRlc0J0biA9IGJ5SWQoJ3RvZ2dsZS1hdHRyaWJ1dGVzLWJ0bicpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zQ291bnQgPSBieUlkKCdzdWJzY3JpcHRpb25zLWNvdW50Jyk7XG4gICAgICAgIC8vIEdldCBpbml0aWFsIHN1YnNjcmlwdGlvbiBjb3VudFxuICAgICAgICBjb25zdCBpbml0aWFsQ291bnQgPSBOdW1iZXIoc3Vic2NyaXB0aW9uc0NvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIC8vIENoZWNrIGJ1dHRvbiBpbml0aWFsbHkgc2F5cyBcIkhpZGUgQXR0cmlidXRlc1wiXG4gICAgICAgIGV4cGVjdCh0b2dnbGVBdHRyaWJ1dGVzQnRuLmlubmVyVGV4dCkudG9CZSgnSGlkZSBBdHRyaWJ1dGVzJyk7XG4gICAgICAgIC8vIENsaWNrIEhpZGUgQXR0cmlidXRlc1xuICAgICAgICB0b2dnbGVBdHRyaWJ1dGVzQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGJ1dHRvbiBub3cgc2F5cyBcIlNob3cgQXR0cmlidXRlc1wiXG4gICAgICAgIGV4cGVjdCh0b2dnbGVBdHRyaWJ1dGVzQnRuLmlubmVyVGV4dCkudG9CZSgnU2hvdyBBdHRyaWJ1dGVzJyk7XG4gICAgICAgIC8vIENoZWNrIHN1YnNjcmlwdGlvbnMgZGVjcmVhc2VkIGJ5IDJcbiAgICAgICAgY29uc3QgYWZ0ZXJIaWRlQ291bnQgPSBOdW1iZXIoc3Vic2NyaXB0aW9uc0NvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChhZnRlckhpZGVDb3VudCkudG9CZShpbml0aWFsQ291bnQgLSAyKTtcbiAgICAgICAgLy8gQ2xpY2sgU2hvdyBBdHRyaWJ1dGVzXG4gICAgICAgIHRvZ2dsZUF0dHJpYnV0ZXNCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgYnV0dG9uIG5vdyBzYXlzIFwiSGlkZSBBdHRyaWJ1dGVzXCIgYWdhaW5cbiAgICAgICAgZXhwZWN0KHRvZ2dsZUF0dHJpYnV0ZXNCdG4uaW5uZXJUZXh0KS50b0JlKCdIaWRlIEF0dHJpYnV0ZXMnKTtcbiAgICAgICAgLy8gQ2hlY2sgc3Vic2NyaXB0aW9ucyBpbmNyZWFzZWQgYnkgMiAoYmFjayB0byBvcmlnaW5hbClcbiAgICAgICAgY29uc3QgYWZ0ZXJTaG93Q291bnQgPSBOdW1iZXIoc3Vic2NyaXB0aW9uc0NvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChhZnRlclNob3dDb3VudCkudG9CZShpbml0aWFsQ291bnQpO1xuICAgIH0pO1xuICAgIGl0KCdzdHlsZSBvYmplY3QgY29udmVydHMgdG8gaW5kaXZpZHVhbCBDU1MgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3R5bGVPYmplY3RUZXN0ID0gYnlJZCgnc3R5bGUtb2JqZWN0LXRlc3QnKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlQnRuID0gYnlJZCgndG9nZ2xlLWJhY2tncm91bmRzJyk7XG4gICAgICAgIC8vIEluaXRpYWwgc3RhdGUgLSBjaGVja2JveCBpcyBjaGVja2VkIChpc09yYW5nZSA9IHRydWUpXG4gICAgICAgIGV4cGVjdCh0b2dnbGVCdG4uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBzdHlsZSBvYmplY3QgaXMgY29udmVydGVkIHRvIGluZGl2aWR1YWwgaW5saW5lIHN0eWxlIHByb3BlcnRpZXNcbiAgICAgICAgLy8gVGhlIGtleSB0ZXN0IGlzIHRoYXQgdGhlIG9iamVjdCBzeW50YXggd2FzIGNvbnZlcnRlZCB0byBpbmRpdmlkdWFsIENTUyBwcm9wZXJ0aWVzXG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5wYWRkaW5nKS50b0JlKCcxMHB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm9yZGVyKS50b0JlKCcycHggc29saWQgYmxhY2snKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3JkZXJSYWRpdXMpLnRvQmUoJzhweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJveFNoYWRvdykudG9CZSgncmdiYSgwLCAwLCAwLCAwLjMpIDJweCAycHggNHB4Jyk7XG4gICAgICAgIC8vIFRvZ2dsZSBjaGVja2JveCBvZmZcbiAgICAgICAgdG9nZ2xlQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIHN0eWxlcyBjaGFuZ2VkXG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdsaWdodGdyYXknKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5wYWRkaW5nKS50b0JlKCcxMHB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm9yZGVyKS50b0JlKCcycHggc29saWQgYmxhY2snKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3JkZXJSYWRpdXMpLnRvQmUoJzRweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJveFNoYWRvdykudG9CZSgnbm9uZScpO1xuICAgICAgICAvLyBUb2dnbGUgYmFjayBvblxuICAgICAgICB0b2dnbGVCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgc3R5bGVzIHJldmVydGVkXG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3JkZXJSYWRpdXMpLnRvQmUoJzhweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJveFNoYWRvdykudG9CZSgncmdiYSgwLCAwLCAwLCAwLjMpIDJweCAycHggNHB4Jyk7XG4gICAgfSk7XG4gICAgaXQoJ3N0eWxlIG9iamVjdCB3aXRoIGtlYmFiLWNhc2UgcHJvcGVydGllcyB1c2VzIHNldFByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHlsZVByb3BlcnR5VGVzdCA9IGJ5SWQoJ3N0eWxlLXNldC1wcm9wZXJ0eS10ZXN0Jyk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUJ0biA9IGJ5SWQoJ3RvZ2dsZS1iYWNrZ3JvdW5kcycpO1xuICAgICAgICAvLyBJbml0aWFsIHN0YXRlIC0gY2hlY2tib3ggaXMgY2hlY2tlZCAoaXNPcmFuZ2UgPSB0cnVlKVxuICAgICAgICBleHBlY3QodG9nZ2xlQnRuLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIC8vIENoZWNrIHRoYXQga2ViYWItY2FzZSBwcm9wZXJ0aWVzIGFyZSBzZXQgY29ycmVjdGx5IHVzaW5nIHNldFByb3BlcnR5XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3JlZCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUuY29sb3IpLnRvQmUoJ3doaXRlJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5wYWRkaW5nKS50b0JlKCc1cHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLm1hcmdpblRvcCkudG9CZSgnMTBweCcpO1xuICAgICAgICAvLyBUb2dnbGUgY2hlY2tib3ggb2ZmXG4gICAgICAgIHRvZ2dsZUJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBzdHlsZXMgY2hhbmdlZFxuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdibHVlJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5jb2xvcikudG9CZSgnd2hpdGUnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLnBhZGRpbmcpLnRvQmUoJzVweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUubWFyZ2luVG9wKS50b0JlKCcxMHB4Jyk7XG4gICAgICAgIC8vIFRvZ2dsZSBiYWNrIG9uXG4gICAgICAgIHRvZ2dsZUJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBzdHlsZXMgcmV2ZXJ0ZWRcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncmVkJyk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCB9IGZyb20gJy4vdGVzdGluZyc7XG5pdCgnZWxlbWVudHMgZXhpc3RzJywgKCkgPT4ge1xuICAgIGV4cGVjdChieUlkKCdoMS1hcHAnKSkudG9CZURlZmluZWQoKTtcbiAgICBjb25zdCB0b2dnbGVUZXN0ID0gYnlJZCgndG9nZ2xlLXRlc3QnKTtcbiAgICBleHBlY3QodG9nZ2xlVGVzdCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodG9nZ2xlVGVzdC5pbm5lclRleHQpLnRvQmUoJ3RvZ2dsZSB0ZXN0Jyk7XG59KTtcbml0KCd0b2dnbGUgdGVzdCcsICgpID0+IHtcbiAgICBjb25zdCB0b2dnbGVUZXN0ID0gYnlJZCgndG9nZ2xlLXRlc3QnKTtcbiAgICBleHBlY3QodG9nZ2xlVGVzdC5pbm5lclRleHQpLnRvQmUoJ3RvZ2dsZSB0ZXN0Jyk7XG4gICAgdG9nZ2xlVGVzdC5jbGljaygpO1xuICAgIC8vIGFmdGVyIGNsaWNrIG5vdyB0cnVlXG4gICAgZXhwZWN0KHRvZ2dsZVRlc3QuaW5uZXJUZXh0KS50b0JlKCd0b2dnbGUgdGVzdCB0cnVlJyk7XG4gICAgdG9nZ2xlVGVzdC5jbGljaygpO1xuICAgIC8vIGFmdGVyIGNsaWNrIG5vdyBmYWxzZVxuICAgIGV4cGVjdCh0b2dnbGVUZXN0LmlubmVyVGV4dCkudG9CZSgndG9nZ2xlIHRlc3QnKTtcbiAgICBjb25zdCBwcm9wc1RleHRhcmVhID0gYnlJZCgncHJvcHMtZGVidWctdGV4dGFyZWEnKTtcbiAgICBleHBlY3QocHJvcHNUZXh0YXJlYS52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpKS50b0JlKGB7XCJ0ZXN0XCI6MzMsXCJ4XCI6XCJ5XCJ9YCk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyB0ZXN0Q291bnRlckVsZW1lbnRzLCB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn8J+RtiDwn5GnY2hpbGQgdGVzdHMnLCAoKSA9PiB7XG4gICAgaXQoJ2NoaWxkIHRlc3RzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjaW5uZXJIdG1sUHJvcHNUZXN0LWJ1dHRvbicsICcjaW5uZXJIdG1sUHJvcHNUZXN0LWRpc3BsYXknKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2lubmVySHRtbFRlc3QtY291bnRlci1idXR0b24nLCAnI2lubmVySHRtbFRlc3QtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgfSk7XG4gICAgaXQoJ2EnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2NoaWxkVGVzdHMtYnV0dG9uJywgJyNjaGlsZFRlc3RzLWRpc3BsYXknXSwgWycjaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWJ1dHRvbicsICcjaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXknXSk7XG4gICAgfSk7XG4gICAgaXQoJ2InLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2NoaWxkVGVzdHMtYnV0dG9uJywgJyNjaGlsZFRlc3RzLWRpc3BsYXknXSwgWycjY2hpbGQtYXMtcHJvcC10ZXN0LWJ1dHRvbicsICcjY2hpbGQtYXMtcHJvcC10ZXN0LWRpc3BsYXknXSk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNpbm5lckh0bWxQcm9wc1Rlc3QtY2hpbGRUZXN0cy1idXR0b24nLCAnI2lubmVySHRtbFByb3BzVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXknKTtcbiAgICB9KTtcbiAgICBpdCgnYycsICgpID0+IHtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjY2hpbGRUZXN0cy1idXR0b24nLCAnI2NoaWxkVGVzdHMtZGlzcGxheSddLCBbJyNpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtYnV0dG9uLWMnLCAnI2lubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1kaXNwbGF5LWMnXSk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHRlc3RTdGFnZ2VyQnkgfSBmcm9tIFwiLi9Db250ZW50RGVidWcudGFnXCI7XG5pbXBvcnQgeyBieUlkLCBjbGljaywgaHRtbCwgcXVlcnksIGh0bWxCeUlkLCBjaGFuZ2VPbmUsIHRleHRDb250ZW50LCBjbGlja0J5SWQsIGNvdW50IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGV4cGVjdE1hdGNoZWRIdG1sLCBzbGVlcCB9IGZyb20gJy4vdGVzdGluZyc7XG5jb25zb2xlLmxvZygn8J+ThCBjb250ZW50LnRlc3QudHM6IExvYWRpbmcuLi4gd2luZG93LmRlc2NyaWJlIGF2YWlsYWJsZT8nLCB0eXBlb2Ygd2luZG93LmRlc2NyaWJlKTtcbmxldCBydW5zID0gMDtcbi8vIEhlbHBlciBmdW5jdGlvbiB0byB3YWl0IGZvciBhbmltYXRpb25zIHRvIGNvbXBsZXRlXG5hc3luYyBmdW5jdGlvbiB3YWl0Rm9yQW5pbWF0aW9uc1RvQ29tcGxldGUoc2VsZWN0b3IsIGV4cGVjdGVkQ291bnQsIG1heFdhaXQgPSA1MDAwKSB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IG1heFdhaXQpIHtcbiAgICAgICAgY29uc3QgYW5pbWF0aW5nQ291bnQgPSBjb3VudChgLmFuaW1hdGVfX2FuaW1hdGVkJHtzZWxlY3Rvcn1gKTtcbiAgICAgICAgaWYgKGFuaW1hdGluZ0NvdW50ID09PSBleHBlY3RlZENvdW50KSB7XG4gICAgICAgICAgICAvLyBXYWl0IGEgYml0IG1vcmUgdG8gZW5zdXJlIHRoZSBhbmltYXRpb24gc3RhdGUgaGFzIHN0YWJpbGl6ZWRcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDUwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHNsZWVwKDEwKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaW1lb3V0IHdhaXRpbmcgZm9yIGFuaW1hdGlvbnMgdG8gY29tcGxldGUuIEV4cGVjdGVkICR7ZXhwZWN0ZWRDb3VudH0gYW5pbWF0aW5nIGVsZW1lbnRzIG1hdGNoaW5nICcuYW5pbWF0ZV9fYW5pbWF0ZWQke3NlbGVjdG9yfScsIGJ1dCBmb3VuZCAke2NvdW50KGAuYW5pbWF0ZV9fYW5pbWF0ZWQke3NlbGVjdG9yfWApfWApO1xufVxuLy8gSGVscGVyIHRvIHdhaXQgZm9yIGVsZW1lbnRzIHRvIGFwcGVhci9kaXNhcHBlYXJcbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JFbGVtZW50Q291bnQoc2VsZWN0b3IsIGV4cGVjdGVkQ291bnQsIG1heFdhaXQgPSA1MDAwKSB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IG1heFdhaXQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ID0gY291bnQoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoY3VycmVudENvdW50ID09PSBleHBlY3RlZENvdW50KSB7XG4gICAgICAgICAgICBhd2FpdCBzbGVlcCg1MCk7IC8vIFNtYWxsIGRlbGF5IHRvIGVuc3VyZSBzdGFiaWxpdHlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHNsZWVwKDEwKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaW1lb3V0IHdhaXRpbmcgZm9yIGVsZW1lbnQgY291bnQuIEV4cGVjdGVkICR7ZXhwZWN0ZWRDb3VudH0gZWxlbWVudHMgbWF0Y2hpbmcgJyR7c2VsZWN0b3J9JywgYnV0IGZvdW5kICR7Y291bnQoc2VsZWN0b3IpfWApO1xufVxuZGVzY3JpYmUoJ/Cfk7AgY29udGVudCcsICgpID0+IHtcbiAgICBpdCgnYmFzaWMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjY29udGVudC1zdWJqZWN0LXBpcGUtZGlzcGxheTAnLCAnI2NvbnRlbnQtc3ViamVjdC1waXBlLWRpc3BsYXkxJyk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGUtZGlzcGxheTAnLCAnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlLWRpc3BsYXkxJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcjY29udGVudC1kb20tcGFyc2UtMC0wJykpLnRvQmUoaHRtbCgnI2NvbnRlbnQtZG9tLXBhcnNlLTAtMScpKTtcbiAgICB9KTtcbiAgICBpdCgnaHRtbCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZUh0bWwtZGlzcGxheTAnLCAnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlSHRtbC1kaXNwbGF5MScpO1xuICAgIH0pO1xuICAgIGl0KCdzcGFjaW5nJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoaHRtbCgnI2hlbGxvLWJpZy1kb20td29ybGQnKSkudG9CZSgnaGVsbG8gPGI+YmlnPC9iPiB3b3JsZCcpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI2hlbGxvLWJpZy1zdHJpbmctd29ybGQnKSkudG9CZSgnaGVsbG8gPGI+YmlnPC9iPiB3b3JsZCcpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI2hlbGxvLXNwYWNpbmctZG9tLXdvcmxkJykpLnRvQmUoJzU0IGhlbGxvIHdvcmxkcycpO1xuICAgIH0pO1xuICAgIGl0KCdzdHlsZS4nLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXNpbXBsZS1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXZhci1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXRvZ2dsZS1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKVswXS5zdHlsZS5ib3JkZXIpLnRvQmUoJzNweCBzb2xpZCBncmVlbicpO1xuICAgICAgICBjbGljaygnI3RvZ2dsZS1ib3JkZXItb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXRvZ2dsZS1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgfSk7XG4gICAgaXQoJ3N0eWxlIHNldCBhcyBvYmplY3QnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXRvZ2dsZS1ib2xkJylbMF0uc3R5bGUuZm9udFdlaWdodCkudG9CZSgnJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvbGQnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvbGQnKVswXS5zdHlsZS5mb250V2VpZ2h0KS50b0JlKCdib2xkJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvbGQnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvbGQnKVswXS5zdHlsZS5mb250V2VpZ2h0KS50b0JlKCcnKTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnbm8gcGFyZW50IGVsZW1lbnQgdGVzdHMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdubyBpbW1lZGlhdGUgcGFyZW50JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub1BhcmVudFRhZ0ZpZWxkc2V0Jyk7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudD8uaW5uZXJUZXh0KS50b0JlKCdObyBQYXJlbnQgVGVzdFxcbmNvbnRlbnQxXFxudGVzdDBcXG5jb250ZW50MlxcbnRlc3QxXFxuY29udGVudDNcXG50ZXN0M1xcbmNvbnRlbnQ0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnbXVsdGlwbGUgbm8gcGFyZW50IC0gZW5zdXJlIGR5bmFtaWMgY29udGVudCByZW5kZXJlZCBpbiBvcmRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm9QYXJlbnRUYWdGaWVsZHNldCcpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9IHBhcmVudC5pbm5lckhUTUwucmVwbGFjZSgvKF4oLnxcXG4pKzxociBpZD1cIm5vUGFyZW50c1Rlc3QyLXN0YXJ0XCI+fCkvZywgJycpLnJlcGxhY2UoLzxociBpZD1cIm5vUGFyZW50c1Rlc3QyLWVuZFwiPigufFxcbikqL2csICcnKS50cmltKCk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCkudG9CZSgnPGhyPmNvbnRlbnQxPGhyPnRlc3QwPGhyPmNvbnRlbnQyPGhyPnRlc3QxPGhyPmNvbnRlbnQzPGhyPnRlc3QzPGhyPmNvbnRlbnQ0PGhyPicpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc3Vic2NyaWJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAocnVucyA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4o+t77iPIHNraXBwZWQgdGVzdCB0aGF0IG9ubHkgcGFzc2VzIHRoZSBmaXJzdCB0aW1lJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdjb250ZW50LXN1YnNjcmliZS1zdWIwJykpLnRvQmUoJycpO1xuICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ2NvbnRlbnQtc3Vic2NyaWJlLXN1YjAtd2l0aCcpKS50b0JlKCctMScpO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdwYXNzZWQgaW4gc3Vic2NyaXB0aW9uJywgKCkgPT4ge1xuICAgICAgICBpdCgnaW5jcmVhc2Ugc3Vic2NyaXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5jcmVhc2UgPSBieUlkKCdwYXNzZWQtaW4tc3ViLWluY3JlYXNlJyk7XG4gICAgICAgICAgICBjb25zdCBoaWRlU2hvdyA9IGJ5SWQoJ3Bhc3NlZC1pbi1zdWItaGlkZS1zaG93Jyk7XG4gICAgICAgICAgICBjb25zdCBoaWRlU2hvd1ZhbHVlID0gYnlJZCgncGFzc2VkLWluLXN1Yi1oaWRlU2hvdy12YWx1ZScpO1xuICAgICAgICAgICAgZXhwZWN0KGhpZGVTaG93VmFsdWUudGV4dENvbnRlbnQpLnRvQmUoJycpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKCcwfHx8fDAnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKSkudG9CZSgnMXx8fHwxJywgJ2ZhaWxlZCBiZWZvcmUgaW5jcmVhc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDInKSkudG9CZSgnMnx8fHwyJyk7XG4gICAgICAgICAgICBpbmNyZWFzZS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKGAwfHx8fDBgKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKSkudG9CZSgnMXx8fHwxJywgJ2ZhaWxlZCBmaXJzdCBpbmNyZWFzZScpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MicpKS50b0JlKCcyfHx8fDInKTtcbiAgICAgICAgICAgIGhpZGVTaG93LmNsaWNrKCk7IC8vIGhpZGVcbiAgICAgICAgICAgIGxldCBzdWJWYWx1ZSA9IGh0bWxCeUlkKCdwYXNzZWQtaW4tb3V0cHV0Jyk7XG4gICAgICAgICAgICBleHBlY3QoaGlkZVNob3dWYWx1ZS50ZXh0Q29udGVudCkudG9CZSgndHJ1ZScpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKGAwfHx8fDBgKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKSkudG9CZShgMXx8eW91ciBmdW4gbnVtYmVyICR7c3ViVmFsdWV9fHwxYCwgJ2ZhaWxlZCBhZnRlciBoaWRlJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgyJykpLnRvQmUoYDJ8fHlvdXIgdGFnIG51bWJlciAke3N1YlZhbHVlfXx8MmApO1xuICAgICAgICAgICAgaW5jcmVhc2UuY2xpY2soKTsgLy8gc2hvd1xuICAgICAgICAgICAgc3ViVmFsdWUgPSBodG1sQnlJZCgncGFzc2VkLWluLW91dHB1dCcpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKGAwfHwke3N1YlZhbHVlfXx8MGApO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MScpKS50b0JlKGAxfHx5b3VyIGZ1biBudW1iZXIgJHtzdWJWYWx1ZX18fDFgLCAnZmFpbGVkIHRoaXJkIGluY3JlYXNlJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgyJykpLnRvQmUoYDJ8fHlvdXIgdGFnIG51bWJlciAke3N1YlZhbHVlfXx8MmApO1xuICAgICAgICAgICAgaGlkZVNob3cuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDAnKSkudG9CZSgnMHx8fHwwJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgxJykpLnRvQmUoJzF8fHx8MScsICdmYWlsZWQgY2xvc2luZycpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MicpKS50b0JlKCcyfHx8fDInKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ2luY3JlYXNlIHJ1bnMnLCAoKSA9PiB7XG4gICAgICAgICsrcnVucztcbiAgICB9KTtcbiAgICBpdCgnY29uY2F0IHN0eWxlJywgKCkgPT4ge1xuICAgICAgICBieUlkKCdkeW5hbWljLWJvcmRlci13aWR0aCcpLnZhbHVlID0gMjtcbiAgICAgICAgYnlJZCgnZHluYW1pYy1ib3JkZXItY29sb3InKS52YWx1ZSA9ICd3aGl0ZSc7XG4gICAgICAgIGNoYW5nZU9uZSgnI2R5bmFtaWMtYm9yZGVyLXdpZHRoJyk7XG4gICAgICAgIGNoYW5nZU9uZSgnI2R5bmFtaWMtYm9yZGVyLWNvbG9yJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdkeW5hbWljLWJvcmRlci1lbGVtZW50Jykuc3R5bGUuYm9yZGVyQ29sb3IpLnRvQmUoJ3doaXRlJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdkeW5hbWljLWJvcmRlci1lbGVtZW50Jykuc3R5bGUuYm9yZGVyV2lkdGgpLnRvQmUoJzJweCcpO1xuICAgICAgICBieUlkKCdkeW5hbWljLWJvcmRlci13aWR0aCcpLnZhbHVlID0gMTtcbiAgICAgICAgYnlJZCgnZHluYW1pYy1ib3JkZXItY29sb3InKS52YWx1ZSA9ICdibHVlJztcbiAgICAgICAgY2hhbmdlT25lKCcjZHluYW1pYy1ib3JkZXItd2lkdGgnKTtcbiAgICAgICAgY2hhbmdlT25lKCcjZHluYW1pYy1ib3JkZXItY29sb3InKTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2R5bmFtaWMtYm9yZGVyLWVsZW1lbnQnKS5zdHlsZS5ib3JkZXJDb2xvcikudG9CZSgnYmx1ZScpO1xuICAgICAgICBleHBlY3QoYnlJZCgnZHluYW1pYy1ib3JkZXItZWxlbWVudCcpLnN0eWxlLmJvcmRlcldpZHRoKS50b0JlKCcxcHgnKTtcbiAgICB9KTtcbiAgICBpdCgndGFndmFyIGluamVjdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChieUlkKCdpbmplY3QtdGFndmFyLTAnKS5pbm5lclRleHQpLnRvQmUoYnlJZCgnaW5qZWN0LXJlYWQtdGFndmFyLTAnKS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoYnlJZCgnaW5qZWN0LXRhZ3Zhci0xJykuaW5uZXJUZXh0KS50b0JlKGJ5SWQoJ2luamVjdC1yZWFkLXRhZ3Zhci0xJykuaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2luamVjdC10YWd2YXItMicpLmlubmVyVGV4dCkudG9CZShieUlkKCdpbmplY3QtcmVhZC10YWd2YXItMicpLmlubmVyVGV4dCk7XG4gICAgfSk7XG4gICAgaXQoJ2FuaW1hdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBTa2lwIGlmIHJ1bm5pbmcgaW4gYW4gZW52aXJvbm1lbnQgd2hlcmUgY29udGVudCB2aWV3IGlzbid0IHByb3Blcmx5IGxvYWRlZFxuICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudC10b2dnbGUtZngnKTtcbiAgICAgICAgaWYgKCF0b2dnbGVCdXR0b24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFNraXBwaW5nIGFuaW1hdGlvbiB0ZXN0IC0gQ29udGVudCB2aWV3IG5vdCBsb2FkZWQgcHJvcGVybHkgaW4gdGVzdCBlbnZpcm9ubWVudCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV4cGVjdChjb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScpLCAnSW5pdGlhbCBzdGF0ZTogc2hvdWxkIGhhdmUgMCB0ZXN0IGVsZW1lbnRzJykudG9CZSgwKTtcbiAgICAgICAgLy9zaG93XG4gICAgICAgIGNsaWNrKCcjY29udGVudC10b2dnbGUtZngnKTtcbiAgICAgICAgLy8gV2FpdCBmb3IgZWxlbWVudHMgdG8gYXBwZWFyXG4gICAgICAgIGF3YWl0IHdhaXRGb3JFbGVtZW50Q291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nLCAzKTtcbiAgICAgICAgZXhwZWN0KGNvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJyksICdBZnRlciBzaG93IGNsaWNrOiBzaG91bGQgaGF2ZSAzIHRlc3QgZWxlbWVudHMnKS50b0JlKDMpO1xuICAgICAgICAvLyBDaGVjayBpZiBhbnkgZWxlbWVudHMgYXJlIGFuaW1hdGluZyBpbml0aWFsbHkgKGNvdWxkIGJlIDEsIDIsIG9yIDMgZGVwZW5kaW5nIG9uIHRpbWluZylcbiAgICAgICAgY29uc3QgYW5pbWF0aW5nQ291bnQgPSBjb3VudCgnLmFuaW1hdGVfX2FuaW1hdGVkW25hbWU9dGVzdC10aGUtdGVzdGVyXScpO1xuICAgICAgICBleHBlY3QoYW5pbWF0aW5nQ291bnQsICdBZnRlciBzaG93IGNsaWNrOiBzaG91bGQgaGF2ZSBhdCBsZWFzdCAxIGFuaW1hdGluZyBlbGVtZW50JykudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgICAvLyBXYWl0IGEgYml0IHRvIGVuc3VyZSB3ZSdyZSBzdGlsbCBtaWQtYW5pbWF0aW9uXG4gICAgICAgIGF3YWl0IHNsZWVwKHRlc3RTdGFnZ2VyQnkgLyAyKTtcbiAgICAgICAgLy8gYWxtb3N0IHNob3duIC0gdGhlcmUgbWlnaHQgYmUgbW9yZSBhbmltYXRpbmcgZWxlbWVudHMgZHVlIHRvIHN0YWdnZXJcbiAgICAgICAgZXhwZWN0KGNvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJyksICdEdXJpbmcgYW5pbWF0aW9uOiBzaG91bGQgc3RpbGwgaGF2ZSAzIHRlc3QgZWxlbWVudHMnKS50b0JlKDMpO1xuICAgICAgICAvLyBEb24ndCBjaGVjayBleGFjdCBhbmltYXRpb24gY291bnQgaGVyZSBhcyBpdCBkZXBlbmRzIG9uIHN0YWdnZXIgdGltaW5nXG4gICAgICAgIGV4cGVjdCh0ZXh0Q29udGVudCgnI291dGVyLWh0bWwtZngtdGVzdCcpLCAnRHVyaW5nIGFuaW1hdGlvbjogaW5uZXIgaHRtbCBzaG91bGQgYmUgcmVuZGVyZWQnKS50b0JlKCdpbm5lciBodG1sIHRhZycpO1xuICAgICAgICAvLyBXYWl0IGZvciBhbGwgYW5pbWF0aW9ucyB0byBjb21wbGV0ZVxuICAgICAgICBhd2FpdCB3YWl0Rm9yQW5pbWF0aW9uc1RvQ29tcGxldGUoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nLCAwKTtcbiAgICAgICAgLy8gY29tcGxldGVkIHNob3dpbmdcbiAgICAgICAgZXhwZWN0KGNvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJyksICdBZnRlciBhbmltYXRpb24gY29tcGxldGU6IHNob3VsZCBoYXZlIDMgdGVzdCBlbGVtZW50cycpLnRvQmUoMyk7XG4gICAgICAgIGV4cGVjdChjb3VudCgnLmFuaW1hdGVfX2FuaW1hdGVkW25hbWU9dGVzdC10aGUtdGVzdGVyXScpLCAnQWZ0ZXIgYW5pbWF0aW9uIGNvbXBsZXRlOiBzaG91bGQgaGF2ZSAwIGFuaW1hdGluZyBlbGVtZW50cycpLnRvQmUoMCk7XG4gICAgICAgIC8vIGhpZGVcbiAgICAgICAgY2xpY2soJyNjb250ZW50LXRvZ2dsZS1meCcpO1xuICAgICAgICAvLyBDaGVjayBpZiBhbnkgZWxlbWVudHMgYXJlIGFuaW1hdGluZyAoY291bGQgYmUgMSwgMiwgb3IgMyBkZXBlbmRpbmcgb24gdGltaW5nKVxuICAgICAgICBjb25zdCBoaWRlQW5pbWF0aW5nQ291bnQgPSBjb3VudCgnLmFuaW1hdGVfX2FuaW1hdGVkW25hbWU9dGVzdC10aGUtdGVzdGVyXScpO1xuICAgICAgICBleHBlY3QoaGlkZUFuaW1hdGluZ0NvdW50LCAnQWZ0ZXIgaGlkZSBjbGljazogc2hvdWxkIGhhdmUgYXQgbGVhc3QgMSBhbmltYXRpbmcgZWxlbWVudCcpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgICAgLy8gbm8gY2hhbmdlcyB0byByZW1vdmUgeWV0XG4gICAgICAgIGV4cGVjdChjb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScpLCAnQWZ0ZXIgaGlkZSBjbGljazogc2hvdWxkIHN0aWxsIGhhdmUgMyB0ZXN0IGVsZW1lbnRzJykudG9CZSgzKTtcbiAgICAgICAgLy8gV2FpdCBmb3IgYWxsIGVsZW1lbnRzIHRvIGRpc2FwcGVhclxuICAgICAgICBhd2FpdCB3YWl0Rm9yRWxlbWVudENvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJywgMCk7XG4gICAgICAgIC8vIHNob3VsZCBiZSBkb25lIGRpc2FwcGVhcmluZ1xuICAgICAgICBleHBlY3QoY291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSwgJ0FmdGVyIGhpZGUgYW5pbWF0aW9uOiBzaG91bGQgaGF2ZSAwIHRlc3QgZWxlbWVudHMnKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoY291bnQoJy5hbmltYXRlX19hbmltYXRlZFtuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSwgJ0FmdGVyIGhpZGUgYW5pbWF0aW9uOiBzaG91bGQgaGF2ZSAwIGFuaW1hdGluZyBlbGVtZW50cycpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ2hvc3QnLCAoKSA9PiB7XG4gICAgICAgIGxldCBob3N0RGVzdHJveUNvdW50ID0gTnVtYmVyKGh0bWxCeUlkKCdob3N0RGVzdHJveUNvdW50JykpO1xuICAgICAgICAvLyBzaG91bGQgYmUgYSBudW1iZXJcbiAgICAgICAgZXhwZWN0KGlzTmFOKE51bWJlcihodG1sQnlJZCgnaG9zdGVkQ29udGVudCcpKSkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBjbGlja0J5SWQoJ2hvc3RIaWRlU2hvdycpO1xuICAgICAgICBleHBlY3QoTnVtYmVyKGh0bWxCeUlkKCdob3N0RGVzdHJveUNvdW50JykpKS50b0JlKGhvc3REZXN0cm95Q291bnQgKyAxKTtcbiAgICAgICAgLy8gc2hvdWxkIE5PVCBiZSBhIG51bWJlclxuICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ2hvc3RlZENvbnRlbnQnKSkudG9CZSgnJyk7XG4gICAgICAgIGNsaWNrQnlJZCgnaG9zdEhpZGVTaG93Jyk7XG4gICAgICAgIC8vIHNob3VsZCBiZSBhIG51bWJlclxuICAgICAgICBleHBlY3QoaXNOYU4oTnVtYmVyKGh0bWxCeUlkKCdob3N0ZWRDb250ZW50JykpKSkudG9CZShmYWxzZSk7XG4gICAgICAgIC8vIHN0aWxsIHNhbWUgbnVtYmVyXG4gICAgICAgIGV4cGVjdChOdW1iZXIoaHRtbEJ5SWQoJ2hvc3REZXN0cm95Q291bnQnKSkpLnRvQmUoaG9zdERlc3Ryb3lDb3VudCArIDEpO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBjbGljaywgaHRtbCwgaHRtbEJ5SWQsIGtleXVwT24gfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgZXhwZWN0RWxtQ291bnQsIHRlc3RDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/Cfkq8gY291bnRlcnMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2xvd0NvdW50ID0gaHRtbCgnI/CfjYQtc2xvd0NoYW5nZUNvdW50Jyk7XG4gICAgLy8gdGVzdHMgY2FuIGJlIHJ1biBtdWx0aXBsZSB0aW1lcy4gT25seSB0aGUgZmlyc3QgdGltZSB3aWxsIHRoaXMgZXhwZWN0IGJlbG93IHdvcmtcbiAgICBjb25zdCBmaXJzdFJ1biA9IHNsb3dDb3VudCA9PT0gJzAnO1xuICAgIGl0KCdiYXNpY3MnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvdW50ZXJJbnB1dCA9IGJ5SWQoJ3NldC1tYWluLWNvdW50ZXItaW5wdXQnKTtcbiAgICAgICAgZXhwZWN0KGNvdW50ZXJJbnB1dCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgY291bnRlcklucHV0LnZhbHVlID0gJzAnO1xuICAgICAgICBrZXl1cE9uKGNvdW50ZXJJbnB1dCk7XG4gICAgICAgIGNvbnN0IGJlZm9yZVJlbmRlckNvdW50ID0gTnVtYmVyKGh0bWwoJyNjb3VudGVyc19yZW5kZXJfY291bnQnKSk7XG4gICAgICAgIGNvbnN0IGJlZm9yZUlubmVyUmVuZGVyQ291bnQgPSBOdW1iZXIoaHRtbCgnI2lubmVyX2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyNjb25kaXRpb25hbC1jb3VudGVyJywgMCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdWJzID0gaHRtbEJ5SWQoJ/CfkYktY291bnRlci1zdWItY291bnQnKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI+KdpO+4jy1pbmNyZWFzZS1jb3VudGVyJywgJyPinaTvuI8tY291bnRlci1kaXNwbGF5Jyk7XG4gICAgICAgIGV4cGVjdChodG1sQnlJZCgn8J+RiS1jb3VudGVyLXN1Yi1jb3VudCcpKS50b0JlKGN1cnJlbnRTdWJzKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyNjb3VudGVyc19yZW5kZXJfY291bnQnKSkudG9CZSgoYmVmb3JlUmVuZGVyQ291bnQgKyAyKS50b1N0cmluZygpKTtcbiAgICAgICAgLy8gdGhlIHBhcmVudCBjaGFuZ2VkIGEgdmFsdWUgcGFzc2VkIHRvIGNoaWxkIGFzIGEgcHJvcFxuICAgICAgICBsZXQgdG9CZSA9IChiZWZvcmVJbm5lclJlbmRlckNvdW50ICsgMikudG9TdHJpbmcoKTtcbiAgICAgICAgbGV0IHJlbmRlckNvdW50ID0gaHRtbCgnI2lubmVyX2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpO1xuICAgICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUodG9CZSk7IC8vIGV4cGVjdGVkIG51bWJlciBvZiByZW5kZXJzIHRvIGJlICR7dG9CZX0gbm90ICR7cmVuZGVyQ291bnR9XG4gICAgICAgIGNvbnN0IHByZUluaXRDb3VudGVyID0gaHRtbCgnI/CflKUtaW5pdC1jb3VudGVyJyk7XG4gICAgICAgIGV4cGVjdChwcmVJbml0Q291bnRlcikudG9CZSgnMScpO1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcj4p2k77iPLWlubmVyLWNvdW50ZXInLCAnI+KdpO+4jy1pbm5lci1kaXNwbGF5Jyk7XG4gICAgICAgIHRvQmUgPSAoYmVmb3JlUmVuZGVyQ291bnQgKyA0KS50b1N0cmluZygpO1xuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWwoJyNjb3VudGVyc19yZW5kZXJfY291bnQnKTtcbiAgICAgICAgZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKHRvQmUpOyAvLyBleHBlY3RlZCBudW1iZXIgb2YgcmVuZGVycyB0byBiZSAke3RvQmV9IG5vdCAke3JlbmRlckNvdW50fVxuICAgICAgICAvLyB0aGUgY2hpbGQgY2hhbmdlZCBhIHZhbHVlIHBhc3NlZCBmcm9tIHBhcmVudCBhcyBhIHByb3BcbiAgICAgICAgcmVuZGVyQ291bnQgPSBodG1sKCcjaW5uZXJfY291bnRlcnNfcmVuZGVyX2NvdW50Jyk7XG4gICAgICAgIHRvQmUgPSAoYmVmb3JlSW5uZXJSZW5kZXJDb3VudCArIDQpLnRvU3RyaW5nKCk7XG4gICAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSh0b0JlKTsgLy8gZXhwZWN0ZWQgbnVtYmVyIG9mIHJlbmRlcnMgdG8gYmUgJHt0b0JlfSBub3QgJHtyZW5kZXJDb3VudH1cbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfpaYtc3RhbmRhbG9uZS1jb3VudGVyJywgJyPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheScpO1xuICAgICAgICB0b0JlID0gKGJlZm9yZVJlbmRlckNvdW50ICsgKGZpcnN0UnVuID8gNiA6IDYpKS50b1N0cmluZygpO1xuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWwoJyNjb3VudGVyc19yZW5kZXJfY291bnQnKTtcbiAgICAgICAgZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKHRvQmUpOyAvLyByZW5kZXIgY291bnQgY2hlY2sgZmFpbGVkXG4gICAgICAgIC8vIHRoZSBjaGlsZCB3YXMgbm90IHJlbmRlcmVkIGFnYWluIGJlY2F1c2UgcHJvcHMgZGlkIG5vdCBjaGFuZ2Ugc28gdmFsdWUgc2hvdWxkIGJlIGxlc3NcbiAgICAgICAgcmVuZGVyQ291bnQgPSBodG1sKCcjaW5uZXJfY291bnRlcnNfcmVuZGVyX2NvdW50Jyk7XG4gICAgICAgIHRvQmUgPSAoYmVmb3JlSW5uZXJSZW5kZXJDb3VudCArIDQpLnRvU3RyaW5nKCk7XG4gICAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSh0b0JlKTsgLy8gZXhwZWN0ZWQgbnVtYmVyIG9mIHJlbmRlcnMgdG8gYmUgJHt0b0JlfSBub3QgJHtyZW5kZXJDb3VudH1cbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyNjb25kaXRpb25hbC1jb3VudGVyJywgMSk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjY29uZGl0aW9uYWwtZGlzcGxheScsIDEpO1xuICAgICAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKCcjY29uZGl0aW9uYWwtZGlzcGxheScpKS50b0JlKCcyJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyQ291bnQgPSBodG1sQnlJZCgn4p2k77iP8J+Spy1zaGFsbG93LWRpc3BsYXknKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2NvbmRpdGlvbmFsLWNvdW50ZXInLCAnI2NvbmRpdGlvbmFsLWRpc3BsYXknKTtcbiAgICAgICAgZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKGh0bWxCeUlkKCfinaTvuI/wn5KnLXNoYWxsb3ctZGlzcGxheScpKTsgLy8gZXhwZWN0IHNoYWxsb3cgcmVuZGVyIG5vdCB0byBoYXZlIGNoYW5nZWRcbiAgICAgICAgLy8gdGVzdCBhZ2FpbiBhZnRlciBoaWdoZXIgZWxlbWVudHMgaGF2ZSBoYWQgcmVydW5zXG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPinaTvuI8taW5uZXItY291bnRlcicsICcj4p2k77iPLWlubmVyLWRpc3BsYXknKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI+KdpO+4j/Cfkqctc2hhbGxvdy1jb3VudGVyJywgJyPinaTvuI/wn5KnLXNoYWxsb3ctZGlzcGxheScpO1xuICAgICAgICBzcGVlZENsaWNrQ291bnRUZXN0KCfwn6S/LWRlZXAtY291bnRlcicsICfwn6S/LWRlZXAtZGlzcGxheScsICfinaTvuI8taW5uZXItY291bnRlcicpO1xuICAgICAgICBzcGVlZENsaWNrQ291bnRUZXN0KCfwn5KnLXNoYWxsb3ctY291bnRlcicsICfwn5KnLXNoYWxsb3ctZGlzcGxheScsICfinaTvuI/wn5KnLXNoYWxsb3ctZGlzcGxheScpO1xuICAgICAgICBzcGVlZENsaWNrQ291bnRUZXN0KCfwn6qoLWltbXV0YWJsZS1jb3VudGVyJywgJ/CfqqgtaW1tdXRhYmxlLWRpc3BsYXknLCAn4p2k77iP8J+qqC1pbW11dGFibGUtY291bnRlcicpO1xuICAgICAgICBzcGVlZENsaWNrQ291bnRUZXN0KCfwn5qrLW5vd2F0Y2gtY291bnRlcicsICfwn5qrLW5vd2F0Y2gtZGlzcGxheScsICfinaTvuI/wn5qrLW5vd2F0Y2gtY291bnRlcicpO1xuICAgICAgICAvLyByZW5kZXJDb3VudCA9IGh0bWwoJyNzaGFsbG93X2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpXG4gICAgICAgIC8vIHRvQmUgPSAoYmVmb3JlSW5uZXJSZW5kZXJDb3VudCArIDQpLnRvU3RyaW5nKClcbiAgICAgICAgLy8gZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKHRvQmUpIC8vIGV4cGVjdGVkIG51bWJlciBvZiByZW5kZXJzIHRvIGJlICR7dG9CZX0gbm90ICR7cmVuZGVyQ291bnR9XG4gICAgfSk7XG4gICAgaXQoJ3BpcGVkIHN1YmplY3QnLCAoKSA9PiB7XG4gICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgY29uc3QgY291bnRlciA9IGh0bWwoJyPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheScpO1xuICAgICAgICAgICAgY29uc3QgcGlwZTAgPSBodG1sKCcj8J+qiC1waXBlZFN1YmplY3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChwaXBlMCkudG9CZShjb3VudGVyLCBgZmlyc3RSdW4gZmFpbHVyZSBwaXBlMC4gRXhwZWN0ZWQgXCIke3BpcGUwfVwiIHRvQmUgZW1wdHktc3RyaW5nYCk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI/CfqogtcGlwZWRTdWJqZWN0LTInKSkudG9CZShjb3VudGVyLCAnZmlyc3RSdW4gZmFpbHVyZSBwaXBlMicpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcj8J+lpi1zdWJqZWN0LWluY3JlYXNlLWNvdW50ZXInKTtcbiAgICAgICAgY29uc3QgcGlwZWRTdWJEaXNwbGF5ID0gaHRtbCgnI/CfqogtcGlwZWRTdWJqZWN0Jyk7XG4gICAgICAgIGNvbnN0IHN1YmplY3RDb3VudERpc3BsYXkgPSBodG1sKCcj8J+lpi1zdGFuZGFsb25lLWRpc3BsYXknKTtcbiAgICAgICAgZXhwZWN0KHBpcGVkU3ViRGlzcGxheSkudG9CZShzdWJqZWN0Q291bnREaXNwbGF5KTsgLy8gRXhwZWN0ZWQgI/CfqogtcGlwZWRTdWJqZWN0IHZhbHVlKCR7cGlwZWRTdWJEaXNwbGF5fSkgdG8gbWF0Y2ggI/CfpaYtc3RhbmRhbG9uZS1kaXNwbGF5IHZhbHVlKCR7c3ViamVjdENvdW50RGlzcGxheX0pXG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+qiC1waXBlZFN1YmplY3QtMicpKS50b0JlKGh0bWwoJyPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheScpKTtcbiAgICB9KTtcbn0pO1xuZXhwb3J0IGNvbnN0IGNsaWNrU3BlZWRBbW91bnQgPSA2MDA7XG5mdW5jdGlvbiBzcGVlZENsaWNrQ291bnRUZXN0KGNvdW50ZXJRdWVyeSwgZGlzcGxheVF1ZXJ5LCBpbmNyZWFzZU91dGVyQ291bnRlclF1ZXJ5KSB7XG4gICAgY29uc3QgY2xpY2tDb3VudCA9IGh0bWxCeUlkKGRpc3BsYXlRdWVyeSk7XG4gICAgY29uc3QgZWxtID0gYnlJZChjb3VudGVyUXVlcnkpO1xuICAgIGNvbnN0IHByb3BDb3VudGVyQnRuRWxtID0gYnlJZChpbmNyZWFzZU91dGVyQ291bnRlclF1ZXJ5KTtcbiAgICBjb25zb2xlLnRpbWUoYOKMmu+4jyAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNjAwOyBpbmRleCsrKSB7XG4gICAgICAgIGVsbS5jbGljaygpO1xuICAgIH1cbiAgICBjb25zb2xlLnRpbWVFbmQoYOKMmu+4jyAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBjb25zb2xlLnRpbWUoYOKMmu+4jyBvdXRlciAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNjAwOyBpbmRleCsrKSB7XG4gICAgICAgIHByb3BDb3VudGVyQnRuRWxtLmNsaWNrKCk7XG4gICAgfVxuICAgIGNvbnNvbGUudGltZUVuZChg4oya77iPIG91dGVyICR7Y291bnRlclF1ZXJ5fWApO1xuICAgIGNvbnN0IGRpc3BsYXlRdWVyeVRpbWUgPSAoTnVtYmVyKGNsaWNrQ291bnQpICsgY2xpY2tTcGVlZEFtb3VudCkudG9TdHJpbmcoKTtcbiAgICBleHBlY3QoaHRtbEJ5SWQoZGlzcGxheVF1ZXJ5KSkudG9CZShkaXNwbGF5UXVlcnlUaW1lKTsgLy8gJHtkaXNwbGF5UXVlcnl9XG59XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGh0bWwsIGNsaWNrLCBjb3VudCB9IGZyb20gJy4vdGVzdGluZyc7XG5pdCgnZGVzdHJveXMnLCBhc3luYyAoKSA9PiB7XG4gICAgZXhwZWN0KGNvdW50KCcjZGVzdHJveUNvdW50JykpLnRvQmUoMSk7XG4gICAgZXhwZWN0KGNvdW50KCcjdG9nZ2xlLWRlc3Ryb3lzJykpLnRvQmUoMSk7XG4gICAgZXhwZWN0KGNvdW50KCcjZGVzdHJveWFibGUtY29udGVudCcpKS50b0JlKDEpO1xuICAgIGxldCBvbGREZXN0cm95Q291bnQgPSBOdW1iZXIoaHRtbCgnI2Rlc3Ryb3lDb3VudCcpKTtcbiAgICAvLyBjYXVzZSBkZXN0cm95XG4gICAgY2xpY2soJyN0b2dnbGUtZGVzdHJveXMnKTtcbiAgICBsZXQgZGVzdHJveUNvdW50ID0gTnVtYmVyKGh0bWwoJyNkZXN0cm95Q291bnQnKSk7XG4gICAgZXhwZWN0KGRlc3Ryb3lDb3VudCkudG9CZShvbGREZXN0cm95Q291bnQgKyAyKTtcbiAgICAvLyBhd2FpdCBzbGVlcCgwKSAvLyBTSE9VTEQgTk9UIE5FRUQhXG4gICAgZXhwZWN0KGNvdW50KCcjZGVzdHJveWFibGUtY29udGVudCcpKS50b0JlKDApO1xuICAgIG9sZERlc3Ryb3lDb3VudCA9IGRlc3Ryb3lDb3VudDtcbiAgICAvLyBjYXVzZSByZXN0b3JlXG4gICAgY2xpY2soJyN0b2dnbGUtZGVzdHJveXMnKTtcbiAgICBkZXN0cm95Q291bnQgPSBOdW1iZXIoaHRtbCgnI2Rlc3Ryb3lDb3VudCcpKTtcbiAgICBleHBlY3QoZGVzdHJveUNvdW50KS50b0JlKG9sZERlc3Ryb3lDb3VudCk7XG4gICAgZXhwZWN0KGNvdW50KCcjZGVzdHJveWFibGUtY29udGVudCcpKS50b0JlKDEpO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG4vLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBieUlkLCB0cmlnZ2VyQ2hhbmdlRWxtLCBxdWVyeSB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgndGFnZ2VkanMtZHVtcCcsICgpID0+IHtcbiAgICBpdCgnc3RhcnRzIHdpdGggbm90aGluZyBUSEVOIGJlY29tZXMgb2JqZWN0IFRIRU4gb2JqZWN0IHdpdGggYXJyYXknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsbSA9IGJ5SWQoJ3RhZ2dlZGpzLWR1bXAtdXNlci10ZXh0YXJlYScpO1xuICAgICAgICBleHBlY3QoZWxtLnZhbHVlKS50b0JlKCcnKTtcbiAgICAgICAgZWxtLnZhbHVlID0gJ3t0ZXN0OjIyfSc7XG4gICAgICAgIHRyaWdnZXJDaGFuZ2VFbG0oZWxtKTtcbiAgICAgICAgZXhwZWN0KGVsbS52YWx1ZSkudG9CZSgne3Rlc3Q6MjJ9Jyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdEVsbXMgPSBxdWVyeSgnI3RhZ2dlZGpzLWR1bXAtdXNlci1yZXN1bHQgLnRhZ2dlZGpzLXNpbXBsZS1sYWJlbCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0RWxtcy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRFbG1zWzBdLmlubmVyVGV4dCkudG9CZSgndGVzdCcpO1xuICAgICAgICBlbG0udmFsdWUgPSAne3Rlc3Q6MjIsIGFjZTpbMjIsIHt0ZXN0YjozM30sIDU1XX0nO1xuICAgICAgICB0cmlnZ2VyQ2hhbmdlRWxtKGVsbSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdEVsbXMyID0gcXVlcnkoJyN0YWdnZWRqcy1kdW1wLXVzZXItcmVzdWx0IC50YWdnZWRqcy1zaW1wbGUtbGFiZWwnKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEVsbXMyLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEVsbXMyWzBdLmlubmVyVGV4dCkudG9CZSgndGVzdCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0RWxtczJbMV0uaW5uZXJUZXh0KS50b0JlKCd0ZXN0YicpO1xuICAgICAgICBlbG0udmFsdWUgPSAnJztcbiAgICAgICAgdHJpZ2dlckNoYW5nZUVsbShlbG0pO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGNsaWNrLCBodG1sIH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IHRlc3RDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaXQoJ2Z1bmN0aW9uIGluIHByb3BzJywgYXN5bmMgKCkgPT4ge1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNmdW5faW5fcHJvcDEnLCAnI2Z1bl9pbl9wcm9wX2Rpc3BsYXknKTtcbiAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjZnVuX2luX3Byb3AyJywgJyNmdW5faW5fcHJvcF9kaXNwbGF5Jyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2Z1bl9pbl9wcm9wMycsICcjZnVuX2luX3Byb3BfZGlzcGxheScpO1xuICAgIGV4cGVjdChodG1sKCcjbWFpbl93cmFwX3N0YXRlJykpLnRvQmUoJ3RhZ2dqZWRqcy13cmFwcGVkJyk7XG4gICAgY2xpY2soJyN0b2dnbGUtZnVuLWluLWNoaWxkJyk7XG4gICAgY2xpY2soJyNmdW4tcGFyZW50LWJ1dHRvbicpO1xuICAgIC8vIGV4cGVjdChodG1sKCcjbWFpbl93cmFwX3N0YXRlJykpLnRvQmUoJ25vd3JhcCcpXG4gICAgY2xpY2soJyN0b2dnbGUtZnVuLWluLWNoaWxkJyk7XG4gICAgY2xpY2soJyNmdW4tcGFyZW50LWJ1dHRvbicpO1xuICAgIGV4cGVjdChodG1sKCcjbWFpbl93cmFwX3N0YXRlJykpLnRvQmUoJ3RhZ2dqZWRqcy13cmFwcGVkJyk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgaHRtbEJ5SWQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgZXhwZWN0RWxtQ291bnQsIGV4cGVjdE1hdGNoZWRIdG1sIH0gZnJvbSAnLi90ZXN0aW5nJztcbml0KCfwn6qeIG1pcnJvciB0ZXN0aW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdEVsbUNvdW50KCcjbWlycm9yLWNvdW50ZXItZGlzcGxheScsIDIpO1xuICAgIGV4cGVjdEVsbUNvdW50KCcjbWlycm9yLWNvdW50ZXItYnV0dG9uJywgMik7XG4gICAgY29uc3QgY291bnRlciA9IE51bWJlcihodG1sQnlJZCgnbWlycm9yLWNvdW50ZXItZGlzcGxheScpKTtcbiAgICBieUlkKCdtaXJyb3ItY291bnRlci1idXR0b24nKS5jbGljaygpO1xuICAgIGV4cGVjdChjb3VudGVyICsgMSkudG9CZShOdW1iZXIoaHRtbEJ5SWQoJ21pcnJvci1jb3VudGVyLWRpc3BsYXknKSkpO1xuICAgIGV4cGVjdEVsbUNvdW50KCcjbWlycm9yLWNvdW50ZXItZGlzcGxheScsIDIpO1xuICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjbWlycm9yLWNvdW50ZXItZGlzcGxheScpO1xufSk7XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgdGVzdENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5pdCgnb25lUmVuZGVyJywgKCkgPT4ge1xuICAgIGV4cGVjdChodG1sKCcjb25lUmVuZGVyX3RhZ190c19yZW5kZXJfY291bnQnKSkudG9CZSgnMScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn5GNLWNvdW50ZXItYnV0dG9uJywgJyPwn5GNLWNvdW50ZXItZGlzcGxheScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn5GN8J+UqC1jb3VudGVyLWJ1dHRvbicsICcj8J+RjfCflKgtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfkY3wn5SoLWNvdW50ZXItYnV0dG9uJywgJyPwn5GN8J+UqC1jb3VudGVyLXN1YmplY3QtZGlzcGxheScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn5GN8J+UqC1jb3VudGVyLWJ1dHRvbicsICcj8J+ToS1zaWduYWwtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgZXhwZWN0KGh0bWwoJyNvbmVSZW5kZXJfdGFnX3RzX3JlbmRlcl9jb3VudCcpKS50b0JlKCcxJyk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGJ5SWQsIGh0bWwsIGh0bWxCeUlkLCBxdWVyeSB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBleHBlY3RIVE1MLCBleHBlY3RNYXRjaGVkSHRtbCwgdGVzdENvdW50ZXJFbGVtZW50cywgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/Cfp7MgcHJvcHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Rlc3QgZHVlbHMnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI3Byb3BzRGVidWct8J+lqS0wLWJ1dHRvbicsICcjcHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheSddLCBbJyNwcm9wc0RlYnVnLfCfpaktMS1idXR0b24nLCAnI3Byb3BzRGVidWct8J+lqS0xLWRpc3BsYXknXSk7XG4gICAgfSk7XG4gICAgaXQoJ2NoaWxkIHByb3AgY29tbXVuaWNhdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI3Byb3BzRGVidWct8J+lqS0xLWJ1dHRvbicsICcjcHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheSddLCBbJyNwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktYnV0dG9uJywgJyNwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktZGlzcGxheSddKTtcbiAgICB9KTtcbiAgICBpdCgnYmFzaWNzJywgKCkgPT4ge1xuICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSB3YXRjaCBjb3VudGVkIGEgY2hhbmdlIGhhcHBlbnMgdG8gbWF0Y2ggdGhhdCBpbmNyZWFzZSBjb3VudGVyXG4gICAgICAgIGNvbnN0IGZ1blVwZGF0ZVZhbHVlID0gaHRtbCgnI3Byb3BzT25lTGV2ZWxGdW5VcGRhdGUt8J+lqS1kaXNwbGF5Jyk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSBodG1sKCcjcHJvcHNEZWJ1Zy3wn6WpLWNoYW5nZS1jb3VudC1kaXNwbGF5Jyk7XG4gICAgICAgIC8vIHRlc3QgdGhhdCB3YXRjaCBydW5zIG9uSW5pdFxuICAgICAgICBleHBlY3QoY2hhbmdlZCkudG9CZSgoTnVtYmVyKGZ1blVwZGF0ZVZhbHVlKSArIDEpLnRvU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCBvd25lckhUTUwgPSBieUlkKCdwcm9wc0RlYnVnLfCfpaktMC1kaXNwbGF5JykuaW5uZXJIVE1MO1xuICAgICAgICBjb25zdCBwYXJlbnRIVE1MID0gYnlJZCgncHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheScpLmlubmVySFRNTDtcbiAgICAgICAgY29uc3QgY2hpbGRIVE1MID0gYnlJZCgncHJvcHNPbmVMZXZlbEZ1blVwZGF0ZS3wn6WpLWRpc3BsYXknKS5pbm5lckhUTUw7XG4gICAgICAgIGNvbnN0IG93bmVyTnVtID0gTnVtYmVyKG93bmVySFRNTCk7XG4gICAgICAgIGNvbnN0IHBhcmVudE51bSA9IE51bWJlcihwYXJlbnRIVE1MKTtcbiAgICAgICAgY29uc3QgY2hpbGROdW0gPSBOdW1iZXIoY2hpbGRIVE1MKTtcbiAgICAgICAgZXhwZWN0KHBhcmVudE51bSkudG9CZShjaGlsZE51bSk7XG4gICAgICAgIGV4cGVjdChvd25lck51bSArIDIpLnRvQmUocGFyZW50TnVtKTsgLy8gdGVzdGluZyBvZiBzZXRQcm9wKCkgZG9lc24ndCBjaGFuZ2Ugb3duZXJcbiAgICB9KTtcbiAgICBpdCgnbGV0UHJvcCcsICgpID0+IHtcbiAgICAgICAgLy8gbG9jYWwgYW5kIG91dHNpZGUgY3VycmVudGx5IG1hdGNoXG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjcHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheScsICcjcHJvcHNEZWJ1Zy3wn6WpLWxldC1wcm9wLWRpc3BsYXknKTtcbiAgICAgICAgY29uc3QgcHJvcENvdW50ZXIgPSBOdW1iZXIoaHRtbCgnI3Byb3BzRGVidWct8J+lqS0wLWRpc3BsYXknKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHF1ZXJ5KCcjcHJvcHNEZWJ1Zy3wn6WpLTItYnV0dG9uJylbMF0uX2NsaWNrKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ25vLWRhdGEtZXZlcicpO1xuICAgICAgICAvLyBvdXRlciBzaG91bGQgbm90IGhhdmUgY2hhbmdlZFxuICAgICAgICBleHBlY3QoaHRtbCgnI3Byb3BzRGVidWct8J+lqS0wLWRpc3BsYXknKSkudG9CZShwcm9wQ291bnRlci50b1N0cmluZygpKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyNwcm9wc0RlYnVnLfCfpaktbGV0LXByb3AtZGlzcGxheScpKS50b0JlKChwcm9wQ291bnRlciArIDEpLnRvU3RyaW5nKCkpO1xuICAgICAgICAvLyBlbmQgb2YgdGVzdCBwdXQgYWxsIGluIHN5bmNcbiAgICAgICAgYnlJZCgncHJvcHNEZWJ1Zy3wn6WpLTEtYnV0dG9uJykuY2xpY2soKTtcbiAgICB9KTtcbiAgICBpdCgncHJvcHMgYXMgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzeW5jQ291bnRlciA9IE51bWJlcihodG1sQnlJZCgnc3luYy1wcm9wLW51bWJlci1kaXNwbGF5JykpO1xuICAgICAgICAvLyBjb25zdCBzeW5jQ291bnRlciA9IE51bWJlciggaHRtbEJ5SWQoJ3N5bmMtcHJvcC1jaGlsZC1kaXNwbGF5JykgKVxuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI3N5bmMtcHJvcC1udW1iZXItZGlzcGxheScsICcjc3luYy1wcm9wLWNoaWxkLWRpc3BsYXknKTtcbiAgICAgICAgYnlJZCgnc3luYy1wcm9wLWNoaWxkLWJ1dHRvbicpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdEhUTUwoJyNzeW5jLXByb3AtbnVtYmVyLWRpc3BsYXknLCAoc3luY0NvdW50ZXIgKyAyKS50b1N0cmluZygpKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI25vdGhpbmctcHJvcC1jb3VudGVyLWJ1dHRvbicsICcjbm90aGluZy1wcm9wLWNvdW50ZXItZGlzcGxheScpO1xuICAgICAgICBleHBlY3RIVE1MKCcjc3luYy1wcm9wLW51bWJlci1kaXNwbGF5JywgKHN5bmNDb3VudGVyICsgMikudG9TdHJpbmcoKSk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjc3luYy1wcm9wLWNvdW50ZXItZGlzcGxheScsICcjbm90aGluZy1wcm9wLWNvdW50ZXItZGlzcGxheScpO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRJbnRlcnZhbC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gKF9hID0gdGhpcy5pZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGludGVydmFsUHJvdmlkZXIuY2xlYXJJbnRlcnZhbChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmNTY2hlZHVsZXIgPSBuZXcgQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb24pO1xuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCB2YXIgRU1QVFkgPSBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmV4cG9ydCBmdW5jdGlvbiBlbXB0eShzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSA6IEVNUFRZO1xufVxuZnVuY3Rpb24gZW1wdHlTY2hlZHVsZWQoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbXB0eS5qcy5tYXAiLCJpbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4uL29ic2VydmFibGUvZW1wdHknO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gdGFrZShjb3VudCkge1xuICAgIHJldHVybiBjb3VudCA8PSAwXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVNUFRZOyB9XG4gICAgICAgIDogb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKytzZWVuIDw9IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA8PSBzZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFrZS5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXQgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbmNhdCc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAnLi90YWtlJztcbmltcG9ydCB7IGlnbm9yZUVsZW1lbnRzIH0gZnJvbSAnLi9pZ25vcmVFbGVtZW50cyc7XG5pbXBvcnQgeyBtYXBUbyB9IGZyb20gJy4vbWFwVG8nO1xuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgIGlmIChzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmNhdChzdWJzY3JpcHRpb25EZWxheS5waXBlKHRha2UoMSksIGlnbm9yZUVsZW1lbnRzKCkpLCBzb3VyY2UucGlwZShkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yKSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgeyByZXR1cm4gaW5uZXJGcm9tKGRlbGF5RHVyYXRpb25TZWxlY3Rvcih2YWx1ZSwgaW5kZXgpKS5waXBlKHRha2UoMSksIG1hcFRvKHZhbHVlKSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXlXaGVuLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5leHBvcnQgZnVuY3Rpb24gaWdub3JlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBub29wKSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXAiLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5leHBvcnQgZnVuY3Rpb24gbWFwVG8odmFsdWUpIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFRvLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGFzeW5jIGFzIGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XG5pbXBvcnQgeyBpc1ZhbGlkRGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlJztcbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihkdWVUaW1lLCBpbnRlcnZhbE9yU2NoZWR1bGVyLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7IGR1ZVRpbWUgPSAwOyB9XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XG4gICAgdmFyIGludGVydmFsRHVyYXRpb24gPSAtMTtcbiAgICBpZiAoaW50ZXJ2YWxPclNjaGVkdWxlciAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcihpbnRlcnZhbE9yU2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludGVydmFsRHVyYXRpb24gPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZHVlID0gaXNWYWxpZERhdGUoZHVlVGltZSkgPyArZHVlVGltZSAtIHNjaGVkdWxlci5ub3coKSA6IGR1ZVRpbWU7XG4gICAgICAgIGlmIChkdWUgPCAwKSB7XG4gICAgICAgICAgICBkdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG4rKyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPD0gaW50ZXJ2YWxEdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHVuZGVmaW5lZCwgaW50ZXJ2YWxEdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkdWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEYXRlLmpzLm1hcCIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IGRlbGF5V2hlbiB9IGZyb20gJy4vZGVsYXlXaGVuJztcbmltcG9ydCB7IHRpbWVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS90aW1lcic7XG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZHVlLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICB2YXIgZHVyYXRpb24gPSB0aW1lcihkdWUsIHNjaGVkdWxlcik7XG4gICAgcmV0dXJuIGRlbGF5V2hlbihmdW5jdGlvbiAoKSB7IHJldHVybiBkdXJhdGlvbjsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXAiLCJpbXBvcnQgeyBkZWxheSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGNoYW5nZUVsbSB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn8J+rtCBwcm92aWRlcnMnLCAoKSA9PiB7XG4gICAgaXQoJ2Jhc2ljcycsICgpID0+IHtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0wLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0wLWRpc3BsYXknXSwgWycjaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0xLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0xLWRpc3BsYXknXSk7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2luY3JlYXNlLXByb3ZpZGVyLXVwcGVyLfCfjLktMC1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLXVwcGVyLfCfjLktMC1kaXNwbGF5J10sIFsnI2luY3JlYXNlLXByb3ZpZGVyLXVwcGVyLfCfjLktMS1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLXVwcGVyLfCfjLktMS1kaXNwbGF5J10pO1xuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTAtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTAtZGlzcGxheSddLCBbJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTEtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTEtZGlzcGxheSddKTtcbiAgICB9KTtcbiAgICBpdCgnaW5uZXIgb3V0ZXIgZGVidWcnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2luY3JlYXNlLXByb3At8J+Qty0wLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvcC3wn5C3LTAtZGlzcGxheSddLCBbJyNpbmNyZWFzZS1wcm9wLfCfkLctMS1idXR0b24nLCAnI2luY3JlYXNlLXByb3At8J+Qty0xLWRpc3BsYXknXSk7XG4gICAgICAgIC8vIGNoYW5nZSBhIGNvdW50ZXIgaW4gdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMC1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMC1kaXNwbGF5J10sIFsnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1kaXNwbGF5J10pO1xuICAgICAgICAvLyBub3cgZW5zdXJlIHRoYXQgdGhpcyBpbm5lciB0YWcgc3RpbGwgb3BlcmF0ZXMgY29ycmVjdGx5IGV2ZW4gdGhvdWdoIHBhcmVudCBqdXN0IHJlbmRlcmVkIGJ1dCBpIGRpZCBub3QgZnJvbSB0aGF0IGNoYW5nZVxuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNpbmNyZWFzZS1wcm9wLfCfkLctMC1idXR0b24nLCAnI2luY3JlYXNlLXByb3At8J+Qty0wLWRpc3BsYXknXSwgWycjaW5jcmVhc2UtcHJvcC3wn5C3LTEtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm9wLfCfkLctMS1kaXNwbGF5J10pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdob3N0IGF0dHJpYnV0ZXMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdwYXJlbnQgaGFzIHJlZCBib3JkZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luLWN5Y2xlLXBhcmVudCcpO1xuICAgICAgICAgICAgZXhwZWN0KHBhcmVudEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAocGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciByZWQgaW4gUkdCIGZvcm1hdCAoYnJvd3NlcnMgdHlwaWNhbGx5IHJldHVybiByZ2IvcmdiYSlcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNSZWQgPSBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3JnYigyNTUsIDAsIDApJykgfHxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdyZWQnKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoaGFzUmVkKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzdHlsZXMuYm9yZGVyV2lkdGgpLnRvQmUoJzJweCcpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzdHlsZXMuYm9yZGVyU3R5bGUpLnRvQmUoJ3NvbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY2hpbGQgaGFzIGdyZWVuIGJvcmRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1jaGlsZCcpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGlmIChjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjaGlsZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBncmVlbiBpbiBSR0IgZm9ybWF0XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzR3JlZW4gPSBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3JnYigwLCAxMjgsIDApJykgfHxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdncmVlbicpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChoYXNHcmVlbikudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBleHBlY3Qoc3R5bGVzLmJvcmRlcldpZHRoKS50b0JlKCcycHgnKTtcbiAgICAgICAgICAgICAgICBleHBlY3Qoc3R5bGVzLmJvcmRlclN0eWxlKS50b0JlKCdzb2xpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NoaWxkIGhhcyBjb3JyZWN0IGlubmVySFRNTCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1jaGlsZCcpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGlmIChjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBleHBlY3QoY2hpbGRFbGVtZW50LmlubmVySFRNTC50cmltKCkpLnRvQmUoJ3dvbmRlcmZ1bCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3BhcmVudCBjb250YWlucyBjaGlsZCBlbGVtZW50JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1wYXJlbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1jaGlsZCcpO1xuICAgICAgICAgICAgZXhwZWN0KHBhcmVudEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQgJiYgY2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHBhcmVudEVsZW1lbnQuY29udGFpbnMoY2hpbGRFbGVtZW50KSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdwYXJlbnQgY29sb3IgY2hhbmdlcyB3aGVuIHNlbGVjdCBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50Q29sb3JTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFyZW50LWNvbG9yLXNlbGVjdCcpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1wYXJlbnQnKTtcbiAgICAgICAgICAgIGV4cGVjdChwYXJlbnRDb2xvclNlbGVjdCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChwYXJlbnRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKHBhcmVudENvbG9yU2VsZWN0ICYmIHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgdG8gYmx1ZVxuICAgICAgICAgICAgICAgIHBhcmVudENvbG9yU2VsZWN0LnZhbHVlID0gJ2JsdWUnO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbG9yU2VsZWN0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgIGNoYW5nZUVsbShwYXJlbnRDb2xvclNlbGVjdCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoMCk7XG4gICAgICAgICAgICAgICAgLy8gV2FpdCBhIGJpdCBmb3IgcmUtcmVuZGVyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzQmx1ZSA9IHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygnYmx1ZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDAsIDAsIDI1NSknKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoaGFzQmx1ZSkudG9CZSh0cnVlLCBgaW4tY3ljbGUtcGFyZW50IHNob3VsZCBiZSBibHVlIG5vdCAke3N0eWxlcy5ib3JkZXJDb2xvcn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjaGlsZCBjb2xvciBjaGFuZ2VzIHdoZW4gc2VsZWN0IGlzIGNoYW5nZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZENvbG9yU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoaWxkLWNvbG9yLXNlbGVjdCcpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luLWN5Y2xlLWNoaWxkJyk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRDb2xvclNlbGVjdCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjaGlsZEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAoY2hpbGRDb2xvclNlbGVjdCAmJiBjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgdG8gcHVycGxlXG4gICAgICAgICAgICAgICAgY2hpbGRDb2xvclNlbGVjdC52YWx1ZSA9ICdwdXJwbGUnO1xuICAgICAgICAgICAgICAgIGNoaWxkQ29sb3JTZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICAgICAgICAgICAgLy8gV2FpdCBhIGJpdCBmb3IgcmUtcmVuZGVyXG4gICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkoMCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY2hpbGRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNQdXJwbGUgPSBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3B1cnBsZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDEyOCwgMCwgMTI4KScpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChoYXNQdXJwbGUpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgcmVuZGVyQ291bnREaXYgPSAoeyByZW5kZXJDb3VudCwgbmFtZSB9KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyMTU0MVswXSwgbmFtZSwgbmFtZSArICdfcmVuZGVyX2NvdW50JywgcmVuZGVyQ291bnQpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczIxNTQxOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIoXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgcmVuZGVyIGNvdW50IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgY2xpY2ssIHRleHRDb250ZW50IH0gZnJvbSAnLi90ZXN0aW5nJztcbi8qXG5pdCgnbm8gdGVtcGxhdGUgdGFncycsICgpID0+IHtcbiAgY29uc3QgdGVtcGxhdGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RlbXBsYXRlJylcbiAgZXhwZWN0KHRlbXBsYXRlVGFncy5sZW5ndGgpLnRvQmUoMCkgLy8gRXhwZWN0ZWQgbm8gdGVtcGxhdGVzIHRvIGJlIG9uIGRvY3VtZW50XG59KVxuKi9cbml0KCdiYXNpYyBhcHAgc3ViamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gdGV4dENvbnRlbnQoJyNhcHAtY291bnRlci1zdWJqZWN0LXZhbHVlLWRpc3BsYXknKTtcbiAgICBjbGljaygnI2FwcC1jb3VudGVyLXN1YmplY3QtYnV0dG9uJyk7XG4gICAgY29uc3QgYWZ0ZXJDbGljayA9IHRleHRDb250ZW50KCcjYXBwLWNvdW50ZXItc3ViamVjdC12YWx1ZS1kaXNwbGF5Jyk7XG4gICAgZXhwZWN0KE51bWJlcihjdXJyZW50KSkudG9CZShOdW1iZXIoYWZ0ZXJDbGljaykgLSAxKTtcbn0pO1xuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgZWxtQ291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgZXhwZWN0RWxtQ291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/CflIAgdGFnU3dpdGNoaW5nJywgKCkgPT4ge1xuICAgIGl0KCcwJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzZWxlY3QtdGFnLWFib3ZlJykpLnRvQmUoMSk7IC8vIEV4cGVjdGVkIHNlbGVjdC10YWctYWJvdmUgZWxlbWVudCB0byBiZSBkZWZpbmVkXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZy1zd2l0Y2gtZHJvcGRvd24nKSkudG9CZSgxKTsgLy8gRXhwZWN0ZWQgb25lICN0YWctc3dpdGNoLWRyb3Bkb3duXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJykpLnRvQmUoMik7IC8vIEV4cGVjdGVkIHR3byAjdGFnU3dpdGNoLTEtaGVsbG8gZWxlbWVudHNcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTItaGVsbG8nKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTMtaGVsbG8nKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnMScsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gXCIxXCI7XG4gICAgICAgIGRyb3Bkb3duLl9jaGFuZ2UoeyB0YXJnZXQ6IGRyb3Bkb3duIH0pO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJywgNSk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0yLWhlbGxvJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0zLWhlbGxvJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3NlbGVjdC10YWctYWJvdmUnKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnMicsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gXCIyXCI7XG4gICAgICAgIGRyb3Bkb3duLl9jaGFuZ2UoeyB0YXJnZXQ6IGRyb3Bkb3duIH0pO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJywgMik7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnU3dpdGNoLTItaGVsbG8nLCA0KTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTMtaGVsbG8nKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2VsZWN0LXRhZy1hYm92ZScpKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCczJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkcm9wZG93biA9IGJ5SWQoJ3RhZy1zd2l0Y2gtZHJvcGRvd24nKTtcbiAgICAgICAgZHJvcGRvd24udmFsdWUgPSBcIjNcIjtcbiAgICAgICAgZHJvcGRvd24uX2NoYW5nZSh7IHRhcmdldDogZHJvcGRvd24gfSk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJykpLnRvQmUoMCk7IC8vIEV4cGVjdGVkIG5vIGhlbGxvIDFzXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0yLWhlbGxvJykpLnRvQmUoMCk7IC8vIEV4cGVjdGVkIG5vICN0YWdTd2l0Y2gtMi1oZWxsbyBlbGVtZW50c1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0zLWhlbGxvJywgNyk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3NlbGVjdC10YWctYWJvdmUnKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnNCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gXCJcIjtcbiAgICAgICAgZHJvcGRvd24uX2NoYW5nZSh7IHRhcmdldDogZHJvcGRvd24gfSk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjc2VsZWN0LXRhZy1hYm92ZScsIDEpO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZy1zd2l0Y2gtZHJvcGRvd24nLCAxKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWdTd2l0Y2gtMS1oZWxsbycsIDIpO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0yLWhlbGxvJywgMCk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnU3dpdGNoLTMtaGVsbG8nLCAwKTtcbiAgICB9KTtcbn0pO1xuIiwiLy8gQnJvd3Nlci1jb21wYXRpYmxlIGV4cGVjdCBpbXBsZW1lbnRhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV4cGVjdChhY3R1YWwpIHtcbiAgICAvLyBDYXB0dXJlIHRoZSBzdGFjayB0cmFjZSBhdCB0aGUgcG9pbnQgb2YgZXhwZWN0KCkgY2FsbFxuICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2sgfHwgJyc7XG4gICAgY29uc3QgY2FsbGVyTGluZSA9IHN0YWNrLnNwbGl0KCdcXG4nKVszXSB8fCAnJzsgLy8gR2V0IHRoZSBsaW5lIHRoYXQgY2FsbGVkIGV4cGVjdCgpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9CZShleHBlY3RlZCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSB0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyA/IG1lc3NhZ2UoKSA6IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBlcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgPyBlcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgOiBgRXhwZWN0ZWQgJHtKU09OLnN0cmluZ2lmeShleHBlY3RlZCl9IGJ1dCBnb3QgJHtKU09OLnN0cmluZ2lmeShhY3R1YWwpfWA7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoZnVsbE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGVycm9yLnN0YWNrID0gZnVsbE1lc3NhZ2UgKyAnXFxuJyArIGNhbGxlckxpbmUgKyAoZXJyb3Iuc3RhY2sgPyAnXFxuJyArIGVycm9yLnN0YWNrIDogJycpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0b0JlRGVmaW5lZCgpIHtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsdWUgdG8gYmUgZGVmaW5lZCBidXQgZ290IHVuZGVmaW5lZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0b0JlVW5kZWZpbmVkKCkge1xuICAgICAgICAgICAgaWYgKGFjdHVhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB2YWx1ZSB0byBiZSB1bmRlZmluZWQgYnV0IGdvdCAke0pTT04uc3RyaW5naWZ5KGFjdHVhbCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3R1YWwgIT09ICdudW1iZXInIHx8ICEoYWN0dWFsID4gZXhwZWN0ZWQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAke2FjdHVhbH0gdG8gYmUgZ3JlYXRlciB0aGFuICR7ZXhwZWN0ZWR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvSGF2ZUxlbmd0aChleHBlY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsV2l0aExlbmd0aCA9IGFjdHVhbDtcbiAgICAgICAgICAgIGlmICghKCdsZW5ndGgnIGluIGFjdHVhbFdpdGhMZW5ndGgpIHx8IGFjdHVhbFdpdGhMZW5ndGgubGVuZ3RoICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgbGVuZ3RoICR7ZXhwZWN0ZWR9IGJ1dCBnb3QgJHthY3R1YWxXaXRoTGVuZ3RoLmxlbmd0aCB8fCAndW5kZWZpbmVkJ31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbm90OiB7XG4gICAgICAgICAgICB0b0JlKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAke0pTT04uc3RyaW5naWZ5KGFjdHVhbCl9IG5vdCB0byBiZSAke0pTT04uc3RyaW5naWZ5KGV4cGVjdGVkKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuIiwiLy8gV3JhcHBlciB0byBwcm92aWRlIHVuaWZpZWQgZXhwZWN0IGludGVyZmFjZSBmb3IgYm90aCBWaXRlc3QgYW5kIGJyb3dzZXIgZW52aXJvbm1lbnRzXG5pbXBvcnQgeyBjcmVhdGVFeHBlY3QgfSBmcm9tICcuL2V4cGVjdCc7XG4vLyBDaGVjayBpZiB3ZSdyZSBpbiBWaXRlc3QgZW52aXJvbm1lbnRcbmNvbnN0IGlzVml0ZXN0ID0gdHlwZW9mIGdsb2JhbFRoaXMudml0ZXN0ICE9PSAndW5kZWZpbmVkJztcbmNvbnN0IHZpdGVzdEV4cGVjdCA9IGlzVml0ZXN0ID8gZ2xvYmFsVGhpcy5leHBlY3QgOiBudWxsO1xuLy8gQ3JlYXRlIGEgdW5pZmllZCBleHBlY3QgZnVuY3Rpb24gdGhhdCBzdXBwb3J0cyBib3RoIHN5bnRheGVzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pZmllZEV4cGVjdCgpIHtcbiAgICBpZiAoaXNWaXRlc3QgJiYgdml0ZXN0RXhwZWN0KSB7XG4gICAgICAgIC8vIEluIFZpdGVzdCwgY3JlYXRlIGEgd3JhcHBlciB0aGF0IHN1cHBvcnRzIGN1c3RvbSBtZXNzYWdlc1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZXhwZWN0KGFjdHVhbCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiBhbiBvYmplY3QgdGhhdCBjYXB0dXJlcyB0aGUgbWVzc2FnZSBhbmQgcHJvdmlkZXMgbWF0Y2hlcnNcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVycyA9IHZpdGVzdEV4cGVjdChhY3R1YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRvQmUoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZShleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0ZXN0IGZhaWxzLCB0aHJvdyBlcnJvciB3aXRoIGN1c3RvbSBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlRGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9CZVVuZGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9IYXZlTGVuZ3RoKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvSGF2ZUxlbmd0aChleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9CZShleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLm5vdC50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0ZXJUaGFuOiAoZXhwZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RhbmRhcmQgVml0ZXN0IGV4cGVjdCB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcnMgPSB2aXRlc3RFeHBlY3QoYWN0dWFsKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubWF0Y2hlcnMsXG4gICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBjaGFpLXN0eWxlIHN5bnRheFxuICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgIGJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVyVGhhbjogKGV4cGVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpdGVzdEV4cGVjdChhY3R1YWwpLnRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgY3VzdG9tIG1lc3NhZ2UgaW4gdG9CZVxuICAgICAgICAgICAgICAgIHRvQmU6IChleHBlY3RlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcnMudG9CZShleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEluIGJyb3dzZXIsIHVzZSBvdXIgY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggZXh0ZW5kZWQgc3ludGF4XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBleHBlY3QoYWN0dWFsLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGFuIG9iamVjdCB0aGF0IGNhcHR1cmVzIHRoZSBtZXNzYWdlIGFuZCBwcm92aWRlcyBhbGwgbWF0Y2hlcnNcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVycyA9IGNyZWF0ZUV4cGVjdChhY3R1YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRvQmUoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmUoZXhwZWN0ZWQsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlRGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQmVVbmRlZmluZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9IYXZlTGVuZ3RoKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0hhdmVMZW5ndGgoZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBub3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy5ub3QudG9CZShleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0ZXJUaGFuOiAoZXhwZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcnMgPSBjcmVhdGVFeHBlY3QoYWN0dWFsKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubWF0Y2hlcnMsXG4gICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBjaGFpLXN0eWxlIHN5bnRheFxuICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgIGJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVyVGhhbjogKGV4cGVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGV4cGVjdCA9IGNyZWF0ZVVuaWZpZWRFeHBlY3QoKTtcbiIsImV4cG9ydCBmdW5jdGlvbiBjb3VudChzZWxlY3Rvcikge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKS5sZW5ndGg7XG59XG5leHBvcnQgY29uc3QgZWxtQ291bnQgPSBjb3VudDtcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeShxdWVyeSkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTsgLy8gYWxsb3cgLnN0eWxlIHRvIGp1c3Qgd29ya1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvY3VzKHEpIHtcbiAgICByZXR1cm4gcXVlcnkocSkuZm9yRWFjaChlbG0gPT4gZWxtLmZvY3VzKCkpO1xufVxuLyoqIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoLi4uKS5mb3JFYWNoKGkgPT4gaS5jbGljaygpKSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrKHEpIHtcbiAgICBjbGlja0VhY2goWy4uLnF1ZXJ5KHEpXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xpY2tFYWNoKGl0ZW1zKSB7XG4gICAgaXRlbXMuZm9yRWFjaChlbG0gPT4gZWxtLmNsaWNrKCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrQnlJZChpZCkge1xuICAgIGNsaWNrKCcjJyArIGlkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGlja09uZShxLCBpbmRleCA9IDApIHtcbiAgICBjb25zdCBlbGVtZW50ID0gcXVlcnkocSlbaW5kZXhdO1xuICAgIGVsZW1lbnQuY2xpY2soKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlkb3duT24oaW5wdXQsIGtleSkge1xuICAgIGNvbnN0IGtleUV2ZW50ID0gbmV3IEtleWJvYXJkRXZlbnQoJ2tleWRvd24nLCB7XG4gICAgICAgIGtleSxcbiAgICAgICAgYnViYmxlczogdHJ1ZSwgLy8gRW5zdXJlIHRoZSBldmVudCBidWJibGVzXG4gICAgfSk7XG4gICAgaW5wdXQuZGlzcGF0Y2hFdmVudChrZXlFdmVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5dXBPbihpbnB1dCwga2V5KSB7XG4gICAgY29uc3Qga2V5RXZlbnQgPSBuZXcgS2V5Ym9hcmRFdmVudCgna2V5dXAnLCB7XG4gICAgICAgIGtleSxcbiAgICAgICAgYnViYmxlczogdHJ1ZSwgLy8gRW5zdXJlIHRoZSBldmVudCBidWJibGVzXG4gICAgfSk7XG4gICAgaW5wdXQuZGlzcGF0Y2hFdmVudChrZXlFdmVudCk7XG59XG4vKiogZGlzcGF0Y2ggdGhlIGNoYW5nZSBldmVudCBvbiBhbiBlbGVtZW50ICovXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlZChxKSB7XG4gICAgY2hhbmdlRWFjaChbLi4ucXVlcnkocSldKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VFYWNoKGl0ZW1zKSB7XG4gICAgaXRlbXMuZm9yRWFjaChjaGFuZ2VFbG0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZU9uZShxLCBpbmRleCA9IDApIHtcbiAgICBjb25zdCB0YXJnZXQgPSBxdWVyeShxKVtpbmRleF07XG4gICAgY2hhbmdlRWxtKHRhcmdldCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlRWxtKHRhcmdldCkge1xuICAgIC8vIDsodGFyZ2V0IGFzIGFueSkuY2hhbmdlKHsgdGFyZ2V0IH0pXG4gICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGh0bWwocSkge1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgcXVlcnkocSkuZm9yRWFjaChlbG0gPT4gaHRtbCA9IGh0bWwgKyBlbG0uaW5uZXJIVE1MKTtcbiAgICByZXR1cm4gaHRtbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0Q29udGVudChxKSB7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBxdWVyeShxKS5mb3JFYWNoKGVsbSA9PiBodG1sID0gaHRtbCArIGVsbS50ZXh0Q29udGVudCk7XG4gICAgcmV0dXJuIGh0bWw7XG59XG5leHBvcnQgZnVuY3Rpb24gYnlJZChpZCkge1xuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG59XG4vKiogUmV0dXJucyBlbXB0eSBzdHJpbmcgYWxzbyB3aGVuIGVsZW1lbnQgbm90IGZvdW5kICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbEJ5SWQoaWQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIHJldHVybiBlbGVtZW50Py5pbm5lckhUTUwgfHwgJyc7XG59XG5leHBvcnQgZnVuY3Rpb24gbGFzdEJ5SWQoaWQpIHtcbiAgICBjb25zdCBlbG1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnIycgKyBpZCk7XG4gICAgcmV0dXJuIGVsbXNbZWxtcy5sZW5ndGggLSAxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBibHVyKHEpIHtcbiAgICByZXR1cm4gcXVlcnkocSkuZm9yRWFjaChlbG0gPT4gdHJpZ2dlckJsdXJFbG0oZWxtKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlKHEpIHtcbiAgICAvLyByZXR1cm4gcXVlcnkocSkuZm9yRWFjaChlbG0gPT4gdHJpZ2dlckNoYW5nZUVsbSgoZWxtIGFzIEhUTUxFbGVtZW50KSkpXG4gICAgcmV0dXJuIHF1ZXJ5KHEpLmZvckVhY2goZWxtID0+IGNoYW5nZUVsbShlbG0pKTtcbn1cbmNvbnN0IGJsdXJFdmVudCA9IG5ldyBFdmVudCgnZm9jdXNvdXQnLCB7XG4gICAgYnViYmxlczogdHJ1ZSwgLy8gQmx1ciBldmVudHMgdHlwaWNhbGx5IGRvIG5vdCBidWJibGUsIGJ1dCB0aGlzIGNhbiBiZSBzZXQgdG8gdHJ1ZSBpZiBuZWVkZWRcbiAgICBjYW5jZWxhYmxlOiBmYWxzZSAvLyBCbHVyIGV2ZW50cyBhcmUgbm90IGNhbmNlbGFibGVcbn0pO1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJCbHVyRWxtKGVsbSkge1xuICAgIGVsbS5kaXNwYXRjaEV2ZW50KGJsdXJFdmVudCk7XG59XG5jb25zdCBjaGFuZ2VFdmVudCA9IG5ldyBFdmVudCgnY2hhbmdlJywge1xuICAgIGJ1YmJsZXM6IHRydWUsIC8vIEJsdXIgZXZlbnRzIHR5cGljYWxseSBkbyBub3QgYnViYmxlLCBidXQgdGhpcyBjYW4gYmUgc2V0IHRvIHRydWUgaWYgbmVlZGVkXG4gICAgY2FuY2VsYWJsZTogZmFsc2UgLy8gQmx1ciBldmVudHMgYXJlIG5vdCBjYW5jZWxhYmxlXG59KTtcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyQ2hhbmdlRWxtKGVsbSkge1xuICAgIGVsbS5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcbn1cbiIsImltcG9ydCB7IGV4cGVjdCB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gXCIuL2VsbVNlbGVjdG9yc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdEVsbUNvdW50KHF1ZXJ5LCBjb3VudCwgbWVzc2FnZSkge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSk7XG4gICAgY29uc3QgZm91bmQgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgYEV4cGVjdGVkICR7Y291bnR9IGVsZW1lbnRzIHRvIG1hdGNoIHF1ZXJ5ICR7cXVlcnl9IGJ1dCBmb3VuZCAke2ZvdW5kfWA7XG4gICAgZXhwZWN0KGZvdW5kKS50b0JlKGNvdW50LCBtZXNzYWdlKTtcbiAgICByZXR1cm4gZWxlbWVudHM7XG59XG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0TWF0Y2hlZEh0bWwoLi4ucXVlcmllcykge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gcXVlcmllcy5yZWR1Y2UoKGFsbCwgcXVlcnkpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcbiAgICAgICAgYWxsLnB1c2goLi4uZWxlbWVudHMpO1xuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sIFtdKTtcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgZWxlbWVudHMgdG8gYmUgcHJlc2VudCBpbiBleHBlY3RNYXRjaGVkSHRtbCgpIHF1ZXJ5IGJ1dCBmb3VuZCBub25lYCk7XG4gICAgfVxuICAgIGNvbnN0IGxhc3RFbG0gPSBlbGVtZW50cy5wb3AoKTtcbiAgICBjb25zdCBsYXN0SHRtbCA9IGxhc3RFbG0uaW5uZXJIVE1MO1xuICAgIGVsZW1lbnRzLmZvckVhY2goZWxtID0+IGV4cGVjdChlbG0uaW5uZXJIVE1MKS50b0JlKGxhc3RIdG1sKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0SFRNTChzZWxlY3RvciwgZXhwZWN0ZWRIdG1sKSB7XG4gICAgZXhwZWN0KGh0bWwoc2VsZWN0b3IpKS50b0JlKGV4cGVjdGVkSHRtbCk7XG59XG5mdW5jdGlvbiB0ZXN0Q291bnRlclNlbGVjdGVkRWxlbWVudHMoY291bnRlckJ1dHRvbnMsIGNvdW50ZXJEaXNwbGF5cywgeyBlbGVtZW50Q291bnRFeHBlY3RlZCB9ID0ge1xuICAgIGVsZW1lbnRDb3VudEV4cGVjdGVkOiAxXG59LCBjb3VudGVyQnV0dG9uU2VsZWN0LCBjb3VudGVyRGlzcGxheVNlbGVjdCwgdGVzdFF1YW50aWZpZXIgPSAwKSB7XG4gICAgZXhwZWN0KGNvdW50ZXJCdXR0b25zLmxlbmd0aCkudG9CZShlbGVtZW50Q291bnRFeHBlY3RlZCwgKCkgPT4gYEV4cGVjdGVkICR7Y291bnRlckJ1dHRvblNlbGVjdH0gdG8gYmUgJHtlbGVtZW50Q291bnRFeHBlY3RlZH0gZWxlbWVudHMgYnV0IGlzIGluc3RlYWQgJHtjb3VudGVyQnV0dG9ucy5sZW5ndGh9YCk7XG4gICAgZXhwZWN0KGNvdW50ZXJEaXNwbGF5cy5sZW5ndGgpLnRvQmUoZWxlbWVudENvdW50RXhwZWN0ZWQsICgpID0+IGBFeHBlY3RlZCAke2NvdW50ZXJEaXNwbGF5U2VsZWN0fSB0byBiZSAke2VsZW1lbnRDb3VudEV4cGVjdGVkfSBlbGVtZW50cyBidXQgaXMgaW5zdGVhZCAke2NvdW50ZXJEaXNwbGF5cy5sZW5ndGh9YCk7XG4gICAgY291bnRlckJ1dHRvbnMuZm9yRWFjaCgoaW5jcmVhc2VDb3VudGVyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudGVyRGlzcGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY291bnRlckRpc3BsYXlTZWxlY3QpW2luZGV4XTsgLy8gY291bnRlckRpc3BsYXlzW2luZGV4XVxuICAgICAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5jb250YWlucyhjb3VudGVyRGlzcGxheSkpLnRvQmUodHJ1ZSwgYFRoZSBzZWxlY3RlZCBlbGVtZW50ICR7Y291bnRlckRpc3BsYXlTZWxlY3R9IGlzIG5vIGxvbmdlciBhbiBlbGVtZW50IG9uIHRoZSBkb2N1bWVudCBib2R5IEJFRk9SRSBjbGlja2luZyAke2NvdW50ZXJCdXR0b25TZWxlY3R9YCk7XG4gICAgICAgIGxldCBjb3VudGVyVmFsdWUgPSBOdW1iZXIoY291bnRlckRpc3BsYXk/LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdCh0eXBlb2YgaW5jcmVhc2VDb3VudGVyLmNsaWNrKS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgICAvLyB3aWxsIGluY3JlYXNlIGJ5IG9uZVxuICAgICAgICBpbmNyZWFzZUNvdW50ZXIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNvdW50ZXJEaXNwbGF5KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5jb250YWlucyhjb3VudGVyRGlzcGxheSkpLnRvQmUodHJ1ZSwgYFRoZSBzZWxlY3RlZCBlbGVtZW50ICR7Y291bnRlckRpc3BsYXlTZWxlY3R9IGlzIG5vIGxvbmdlciBhbiBlbGVtZW50IG9uIHRoZSBkb2N1bWVudCBib2R5IEFGVEVSIGNsaWNraW5nICR7Y291bnRlckJ1dHRvblNlbGVjdH1gKTtcbiAgICAgICAgbGV0IG5ld0NvdW50ZXJWYWx1ZSA9IGNvdW50ZXJWYWx1ZSArIDE7XG4gICAgICAgIGNvdW50ZXJWYWx1ZSA9IE51bWJlcihjb3VudGVyRGlzcGxheS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5jb250YWlucyhjb3VudGVyRGlzcGxheSkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChuZXdDb3VudGVyVmFsdWUpLnRvQmUoY291bnRlclZhbHVlLCAoKSA9PiBgQWZ0ZXIgY2xpY2sgJHtjb3VudGVyQnV0dG9uU2VsZWN0fSwgY291bnRlciB0ZXN0ICR7dGVzdFF1YW50aWZpZXIgKyAxfSBvZiAke3Rlc3RRdWFudGlmaWVyICsgMn0gZXhwZWN0ZWQgJHtjb3VudGVyRGlzcGxheVNlbGVjdH0gdG8gYmUgdmFsdWUgJHtuZXdDb3VudGVyVmFsdWV9IGJ1dCBpdCBpcyAke2NvdW50ZXJWYWx1ZX1gKTtcbiAgICAgICAgLy8gd2lsbCBpbmNyZWFzZSBieSBvbmVcbiAgICAgICAgaW5jcmVhc2VDb3VudGVyLmNsaWNrKCk7XG4gICAgICAgIGNvdW50ZXJWYWx1ZSA9IE51bWJlcihjb3VudGVyRGlzcGxheT8uaW5uZXJUZXh0KTtcbiAgICAgICAgKytuZXdDb3VudGVyVmFsdWU7XG4gICAgICAgIGV4cGVjdChuZXdDb3VudGVyVmFsdWUpLnRvQmUoY291bnRlclZhbHVlLCAoKSA9PiBgQ291bnRlciB0ZXN0ICR7dGVzdFF1YW50aWZpZXIgKyAyfSBvZiAke3Rlc3RRdWFudGlmaWVyICsgMn0gZXhwZWN0ZWQgJHtjb3VudGVyRGlzcGxheVNlbGVjdH0gdG8gaW5jcmVhc2UgdmFsdWUgdG8gJHtuZXdDb3VudGVyVmFsdWV9IGJ1dCBpdCBpcyAke2NvdW50ZXJWYWx1ZX1gKTtcbiAgICB9KTtcbn1cbi8qKiBpbmNyZWFzZXMgY291bnRlciBieSB0d28gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0Q291bnRlckVsZW1lbnRzKGNvdW50ZXJCdXR0b25TZWxlY3QsIGNvdW50ZXJEaXNwbGF5U2VsZWN0LCB7IGVsZW1lbnRDb3VudEV4cGVjdGVkIH0gPSB7XG4gICAgZWxlbWVudENvdW50RXhwZWN0ZWQ6IDFcbn0pIHtcbiAgICBjb25zdCBpbmNyZWFzZUNvdW50ZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb3VudGVyQnV0dG9uU2VsZWN0KTtcbiAgICBjb25zdCBjb3VudGVyRGlzcGxheXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvdW50ZXJEaXNwbGF5U2VsZWN0KTtcbiAgICByZXR1cm4gdGVzdENvdW50ZXJTZWxlY3RlZEVsZW1lbnRzKGluY3JlYXNlQ291bnRlcnMsIGNvdW50ZXJEaXNwbGF5cywgeyBlbGVtZW50Q291bnRFeHBlY3RlZCB9LCBjb3VudGVyQnV0dG9uU2VsZWN0LCBjb3VudGVyRGlzcGxheVNlbGVjdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoLi4uc2V0c1xuLy8gW2J1dHRvbjAsIGRpc3BsYXkwXTogW3N0cmluZywgc3RyaW5nXSwgLy8gYnV0dG9uLCBkaXNwbGF5XG4vLyBbYnV0dG9uMSwgZGlzcGxheTFdOiBbc3RyaW5nLCBzdHJpbmddLCAvLyBidXR0b24sIGRpc3BsYXlcbikge1xuICAgIGNvbnN0IFtidXR0b24wLCBkaXNwbGF5MF0gPSBzZXRzLnNoaWZ0KCk7XG4gICAgbGV0IHF1ZXJ5ID0gZXhwZWN0RWxtQ291bnQoZGlzcGxheTAsIDEpO1xuICAgIGxldCBidXR0b25RdWVyeSA9IGV4cGVjdEVsbUNvdW50KGJ1dHRvbjAsIDEpO1xuICAgIGNvbnN0IGRpc3BsYXkwRWxlbWVudCA9IHF1ZXJ5WzBdO1xuICAgIGNvbnN0IGlwMCA9IGRpc3BsYXkwRWxlbWVudC5pbm5lclRleHQ7XG4gICAgdGVzdENvdW50ZXJTZWxlY3RlZEVsZW1lbnRzKGJ1dHRvblF1ZXJ5LCBxdWVyeSwgeyBlbGVtZW50Q291bnRFeHBlY3RlZDogMSB9LCBidXR0b24wLCBkaXNwbGF5MCk7XG4gICAgbGV0IGluY3JlYXNlID0gMjtcbiAgICBzZXRzLmZvckVhY2goKFtidXR0b24xLCBkaXNwbGF5MV0sIGluZGV4KSA9PiB7XG4gICAgICAgIHF1ZXJ5ID0gZXhwZWN0RWxtQ291bnQoZGlzcGxheTEsIDEpO1xuICAgICAgICBidXR0b25RdWVyeSA9IGV4cGVjdEVsbUNvdW50KGJ1dHRvbjEsIDEpO1xuICAgICAgICBsZXQgZGlzcGxheTFFbGVtZW50ID0gcXVlcnlbMF07XG4gICAgICAgIGxldCBpcDFDaGVjayA9IGRpc3BsYXkxRWxlbWVudC5pbm5lclRleHQ7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gKE51bWJlcihpcDApICsgaW5jcmVhc2UpLnRvU3RyaW5nKCk7XG4gICAgICAgIGV4cGVjdChpcDFDaGVjaykudG9CZSh2YWx1ZSwgKCkgPT4gYEV4cGVjdGVkIHNlY29uZCAke2Rpc3BsYXkxfSBpbmNyZWFzZSBwcm92aWRlciB0byBiZSBpbmNyZWFzZWQgdG8gJHtpcDB9IGJ1dCBnb3QgJHtpcDFDaGVja31gKTtcbiAgICAgICAgdGVzdENvdW50ZXJTZWxlY3RlZEVsZW1lbnRzKGJ1dHRvblF1ZXJ5LCBxdWVyeSwgeyBlbGVtZW50Q291bnRFeHBlY3RlZDogMSB9LCBidXR0b24wLCBkaXNwbGF5MCwgaW5kZXggKyAyKTtcbiAgICAgICAgZGlzcGxheTFFbGVtZW50ID0gcXVlcnlbMF07XG4gICAgICAgIGlwMUNoZWNrID0gZGlzcGxheTFFbGVtZW50LmlubmVyVGV4dDtcbiAgICAgICAgY29uc3Qgc2Vjb25kSW5jcmVhc2UgPSBpbmNyZWFzZSArIDI7XG4gICAgICAgIGV4cGVjdChpcDFDaGVjaykudG9CZSgoTnVtYmVyKGlwMCkgKyBzZWNvbmRJbmNyZWFzZSkudG9TdHJpbmcoKSwgKCkgPT4gYEV4cGVjdGVkICR7ZGlzcGxheTF9IGlubmVyVGV4dCB0byBiZSAke051bWJlcihpcDApICsgc2Vjb25kSW5jcmVhc2V9IGJ1dCBpbnN0ZWFkIGl0IGlzICR7aXAxQ2hlY2t9YCk7XG4gICAgICAgIGluY3JlYXNlID0gaW5jcmVhc2UgKyAyO1xuICAgIH0pO1xufVxuIiwiLy8gUmUtZXhwb3J0IHRlc3QgZnVuY3Rpb25zIHRoYXQgd29yayBpbiBib3RoIGVudmlyb25tZW50c1xuLy8gVGhpcyBhbGxvd3MgdGVzdHMgdG8gd29yayBpbiBib3RoIFZpdGVzdCBhbmQgYnJvd3NlciBlbnZpcm9ubWVudHNcbi8vIEltcG9ydCBicm93c2VyIHRlc3QgcnVubmVyXG5pbXBvcnQgKiBhcyBicm93c2VyUnVubmVyIGZyb20gJy4vdGVzdFJ1bm5lcic7XG4vLyBDcmVhdGUgZW52aXJvbm1lbnQtYXdhcmUgZXhwb3J0c1xuY29uc3QgaXNWaXRlc3QgPSB0eXBlb2YgZ2xvYmFsVGhpcy52aXRlc3QgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0IGNvbnN0IGl0ID0gaXNWaXRlc3RcbiAgICA/IGdsb2JhbFRoaXMuaXRcbiAgICA6IGJyb3dzZXJSdW5uZXIuaXQ7XG5leHBvcnQgY29uc3QgZGVzY3JpYmUgPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5kZXNjcmliZVxuICAgIDogYnJvd3NlclJ1bm5lci5kZXNjcmliZTtcbmV4cG9ydCB7IGV4cGVjdCB9IGZyb20gJy4vZXhwZWN0LXdyYXBwZXInO1xuZXhwb3J0IGNvbnN0IGJlZm9yZUVhY2ggPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5iZWZvcmVFYWNoXG4gICAgOiAoKCkgPT4geyB9KTtcbmV4cG9ydCBjb25zdCBhZnRlckVhY2ggPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5hZnRlckVhY2hcbiAgICA6ICgoKSA9PiB7IH0pO1xuLy8gUmUtZXhwb3J0IGFsbCBET00gdXRpbGl0aWVzXG5leHBvcnQgKiBmcm9tICcuL2VsbVNlbGVjdG9ycyc7XG5leHBvcnQgKiBmcm9tICcuL2V4cGVjdC5odG1sJztcbiIsIi8vIFRlc3QgcnVubmVyIHRoYXQgd29ya3MgaW4gYm90aCBicm93c2VyIGFuZCBWaXRlc3QgZW52aXJvbm1lbnRzXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICcuL2V4cGVjdC13cmFwcGVyJztcbmxldCBjdXJyZW50U3VpdGUgPSBudWxsO1xubGV0IHN1aXRlcyA9IG5ldyBNYXAoKTtcbmxldCB0ZXN0UXVldWUgPSBbXTtcbi8vIENoZWNrIGlmIHdlJ3JlIGluIFZpdGVzdCBlbnZpcm9ubWVudFxuY29uc3QgaXNWaXRlc3QgPSB0eXBlb2YgZ2xvYmFsVGhpcy52aXRlc3QgIT09ICd1bmRlZmluZWQnO1xuLy8gRXhwb3J0IGZ1bmN0aW9ucyB0aGF0IHdvcmsgaW4gYm90aCBlbnZpcm9ubWVudHNcbmV4cG9ydCBjb25zdCBpdCA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLml0XG4gICAgOiAobmFtZSwgZm4pID0+IHtcbiAgICAgICAgY29uc3QgdGVzdCA9IHsgbmFtZSwgZm4sIHN1aXRlOiBjdXJyZW50U3VpdGUgfTtcbiAgICAgICAgdGVzdFF1ZXVlLnB1c2godGVzdCk7XG4gICAgICAgIC8vIEFkZCB0byBzdWl0ZSBtYXBcbiAgICAgICAgY29uc3Qgc3VpdGVUZXN0cyA9IHN1aXRlcy5nZXQoY3VycmVudFN1aXRlKSB8fCBbXTtcbiAgICAgICAgc3VpdGVUZXN0cy5wdXNoKHRlc3QpO1xuICAgICAgICBzdWl0ZXMuc2V0KGN1cnJlbnRTdWl0ZSwgc3VpdGVUZXN0cyk7XG4gICAgfTtcbmV4cG9ydCBjb25zdCBkZXNjcmliZSA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLmRlc2NyaWJlXG4gICAgOiAobmFtZSwgZm4pID0+IHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTdWl0ZSA9IGN1cnJlbnRTdWl0ZTtcbiAgICAgICAgY3VycmVudFN1aXRlID0gbmFtZTtcbiAgICAgICAgc3VpdGVzLnNldChuYW1lLCBbXSk7XG4gICAgICAgIGZuKCk7IC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgdG8gY29sbGVjdCB0ZXN0c1xuICAgICAgICBjdXJyZW50U3VpdGUgPSBwcmV2aW91c1N1aXRlO1xuICAgIH07XG4vLyBSZS1leHBvcnQgZXhwZWN0IGZyb20gd3JhcHBlclxuZXhwb3J0IHsgZXhwZWN0IH07XG4vLyBFeGVjdXRlIHRlc3RzIGluIGJyb3dzZXIgZW52aXJvbm1lbnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlQnJvd3NlclRlc3RzKCkge1xuICAgIGxldCBwYXNzZWQgPSAwO1xuICAgIGxldCBmYWlsZWQgPSAwO1xuICAgIGNvbnN0IGZhaWx1cmVzID0gW107XG4gICAgY29uc29sZS5sb2coYPCfp6ogUnVubmluZyAke3Rlc3RRdWV1ZS5sZW5ndGh9IHRlc3RzLi4uXFxuYCk7XG4gICAgLy8gR3JvdXAgdGVzdHMgYnkgc3VpdGUgZm9yIGJldHRlciBvdXRwdXRcbiAgICBjb25zdCB0ZXN0c0J5U3VpdGUgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB0ZXN0IG9mIHRlc3RRdWV1ZSkge1xuICAgICAgICBjb25zdCBrZXkgPSB0ZXN0LnN1aXRlIHx8IG51bGw7XG4gICAgICAgIGNvbnN0IHN1aXRlVGVzdHMgPSB0ZXN0c0J5U3VpdGUuZ2V0KGtleSkgfHwgW107XG4gICAgICAgIHN1aXRlVGVzdHMucHVzaCh0ZXN0KTtcbiAgICAgICAgdGVzdHNCeVN1aXRlLnNldChrZXksIHN1aXRlVGVzdHMpO1xuICAgIH1cbiAgICAvLyBSdW4gdGVzdHMgZ3JvdXBlZCBieSBzdWl0ZVxuICAgIGZvciAoY29uc3QgW3N1aXRlTmFtZSwgdGVzdHNdIG9mIHRlc3RzQnlTdWl0ZSkge1xuICAgICAgICBpZiAoc3VpdGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtzdWl0ZU5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0ZXN0IG9mIHRlc3RzKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRlbnQgPSBzdWl0ZU5hbWUgPyAnICAnIDogJyc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3QuZm4oKTtcbiAgICAgICAgICAgICAgICBwYXNzZWQrKztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR94pyFICR7dGVzdC5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZmFpbGVkKys7XG4gICAgICAgICAgICAgICAgZmFpbHVyZXMucHVzaCh7IHRlc3Q6IHRlc3QubmFtZSwgc3VpdGU6IHRlc3Quc3VpdGUsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke2luZGVudH3inYwgJHt0ZXN0Lm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1aXRlTmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJycpOyAvLyBFbXB0eSBsaW5lIGFmdGVyIHN1aXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coYFxcbvCfk4ogVGVzdCBSZXN1bHRzOiAke3Bhc3NlZH0gcGFzc2VkLCAke2ZhaWxlZH0gZmFpbGVkYCk7XG4gICAgaWYgKGZhaWx1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignXFxu4p2MIEZhaWxlZCBUZXN0czonKTtcbiAgICAgICAgZmFpbHVyZXMuZm9yRWFjaCgoeyB0ZXN0LCBzdWl0ZSwgZXJyb3IgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbE5hbWUgPSBzdWl0ZSA/IGAke3N1aXRlfSA+ICR7dGVzdH1gIDogdGVzdDtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFxcbiR7ZnVsbE5hbWV9OmApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZXh0cmFjdCBUeXBlU2NyaXB0IGZpbGUgcmVmZXJlbmNlcyBmcm9tIHN0YWNrXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhY2tMaW5lcyA9IGVycm9yLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICBzdGFja0xpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCcudHM6JykgJiYgIWxpbmUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGxpbmUudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2xlYXIgcXVldWVzIGZvciBuZXh0IHJ1blxuICAgIHRlc3RRdWV1ZSA9IFtdO1xuICAgIHN1aXRlcy5jbGVhcigpO1xuICAgIGN1cnJlbnRTdWl0ZSA9IG51bGw7XG4gICAgcmV0dXJuIGZhaWxlZCA9PT0gMDtcbn1cbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGNsaWNrLCBjbGlja09uZSwgZm9jdXMsIGtleWRvd25PbiwgcXVlcnkgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ+KYke+4jyB0b2RvcycsIGZ1bmN0aW9uIHRvZG9zKCkge1xuICAgIGNvbnN0IHRvZG9JbnB1dCA9IHF1ZXJ5KCcubmV3LXRvZG8nKVswXTtcbiAgICBpdCgndG9kb3MgYWRkIG9uZSByZW1vdmUgb25lJywgYXN5bmMgZnVuY3Rpb24gYWRkT25lUmVtb3ZlT25lKCkge1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICBjbGljaygnI3RvZG8tdmlldy1hbGwtbGluaycpO1xuICAgICAgICBhd2FpdCBzbGVlcCgxKTsgLy8gd2luZG93IHJvdXRlIGNoYW5nZSB0YWtlcyBhIHRpY2tcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KHRvZG9JbnB1dCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgdG9kb0lucHV0LnZhbHVlID0gJ29uZSc7XG4gICAgICAgIGtleWRvd25Pbih0b2RvSW5wdXQsICdFbnRlcicpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDEpOyAvLyBleHBlY3RlZCBvbmUgbmV3IHRvZG9cbiAgICAgICAgLy8gZGVsZXRlIGl0XG4gICAgICAgIGNsaWNrKCdidXR0b24uZGVzdHJveScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCd0b2RvcyBiYXNpYycsIGFzeW5jIGZ1bmN0aW9uIGJhc2ljKCkge1xuICAgICAgICAvLyBjbGljaygnI3RvZG8tdmlldy1hbGwtbGluaycpXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyMvJztcbiAgICAgICAgYXdhaXQgc2xlZXAoMSk7IC8vIHdpbmRvdyByb3V0ZSBjaGFuZ2UgdGFrZXMgYSB0aWNrXG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICAgIHRvZG9JbnB1dC52YWx1ZSA9ICdvbmUnO1xuICAgICAgICBrZXlkb3duT24odG9kb0lucHV0LCAnRW50ZXInKTtcbiAgICAgICAgLy8gY2hlY2tib3ggdG9nZ2xlXG4gICAgICAgIGNsaWNrKCdpbnB1dC50b2dnbGUnKTtcbiAgICAgICAgLy8gZGVsZXRlIGl0XG4gICAgICAgIGNsaWNrKCdidXR0b24uZGVzdHJveScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDApOyAvLyBleHBlY3RlZCB0b2RvIDAgZGVsZXRlZFxuICAgICAgICB0b2RvSW5wdXQudmFsdWUgPSAnb25lJztcbiAgICAgICAga2V5ZG93bk9uKHRvZG9JbnB1dCwgJ0VudGVyJyk7XG4gICAgICAgIHRvZG9JbnB1dC52YWx1ZSA9ICd0d28nO1xuICAgICAgICBrZXlkb3duT24odG9kb0lucHV0LCAnRW50ZXInKTtcbiAgICAgICAgY29uc3QgdG9kb1RvZ2dsZTIgPSBxdWVyeSgnaW5wdXQudG9nZ2xlJylbMV07XG4gICAgICAgIHRvZG9Ub2dnbGUyLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdCh0b2RvVG9nZ2xlMi5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICB0b2RvSW5wdXQudmFsdWUgPSAndGhyZWUnO1xuICAgICAgICBrZXlkb3duT24odG9kb0lucHV0LCAnRW50ZXInKTsgLy8gRW50ZXJcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMyk7XG4gICAgICAgIGNsaWNrKCcjdG9kby12aWV3LWFjdGl2ZS1saW5rJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDMpOyAvLyBhY3RpdmUgdG9kbyBjb3VudCBiZWZvcmUgcGFnZSBjaGFuZ2VcbiAgICAgICAgZXhwZWN0KHdpbmRvdy5sb2NhdGlvbi5oYXNoKS50b0JlKCcjL2FjdGl2ZScpO1xuICAgICAgICBhd2FpdCBzbGVlcCgxKTsgLy8gd2luZG93IHJvdXRlIGNoYW5nZSB0YWtlcyBhIHRpY2tcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMik7IC8vIGFjdGl2ZSB0b2RvIGNvdW50IGFmdGVyIHBhZ2UgY2hhbmdlXG4gICAgICAgIGNsaWNrKCcjdG9kby12aWV3LWNvbXBsZXRlZC1saW5rJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEpOyAvLyB3aW5kb3cgcm91dGUgY2hhbmdlIHRha2VzIGEgdGlja1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgxKTsgLy8gY29tcGxldGVkIHRvZG8gY291bnRcbiAgICAgICAgY2xpY2soJyN0b2RvLXZpZXctYWxsLWxpbmsnKTtcbiAgICAgICAgYXdhaXQgc2xlZXAoMSk7IC8vIHdpbmRvdyByb3V0ZSBjaGFuZ2UgdGFrZXMgYSB0aWNrXG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDMpOyAvLyB2aWV3IGFsbCB0b2RvIGNvdW50XG4gICAgICAgIC8vIGRlbGV0ZSAwXG4gICAgICAgIGNsaWNrT25lKCdidXR0b24uZGVzdHJveScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgICAgLy8gZGVsZXRlIDBcbiAgICAgICAgY2xpY2tPbmUoJ2J1dHRvbi5kZXN0cm95Jyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICAvLyBkZWxldGUgMFxuICAgICAgICBjbGlja09uZSgnYnV0dG9uLmRlc3Ryb3knKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ3RvZG9zIGVkaXRpbmcnLCBmdW5jdGlvbiBlZGl0aW5nKCkge1xuICAgICAgICAvLyBjcmVhdGUgdG9kb1xuICAgICAgICB0b2RvSW5wdXQudmFsdWUgPSAnb25lJztcbiAgICAgICAga2V5ZG93bk9uKHRvZG9JbnB1dCwgJ0VudGVyJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQjZWRpdC10b2RvLWlucHV0JykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICAvLyBwcmVwYXJlIHRvIG1ha2UgbmV3IHRvZG8gYmVjb21lIGVkaXRhYmxlXG4gICAgICAgIGxldCBldmVudCA9IG5ldyBNb3VzZUV2ZW50KCdkYmxjbGljaycsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsIC8vIEV2ZW50IHdpbGwgYnViYmxlIHVwIHRocm91Z2ggdGhlIERPTVxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSwgLy8gRXZlbnQgY2FuIGJlIGNhbmNlbGxlZFxuICAgICAgICAgICAgdmlldzogd2luZG93IC8vIERlZmF1bHQgdmlldyAod2luZG93KVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV2ZW50IG9uIHRoZSBzcGVjaWZpZWQgZWxlbWVudFxuICAgICAgICBxdWVyeSgnbGFiZWxbZGF0YS10ZXN0aWQ9XCJ0b2RvLWl0ZW0tbGFiZWxcIl0nKVswXS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgLy8gc2hvdWxkIGhhdmUgdHdvIGlucHV0cywgdGhlIG1haW4gYW5kIHRoZSBlZGl0XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQubmV3LXRvZG8nKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQjZWRpdC10b2RvLWlucHV0JykubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICBmb2N1cygnaW5wdXQjZWRpdC10b2RvLWlucHV0Jyk7XG4gICAgICAgIGNvbnN0IGVkaXRJbnB1dCA9IHF1ZXJ5KCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKVswXTtcbiAgICAgICAgZWRpdElucHV0LnZhbHVlID0gJ3R3byc7XG4gICAgICAgIGtleWRvd25PbihlZGl0SW5wdXQsICdFbnRlcicpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDEpOyAvLyBleHBlY3RlZCBvbmx5IG9uZSBkZWxldGUgYnV0dG9uXG4gICAgICAgIC8vIG1haW4gaW5wdXQgKyBhcnJheSBpbnB1dFxuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0Lm5ldy10b2RvJykubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpLmxlbmd0aCkudG9CZSgwKTsgLy8gZW50ZXIga2V5IGFscmVhZHkgaGlkIGl0XG4gICAgICAgIC8vIGJsdXIoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpXG4gICAgICAgIC8vIGV4cGVjdChxdWVyeSgnaW5wdXQjZWRpdC10b2RvLWlucHV0JykubGVuZ3RoKS50b0JlKDApXG4gICAgICAgIC8vIGRlbGV0ZSAwXG4gICAgICAgIGNsaWNrT25lKCdidXR0b24uZGVzdHJveScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgn4oya77iPIHRvZG9zIHNwZWVkb21ldGVyJywgcnVuVG9kb1NwZWVkb21ldGVyKTtcbn0pO1xuZnVuY3Rpb24gcnVuVG9kb1NwZWVkb21ldGVyKCkge1xuICAgIGNvbnN0IG51bWJlck9mSXRlbXNUb0FkZCA9IDUwMDtcbiAgICBjb25zb2xlLnRpbWUoJ+KYgO+4jy1zcGVlZG9tZXRlci1hbGwnKTtcbiAgICBjb25zb2xlLnRpbWUoJ/CfhpUgc3BlZWRvbWV0ZXItYWRkaW5nJyk7XG4gICAgY29uc3QgbmV3VG9kbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3LXRvZG9cIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkl0ZW1zVG9BZGQ7IGkrKykge1xuICAgICAgICBuZXdUb2RvLnZhbHVlID0gJ2FhYSAtICcgKyBpO1xuICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXZlbnQgb24gdGhlIGNoaWxkIGVsZW1lbnRcbiAgICAgICAga2V5ZG93bk9uKG5ld1RvZG8sICdFbnRlcicpO1xuICAgIH1cbiAgICBjb25zb2xlLnRpbWVFbmQoJ/CfhpUgc3BlZWRvbWV0ZXItYWRkaW5nJyk7XG4gICAgY29uc29sZS50aW1lKCfinI/vuI8gc3BlZWRvbWV0ZXItZWRpdGluZycpO1xuICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRvZ2dsZVwiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mSXRlbXNUb0FkZDsgaSsrKVxuICAgICAgICBjaGVja2JveGVzW2ldLmNsaWNrKCk7XG4gICAgY29uc29sZS50aW1lRW5kKCfinI/vuI8gc3BlZWRvbWV0ZXItZWRpdGluZycpO1xuICAgIGNvbnNvbGUudGltZSgn8J+Xke+4jyBzcGVlZG9tZXRlci1kZWxldGluZycpO1xuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRlc3Ryb3lcIik7XG4gICAgZm9yIChsZXQgaSA9IG51bWJlck9mSXRlbXNUb0FkZCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICBkZWxldGVCdXR0b25zW2ldLmNsaWNrKCk7XG4gICAgY29uc29sZS50aW1lRW5kKCfwn5eR77iPIHNwZWVkb21ldGVyLWRlbGV0aW5nJyk7XG4gICAgY29uc29sZS50aW1lRW5kKCfimIDvuI8tc3BlZWRvbWV0ZXItYWxsJyk7XG59XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBjbGljaywgaHRtbCwgaHRtbEJ5SWQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgZXhwZWN0TWF0Y2hlZEh0bWwgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ+KMmu+4jyB3YXRjaCB0ZXN0cycsICgpID0+IHtcbiAgICBjb25zdCBzbG93Q291bnQgPSBodG1sKCcj8J+NhC1zbG93Q2hhbmdlQ291bnQnKTtcbiAgICAvLyB0ZXN0cyBjYW4gYmUgcnVuIG11bHRpcGxlIHRpbWVzLiBPbmx5IHRoZSBmaXJzdCB0aW1lIHdpbGwgdGhpcyBleHBlY3QgYmVsb3cgd29ya1xuICAgIGNvbnN0IGZpcnN0UnVuID0gc2xvd0NvdW50ID09PSAnMCc7XG4gICAgaXQoJ2Jhc2ljJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFydENvdW50ID0gTnVtYmVyKGh0bWxCeUlkKCd3YXRjaC10ZXN0aW5nLW51bS1kaXNwbGF5JykpO1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI3dhdGNoLXRlc3RpbmctbnVtLWRpc3BsYXknLCAnI/CfjYQtc2xvd0NoYW5nZUNvdW50Jyk7XG4gICAgICAgIC8vIGFsd2F5cyBzdGFydHMgYXQgXCJmYWxzZVwiXG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZScpKS50b0JlKCdmYWxzZScpO1xuICAgICAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKCcj8J+NhC13YXRjaFByb3BOdW1TbG93JykpLnRvQmUoJycpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGgnKSkudG9CZSgnZmFsc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKCcj8J+mty13YXRjaFRydXRoQXNTdWInKSkudG9CZSgnJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI/CfjYQtd2F0Y2hQcm9wTnVtU2xvdycpKS50b0JlKHNsb3dDb3VudCk7XG4gICAgICAgICAgICBleHBlY3QoTnVtYmVyKGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGgnKSkpLnRvQmVHcmVhdGVyVGhhbihOdW1iZXIoc2xvd0NvdW50KSk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aEFzU3ViJykpLnRvQmUoaHRtbCgnI/CfprctdHJ1dGhTdWJDaGFuZ2VDb3VudCcpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGljaygnI3dhdGNoLXRlc3RpbmctbnVtLWJ1dHRvbicpO1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI3dhdGNoLXRlc3RpbmctbnVtLWRpc3BsYXknLCAnI/CfjYQtc2xvd0NoYW5nZUNvdW50Jyk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcj8J+NhC13YXRjaFByb3BOdW1TbG93JywgJyPwn42ELXNsb3dDaGFuZ2VDb3VudCcpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/CfjYTigI3wn5+rLXN1YmplY3RDaGFuZ2VDb3VudCcpKS50b0JlKChzdGFydENvdW50ICsgMikudG9TdHJpbmcoKSk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcj8J+NhOKAjfCfn6stc3ViamVjdENoYW5nZUNvdW50JywgJyPwn42E4oCN8J+fqy13YXRjaFByb3BOdW1TdWJqZWN0Jyk7XG4gICAgICAgIGNvbnN0IHRydXRoU3RhcnRDb3VudCA9IE51bWJlcihodG1sKCcj8J+mty10cnV0aENoYW5nZUNvdW50JykpO1xuICAgICAgICBjbGljaygnI/CfprctdHJ1dGhDaGFuZ2UtYnV0dG9uJyk7XG4gICAgICAgIGxldCBuZXdDb3VudCA9ICh0cnV0aFN0YXJ0Q291bnQgKyAxKS50b1N0cmluZygpO1xuICAgICAgICAvLyBpdHMgYmVlbiBjaGFuZ2VkIHRvIFwidHJ1ZVwiLCB0aGF0IGNhdXNlcyBhIGNoYW5nZSB3YXRjaCBjb3VudCBpbmNyZWFzZVxuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2UnKSkudG9CZSgndHJ1ZScpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aCcpKS50b0JlKG5ld0NvdW50KTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlQ291bnQnKSkudG9CZShuZXdDb3VudCk7XG4gICAgICAgIGNsaWNrKCcj8J+mty10cnV0aENoYW5nZS1idXR0b24nKTtcbiAgICAgICAgbmV3Q291bnQgPSAodHJ1dGhTdGFydENvdW50ICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gaXRzIGJlZW4gY2hhbmdlZCB0byBiYWNrIHRvIFwiZmFsc2VcIiwgdGhhdCBkb2VzIE5PVCBjYXVzZSBhIGNoYW5nZSB3YXRjaCBjb3VudCBpbmNyZWFzZVxuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2UnKSkudG9CZSgnZmFsc2UnKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGgnKSkudG9CZShuZXdDb3VudCk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZUNvdW50JykpLnRvQmUobmV3Q291bnQpO1xuICAgICAgICBjbGljaygnI/CfprctdHJ1dGhDaGFuZ2UtYnV0dG9uJyk7XG4gICAgICAgIC8vIGl0cyBiZWVuIGNoYW5nZWQgdG8gXCJ0cnVlXCIsIHRoYXQgY2F1c2VzIGEgY2hhbmdlIHdhdGNoIGNvdW50IGluY3JlYXNlXG4gICAgICAgIG5ld0NvdW50ID0gKHRydXRoU3RhcnRDb3VudCArIDIpLnRvU3RyaW5nKCk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZScpKS50b0JlKCd0cnVlJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty13YXRjaFRydXRoJykpLnRvQmUobmV3Q291bnQpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2VDb3VudCcpKS50b0JlKG5ld0NvdW50KTtcbiAgICAgICAgY2xpY2soJyPwn6a3LXRydXRoQ2hhbmdlLWJ1dHRvbicpOyAvLyByZXNldCBzbyB0ZXN0cyBjYW4gcGFzcyBldmVyeSB0aW1lXG4gICAgICAgIGNsaWNrKCcj8J+mty1yZXNldC1idXR0b24nKTsgLy8gcmVzZXQgc28gdGVzdHMgY2FuIHBhc3MgZXZlcnkgdGltZVxuICAgICAgICBjb25zdCBkaXNwbGF5ID0gaHRtbCgnI/Cfprctd2F0Y2hUcnV0aCcpO1xuICAgICAgICBjb25zdCBhY3R1YWwgPSBodG1sKCcj8J+mty13YXRjaFRydXRoQXNTdWInKTtcbiAgICAgICAgZXhwZWN0KGFjdHVhbCkudG9CZShkaXNwbGF5KTsgLy8gTGFzdCB0ZXN0IGV4cGVjdGVkICPwn6a3LXdhdGNoVHJ1dGhBc1N1YiAke2Rpc3BsYXl9IGJ1dCBpdCB3YXMgJHthY3R1YWx9XG4gICAgfSk7XG59KTtcbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmV4cG9ydCBjb25zdCB2YXJpYWJsZVByZWZpeCA9ICc6dGFndmFyJztcbmV4cG9ydCBjb25zdCB2YXJpYWJsZVN1ZmZpeCA9ICc6JztcbiIsIi8qKiBMb29raW5nIGZvciAoY2xhc3MgfCBzdHlsZSkgZm9sbG93ZWQgYnkgYSBwZXJpb2QgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpYWxBdHRyKGF0dHJOYW1lKSB7XG4gICAgaWYgKGF0dHJOYW1lLnN0YXJ0c1dpdGgoJ2NsYXNzLicpKSB7XG4gICAgICAgIHJldHVybiAnY2xhc3MnO1xuICAgIH1cbiAgICBjb25zdCBzcGVjaWFsQWN0aW9uID0gaXNTcGVjaWFsQWN0aW9uKGF0dHJOYW1lKTtcbiAgICBpZiAoc3BlY2lhbEFjdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpYWxBY3Rpb247XG4gICAgfVxuICAgIGlmIChhdHRyTmFtZS5zdGFydHNXaXRoKCdzdHlsZS4nKSkge1xuICAgICAgICByZXR1cm4gJ3N0eWxlJztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3BlY2lhbEFjdGlvbihhdHRyTmFtZSkge1xuICAgIHN3aXRjaCAoYXR0ck5hbWUpIHtcbiAgICAgICAgY2FzZSAnYXV0b3NlbGVjdCc6XG4gICAgICAgICAgICByZXR1cm4gJ2F1dG9zZWxlY3QnO1xuICAgICAgICBjYXNlICdhdXRvZm9jdXMnOlxuICAgICAgICAgICAgcmV0dXJuICdhdXRvZm9jdXMnO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyB2YXJpYWJsZVN1ZmZpeCwgdmFyaWFibGVQcmVmaXggfSBmcm9tIFwiLi4vLi4vdGFnL0RvbVRhZy50eXBlLmpzXCI7XG5leHBvcnQgY29uc3QgcGxhY2Vob2xkZXJSZWdleCA9IG5ldyBSZWdFeHAodmFyaWFibGVQcmVmaXggKyAnKFxcXFxkKyknICsgdmFyaWFibGVTdWZmaXgsICdnJyk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFnVmFySW5kZXgodmFsdWUpIHtcbiAgICBpZiAodmFsdWUuc2VhcmNoICYmIHZhbHVlLnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5zZWFyY2gocGxhY2Vob2xkZXJSZWdleCk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbiIsImltcG9ydCB7IHZhcmlhYmxlUHJlZml4LCB2YXJpYWJsZVN1ZmZpeCB9IGZyb20gXCIuLi8uLi90YWcvRG9tVGFnLnR5cGUuanNcIjtcbmltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tIFwiLi4vYXR0cmlidXRlcy9pc1NwZWNpYWxBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGZha2VUYWdzUmVnRXgsIGZpbmRSZWFsVGFnc1JlZ0V4IH0gZnJvbSBcIi4vaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHBsYWNlaG9sZGVyUmVnZXggfSBmcm9tIFwiLi4vLi4vcmVuZGVyL2F0dHJpYnV0ZXMvZ2V0VGFnVmFySW5kZXguZnVuY3Rpb24uanNcIjtcbmNvbnN0IGZyYWdGaW5kQW55ID0gLyg6dGFndmFyXFxkKzopLztcbmNvbnN0IG9uZG91YmxlY2xpY2sgPSAnb25kb3VibGVjbGljayc7XG5jb25zdCByZWdleEF0dHIgPSAvKFs6X2EtekEtWjAtOVxcLS5dKylcXHMqKD86PVxccypcIihbXlwiXSopXCJ8PVxccyooXFxTKykpPy9nO1xuY29uc3QgcmVnZXhUYWdPcmcgPSAvPFxcLz8oW2EtekEtWjAtOS1dKykoKD86XFxzK1thLXpBLVpfOipdW1xcdzouLV0qKD86XFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzXCInPTw+YF0rKSk/KStcXHMqfFxccyopXFwvPz4vZztcbi8qKiBNYWluIHN0YXJ0IG9mIHN0cmluZyBwYXJzaW5nICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIVE1MKGh0bWwpIHtcbiAgICBjb25zdCB2YWx1ZVBvc2l0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICBsZXQgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgIGxldCB2YWx1ZUluZGV4ID0gLTE7XG4gICAgbGV0IHBvc2l0aW9uID0gMDtcbiAgICBjb25zdCByZWdleFRhZyA9IG5ldyBSZWdFeHAocmVnZXhUYWdPcmcsICdnJyk7XG4gICAgaHRtbCA9IHByZXByb2Nlc3NUYWdzSW5Db21tZW50cyhodG1sKTtcbiAgICB3aGlsZSAocG9zaXRpb24gPCBodG1sLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB0YWdNYXRjaCA9IHJlZ2V4VGFnLmV4ZWMoaHRtbCk7XG4gICAgICAgIGlmICghdGFnTWF0Y2gpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtmdWxsTWF0Y2gsIHRhZ05hbWUsIGF0dHJTdHJpbmddID0gdGFnTWF0Y2g7XG4gICAgICAgIGNvbnN0IGlzQ2xvc2luZ1RhZyA9IGZ1bGxNYXRjaC5zdGFydHNXaXRoKCc8LycpO1xuICAgICAgICBjb25zdCBpc1NlbGZDbG9zaW5nID0gZnVsbE1hdGNoLmVuZHNXaXRoKCcvPicpO1xuICAgICAgICBpZiAocG9zaXRpb24gPCB0YWdNYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBodG1sLnNsaWNlKHBvc2l0aW9uLCB0YWdNYXRjaC5pbmRleCk7XG4gICAgICAgICAgICBpZiAodGV4dENvbnRlbnQudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dFZhck1hdGNoZXMgPSBzcGxpdEJ5VGFnVmFyKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ZXh0Q29udGVudCBvZiB0ZXh0VmFyTWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dENvbnRlbnQuc3RhcnRzV2l0aCh2YXJpYWJsZVByZWZpeCkgJiYgdGV4dENvbnRlbnQuc2VhcmNoKGZyYWdGaW5kQW55KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBpdHMgbm90IGZha2UgdGhlbiBsZXRzIG5vdyBjb25zaWRlciB0aGlzIGEgcmVhbCB2YXJpYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRDb250ZW50LnNlYXJjaChmYWtlVGFnc1JlZ0V4KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudCA9IHZhcmlhYmxlUHJlZml4ICsgKCsrdmFsdWVJbmRleCkgKyB2YXJpYWJsZVN1ZmZpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwdXNoVGV4dFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbiA9IHRhZ01hdGNoLmluZGV4ICsgZnVsbE1hdGNoLmxlbmd0aDtcbiAgICAgICAgaWYgKGlzQ2xvc2luZ1RhZykge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBzdGFjay5wb3AoKSB8fCBudWxsO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICBsZXQgYXR0ck1hdGNoO1xuICAgICAgICB3aGlsZSAoKGF0dHJNYXRjaCA9IHJlZ2V4QXR0ci5leGVjKGF0dHJTdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVJbmRleCA9IHBhcnNlQXR0clN0cmluZyhhdHRyTWF0Y2gsIHZhbHVlSW5kZXgsIHZhbHVlUG9zaXRpb25zLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGVtZW50ID0ge1xuICAgICAgICAgICAgbm46IHRhZ05hbWUsIC8vIG5vZGVOYW1lXG4gICAgICAgIH07XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZWxlbWVudC5hdCA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRFbGVtZW50LmNoKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQuY2ggPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LmNoLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNTZWxmQ2xvc2luZykge1xuICAgICAgICAgICAgc3RhY2sucHVzaChjdXJyZW50RWxlbWVudCk7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uIDwgaHRtbC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBodG1sLnNsaWNlKHBvc2l0aW9uKTtcbiAgICAgICAgaWYgKHRleHRDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgY29uc3QgdGV4dFZhck1hdGNoZXMgPSBzcGxpdEJ5VGFnVmFyKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGV4dENvbnRlbnQgb2YgdGV4dFZhck1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGV4dENvbnRlbnQuc3RhcnRzV2l0aCh2YXJpYWJsZVByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgKyt2YWx1ZUluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwdXNoVGV4dFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cztcbn1cbmNvbnN0IHJlbW92ZUNvbW1lbnRSZWdYID0gbmV3IFJlZ0V4cCgnKDwhLS1bXFxcXHNcXFxcU10qPy0tPiknLCAnZycpO1xuZnVuY3Rpb24gcHJlcHJvY2Vzc1RhZ3NJbkNvbW1lbnRzKGh0bWwpIHtcbiAgICAvLyBVc2UgYSByZWdleCB0byBmaW5kIGFsbCBIVE1MIGNvbW1lbnRzXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZShyZW1vdmVDb21tZW50UmVnWCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIC8vIEZvciBlYWNoIGNvbW1lbnQgZm91bmQsIHJlcGxhY2UgPCBhbmQgPiBpbnNpZGUgaXRcbiAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoL1xcW2wgdFxcXS9nLCAnW2wmbmJzcDt0XScpLnJlcGxhY2UoL1xcW2cgdFxcXS9nLCAnW2cmbmJzcDt0XScpLnJlcGxhY2UoLzwvZywgJ1tsIHRdJykucmVwbGFjZSgvPi9nLCAnW2cgdF0nKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFuRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICAgIGlmIChldmVudE5hbWUuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBjb25zdCBjb3VsZEJ5RGJsQ2xpY2sgPSBldmVudE5hbWUubGVuZ3RoID09PSBvbmRvdWJsZWNsaWNrLmxlbmd0aCAmJiBldmVudE5hbWUgPT09IG9uZG91YmxlY2xpY2s7XG4gICAgICAgIGlmIChjb3VsZEJ5RGJsQ2xpY2spIHtcbiAgICAgICAgICAgIHJldHVybiAnZGJsY2xpY2snO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudE5hbWUuc2xpY2UoMiwgZXZlbnROYW1lLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBldmVudE5hbWU7XG59XG5mdW5jdGlvbiBwdXNoVGV4dFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dENvbnRlbnQpIHtcbiAgICBjb25zdCB0ZXh0Tm9kZSA9IHtcbiAgICAgICAgbm46ICd0ZXh0JywgLy8gbm9kZU5hbWVcbiAgICAgICAgdGM6IHBvc3RQcm9jZXNzVGFnc0luQ29tbWVudHModGV4dENvbnRlbnQpLCAvLyB0ZXh0Q29udGVudFxuICAgIH07XG4gICAgcHVzaFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dE5vZGUpO1xufVxuLyoqIFRPRE86IFRoaXMgaGFzIGdvdCB0byBiZSB0b28gZXhwZW5zaXZlICovXG5mdW5jdGlvbiBwb3N0UHJvY2Vzc1RhZ3NJbkNvbW1lbnRzKGh0bWwpIHtcbiAgICAvLyBVc2UgYSByZWdleCB0byBmaW5kIGFsbCBzZWdtZW50cyB0aGF0IGxvb2sgbGlrZSBwcm9jZXNzZWQgY29tbWVudHNcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC8oXFxbbCB0XFxdIS0tW1xcc1xcU10qPy0tXFxbZyB0XFxdKS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgLy8gRm9yIGVhY2ggcHJvY2Vzc2VkIGNvbW1lbnQgZm91bmQsIHJlcGxhY2UgKmx0KiBhbmQgKmd0KiBiYWNrIHRvIDwgYW5kID5cbiAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoL1xcW2wgdFxcXS9nLCAnPCcpLnJlcGxhY2UoL1xcW2cgdFxcXS9nLCAnPicpLnJlcGxhY2UoL1xcW2wmbmJzcDt0XFxdL2csICdbbCB0XScpLnJlcGxhY2UoL1xcW2cmbmJzcDt0XFxdL2csICdbZyB0XScpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcHVzaFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dE5vZGUpIHtcbiAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFjdXJyZW50RWxlbWVudC5jaCkge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQuY2ggPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50RWxlbWVudC5jaC5wdXNoKHRleHROb2RlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnRzLnB1c2godGV4dE5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNwbGl0QnlUYWdWYXIoaW5wdXRTdHJpbmcpIHtcbiAgICAvLyBTcGxpdCB0aGUgc3RyaW5nIHVzaW5nIHRoZSByZWd1bGFyIGV4cHJlc3Npb24sIGtlZXAgZGVsaW1pdGVycyBpbiB0aGUgb3V0cHV0XG4gICAgY29uc3QgcGFydHMgPSBpbnB1dFN0cmluZy5zcGxpdChmcmFnRmluZEFueSk7XG4gICAgLy8gRmlsdGVyIG91dCBhbnkgZW1wdHkgc3RyaW5ncyBmcm9tIHRoZSByZXN1bHRzXG4gICAgY29uc3QgZmlsdGVyZWRQYXJ0cyA9IHBhcnRzLmZpbHRlcihub3RFbXB0eVN0cmluZ01hcHBlcik7XG4gICAgcmV0dXJuIGZpbHRlcmVkUGFydHM7XG59XG5mdW5jdGlvbiBub3RFbXB0eVN0cmluZ01hcHBlcihwYXJ0KSB7XG4gICAgcmV0dXJuIHBhcnQgIT09ICcnO1xufVxuZnVuY3Rpb24gcGFyc2VBdHRyU3RyaW5nKGF0dHJNYXRjaCwgdmFsdWVJbmRleCwgdmFsdWVQb3NpdGlvbnMsIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyTmFtZSA9IGF0dHJNYXRjaFsxXSB8fCBhdHRyTWF0Y2hbM10gfHwgYXR0ck1hdGNoWzVdO1xuICAgIGNvbnN0IGF0dHJDaG9pY2UgPSBhdHRyTWF0Y2hbMl0gfHwgYXR0ck1hdGNoWzRdIHx8IGF0dHJNYXRjaFs2XTtcbiAgICBsZXQgYXR0clZhbHVlID0gYXR0ckNob2ljZTtcbiAgICBpZiAoYXR0ck5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICB9XG4gICAgY29uc3Qgbm90RW1wdHkgPSBhdHRyTWF0Y2hbMl0gIT09ICcnO1xuICAgIGNvbnN0IG5vVmFsdWUgPSBhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBub3RFbXB0eTtcbiAgICBjb25zdCBsb3dlck5hbWUgPSBhdHRyTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGZpeGVkTmFtZSA9IGxvd2VyTmFtZS5zdGFydHNXaXRoKCdvbicpID8gY2xlYW5FdmVudE5hbWUobG93ZXJOYW1lKSA6IGxvd2VyTmFtZTtcbiAgICBpZiAobm9WYWx1ZSkge1xuICAgICAgICBjb25zdCBzdGFuZEFsb25lVmFyID0gYXR0ck5hbWUuc2xpY2UoMCwgdmFyaWFibGVQcmVmaXgubGVuZ3RoKSA9PT0gdmFyaWFibGVQcmVmaXg7XG4gICAgICAgIGlmIChzdGFuZEFsb25lVmFyKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5hbWUgPSB2YXJpYWJsZVByZWZpeCArICgrK3ZhbHVlSW5kZXgpICsgdmFyaWFibGVTdWZmaXg7XG4gICAgICAgICAgICB2YWx1ZVBvc2l0aW9ucy5wdXNoKFsnYXQnLCB2YWx1ZU5hbWVdKTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChbdmFsdWVOYW1lXSk7IC8vIHRoZSBuYW1lIGl0c2VsZiBpcyBkeW5hbWljXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydE1hdGNoZWQgPSBhdHRyTWF0Y2hbMF0uc3RhcnRzV2l0aChhdHRyTmFtZSk7XG4gICAgICAgIGNvbnN0IHN0YW5kQWxvbmVBdHRyID0gc3RhcnRNYXRjaGVkICYmIGF0dHJNYXRjaFswXS5zbGljZShhdHRyTmFtZS5sZW5ndGgsIGF0dHJNYXRjaFswXS5sZW5ndGgpLnNlYXJjaCgvXFxzKyQvKSA+PSAwO1xuICAgICAgICBpZiAoc3RhbmRBbG9uZUF0dHIpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChbZml4ZWROYW1lXSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3aG9sZVZhbHVlID0gYXR0ck1hdGNoWzNdO1xuICAgICAgICBjb25zdCBpc0Zha2VUYWcgPSB3aG9sZVZhbHVlLnNlYXJjaChmYWtlVGFnc1JlZ0V4KSA+PSAwO1xuICAgICAgICBpZiAoaXNGYWtlVGFnKSB7XG4gICAgICAgICAgICBhdHRyVmFsdWUgPSB3aG9sZVZhbHVlO1xuICAgICAgICAgICAgLy8gdG8gcmVzdG9yZTogd2hvbGVWYWx1ZS5yZXBsYWNlKGZha2VUYWdzUmVnRXgsdmFyaWFibGVQcmVmaXgrJyQxJDMkNCcrdmFyaWFibGVTdWZmaXgpXG4gICAgICAgICAgICBjb25zdCBhdHRyU2V0ID0gW2ZpeGVkTmFtZSwgYXR0clZhbHVlXTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyU2V0KTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVOYW1lID0gdmFyaWFibGVQcmVmaXggKyAoKyt2YWx1ZUluZGV4KSArIHZhcmlhYmxlU3VmZml4O1xuICAgICAgICAgICAgYXR0clZhbHVlID0gdmFsdWVOYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbm90RW1wdHkpIHtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ck1hdGNoWzJdO1xuICAgIH1cbiAgICAvLyBjb25jYXQgYXR0cmlidXRlcyBhcyBhcnJheVxuICAgIGNvbnN0IGF0dHJWYWx1ZVNwbGl0ID0gYXR0clZhbHVlLnNwbGl0KGZpbmRSZWFsVGFnc1JlZ0V4KS5maWx0ZXIoKHgpID0+IHgubGVuZ3RoID4gMCk7XG4gICAgaWYgKGF0dHJWYWx1ZVNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0clZhbHVlU3BsaXQ7XG4gICAgICAgIGF0dHJWYWx1ZVNwbGl0LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2VhcmNoKHBsYWNlaG9sZGVyUmVnZXgpID49IDApIHtcbiAgICAgICAgICAgICAgICArK3ZhbHVlSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBhdHRyU2V0ID0gW2ZpeGVkTmFtZSwgYXR0clZhbHVlXTtcbiAgICBjb25zdCBpc1NwZWNpYWwgPSBpc1NwZWNpYWxBdHRyKGxvd2VyTmFtZSk7IC8vIGNoZWNrIG9yaWdpbmFsIG5hbWUgZm9yIFwib25pbml0XCIgb3IgXCJhdXRvZm9jdXNcIlxuICAgIGlmIChpc1NwZWNpYWwpIHtcbiAgICAgICAgYXR0clNldC5wdXNoKGlzU3BlY2lhbCk7XG4gICAgfVxuICAgIC8vIGZvcmNlIHN0eWxlIHRvIGJlIGZpcnN0IHNvIG90aGVyIHN0eWxlIG1hbmlwdWxhdGluZyBhdHRyaWJ1dGVzIGRvIG5vdCBnZXQgb3ZlcndyaXR0ZW5cbiAgICBpZiAoZml4ZWROYW1lID09PSAnc3R5bGUnKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMudW5zaGlmdChhdHRyU2V0KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlSW5kZXg7XG4gICAgfVxuICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyU2V0KTtcbiAgICByZXR1cm4gdmFsdWVJbmRleDtcbn1cbiIsImltcG9ydCB7IHZhcmlhYmxlUHJlZml4LCB2YXJpYWJsZVN1ZmZpeCB9IGZyb20gXCIuLi8uLi90YWcvRG9tVGFnLnR5cGUuanNcIjtcbmltcG9ydCB7IHBhcnNlSFRNTCB9IGZyb20gXCIuL3BhcnNlSFRNTC5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGNvbnN0IHJlYWxUYWdzUmVnRXggPSBuZXcgUmVnRXhwKHZhcmlhYmxlUHJlZml4ICsgJyhcXFxcZCspJyArIHZhcmlhYmxlU3VmZml4LCAnZ2knKTtcbmV4cG9ydCBjb25zdCBmaW5kUmVhbFRhZ3NSZWdFeCA9IG5ldyBSZWdFeHAoJygnICsgdmFyaWFibGVQcmVmaXggKyAnXFxcXGQrJyArIHZhcmlhYmxlU3VmZml4ICsgJyknLCAnZ2knKTtcbi8vIHdpdGhvdXQgbGFzdCBsZXR0ZXJcbmNvbnN0IHNob3J0RnJvbnQgPSB2YXJpYWJsZVByZWZpeC5zbGljZSgwLCB2YXJpYWJsZVByZWZpeC5sZW5ndGggLSAxKTtcbmV4cG9ydCBjb25zdCBmYWtlVGFnc1JlZ0V4ID0gbmV3IFJlZ0V4cChzaG9ydEZyb250ICsgJyYjeDcyOyhcXFxcZCspJyArIHZhcmlhYmxlU3VmZml4LCAnZ2knKTtcbi8vIHZhcmlhYmxlIHByZWZpeCBtaW51cyBvbmUgbGV0dGVyIGFuZCB0aGVuIHRoZSBsZXR0ZXIgXCJyXCIgYXMgaGV4XG5jb25zdCByZXBsYWNlbWVudCA9IHNob3J0RnJvbnQgKyAnJiN4NzI7JDEnICsgdmFyaWFibGVTdWZmaXg7XG4vKiogUnVuIG9ubHkgZHVyaW5nIGNvbXBpbGUgc3RlcCBPUiB3aGVuIG5vIGNvbXBpbGUgc3RlcCBvY2N1cnJlZCBhdCBydW50aW1lICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEoc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgLy8gUGFyc2UgdGhlIG1vZGlmaWVkIGZyYWdtZW50c1xuICAgIGNvbnN0IGh0bWxTdHJpbmcgPSBodG1sSW50ZXJwb2xhdGlvblRvUGxhY2Vob2xkZXJzKHN0cmluZ3MsIHZhbHVlcykuam9pbignJyk7XG4gICAgY29uc3QgZG9tTWV0YSA9IHBhcnNlSFRNTChodG1sU3RyaW5nKTtcbiAgICByZXR1cm4gZG9tTWV0YTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBodG1sSW50ZXJwb2xhdGlvblRvUGxhY2Vob2xkZXJzKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIC8vIFNhbml0aXplIHBsYWNlaG9sZGVycyBpbiB0aGUgZnJhZ21lbnRzXG4gICAgY29uc3Qgc2FuaXRpemVkRnJhZ21lbnRzID0gc3RyaW5ncztcbiAgICAvLyBjb25zdCBzYW5pdGl6ZWRGcmFnbWVudHMgPSBzYW5pdGl6ZVBsYWNlaG9sZGVycyhzdHJpbmdzKVxuICAgIC8vIEFkZCBwbGFjZWhvbGRlcnMgdG8gdGhlIGZyYWdtZW50c1xuICAgIHJldHVybiBhZGRQbGFjZWhvbGRlcnMoc2FuaXRpemVkRnJhZ21lbnRzLCB2YWx1ZXMpO1xufVxuZnVuY3Rpb24gYWRkUGxhY2Vob2xkZXJzKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3RyaW5ncy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBzdHJpbmdzW2luZGV4XTtcbiAgICAgICAgY29uc3Qgc2FmZUZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZShyZWFsVGFnc1JlZ0V4LCByZXBsYWNlbWVudCk7XG4gICAgICAgIGlmIChpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzYWZlRnJhZ21lbnQgKyB2YXJpYWJsZVByZWZpeCArIGluZGV4ICsgdmFyaWFibGVTdWZmaXgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cy5wdXNoKHNhZmVGcmFnbWVudCk7XG4gICAgfVxuICAgIGJhbGFuY2VBcnJheUJ5QXJyYXlzKHJlc3VsdHMsIHN0cmluZ3MsIHZhbHVlcyk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5leHBvcnQgZnVuY3Rpb24gYmFsYW5jZUFycmF5QnlBcnJheXMocmVzdWx0cywgc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgY29uc3QgZGlmZiA9IHZhbHVlcy5sZW5ndGggLSBzdHJpbmdzLmxlbmd0aDtcbiAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IGRpZmY7IHggPiAwOyAtLXgpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2YXJpYWJsZVByZWZpeCArIChzdHJpbmdzLmxlbmd0aCArIHggLSAxKSArIHZhcmlhYmxlU3VmZml4KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBlbXB0eSA9ICcnO1xuZXhwb3J0IHZhciBJbW11dGFibGVUeXBlcztcbihmdW5jdGlvbiAoSW1tdXRhYmxlVHlwZXMpIHtcbiAgICBJbW11dGFibGVUeXBlc1tcInN0cmluZ1wiXSA9IFwic3RyaW5nXCI7XG4gICAgSW1tdXRhYmxlVHlwZXNbXCJudW1iZXJcIl0gPSBcIm51bWJlclwiO1xuICAgIEltbXV0YWJsZVR5cGVzW1wiYm9vbGVhblwiXSA9IFwiYm9vbGVhblwiO1xuICAgIEltbXV0YWJsZVR5cGVzW1widW5kZWZpbmVkXCJdID0gXCJ1bmRlZmluZWRcIjtcbn0pKEltbXV0YWJsZVR5cGVzIHx8IChJbW11dGFibGVUeXBlcyA9IHt9KSk7XG5leHBvcnQgdmFyIEJhc2ljVHlwZXM7XG4oZnVuY3Rpb24gKEJhc2ljVHlwZXMpIHtcbiAgICBCYXNpY1R5cGVzW1wiZnVuY3Rpb25cIl0gPSBcImZ1bmN0aW9uXCI7XG4gICAgQmFzaWNUeXBlc1tcImRhdGVcIl0gPSBcImRhdGVcIjtcbiAgICBCYXNpY1R5cGVzW1widW5rbm93blwiXSA9IFwidW5rbm93blwiO1xuICAgIEJhc2ljVHlwZXNbXCJvYmplY3RcIl0gPSBcIm9iamVjdFwiO1xufSkoQmFzaWNUeXBlcyB8fCAoQmFzaWNUeXBlcyA9IHt9KSk7XG5jb25zdCB2ZXJzaW9uID0gRGF0ZS5ub3coKTtcbi8qKiBVc2VkIGFzIGRpcmVjdCBtZW1vcnkgY29tcGFyaXNvbnMsIHRoZSBzdHJpbmdzIGFyZSBuZXZlciBjb21wYXJlZCwganVzdCB0aGUgYXJyYXkgKi9cbmV4cG9ydCBjb25zdCBWYWx1ZVR5cGVzID0ge1xuICAgIHRhZzogJ2h0bWwnLCAvLyBodG1sJycgYWthIFN0cmluZ1RhZyB8IERvbVRhZ1xuICAgIGRvbTogJ2RvbScsIC8vIGNvbXBpbGVkIHZlcnNpb24gb2YgaHRtbCcnXG4gICAgdGVtcGxhdGVyOiAndGVtcGxhdGVyJyxcbiAgICB0YWdDb21wb25lbnQ6ICd0YWdDb21wb25lbnQnLFxuICAgIHRhZ0FycmF5OiAndGFnQXJyYXknLFxuICAgIGhvc3Q6ICdob3N0JyxcbiAgICBzdWJzY3JpYmU6ICdzdWJzY3JpYmUnLFxuICAgIHNpZ25hbDogJ3NpZ25hbCcsXG4gICAgcmVuZGVyT25jZTogJ3JlbmRlck9uY2UnLFxuICAgIHN0YXRlUmVuZGVyOiAnc3RhdGVSZW5kZXInLFxuICAgIHZlcnNpb24sXG59O1xuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgSW1tdXRhYmxlVHlwZXMgfSBmcm9tIFwiLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qc1wiO1xuaW1wb3J0IHsgdmFyaWFibGVQcmVmaXgsIHZhcmlhYmxlU3VmZml4IH0gZnJvbSBcIi4uLy4uL3RhZy9Eb21UYWcudHlwZS5qc1wiO1xuaW1wb3J0IHsgcGxhY2Vob2xkZXJSZWdleCB9IGZyb20gXCIuLi8uLi9yZW5kZXIvYXR0cmlidXRlcy9nZXRUYWdWYXJJbmRleC5mdW5jdGlvbi5qc1wiO1xuY29uc3QgY2ggPSAnY2gnOyAvLyBzaG9ydCBmb3IgY2hpbGRyZW5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlUGxhY2Vob2xkZXJzKGRvbSwgdmFsdWVDb3VudCwgdmFsdWVQb3NpdGlvbnMgPSBbXSwgY3VycmVudFRhaWwgPSBbXSkge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gZG9tO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbG9vcFRhaWwgPSBbLi4uY3VycmVudFRhaWwsIGldO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgIGlmIChlbGVtZW50LmF0KSB7XG4gICAgICAgICAgICBjb25zdCBhdHRycyA9IGVsZW1lbnQuYXQ7XG4gICAgICAgICAgICBlbGVtZW50LmF0ID0gcHJvY2Vzc0F0dHJpYnV0ZXMoYXR0cnMsIHZhbHVlQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50LmNoKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW1lbnQuY2g7XG4gICAgICAgICAgICBjb25zdCBpbm5lckxvb3BUYWlsID0gWy4uLmxvb3BUYWlsLCBjaF07XG4gICAgICAgICAgICBlbGVtZW50LmNoID0gcmVwbGFjZVBsYWNlaG9sZGVycyhjaGlsZHJlbiwgdmFsdWVDb3VudCwgdmFsdWVQb3NpdGlvbnMsIGlubmVyTG9vcFRhaWwpO1xuICAgICAgICB9XG4gICAgICAgIGkgPSBleGFtaW5lQ2hpbGQoZWxlbWVudCwgdmFsdWVDb3VudCwgZWxlbWVudHMsIGkpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudHM7XG59XG5mdW5jdGlvbiBleGFtaW5lQ2hpbGQoY2hpbGQsIHZhbHVlQ291bnQsIGNoaWxkcmVuLCBpbmRleCkge1xuICAgIGlmIChjaGlsZC5ubiAhPT0gJ3RleHQnKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgY29uc3QgdGV4dENoaWxkID0gY2hpbGQ7XG4gICAgbGV0IHRleHRDb250ZW50ID0gdGV4dENoaWxkLnRjO1xuICAgIGlmICh0eXBlb2YgdGV4dENvbnRlbnQgIT09IEltbXV0YWJsZVR5cGVzLnN0cmluZykge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gcGxhY2Vob2xkZXJSZWdleC5leGVjKHRleHRDb250ZW50KSkgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgICAgY29uc3Qgd0luZGV4ID0gcGFyc2VJbnQoc2Vjb25kTWF0Y2gsIDEwKTtcbiAgICAgICAgY29uc3QgZXhhbWluZSA9ICFpc05hTih3SW5kZXgpICYmIHdJbmRleCA8IHZhbHVlQ291bnQ7XG4gICAgICAgIGlmIChleGFtaW5lKSB7XG4gICAgICAgICAgICBjb25zdCB2YXJDb250ZW50ID0gdmFyaWFibGVQcmVmaXggKyB3SW5kZXggKyB2YXJpYWJsZVN1ZmZpeDtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gdGV4dENvbnRlbnQuc2xpY2UobWF0Y2guaW5kZXggKyB2YXJDb250ZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgICAgICAgICBubjogJ3RleHQnLFxuICAgICAgICAgICAgICAgIHY6IHdJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZXh0Q29udGVudCA9IGFmdGVyO1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJSZWdleC5sYXN0SW5kZXggPSAwOyAvLyBSZXNldCByZWdleCBpbmRleCBkdWUgdG8gc3BsaXRcbiAgICAgICAgfVxuICAgIH1cbiAgICB0ZXh0Q2hpbGQudGMgPSB0ZXh0Q29udGVudDtcbiAgICByZXR1cm4gaW5kZXg7XG59XG5mdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB2YWx1ZUNvdW50KSB7XG4gICAgY29uc3QgbWFwcGVkID0gW107XG4gICAgZm9yIChjb25zdCBhdHRyU2V0IG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgY29uc3QgW2tleSwgdmFsdWUsIGlzU3BlY2lhbF0gPSBhdHRyU2V0O1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGtleS5yZXBsYWNlKHZhcmlhYmxlUHJlZml4LCAnJyksIDEwKTtcbiAgICAgICAgICAgIGlmICghaXNOYU4oaW5kZXgpICYmIGluZGV4IDwgdmFsdWVDb3VudCkge1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKFt7IHRhZ0pzVmFyOiBpbmRleCB9XSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gSW1tdXRhYmxlVHlwZXMuc3RyaW5nICYmIHZhbHVlLnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHZhbHVlLnJlcGxhY2UodmFyaWFibGVQcmVmaXgsICcnKSwgMTApO1xuICAgICAgICAgICAgaWYgKCFpc05hTihpbmRleCkgJiYgaW5kZXggPCB2YWx1ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgbWFwcGVkLnB1c2goW2tleSwgeyB0YWdKc1ZhcjogaW5kZXggfSwgaXNTcGVjaWFsXSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFwcGVkLnB1c2goYXR0clNldCk7XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3RyaW5nc0lkKHN0cmluZ3MpIHtcbiAgICBjb25zdCBhcnJheSA9IHN0cmluZ3MubWFwKGxlbmd0aE1hcHBlcik7XG4gICAgYXJyYXkucHVzaChzdHJpbmdzLmxlbmd0aCk7XG4gICAgcmV0dXJuIE51bWJlcihhcnJheS5qb2luKCcnKSk7XG59XG5mdW5jdGlvbiBsZW5ndGhNYXBwZXIoeCkge1xuICAgIHJldHVybiB4Lmxlbmd0aDtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IGh0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9odG1sSW50ZXJwb2xhdGlvblRvRG9tTWV0YS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZXBsYWNlUGxhY2Vob2xkZXJzIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9yZXBsYWNlUGxhY2Vob2xkZXJzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTGFzdFJ1bk1hdGNoZWQgfSBmcm9tICcuL2lzTGFzdFJ1bk1hdGNoZWQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3RyaW5nc0lkIH0gZnJvbSAnLi9nZXRTdHJpbmdzSWQuZnVuY3Rpb24uanMnO1xuY29uc3QgbGFzdFJ1bnMgPSB7fTtcbi8qKiBNZXJnZXMgc3RyaW5ncyAmIHZhbHVlcyB3aXRoIGRvbSBtZXRhIGludG8gYSBodG1sIGFycmF5IHRyZWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21NZXRhKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIGNvbnN0IHN0cmluZ0lkID0gZ2V0U3RyaW5nc0lkKHN0cmluZ3MpO1xuICAgIGNvbnN0IGxhc3RSdW4gPSBsYXN0UnVuc1tzdHJpbmdJZF07XG4gICAgY29uc3QgbWF0Y2hlcyA9IGxhc3RSdW4gJiYgaXNMYXN0UnVuTWF0Y2hlZChzdHJpbmdzLCB2YWx1ZXMsIGxhc3RSdW4pO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBsYXN0UnVuLmRvbU1ldGFNYXA7XG4gICAgfVxuICAgIGNvbnN0IGRvbU1ldGEgPSBodG1sSW50ZXJwb2xhdGlvblRvRG9tTWV0YShzdHJpbmdzLCB2YWx1ZXMpO1xuICAgIGNvbnN0IG1hcCA9IHJlcGxhY2VQbGFjZWhvbGRlcnMoZG9tTWV0YSwgdmFsdWVzLmxlbmd0aCk7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICAgIGludGVycG9sYXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgc3RyaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHN0cmluZ3MsXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgZG9tTWV0YU1hcDogbWFwLFxuICAgIH07XG4gICAgbGFzdFJ1bnNbc3RyaW5nSWRdID0gdGVtcGxhdGU7XG4gICAgcmV0dXJuIG1hcDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc0xhc3RSdW5NYXRjaGVkKHN0cmluZ3MsIHZhbHVlcywgbGFzdFJ1bikge1xuICAgIGlmIChsYXN0UnVuKSB7XG4gICAgICAgIGlmIChsYXN0UnVuLnN0cmluZ3MubGVuZ3RoID09PSBzdHJpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nc01hdGNoID0gbGFzdFJ1bi5zdHJpbmdzLmV2ZXJ5KChzdHJpbmcsIGluZGV4KSA9PiBcbiAgICAgICAgICAgIC8vIHN0cmluZy5sZW5ndGggPT09IHN0cmluZ3NbaW5kZXhdLmxlbmd0aFxuICAgICAgICAgICAgc3RyaW5nID09PSBzdHJpbmdzW2luZGV4XSk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nc01hdGNoICYmIGxhc3RSdW4udmFsdWVzLmxlbmd0aCA9PT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBwZXJmb3JtYW5jZSBzYXZpbmdzIHVzaW5nIHRoZSBsYXN0IHRpbWUgdGhpcyBjb21wb25lbnQgd2FzIHJlbmRlcmVkXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiZXhwb3J0IGNvbnN0IGJsYW5rSGFuZGxlciA9IGZ1bmN0aW9uIGJsYW5rSGFuZGxlcigpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiIsImltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbi8qKiBUeXBpY2FsbHkgdXNlZCBmb3IgYW5pbWF0aW9ucyB0byBydW4gYmVmb3JlIGNsZWFyaW5nIGVsZW1lbnRzICovXG5leHBvcnQgZnVuY3Rpb24gYWRkUGFpbnRSZW1vdmVBd2FpdChwcm9taXNlKSB7XG4gICAgaWYgKHBhaW50UmVtb3ZlQXdhaXRzLmxlbmd0aCkge1xuICAgICAgICBwYWludFJlbW92ZUF3YWl0c1twYWludFJlbW92ZUF3YWl0cy5sZW5ndGggLSAxXS5wYWludFJlbW92ZXMucHVzaCguLi5wYWludFJlbW92ZXMpO1xuICAgICAgICBwYWludFJlbW92ZXMgPSBbXTtcbiAgICB9XG4gICAgcGFpbnRSZW1vdmVBd2FpdHMucHVzaCh7IHByb21pc2UsIHBhaW50UmVtb3ZlcyB9KTtcbiAgICBwYWludFJlbW92ZXMgPSBbXTtcbn1cbmxldCBwYWludFJlbW92ZUF3YWl0cyA9IFtdO1xuZXhwb3J0IGxldCBwYWludENvbW1hbmRzID0gW107XG5leHBvcnQgbGV0IHBhaW50UmVtb3ZlcyA9IFtdO1xuZXhwb3J0IGxldCBwYWludENvbnRlbnQgPSBbXTtcbi8vIFRPRE86IFRoaXMgdGhpcyBpcyBkdXBsaWNhdGUgb2YgcGFpbnRDb21tYW5kcyAoaG93ZXZlciB0aW1pbmcgaXMgY3VycmVudGx5IGFuZCBpc3N1ZSBhbmQgY2FudCBiZSByZW1vdmVkKVxuZXhwb3J0IGxldCBwYWludEFwcGVuZHMgPSBbXTtcbmV4cG9ydCBsZXQgcGFpbnRBZnRlcnMgPSBbXTsgLy8gY2FsbGJhY2tzIGFmdGVyIGFsbCBwYWludGVkXG5leHBvcnQgY29uc3QgcGFpbnRpbmcgPSB7XG4gICAgbG9ja3M6IDAsXG4gICAgcmVtb3ZlTG9ja3M6IDAsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRlbnQodGV4dCwgdGV4dE5vZGUpIHtcbiAgICB0ZXh0Tm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFpbnQoKSB7XG4gICAgaWYgKHBhaW50aW5nLmxvY2tzID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBydW5DeWNsZXMoKTtcbn1cbmZ1bmN0aW9uIHJ1bkN5Y2xlcygpIHtcbiAgICBydW5QYWludEN5Y2xlcygpO1xuICAgIHJ1bkFmdGVyQ3ljbGUoKTtcbn1cbmZ1bmN0aW9uIHJ1bkFmdGVyQ3ljbGUoKSB7XG4gICAgcGFpbnRSZXNldCgpO1xuICAgIGNvbnN0IG5vd1BhaW50QWZ0ZXJzID0gcGFpbnRBZnRlcnM7XG4gICAgcGFpbnRBZnRlcnMgPSBbXTsgLy8gcHJldmVudCBwYWludEFmdGVycyBjYWxscyBmcm9tIGVuZGxlc3MgcmVjdXJzaW9uXG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIG5vd1BhaW50QWZ0ZXJzKSB7XG4gICAgICAgIGNvbnRlbnRbMF0oLi4uY29udGVudFsxXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcnVuUGFpbnRSZW1vdmVzKCkge1xuICAgIGlmIChwYWludFJlbW92ZUF3YWl0cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEF3YWl0cyA9IHBhaW50UmVtb3ZlQXdhaXRzLm1hcChkYXRhID0+IGRhdGEucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhaW50UmVtb3ZlcyA9IGRhdGEucGFpbnRSZW1vdmVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIHBhaW50UmVtb3Zlcykge1xuICAgICAgICAgICAgICAgIC8vIGNhbGwgcGFpbnRSZW1vdmVyKClcbiAgICAgICAgICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIHBhaW50UmVtb3ZlQXdhaXRzID0gW107XG4gICAgICAgIGNvbnN0IG91dGVyUGFpbnRSZW1vdmVzID0gcGFpbnRSZW1vdmVzO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoY3VycmVudEF3YWl0cykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2Ygb3V0ZXJQYWludFJlbW92ZXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkXG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIHBhaW50UmVtb3Zlcykge1xuICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJ1blBhaW50Q3ljbGVzKCkge1xuICAgIHJ1blBhaW50UmVtb3ZlcygpO1xuICAgIHBhaW50UmVtb3ZlcyA9IFtdO1xuICAgIC8vIHN0eWxlcy9hdHRyaWJ1dGVzIGFuZCB0ZXh0RWxlbWVudC50ZXh0Q29udGVudFxuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBwYWludENvbnRlbnQpIHtcbiAgICAgICAgY29udGVudFswXSguLi5jb250ZW50WzFdKTtcbiAgICB9XG4gICAgLy8gLmFwcGVuZENoaWxkXG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIHBhaW50QXBwZW5kcykge1xuICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgIH1cbiAgICAvLyBlbGVtZW50Lmluc2VydEJlZm9yZVxuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBwYWludENvbW1hbmRzKSB7XG4gICAgICAgIGNvbnRlbnRbMF0oLi4uY29udGVudFsxXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFpbnRSZXNldCgpIHtcbiAgICBwYWludENvbW1hbmRzID0gW107XG4gICAgcGFpbnRDb250ZW50ID0gW107XG4gICAgcGFpbnRBcHBlbmRzID0gW107XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkUGFpbnRSZW1vdmVyKGVsZW1lbnQsIGNhbGxlcikge1xuICAgIHBhaW50UmVtb3Zlcy5wdXNoKFtwYWludFJlbW92ZXIsIFtlbGVtZW50LCBjYWxsZXJdXSk7XG59XG4vKiogbXVzdCBiZSB1c2VkIHdpdGggcGFpbnRSZW1vdmVzICovXG5mdW5jdGlvbiBwYWludFJlbW92ZXIoZWxlbWVudCwgX2NhbGxlcikge1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEJlZm9yZShyZWxhdGl2ZSwgZWxlbWVudCkge1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSByZWxhdGl2ZS5wYXJlbnROb2RlO1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHJlbGF0aXZlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEFwcGVuZChyZWxhdGl2ZSwgZWxlbWVudCkge1xuICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xufVxuY29uc3QgY29udGVudENsZWFuZXIgPSAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7IC8vIHVzZWQgZm9yIGNvbnRlbnQgY2xlYW5pbmdcbmZ1bmN0aW9uIHRvUGxhaW5UZXh0RWxtKHRleHQpIHtcbiAgICAvLyBzd2FwICZndDsgZm9yID5cbiAgICBjb250ZW50Q2xlYW5lci5pbm5lckhUTUwgPSB0ZXh0OyAvLyBzY3JpcHQgdGFncyBzaG91bGQgaGF2ZSBhbHJlYWR5IGJlZW4gc2FuaXRpemVkIGJlZm9yZSB0aGlzIHN0ZXBcbiAgICAvLyBkZWxldGUgPCEtLSAtLT5cbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudENsZWFuZXIuaW5uZXJIVE1MKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEJlZm9yZVRleHQocmVsYXRpdmUsIHRleHQsIGNhbGxiYWNrID0gYmxhbmtIYW5kbGVyKSB7XG4gICAgY29uc3QgdGV4dEVsbSA9IHRvUGxhaW5UZXh0RWxtKHRleHQpO1xuICAgIHBhaW50QmVmb3JlKHJlbGF0aXZlLCB0ZXh0RWxtKTtcbiAgICBjYWxsYmFjayh0ZXh0RWxtKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEFwcGVuZFRleHQocmVsYXRpdmUsIHRleHQsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdGV4dEVsbSA9IHRvUGxhaW5UZXh0RWxtKHRleHQpO1xuICAgIHBhaW50QXBwZW5kKHJlbGF0aXZlLCB0ZXh0RWxtKTtcbiAgICBjYWxsYmFjayh0ZXh0RWxtKTtcbn1cbi8qKiBVc2VkIHdoZW4gSFRNTCBjb250ZW50IGlzIHNhZmUgYW5kIGV4cGVjdGVkICovXG5leHBvcnQgZnVuY3Rpb24gcGFpbnRCZWZvcmVFbGVtZW50U3RyaW5nKHJlbGF0aXZlLCB0ZXh0LCBjYWxsYmFjayA9IGJsYW5rSGFuZGxlcikge1xuICAgIGNvbnRlbnRDbGVhbmVyLmlubmVySFRNTCA9IHRleHQ7XG4gICAgY29uc3QgdGV4dEVsbSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbnRlbnRDbGVhbmVyLnRleHRDb250ZW50KTsgLy8gdG9QbGFpblRleHRFbG0odGV4dClcbiAgICBwYWludEJlZm9yZShyZWxhdGl2ZSwgdGV4dEVsbSk7XG4gICAgY2FsbGJhY2sodGV4dEVsbSk7XG59XG4vKiogVXNlZCB3aGVuIEhUTUwgY29udGVudCBpcyBzYWZlIGFuZCBleHBlY3RlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhaW50QXBwZW5kRWxlbWVudFN0cmluZyhyZWxhdGl2ZSwgdGV4dCwgY2FsbGJhY2spIHtcbiAgICBjb250ZW50Q2xlYW5lci5pbm5lckhUTUwgPSB0ZXh0O1xuICAgIGNvbnN0IHRleHRFbG0gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjb250ZW50Q2xlYW5lci50ZXh0Q29udGVudCk7IC8vIHRvUGxhaW5UZXh0RWxtKHRleHQpXG4gICAgcGFpbnRBcHBlbmQocmVsYXRpdmUsIHRleHRFbG0pO1xuICAgIGNhbGxiYWNrKHRleHRFbG0pO1xufVxuIiwiaW1wb3J0IHsgYWRkUGFpbnRSZW1vdmVyIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVDb250ZXh0U3ViQ29udGV4dChjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICBjb25zdCByZXN1bHQgPSBkZWxldGVTdWJDb250ZXh0KHN1YnNjcmlwdGlvbiwgb3duZXJTdXBwb3J0KTtcbiAgICBkZWxldGUgY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVN1YkNvbnRleHQoc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgc3ViQ29udGV4dC5kZWxldGVkID0gdHJ1ZTtcbiAgICBjb25zdCBhcHBlbmRNYXJrZXIgPSBzdWJDb250ZXh0LmFwcGVuZE1hcmtlcjtcbiAgICBpZiAoYXBwZW5kTWFya2VyKSB7XG4gICAgICAgIGFkZFBhaW50UmVtb3ZlcihhcHBlbmRNYXJrZXIsICdkZWxldGVTdWJDb250ZXh0Jyk7XG4gICAgICAgIGRlbGV0ZSBzdWJDb250ZXh0LmFwcGVuZE1hcmtlcjtcbiAgICB9XG4gICAgLy8gZGVsZXRlIChjb250ZXh0SXRlbSBhcyBhbnkpLmRlbGV0ZVxuICAgIGlmICghc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3ViQ29udGV4dEl0ZW0gPSBzdWJDb250ZXh0LmNvbnRleHRJdGVtO1xuICAgIGNvbnN0IHN1YlRhZ0pzVmFyID0gc3ViQ29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgc3ViVGFnSnNWYXIuZGVsZXRlKHN1YkNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIHJldHVybiA3Njtcbn1cbiIsImltcG9ydCB7IEJhc2ljVHlwZXMsIEltbXV0YWJsZVR5cGVzLCBWYWx1ZVR5cGVzIH0gZnJvbSAnLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZVR5cGUodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgSW1tdXRhYmxlVHlwZXMuc3RyaW5nOlxuICAgICAgICBjYXNlIEltbXV0YWJsZVR5cGVzLm51bWJlcjpcbiAgICAgICAgY2FzZSBJbW11dGFibGVUeXBlcy5ib29sZWFuOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKiBJbmRpY2F0ZXMgaWYgdGFnKCkgd2FzIHVzZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YXRpY1RhZyh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0YWdKc1R5cGUgPSB2YWx1ZS50YWdKc1R5cGU7XG4gICAgc3dpdGNoICh0YWdKc1R5cGUpIHtcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLmRvbTpcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRhZzpcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRlbXBsYXRlcjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKiogcGFzc2VkIGluIGlzIGV4cGVjdGVkIHRvIGJlIGEgVGVtcGxhdGVyUmVzdWx0ICovXG5leHBvcnQgZnVuY3Rpb24gaXNUYWdDb21wb25lbnQodmFsdWUpIHtcbiAgICBjb25zdCB0YWdUeXBlID0gdmFsdWU/LnRhZ0pzVHlwZTtcbiAgICByZXR1cm4gdGFnVHlwZSA9PT0gVmFsdWVUeXBlcy50YWdDb21wb25lbnQgfHwgdGFnVHlwZSA9PT0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcjtcbn1cbi8vIGlzU3ViamVjdExpa2VcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YmplY3RJbnN0YW5jZShzdWJqZWN0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHN1YmplY3QpICYmIHR5cGVvZiBzdWJqZWN0LnN1YnNjcmliZSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS50aGVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QgJiYgdmFsdWUgIT09IG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXROZXdHbG9iYWwoY29udGV4dEl0ZW0pIHtcbiAgICBjb250ZXh0SXRlbS5yZW5kZXJDb3VudCA9IGNvbnRleHRJdGVtLnJlbmRlckNvdW50IHx8IDA7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtLmdsb2JhbCA9IHt9O1xufVxuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vLi4vc3RhdGUvaW5kZXguanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRJbkN5Y2xlKCkge1xuICAgIHJldHVybiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3VwcG9ydDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdXBwb3J0SW5DeWNsZShzdXBwb3J0KSB7XG4gICAgcmV0dXJuIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdXBwb3J0ID0gc3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IGlzVGFnQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3VwcG9ydFdpdGhTdGF0ZShzdXBwb3J0KSB7XG4gICAgLy8gZ2V0IGFjdHVhbCBjb21wb25lbnQgb3duZXIgbm90IGp1c3QgdGhlIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQxNTE1WzBdKSBzdXBwb3J0XG4gICAgbGV0IGNvbXBvbmVudCA9IHN1cHBvcnQ7XG4gICAgd2hpbGUgKGNvbXBvbmVudC5vd25lclN1cHBvcnQgJiYgIWlzVGFnQ29tcG9uZW50KGNvbXBvbmVudC50ZW1wbGF0ZXIpKSB7XG4gICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudC5vd25lclN1cHBvcnQ7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQuY29udGV4dC5nbG9iYWwubmV3ZXN0IHx8IGNvbXBvbmVudDtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M0MTUxNTogW1tdXSB9O1xuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRXaXRoU3RhdGUgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFN1cHBvcnRXaXRoU3RhdGUuZnVuY3Rpb24uanMnO1xuZnVuY3Rpb24gcmV0dXJuQXJncyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3M7XG59XG5leHBvcnQgZnVuY3Rpb24gZmlyc3RTdGF0ZXNIYW5kbGVyKHNldHRlcikge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBjb25maWcuc3RhdGVzW2NvbmZpZy5zdGF0ZXNJbmRleF0gPSBzZXR0ZXI7XG4gICAgKytjb25maWcuc3RhdGVzSW5kZXg7XG4gICAgcmV0dXJuIHNldHRlcihyZXR1cm5BcmdzKTtcbn1cbi8qKiBha2Egc3RhdGVzSGFuZGxlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlU3RhdGVzSGFuZGxlcihzZXR0ZXIpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgY29uc3Qgc3RhdGVzSW5kZXggPSBjb25maWcuc3RhdGVzSW5kZXg7XG4gICAgY29uc3QgcHJldlN1cHBvcnQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKGNvbmZpZy5wcmV2U3VwcG9ydCk7XG4gICAgY29uc3QgcHJldlN0YXRlcyA9IHByZXZTdXBwb3J0LnN0YXRlcztcbiAgICAvLyBjb25zdCBwcmV2U3RhdGVzID0gY29uZmlnLnN0YXRlc1xuICAgIGNvbnN0IG9sZFN0YXRlcyA9IHByZXZTdGF0ZXNbc3RhdGVzSW5kZXhdO1xuICAgIGxldCBsYXN0VmFsdWVzID0gW107XG4gICAgb2xkU3RhdGVzKGZ1bmN0aW9uIHJlZ2V0dGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgbGFzdFZhbHVlcyA9IGFyZ3M7XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc2V0dGVyID0gZnVuY3Rpb24gc3RhdGVSZXNldHRlciguLi5fYXJncykge1xuICAgICAgICByZXR1cm4gbGFzdFZhbHVlcztcbiAgICB9O1xuICAgIGNvbmZpZy5zdGF0ZXNbY29uZmlnLnN0YXRlc0luZGV4XSA9IHNldHRlcjtcbiAgICArK2NvbmZpZy5zdGF0ZXNJbmRleDtcbiAgICByZXR1cm4gc2V0dGVyKHJlc2V0dGVyKTtcbn1cbiIsImltcG9ydCB7IHJ1bkZpcnN0U3RhdGUsIHJ1blJlc3RhdGUgfSBmcm9tICcuL3N0YXRlSGFuZGxlcnMuanMnO1xuaW1wb3J0IHsgZmlyc3RTdGF0ZXNIYW5kbGVyLCByZVN0YXRlc0hhbmRsZXIgfSBmcm9tICcuL3N0YXRlcy51dGlscy5qcyc7XG5pbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpbml0U3RhdGUoc3VwcG9ydCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBjb25maWcuaGFuZGxlcnMuaGFuZGxlciA9IHJ1bkZpcnN0U3RhdGU7XG4gICAgY29uZmlnLmhhbmRsZXJzLnN0YXRlc0hhbmRsZXIgPSBmaXJzdFN0YXRlc0hhbmRsZXI7XG4gICAgY29uZmlnLnJlYXJyYXkgPSBbXTtcbiAgICBjb25maWcuc3RhdGVBcnJheSA9IFtdO1xuICAgIGNvbmZpZy5zdGF0ZXMgPSBbXTtcbiAgICBjb25maWcuc3RhdGVzSW5kZXggPSAwO1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKHN1cHBvcnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlU3RhdGUobmV3U3VwcG9ydCwgcHJldlN1cHBvcnQsIHByZXZTdGF0ZSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICAvLyBzZXQgcHJldmlvdXMgc3RhdGUgbWVtb3J5XG4gICAgY29uZmlnLnJlYXJyYXkgPSBwcmV2U3RhdGU7XG4gICAgY29uZmlnLnN0YXRlQXJyYXkgPSBbXTtcbiAgICBjb25maWcuc3RhdGVzID0gW107XG4gICAgY29uZmlnLnN0YXRlc0luZGV4ID0gMDtcbiAgICBjb25maWcuaGFuZGxlcnMuaGFuZGxlciA9IHJ1blJlc3RhdGU7XG4gICAgY29uZmlnLmhhbmRsZXJzLnN0YXRlc0hhbmRsZXIgPSByZVN0YXRlc0hhbmRsZXI7XG4gICAgY29uZmlnLnByZXZTdXBwb3J0ID0gcHJldlN1cHBvcnQ7XG4gICAgc2V0U3VwcG9ydEluQ3ljbGUobmV3U3VwcG9ydCk7XG59XG5leHBvcnQgY2xhc3MgU3RhdGVFY2hvQmFjayB7XG59XG4vKiogc2VuZHMgYSBmYWtlIHZhbHVlIGFuZCB0aGVuIHNldHMgYmFjayB0byByZWNlaXZlZCB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhbGxiYWNrVmFsdWUoY2FsbGJhY2spIHtcbiAgICBjb25zdCBbdmFsdWVdID0gY2FsbGJhY2soU3RhdGVFY2hvQmFjayk7IC8vIGdldCB2YWx1ZSBhbmQgc2V0IHRvIHVuZGVmaW5lZFxuICAgIGNvbnN0IFtjaGVja1ZhbHVlXSA9IGNhbGxiYWNrKHZhbHVlKTsgLy8gc2V0IGJhY2sgdG8gb3JpZ2luYWwgdmFsdWVcbiAgICByZXR1cm4gW3ZhbHVlLCBjaGVja1ZhbHVlXTtcbn1cbiIsImltcG9ydCB7IGdldENhbGxiYWNrVmFsdWUgfSBmcm9tICcuL3N0YXRlLnV0aWxzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0ZVZhbHVlKHN0YXRlKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBzdGF0ZS5jYWxsYmFjaztcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IFt2YWx1ZV0gPSBnZXRDYWxsYmFja1ZhbHVlKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgZ2V0U3RhdGVWYWx1ZSB9IGZyb20gJy4vZ2V0U3RhdGVWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcnVuUmVzdGF0ZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgY29uc3QgcmVhcnJheSA9IGNvbmZpZy5yZWFycmF5O1xuICAgIGNvbnN0IHJlc3RhdGUgPSByZWFycmF5W2NvbmZpZy5zdGF0ZUFycmF5Lmxlbmd0aF07XG4gICAgY29uZmlnLnN0YXRlQXJyYXkucHVzaChyZXN0YXRlKTtcbiAgICByZXR1cm4gcmVzdGF0ZS5kZWZhdWx0VmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gcnVuRmlyc3RTdGF0ZShkZWZhdWx0VmFsdWUpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgLy8gU3RhdGUgZmlyc3QgdGltZSBydW5cbiAgICBsZXQgaW5pdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgIGlmICh0eXBlb2YgKGRlZmF1bHRWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgaW5pdFZhbHVlID0gZGVmYXVsdFZhbHVlKCk7XG4gICAgfVxuICAgIC8vIHRoZSBzdGF0ZSBpcyBhY3R1YWxseSBpbnRlbmRlZCB0byBiZSBhIGZ1bmN0aW9uXG4gICAgaWYgKHR5cGVvZiAoaW5pdFZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGluaXRWYWx1ZTtcbiAgICAgICAgaW5pdFZhbHVlID0gZnVuY3Rpb24gaW5pdFZhbHVlRnVuKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9yaWdpbmFsKC4uLmFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgaW5pdFZhbHVlLm9yaWdpbmFsID0gb3JpZ2luYWw7XG4gICAgfVxuICAgIGNvbnN0IHB1c2ggPSB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gcHVzaFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXRlVmFsdWUocHVzaCk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogaW5pdFZhbHVlLFxuICAgIH07XG4gICAgY29uZmlnLnN0YXRlQXJyYXkucHVzaChwdXNoKTtcbiAgICByZXR1cm4gaW5pdFZhbHVlO1xufVxuIiwiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdC5jbGFzcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUxhdGVzdChzdWJqZWN0cykge1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgY29uc3Qgc3Vic2NyaWJlID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlc1NlZW4gPSBbXTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGNvbnN0IHNldFZhbHVlID0gKHgsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICB2YWx1ZXNTZWVuW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geDtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50TWF0Y2hlZCA9IHZhbHVlc1NlZW4ubGVuZ3RoID09PSBzdWJqZWN0cy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoIWNvdW50TWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZXNTZWVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBldmVyeW9uZSBoYXMgcmVwb3J0ZWQgdmFsdWVzXG4gICAgICAgICAgICBjYWxsYmFjayh2YWx1ZXMsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNsb25lcyA9IFsuLi5zdWJqZWN0c107XG4gICAgICAgIGNvbnN0IGZpcnN0U3ViID0gY2xvbmVzLnNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGZpcnN0U3ViLnN1YnNjcmliZSh4ID0+IHNldFZhbHVlKHgsIDApKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGNsb25lcy5tYXAoKHN1YmplY3QsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoeCA9PiBzZXRWYWx1ZSh4LCBpbmRleCArIDEpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9ucztcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIG91dHB1dC5zdWJzY3JpYmVXaXRoID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0LmNsYXNzLmpzJztcbmZ1bmN0aW9uIHJlbW92ZVN1YkZyb21BcnJheShzdWJzY3JpYmVycywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IHN1YnNjcmliZXJzLmZpbmRJbmRleChzdWIgPT4gc3ViLmNhbGxiYWNrID09PSBjYWxsYmFjayk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzdWJzY3JpYmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJzY3JpcHRpb24oc3ViamVjdCwgY2FsbGJhY2ssIHN1YnNjcmliZXJzKSB7XG4gICAgY29uc3QgY291bnRTdWJqZWN0ID0gU3ViamVjdC5nbG9iYWxTdWJDb3VudCQ7XG4gICAgU3ViamVjdC5nbG9iYWxTdWJDb3VudCQubmV4dChjb3VudFN1YmplY3QudmFsdWUgKyAxKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgc3Vic2NyaXB0aW9uLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAvLyBSZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZSBmcm9tIHRoZSBCZWhhdmlvclN1YmplY3RcbiAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZShzdWJzY3JpcHRpb24sIHN1YnNjcmliZXJzLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBzdWJzY3JpcHRpb24uYWRkID0gKHN1YikgPT4ge1xuICAgICAgICBzdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9ucy5wdXNoKHN1Yik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBzdWJzY3JpcHRpb24ubmV4dCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjYWxsYmFjayh2YWx1ZSwgc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gcnVuUGlwZWRNZXRob2RzKHZhbHVlLCBtZXRob2RzLCBvbkNvbXBsZXRlKSB7XG4gICAgY29uc3QgY2xvbmVNZXRob2RzID0gWy4uLm1ldGhvZHNdO1xuICAgIGNvbnN0IGZpcnN0TWV0aG9kID0gY2xvbmVNZXRob2RzLnNoaWZ0KCk7XG4gICAgY29uc3QgbmV4dCA9IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICBpZiAoY2xvbmVNZXRob2RzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1blBpcGVkTWV0aG9kcyhuZXdWYWx1ZSwgY2xvbmVNZXRob2RzLCBvbkNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgICAgICBvbkNvbXBsZXRlKG5ld1ZhbHVlKTtcbiAgICB9O1xuICAgIGxldCBoYW5kbGVyID0gbmV4dDtcbiAgICBjb25zdCBzZXRIYW5kbGVyID0gKHgpID0+IGhhbmRsZXIgPSB4O1xuICAgIGNvbnN0IHBpcGVVdGlscyA9IHsgc2V0SGFuZGxlciwgbmV4dCB9O1xuICAgIGNvbnN0IG1ldGhvZFJlc3BvbnNlID0gZmlyc3RNZXRob2QodmFsdWUsIHBpcGVVdGlscyk7XG4gICAgaGFuZGxlcihtZXRob2RSZXNwb25zZSk7XG59XG5mdW5jdGlvbiB1bnN1YnNjcmliZShzdWJzY3JpcHRpb24sIHN1YnNjcmliZXJzLCBjYWxsYmFjaykge1xuICAgIHJlbW92ZVN1YkZyb21BcnJheShzdWJzY3JpYmVycywgY2FsbGJhY2spOyAvLyBlYWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gdXBkYXRlIGNvbWVzIGluXG4gICAgY29uc3QgdmFsU3ViID0gU3ViamVjdC5nbG9iYWxTdWJDb3VudCQ7XG4gICAgU3ViamVjdC5nbG9iYWxTdWJDb3VudCQubmV4dCh2YWxTdWIudmFsdWUgLSAxKTtcbiAgICAvLyBhbnkgZG91YmxlIHVuc3Vic2NyaWJlcyB3aWxsIGJlIGlnbm9yZWRcbiAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgPSAoKSA9PiBzdWJzY3JpcHRpb247XG4gICAgLy8gdW5zdWJzY3JpYmUgZnJvbSBhbnkgY29tYmluZWQgc3ViamVjdHNcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnM7XG4gICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vic2NyaXB0aW9ucykge1xuICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn1cbiIsImltcG9ydCB7IGlzU3ViamVjdEluc3RhbmNlIH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAnLi9jb21iaW5lTGF0ZXN0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN1YnNjcmlwdGlvbiwgcnVuUGlwZWRNZXRob2RzIH0gZnJvbSAnLi9zdWJqZWN0LnV0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBTdWJqZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgXG4gICAgLy8gcHJpdmF0ZT8gLSBvbmx5IHVzZWQgYnkgZXh0ZW5kaW5nIGNsYXNzZXNcbiAgICBvblN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25TdWJzY3JpcHRpb24gPSBvblN1YnNjcmlwdGlvbjtcbiAgICAgICAgLy8gcHJpdmF0ZT9cbiAgICAgICAgdGhpcy5tZXRob2RzID0gW107XG4gICAgICAgIHRoaXMuaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgICAgLy8gcHJpdmF0ZT9cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICAgICAgICB0aGlzLnNldCA9IHRoaXMubmV4dC5iaW5kKHRoaXMpO1xuICAgICAgICAvLyBkZWZpbmVWYWx1ZU9uKHRoaXMpXG4gICAgfVxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBnZXRTdWJzY3JpcHRpb24odGhpcywgY2FsbGJhY2ssIHRoaXMuc3Vic2NyaWJlcnMpO1xuICAgICAgICAvLyBhcmUgd2Ugd2l0aGluIGEgcGlwZT9cbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlV2l0aCA9IHRoaXMuc3Vic2NyaWJlV2l0aDtcbiAgICAgICAgaWYgKHN1YnNjcmliZVdpdGgpIHtcbiAgICAgICAgICAgIC8vIGFyZSB3ZSBpbiBhIHBpcGU/XG4gICAgICAgICAgICBpZiAodGhpcy5tZXRob2RzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yZ0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuUGlwZWRNZXRob2RzKHZhbHVlLCB0aGlzLm1ldGhvZHMsIGxhc3RWYWx1ZSA9PiBvcmdDYWxsYmFjayhsYXN0VmFsdWUsIHN1YnNjcmlwdGlvbikpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlV2l0aChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGlmICh0aGlzLm9uU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm9uU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9XG4gICAgbmV4dCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdCgpO1xuICAgIH1cbiAgICBlbWl0KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIC8vIE5vdGlmeSBhbGwgc3Vic2NyaWJlcnMgd2l0aCB0aGUgbmV3IHZhbHVlXG4gICAgICAgIC8vIGNvbnN0IHN1YnMgPSBbLi4udGhpcy5zdWJzY3JpYmVyc10gLy8gc3VicyBtYXkgY2hhbmdlIGFzIHdlIGNhbGwgY2FsbGJhY2tzXG4gICAgICAgIGNvbnN0IHN1YnMgPSB0aGlzLnN1YnNjcmliZXJzOyAvLyBzdWJzIG1heSBjaGFuZ2UgYXMgd2UgY2FsbCBjYWxsYmFja3NcbiAgICAgICAgLy8gY29uc3QgbGVuZ3RoID0gc3Vicy5sZW5ndGhcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vicykge1xuICAgICAgICAgICAgc3ViLmNhbGxiYWNrKHZhbHVlLCBzdWIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZSgoeCwgc3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgcmVzKHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogbGlrZSB0b1Byb21pc2UgYnV0IGZhc3Rlci4gT25seSBnZXQgY2FsbGVkIG9uY2UuIE5vIHN1YnNjcmlwdGlvbiB0byBtYW5hZ2UgKi9cbiAgICB0b0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlKCh4LCBydW50aW1lU3ViKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YWdKc1Vuc3ViID0gcnVudGltZVN1Yj8udW5zdWJzY3JpYmU7XG4gICAgICAgICAgICBpZiAodGFnSnNVbnN1Yikge1xuICAgICAgICAgICAgICAgIHRhZ0pzVW5zdWIoKTsgLy8gaXRzIGZyb20gdGFnZ2VkanNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCksIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soeCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcGlwZSguLi5vcGVyYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdCh0aGlzLnZhbHVlKTtcbiAgICAgICAgc3ViamVjdC5zZXRNZXRob2RzKG9wZXJhdGlvbnMpO1xuICAgICAgICBzdWJqZWN0LnN1YnNjcmliZVdpdGggPSAoeCkgPT4gdGhpcy5zdWJzY3JpYmUoeCk7XG4gICAgICAgIHN1YmplY3QubmV4dCA9IHggPT4gdGhpcy5uZXh0KHgpO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9XG4gICAgc2V0TWV0aG9kcyhvcGVyYXRpb25zKSB7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IG9wZXJhdGlvbnM7XG4gICAgfVxuICAgIHN0YXRpYyBhbGwoYXJncykge1xuICAgICAgICBjb25zdCBzd2l0Y2hlZCA9IGFyZ3MubWFwKGFyZyA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTdWJqZWN0SW5zdGFuY2UoYXJnKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgY2FsbGJhY2sgaW1tZWRpYXRlbHkgd2l0aCB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgeCA9IG5ldyBTdWJqZWN0KGFyZywgc3Vic2NyaXB0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ubmV4dChhcmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3Qoc3dpdGNoZWQpO1xuICAgIH1cbn1cblN1YmplY3QuZ2xvYmFsU3ViQ291bnQkID0gbmV3IFN1YmplY3QoMCk7IC8vIGZvciBlYXNlIG9mIGRlYnVnZ2luZ31cbmV4cG9ydCBjbGFzcyBTdWJqZWN0aXZlIGV4dGVuZHMgU3ViamVjdCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIFxuICAgIC8vIHByaXZhdGU/XG4gICAgb25TdWJzY3JpcHRpb24pIHtcbiAgICAgICAgc3VwZXIodmFsdWUsIG9uU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uU3Vic2NyaXB0aW9uID0gb25TdWJzY3JpcHRpb247XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIGRlZmluZVZhbHVlT24odGhpcyk7XG4gICAgfVxuICAgIG5leHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0KCk7XG4gICAgfVxuICAgIGVtaXQoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fdmFsdWU7XG4gICAgICAgIC8vIE5vdGlmeSBhbGwgc3Vic2NyaWJlcnMgd2l0aCB0aGUgbmV3IHZhbHVlXG4gICAgICAgIC8vIGNvbnN0IHN1YnMgPSBbLi4udGhpcy5zdWJzY3JpYmVyc10gLy8gc3VicyBtYXkgY2hhbmdlIGFzIHdlIGNhbGwgY2FsbGJhY2tzXG4gICAgICAgIGNvbnN0IHN1YnMgPSB0aGlzLnN1YnNjcmliZXJzOyAvLyBzdWJzIG1heSBjaGFuZ2UgYXMgd2UgY2FsbCBjYWxsYmFja3NcbiAgICAgICAgLy8gY29uc3QgbGVuZ3RoID0gc3Vicy5sZW5ndGhcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vicykge1xuICAgICAgICAgICAgc3ViLmNhbGxiYWNrKHZhbHVlLCBzdWIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVZhbHVlT24oc3ViamVjdCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJqZWN0LCAndmFsdWUnLCB7XG4gICAgICAgIC8vIHN1cHBvcnRzIHN1YmplY3QudmFsdWUgPSB4XG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgc3ViamVjdC5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHN1YmplY3QuZW1pdCgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBzdXBwb3J0cyBzdWJqZWN0LnZhbHVlXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJqZWN0Ll92YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9zdWJqZWN0L1N1YmplY3QuY2xhc3MuanMnO1xuLyoqIEVtaXRzIGV2ZW50IGF0IHRoZSBlbmQgb2YgYSB0YWcgYmVpbmcgcmVuZGVyZWQuIFVzZSB0YWdDbG9zZWQkLnRvUHJvbWlzZSgpIHRvIHJlbmRlciBhIHRhZyBhZnRlciBhIGN1cnJlbnQgdGFnIGlzIGRvbmUgcmVuZGVyaW5nICAqL1xuZXhwb3J0IGNvbnN0IHRhZ0Nsb3NlZCQgPSBuZXcgU3ViamVjdCh1bmRlZmluZWQsIGZ1bmN0aW9uIHRhZ0Nsb3NlcihzdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoIWdldFN1cHBvcnRJbkN5Y2xlKCkpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLm5leHQoKTsgLy8gd2UgYXJlIG5vdCBjdXJyZW50bHkgcHJvY2Vzc2luZyBzbyBwcm9jZXNzIG5vd1xuICAgIH1cbn0pO1xuIiwiaW1wb3J0IHsgZmlyc3RTdGF0ZXNIYW5kbGVyIH0gZnJvbSAnLi9zdGF0ZXMudXRpbHMuanMnO1xuaW1wb3J0IHsgcnVuRmlyc3RTdGF0ZSB9IGZyb20gJy4vc3RhdGVIYW5kbGVycy5qcyc7XG5pbXBvcnQgeyB0YWdDbG9zZWQkIH0gZnJvbSAnLi90YWdDbG9zZWQkLnN1YmplY3QuanMnO1xuZXhwb3J0IGNvbnN0IHNldFVzZU1lbW9yeSA9IHtcbiAgICBzdGF0ZUNvbmZpZzoge1xuICAgICAgICBzdGF0ZUFycmF5OiBbXSwgLy8gc3RhdGUgbWVtb3J5IG9uIHRoZSBmaXJzdCByZW5kZXJcbiAgICAgICAgdmVyc2lvbjogRGF0ZS5ub3coKSxcbiAgICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgICAgIGhhbmRsZXI6IHJ1bkZpcnN0U3RhdGUsXG4gICAgICAgICAgICBzdGF0ZXNIYW5kbGVyOiBmaXJzdFN0YXRlc0hhbmRsZXIsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRhZ0Nsb3NlZCQsXG59O1xuIiwiaW1wb3J0IHsgdXBkYXRlVG9EaWZmVmFsdWUgfSBmcm9tICcuL3VwZGF0ZVRvRGlmZlZhbHVlLmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIGZvciBhbGwgdGFnIHZhbHVlIHVwZGF0ZXMuIERldGVybWluZXMgaWYgdmFsdWUgY2hhbmdlZCBzaW5jZSBsYXN0IHJlbmRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZShjb250ZXh0SXRlbSwgbmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5vd25lclN1cHBvcnQpIHtcbiAgICAvLyBIYXZlIHRoZSBjb250ZXh0IGNoZWNrIGl0c2VsZiAoYXZvaWQgaGF2aW5nIHRvIGRldGVjdCBvbGQgdmFsdWUpXG4gICAgY29uc3QgdGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBjb25zdCBpZ25vcmVPckRlc3Ryb3llZCA9IHRhZ0pzVmFyLmNoZWNrVmFsdWVDaGFuZ2UobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIC8vIGlnbm9yZVxuICAgIGlmIChpZ25vcmVPckRlc3Ryb3llZCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGlnbm9yZU9yRGVzdHJveWVkOyAvLyBkbyBub3RoaW5nXG4gICAgfVxuICAgIHVwZGF0ZVRvRGlmZlZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpZ25vcmVPckRlc3Ryb3llZCk7XG4gICAgcmV0dXJuIGlnbm9yZU9yRGVzdHJveWVkO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgcHJvY2Vzc0ZpcnN0U3ViamVjdFZhbHVlIH0gZnJvbSBcIi4uLy4uL3RhZy91cGRhdGUvcHJvY2Vzc0ZpcnN0U3ViamVjdFZhbHVlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSwgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tIFwiLi4vLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRvbVByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgc3VwcG9ydCwgY29udGV4dEl0ZW0sIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIHN1YmplY3QubG9ja2VkID0gdHJ1ZTtcbiAgICBjb250ZXh0SXRlbS5lbGVtZW50ID0gYXBwZW5kVG87XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgIHByb2Nlc3NGaXJzdFN1YmplY3RWYWx1ZSh2YWx1ZSwgY29udGV4dEl0ZW0sIHN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgZGVsZXRlIHN1YmplY3QubG9ja2VkO1xuICAgIGNvbnRleHRJdGVtLnZhbHVlID0gdmFsdWU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0ZpcnN0U3ViamVjdFZhbHVlKHZhbHVlLCBjb250ZXh0SXRlbSwgLy8gY291bGQgYmUgdGFnIHZpYSByZXN1bHQudGFnXG5vd25lclN1cHBvcnQsIC8vIG93bmluZ1N1cHBvcnRcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCB0YWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgIHJldHVybiB0YWdKc1Zhci5wcm9jZXNzSW5pdCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG59XG4iLCJpbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2FzdFRleHRWYWx1ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIiwiaW1wb3J0IHsgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlIH0gZnJvbSAnLi9mb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUuZnVuY3Rpb24uanMnO1xuLyoqIENoZWNrcyBpZiB2YWx1ZSBoYXMgY2hhbmdlZCBiZWZvcmUgdXBkYXRpbmcuIFVzZWQgZm9yIGFsbCB0YWcgdmFsdWUgdXBkYXRlcy4gRGV0ZXJtaW5lcyBpZiB2YWx1ZSBjaGFuZ2VkIHNpbmNlIGxhc3QgcmVuZGVyICovXG5leHBvcnQgZnVuY3Rpb24gdGFnVmFsdWVVcGRhdGVIYW5kbGVyKG5ld1ZhbHVlLCAvLyBuZXdWYWx1ZVxuY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIC8vIERvIG5vdCBjb250aW51ZSBpZiB0aGUgdmFsdWUgaXMganVzdCB0aGUgc2FtZVxuICAgIGlmIChuZXdWYWx1ZSA9PT0gY29udGV4dEl0ZW0udmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICByZXR1cm4gZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbn1cbiIsImltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwYWludENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG4vLyBNYXliZSBtb3JlIHBlcmZvcm1hbnQgZm9yIHVwZGF0ZXMgYnV0IHNlZW1pbmdseSBzbG93ZXIgZm9yIGZpcnN0IHJlbmRlcnNcbmV4cG9ydCBmdW5jdGlvbiBob3dUb1NldElucHV0VmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBob3dUb1NldElucHV0T2JqZWN0VmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBwYWludENvbnRlbnQucHVzaChbaG93VG9TZXRGaXJzdElucHV0VmFsdWUsIFtlbGVtZW50LCBuYW1lLCB2YWx1ZV1dKTtcbn1cbmZ1bmN0aW9uIGhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudFtuYW1lXSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZWxlbWVudFtuYW1lXSA9IHt9O1xuICAgIH1cbiAgICAvLyBIYW5kbGUgb2JqZWN0IHZhbHVlcyBieSBzZXR0aW5nIHByb3BlcnRpZXMgZGlyZWN0bHlcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBwYWludENvbnRlbnQucHVzaChbc2V0T2JqZWN0VmFsdWUsIFtlbGVtZW50LCBuYW1lLCBrZXksIHZhbHVlW2tleV1dXSk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50W25hbWVdLnNldFByb3BlcnR5KSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbc2V0UHJvcGVydHlWYWx1ZSwgW2VsZW1lbnQsIG5hbWUsIGtleSwgdmFsdWVba2V5XV1dKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBob3dUb1NldFN0YW5kQWxvbmVBdHRyKGVsZW1lbnQsIG5hbWUsIF92YWx1ZSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBob3dUb1NldEZpcnN0SW5wdXRWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBob3dUb1NldElucHV0T2JqZWN0VmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIG5hbWUsIGtleSwgdmFsdWUpIHtcbiAgICA7XG4gICAgZWxlbWVudFtuYW1lXS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldE9iamVjdFZhbHVlKGVsZW1lbnQsIG5hbWUsIGtleSwgdmFsdWUpIHtcbiAgICA7XG4gICAgZWxlbWVudFtuYW1lXVtrZXldID0gdmFsdWU7XG59XG4iLCJpbXBvcnQgeyBwYWludENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG4vKiogaGFuZGxlcyBhdXRvZm9jdXMsIGF1dG9zZWxlY3QsIHN0eWxlLiwgY2xhc3MuICovXG5leHBvcnQgZnVuY3Rpb24gc3BlY2lhbEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgZWxlbWVudCwgc3BlY2lhbE5hbWUpIHtcbiAgICBzd2l0Y2ggKHNwZWNpYWxOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2F1dG9mb2N1cyc6XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbYXV0b2ZvY3VzLCBbZWxlbWVudF1dKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSAnYXV0b3NlbGVjdCc6XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbYXV0b3NlbGVjdCwgW2VsZW1lbnRdXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgJ3N0eWxlJzoge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbcGFpbnRTdHlsZSwgW2VsZW1lbnQsIG5hbWVzLCB2YWx1ZV1dKTsgLy8gYXR0cmlidXRlIGNoYW5nZXMgc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgICAgICBwcm9jZXNzU3BlY2lhbENsYXNzKG5hbWUsIHZhbHVlLCBlbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNwZWNpYWwgYXR0cmlidXRlIG9mICR7c3BlY2lhbE5hbWV9LiAke25hbWV9YCk7XG59XG5mdW5jdGlvbiBwYWludFN0eWxlKGVsZW1lbnQsIG5hbWVzLCB2YWx1ZSkge1xuICAgIGNvbnN0IHNtYWxsTmFtZSA9IG5hbWVzWzFdO1xuICAgIGVsZW1lbnQuc3R5bGVbc21hbGxOYW1lXSA9IHZhbHVlOyAvLyBzdHlsZS5iYWNrZ3JvdW5kR3JvdW5kXG4gICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShzbWFsbE5hbWUsIHZhbHVlKTsgLy8gc3R5bGUuYmFja2dyb3VuZC1ncm91bmRcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTcGVjaWFsQ2xhc3MobmFtZSwgdmFsdWUsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBuYW1lcyA9IG5hbWUuc3BsaXQoJy4nKTtcbiAgICBuYW1lcy5zaGlmdCgpOyAvLyByZW1vdmUgY2xhc3NcbiAgICAvLyB0cnV0aHlcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbY2xhc3NMaXN0QWRkLCBbZWxlbWVudCwgbmFtZV1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZhbHN5XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtjbGFzc0xpc3RSZW1vdmUsIFtlbGVtZW50LCBuYW1lXV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsYXNzTGlzdEFkZChlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKG5hbWUpO1xufVxuZnVuY3Rpb24gY2xhc3NMaXN0UmVtb3ZlKGVsZW1lbnQsIG5hbWUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG59XG5mdW5jdGlvbiBhdXRvc2VsZWN0KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnNlbGVjdCgpO1xufVxuZnVuY3Rpb24gYXV0b2ZvY3VzKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmZvY3VzKCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaGFuZGxlUHJvdmlkZXJDaGFuZ2VzKGFwcFN1cHBvcnQsIHByb3ZpZGVyKSB7XG4gICAgY29uc3QgdGFnc1dpdGhQcm92aWRlciA9IGdldFRhZ3NXaXRoUHJvdmlkZXIoYXBwU3VwcG9ydCwgcHJvdmlkZXIpO1xuICAgIHJldHVybiB0YWdzV2l0aFByb3ZpZGVyO1xufVxuLyoqIFVwZGF0ZXMgYW5kIHJldHVybnMgbWVtb3J5IG9mIHRhZyBwcm92aWRlcnMgKi9cbmZ1bmN0aW9uIGdldFRhZ3NXaXRoUHJvdmlkZXIoc3VwcG9ydCwgcHJvdmlkZXIsIG1lbW9yeSA9IFtdKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBtZW1vcnkucHVzaCh7XG4gICAgICAgIHN1cHBvcnQsXG4gICAgICAgIHJlbmRlckNvdW50OiBzdWJqZWN0LnJlbmRlckNvdW50LFxuICAgICAgICBwcm92aWRlcixcbiAgICB9KTtcbiAgICBjb25zdCBjaGlsZFRhZ3MgPSBwcm92aWRlci5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpbmRleCA9IGNoaWxkVGFncy5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRUYWdzW2luZGV4XTtcbiAgICAgICAgY29uc3QgY1N1YmplY3QgPSBjaGlsZC5jb250ZXh0O1xuICAgICAgICBtZW1vcnkucHVzaCh7XG4gICAgICAgICAgICBzdXBwb3J0OiBjaGlsZCxcbiAgICAgICAgICAgIHJlbmRlckNvdW50OiBjU3ViamVjdC5yZW5kZXJDb3VudCxcbiAgICAgICAgICAgIHByb3ZpZGVyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9yeTtcbn1cbiIsImltcG9ydCB7IGhhbmRsZVByb3ZpZGVyQ2hhbmdlcyB9IGZyb20gJy4vaGFuZGxlUHJvdmlkZXJDaGFuZ2VzLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlcnNDaGFuZ2VDaGVjayhzdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICBjb25zdCBwcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzO1xuICAgIGlmICghcHJvdmlkZXJzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgcHJvc1dpdGhDaGFuZ2VzID0gW107XG4gICAgLy8gcmVzZXQgY2xvbmVzXG4gICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnMpIHtcbiAgICAgICAgY29uc3Qgb3duZXIgPSBwcm92aWRlci5vd25lcjtcbiAgICAgICAgY29uc3QgaGFzQ2hhbmdlID0gaGFuZGxlUHJvdmlkZXJDaGFuZ2VzKG93bmVyLCBwcm92aWRlcik7XG4gICAgICAgIHByb3NXaXRoQ2hhbmdlcy5wdXNoKC4uLmhhc0NoYW5nZS5tYXAobWFwVG9TdXBwb3J0KSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9zV2l0aENoYW5nZXM7XG59XG5mdW5jdGlvbiBtYXBUb1N1cHBvcnQoeCkge1xuICAgIHJldHVybiB4LnN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBpc0FycmF5LCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZShvYmosIG1heERlcHRoKSB7XG4gICAgLy8gcmV0dXJuIG1ha2VEZWVwQ2xvbmUob2JqLCBuZXcgV2Vha01hcCgpKVxuICAgIHJldHVybiBtYWtlRGVlcENsb25lKG9iaiwgbWF4RGVwdGgpO1xufVxuZnVuY3Rpb24gbWFrZURlZXBDbG9uZShvYmosIFxuLy8gdmlzaXRlZDogV2Vha01hcDxhbnksIGFueT5cbm1heERlcHRoKSB7XG4gICAgLy8gSWYgb2JqIGlzIGEgcHJpbWl0aXZlIHR5cGUgb3IgbnVsbCwgcmV0dXJuIGl0IGRpcmVjdGx5XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBCYXNpY1R5cGVzLm9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICAvLyBJZiBvYmogaXMgYWxyZWFkeSB2aXNpdGVkLCByZXR1cm4gdGhlIGNsb25lZCByZWZlcmVuY2VcbiAgICAvKlxuICAgIGlmICh2aXNpdGVkLmhhcyhvYmopKSB7XG4gICAgICByZXR1cm4gdmlzaXRlZC5nZXQob2JqKVxuICAgIH1cbiAgICAqL1xuICAgIGlmIChtYXhEZXB0aCA8IDApIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZXMgbGlrZSBEYXRlIGFuZCBSZWdFeHBcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUob2JqKTtcbiAgICB9XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChvYmopO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYW4gZW1wdHkgb2JqZWN0IG9yIGFycmF5IHdpdGggdGhlIHNhbWUgcHJvdG90eXBlXG4gICAgY29uc3QgY2xvbmUgPSBpc0FycmF5KG9iaikgPyBbXSA6IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpO1xuICAgIC8vIENsb25lIGVhY2ggcHJvcGVydHkgb3IgZWxlbWVudCBvZiB0aGUgb2JqZWN0IG9yIGFycmF5XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2xvbmVbaV0gPSBtYWtlRGVlcENsb25lKG9ialtpXSwgbWF4RGVwdGggLSAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICAgIGNsb25lW2tleV0gPSBtYWtlRGVlcENsb25lKG9ialtrZXldLCBtYXhEZXB0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGgpIHtcbiAgICByZXR1cm4gaXNEZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGgpO1xufVxuZnVuY3Rpb24gaXNEZWVwRXF1YWwob2JqMSwgb2JqMiwgXG4vLyB2aXNpdGVkOiBXZWFrTWFwPGFueSwgYW55Pixcbm1heERlcHRoKSB7XG4gICAgY29uc3QgZGlyZWN0RXF1YWwgPSBvYmoxID09PSBvYmoyO1xuICAgIGlmIChkaXJlY3RFcXVhbCB8fCBpc1NhbWVGdW5jdGlvbnMob2JqMSwgb2JqMikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIElmIG9iaiBpcyBhbHJlYWR5IHZpc2l0ZWQsIHJldHVybiB0aGUgY2xvbmVkIHJlZmVyZW5jZVxuICAgIC8vIGlmICh2aXNpdGVkLmhhcyhvYmoxKSkge1xuICAgIGlmIChtYXhEZXB0aCA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqMSA9PT0gQmFzaWNUeXBlcy5vYmplY3QgJiYgdHlwZW9mIG9iajIgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIC8vIGJvdGggYXJlIGRhdGVzIGFuZCB3ZXJlIGFscmVhZHkgZGV0ZXJtaW5lZCBub3QgdGhlIHNhbWVcbiAgICAgICAgaWYgKG9iajEgaW5zdGFuY2VvZiBEYXRlICYmIG9iajIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqMS5nZXRUaW1lKCkgPT09IG9iajIuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBjbG9uZWQgb2JqZWN0IHRvIGF2b2lkIGN5Y2xpYyByZWZlcmVuY2VzXG4gICAgICAgIC8vIHZpc2l0ZWQuc2V0KG9iajEsIDApXG4gICAgICAgIC8vIENoZWNrIGlmIG9iajEgYW5kIG9iajIgYXJlIGJvdGggYXJyYXlzXG4gICAgICAgIGlmIChpc0FycmF5KG9iajEpICYmIGlzQXJyYXkob2JqMikpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5RGVlcEVxdWFsKG9iajEsIG9iajIsIG1heERlcHRoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheShvYmoxKSB8fCBpc0FycmF5KG9iajIpKSB7XG4gICAgICAgICAgICAvLyBPbmUgaXMgYW4gYXJyYXksIGFuZCB0aGUgb3RoZXIgaXMgbm90XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIGlzT2JqZWN0RGVlcEVxdWFsKG9iajEsIG9iajIsIHZpc2l0ZWQpXG4gICAgICAgIHJldHVybiBpc09iamVjdERlZXBFcXVhbChvYmoxLCBvYmoyLCBtYXhEZXB0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdERlZXBFcXVhbChvYmoxLCBvYmoyLCBcbi8vIHZpc2l0ZWQ6IFdlYWtNYXA8YW55LCBhbnk+LFxubWF4RGVwdGgpIHtcbiAgICBjb25zdCBrZXlzMSA9IE9iamVjdC5rZXlzKG9iajEpO1xuICAgIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMob2JqMik7XG4gICAgaWYgKGtleXMxLmxlbmd0aCA9PT0gMCAmJiBrZXlzMi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMxKSB7XG4gICAgICAgIGNvbnN0IGtleUZvdW5kID0ga2V5czIuaW5jbHVkZXMoa2V5KTtcbiAgICAgICAgaWYgKCFrZXlGb3VuZCB8fCAhaXNEZWVwRXF1YWwob2JqMVtrZXldLCBvYmoyW2tleV0sIG1heERlcHRoIC0gMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGlzQXJyYXlEZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGgpIHtcbiAgICBpZiAob2JqMS5sZW5ndGggIT09IG9iajIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNEZWVwRXF1YWwob2JqMVtpXSwgb2JqMltpXSwgbWF4RGVwdGggLSAxKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNTYW1lRnVuY3Rpb25zKGZuMCwgZm4xKSB7XG4gICAgY29uc3QgYm90aEZ1bmN0aW9uID0gaXNGdW5jdGlvbihmbjApICYmIGlzRnVuY3Rpb24oZm4xKTtcbiAgICByZXR1cm4gYm90aEZ1bmN0aW9uICYmIGZuMC50b1N0cmluZygpID09PSBmbjEudG9TdHJpbmcoKTtcbn1cbiIsImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd1Byb3BNYXRjaChwcm9wcywgcGFzdENsb25lUHJvcHMpIHtcbiAgICAvLyBpZiBldmVyeSBwcm9wIHRoZSBzYW1lLCB0aGVuIG5vIGNoYW5nZXNcbiAgICBjb25zdCBsZW4gPSBwcm9wcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbjsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBwcm9wID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBjb25zdCBwYXN0UHJvcCA9IHBhc3RDbG9uZVByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKGlzQXJyYXkocHJvcCkgJiYgaXNBcnJheShwYXN0UHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChwcm9wID09PSBwYXN0UHJvcCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDMuMDsgLy8gbm90IGVxdWFsIGFycmF5XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24gJiYgdHlwZW9mIChwYXN0UHJvcCkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBjb25zaWRlcmVkIGdvb2RcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChwcm9wKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHBhc3RDbG9uZVByb3BzKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYkVudHJpZXMgPSBPYmplY3QuZW50cmllcyhwcm9wKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1Ykl0ZW0gb2Ygb2JFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9iamVjdEl0ZW1NYXRjaGVzKHN1Ykl0ZW0sIHBhc3RQcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzLjE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gYWxsIHN1YiBvYmplY3RzIG1hdGNoZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcCA9PT0gcGFzdFByb3ApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBtYXRjaGVkIGdvb2RcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMy4zOyAvLyBub3QgZXF1YWxcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBmYWxzZSBtZWFucyBoYXMgbm90IGNoYW5nZWRcbn1cbmZ1bmN0aW9uIG9iamVjdEl0ZW1NYXRjaGVzKFtuYW1lLCB2YWx1ZV0sIHBhc3RQcm9wKSB7XG4gICAgY29uc3QgcGFzdFZhbHVlID0gcGFzdFByb3BbbmFtZV07XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uICYmIHR5cGVvZiAocGFzdFZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhc3RWYWx1ZSA9PT0gdmFsdWU7XG59XG4iLCJpbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICcuLi9kZWVwRnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2xvbmVWYWx1ZUFycmF5KHZhbHVlcykge1xuICAgIHJldHVybiB2YWx1ZXMubWFwKGNsb25lVGFnSnNWYWx1ZSk7XG59XG4vKiogY2xvbmVzIG9ubHkgd2hhdCBpcyBuZWVkZWQgdG8gY29tcGFyZSBkaWZmZXJlbmNlcyBsYXRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lVGFnSnNWYWx1ZSh2YWx1ZSwgbWF4RGVwdGgpIHtcbiAgICBjb25zdCB0YWcgPSB2YWx1ZTtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSB2YWx1ZT8udGFnSnNUeXBlO1xuICAgIGlmICh0YWdKc1R5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0YWdKc1R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgVmFsdWVUeXBlcy5zaWduYWw6XG4gICAgICAgICAgICBjYXNlIFZhbHVlVHlwZXMuc3Vic2NyaWJlOlxuICAgICAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyOlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYXNlIFZhbHVlVHlwZXMuZG9tOlxuICAgICAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRhZzpcbiAgICAgICAgICAgIGNhc2UgVmFsdWVUeXBlcy50ZW1wbGF0ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lVmFsdWVBcnJheSh0YWcudmFsdWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lVmFsdWVBcnJheSh0YWcpO1xuICAgIH1cbiAgICByZXR1cm4gZGVlcENsb25lKHZhbHVlLCBtYXhEZXB0aCk7XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGNsb25lVGFnSnNWYWx1ZSB9IGZyb20gJy4uL2Nsb25lVmFsdWVBcnJheS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZWVwQ29tcGFyZURlcHRoLCBzaGFsbG93Q29tcGFyZURlcHRoIH0gZnJvbSAnLi4vaGFzU3VwcG9ydENoYW5nZWQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVByb3BzQnkoc3VwcG9ydCwgcHJvcHMsIGNhc3RQcm9wcykge1xuICAgIGNvbnN0IHRlbXBsYXRlciA9IHN1cHBvcnQudGVtcGxhdGVyO1xuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoICh0ZW1wbGF0ZXIucHJvcFdhdGNoKSB7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuSU1NVVRBQkxFOlxuICAgICAgICAgICAgcmV0dXJuIHN1cHBvcnQucHJvcHNDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0OiBwcm9wcyxcbiAgICAgICAgICAgICAgICBjYXN0UHJvcHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFByb3BXYXRjaGVzLlNIQUxMT1c6XG4gICAgICAgICAgICByZXR1cm4gc3VwcG9ydC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBsYXRlc3Q6IHByb3BzLm1hcChzaGFsbG93TWFwcGVyKSxcbiAgICAgICAgICAgICAgICBjYXN0UHJvcHMsXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgbGF0ZXN0OiBwcm9wcy5tYXAoZGVlcE1hcHBlciksXG4gICAgICAgIGNhc3RQcm9wcyxcbiAgICB9O1xufVxuZnVuY3Rpb24gc2hhbGxvd01hcHBlcih4KSB7XG4gICAgcmV0dXJuIGNsb25lVGFnSnNWYWx1ZSh4LCBzaGFsbG93Q29tcGFyZURlcHRoKTtcbn1cbmZ1bmN0aW9uIGRlZXBNYXBwZXIocHJvcHMpIHtcbiAgICByZXR1cm4gY2xvbmVUYWdKc1ZhbHVlKHByb3BzLCBkZWVwQ29tcGFyZURlcHRoKTtcbn1cbiIsImltcG9ydCB7IGNsb25lUHJvcHNCeSB9IGZyb20gJy4vcHJvcHMvY2xvbmVQcm9wc0J5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9zdWJqZWN0L1N1YmplY3QuY2xhc3MuanMnO1xuLyoqIHVzZWQgb25seSBmb3IgYXBwcywgb3RoZXJ3aXNlIHVzZSBTdXBwb3J0ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBjb250ZXh0LCBjYXN0ZWRQcm9wcykge1xuICAgIGNvbnN0IGJhc2VTdXBwb3J0ID0ge1xuICAgICAgICB0ZW1wbGF0ZXIsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNhc3RlZFByb3BzLFxuICAgICAgICBhcHBTdXBwb3J0OiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICAvLyBjb25zdCBnbG9iYWwgPSBjb250ZXh0Lmdsb2JhbCB8fCBnZXROZXdHbG9iYWwoY29udGV4dClcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0Lmdsb2JhbDtcbiAgICBnbG9iYWwuYmxvY2tlZCA9IFtdO1xuICAgIGdsb2JhbC5kZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgLy8gZ2xvYmFsLm9sZGVzdCA9IGdsb2JhbC5vbGRlc3QgfHwgYmFzZVN1cHBvcnQgYXMgQW55U3VwcG9ydFxuICAgIC8vIGdsb2JhbC5vbGRlc3QgPSBiYXNlU3VwcG9ydCBhcyBBbnlTdXBwb3J0XG4gICAgcmV0dXJuIGJhc2VTdXBwb3J0O1xufVxuLyoqIFNldHMgc3VwcG9ydCBzdGF0ZXMgdG8gZW1wdHkgYXJyYXkgYW5kIGNsb25lcyBwcm9wcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZ3JhZGVCYXNlVG9TdXBwb3J0KHRlbXBsYXRlciwgLy8gYXQgcnVudGltZSByZW5kZXJpbmcgb2YgYSB0YWcsIGl0IG5lZWRzIHRvIGJlIG1hcnJpZWQgdG8gYSBuZXcgU3VwcG9ydCgpXG5zdXBwb3J0LCBhcHBTdXBwb3J0LCBjYXN0ZWRQcm9wcykge1xuICAgIC8vIDsoc3VwcG9ydCBhcyBBbnlTdXBwb3J0KS5zdGF0ZSA9IFtdXG4gICAgLy8gOyhzdXBwb3J0IGFzIEFueVN1cHBvcnQpLnN0YXRlcyA9IFtdXG4gICAgc3VwcG9ydC5hcHBTdXBwb3J0ID0gYXBwU3VwcG9ydDtcbiAgICBjb25zdCBwcm9wcyA9IHRlbXBsYXRlci5wcm9wczsgLy8gbmF0dXJhbCBwcm9wc1xuICAgIGlmIChwcm9wcykge1xuICAgICAgICBzdXBwb3J0LnByb3BzQ29uZmlnID0gY2xvbmVQcm9wc0J5KHN1cHBvcnQsIHByb3BzLCBjYXN0ZWRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUh0bWxTdXBwb3J0KHRlbXBsYXRlciwgLy8gYXQgcnVudGltZSByZW5kZXJpbmcgb2YgYSB0YWcsIGl0IG5lZWRzIHRvIGJlIG1hcnJpZWQgdG8gYSBuZXcgU3VwcG9ydCgpXG5vd25lclN1cHBvcnQsIGFwcFN1cHBvcnQsIGNvbnRleHQsIGNhc3RlZFByb3BzKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHtcbiAgICAgICAgdGVtcGxhdGVyLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjYXN0ZWRQcm9wcyxcbiAgICAgICAgYXBwU3VwcG9ydDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgc3VwcG9ydC5vd25lclN1cHBvcnQgPSBvd25lclN1cHBvcnQ7XG4gICAgc3VwcG9ydC5hcHBTdXBwb3J0ID0gYXBwU3VwcG9ydDtcbiAgICByZXR1cm4gc3VwcG9ydDtcbn1cbiIsIi8vIExpZmUgY3ljbGUgNCAtIGVuZCBvZiBsaWZlXG5leHBvcnQgZnVuY3Rpb24gcnVuQmVmb3JlRGVzdHJveShzdXBwb3J0LCBnbG9iYWwpIHtcbiAgICBjb25zdCBwcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzO1xuICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gcHJvdmlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJvdmlkZXIuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5jb250ZXh0Lmdsb2JhbCA9PT0gZ2xvYmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChnbG9iYWwuZGVzdHJveSQpIHtcbiAgICAgICAgZ2xvYmFsLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB9XG4gICAgc3VwcG9ydC5jb250ZXh0LnJlbmRlckNvdW50ID0gMDsgLy8gaWYgaXQgY29tZXMgYmFjaywgd29udCBiZSBjb25zaWRlcmVkIGFuIHVwZGF0ZVxufVxuIiwiaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IHJ1bkJlZm9yZURlc3Ryb3kgfSBmcm9tICcuL3RhZ1J1bm5lci5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lDb250ZXh0KGNoaWxkVGFncywgb3duZXJTdXBwb3J0KSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZFRhZ3MpIHtcbiAgICAgICAgLy8gZGVsZXRpbmcgYXJyYXlzXG4gICAgICAgIGNvbnN0IGxhc3RBcnJheSA9IGNoaWxkLmxhc3RBcnJheTtcbiAgICAgICAgaWYgKGxhc3RBcnJheSkge1xuICAgICAgICAgICAgLy8gcmVjdXJzZVxuICAgICAgICAgICAgZGVzdHJveUNvbnRleHQobGFzdEFycmF5LCBvd25lclN1cHBvcnQpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGRWYWx1ZSA9IGNoaWxkLnZhbHVlO1xuICAgICAgICBpZiAoY2hpbGRWYWx1ZT8udGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN1YnNjcmliZSkge1xuICAgICAgICAgICAgY2hpbGRWYWx1ZS5kZWxldGUoY2hpbGQsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICBjaGlsZC5kZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IGNoaWxkLmdsb2JhbDtcbiAgICAgICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBub3QgYSBzdXBwb3J0IGNvbnRleHRJdGVtXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3VwcG9ydCA9IGdsb2JhbC5uZXdlc3Q7XG4gICAgICAgIGNvbnN0IGlTdWJzID0gZ2xvYmFsLnN1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChpU3Vicykge1xuICAgICAgICAgICAgaVN1YnMuZm9yRWFjaCh1bnN1YnNjcmliZUZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RhZ0NvbXBvbmVudChzdXBwb3J0LnRlbXBsYXRlcikpIHtcbiAgICAgICAgICAgIHJ1bkJlZm9yZURlc3Ryb3koc3VwcG9ydCwgZ2xvYmFsKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJUYWdzID0gY2hpbGQuY29udGV4dHM7XG4gICAgICAgIC8vIHJlY3Vyc2VcbiAgICAgICAgZGVzdHJveUNvbnRleHQoc3ViVGFncywgc3VwcG9ydCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkVGFnc1RvU29mdERlc3Ryb3koY2hpbGRUYWdzLCB0YWdzID0gW10sIHN1YnMgPSBbXSkge1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRUYWdzKSB7XG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IGNoaWxkLmdsb2JhbDtcbiAgICAgICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBnbG9iYWwubmV3ZXN0O1xuICAgICAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICAgICAgdGFncy5wdXNoKHN1cHBvcnQpO1xuICAgICAgICAgICAgY29uc3QgaVN1YnMgPSBnbG9iYWwuc3Vic2NyaXB0aW9ucztcbiAgICAgICAgICAgIGlmIChpU3Vicykge1xuICAgICAgICAgICAgICAgIHN1YnMucHVzaCguLi5pU3Vicyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViVGFncyA9IGNoaWxkLmNvbnRleHRzO1xuICAgICAgICBpZiAoc3ViVGFncykge1xuICAgICAgICAgICAgZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveShzdWJUYWdzLCB0YWdzLCBzdWJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB0YWdzLCBzdWJzIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zdWJzY3JpYmVGcm9tKGZyb20pIHtcbiAgICBmcm9tLnVuc3Vic2NyaWJlKCk7XG59XG4iLCJpbXBvcnQgeyBhZGRQYWludFJlbW92ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVBcnJheUl0ZW1zKHZhbHVlLCBpbmRleCwgbGFzdEFycmF5LCByZW1vdmVkKSB7XG4gICAgY29uc3QgbmV3TGVuZ3RoID0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBhdCA9IGluZGV4IC0gcmVtb3ZlZDtcbiAgICBjb25zdCBsZXNzTGVuZ3RoID0gYXQgPCAwIHx8IG5ld0xlbmd0aCA8IGF0O1xuICAgIGNvbnN0IHByZXZDb250ZXh0ID0gbGFzdEFycmF5W2luZGV4XTtcbiAgICBpZiAobGVzc0xlbmd0aCkge1xuICAgICAgICBkZXN0cm95QXJyYXlJdGVtKHByZXZDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGNvbnN0IG9sZEtleSA9IHByZXZDb250ZXh0LnZhbHVlLmFycmF5VmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWVUYWcgPSB2YWx1ZVtpbmRleF07XG4gICAgY29uc3QgcmVzdWx0ID0gcnVuQXJyYXlJdGVtRGlmZihvbGRLZXksIG5ld1ZhbHVlVGFnLCBwcmV2Q29udGV4dCwgbGFzdEFycmF5LCBpbmRleCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJ1bkFycmF5SXRlbURpZmYob2xkS2V5LCBuZXdWYWx1ZVRhZywgcHJldkNvbnRleHQsIGxhc3RBcnJheSwgaW5kZXgpIHtcbiAgICBjb25zdCBpc0RpZmYgPSBuZXdWYWx1ZVRhZyAmJiBvbGRLZXkgIT09IG5ld1ZhbHVlVGFnLmFycmF5VmFsdWU7XG4gICAgaWYgKGlzRGlmZikge1xuICAgICAgICBkZXN0cm95QXJyYXlJdGVtKHByZXZDb250ZXh0KTtcbiAgICAgICAgbGFzdEFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95QXJyYXlJdGVtKGl0ZW0pIHtcbiAgICBjb25zdCBnbG9iYWwgPSBpdGVtLmdsb2JhbDtcbiAgICBkZXN0cm95QXJyYXlJdGVtQnlHbG9iYWwoZ2xvYmFsLCBpdGVtKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lBcnJheUl0ZW1CeUdsb2JhbChnbG9iYWwsIGl0ZW0pIHtcbiAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBnbG9iYWwub2xkZXN0O1xuICAgICAgICBkZXN0cm95U3VwcG9ydChzdXBwb3J0LCBnbG9iYWwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnQgPSBpdGVtLnNpbXBsZVZhbHVlRWxtO1xuICAgIGRlbGV0ZSBpdGVtLnNpbXBsZVZhbHVlRWxtO1xuICAgIGFkZFBhaW50UmVtb3ZlcihlbGVtZW50KTtcbn1cbiIsImltcG9ydCB7IGRlc3Ryb3lBcnJheUl0ZW0gfSBmcm9tICcuL3VwZGF0ZS9jb21wYXJlQXJyYXlJdGVtcy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tBcnJheVZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBzdWJqZWN0KSB7XG4gICAgLy8gbm8gbG9uZ2VyIGFuIGFycmF5P1xuICAgIGlmICghaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgICAgZGVzdHJveUFycmF5Q29udGV4dEl0ZW0oc3ViamVjdCk7XG4gICAgICAgIHJldHVybiA5OyAvLyAnYXJyYXknXG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95QXJyYXlDb250ZXh0SXRlbShzdWJqZWN0KSB7XG4gICAgY29uc3QgbGFzdEFycmF5ID0gc3ViamVjdC5sYXN0QXJyYXk7XG4gICAgZGVzdHJveUFycmF5KHN1YmplY3QsIGxhc3RBcnJheSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUFycmF5KHN1YmplY3QsIGxhc3RBcnJheSkge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXN0QXJyYXkubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGRlc3Ryb3lBcnJheUl0ZW0obGFzdEFycmF5W2luZGV4XSk7XG4gICAgfVxuICAgIGRlbGV0ZSBzdWJqZWN0Lmxhc3RBcnJheTtcbn1cbiIsImltcG9ydCB7IGRlc3Ryb3lBcnJheSB9IGZyb20gJy4vY2hlY2tEZXN0cm95UHJldmlvdXMuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkUGFpbnRSZW1vdmVyIH0gZnJvbSAnLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbi8qKiBzZXRzIGdsb2JhbC5kZWxldGVkIG9uIHN1cHBvcnQgYW5kIGFsbCBjaGlsZHJlbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNtYXJ0UmVtb3ZlS2lkcyhjb250ZXh0LCBhbGxQcm9taXNlcykge1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IHN1YkNvbnRleHRzID0gY29udGV4dC5jb250ZXh0cztcbiAgICBzbWFydFJlbW92ZUJ5Q29udGV4dChzdWJDb250ZXh0cywgYWxsUHJvbWlzZXMpO1xuICAgIGRlc3Ryb3lDbG9uZXMoZ2xvYmFsKTtcbn1cbmZ1bmN0aW9uIHNtYXJ0UmVtb3ZlQnlDb250ZXh0KGNvbnRleHRzLCBhbGxQcm9taXNlcykge1xuICAgIGZvciAoY29uc3QgY29udGV4dCBvZiBjb250ZXh0cykge1xuICAgICAgICBpZiAoY29udGV4dC5sb2NrZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LndpdGhpbk93bmVyRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgdGFnSnNWYXIgPSBjb250ZXh0LnRhZ0pzVmFyO1xuICAgICAgICAgICAgaWYgKHRhZ0pzVmFyICYmIHRhZ0pzVmFyLnRhZ0pzVHlwZSA9PT0gJ2hvc3QnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3ZXN0ID0gY29udGV4dC5zdXBwb3J0T3duZXI7XG4gICAgICAgICAgICAgICAgdGFnSnNWYXIuZGVsZXRlKGNvbnRleHQsIG5ld2VzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gaSBsaXZlIHdpdGhpbiBteSBvd25lciB2YXJpYWJsZS4gSSB3aWxsIGJlIGRlbGV0ZWQgd2l0aCBvd25lclxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RBcnJheSA9IGNvbnRleHQubGFzdEFycmF5O1xuICAgICAgICBpZiAobGFzdEFycmF5KSB7XG4gICAgICAgICAgICBkZXN0cm95QXJyYXkoY29udGV4dCwgbGFzdEFycmF5KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlZ3VsYXIgdmFsdWVzLCBubyBwbGFjZWhvbGRlcnNcbiAgICAgICAgY29uc3QgZWxtID0gY29udGV4dC5zaW1wbGVWYWx1ZUVsbTtcbiAgICAgICAgaWYgKGVsbSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbnRleHQuc2ltcGxlVmFsdWVFbG07XG4gICAgICAgICAgICBhZGRQYWludFJlbW92ZXIoZWxtKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1Ykdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgICAgICBpZiAoc3ViR2xvYmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBjb250ZXh0XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Ykdsb2JhbC5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gYWxyZWFkeSBkZWxldGVkXG4gICAgICAgIH1cbiAgICAgICAgc3ViR2xvYmFsLmRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCBvbGRlc3QgPSBzdWJHbG9iYWwub2xkZXN0O1xuICAgICAgICBpZiAob2xkZXN0KSB7XG4gICAgICAgICAgICBzbWFydFJlbW92ZUtpZHMoY29udGV4dCwgYWxsUHJvbWlzZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKiogRGVzdHJveSBkb20gZWxlbWVudHMgYW5kIGRvbSBzcGFjZSBtYXJrZXJzICovXG5mdW5jdGlvbiBkZXN0cm95Q2xvbmVzKGdsb2JhbCkge1xuICAgIGNvbnN0IGh0bWxEb21NZXRhID0gZ2xvYmFsLmh0bWxEb21NZXRhO1xuICAgIC8vIGNoZWNrIHN1YmplY3RzIHRoYXQgbWF5IGhhdmUgY2xvbmVzIGF0dGFjaGVkIHRvIHRoZW1cbiAgICBmb3IgKGxldCBpbmRleCA9IGh0bWxEb21NZXRhLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBodG1sRG9tTWV0YVtpbmRleF07XG4gICAgICAgIGRlc3Ryb3lDbG9uZShjbG9uZSk7XG4gICAgICAgIGh0bWxEb21NZXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVzdHJveUNsb25lKGNsb25lKSB7XG4gICAgY29uc3QgbWFya2VyID0gY2xvbmUubWFya2VyO1xuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgYWRkUGFpbnRSZW1vdmVyKG1hcmtlcik7XG4gICAgfVxuICAgIGNvbnN0IGRvbSA9IGNsb25lLmRvbUVsZW1lbnQ7XG4gICAgaWYgKCFkb20pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhZGRQYWludFJlbW92ZXIoZG9tLCAnZGVzdHJveUNsb25lJyk7XG59XG4iLCJpbXBvcnQgeyBkZXN0cm95Q29udGV4dCB9IGZyb20gJy4uL3RhZy9kZXN0cm95Q29udGV4dC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzbWFydFJlbW92ZUtpZHMgfSBmcm9tICcuLi90YWcvc21hcnRSZW1vdmVLaWRzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJ1bkJlZm9yZURlc3Ryb3kgfSBmcm9tICcuLi90YWcvdGFnUnVubmVyLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95U3VwcG9ydChzdXBwb3J0LCBnbG9iYWwpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIGdsb2JhbC5kZWxldGVkID0gdHJ1ZTtcbiAgICBjb250ZXh0LnJlbmRlckNvdW50ID0gMDsgLy8gaWYgaXQgY29tZXMgYmFjaywgd29udCBiZSBjb25zaWRlcmVkIGFuIHVwZGF0ZVxuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgY29uc3Qgc3ViQ29udGV4dHMgPSBjb250ZXh0LmNvbnRleHRzO1xuICAgIGRlc3Ryb3lDb250ZXh0KHN1YkNvbnRleHRzLCBzdXBwb3J0KTtcbiAgICBpZiAoZ2xvYmFsLmRlc3Ryb3kkKSB7XG4gICAgICAgIHJ1bkJlZm9yZURlc3Ryb3koc3VwcG9ydCwgZ2xvYmFsKTtcbiAgICB9XG4gICAgc21hcnRSZW1vdmVLaWRzKGNvbnRleHQsIHByb21pc2VzKTtcbiAgICByZXR1cm4gcHJvbWlzZXM7XG59XG4iLCJpbXBvcnQgeyBCYXNpY1R5cGVzLCBWYWx1ZVR5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzTGlrZVRhZ3MobmV3U3VwcG9ydCwgLy8gbmV3XG5vbGRTdXBwb3J0KSB7XG4gICAgY29uc3QgaXNMaWtlID0gaXNMaWtlQmFzZVRhZ3MobmV3U3VwcG9ydCwgb2xkU3VwcG9ydCk7XG4gICAgLy8gaXMgdGhpcyBwZXJoYXBzIGFuIG91dGVySFRNTCBjb21wYXJlPyAgICAgIFxuICAgIGlmICghaXNMaWtlICYmIG9sZFN1cHBvcnQudGVtcGxhdGVyLnRhZz8uX2lubmVySFRNTCkge1xuICAgICAgICBpZiAoaXNMaWtlQmFzZVRhZ3MobmV3U3VwcG9ydC5vdXRlckhUTUwsIG9sZFN1cHBvcnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNMaWtlO1xufVxuZnVuY3Rpb24gaXNMaWtlQmFzZVRhZ3MobmV3U3VwcG9ydCwgLy8gbmV3XG5vbGRTdXBwb3J0KSB7XG4gICAgY29uc3QgdGVtcGxhdGVyMCA9IG5ld1N1cHBvcnQudGVtcGxhdGVyO1xuICAgIGNvbnN0IHRlbXBsYXRlcjEgPSBvbGRTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCBuZXdUYWcgPSB0ZW1wbGF0ZXIwPy50YWcgfHwgbmV3U3VwcG9ydDtcbiAgICBjb25zdCBvbGRUYWcgPSB0ZW1wbGF0ZXIxLnRhZzsgLy8gfHwgKG9sZFN1cHBvcnQgYXMgYW55KVxuICAgIGlmICh0ZW1wbGF0ZXIwPy50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlcjAuZG9tID09PSB0ZW1wbGF0ZXIxLmRvbTtcbiAgICB9XG4gICAgc3dpdGNoIChuZXdUYWcudGFnSnNUeXBlKSB7XG4gICAgICAgIGNhc2UgVmFsdWVUeXBlcy5kb206IHtcbiAgICAgICAgICAgIGlmIChvbGRUYWc/LnRhZ0pzVHlwZSAhPT0gVmFsdWVUeXBlcy5kb20pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG5ld1RhZyBpcyBub3QgZXZlbiBzYW1lIHR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc0xpa2VEb21UYWdzKG5ld1RhZywgb2xkVGFnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFZhbHVlVHlwZXMudGFnOiB7XG4gICAgICAgICAgICBjb25zdCBsaWtlID0gaXNMaWtlU3RyaW5nVGFncyhuZXdUYWcsIG9sZFRhZywgbmV3U3VwcG9ydCwgb2xkU3VwcG9ydCk7XG4gICAgICAgICAgICByZXR1cm4gbGlrZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVua25vd24gdGFnSnNUeXBlIG9mICR7bmV3VGFnLnRhZ0pzVHlwZX1gKTtcbn1cbi8vIHVzZWQgd2hlbiBjb21waWxlciB3YXMgdXNlZFxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlrZURvbVRhZ3MobmV3VGFnLCBvbGRUYWcpIHtcbiAgICBjb25zdCBkb21NZXRhMCA9IG5ld1RhZy5kb207XG4gICAgY29uc3QgZG9tTWV0YTEgPSBvbGRUYWcuZG9tO1xuICAgIHJldHVybiBkb21NZXRhMCA9PT0gZG9tTWV0YTE7XG59XG4vLyB1c2VkIGZvciBubyBjb21waWxpbmdcbmZ1bmN0aW9uIGlzTGlrZVN0cmluZ1RhZ3MobmV3VGFnLCBvbGRUYWcsIG5ld1N1cHBvcnQsIC8vIG5ld1xub2xkU3VwcG9ydCkge1xuICAgIGNvbnN0IHN0cmluZ3MwID0gbmV3VGFnLnN0cmluZ3M7XG4gICAgY29uc3Qgc3RyaW5nczEgPSBvbGRUYWcuc3RyaW5ncztcbiAgICBpZiAoc3RyaW5nczAubGVuZ3RoICE9PSBzdHJpbmdzMS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBldmVyeVN0cmluZ01hdGNoZWQgPSBzdHJpbmdzMC5ldmVyeSgoc3RyaW5nLCBpbmRleCkgPT4gc3RyaW5nczFbaW5kZXhdLmxlbmd0aCA9PT0gc3RyaW5nLmxlbmd0aCAvLyBwZXJmb3JtYW5jZSwganVzdCBjb21wYXJlIGxlbmd0aCBvZiBzdHJpbmdzIC8vIFRPRE86IERvY3VtZW50IHRoaXNcbiAgICApO1xuICAgIGlmICghZXZlcnlTdHJpbmdNYXRjaGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVzMCA9IG5ld1N1cHBvcnQudGVtcGxhdGVyLnZhbHVlcyB8fCBuZXdUYWcudmFsdWVzO1xuICAgIGNvbnN0IHZhbHVlczEgPSBvbGRTdXBwb3J0LnRlbXBsYXRlci52YWx1ZXMgfHwgb2xkVGFnLnZhbHVlcztcbiAgICByZXR1cm4gaXNMaWtlVmFsdWVTZXRzKHZhbHVlczAsIHZhbHVlczEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlrZVZhbHVlU2V0cyh2YWx1ZXMwLCB2YWx1ZXMxKSB7XG4gICAgY29uc3QgdmFsdWVzTGVuZ3Roc01hdGNoID0gdmFsdWVzMC5sZW5ndGggPT09IHZhbHVlczEubGVuZ3RoO1xuICAgIGlmICghdmFsdWVzTGVuZ3Roc01hdGNoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYWxsVmFyc01hdGNoID0gdmFsdWVzMS5ldmVyeShmdW5jdGlvbiBpc0V2ZXJ5VmFsdWVBbGlrZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgY29tcGFyZVRvID0gdmFsdWVzMFtpbmRleF07XG4gICAgICAgIGNvbnN0IGlzRnVuY3Rpb25zID0gdHlwZW9mICh2YWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24gJiYgdHlwZW9mIChjb21wYXJlVG8pID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ01hdGNoID0gdmFsdWUudG9TdHJpbmcoKSA9PT0gY29tcGFyZVRvLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBpZiAoYWxsVmFyc01hdGNoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuL3VwZGF0ZS9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuLi9yZW5kZXIvZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNTdGF0aWNUYWcgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGlzTGlrZVRhZ3MgfSBmcm9tICcuL2lzTGlrZVRhZ3MuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdHJ5VXBkYXRlVG9UYWcgfSBmcm9tICcuL3VwZGF0ZS90cnlVcGRhdGVUb1RhZy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tUYWdWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgY29uc3QgbGFzdFN1cHBvcnQgPSBnbG9iYWw/Lm5ld2VzdDtcbiAgICBjb25zdCBpc1ZhbHVlVGFnID0gaXNTdGF0aWNUYWcobmV3VmFsdWUpO1xuICAgIGNvbnN0IG5ld1RhZyA9IG5ld1ZhbHVlO1xuICAgIGlmIChpc1ZhbHVlVGFnKSB7XG4gICAgICAgIC8vIGl0cyBhIGRpZmZlcmVudCB0YWcgbm93XG4gICAgICAgIGNvbnN0IGxpa2VUYWdzID0gaXNMaWtlVGFncyhuZXdUYWcsIGxhc3RTdXBwb3J0KTtcbiAgICAgICAgaWYgKCFsaWtlVGFncykge1xuICAgICAgICAgICAgZGVzdHJveVN1cHBvcnQobGFzdFN1cHBvcnQsIGdsb2JhbCk7XG4gICAgICAgICAgICBnZXROZXdHbG9iYWwoY29udGV4dEl0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuIDc7IC8vICd0YWctc3dhcCdcbiAgICAgICAgfVxuICAgICAgICAvLyBhbHdheXMgY2F1c2UgYSByZWRyYXcgb2Ygc3RhdGljIHRhZ3MgKHdhcyBmYWxzZSlcbiAgICAgICAgdHJ5VXBkYXRlVG9UYWcoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBsYXN0U3VwcG9ydCk7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgY29uc3QgaXNUYWcgPSBuZXdWYWx1ZT8udGFnSnNUeXBlO1xuICAgIGlmIChpc1RhZykge1xuICAgICAgICBjb25zdCBzdXBwb3J0ID0gZ2xvYmFsLm5ld2VzdDtcbiAgICAgICAgY29uc3Qgb3duZXJTdXBwb3J0ID0gc3VwcG9ydC5vd25lclN1cHBvcnQ7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRyeVVwZGF0ZVRvVGFnKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgY29uc3QgZG9Ob3RSZWRyYXcgPSByZXN1bHQgPT09IHRydWU7XG4gICAgICAgIGlmIChkb05vdFJlZHJhdykge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA4ODsgLy8gaXRzIHNhbWUgdGFnIHdpdGggbmV3IHZhbHVlc1xuICAgIH1cbiAgICBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiA4OyAvLyAnbm8tbG9uZ2VyLXRhZydcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgY29uc3QgbGFzdFN1cHBvcnQgPSBnbG9iYWw/Lm5ld2VzdDtcbiAgICAvLyBkZXN0cm95IG9sZCBjb21wb25lbnQsIHZhbHVlIGlzIG5vdCBhIGNvbXBvbmVudFxuICAgIGRlc3Ryb3lTdXBwb3J0KGxhc3RTdXBwb3J0LCBnbG9iYWwpO1xuICAgIGRlbGV0ZSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgY29udGV4dEl0ZW0ucmVuZGVyQ291bnQgPSAwO1xufVxuIiwiaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSAnLi4vdGFnSnNWYXJzL3ZhbHVlVG9UYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYWRkT25lQ29udGV4dCh2YWx1ZSwgY29udGV4dCwgd2l0aGluT3duZXJFbGVtZW50LCBwYXJlbnRDb250ZXh0KSB7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZUluZGV4OiBjb250ZXh0Lmxlbmd0aCxcbiAgICAgICAgdmFsdWVJbmRleFNldEJ5OiAnYWRkT25lQ29udGV4dCcsXG4gICAgICAgIHRhZ0pzVmFyOiB2YWx1ZVRvVGFnSnNWYXIodmFsdWUpLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQsXG4gICAgICAgIHBhcmVudENvbnRleHQsXG4gICAgfTtcbiAgICBjb250ZXh0LnB1c2goY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZHMsIHBhaW50QmVmb3JlLCBwYWludENvbW1hbmRzIH0gZnJvbSBcIi4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgYWRkT25lQ29udGV4dCB9IGZyb20gXCIuLi8uLi9yZW5kZXIvYWRkT25lQ29udGV4dC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tIFwiLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qc1wiO1xuaW1wb3J0IHsgZG9tUHJvY2Vzc0NvbnRleHRJdGVtIH0gZnJvbSBcIi4vZG9tUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoRHluYW1pY0RvbSh2YWx1ZSwgY29udGV4dHMsIHN1cHBvcnQsIC8vIG93bmVyXG5wYXJlbnRDb250ZXh0LCBkZXB0aCwgLy8gdXNlZCB0byBpbmRpY2F0ZSBpZiB2YXJpYWJsZSBsaXZlcyB3aXRoaW4gYW4gb3duZXIncyBlbGVtZW50XG5hcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZW1wdHkpO1xuICAgIGNvbnN0IGlzV2l0aGluT3duZXJFbGVtZW50ID0gZGVwdGggPiAwO1xuICAgIGNvbnN0IGNvbnRleHRJdGVtID0gYWRkT25lQ29udGV4dCh2YWx1ZSwgY29udGV4dHMsIGlzV2l0aGluT3duZXJFbGVtZW50LCBwYXJlbnRDb250ZXh0KTtcbiAgICBjb250ZXh0SXRlbS5wbGFjZWhvbGRlciA9IG1hcmtlcjtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIG1hcmtlcl1dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhaW50Q29tbWFuZHMucHVzaChbcGFpbnRCZWZvcmUsIFtpbnNlcnRCZWZvcmUsIG1hcmtlcl1dKTtcbiAgICB9XG4gICAgZG9tUHJvY2Vzc0NvbnRleHRJdGVtKHZhbHVlLCBzdXBwb3J0LCBjb250ZXh0SXRlbSwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgaG93VG9TZXRGaXJzdElucHV0VmFsdWUsIGhvd1RvU2V0U3RhbmRBbG9uZUF0dHIgfSBmcm9tIFwiLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZEVsZW1lbnRTdHJpbmcsIHBhaW50QXBwZW5kcywgcGFpbnRCZWZvcmUsIHBhaW50QmVmb3JlRWxlbWVudFN0cmluZywgcGFpbnRDb21tYW5kcyB9IGZyb20gXCIuLi9wYWludC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZSB9IGZyb20gXCIuLi9hdHRyaWJ1dGVzL3Byb2Nlc3NBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSBcIi4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanNcIjtcbmltcG9ydCB7IGF0dGFjaER5bmFtaWNEb20gfSBmcm9tIFwiLi4vLi4vaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9hdHRhY2hEeW5hbWljRG9tLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoRG9tRWxlbWVudHMobm9kZXMsIHZhbHVlcywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgY29udGV4dHMsIGRlcHRoLCAvLyB1c2VkIHRvIGtub3cgaWYgZHluYW1pYyB2YXJpYWJsZXMgbGl2ZSB3aXRoaW4gcGFyZW50IG93bmVyIHRhZy9zdXBwb3J0XG5hcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgZG9tID0gW107XG4gICAgaWYgKGFwcGVuZFRvICYmIGluc2VydEJlZm9yZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluc2VydEJlZm9yZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVtcHR5KTtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGluc2VydEJlZm9yZV1dKTtcbiAgICAgICAgYXBwZW5kVG8gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIGxvb3AgbWFwIG9mIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBiZSBwdXQgZG93biBvbiBkb2N1bWVudFxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBub2Rlcy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2luZGV4XTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBub2RlLnY7XG4gICAgICAgIGNvbnN0IGlzTnVtID0gIWlzTmFOKHZhbHVlKTtcbiAgICAgICAgaWYgKGlzTnVtKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUluZGV4ID0gY29udGV4dHMubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbdmFsdWVJbmRleF07XG4gICAgICAgICAgICBhdHRhY2hEeW5hbWljRG9tKHZhbHVlLCBjb250ZXh0cywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgZGVwdGgsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IHt9OyAvLyBEb21PYmplY3RUZXh0XG4gICAgICAgIGRvbS5wdXNoKG5ld05vZGUpO1xuICAgICAgICBpZiAobm9kZS5ubiA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBhdHRhY2hEb21UZXh0KG5ld05vZGUsIG5vZGUsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25lIHNpbmdsZSBodG1sIGVsZW1lbnQuIFRoaXMgaXMgd2hlcmUgYXR0cmlidXRlIHByb2Nlc3NpbmcgdGFrZXMgcGxhY2VcbiAgICAgICAgY29uc3QgeyBjcmVhdGVkQ29udGV4dHMsIGRvbUVsZW1lbnQgfSA9IGF0dGFjaERvbUVsZW1lbnQobmV3Tm9kZSwgbm9kZSwgdmFsdWVzLCBzdXBwb3J0LCBjb250ZXh0cywgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgICAgIGNvbnN0IG5ld1BhcmVudENvbnRleHQgPSB7XG4gICAgICAgICAgICBwYXJlbnRDb250ZXh0LFxuICAgICAgICAgICAgY29udGV4dHM6IGNyZWF0ZWRDb250ZXh0cyxcbiAgICAgICAgICAgIHRhZ0pzVmFyOiB7XG4gICAgICAgICAgICAgICAgdGFnSnNUeXBlOiAnbmV3LXBhcmVudC1jb250ZXh0J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlSW5kZXg6IC0xLFxuICAgICAgICAgICAgdmFsdWVJbmRleFNldEJ5OiAnYXR0YWNoRG9tRWxlbWVudHMnLFxuICAgICAgICAgICAgd2l0aGluT3duZXJFbGVtZW50OiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBpZiAobm9kZS5jaCkge1xuICAgICAgICAgICAgbmV3Tm9kZS5jaCA9IGF0dGFjaERvbUVsZW1lbnRzKG5vZGUuY2gsIHZhbHVlcywgc3VwcG9ydCwgbmV3UGFyZW50Q29udGV4dCwgY29udGV4dHMsIGRlcHRoICsgMSwgZG9tRWxlbWVudCwgaW5zZXJ0QmVmb3JlKS5kb207XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgZG9tLCBjb250ZXh0cyB9O1xufVxuZnVuY3Rpb24gYXR0YWNoRG9tRWxlbWVudChuZXdOb2RlLCBub2RlLCB2YWx1ZXMsIHN1cHBvcnQsIGNvbnRleHRzLCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgZG9tRWxlbWVudCA9IG5ld05vZGUuZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZS5ubik7XG4gICAgY29uc3QgY3JlYXRlZENvbnRleHRzID0gW107XG4gICAgLy8gYXR0cmlidXRlcyB0aGF0IG1heSBlZmZlY3Qgc3R5bGUsIGNvbWUgZmlyc3QgZm9yIHBlcmZvcm1hbmNlXG4gICAgaWYgKG5vZGUuYXQpIHtcbiAgICAgICAgZm9yIChjb25zdCBhdHRyIG9mIG5vZGUuYXQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyWzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyWzFdO1xuICAgICAgICAgICAgY29uc3QgaXNTcGVjaWFsID0gYXR0clsyXSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGhvd1RvU2V0ID0gYXR0ci5sZW5ndGggPiAxID8gaG93VG9TZXRGaXJzdElucHV0VmFsdWUgOiBob3dUb1NldFN0YW5kQWxvbmVBdHRyO1xuICAgICAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IHByb2Nlc3NBdHRyaWJ1dGUodmFsdWVzLCBuYW1lLCBkb21FbGVtZW50LCBzdXBwb3J0LCBob3dUb1NldCwgY29udGV4dHMsIGlzU3BlY2lhbCwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNyZWF0ZWRDb250ZXh0cy5wdXNoKG5ld0NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgZG9tRWxlbWVudF1dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhaW50Q29tbWFuZHMucHVzaChbcGFpbnRCZWZvcmUsIFtpbnNlcnRCZWZvcmUsIGRvbUVsZW1lbnRdXSk7XG4gICAgfVxuICAgIHJldHVybiB7IGRvbUVsZW1lbnQsIGNyZWF0ZWRDb250ZXh0cyB9O1xufVxuZnVuY3Rpb24gYXR0YWNoRG9tVGV4dChuZXdOb2RlLCBub2RlLCBvd25lciwgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgdGV4dE5vZGUgPSBuZXdOb2RlO1xuICAgIGNvbnN0IHN0cmluZyA9IHRleHROb2RlLnRjID0gbm9kZS50YztcbiAgICBpZiAob3duZXIpIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kRWxlbWVudFN0cmluZywgW293bmVyLCBzdHJpbmcsIGZ1bmN0aW9uIGFmdGVyQXBwZW5Eb21UZXh0KGVsbSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5kb21FbGVtZW50ID0gZWxtO1xuICAgICAgICAgICAgICAgIH1dXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZUVsZW1lbnRTdHJpbmcsIFtpbnNlcnRCZWZvcmUsIHN0cmluZywgZnVuY3Rpb24gYWZ0ZXJJbnNlcnREb21UZXh0KGVsbSkge1xuICAgICAgICAgICAgICAgIHRleHROb2RlLmRvbUVsZW1lbnQgPSBlbG07XG4gICAgICAgICAgICB9XV0pO1xufVxuIiwiaW1wb3J0IHsgYXR0YWNoRG9tRWxlbWVudHMgfSBmcm9tICcuL2RvbS9hdHRhY2hEb21FbGVtZW50cy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXREb21NZXRhIH0gZnJvbSAnLi4vdGFnL2RvbU1ldGFDb2xsZWN0b3IuanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcGFpbnRpbmcgfSBmcm9tICcuL3BhaW50LmZ1bmN0aW9uLmpzJztcbi8qKiBGdW5jdGlvbiB0aGF0IGtpY2tzIG9mZiBhY3R1YWxseSBwdXR0aW5nIHRhZ3MgZG93biBhcyBIVE1MIGVsZW1lbnRzICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1YmplY3QuZ2xvYmFsO1xuICAgIGdsb2JhbC5vbGRlc3QgPSBzdXBwb3J0O1xuICAgIGdsb2JhbC5uZXdlc3QgPSBzdXBwb3J0O1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgY29uc3QgcmVzdWx0ID0gYXR0YWNoSHRtbERvbU1ldGEoc3VwcG9ydCwgc3VwcG9ydC5jb250ZXh0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICBnbG9iYWwuaHRtbERvbU1ldGEgPSByZXN1bHQuZG9tO1xuICAgIC0tcGFpbnRpbmcubG9ja3M7XG4gICAgLy8gcmV0dXJuIGZyYWdtZW50XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGF0dGFjaEh0bWxEb21NZXRhKHN1cHBvcnQsIHBhcmVudENvbnRleHQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBkb21NZXRhID0gbG9hZERvbU1ldGEoc3VwcG9ydCk7XG4gICAgY29uc3QgdGhpc1RhZyA9IHN1cHBvcnQudGVtcGxhdGVyLnRhZztcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzVGFnLnZhbHVlcztcbiAgICBjb25zdCBjb250ZXh0cyA9IFtdO1xuICAgIHN1cHBvcnQuY29udGV4dC5jb250ZXh0cyA9IGNvbnRleHRzO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF0dGFjaERvbUVsZW1lbnRzKGRvbU1ldGEsIHZhbHVlcywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgY29udGV4dHMsIDAsIC8vIGRlcHRoXG4gICAgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKiBFeHRyYWN0cyB2YXJpYWJsZXMgZnJvbSBzdXBwb3J0IGluIG9yZGVyIHRvIG1lcmdlIHN0cmluZ3MgJiB2YWx1ZXMgd2l0aCBkb20gbWV0YSBpbnRvIGEgaHRtbCBhcnJheSB0cmVlICovXG5mdW5jdGlvbiBsb2FkRG9tTWV0YShzdXBwb3J0KSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0gc3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgY29uc3QgdGhpc1RhZyA9IHRlbXBsYXRlci50YWc7XG4gICAgaWYgKHRoaXNUYWcudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLmRvbSkge1xuICAgICAgICByZXR1cm4gdGhpc1RhZy5kb207XG4gICAgfVxuICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzVGFnLnN0cmluZ3M7XG4gICAgcmV0dXJuIGdldERvbU1ldGEoc3RyaW5ncywgdGhpc1RhZy52YWx1ZXMpO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlSHRtbFN1cHBvcnQgfSBmcm9tICcuLi8uLi90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZSB9IGZyb20gJy4uLy4uL3RhZy9jaGVja1RhZ1ZhbHVlQ2hhbmdlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnSW5pdCB9IGZyb20gJy4uLy4uL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0luaXQuZnVuY3Rpb24uanMnO1xuLyoqIFdoZW4gZmlyc3QgdGltZSByZW5kZXIsIGFkZHMgdG8gb3duZXIgY2hpbGRUYWdzXG4gKiBVc2VkIGZvciBCT1RIIGluc2VydHMgJiB1cGRhdGVzIHRvIHZhbHVlcyB0aGF0IHdlcmUgc29tZXRoaW5nIGVsc2VcbiAqIEludGVuZGVkIHVzZSBvbmx5IGZvciB1cGRhdGVzXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWcob3duZXJTdXBwb3J0LCAvLyBvd25lclxuY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgY29uc3Qgc3VwcG9ydCA9IGdsb2JhbC5uZXdlc3Q7XG4gICAgY29uc3QgcGggPSBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcjtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgdW5kZWZpbmVkLCBwaCk7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdGFnRmFrZVRlbXBsYXRlcih0YWcpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBnZXRGYWtlVGVtcGxhdGVyKCk7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHRhZztcbiAgICB0YWcudGVtcGxhdGVyID0gdGVtcGxhdGVyO1xuICAgIHJldHVybiB0ZW1wbGF0ZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmFrZVRlbXBsYXRlcigpIHtcbiAgICBjb25zdCBmYWtlID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMudGVtcGxhdGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1RhZ0luaXQsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrVGFnVmFsdWVDaGFuZ2UsXG4gICAgfTtcbiAgICByZXR1cm4gZmFrZTtcbn1cbi8qKiBDcmVhdGUgc3VwcG9ydCBmb3IgYSB0YWcgY29tcG9uZW50ICovXG5leHBvcnQgZnVuY3Rpb24gbmV3U3VwcG9ydEJ5VGVtcGxhdGVyKHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IGNyZWF0ZUh0bWxTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgc3ViamVjdC5jb250ZXh0cyA9IFtdO1xuICAgIHJldHVybiBzdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgYnVpbGRCZWZvcmVFbGVtZW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwYWludEFwcGVuZCwgcGFpbnRBcHBlbmRzLCBwYWludEJlZm9yZSwgcGFpbnRDb21tYW5kcyB9IGZyb20gJy4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHRlbXBsYXRlciwgc3ViamVjdCwgLy8gY291bGQgYmUgdGFnIHZpYSByZXN1bHQudGFnXG5vd25lclN1cHBvcnQsIC8vIG93bmVyXG5hcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IG5ld1N1cHBvcnRCeVRlbXBsYXRlcih0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgc3VwcG9ydC5vd25lclN1cHBvcnQgPSBvd25lclN1cHBvcnQ7XG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGFwcGVuZFRvLCBhcHBlbmRUbyA/IHVuZGVmaW5lZCA6IGluc2VydEJlZm9yZSk7XG4gICAgZm9yIChjb25zdCBkb20gb2YgcmVzdWx0LmRvbSkge1xuICAgICAgICBpZiAoZG9tLm1hcmtlcikge1xuICAgICAgICAgICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgICAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGRvbS5tYXJrZXJdXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWludENvbW1hbmRzLnB1c2goW3BhaW50QmVmb3JlLCBbaW5zZXJ0QmVmb3JlLCBkb20ubWFya2VyXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkb20uZG9tRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgICAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGRvbS5kb21FbGVtZW50XV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZSwgW2luc2VydEJlZm9yZSwgZG9tLmRvbUVsZW1lbnRdXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBwcm9jZXNzVGFnIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3VwZGF0ZS9wcm9jZXNzVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NOZXdTdWJqZWN0VGFnIH0gZnJvbSAnLi9wcm9jZXNzTmV3U3ViamVjdFRhZy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RhZ0luaXQodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NUYWcob3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0luaXQgfSBmcm9tICcuL3VwZGF0ZS9wcm9jZXNzVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RhZ1ZhbHVlQ2hhbmdlLCBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0gfSBmcm9tICcuL2NoZWNrVGFnVmFsdWVDaGFuZ2UuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1wbGF0ZXJSZXN1bHQocHJvcFdhdGNoLCBwcm9wcykge1xuICAgIGNvbnN0IHRlbXBsYXRlciA9IHtcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLnRlbXBsYXRlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NUYWdJbml0LFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrVGFnVmFsdWVDaGFuZ2UsXG4gICAgICAgIGRlbGV0ZTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBwcm9wV2F0Y2gsXG4gICAgICAgIHByb3BzLFxuICAgICAgICBrZXk6IGZ1bmN0aW9uIGtleVRlbXBsYXRlKGFycmF5VmFsdWUpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlci5hcnJheVZhbHVlID0gYXJyYXlWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZXI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0ZW1wbGF0ZXI7XG59XG4iLCJleHBvcnQgY29uc3QgdGFncyA9IFtdO1xuIiwiaW1wb3J0IHsgaXNJbmxpbmVIdG1sLCByZW5kZXJJbmxpbmVIdG1sIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyRXhpc3RpbmdTdXBwb3J0IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzYWZlUmVuZGVyU3VwcG9ydChuZXdlc3QpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3ZXN0LmNvbnRleHQ7XG4gICAgY29uc3QgaXNJbmxpbmUgPSBpc0lubGluZUh0bWwobmV3ZXN0LnRlbXBsYXRlcik7XG4gICAgaWYgKGlzSW5saW5lKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJJbmxpbmVIdG1sKG5ld2VzdCk7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJFeGlzdGluZ1N1cHBvcnQobmV3ZXN0LCBuZXdlc3QsIHN1YmplY3QpO1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCB9IGZyb20gJy4uL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzQXJyYXksIGlzU3RhdGljVGFnIH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uLy4uL3N0YXRlL2luZGV4LmpzJztcbmltcG9ydCB7IHNhZmVSZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi9zYWZlUmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2FzdFByb3BzKHByb3BzLCBuZXdTdXBwb3J0LCBkZXB0aCkge1xuICAgIHJldHVybiBwcm9wcy5tYXAoZnVuY3Rpb24gZWFjaENhc3RQcm9wKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGFsdGVyUHJvcChwcm9wLCBuZXdTdXBwb3J0Lm93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgZGVwdGgpO1xuICAgIH0pO1xufVxuLyogVXNlZCB0byByZXdyaXRlIHByb3BzIHRoYXQgYXJlIGZ1bmN0aW9ucy4gV2hlbiB0aGV5IGFyZSBjYWxsZWQgaXQgc2hvdWxkIGNhdXNlIHBhcmVudCByZW5kZXJpbmcgKi9cbmZ1bmN0aW9uIGFsdGVyUHJvcChwcm9wLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoKSB7XG4gICAgaWYgKGlzU3RhdGljVGFnKHByb3ApIHx8ICFwcm9wKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cbiAgICBpZiAoIW93bmVyU3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gcHJvcDsgLy8gbm8gb25lIGFib3ZlIG1lXG4gICAgfVxuICAgIHJldHVybiBjaGVja1Byb3AocHJvcCwgb3duZXJTdXBwb3J0LCBuZXdTdXBwb3J0LCBkZXB0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcm9wKHZhbHVlLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoLCBvd25lcikge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUudGFnSnNUeXBlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIGlmIChkZXB0aCA8PSAxKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHdyYXAgZnVuY3Rpb24gYXQgZGVwdGggMCBhbmQgMVxuICAgICAgICAgICAgcmV0dXJuIGdldFByb3BXcmFwKHZhbHVlLCBvd25lciwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChkZXB0aCA9PT0gZGVlcENvbXBhcmVEZXB0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHNraXAgPSBpc1NraXBQcm9wVmFsdWUodmFsdWUpO1xuICAgIGlmIChza2lwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTsgLy8gbm8gY2hpbGRyZW4gdG8gY3Jhd2wgdGhyb3VnaFxuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQXJyYXlQcm9wKHZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrT2JqZWN0UHJvcCh2YWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCk7XG59XG5mdW5jdGlvbiBjaGVja0FycmF5UHJvcCh2YWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gdmFsdWUubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW2luZGV4XTtcbiAgICAgICAgdmFsdWVbaW5kZXhdID0gY2hlY2tQcm9wKHN1YlZhbHVlLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoICsgMSwgdmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIChzdWJWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChzdWJWYWx1ZS5tZW0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyQ2hlY2tQcm9wKGRlcHRoICsgMSwgaW5kZXgsIHN1YlZhbHVlLCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY2hlY2tPYmplY3RQcm9wKHZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Yga2V5cykge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW25hbWVdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVja1Byb3Aoc3ViVmFsdWUsIG93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgZGVwdGggKyAxLCB2YWx1ZSk7XG4gICAgICAgIGNvbnN0IG5ld1N1YlZhbHVlID0gdmFsdWVbbmFtZV07XG4gICAgICAgIGlmIChuZXdTdWJWYWx1ZSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRzZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBuYW1lKTtcbiAgICAgICAgY29uc3QgaGFzU2V0dGVyID0gZ2V0c2V0Py5nZXQgfHwgZ2V0c2V0Py5zZXQ7XG4gICAgICAgIGlmIChoYXNTZXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlW25hbWVdID0gcmVzdWx0O1xuICAgICAgICBpZiAodHlwZW9mIChyZXN1bHQpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3ViVmFsdWUubWVtKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlckNoZWNrUHJvcChkZXB0aCArIDEsIG5hbWUsIHN1YlZhbHVlLCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gYWZ0ZXJDaGVja1Byb3AoZGVwdGgsIGluZGV4LCBvcmlnaW5hbFZhbHVlLCBuZXdQcm9wLCBuZXdTdXBwb3J0KSB7XG4gICAgLy8gcmVzdG9yZSBvYmplY3QgdG8gaGF2ZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiBkZXN0cm95XG4gICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICBjb25zdCBnbG9iYWwgPSBuZXdTdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICBuZXdQcm9wW2luZGV4XS5zdWJzY3JpcHRpb24gPSBnbG9iYWwuZGVzdHJveSQudG9DYWxsYmFjayhmdW5jdGlvbiBhbHRlckNoZWNrUHJvY2Vzc29yKCkge1xuICAgICAgICAgICAgbmV3UHJvcFtpbmRleF0gPSBvcmlnaW5hbFZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcFdyYXAodmFsdWUsIG93bmVyLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBhbHJlYWR5ID0gdmFsdWUubWVtO1xuICAgIC8vIGFscmVhZHkgcHJldmlvdXNseSBjb252ZXJ0ZWQgYnkgYSBwYXJlbnQ/XG4gICAgaWYgKGFscmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCB3cmFwID0gZnVuY3Rpb24gd3JhcFJ1bm5lciguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1Byb3BPd25lcih3cmFwLm1lbSwgb3duZXIsIGFyZ3MsIG93bmVyU3VwcG9ydCk7XG4gICAgfTsgLy8gd2hhdCBnZXRzIGNhbGxlZCBjYW4gc3dpdGNoIG92ZXIgcGFyZW50IHN0YXRlIGNoYW5nZXNcbiAgICB3cmFwLm9yaWdpbmFsID0gdmFsdWU7XG4gICAgd3JhcC5tZW0gPSB2YWx1ZTtcbiAgICAvLyBjb3B5IGRhdGEgcHJvcGVydGllcyB0aGF0IG1heWJlIG9uIHNvdXJjZSBmdW5jdGlvblxuICAgIE9iamVjdC5hc3NpZ24od3JhcCwgdmFsdWUpO1xuICAgIHJldHVybiB3cmFwO1xufVxuLyoqIEZ1bmN0aW9uIHNoYXJlZCBieSBhbHRlclByb3BzKCkgYW5kIHVwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50Li4uIFRPRE86IE1heSB3YW50IHRvIGhhdmUgdG8gZnVuY3Rpb25zIHRvIHJlZHVjZSBjeWNsZSBjaGVja2luZz8gICovXG5leHBvcnQgZnVuY3Rpb24gY2FsbGJhY2tQcm9wT3duZXIodG9DYWxsLCAvLyBvcmlnaW5hbCBmdW5jdGlvblxub3duZXIsIGNhbGxXaXRoLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBvd25lclN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgY29uc3QgbmV3ZXN0ID0gZ2xvYmFsPy5uZXdlc3QgfHwgb3duZXJTdXBwb3J0O1xuICAgIGNvbnN0IHN1cHBvcnRJbkN5Y2xlID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICBjb25zdCBub0N5Y2xlID0gc3VwcG9ydEluQ3ljbGUgPT09IHVuZGVmaW5lZDtcbiAgICAvLyBhY3R1YWwgZnVuY3Rpb24gY2FsbCB0byBvcmlnaW5hbCBtZXRob2RcbiAgICBjb25zdCBjYWxsYmFja1Jlc3VsdCA9IHRvQ2FsbC5hcHBseShvd25lciwgY2FsbFdpdGgpO1xuICAgIGNvbnN0IHJ1biA9IGZ1bmN0aW9uIHByb3BDYWxsYmFja1Byb2Nlc3NvcigpIHtcbiAgICAgICAgY29uc3Qgc3ViamVjdCA9IG5ld2VzdC5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbG9iYWwgPSBzdWJqZWN0Lmdsb2JhbDtcbiAgICAgICAgaWYgKCFnbG9iYWwgfHwgc3ViamVjdC5sb2NrZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFja1Jlc3VsdDsgLy8gY3VycmVudGx5IGluIHRoZSBtaWRkbGUgb2YgcmVuZGVyaW5nXG4gICAgICAgIH1cbiAgICAgICAgc2FmZVJlbmRlclN1cHBvcnQobmV3ZXN0KTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrUmVzdWx0O1xuICAgIH07XG4gICAgaWYgKG5vQ3ljbGUpIHtcbiAgICAgICAgcmV0dXJuIHJ1bigpO1xuICAgIH1cbiAgICBzZXRVc2VNZW1vcnkudGFnQ2xvc2VkJC50b0NhbGxiYWNrKHJ1bik7XG4gICAgcmV0dXJuIGNhbGxiYWNrUmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2tpcFByb3BWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgKHZhbHVlKSAhPT0gQmFzaWNUeXBlcy5vYmplY3QgfHwgIXZhbHVlIHx8IHZhbHVlLnRhZ0pzVHlwZTtcbn1cbiIsImltcG9ydCB7IEJhc2ljVHlwZXMsIFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uL3N0YXRlL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCwgdXNlU3VwcG9ydCwgY2FzdGVkUHJvcHMpIHtcbiAgICBjb25zdCBvcmlnaW5hbEZ1bmN0aW9uID0gcmVzdWx0Lm9yaWdpbmFsOyAvLyAoaW5uZXJUYWdXcmFwIGFzIGFueSkub3JpZ2luYWwgYXMgdW5rbm93biBhcyBUYWdDb21wb25lbnRcbiAgICBjb25zdCBzdGF0ZWxlc3MgPSB0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyO1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBzZXRTdXBwb3J0SW5DeWNsZSh1c2VTdXBwb3J0KTtcbiAgICBsZXQgdGFnO1xuICAgIGlmIChzdGF0ZWxlc3MpIHtcbiAgICAgICAgdGFnID0gdGVtcGxhdGVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YWcgPSBvcmlnaW5hbEZ1bmN0aW9uKC4uLmNhc3RlZFByb3BzKTtcbiAgICAgICAgLy8gQ0FMTCBPUklHSU5BTCBDT01QT05FTlQgRlVOQ1RJT05cbiAgICAgICAgaWYgKHR5cGVvZiAodGFnKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICAgICAgdGFnID0gdGFnKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFnLnRlbXBsYXRlciA9IHRlbXBsYXRlcjtcbiAgICB0ZW1wbGF0ZXIudGFnID0gdGFnO1xuICAgIHVzZVN1cHBvcnQuc3RhdGUgPSBjb25maWcuc3RhdGVBcnJheTtcbiAgICB1c2VTdXBwb3J0LnN0YXRlcyA9IGNvbmZpZy5zdGF0ZXM7XG4gICAgLy8gdXNlU3VwcG9ydC5zdGF0ZXMgPSBbLi4uY29uZmlnLnN0YXRlc11cbiAgICByZXR1cm4gdXNlU3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IGdldEJhc2VTdXBwb3J0LCB1cGdyYWRlQmFzZVRvU3VwcG9ydCB9IGZyb20gJy4vY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1cHBvcnQodGVtcGxhdGVyLCAvLyBhdCBydW50aW1lIHJlbmRlcmluZyBvZiBhIHRhZywgaXQgbmVlZHMgdG8gYmUgbWFycmllZCB0byBhIG5ldyBTdXBwb3J0KClcbm93bmVyU3VwcG9ydCwgYXBwU3VwcG9ydCwgc3ViamVjdCwgY2FzdGVkUHJvcHMpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBzdWJqZWN0LCBjYXN0ZWRQcm9wcyk7XG4gICAgc3VwcG9ydC5vd25lclN1cHBvcnQgPSBvd25lclN1cHBvcnQ7XG4gICAgcmV0dXJuIHVwZ3JhZGVCYXNlVG9TdXBwb3J0KHRlbXBsYXRlciwgc3VwcG9ydCwgYXBwU3VwcG9ydCwgY2FzdGVkUHJvcHMpO1xufVxuIiwiaW1wb3J0IHsgY2FzdFByb3BzIH0gZnJvbSAnLi9wcm9wcy9hbHRlclByb3AuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc3luY0Z1bmN0aW9uUHJvcHMgfSBmcm9tICcuLi9yZW5kZXIvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXcmFwIH0gZnJvbSAnLi4vcmVuZGVyL2V4ZWN1dGVXcmFwLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vdGFnSnNWYXJzL3RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZWVwQ29tcGFyZURlcHRoLCBzaGFsbG93Q29tcGFyZURlcHRoIH0gZnJvbSAnLi9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdXBwb3J0IH0gZnJvbSAnLi9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbi8qKiBjcmVhdGVzL3JldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gY2FsbGVkIHRoZW4gY2FsbHMgdGhlIG9yaWdpbmFsIGNvbXBvbmVudCBmdW5jdGlvblxuICogR2V0cyB1c2VkIGFzIHRlbXBsYXRlci53cmFwcGVyKClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhZ1dyYXAodGVtcGxhdGVyLCByZXN1bHQpIHtcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGJ5IHRhZ2dlZGpzXG4gICAgY29uc3Qgd3JhcHBlciA9IGZ1bmN0aW9uIHRhZ0Z1bldyYXAobmV3U3VwcG9ydCwgc3ViamVjdCwgbGFzdFN1cHBvcnQgLy8gc3ViamVjdC5nbG9iYWwubmV3ZXN0XG4gICAgKSB7XG4gICAgICAgIC8vIHdyYXAgYW55IHByb3AgZnVuY3Rpb25zIHRoYXQgYXJlIHBhc3NlZCBpblxuICAgICAgICBjb25zdCBjYXN0ZWRQcm9wcyA9IGdldENhc3RlZFByb3BzKHRlbXBsYXRlciwgbmV3U3VwcG9ydCwgbGFzdFN1cHBvcnQpO1xuICAgICAgICBjb25zdCBvd25lclN1cHBvcnQgPSBuZXdTdXBwb3J0Lm93bmVyU3VwcG9ydDtcbiAgICAgICAgY29uc3QgdXNlU3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQuYXBwU3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0LmFwcFN1cHBvcnQgYXMgQW55U3VwcG9ydCxcbiAgICAgICAgc3ViamVjdCwgY2FzdGVkUHJvcHMpO1xuICAgICAgICByZXR1cm4gZXhlY3V0ZVdyYXAodGVtcGxhdGVyLCByZXN1bHQsIHVzZVN1cHBvcnQsIGNhc3RlZFByb3BzKTtcbiAgICB9O1xuICAgIHJldHVybiB3cmFwcGVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENhc3RlZFByb3BzKHRlbXBsYXRlciwgbmV3U3VwcG9ydCwgbGFzdFN1cHBvcnQpIHtcbiAgICBjb25zdCBtYXhEZXB0aCA9IHRlbXBsYXRlci5wcm9wV2F0Y2ggPT09IFByb3BXYXRjaGVzLkRFRVAgPyBkZWVwQ29tcGFyZURlcHRoIDogc2hhbGxvd0NvbXBhcmVEZXB0aDtcbiAgICBjb25zdCBwcm9wcyA9IHRlbXBsYXRlci5wcm9wcztcbiAgICBjb25zdCBwcm9wc0NvbmZpZyA9IG5ld1N1cHBvcnQucHJvcHNDb25maWc7XG4gICAgLy8gV2hlbiBkZWZpbmVkLCB0aGlzIG11c3QgYmUgYW4gdXBkYXRlIHdoZXJlIG15IG5ldyBwcm9wcyBoYXZlIGFscmVhZHkgYmVlbiBtYWRlIGZvciBtZVxuICAgIGxldCBwcmVDYXN0ZWRQcm9wcyA9IHByb3BzQ29uZmlnLmNhc3RQcm9wcztcbiAgICBjb25zdCBsYXN0UHJvcHNDb25maWcgPSBsYXN0U3VwcG9ydD8ucHJvcHNDb25maWc7XG4gICAgY29uc3QgbGFzdENhc3RQcm9wcyA9IGxhc3RQcm9wc0NvbmZpZz8uY2FzdFByb3BzO1xuICAgIGlmIChsYXN0Q2FzdFByb3BzKSB7XG4gICAgICAgIHByb3BzQ29uZmlnLmNhc3RQcm9wcyA9IGxhc3RDYXN0UHJvcHM7XG4gICAgICAgIHByZUNhc3RlZFByb3BzID0gc3luY0Z1bmN0aW9uUHJvcHMobmV3U3VwcG9ydCwgbGFzdFN1cHBvcnQsIGxhc3RTdXBwb3J0Lm93bmVyU3VwcG9ydCwgcHJvcHMsIG1heERlcHRoKTtcbiAgICB9XG4gICAgY29uc3QgY2FzdGVkUHJvcHMgPSBwcmVDYXN0ZWRQcm9wcyB8fCBjYXN0UHJvcHMocHJvcHMsIG5ld1N1cHBvcnQsIDApO1xuICAgIHJldHVybiBjYXN0ZWRQcm9wcztcbn1cbiIsImV4cG9ydCBjbGFzcyBUYWdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlcnJvckNvZGUsIGRldGFpbHMgPSB7fSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gVGFnRXJyb3IubmFtZTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0geyAuLi5kZXRhaWxzLCBlcnJvckNvZGUgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXJyYXlOb0tleUVycm9yIGV4dGVuZHMgVGFnRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ2FycmF5LW5vLWtleS1lcnJvcicsIGRldGFpbHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBBcnJheU5vS2V5RXJyb3IubmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3RhdGVNaXNtYXRjaEVycm9yIGV4dGVuZHMgVGFnRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ3N0YXRlLW1pc21hdGNoLWVycm9yJywgZGV0YWlscyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFN0YXRlTWlzbWF0Y2hFcnJvci5uYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTeW5jQ2FsbGJhY2tFcnJvciBleHRlbmRzIFRhZ0Vycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBkZXRhaWxzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdzeW5jLWNhbGxiYWNrLWVycm9yJywgZGV0YWlscyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFN5bmNDYWxsYmFja0Vycm9yLm5hbWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3RhdGVNaXNtYXRjaEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1N0YXRlTWlzbWF0Y2goY29uZmlnLCBzdXBwb3J0KSB7XG4gICAgY29uc3QgcmVhcnJheSA9IGNvbmZpZy5yZWFycmF5O1xuICAgIGlmIChyZWFycmF5Lmxlbmd0aCAmJiByZWFycmF5Lmxlbmd0aCAhPT0gY29uZmlnLnN0YXRlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHRocm93U3RhdGVNaXNtYXRjaChyZWFycmF5LCBzdXBwb3J0LCBjb25maWcpO1xuICAgIH1cbn1cbmNvbnN0IGhpbnQgPSAnU3RhdGUgdHJhY2tpbmcgcmVxdWlyZXMgc2FtZSBudW1iZXIgb2Ygc3RhdGUgY2FsbHMgb24gZXZlcnkgcmVuZGVyLiBUaGlzIGVycm9yIHR5cGljYWxseSBvY2N1cnMgd2hlbiBhIHN0YXRlIGNhbGwgaXMgb25seSByZWFjaGFibGUgYmVoaW5kIGEgY29uZGl0aW9uLiBBbHNvLCB3cmFwcGluZyB0YWdzIHRoYXQgaGF2ZSBzdGF0ZSwgd2l0aCB0YWcoKSwgb2Z0ZW4gaGVscHMgd2hlbiB0YWcgaXMgb25seSByZWFjaGFibGUgYnkgYSBjb25kaXRpb24uJztcbmZ1bmN0aW9uIHRocm93U3RhdGVNaXNtYXRjaChyZWFycmF5LCBzdXBwb3J0LCBjb25maWcpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYFNhdmVkIHN0YXRlcyBiZXR3ZWVuIHJlbmRlcnMgYXJlIGluY29uc2lzdGVudC4gRXhwZWN0ZWQgJHtyZWFycmF5Lmxlbmd0aH0gc3RhdGVzIGdvdCAke2NvbmZpZy5zdGF0ZUFycmF5Lmxlbmd0aH0uYDtcbiAgICBjb25zdCB3cmFwcGVyID0gc3VwcG9ydC50ZW1wbGF0ZXI/LndyYXBwZXI7XG4gICAgbGV0IHRhZ0Z1bmN0aW9uID0gd3JhcHBlcjtcbiAgICBpZiAod3JhcHBlcj8ub3JpZ2luYWwpIHtcbiAgICAgICAgdGFnRnVuY3Rpb24gPSB3cmFwcGVyLm9yaWdpbmFsO1xuICAgIH1cbiAgICBlbHNlIGlmICh3cmFwcGVyPy5vcmlnaW5hbCkge1xuICAgICAgICB0YWdGdW5jdGlvbiA9IHdyYXBwZXIub3JpZ2luYWw7XG4gICAgfVxuICAgIGNvbnN0IGRldGFpbHMgPSB7XG4gICAgICAgIG9sZFN0YXRlczogY29uZmlnLnN0YXRlQXJyYXksXG4gICAgICAgIG5ld1N0YXRlczogY29uZmlnLnJlYXJyYXksXG4gICAgICAgIHRhZ0Z1bmN0aW9uLFxuICAgICAgICB0ZW1wbGF0ZXI6IHN1cHBvcnQudGVtcGxhdGVyLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgU3RhdGVNaXNtYXRjaEVycm9yKG1lc3NhZ2UsIGRldGFpbHMpO1xuICAgIGNvbnNvbGUuZXJyb3IoaGludCwgZGV0YWlscyk7XG4gICAgdGhyb3cgZXJyb3I7XG59XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuLi9zdGF0ZS9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IGNoZWNrU3RhdGVNaXNtYXRjaCB9IGZyb20gJy4uL3RhZy9jaGVja1N0YXRlTWlzbWF0Y2guZnVuY3Rpb24uanMnO1xuLyoqIENvbXBhcmVzIHN0YXRlcyBvZiBwcmV2aW91cyByZW5kZXJzXG4gKiBAcHJvcGVydHkgc3VwcG9ydCAtIFRoZSB3b3JrZmxvdyB0aGF0IHN1cHBvcnRzIGEgc2luZ2xlIHRhZ1xuICogQHByb3BlcnR5IG93bmVyU3VwcG9ydCAtIHVuZGVmaW5lZCB3aGVuIFwic3VwcG9ydFwiIGlzIHRoZSBhcHAgZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuQWZ0ZXJSZW5kZXIoc3VwcG9ydCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICArK3N1YmplY3QucmVuZGVyQ291bnQ7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIHN1cHBvcnQuc3RhdGUgPSBjb25maWcuc3RhdGVBcnJheTtcbiAgICBzdXBwb3J0LnN0YXRlcyA9IGNvbmZpZy5zdGF0ZXM7XG4gICAgc3ViamVjdC5nbG9iYWwubmV3ZXN0ID0gc3VwcG9ydDtcbiAgICBjaGVja1N0YXRlTWlzbWF0Y2goY29uZmlnLCBzdXBwb3J0KTtcbiAgICBkZWxldGUgY29uZmlnLnByZXZTdXBwb3J0OyAvLyBvbmx5IHRoaXMgb25lIHJlYWxseSBuZWVkZWRcbiAgICBkZWxldGUgY29uZmlnLnN1cHBvcnQ7XG4gICAgZGVsZXRlIGNvbmZpZy5zdGF0ZUFycmF5O1xuICAgIGRlbGV0ZSBjb25maWcuc3RhdGVzO1xuICAgIHNldFVzZU1lbW9yeS50YWdDbG9zZWQkLm5leHQob3duZXJTdXBwb3J0KTtcbn1cbiIsImltcG9ydCB7IGV4ZWN1dGVXcmFwIH0gZnJvbSAnLi9leGVjdXRlV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBydW5BZnRlclJlbmRlciB9IGZyb20gJy4vYWZ0ZXJSZW5kZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaW5pdFN0YXRlLCByZVN0YXRlIH0gZnJvbSAnLi4vc3RhdGUvc3RhdGUudXRpbHMuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL3RhZy9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJUYWdPbmx5KG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCAvLyBjYXVzZXMgcmVzdGF0ZVxuc3ViamVjdCwgb3duZXJTdXBwb3J0KSB7XG4gICAgcnVuQmVmb3JlUmVuZGVyKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0KTtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBuZXdTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBsZXQgcmVTdXBwb3J0O1xuICAgIC8vIE5FVyBUQUcgQ1JFQVRFRCBIRVJFXG4gICAgaWYgKHRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGVtcGxhdGVyOyAvLyAud3JhcHBlciBhcyBhbnkvLyB8fCB7b3JpZ2luYWw6IHRlbXBsYXRlcn0gYXMgYW55XG4gICAgICAgIHJlU3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQuYXBwU3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0LmFwcFN1cHBvcnQgYXMgQW55U3VwcG9ydCxcbiAgICAgICAgc3ViamVjdCk7XG4gICAgICAgIGV4ZWN1dGVXcmFwKHRlbXBsYXRlciwgcmVzdWx0LCByZVN1cHBvcnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gZnVuY3Rpb25zIHdyYXBwZWQgaW4gdGFnKClcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRlbXBsYXRlci53cmFwcGVyO1xuICAgICAgICAvLyBjYWxscyB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSBnZXRUYWdXcmFwKClcbiAgICAgICAgcmVTdXBwb3J0ID0gd3JhcHBlcihuZXdTdXBwb3J0LCBzdWJqZWN0LCBwcmV2U3VwcG9ydCk7XG4gICAgfVxuICAgIHJ1bkFmdGVyUmVuZGVyKHJlU3VwcG9ydCwgb3duZXJTdXBwb3J0KTtcbiAgICByZVN1cHBvcnQub3duZXJTdXBwb3J0ID0gbmV3U3VwcG9ydC5vd25lclN1cHBvcnQ7IC8vIHx8IGxhc3RPd25lclN1cHBvcnQpIGFzIEFueVN1cHBvcnRcbiAgICByZXR1cm4gcmVTdXBwb3J0O1xufVxuZnVuY3Rpb24gcnVuQmVmb3JlUmVuZGVyKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0KSB7XG4gICAgY29uc3QgcHJldlN0YXRlID0gcHJldlN1cHBvcnQ/LnN0YXRlO1xuICAgIGlmIChwcmV2U3RhdGUpIHtcbiAgICAgICAgcmVTdGF0ZShuZXdTdXBwb3J0LCBwcmV2U3VwcG9ydCwgcHJldlN0YXRlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbml0U3RhdGUobmV3U3VwcG9ydCk7XG59XG4iLCJpbXBvcnQgeyBvbmVSZW5kZXJUb1N1cHBvcnQgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL29uZVJlbmRlclRvU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdPbmx5IH0gZnJvbSAnLi4vcmVuZGVyVGFnT25seS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTmV3U3ViamVjdFRhZyB9IGZyb20gJy4uLy4uL3RhZy91cGRhdGUvcHJvY2Vzc05ld1N1YmplY3RUYWcuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NSZW5kZXJPbmNlSW5pdCh2YWx1ZSwgY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xub3duZXJTdXBwb3J0LCAvLyBvd25pbmdTdXBwb3J0XG5hcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICBjb25zdCBzdXBwb3J0ID0gb25lUmVuZGVyVG9TdXBwb3J0KHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICByZW5kZXJUYWdPbmx5KHN1cHBvcnQsIHVuZGVmaW5lZCwgY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBwcm9jZXNzTmV3U3ViamVjdFRhZyhzdXBwb3J0LnRlbXBsYXRlciwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG59XG4iLCJpbXBvcnQgeyBnZXRUZW1wbGF0ZXJSZXN1bHQgfSBmcm9tICcuLi9nZXRUZW1wbGF0ZXJSZXN1bHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgbmV3U3VwcG9ydEJ5VGVtcGxhdGVyIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3VwZGF0ZS9wcm9jZXNzVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL3RhZy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gb25lUmVuZGVyVG9TdXBwb3J0KHdyYXBwZXIsIHN1YmplY3QsIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHRlbXBsYXRlciA9IGdldFRlbXBsYXRlclJlc3VsdChQcm9wV2F0Y2hlcy5ERUVQKTtcbiAgICB0ZW1wbGF0ZXIudGFnSnNUeXBlID0gd3JhcHBlci50YWdKc1R5cGU7XG4gICAgY29uc3Qgc3VwcG9ydCA9IG5ld1N1cHBvcnRCeVRlbXBsYXRlcih0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgbGV0IHRhZztcbiAgICBmdW5jdGlvbiB3cmFwKCkge1xuICAgICAgICB0ZW1wbGF0ZXIudGFnID0gdGFnIHx8IHdyYXBwZXIoKTtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnQ7XG4gICAgfVxuICAgIHRlbXBsYXRlci53cmFwcGVyID0gd3JhcDtcbiAgICB3cmFwLnRhZ0pzVHlwZSA9IHdyYXBwZXIudGFnSnNUeXBlO1xuICAgIHdyYXAub3JpZ2luYWwgPSB3cmFwcGVyLm9yaWdpbmFsIHx8IHdyYXBwZXI7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBwcm9jZXNzRmlyc3RUYWdSZXN1bHQgfSBmcm9tICcuL3Byb2Nlc3NUYWdSZXN1bHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBnZXRDYXN0ZWRQcm9wcyB9IGZyb20gJy4uL2dldFRhZ1dyYXAuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyVGFnT25seSB9IGZyb20gJy4uLy4uL3JlbmRlci9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uLy4uL3JlbmRlci9idWlsZEJlZm9yZUVsZW1lbnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NSZXBsYWNlbWVudENvbXBvbmVudCh0ZW1wbGF0ZXIsIHN1YmplY3QsIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IG5ld1N1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgY29uc3QgbmV3UHJvcHNDb25maWcgPSBuZXdTdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIGlmIChuZXdQcm9wc0NvbmZpZykge1xuICAgICAgICBjb25zdCBjYXN0ZWRQcm9wcyA9IHRlbXBsYXRlci50YWdKc1R5cGUgIT09IFZhbHVlVHlwZXMudGFnQ29tcG9uZW50ID8gW10gOiBnZXRDYXN0ZWRQcm9wcyh0ZW1wbGF0ZXIsIG5ld1N1cHBvcnQpO1xuICAgICAgICBuZXdQcm9wc0NvbmZpZy5jYXN0UHJvcHMgPSBjYXN0ZWRQcm9wcztcbiAgICB9XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHJlbmRlclRhZ09ubHkobmV3U3VwcG9ydCwgZ2xvYmFsLm5ld2VzdCwgLy8gZXhpc3RpbmcgdGFnXG4gICAgc3ViamVjdCk7XG4gICAgYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIHVuZGVmaW5lZCwgLy8gZWxlbWVudCBmb3IgYXBwZW5kIGNoaWxkXG4gICAgc3ViamVjdC5wbGFjZWhvbGRlcik7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0ZpcnN0U3ViamVjdENvbXBvbmVudCh0ZW1wbGF0ZXIsIHN1YmplY3QsIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCBuZXdTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgb3duZXJTdXBwb3J0LmFwcFN1cHBvcnQsIHN1YmplY3QpO1xuICAgIGNvbnN0IG5ld1Byb3BzQ29uZmlnID0gbmV3U3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICBpZiAobmV3UHJvcHNDb25maWcpIHtcbiAgICAgICAgY29uc3QgY2FzdGVkUHJvcHMgPSB0ZW1wbGF0ZXIudGFnSnNUeXBlICE9PSBWYWx1ZVR5cGVzLnRhZ0NvbXBvbmVudCA/IFtdIDogZ2V0Q2FzdGVkUHJvcHModGVtcGxhdGVyLCBuZXdTdXBwb3J0KTtcbiAgICAgICAgbmV3UHJvcHNDb25maWcuY2FzdFByb3BzID0gY2FzdGVkUHJvcHM7XG4gICAgfVxuICAgIGNvbnN0IGdsb2JhbCA9IHN1YmplY3QuZ2xvYmFsO1xuICAgIGNvbnN0IHN1cHBvcnQgPSByZW5kZXJUYWdPbmx5KG5ld1N1cHBvcnQsIGdsb2JhbC5uZXdlc3QsIC8vIGV4aXN0aW5nIHRhZ1xuICAgIHN1YmplY3QpO1xuICAgIHJldHVybiBwcm9jZXNzRmlyc3RUYWdSZXN1bHQoc3VwcG9ydCwgYXBwZW5kVG8pO1xufVxuIiwiaW1wb3J0IHsgYnVpbGRCZWZvcmVFbGVtZW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwYWludEFwcGVuZCwgcGFpbnRBcHBlbmRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRmlyc3RUYWdSZXN1bHQoc3VwcG9ydCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCByZXN1bHQgPSBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgYXBwZW5kVG8sIHVuZGVmaW5lZCk7XG4gICAgZm9yIChjb25zdCBkb20gb2YgcmVzdWx0LmRvbSkge1xuICAgICAgICBpZiAoZG9tLmRvbUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHBhaW50QXBwZW5kcy5wdXNoKFtwYWludEFwcGVuZCwgW2FwcGVuZFRvLCBkb20uZG9tRWxlbWVudF1dKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9tLm1hcmtlcikge1xuICAgICAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGRvbS5tYXJrZXJdXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBwcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50LCBwcm9jZXNzUmVwbGFjZW1lbnRDb21wb25lbnQgfSBmcm9tICcuL3Byb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWdDb21wb25lbnRJbml0KHZhbHVlLCBjb250ZXh0SXRlbSwgLy8gY291bGQgYmUgdGFnIHZpYSByZXN1bHQudGFnXG5vd25lclN1cHBvcnQsIC8vIG93bmluZ1N1cHBvcnRcbmFwcGVuZFRvKSB7XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgY29uc3QgcHJvY2Vzc1Jlc3VsdCA9IHByb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvKTtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHByb2Nlc3NSZXN1bHQgPSBwcm9jZXNzUmVwbGFjZW1lbnRDb21wb25lbnQodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIHJldHVybiBwcm9jZXNzUmVzdWx0O1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vc3RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0VGVtcGxhdGVyUmVzdWx0IH0gZnJvbSAnLi4vdGFnL2dldFRlbXBsYXRlclJlc3VsdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdzIH0gZnJvbSAnLi4vdGFnL3RhZy51dGlscy5qcyc7XG5pbXBvcnQgeyBnZXRUYWdXcmFwIH0gZnJvbSAnLi4vdGFnL2dldFRhZ1dyYXAuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1JlbmRlck9uY2VJbml0IH0gZnJvbSAnLi4vcmVuZGVyL3VwZGF0ZS9wcm9jZXNzUmVuZGVyT25jZUluaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0NvbXBvbmVudEluaXQgfSBmcm9tICcuLi90YWcvdXBkYXRlL3Byb2Nlc3NUYWdDb21wb25lbnRJbml0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNoZWNrVGFnVmFsdWVDaGFuZ2UsIGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSB9IGZyb20gJy4uL3RhZy9jaGVja1RhZ1ZhbHVlQ2hhbmdlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlciB9IGZyb20gJy4uL3RhZy91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldEVsZW1lbnQgYXMgZ2V0VGFnRWxlbWVudCB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xubGV0IHRhZ0NvdW50ID0gMDtcbi8qKiBIb3cgdG8gaGFuZGxlIGNoZWNraW5nIGZvciBwcm9wIGNoYW5nZXMgYWthIGFyZ3VtZW50IGNoYW5nZXMgKi9cbmV4cG9ydCB2YXIgUHJvcFdhdGNoZXM7XG4oZnVuY3Rpb24gKFByb3BXYXRjaGVzKSB7XG4gICAgUHJvcFdhdGNoZXNbXCJERUVQXCJdID0gXCJkZWVwXCI7XG4gICAgLyoqIGNoZWNrcyBhbGwgdmFsdWVzIHVwIHRvIDIgbGV2ZWxzIGRlZXAgKi9cbiAgICBQcm9wV2F0Y2hlc1tcIlNIQUxMT1dcIl0gPSBcInNoYWxsb3dcIjtcbiAgICBQcm9wV2F0Y2hlc1tcIk5PTkVcIl0gPSBcIm5vbmVcIjtcbiAgICBQcm9wV2F0Y2hlc1tcIklNTVVUQUJMRVwiXSA9IFwiaW1tdXRhYmxlXCI7XG59KShQcm9wV2F0Y2hlcyB8fCAoUHJvcFdhdGNoZXMgPSB7fSkpO1xuLyoqIFdyYXBzIGEgZnVuY3Rpb24gdGFnIGluIGEgc3RhdGUgbWFuYWdlciBhbmQgY2FsbHMgd3JhcHBlZCBmdW5jdGlvbiBvbiBldmVudCBjeWNsZXNcbiAqIEZvciBzaW5nbGUgcmVuZGVyaW5nLCBubyBldmVudCBjeWNsZXMsIHVzZTogdGFnLnJlbmRlck9uY2UgPSAocHJvcHMpID0+IGh0bWxgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnKHRhZ0NvbXBvbmVudCwgcHJvcFdhdGNoID0gUHJvcFdhdGNoZXMuU0hBTExPVykge1xuICAgIC8qKiBmdW5jdGlvbiBkZXZlbG9wZXIgdHJpZ2dlcnMgKi9cbiAgICBjb25zdCBwYXJlbnRXcmFwID0gZnVuY3Rpb24gdGFnV3JhcHBlciguLi5wcm9wcykge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZXIgPSBnZXRUZW1wbGF0ZXJSZXN1bHQocHJvcFdhdGNoLCBwcm9wcyk7XG4gICAgICAgIHRlbXBsYXRlci50YWdKc1R5cGUgPSBWYWx1ZVR5cGVzLnRhZ0NvbXBvbmVudDtcbiAgICAgICAgdGVtcGxhdGVyLnByb2Nlc3NJbml0ID0gcHJvY2Vzc1RhZ0NvbXBvbmVudEluaXQ7XG4gICAgICAgIC8vIGF0dGFjaCBtZW1vcnkgYmFjayB0byBvcmlnaW5hbCBmdW5jdGlvbiB0aGF0IGNvbnRhaW5zIGRldmVsb3BlciBkaXNwbGF5IGxvZ2ljXG4gICAgICAgIGNvbnN0IGlubmVyVGFnV3JhcCA9IGdldFRhZ1dyYXAodGVtcGxhdGVyLCBwYXJlbnRXcmFwKTtcbiAgICAgICAgaW5uZXJUYWdXcmFwLm9yaWdpbmFsID0gdGFnQ29tcG9uZW50O1xuICAgICAgICB0ZW1wbGF0ZXIud3JhcHBlciA9IGlubmVyVGFnV3JhcDtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlcjtcbiAgICB9OyAvLyB3ZSBvdmVycmlkZSB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgYW5kIHByZXRlbmQgb3JpZ2luYWwgaXMgd2hhdCdzIHJldHVybmVkXG4gICAgY29uc3QgdGFnID0gdGFnQ29tcG9uZW50O1xuICAgIHBhcmVudFdyYXAub3JpZ2luYWwgPSB0YWdDb21wb25lbnQ7XG4gICAgLy8gZ3JvdXAgdGFncyB0b2dldGhlciBhbmQgaGF2ZSBobXIgcGlja3VwXG4gICAgdGFnLnRhZ3MgPSB0YWdzO1xuICAgIHRhZy5zZXRVc2UgPSBzZXRVc2VNZW1vcnk7XG4gICAgdGFnLlZhbHVlVHlwZXMgPSBWYWx1ZVR5cGVzO1xuICAgIHRhZy50YWdJbmRleCA9IHRhZ0NvdW50Kys7IC8vIG5lZWRlZCBmb3IgdGhpbmdzIGxpa2UgSE1SXG4gICAgdGFncy5wdXNoKHBhcmVudFdyYXApO1xuICAgIHJldHVybiBwYXJlbnRXcmFwO1xufVxuLyoqIFVzZSB0byBzdHJ1Y3R1cmUgYW5kIGRlZmluZSBhIGJyb3dzZXIgdGFnIHJvdXRlIGhhbmRsZXJcbiAqIEV4YW1wbGU6IGV4cG9ydCBkZWZhdWx0IHRhZy5yb3V0ZSA9IChyb3V0ZVByb3BzOiBSb3V0ZVByb3BzKSA9PiAoc3RhdGUpID0+IGh0bWxgYFxuICovXG5mdW5jdGlvbiByb3V0ZUZuKF9yb3V0ZVByb3BzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEbyBub3QgY2FsbCB0YWcucm91dGUgYXMgYSBmdW5jdGlvbiBidXQgaW5zdGVhZCBzZXQgaXQgYXM6IGB0YWcucm91dGUgPSAocm91dGVQcm9wczogUm91dGVQcm9wcykgPT4gKHN0YXRlKSA9PiBodG1sYGAgYCcpO1xufVxuZnVuY3Rpb24gcmVuZGVyT25jZUZuKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRG8gbm90IGNhbGwgdGFnLnJlbmRlck9uY2UgYXMgYSBmdW5jdGlvbiBidXQgaW5zdGVhZCBzZXQgaXQgYXM6IGAocHJvcHMpID0+IHRhZy5yZW5kZXJPbmNlID0gKCkgPT4gaHRtbGBgIGAnKTtcbn1cbi8qKiBVc2VkIHRvIGNyZWF0ZSB2YXJpYWJsZSBzY29waW5nIHdoZW4gY2FsbGluZyBhIGZ1bmN0aW9uIHRoYXQgbGl2ZXMgd2l0aGluIGEgcHJvcCBjb250YWluZXIgZnVuY3Rpb24gKi9cbmZ1bmN0aW9uIHRhZ1VzZUZuKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRG8gbm90IGNhbGwgdGFnLnVzZSBhcyBhIGZ1bmN0aW9uIGJ1dCBpbnN0ZWFkIHNldCBpdCBhczogYChwcm9wcykgPT4gdGFnLnVzZSA9ICh1c2UpID0+IGh0bWxgYCBgJyk7XG59XG47XG50YWcuZ2V0RWxlbWVudCA9IGdldFRhZ0VsZW1lbnQ7XG50YWcucmVuZGVyT25jZSA9IHJlbmRlck9uY2VGbjtcbnRhZy51c2UgPSB0YWdVc2VGbjtcbnRhZy5kZWVwUHJvcFdhdGNoID0gdGFnO1xudGFnLnJvdXRlID0gcm91dGVGbjtcbnRhZy5hcHAgPSBmdW5jdGlvbiAoX3JvdXRlVGFnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEbyBub3QgY2FsbCB0YWcucm91dGUgYXMgYSBmdW5jdGlvbiBidXQgaW5zdGVhZCBzZXQgaXQgYXM6IGB0YWcucm91dGUgPSAocm91dGVQcm9wczogUm91dGVQcm9wcykgPT4gKHN0YXRlKSA9PiBodG1sYGAgYCcpO1xufTtcbnRhZy5pbW11dGFibGVQcm9wcyA9IGZ1bmN0aW9uIGltbXV0YWJsZVByb3BzKHRhZ0NvbXBvbmVudCkge1xuICAgIHJldHVybiB0YWcodGFnQ29tcG9uZW50LCBQcm9wV2F0Y2hlcy5JTU1VVEFCTEUpO1xufTtcbnRhZy53YXRjaFByb3BzID0gZnVuY3Rpb24gd2F0Y2hQcm9wcyh0YWdDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdGFnKHRhZ0NvbXBvbmVudCwgUHJvcFdhdGNoZXMuU0hBTExPVyk7XG59O1xuLyogQkVMT1c6IENhc3QgZnVuY3Rpb25zIGludG8gc2V0dGVycyB3aXRoIG5vIGdldHRlcnMgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsICdyZW5kZXJPbmNlJywge1xuICAgIHNldChvbmVSZW5kZXJGdW5jdGlvbikge1xuICAgICAgICBvbmVSZW5kZXJGdW5jdGlvbi50YWdKc1R5cGUgPSBWYWx1ZVR5cGVzLnJlbmRlck9uY2U7XG4gICAgICAgIG9uZVJlbmRlckZ1bmN0aW9uLnByb2Nlc3NJbml0ID0gcHJvY2Vzc1JlbmRlck9uY2VJbml0O1xuICAgICAgICBvbmVSZW5kZXJGdW5jdGlvbi5wcm9jZXNzVXBkYXRlID0gdGFnVmFsdWVVcGRhdGVIYW5kbGVyO1xuICAgICAgICBvbmVSZW5kZXJGdW5jdGlvbi5kZWxldGUgPSBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW07XG4gICAgICAgIG9uZVJlbmRlckZ1bmN0aW9uLmNoZWNrVmFsdWVDaGFuZ2UgPSBmdW5jdGlvbiByZW5kZXJPbmNlTmV2ZXJDaGFuZ2VzKCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH0sXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsICd1c2UnLCB7XG4gICAgc2V0KHJlbmRlckZ1bmN0aW9uKSB7XG4gICAgICAgIHJlbmRlckZ1bmN0aW9uLm9yaWdpbmFsID0ge1xuICAgICAgICAgICAgc2V0VXNlOiBzZXRVc2VNZW1vcnksXG4gICAgICAgICAgICB0YWdzLFxuICAgICAgICB9O1xuICAgICAgICByZW5kZXJGdW5jdGlvbi50YWdKc1R5cGUgPSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyO1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5wcm9jZXNzSW5pdCA9IHByb2Nlc3NUYWdDb21wb25lbnRJbml0O1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5wcm9jZXNzVXBkYXRlID0gdGFnVmFsdWVVcGRhdGVIYW5kbGVyO1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5jaGVja1ZhbHVlQ2hhbmdlID0gY2hlY2tUYWdWYWx1ZUNoYW5nZTtcbiAgICAgICAgcmVuZGVyRnVuY3Rpb24uZGVsZXRlID0gZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IGRlZXBFcXVhbCB9IGZyb20gJy4uL2RlZXBGdW5jdGlvbnMuanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCwgaW1tdXRhYmxlUHJvcE1hdGNoIH0gZnJvbSAnLi9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzaGFsbG93UHJvcE1hdGNoIH0gZnJvbSAnLi9zaGFsbG93UHJvcE1hdGNoLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGhhc1Byb3BMZW5ndGhzQ2hhbmdlZCB9IGZyb20gJy4uL3JlbmRlci9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vdGFnSnNWYXJzL3RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuLyoqXG4gKlxuICogQHBhcmFtIHByb3BzXG4gKiBAcGFyYW0gcGFzdENsb25lUHJvcHNcbiAqIEByZXR1cm5zIFdIRU4gbnVtYmVyIHRoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLiBXSEVOIGZhbHNlIHByb3BzIGhhdmUgbm90IGNoYW5nZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BDaGFuZ2VzKHByb3BzLCAvLyBuYXR1cmFsIHByb3BzXG5wYXN0Q2xvbmVQcm9wcywgLy8gcHJldmlvdXNseSBjbG9uZWQgcHJvcHNcbnByb3BXYXRjaCkge1xuICAgIGNvbnN0IGhhc0xlbkNoYW5nZWQgPSBoYXNQcm9wTGVuZ3Roc0NoYW5nZWQocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbiAgICBpZiAoaGFzTGVuQ2hhbmdlZCkge1xuICAgICAgICByZXR1cm4gMTE7XG4gICAgfVxuICAgIHN3aXRjaCAocHJvcFdhdGNoKSB7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuTk9ORTpcbiAgICAgICAgICAgIHJldHVybiAxOyAvLyBhbHdheXMgcmVuZGVyXG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuU0hBTExPVzogLy8gZGV0ZXJtaW5pbmcgZXF1YWwgaXMgc2FtZSBhcyBpbW11dGFibGUsIGl0cyB0aGUgcHJldmlvdXMgY2xvbmluZyBzdGVwIHRoYXRzIGRpZmZlcmVudFxuICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3dQcm9wTWF0Y2gocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbiAgICAgICAgY2FzZSBQcm9wV2F0Y2hlcy5JTU1VVEFCTEU6XG4gICAgICAgICAgICByZXR1cm4gaW1tdXRhYmxlUHJvcE1hdGNoKHByb3BzLCBwYXN0Q2xvbmVQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBkZWVwUHJvcENoYW5nZUNvbXBhcmUocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbn1cbmZ1bmN0aW9uIGRlZXBQcm9wQ2hhbmdlQ29tcGFyZShwcm9wcywgcGFzdENsb25lUHJvcHMpIHtcbiAgICAvLyBERUVQIHdhdGNoXG4gICAgbGV0IGNhc3RlZFByb3BzID0gcHJvcHM7XG4gICAgbGV0IGNhc3RlZFBhc3RQcm9wcyA9IHBhc3RDbG9uZVByb3BzO1xuICAgIGNhc3RlZFByb3BzID0gWy4uLnByb3BzXTtcbiAgICBjYXN0ZWRQYXN0UHJvcHMgPSBbLi4uKHBhc3RDbG9uZVByb3BzIHx8IFtdKV07XG4gICAgY29uc3QgYWxsRnVuY3Rpb25zTWF0Y2ggPSBjYXN0ZWRQcm9wcy5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiBvbmVQcm9wQ29tcGFyZSh2YWx1ZSwgaW5kZXgsIGNhc3RlZFByb3BzLCBjYXN0ZWRQYXN0UHJvcHMpKTtcbiAgICBpZiAoIWFsbEZ1bmN0aW9uc01hdGNoKSB7XG4gICAgICAgIHJldHVybiA3OyAvLyBhIGNoYW5nZSBoYXMgYmVlbiBkZXRlY3RlZCBieSBmdW5jdGlvbiBjb21wYXJpc29uc1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBvbmVQcm9wQ29tcGFyZSh2YWx1ZSwgaW5kZXgsIGNhc3RlZFByb3BzLCBjYXN0ZWRQYXN0UHJvcHMpIHtcbiAgICBjb25zdCBjb21wYXJlID0gY2FzdGVkUGFzdFByb3BzW2luZGV4XTtcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IHN1YkNhc3RlZFByb3BzID0geyAuLi52YWx1ZSB9O1xuICAgICAgICBjb25zdCBzdWJDb21wYXJlUHJvcHMgPSB7IC4uLmNvbXBhcmUgfHwge30gfTtcbiAgICAgICAgY29uc3QgbWF0Y2hlZCA9IE9iamVjdC5lbnRyaWVzKHN1YkNhc3RlZFByb3BzKS5ldmVyeSgoW2tleSwgdmFsdWVdKSA9PiBjb21wYXJlUHJvcHModmFsdWUsIHN1YkNvbXBhcmVQcm9wc1trZXldLCAoKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgc3ViQ2FzdGVkUHJvcHNba2V5XTsgLy8gaXRzIGEgZnVuY3Rpb24gYW5kIG5vdCBuZWVkZWQgdG8gYmUgY29tcGFyZWRcbiAgICAgICAgICAgIGRlbGV0ZSBzdWJDb21wYXJlUHJvcHNba2V5XTsgLy8gaXRzIGEgZnVuY3Rpb24gYW5kIG5vdCBuZWVkZWQgdG8gYmUgY29tcGFyZWRcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmVQcm9wcyh2YWx1ZSwgY29tcGFyZSwgZnVuY3Rpb24gcHJvcENvbXBhcmVyKCkge1xuICAgICAgICBjYXN0ZWRQcm9wcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBjYXN0ZWRQYXN0UHJvcHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9KTtcbn1cbi8qKiByZXR1cm5pbmcgYSBudW1iZXIgbWVhbnMgdHJ1ZSBnb29kIGNvbXBhcmlzb24gKi9cbmZ1bmN0aW9uIGNvbXBhcmVQcm9wcyh2YWx1ZSwgY29tcGFyZSwgb25EZWxldGUpIHtcbiAgICBpZiAoISh0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBFcXVhbCh2YWx1ZSwgY29tcGFyZSwgZGVlcENvbXBhcmVEZXB0aCkgPyA0IDogZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBhcmVGbiA9IGNvbXBhcmU7XG4gICAgaWYgKCEodHlwZW9mIChjb21wYXJlRm4pID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGl0cyBhIGZ1bmN0aW9uIG5vdyBidXQgd2FzIG5vdCBiZWZvcmVcbiAgICB9XG4gICAgLy8gZW5zdXJlIHdlIGFyZSBjb21wYXJpbmcgYXBwbGVzIHRvIGFwcGxlcyBhcyBmdW5jdGlvbiBnZXQgd3JhcHBlZFxuICAgIGNvbnN0IGNvbXBhcmVPcmlnaW5hbCA9IGNvbXBhcmU/Lm9yaWdpbmFsO1xuICAgIGlmIChjb21wYXJlT3JpZ2luYWwpIHtcbiAgICAgICAgY29tcGFyZSA9IGNvbXBhcmVPcmlnaW5hbDtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB2YWx1ZS5vcmlnaW5hbDtcbiAgICBpZiAob3JpZ2luYWwpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5vcmlnaW5hbDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVTdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIGNvbnN0IGNvbXBhcmVTdHJpbmcgPSBjb21wYXJlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbHVlU3RyaW5nID09PSBjb21wYXJlU3RyaW5nKSB7XG4gICAgICAgIG9uRGVsZXRlKCk7XG4gICAgICAgIHJldHVybiA1OyAvLyBib3RoIGFyZSBmdW5jdGlvbiB0aGUgc2FtZVxuICAgIH1cbiAgICBvbkRlbGV0ZSgpO1xuICAgIHJldHVybiA2O1xufVxuIiwiaW1wb3J0IHsgaGFzUHJvcENoYW5nZXMgfSBmcm9tICcuL2hhc1Byb3BDaGFuZ2VzLmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIHdoZW4gZGVjaWRpbmcgaWYgYSBzdXBwb3J0IHdpbGwgZXZlbiBjaGFuZ2UgKGFyZSB0aGUgYXJndW1lbnRzIHRoZSBzYW1lPykgKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNTdXBwb3J0Q2hhbmdlZChvbGRTdXBwb3J0LCBuZXdUZW1wbGF0ZXIpIHtcbiAgICBjb25zdCBsYXRlc3RQcm9wcyA9IG5ld1RlbXBsYXRlci5wcm9wcztcbiAgICBjb25zdCBwcm9wc0NvbmZpZyA9IG9sZFN1cHBvcnQucHJvcHNDb25maWc7XG4gICAgY29uc3QgcGFzdENsb25lUHJvcHMgPSBwcm9wc0NvbmZpZy5sYXRlc3Q7XG4gICAgY29uc3QgcHJvcHNDaGFuZ2VkID0gaGFzUHJvcENoYW5nZXMobGF0ZXN0UHJvcHMsIHBhc3RDbG9uZVByb3BzLCBvbGRTdXBwb3J0LnRlbXBsYXRlci5wcm9wV2F0Y2gpO1xuICAgIHJldHVybiBwcm9wc0NoYW5nZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaW1tdXRhYmxlUHJvcE1hdGNoKHByb3BzLCBwYXN0Q2xvbmVQcm9wcykge1xuICAgIC8vIGlmIGV2ZXJ5IHByb3AgdGhlIHNhbWUsIHRoZW4gbm8gY2hhbmdlc1xuICAgIGNvbnN0IGxlbiA9IHByb3BzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGNvbnN0IHBhc3RQcm9wID0gcGFzdENsb25lUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAocHJvcCAhPT0gcGFzdFByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTsgLy8gZmFsc2UgbWVhbnMgaGFzIG5vdCBjaGFuZ2VkXG59XG5leHBvcnQgY29uc3Qgc2hhbGxvd0NvbXBhcmVEZXB0aCA9IDM7XG5leHBvcnQgY29uc3QgZGVlcENvbXBhcmVEZXB0aCA9IDEwO1xuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vLi4vc3RhdGUvaW5kZXguanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRleHRJbkN5Y2xlKCkge1xuICAgIHJldHVybiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuY29udGV4dDtcbn1cbi8qKiBHZXRzIHRoZSBjdXJyZW50IGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRhZ2dlZGpzIGRvY3VtZW50IHByb2Nlc3NpbmcgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50KCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgIHJldHVybiBjb250ZXh0LmVsZW1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dCkge1xuICAgIHJldHVybiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuY29udGV4dCA9IGNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ29udGV4dEluQ3ljbGUoKSB7XG4gICAgZGVsZXRlIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5jb250ZXh0O1xufVxuIiwiaW1wb3J0IHsgaXNTa2lwUHJvcFZhbHVlIH0gZnJvbSAnLi4vcHJvcHMvYWx0ZXJQcm9wLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uLy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgdXBkYXRlRXhpc3RpbmdPYmplY3QgfSBmcm9tICcuL3VwZGF0ZUV4aXN0aW5nT2JqZWN0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHVwZGF0ZUV4aXN0aW5nQXJyYXkgfSBmcm9tICcuL3VwZGF0ZUV4aXN0aW5nQXJyYXkuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHN5bmNQcmlvclByb3BGdW5jdGlvbihwcmlvclByb3AsIHByb3AsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgbWF4RGVwdGgsIGRlcHRoKSB7XG4gICAgaWYgKHByaW9yUHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByaW9yUHJvcCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG4gICAgLy8gcHJldmVudCBpbmZpbml0ZSByZWN1cnNpb25cbiAgICBpZiAoZGVwdGggPiBtYXhEZXB0aCkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAocHJpb3JQcm9wKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICAvLyB0aGUgcHJvcCBpIGFtIHJlY2VpdmluZywgaXMgYWxyZWFkeSBiZWluZyBtb25pdG9yZWQvY29udHJvbGxlZCBieSBhbm90aGVyIHBhcmVudFxuICAgICAgICBpZiAocHJvcC5tZW0pIHtcbiAgICAgICAgICAgIHByaW9yUHJvcC5tZW0gPSBwcm9wLm1lbTtcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICB9XG4gICAgICAgIHByaW9yUHJvcC5tZW0gPSBwcm9wO1xuICAgICAgICByZXR1cm4gcHJpb3JQcm9wO1xuICAgIH1cbiAgICBpZiAoaXNTa2lwUHJvcFZhbHVlKHByb3ApKSB7XG4gICAgICAgIHJldHVybiBwcm9wOyAvLyBubyBjaGlsZHJlbiB0byBjcmF3bCB0aHJvdWdoXG4gICAgfVxuICAgIGlmIChpc0FycmF5KHByb3ApKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVFeGlzdGluZ0FycmF5KHByb3AsIHByaW9yUHJvcCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCwgbWF4RGVwdGgpO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlRXhpc3RpbmdPYmplY3QocHJvcCwgcHJpb3JQcm9wLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoLCBtYXhEZXB0aCk7XG59XG4iLCJpbXBvcnQgeyBzeW5jUHJpb3JQcm9wRnVuY3Rpb24gfSBmcm9tICcuL3N5bmNQcmlvclByb3BGdW5jdGlvbi5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRXhpc3RpbmdBcnJheShwcm9wLCBwcmlvclByb3AsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgZGVwdGgsIG1heERlcHRoKSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSBwcm9wLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgY29uc3QgeCA9IHByb3BbaW5kZXhdO1xuICAgICAgICBjb25zdCBvbGRQcm9wID0gcHJpb3JQcm9wW2luZGV4XTtcbiAgICAgICAgcHJvcFtpbmRleF0gPSBzeW5jUHJpb3JQcm9wRnVuY3Rpb24ob2xkUHJvcCwgeCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCwgZGVwdGggKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3A7XG59XG4iLCJpbXBvcnQgeyBzeW5jUHJpb3JQcm9wRnVuY3Rpb24gfSBmcm9tICcuL3N5bmNQcmlvclByb3BGdW5jdGlvbi5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRXhpc3RpbmdPYmplY3QocHJvcCwgcHJpb3JQcm9wLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoLCBtYXhEZXB0aCkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Yga2V5cykge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHByb3BbbmFtZV07XG4gICAgICAgIGNvbnN0IG9sZFByb3AgPSBwcmlvclByb3BbbmFtZV07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN5bmNQcmlvclByb3BGdW5jdGlvbihvbGRQcm9wLCBzdWJWYWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCwgZGVwdGggKyAxKTtcbiAgICAgICAgaWYgKHN1YlZhbHVlID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc1NldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvcCwgbmFtZSk/LnNldDtcbiAgICAgICAgaWYgKGhhc1NldHRlcikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcFtuYW1lXSA9IHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHByb3A7XG59XG4iLCJpbXBvcnQgeyBkZWVwQ29tcGFyZURlcHRoLCBoYXNTdXBwb3J0Q2hhbmdlZCwgc2hhbGxvd0NvbXBhcmVEZXB0aCB9IGZyb20gJy4uLy4uL3RhZy9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjYXN0UHJvcHMgfSBmcm9tICcuLi8uLi90YWcvcHJvcHMvYWx0ZXJQcm9wLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclN1cHBvcnQgfSBmcm9tICcuLi9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0IH0gZnJvbSAnLi4vZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi4vLi4vdGFnL3VwZGF0ZS9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNMaWtlVGFncyB9IGZyb20gJy4uLy4uL3RhZy9pc0xpa2VUYWdzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL3RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzeW5jUHJpb3JQcm9wRnVuY3Rpb24gfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL3N5bmNQcmlvclByb3BGdW5jdGlvbi5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQob3duZXJTdXBwb3J0LCBuZXdTdXBwb3J0LCAvLyBsYXN0ZXN0XG5zdWJqZWN0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgY29uc3Qgb2xkU3VwcG9ydCA9IGdsb2JhbC5uZXdlc3Q7XG4gICAgY29uc3Qgb2xkV3JhcHBlciA9IG9sZFN1cHBvcnQudGVtcGxhdGVyLndyYXBwZXI7XG4gICAgbGV0IG5ld1dyYXBwZXIgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci53cmFwcGVyO1xuICAgIGxldCBpc1NhbWVUYWcgPSBmYWxzZTtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci50YWdKc1R5cGU7XG4gICAgY29uc3Qgc2tpcENvbXBhcmluZyA9IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIgPT09IHRhZ0pzVHlwZSB8fCBWYWx1ZVR5cGVzLnJlbmRlck9uY2UgPT09IHRhZ0pzVHlwZTtcbiAgICBpZiAoc2tpcENvbXBhcmluZykge1xuICAgICAgICBpc1NhbWVUYWcgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMucmVuZGVyT25jZSB8fCBpc0xpa2VUYWdzKG9sZFN1cHBvcnQsIG5ld1N1cHBvcnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvbGRXcmFwcGVyICYmIG5ld1dyYXBwZXIpIHtcbiAgICAgICAgLy8gaXMgdGhpcyBwZXJoYXBzIGFuIG91dGVySFRNTCBjb21wYXJlP1xuICAgICAgICBjb25zdCBpbm5lckhUTUwgPSBvbGRTdXBwb3J0LnRlbXBsYXRlci50YWc/Ll9pbm5lckhUTUw7XG4gICAgICAgIGlmIChpbm5lckhUTUwpIHtcbiAgICAgICAgICAgIC8vIG5ld1dyYXBwZXIgPSBpbm5lckhUTUwub3V0ZXJIVE1MIGFzIGFueSBhcyBXcmFwcGVyXG4gICAgICAgICAgICBuZXdXcmFwcGVyID0gbmV3U3VwcG9ydC5vdXRlckhUTUw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkRnVuY3Rpb24gPSBvbGRXcmFwcGVyLm9yaWdpbmFsO1xuICAgICAgICBjb25zdCBuZXdGdW5jdGlvbiA9IG5ld1dyYXBwZXIub3JpZ2luYWw7XG4gICAgICAgIC8vIHN0cmluZyBjb21wYXJlIGJvdGggZnVuY3Rpb25zXG4gICAgICAgIGlzU2FtZVRhZyA9IG9sZEZ1bmN0aW9uID09PSBuZXdGdW5jdGlvbjtcbiAgICB9XG4gICAgY29uc3QgdGVtcGxhdGVyID0gbmV3U3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgc3dhcFRhZ3Moc3ViamVjdCwgdGVtcGxhdGVyLCBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBza2lwQ29tcGFyaW5nIHx8IGhhc1N1cHBvcnRDaGFuZ2VkKG9sZFN1cHBvcnQsIHRlbXBsYXRlcik7XG4gICAgLy8gZXZlcnloaW5nIGhhcyBtYXRjaGVkLCBubyBkaXNwbGF5IG5lZWRzIHVwZGF0aW5nLlxuICAgIGlmICghaGFzQ2hhbmdlZCkge1xuICAgICAgICBjb25zdCBtYXhEZXB0aCA9IHRlbXBsYXRlci5wcm9wV2F0Y2ggPT09IFByb3BXYXRjaGVzLkRFRVAgPyBkZWVwQ29tcGFyZURlcHRoIDogc2hhbGxvd0NvbXBhcmVEZXB0aDtcbiAgICAgICAgc3luY1N1cHBvcnRzKHRlbXBsYXRlciwgbmV3U3VwcG9ydCwgb2xkU3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN1YmplY3QubG9ja2VkKSB7XG4gICAgICAgIGdsb2JhbC5ibG9ja2VkLnB1c2gobmV3U3VwcG9ydCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVuZGVyU3VwcG9ydChuZXdTdXBwb3J0KTtcbiAgICArK3N1YmplY3QucmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN5bmNGdW5jdGlvblByb3BzKG5ld1N1cHBvcnQsIG9sZFN1cHBvcnQsIG93bmVyU3VwcG9ydCwgbmV3UHJvcHNBcnJheSwgLy8gdGVtcGxhdGVyLnByb3BzXG5tYXhEZXB0aCwgZGVwdGggPSAtMSkge1xuICAgIGNvbnN0IHN1YmplY3QgPSBvbGRTdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgaWYgKCFnbG9iYWwgfHwgIWdsb2JhbC5uZXdlc3QpIHtcbiAgICAgICAgY29uc3QgY2FzdGVkUHJvcHMgPSBjYXN0UHJvcHMobmV3UHJvcHNBcnJheSwgbmV3U3VwcG9ydCwgZGVwdGgpO1xuICAgICAgICBuZXdQcm9wc0FycmF5LnB1c2goLi4uY2FzdGVkUHJvcHMpO1xuICAgICAgICBjb25zdCBwcm9wc0NvbmZpZyA9IG5ld1N1cHBvcnQucHJvcHNDb25maWc7XG4gICAgICAgIHByb3BzQ29uZmlnLmNhc3RQcm9wcyA9IGNhc3RlZFByb3BzO1xuICAgICAgICByZXR1cm4gbmV3UHJvcHNBcnJheTtcbiAgICB9XG4gICAgY29uc3QgbmV3ZXN0ID0gZ2xvYmFsLm5ld2VzdDtcbiAgICBvbGRTdXBwb3J0ID0gbmV3ZXN0IHx8IG9sZFN1cHBvcnQ7XG4gICAgY29uc3QgcHJpb3JQcm9wQ29uZmlnID0gb2xkU3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICBjb25zdCBwcmlvclByb3BzQXJyYXkgPSBwcmlvclByb3BDb25maWcuY2FzdFByb3BzO1xuICAgIGNvbnN0IG5ld0FycmF5ID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG5ld1Byb3BzQXJyYXkubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSBuZXdQcm9wc0FycmF5W2luZGV4XTtcbiAgICAgICAgY29uc3QgcHJpb3JQcm9wID0gcHJpb3JQcm9wc0FycmF5W2luZGV4XTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBzeW5jUHJpb3JQcm9wRnVuY3Rpb24ocHJpb3JQcm9wLCBwcm9wLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIG1heERlcHRoLCBkZXB0aCArIDEpO1xuICAgICAgICBuZXdBcnJheS5wdXNoKG5ld1ZhbHVlKTtcbiAgICB9XG4gICAgY29uc3QgbmV3UHJvcHNDb25maWcgPSBuZXdTdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIG5ld1Byb3BzQ29uZmlnLmNhc3RQcm9wcyA9IG5ld0FycmF5O1xuICAgIHJldHVybiBuZXdBcnJheTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlUHJvdmlkZXJzKG9sZFN1cHBvcnQsIG5ld1N1cHBvcnQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBvbGRTdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgIGxldCBwSW5kZXggPSAtMTtcbiAgICBjb25zdCBwcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzID0gZ2xvYmFsLnByb3ZpZGVycyB8fCBbXTtcbiAgICBjb25zdCBwTGVuID0gcHJvdmlkZXJzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHBJbmRleCsrIDwgcExlbikge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IHByb3ZpZGVyc1twSW5kZXhdO1xuICAgICAgICBsZXQgaW5kZXggPSAtMTtcbiAgICAgICAgY29uc3QgcGNMZW4gPSBwcm92aWRlci5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgICB3aGlsZSAoaW5kZXgrKyA8IHBjTGVuKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHByb3ZpZGVyLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHdhc1NhbWVHbG9iYWxzID0gZ2xvYmFsID09PSBjaGlsZC5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgICAgIGlmICh3YXNTYW1lR2xvYmFscykge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIuY2hpbGRyZW4ucHVzaChuZXdTdXBwb3J0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKiogRXhjaGFuZ2VzIGVudGlyZSBwcm9wc0NvbmZpZ3MgKi9cbmZ1bmN0aW9uIHN5bmNTdXBwb3J0cyh0ZW1wbGF0ZXIsIHN1cHBvcnQsIG9sZFN1cHBvcnQsIG93bmVyU3VwcG9ydCwgbWF4RGVwdGgpIHtcbiAgICAvLyB1cGRhdGUgZnVuY3Rpb24gcmVmcyB0byB1c2UgbGF0ZXN0IHJlZmVyZW5jZXNcbiAgICBjb25zdCBuZXdQcm9wcyA9IHRlbXBsYXRlci5wcm9wcztcbiAgICBjb25zdCBjYXN0ZWRQcm9wcyA9IHN5bmNGdW5jdGlvblByb3BzKHN1cHBvcnQsIG9sZFN1cHBvcnQsIG93bmVyU3VwcG9ydCwgbmV3UHJvcHMsIG1heERlcHRoKTtcbiAgICBjb25zdCBwcm9wc0NvbmZpZyA9IHN1cHBvcnQucHJvcHNDb25maWc7XG4gICAgLy8gV2hlbiBuZXcgc3VwcG9ydCBhY3R1YWxseSBtYWtlcyBjYWxsIHRvIHJlYWwgZnVuY3Rpb24sIHVzZSB0aGVzZSBwcmUgY2FzdGVkIHByb3BzXG4gICAgcHJvcHNDb25maWcuY2FzdFByb3BzID0gY2FzdGVkUHJvcHM7XG4gICAgY29uc3QgbGFzdFByb3BzQ29uZmlnID0gb2xkU3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICAvLyB1cGRhdGUgc3VwcG9ydCB0byB0aGluayBpdCBoYXMgZGlmZmVyZW50IGNsb25lZCBwcm9wc1xuICAgIGxhc3RQcm9wc0NvbmZpZy5sYXRlc3QgPSBwcm9wc0NvbmZpZy5sYXRlc3Q7XG4gICAgcmV0dXJuIG9sZFN1cHBvcnQ7IC8vIGl0cyB0aGUgc2FtZSB0YWcgY29tcG9uZW50ICBcbn1cbi8qKiBXYXMgdGFnLCB3aWxsIGJlIHRhZyAqL1xuZnVuY3Rpb24gc3dhcFRhZ3MoY29udGV4dEl0ZW0sIHRlbXBsYXRlciwgLy8gbmV3IHRhZ1xub3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gY29udGV4dEl0ZW0uZ2xvYmFsO1xuICAgIGNvbnN0IG9sZGVzdFN1cHBvcnQgPSBnbG9iYWwub2xkZXN0O1xuICAgIGRlc3Ryb3lTdXBwb3J0KG9sZGVzdFN1cHBvcnQsIGdsb2JhbCk7XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICB0ZW1wbGF0ZXIucHJvY2Vzc0luaXQodGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCB1bmRlZmluZWQsIC8vIGFwcGVuZFRvLFxuICAgIGNvbnRleHRJdGVtLnBsYWNlaG9sZGVyKTtcbn1cbiIsImltcG9ydCB7IGdldENoaWxkVGFnc1RvU29mdERlc3Ryb3ksIHVuc3Vic2NyaWJlRnJvbSB9IGZyb20gJy4uL3RhZy9kZXN0cm95Q29udGV4dC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuLi90YWcvdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzbWFydFJlbW92ZUtpZHMgfSBmcm9tICcuLi90YWcvc21hcnRSZW1vdmVLaWRzLmZ1bmN0aW9uLmpzJztcbi8qKiB1c2VkIHdoZW4gYSB0YWcgc3dhcHMgY29udGVudCByZXR1cm5lZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvZnREZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBsYXN0U3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IHsgc3VicywgdGFncyB9ID0gZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveShjb250ZXh0LmNvbnRleHRzKTtcbiAgICBzb2Z0RGVzdHJveU9uZShjb250ZXh0KTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRhZ3MpIHtcbiAgICAgICAgY29uc3QgY0dsb2JhbCA9IGNoaWxkLmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICBpZiAoY0dsb2JhbC5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc29mdERlc3Ryb3lPbmUoY2hpbGQuY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IG15U3VicyA9IGdsb2JhbC5zdWJzY3JpcHRpb25zO1xuICAgIGlmIChteVN1YnMpIHtcbiAgICAgICAgc3Vicy5mb3JFYWNoKHVuc3Vic2NyaWJlRnJvbSk7XG4gICAgfVxuICAgIGdldE5ld0dsb2JhbChjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHNvZnREZXN0cm95T25lKGNvbnRleHQpIHtcbiAgICBjb250ZXh0Lmdsb2JhbC5kZWxldGVkID0gdHJ1ZTsgLy8gdGhlIGNoaWxkcmVuIGFyZSB0cnVseSBkZXN0cm95ZWQgYnV0IHRoZSBtYWluIHN1cHBvcnQgd2lsbCBiZSBzd2FwcGVkXG4gICAgc21hcnRSZW1vdmVLaWRzKGNvbnRleHQsIFtdKTtcbn1cbiIsImltcG9ydCB7IG1vdmVQcm92aWRlcnMgfSBmcm9tICcuL3VwZGF0ZS91cGRhdGVFeGlzdGluZ1RhZ0NvbXBvbmVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzb2Z0RGVzdHJveVN1cHBvcnQgfSBmcm9tICcuL3NvZnREZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdPbmx5IH0gZnJvbSAnLi9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTGlrZVRhZ3MgfSBmcm9tICcuLi90YWcvaXNMaWtlVGFncy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG4vKiogVE9ETzogVGhpcyBzZWVtcyB0byBzdXBwb3J0IGJvdGggbmV3IGFuZCB1cGRhdGVzIGFuZCBzaG91bGQgYmUgc2VwYXJhdGVkPyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcldpdGhTdXBwb3J0KG5ld1N1cHBvcnQsIGxhc3RTdXBwb3J0LCAvLyBwcmV2aW91cyAoZ2xvYmFsLm5ld2VzdClcbnN1YmplY3QpIHtcbiAgICBjb25zdCByZVN1cHBvcnQgPSByZW5kZXJUYWdPbmx5KG5ld1N1cHBvcnQsIGxhc3RTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBjb25zdCBpc0xpa2VUYWcgPSAhbGFzdFN1cHBvcnQgfHwgaXNMaWtlVGFncyhsYXN0U3VwcG9ydCwgcmVTdXBwb3J0KTtcbiAgICBpZiAoIWlzTGlrZVRhZykge1xuICAgICAgICBtb3ZlUHJvdmlkZXJzKGxhc3RTdXBwb3J0LCByZVN1cHBvcnQpO1xuICAgICAgICBzb2Z0RGVzdHJveVN1cHBvcnQobGFzdFN1cHBvcnQpO1xuICAgICAgICBjb25zdCBnbG9iYWwgPSByZVN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgIGdsb2JhbC5vbGRlc3QgPSByZVN1cHBvcnQ7XG4gICAgICAgIGdsb2JhbC5uZXdlc3QgPSByZVN1cHBvcnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxhc3RTdXBwb3J0KSB7XG4gICAgICAgIGNvbnN0IHRhZyA9IGxhc3RTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgICAgIGlmICh0YWcgJiYgc3ViamVjdC5yZW5kZXJDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RUZW1wbGF0ZXIgPSBsYXN0U3VwcG9ydD8udGVtcGxhdGVyO1xuICAgICAgICAgICAgY29uc3QgbGFzdFRhZyA9IGxhc3RUZW1wbGF0ZXI/LnRhZztcbiAgICAgICAgICAgIGNoZWNrVGFnU29mdERlc3Ryb3kodGFnLCBsYXN0U3VwcG9ydCwgbGFzdFRhZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVTdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG5ld1N1cHBvcnQub3duZXJTdXBwb3J0OyAvLyB8fCBsYXN0T3duZXJTdXBwb3J0KSBhcyBBbnlTdXBwb3J0XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3VwcG9ydDogcmVTdXBwb3J0LFxuICAgICAgICB3YXNMaWtlVGFnczogaXNMaWtlVGFnXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrVGFnU29mdERlc3Ryb3kodGFnLCBsYXN0U3VwcG9ydCwgbGFzdFRhZykge1xuICAgIGlmICh0YWcudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLmRvbSkge1xuICAgICAgICBjb25zdCBsYXN0RG9tID0gbGFzdFRhZz8uZG9tO1xuICAgICAgICBjb25zdCBuZXdEb20gPSB0YWcuZG9tO1xuICAgICAgICBpZiAobGFzdERvbSAhPT0gbmV3RG9tKSB7XG4gICAgICAgICAgICBzb2Z0RGVzdHJveVN1cHBvcnQobGFzdFN1cHBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxhc3RUYWcpIHtcbiAgICAgICAgY29uc3QgbGFzdFN0cmluZ3MgPSBsYXN0VGFnLnN0cmluZ3M7XG4gICAgICAgIGlmIChsYXN0U3RyaW5ncykge1xuICAgICAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gbGFzdFN0cmluZ3M/Lmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IHRhZy5zdHJpbmdzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNvZnREZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyByZW5kZXJXaXRoU3VwcG9ydCB9IGZyb20gJy4vcmVuZGVyV2l0aFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZyB9IGZyb20gJy4vdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdXBkYXRlU3VwcG9ydEJ5IH0gZnJvbSAnLi91cGRhdGUvdXBkYXRlU3VwcG9ydEJ5LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJFeGlzdGluZ1N1cHBvcnQobGFzdFN1cHBvcnQsIC8vIHNob3VsZCBiZSBnbG9iYWwubmV3ZXN0XG5uZXdTdXBwb3J0LCAvLyBuZXcgdG8gYmUgcmVuZGVyZWRcbnN1YmplY3QpIHtcbiAgICBjb25zdCByZXN1bHQgPSByZW5kZXJXaXRoU3VwcG9ydChuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCwgc3ViamVjdCk7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgLy8gbGFzdFN1cHBvcnQgIT09IG5ld1N1cHBvcnQgJiYgXG4gICAgaWYgKHJlc3VsdC53YXNMaWtlVGFncykge1xuICAgICAgICB1cGRhdGVTdXBwb3J0QnkoZ2xvYmFsLm9sZGVzdCwgcmVzdWx0LnN1cHBvcnQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LnN1cHBvcnQ7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzVGFnKG5ld1N1cHBvcnQsIHN1YmplY3QpO1xufVxuIiwiaW1wb3J0IHsgZGVlcEVxdWFsIH0gZnJvbSAnLi4vZGVlcEZ1bmN0aW9ucy5qcyc7XG5pbXBvcnQgeyByZW5kZXJFeGlzdGluZ1N1cHBvcnQgfSBmcm9tICcuL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCwgaW1tdXRhYmxlUHJvcE1hdGNoIH0gZnJvbSAnLi4vdGFnL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRXaXRoU3RhdGUgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFN1cHBvcnRXaXRoU3RhdGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2hhbGxvd1Byb3BNYXRjaCB9IGZyb20gJy4uL3RhZy9zaGFsbG93UHJvcE1hdGNoLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0lubGluZUh0bWwodGVtcGxhdGVyKSB7XG4gICAgcmV0dXJuIFZhbHVlVHlwZXMudGVtcGxhdGVyID09PSB0ZW1wbGF0ZXIudGFnSnNUeXBlO1xufVxuLyoqIE1haW4gZnVuY3Rpb24gdXNlZCBieSBhbGwgb3RoZXIgY2FsbGVycyB0byByZW5kZXIvdXBkYXRlIGRpc3BsYXkgb2YgYSB0YWcgY29tcG9uZW50ICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3VwcG9ydChzdXBwb3J0KSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBnbG9iYWwgPSBzdWJqZWN0Lmdsb2JhbDtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBzdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCBpbmxpbmVIdG1sID0gaXNJbmxpbmVIdG1sKHRlbXBsYXRlcik7XG4gICAgaWYgKHN1YmplY3QubG9ja2VkKSB7XG4gICAgICAgIGdsb2JhbC5ibG9ja2VkLnB1c2goc3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBzdXBwb3J0O1xuICAgIH1cbiAgICAvLyBpcyBpdCBqdXN0IGEgdmFuaWxsYSB0YWcsIG5vdCBjb21wb25lbnQ/XG4gICAgaWYgKGlubGluZUh0bWwpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVuZGVySW5saW5lSHRtbChzdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3ViamVjdC5sb2NrZWQgPSB0cnVlO1xuICAgIGlmIChnbG9iYWwuYmxvY2tlZC5sZW5ndGgpIHtcbiAgICAgICAgc3VwcG9ydCA9IGdsb2JhbC5ibG9ja2VkLnBvcCgpO1xuICAgICAgICBnbG9iYWwuYmxvY2tlZCA9IFtdO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSByZW5kZXJFeGlzdGluZ1N1cHBvcnQoZ2xvYmFsLm5ld2VzdCwgc3VwcG9ydCwgc3ViamVjdCk7XG4gICAgZGVsZXRlIHN1YmplY3QubG9ja2VkO1xuICAgIHJldHVybiB0YWc7XG59XG4vKiogUmVuZGVycyB0aGUgb3duZXIgb2YgdGhlIGlubGluZSBIVE1MIGV2ZW4gaWYgdGhlIG93bmVyIGl0c2VsZiBpcyBpbmxpbmUgaHRtbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcklubGluZUh0bWwoc3VwcG9ydCkge1xuICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IGdldFN1cHBvcnRXaXRoU3RhdGUoc3VwcG9ydCk7XG4gICAgY29uc3Qgb3duR2xvYmFsID0gb3duZXJTdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IG5ld2VzdCA9IG93bkdsb2JhbC5uZXdlc3Q7XG4gICAgLy8gRnVuY3Rpb24gYmVsb3cgbWF5IGNhbGwgcmVuZGVySW5saW5lSHRtbCBhZ2FpbiBpZiBvd25lciBpcyBqdXN0IGlubGluZSBIVE1MXG4gICAgY29uc3QgcmVzdWx0ID0gcmVuZGVyU3VwcG9ydChuZXdlc3QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZW5kZXJVcCh0ZW1wbGF0ZXIsIHN1cHBvcnQpIHtcbiAgICBjb25zdCBzZWxmUHJvcENoYW5nZSA9IGhhc1Byb3BzVG9Pd25lckNoYW5nZWQodGVtcGxhdGVyLCBzdXBwb3J0KTtcbiAgICAvLyByZW5kZXIgb3duZXIgdXAgZmlyc3QgYW5kIHRoYXQgd2lsbCBjYXVzZSBtZSB0byByZS1yZW5kZXJcbiAgICBpZiAoc2VsZlByb3BDaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKiBVc2VkIHdoZW4gY3Jhd2xpbmcgdXAgdGhlIGNoYWluIG9mIGNoaWxkLXRvLXBhcmVudCB0YWdzLiBTZWUgaGFzU3VwcG9ydENoYW5nZWQgZm9yIHRoZSBkb3dud2FyZCBkaXJlY3Rpb24gKi9cbmZ1bmN0aW9uIGhhc1Byb3BzVG9Pd25lckNoYW5nZWQodGVtcGxhdGVyLCBzdXBwb3J0KSB7XG4gICAgY29uc3Qgbm93UHJvcHMgPSB0ZW1wbGF0ZXIucHJvcHM7XG4gICAgY29uc3QgcHJvcHNDb25maWcgPSBzdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIGNvbnN0IGxhdGVzdFByb3BzID0gcHJvcHNDb25maWcubGF0ZXN0O1xuICAgIGNvbnN0IGNvbXBhcmVMZW4gPSBoYXNQcm9wTGVuZ3Roc0NoYW5nZWQobm93UHJvcHMsIGxhdGVzdFByb3BzKTtcbiAgICBpZiAoY29tcGFyZUxlbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3dpdGNoICh0ZW1wbGF0ZXIucHJvcFdhdGNoKSB7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuSU1NVVRBQkxFOlxuICAgICAgICAgICAgcmV0dXJuIGltbXV0YWJsZVByb3BNYXRjaChub3dQcm9wcywgbGF0ZXN0UHJvcHMpO1xuICAgICAgICBjYXNlIFByb3BXYXRjaGVzLlNIQUxMT1c6XG4gICAgICAgICAgICByZXR1cm4gc2hhbGxvd1Byb3BNYXRjaChub3dQcm9wcywgbGF0ZXN0UHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gIWRlZXBFcXVhbChub3dQcm9wcywgbGF0ZXN0UHJvcHMsIGRlZXBDb21wYXJlRGVwdGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BMZW5ndGhzQ2hhbmdlZChub3dQcm9wcywgbGF0ZXN0UHJvcHMpIHtcbiAgICBjb25zdCBub3dMZW4gPSBub3dQcm9wcy5sZW5ndGg7XG4gICAgY29uc3QgbGF0ZXN0TGVuID0gbGF0ZXN0UHJvcHMubGVuZ3RoO1xuICAgIHJldHVybiBub3dMZW4gIT09IGxhdGVzdExlbjtcbn1cbiIsImltcG9ydCB7IGlzVGFnQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL2lzSW5zdGFuY2UuanNcIjtcbmltcG9ydCB7IHByb3ZpZGVyc0NoYW5nZUNoZWNrIH0gZnJvbSBcIi4uLy4uL3N0YXRlL3Byb3ZpZGVyc0NoYW5nZUNoZWNrLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBjaGVja1JlbmRlclVwLCBpc0lubGluZUh0bWwgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tIFwiLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVwVGFncyhzdXBwb3J0LCBzdXBwb3J0cyA9IFtdKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICAvLyBjb25zdCBnbG9iYWwgPSBzdXBwb3J0LmNvbnRleHQuZ2xvYmFsIGFzIFN1cHBvcnRUYWdHbG9iYWxcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBzdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCBpbmxpbmVIdG1sID0gaXNJbmxpbmVIdG1sKHRlbXBsYXRlcik7XG4gICAgY29uc3Qgb3duZXJTdXBwb3J0ID0gc3VwcG9ydC5vd25lclN1cHBvcnQ7XG4gICAgaWYgKHN1YmplY3QubG9ja2VkKSB7XG4gICAgICAgIHN1cHBvcnRzLnB1c2goc3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBzdXBwb3J0cztcbiAgICB9XG4gICAgLy8gaXMgaXQganVzdCBhIHZhbmlsbGEgdGFnLCBub3QgY29tcG9uZW50P1xuICAgIGlmIChpbmxpbmVIdG1sKSB7XG4gICAgICAgIHJldHVybiBnZXRVcFRhZ3Mob3duZXJTdXBwb3J0LCBzdXBwb3J0cyk7XG4gICAgfVxuICAgIGNvbnN0IG5ld1N1cHBvcnQgPSBzdXBwb3J0OyAvLyBnbG9iYWwubmV3ZXN0IGFzIEFueVN1cHBvcnRcbiAgICBjb25zdCBpc0NvbXBvbmVudCA9IGlzVGFnQ29tcG9uZW50KG5ld1N1cHBvcnQudGVtcGxhdGVyKTtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSBzdXBwb3J0LnRlbXBsYXRlci50YWdKc1R5cGU7XG4gICAgY29uc3QgY2FuQ29udGludWVVcCA9IG93bmVyU3VwcG9ydCAmJiB0YWdKc1R5cGUgIT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXI7XG4gICAgY29uc3QgY29udGludWVVcCA9IGNhbkNvbnRpbnVlVXAgJiYgKCFpc0NvbXBvbmVudCB8fCBjaGVja1JlbmRlclVwKG5ld1N1cHBvcnQudGVtcGxhdGVyLCBuZXdTdXBwb3J0KSk7XG4gICAgY29uc3QgcHJvU3VwcG9ydHMgPSBwcm92aWRlcnNDaGFuZ2VDaGVjayhuZXdTdXBwb3J0KTtcbiAgICBzdXBwb3J0cy5wdXNoKC4uLnByb1N1cHBvcnRzKTtcbiAgICBpZiAoY29udGludWVVcCkge1xuICAgICAgICBnZXRVcFRhZ3Mob3duZXJTdXBwb3J0LCBzdXBwb3J0cyk7XG4gICAgICAgIGlmIChpc0NvbXBvbmVudCkge1xuICAgICAgICAgICAgc3VwcG9ydHMucHVzaChuZXdTdXBwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwcG9ydHM7IC8vIG1vcmUgdG8ga2VlcCBnb2luZyB1cCwgZG8gbm90IHB1c2ggdGhpcyBjaGlsZCBmb3IgcmV2aWV3XG4gICAgfVxuICAgIHN1cHBvcnRzLnB1c2gobmV3U3VwcG9ydCk7XG4gICAgcmV0dXJuIHN1cHBvcnRzO1xufVxuIiwiaW1wb3J0IHsgcGFpbnQsIHBhaW50aW5nIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclN1cHBvcnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVGFnVXBkYXRlQXJyYXkoc3VwcG9ydHMpIHtcbiAgICArK3BhaW50aW5nLmxvY2tzO1xuICAgIHN1cHBvcnRzLmZvckVhY2gobWFwVGFnVXBkYXRlKTtcbiAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgIHBhaW50KCk7XG59XG5mdW5jdGlvbiBtYXBUYWdVcGRhdGUoc3VwcG9ydCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgcmV0dXJuOyAvLyB3aGlsZSByZW5kZXJpbmcgYSBwYXJlbnQsIGEgY2hpbGQgbWF5IGhhdmUgYmVlbiBkZWxldGVkIChwaW5ib3dsKVxuICAgIH1cbiAgICByZW5kZXJTdXBwb3J0KGdsb2JhbC5uZXdlc3QpO1xufVxuIiwiLyoqXG4gKiBTeW5jIHR3byBzdXBwb3J0c1xuICogQHBhcmFtIHN1cHBvcnQgRlJPTVxuICogQHBhcmFtIG5ld2VzdFN1cHBvcnQgIE9OVE9cbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzeW5jU3VwcG9ydHMoc3VwcG9ydCwgLy8gZnJvbVxubmV3ZXN0U3VwcG9ydCkge1xuICAgIHJldHVybiBzeW5jU3RhdGVzQXJyYXkoc3VwcG9ydC5zdGF0ZXMsIG5ld2VzdFN1cHBvcnQuc3RhdGVzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzeW5jU3RhdGVzQXJyYXkoZnJvbSwgb250bykge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBmcm9tLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBnZXR0ZXIgPSBmcm9tW2luZGV4XTtcbiAgICAgICAgY29uc3Qgc2V0dGVyID0gb250b1tpbmRleF07XG4gICAgICAgIHN5bmNTdGF0ZXMoZ2V0dGVyLCBzZXR0ZXIpO1xuICAgIH1cbn1cbmxldCBnb3Q7XG5mdW5jdGlvbiBzeW5jRnJvbVN0YXRlKC4uLngpIHtcbiAgICBnb3QgPSB4O1xuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24gc3luY09udG9TdGF0ZSgpIHtcbiAgICByZXR1cm4gZ290O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN5bmNTdGF0ZXMoZnJvbSwgb250bykge1xuICAgIGZyb20oc3luY0Zyb21TdGF0ZSwgMSk7XG4gICAgb250byhzeW5jT250b1N0YXRlLCAyKTtcbn1cbi8qKiBAZGVwcmVjYXRlZCBmYXZvciB1c2luZyBzeW5jU3VwcG9ydHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBvbGRTeW5jU3RhdGVzKHN0YXRlRnJvbSwgc3RhdGVUbywgaW50b1N0YXRlcywgc3RhdGVzRnJvbSkge1xuICAgIGZvciAobGV0IGluZGV4ID0gc3RhdGVGcm9tLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhdGVGcm9tVGFyZ2V0ID0gc3RhdGVGcm9tW2luZGV4XTtcbiAgICAgICAgY29uc3QgZnJvbVZhbHVlID0gc3RhdGVGcm9tVGFyZ2V0LmdldCgpOyAvLyBnZXQgd2l0aG91dCBzZXR0aW5nXG4gICAgICAgIC8vIGNvbnN0IGZyb21WYWx1ZSA9IGdldFN0YXRlVmFsdWUoc3RhdGVGcm9tVGFyZ2V0KSAvLyBnZXQgd2l0aG91dCBzZXR0aW5nXG4gICAgICAgIGNvbnN0IHN0YXRlVG9UYXJnZXQgPSBzdGF0ZVRvW2luZGV4XTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBzdGF0ZVRvVGFyZ2V0LmNhbGxiYWNrOyAvLyBpcyBpdCBhIGxldCBzdGF0ZT9cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soZnJvbVZhbHVlKTsgLy8gc2V0IHRoZSB2YWx1ZVxuICAgIH1cbiAgICAvLyBsb29wIHN0YXRlc0Zyb20gdG8gc2V0IG9uIHRoZSBvbGRTdGF0ZXNcbiAgICBmb3IgKGxldCBpbmRleCA9IHN0YXRlc0Zyb20ubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBvbGRWYWx1ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgZ2V0SW5kZXggPSAwO1xuICAgICAgICBjb25zdCBzdGF0ZUZyb21UYXJnZXQgPSBzdGF0ZXNGcm9tW2luZGV4XTtcbiAgICAgICAgLy8gdHJpZ2dlciBnZXR0aW5nIGFsbCBvbGQgdmFsdWVzXG4gICAgICAgIHN0YXRlRnJvbVRhcmdldChvbGRHZXRDYWxsYmFjayk7XG4gICAgICAgIC8vIHRyaWdnZXIgc2V0dGluZyB1cGRhdGVkIHZhbHVlc1xuICAgICAgICBpbnRvU3RhdGVzW2luZGV4XShuZXdTZXRDYWxsYmFjayk7XG4gICAgfVxufVxubGV0IGdldEluZGV4ID0gMDtcbmNvbnN0IG9sZFZhbHVlcyA9IFtdO1xuZnVuY3Rpb24gb2xkR2V0Q2FsbGJhY2soLi4uYXJncykge1xuICAgIG9sZFZhbHVlcy5wdXNoKGFyZ3MpO1xuICAgIHJldHVybiBhcmdzO1xufVxuLy8gVGhpcyBpcyB0aGUgXCJnZXRcIiBhcmd1bWVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIGFuZCBhbGwgYXJndW1lbnRzIGFyZSBpZ25vcmVkXG5mdW5jdGlvbiBuZXdTZXRDYWxsYmFjayguLi5fKSB7XG4gICAgcmV0dXJuIG9sZFZhbHVlc1tnZXRJbmRleCsrXTtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbi8qKiBGaWxlIGxhcmdlbHkgcmVzcG9uc2libGUgZm9yIHJlYWN0aW5nIHRvIGVsZW1lbnQgZXZlbnRzLCBzdWNoIGFzIG9uY2xpY2sgKi9cbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uLy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgZ2V0VXBUYWdzIH0gZnJvbSAnLi9nZXRVcFRhZ3MuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyVGFnVXBkYXRlQXJyYXkgfSBmcm9tICcuL3JlbmRlclRhZ0FycmF5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHN5bmNTdXBwb3J0cyB9IGZyb20gJy4uLy4uL3N0YXRlL3N5bmNTdGF0ZXMuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVG9SZXNvbHZlUHJvbWlzZShjYWxsYmFja1Jlc3VsdCwgbGFzdCwgZ2xvYmFsLCBtb2RlLCB7IHJlc29sdmVQcm9taXNlLCByZXNvbHZlVmFsdWUgfSkge1xuICAgIGNvbnN0IGlzUHJvbSA9IGlzUHJvbWlzZShjYWxsYmFja1Jlc3VsdCk7XG4gICAgaWYgKGlzUHJvbSkge1xuICAgICAgICBjb25zdCBzdWJqZWN0ID0gbGFzdC5jb250ZXh0O1xuICAgICAgICBzdWJqZWN0LmxvY2tlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1Jlc3VsdC50aGVuKHRoZW5SZXNvbHZlQnkobGFzdCwgcmVzb2x2ZVByb21pc2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVWYWx1ZShjYWxsYmFja1Jlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhlblJlc29sdmVCeShsYXN0LCByZXNvbHZlUHJvbWlzZSkge1xuICAgIHJldHVybiAoeCkgPT4ge1xuICAgICAgICBjb25zdCBnbG9iYWwgPSBsYXN0LmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICAvL2NsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgICAgICBpZiAoZ2xvYmFsLmRlbGV0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSh4KTsgLy8gdGFnIHdhcyBkZWxldGVkIGR1cmluZyBldmVudCBwcm9jZXNzaW5nXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViamVjdCA9IGxhc3QuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2xvYmFsMSA9IGxhc3QuY29udGV4dC5nbG9iYWw7XG4gICAgICAgIGRlbGV0ZSBzdWJqZWN0LmxvY2tlZDtcbiAgICAgICAgLy8gVGhlIHByb21pc2UgbWF5IGhhdmUgdGhlbiBjaGFuZ2VkIG9sZCB2YXJpYWJsZXMsIGxldHMgdXBkYXRlIGZvcndhcmRcbiAgICAgICAgc3luY1N1cHBvcnRzKGxhc3QsIGdsb2JhbDEubmV3ZXN0KTtcbiAgICAgICAgY29uc3QgdGFnc1RvVXBkYXRlID0gZ2V0VXBUYWdzKGxhc3QpO1xuICAgICAgICByZW5kZXJUYWdVcGRhdGVBcnJheSh0YWdzVG9VcGRhdGUpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZVByb21pc2UoeCk7XG4gICAgfTtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbi8qKiBGaWxlIGxhcmdlbHkgcmVzcG9uc2libGUgZm9yIHJlYWN0aW5nIHRvIGVsZW1lbnQgZXZlbnRzLCBzdWNoIGFzIG9uY2xpY2sgKi9cbmltcG9ydCB7IGdldFVwVGFncyB9IGZyb20gJy4vZ2V0VXBUYWdzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclRhZ1VwZGF0ZUFycmF5IH0gZnJvbSAnLi9yZW5kZXJUYWdBcnJheS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0V2l0aFN0YXRlIH0gZnJvbSAnLi9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNoZWNrVG9SZXNvbHZlUHJvbWlzZSB9IGZyb20gJy4vY2hlY2tUb1Jlc29sdmVQcm9taXNlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBiaW5kU3ViamVjdENhbGxiYWNrKHZhbHVlLCBzdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAvLyBNQUlOIEVWRU5UIENBTExCQUNLIFBST0NFU1NPUlxuICAgIGNvbnN0IHN1YmplY3RGdW5jdGlvbiA9IGZ1bmN0aW9uIGNhbGxiYWNrUmVwbGFjZW1lbnQoZWxlbWVudCwgYXJncykge1xuICAgICAgICBpZiAoZ2xvYmFsLmRlbGV0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zdCBuZXdlc3QgPSBnbG9iYWwubmV3ZXN0IGFzIEFueVN1cHBvcnQgLy8gfHwgc3ViamVjdEZ1bmN0aW9uLnN1cHBvcnRcbiAgICAgICAgcmV0dXJuIHJ1blRhZ0NhbGxiYWNrKHN1YmplY3RGdW5jdGlvbi50YWdGdW5jdGlvbiwgc3ViamVjdEZ1bmN0aW9uLnN1cHBvcnQsIC8vIG5ld2VzdFxuICAgICAgICAvLyBzdWJqZWN0RnVuY3Rpb24uc3RhdGVzLCAvLyBuZXdlc3RcbiAgICAgICAgZWxlbWVudCwgYXJncyk7XG4gICAgfTtcbiAgICAvLyBsaW5rIGJhY2sgdG8gb3JpZ2luYWwuIE1vc3RseSB1c2VkIGZvciA8ZGl2IG9uaW5pdCBvbmRlc3Ryb3k+IGFuaW1hdGlvbnNcbiAgICBzdWJqZWN0RnVuY3Rpb24udGFnRnVuY3Rpb24gPSB2YWx1ZTtcbiAgICAvLyBjb25zdCBjb21wb25lbnQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpXG4gICAgc3ViamVjdEZ1bmN0aW9uLnN1cHBvcnQgPSBzdXBwb3J0O1xuICAgIC8vIHN1YmplY3RGdW5jdGlvbi5vdGhlclN1cHBvcnQgPSBjb21wb25lbnRcbiAgICAvL2NvbnN0IHN0YXRlcyA9IGNvbXBvbmVudC5zdGF0ZXMgLy8gPy5bMF1cbiAgICAvLyBzdWJqZWN0RnVuY3Rpb24uc3RhdGVzID0gc3RhdGVzXG4gICAgcmV0dXJuIHN1YmplY3RGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBydW5UYWdDYWxsYmFjayh2YWx1ZSwgc3VwcG9ydCwgXG4vLyBzdGF0ZXM6IFN0YXRlc1NldHRlcltdLFxuYmluZFRvLCBhcmdzKSB7XG4gICAgLy8gZ2V0IGFjdHVhbCBjb21wb25lbnQgb3duZXIgbm90IGp1c3QgdGhlIGh0bWxgYCBzdXBwb3J0XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0U3VwcG9ydFdpdGhTdGF0ZShzdXBwb3J0KTtcbiAgICBjb25zdCBzdWJqZWN0ID0gY29tcG9uZW50LmNvbnRleHQ7XG4gICAgLy8gY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWwgYXMgU3VwcG9ydFRhZ0dsb2JhbCAvLyB0YWcuc3ViamVjdC5nbG9iYWwgYXMgVGFnR2xvYmFsXG4gICAgc3ViamVjdC5sb2NrZWQgPSB0cnVlOyAvLyBwcmV2ZW50IGFub3RoZXIgcmVuZGVyIGZyb20gcmUtcmVuZGVyaW5nIHRoaXMgdGFnXG4gICAgLy8gc3luYyB0aGUgbmV3IHN0YXRlcyB0byB0aGUgb2xkIGJlZm9yZSB0aGUgb2xkIGRvZXMgYW55IHByb2Nlc3NpbmdcbiAgICAvLyBzeW5jU3RhdGVzQXJyYXkoY29tcG9uZW50LnN1YmplY3QuZ2xvYmFsLm5ld2VzdC5zdGF0ZXMsIHN0YXRlcylcbiAgICAvLyBBQ1RVQUwgQ0FMTEJBQ0sgVE8gT1JJR0lOQUwgRlVOQ1RJT05cbiAgICBjb25zdCBjYWxsYmFja1Jlc3VsdCA9IHZhbHVlLmFwcGx5KGJpbmRUbywgYXJncyk7XG4gICAgLy8gc3luYyB0aGUgb2xkIHN0YXRlcyB0byB0aGUgbmV3XG4gICAgLy8gc3luY1N0YXRlc0FycmF5KHN0YXRlcywgY29tcG9uZW50LnN1YmplY3QuZ2xvYmFsLm5ld2VzdC5zdGF0ZXMpXG4gICAgZGVsZXRlIHN1YmplY3QubG9ja2VkO1xuICAgIGNvbnN0IHJlc3VsdCA9IGFmdGVyVGFnQ2FsbGJhY2soY2FsbGJhY2tSZXN1bHQsIGNvbXBvbmVudCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZnRlclRhZ0NhbGxiYWNrKGNhbGxiYWNrUmVzdWx0LCBldmVudEhhbmRsZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gZXZlbnRIYW5kbGVyU3VwcG9ydC5jb250ZXh0Lmdsb2JhbDsgLy8gdGFnLnN1YmplY3QuZ2xvYmFsIGFzIFN1cHBvcnRUYWdHbG9iYWxcbiAgICByZXR1cm4gcmVuZGVyQ2FsbGJhY2tTdXBwb3J0KGV2ZW50SGFuZGxlclN1cHBvcnQsIGNhbGxiYWNrUmVzdWx0LCBnbG9iYWwpO1xufVxuZnVuY3Rpb24gcmVuZGVyQ2FsbGJhY2tTdXBwb3J0KGxhc3QsIGNhbGxiYWNrUmVzdWx0LCBnbG9iYWwpIHtcbiAgICBjb25zdCB0YWdzVG9VcGRhdGUgPSBnZXRVcFRhZ3MobGFzdCk7XG4gICAgcmVuZGVyVGFnVXBkYXRlQXJyYXkodGFnc1RvVXBkYXRlKTtcbiAgICByZXR1cm4gY2hlY2tUb1Jlc29sdmVQcm9taXNlKGNhbGxiYWNrUmVzdWx0LCBsYXN0LCBnbG9iYWwsICdiaW5kJywgeyByZXNvbHZlUHJvbWlzZSwgcmVzb2x2ZVZhbHVlIH0pO1xufVxuY29uc3Qgbm9EYXRhID0gJ25vLWRhdGEtZXZlcic7XG5jb25zdCBwcm9taXNlTm9EYXRhID0gJ3Byb21pc2Utbm8tZGF0YS1ldmVyJztcbmZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKCkge1xuICAgIHJldHVybiBwcm9taXNlTm9EYXRhO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKCkge1xuICAgIHJldHVybiBub0RhdGE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIoc3VwcG9ydCwgZXZlbnROYW1lLCBlbGVtZW50LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGVsbSA9IHN1cHBvcnQuYXBwRWxlbWVudDtcbiAgICAvLyBjYXN0IGV2ZW50cyB0aGF0IGRvIG5vdCBidWJibGUgdXAgaW50byBvbmVzIHRoYXQgZG9cbiAgICBpZiAoZXZlbnROYW1lID09PSAnYmx1cicpIHtcbiAgICAgICAgZXZlbnROYW1lID0gJ2ZvY3Vzb3V0JztcbiAgICB9XG4gICAgY29uc3QgcmVwbGFjZUV2ZW50TmFtZSA9ICdfJyArIGV2ZW50TmFtZTtcbiAgICAvLyBjb25zdCByZXBsYWNlRXZlbnROYW1lID0gZXZlbnROYW1lXG4gICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICBjb25zdCBldmVudFJlZyA9IGdsb2JhbC5ldmVudHM7XG4gICAgaWYgKCFldmVudFJlZ1tldmVudE5hbWVdKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gZnVuY3Rpb24gZXZlbnRDYWxsYmFjayhldmVudCkge1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxTdG9wUHJvcGFnYXRpb24gPSBldmVudC5zdG9wUHJvcGFnYXRpb247XG4gICAgICAgICAgICBidWJibGVFdmVudChldmVudCwgcmVwbGFjZUV2ZW50TmFtZSwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgfTtcbiAgICAgICAgZXZlbnRSZWdbZXZlbnROYW1lXSA9IGxpc3RlbmVyO1xuICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgLy8gYXR0YWNoIHRvIGVsZW1lbnQgYnV0IG5vdCBhcyBcIl9jbGlja1wiIGFuZCBcIl9rZXl1cFwiXG4gICAgO1xuICAgIGVsZW1lbnRbcmVwbGFjZUV2ZW50TmFtZV0gPSBjYWxsYmFjaztcbiAgICBlbGVtZW50W2V2ZW50TmFtZV0gPSBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIGJ1YmJsZUV2ZW50KGV2ZW50LCByZXBsYWNlRXZlbnROYW1lLCB0YXJnZXQpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IHRhcmdldFtyZXBsYWNlRXZlbnROYW1lXTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBldmVudC5vcmlnaW5hbFN0b3BQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCBzdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgIGJ1YmJsZUV2ZW50KGV2ZW50LCByZXBsYWNlRXZlbnROYW1lLCBwYXJlbnROb2RlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBhZGRTdXBwb3J0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4vYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbihlbGVtZW50LCBuZXdBdHRyVmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lKSB7XG4gICAgY29uc3QgZnVuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZ1bi50YWdGdW5jdGlvbihlbGVtZW50LCBhcmdzKTtcbiAgICB9O1xuICAgIC8vIGFjY2VzcyB0byBvcmlnaW5hbCBmdW5jdGlvblxuICAgIGZ1bi50YWdGdW5jdGlvbiA9IG5ld0F0dHJWYWx1ZTtcbiAgICBmdW4uc3VwcG9ydCA9IHN1cHBvcnQ7XG4gICAgYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIoc3VwcG9ydC5hcHBTdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCwgLy8gc3VwcG9ydC5hcHBTdXBwb3J0LmFwcEVsZW1lbnQgYXMgRWxlbWVudCxcbiAgICBmdW4pO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzTm9EaXNwbGF5VmFsdWUoYXR0clZhbHVlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCA9PT0gYXR0clZhbHVlIHx8IG51bGwgPT09IGF0dHJWYWx1ZSB8fCBmYWxzZSA9PT0gYXR0clZhbHVlO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gJy4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcGFpbnRDb250ZW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NOYW1lT25seUF0dHJWYWx1ZSB9IGZyb20gJy4uLy4uL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNOb0Rpc3BsYXlWYWx1ZSB9IGZyb20gJy4uLy4uL3JlbmRlci9hdHRyaWJ1dGVzL2lzTm9EaXNwbGF5VmFsdWUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU5hbWVPbmx5QXR0clZhbHVlKHZhbHVlcywgYXR0clZhbHVlLCBsYXN0VmFsdWUsIGVsZW1lbnQsIG93bmVyU3VwcG9ydCwgaG93VG9TZXQsIGNvbnRleHQpIHtcbiAgICAvLyBjaGVjayB0byByZW1vdmUgcHJldmlvdXMgYXR0cmlidXRlKHMpXG4gICAgaWYgKGxhc3RWYWx1ZSkge1xuICAgICAgICBpZiAoaXNOb0Rpc3BsYXlWYWx1ZShhdHRyVmFsdWUpKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsYXN0VmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKGxhc3RWYWx1ZSkgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBpc09iU3RpbGwgPSB0eXBlb2YgKGF0dHJWYWx1ZSkgPT09IEJhc2ljVHlwZXMub2JqZWN0O1xuICAgICAgICAgICAgaWYgKGlzT2JTdGlsbCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBsYXN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYoKGF0dHJWYWx1ZSBhcyBhbnkpW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lIGluIGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW3JlbW92ZUF0dHJpYnV0ZSwgW2VsZW1lbnQsIG5hbWVdXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGxhc3RWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbcmVtb3ZlQXR0cmlidXRlLCBbZWxlbWVudCwgbmFtZV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc05hbWVPbmx5QXR0clZhbHVlKHZhbHVlcywgYXR0clZhbHVlLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG59XG4iLCJpbXBvcnQgeyBwcm9jZXNzQXR0cmlidXRlRW1pdCB9IGZyb20gJy4vcHJvY2Vzc0F0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB1cGRhdGVOYW1lT25seUF0dHJWYWx1ZSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvdXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG4vKiogQ3VycmVudGx5IHVuaXZlcnNhbGx5IHVzZWQgZm9yIGFsbCBhdHRyaWJ1dGVzICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0KHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBhdHRyQ29udGV4dEl0ZW0gPSBjb250ZXh0SXRlbTtcbiAgICBjb25zdCB0YWdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0YWdWYWx1ZT8udGFnSnNUeXBlKSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gY29udGV4dEl0ZW0udmFsdWU7XG4gICAgICAgIC8vIGl0cyBub3cgYSB0YWdWYXIgdmFsdWUgYnV0IGJlZm9yZSB3YXMgbm90XG4gICAgICAgIGlmICghb2xkVmFsdWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICAgICAgdGFnVmFsdWUuaXNBdHRyID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHRJdGVtKTtcbiAgICAgICAgICAgIHRhZ1ZhbHVlLnByb2Nlc3NJbml0QXR0cmlidXRlKGF0dHJDb250ZXh0SXRlbS5hdHRyTmFtZSwgdmFsdWUsIGF0dHJDb250ZXh0SXRlbS5lbGVtZW50LCB0YWdWYWx1ZSwgYXR0ckNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgICAgIGF0dHJDb250ZXh0SXRlbS50YWdKc1ZhciA9IHRhZ1ZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoZWNrUmVzdWx0ID0gb2xkVmFsdWUuY2hlY2tWYWx1ZUNoYW5nZSh0YWdWYWx1ZSwgY29udGV4dEl0ZW0sIC8vIHRvZG86IHdlaXJkIHR5cGluZyBzaG91bGQganVzdCBiZSBDb250ZXh0SXRlbVxuICAgICAgICBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhdHRyQ29udGV4dEl0ZW0uaXNOYW1lT25seSkge1xuICAgICAgICB1cGRhdGVOYW1lT25seUF0dHJWYWx1ZSh2YWx1ZXMsIHZhbHVlLCBhdHRyQ29udGV4dEl0ZW0udmFsdWUsIGF0dHJDb250ZXh0SXRlbS5lbGVtZW50LCAvLyBnbG9iYWwuZWxlbWVudCBhcyBFbGVtZW50LFxuICAgICAgICBvd25lclN1cHBvcnQsIGF0dHJDb250ZXh0SXRlbS5ob3dUb1NldCwgW10pO1xuICAgICAgICBhdHRyQ29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50ID0gYXR0ckNvbnRleHRJdGVtLmVsZW1lbnQ7XG4gICAgcHJvY2Vzc0F0dHJpYnV0ZUVtaXQodmFsdWUsIGF0dHJDb250ZXh0SXRlbS5hdHRyTmFtZSwgYXR0ckNvbnRleHRJdGVtLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGF0dHJDb250ZXh0SXRlbS5ob3dUb1NldCwgYXR0ckNvbnRleHRJdGVtLmlzU3BlY2lhbCk7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm47XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBzcGVjaWFsQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9zcGVjaWFsQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGhvd1RvU2V0Rmlyc3RJbnB1dFZhbHVlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmluZFN1YmplY3RDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYmluZFN1YmplY3RDYWxsYmFjay5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzLCBWYWx1ZVR5cGVzLCBlbXB0eSB9IGZyb20gJy4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcGFpbnRDb250ZW50IH0gZnJvbSAnLi4vcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05vbkR5bmFtaWNBdHRyIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGFkZE9uZUNvbnRleHQgfSBmcm9tICcuLi9hZGRPbmVDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcHJvY2Vzc0F0dHJpYnV0ZUNhbGxiYWNrLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2lzU3BlY2lhbEF0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQgfSBmcm9tICcuL3Byb2Nlc3NVcGRhdGVBdHRyQ29udGV4dC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVEeW5hbWljQXJyYXlBdHRyaWJ1dGUsIGNyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUgfSBmcm9tICcuL2NyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0VGFnSnNWYXIgfSBmcm9tICcuL2dldFRhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTm9EaXNwbGF5VmFsdWUgfSBmcm9tICcuL2lzTm9EaXNwbGF5VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0V2l0aFN0YXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbi8qKiBNQUlOIEZVTkNUSU9OLiBTZXRzIGF0dHJpYnV0ZSB2YWx1ZSwgc3Vic2NyaWJlcyB0byB2YWx1ZSB1cGRhdGVzICAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGUodmFsdWVzLCAvLyBhbGwgdGhlIHZhcmlhYmxlcyBpbnNpZGUgaHRtbGBgXG5hdHRyTmFtZSwgZWxlbWVudCwgc3VwcG9ydCwgaG93VG9TZXQsIC8vICA9IGhvd1RvU2V0SW5wdXRWYWx1ZVxuY29udGV4dHMsIGlzU3BlY2lhbCwgdmFsdWUpIHtcbiAgICBjb25zdCB2YXJJbmRleCA9IGdldFRhZ0pzVmFyKGF0dHJOYW1lKTtcbiAgICBjb25zdCBpc05hbWVWYXIgPSB2YXJJbmRleCA+PSAwO1xuICAgIGNvbnN0IHZhbHVlSW5WYWx1ZXMgPSB2YWx1ZXNbdmFySW5kZXhdO1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gdmFsdWVJblZhbHVlcztcbiAgICBpZiAodGFnSnNWYXI/LnRhZ0pzVHlwZSkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlKHZhbHVlLCBjb250ZXh0cywgdGFnSnNWYXIsIHZhckluZGV4LCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCwgaXNOYW1lVmFyKTtcbiAgICB9XG4gICAgaWYgKGlzTmFtZVZhcikge1xuICAgICAgICBjb25zdCBjb250ZXh0SXRlbSA9IGFkZE9uZUNvbnRleHQodmFsdWVJblZhbHVlcywgY29udGV4dHMsIHRydWUsIHN1cHBvcnQuY29udGV4dCk7XG4gICAgICAgIGNvbnRleHRJdGVtLnZhbHVlSW5kZXggPSB2YXJJbmRleDtcbiAgICAgICAgY29udGV4dEl0ZW0udmFsdWVJbmRleFNldEJ5ID0gJ3Byb2Nlc3NBdHRyaWJ1dGUnO1xuICAgICAgICBjb250ZXh0SXRlbS5pc0F0dHIgPSB0cnVlO1xuICAgICAgICBjb250ZXh0SXRlbS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgY29udGV4dEl0ZW0uaXNOYW1lT25seSA9IHRydWU7XG4gICAgICAgIGNvbnRleHRJdGVtLmhvd1RvU2V0ID0gaG93VG9TZXQ7XG4gICAgICAgIGNvbnN0IHRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSBwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQ7XG4gICAgICAgIC8vIHNpbmdsZS9zdGFuZCBhbG9uZSBhdHRyaWJ1dGVzXG4gICAgICAgIHByb2Nlc3NOYW1lT25seUF0dHJWYWx1ZSh2YWx1ZXMsIHZhbHVlSW5WYWx1ZXMsIGVsZW1lbnQsIHN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0cyk7XG4gICAgICAgIHJldHVybiBjb250ZXh0SXRlbTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEeW5hbWljQXJyYXlBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBjb250ZXh0cywgaG93VG9TZXQsIHZhbHVlcywgc3VwcG9ydC5jb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVWYXIgPSBnZXRUYWdKc1Zhcih2YWx1ZSk7XG4gICAgaWYgKHZhbHVlVmFyID49IDApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbdmFsdWVWYXJdO1xuICAgICAgICByZXR1cm4gY3JlYXRlRHluYW1pY0F0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGNvbnRleHRzLCBob3dUb1NldCwgc3VwcG9ydCwgaXNTcGVjaWFsLCB2YWx1ZVZhcik7XG4gICAgfVxuICAgIC8vIHNpbXBsZSBuYW1lL3ZhbHVlIGF0dHJpYnV0ZVxuICAgIHByb2Nlc3NOb25EeW5hbWljQXR0cihhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGhvd1RvU2V0LCBpc1NwZWNpYWwpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlKHZhbHVlLCBjb250ZXh0cywgdGFnSnNWYXIsIHZhckluZGV4LCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCwgaXNOYW1lVmFyKSB7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBhZGRPbmVDb250ZXh0KHZhbHVlLCBjb250ZXh0cywgdHJ1ZSwgc3VwcG9ydC5jb250ZXh0KTtcbiAgICBjb250ZXh0SXRlbS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICBjb250ZXh0SXRlbS52YWx1ZUluZGV4ID0gdmFySW5kZXg7XG4gICAgY29udGV4dEl0ZW0udmFsdWVJbmRleFNldEJ5ID0gJ3Byb2Nlc3NUYWdKc1ZhckF0dHJpYnV0ZSc7XG4gICAgY29udGV4dEl0ZW0uaXNBdHRyID0gdHJ1ZTtcbiAgICBjb250ZXh0SXRlbS5pc05hbWVPbmx5ID0gaXNOYW1lVmFyO1xuICAgIGNvbnRleHRJdGVtLnN0YXRlT3duZXIgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpO1xuICAgIGNvbnRleHRJdGVtLnN1cHBvcnRPd25lciA9IHN1cHBvcnQ7XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NJbml0QXR0cmlidXRlKGF0dHJOYW1lLCB0YWdKc1ZhciwgZWxlbWVudCwgdGFnSnNWYXIsIGNvbnRleHRJdGVtLCBzdXBwb3J0KTtcbiAgICByZW1vdmVDb250ZXh0SW5DeWNsZSgpO1xuICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSB0YWdKc1ZhcjtcbiAgICByZXR1cm4gY29udGV4dEl0ZW07XG59XG4vLyBzaW5nbGUvc3RhbmQgYWxvbmUgYXR0cmlidXRlc1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NOYW1lT25seUF0dHJWYWx1ZSh2YWx1ZXMsIGF0dHJWYWx1ZSwgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBob3dUb1NldCwgY29udGV4dCkge1xuICAgIGlmIChpc05vRGlzcGxheVZhbHVlKGF0dHJWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBwcm9jZXNzIGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzICR7e2NsYXNzOidzb21ldGhpbmcsIGNoZWNrZWQ6dHJ1ZX19XG4gICAgaWYgKHR5cGVvZiBhdHRyVmFsdWUgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU3BlY2lhbCA9IGlzU3BlY2lhbEF0dHIobmFtZSk7IC8vIG9ubHkgb2JqZWN0IHZhcmlhYmxlcyBhcmUgZXZhbHVhdGVkIGZvciBpcyBzcGVjaWFsIGF0dHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXR0clZhbHVlW25hbWVdO1xuICAgICAgICAgICAgY29uc3QgaG93VG9TZXQgPSBob3dUb1NldEZpcnN0SW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIHByb2Nlc3NBdHRyaWJ1dGUodmFsdWVzLCBuYW1lLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0LCBpc1NwZWNpYWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJlZ3VsYXIgYXR0cmlidXRlc1xuICAgIGlmIChhdHRyVmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjsgLy8gaWdub3JlLCBkbyBub3Qgc2V0IGF0IHRoaXMgdGltZVxuICAgIH1cbiAgICBob3dUb1NldChlbGVtZW50LCBhdHRyVmFsdWUsIGVtcHR5KTtcbn1cbi8qKiBPbmx5IHVzZWQgZHVyaW5nIHVwZGF0ZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlRW1pdChuZXdBdHRyVmFsdWUsIGF0dHJOYW1lLCBzdWJqZWN0LCBlbGVtZW50LCBzdXBwb3J0LCBob3dUb1NldCwgaXNTcGVjaWFsKSB7XG4gICAgLy8gc2hvdWxkIHRoZSBmdW5jdGlvbiBiZSB3cmFwcGVkIHNvIGV2ZXJ5IHRpbWUgaXRzIGNhbGxlZCB3ZSByZS1yZW5kZXI/XG4gICAgaWYgKGlzRnVuY3Rpb24obmV3QXR0clZhbHVlKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tGdW4oc3VwcG9ydCwgbmV3QXR0clZhbHVlLCBlbGVtZW50LCBhdHRyTmFtZSwgaXNTcGVjaWFsLCBob3dUb1NldCwgc3ViamVjdCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzQXR0cmlidXRlU3ViamVjdFZhbHVlKG5ld0F0dHJWYWx1ZSwgZWxlbWVudCwgYXR0ck5hbWUsIGlzU3BlY2lhbCwgaG93VG9TZXQsIHN1cHBvcnQpO1xufVxuLyoqIGZpZ3VyZSBvdXQgd2hhdCB0eXBlIG9mIGF0dHJpYnV0ZSB3ZSBhcmUgZGVhbGluZyB3aXRoIGFuZC9vciBmZWVkIHZhbHVlIGludG8gaGFuZGxlciB0byBmaWd1cmUgaG93IHRvIHVwZGF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVTdWJqZWN0VmFsdWUobmV3QXR0clZhbHVlLCBlbGVtZW50LCBhdHRyTmFtZSwgc3BlY2lhbCwgaG93VG9TZXQsIHN1cHBvcnQpIHtcbiAgICAvLyBwcm9jZXNzIGFkZGluZy9yZW1vdmluZyBzdHlsZS4gY2xhc3MuIChmYWxzZSBtZWFucyByZW1vdmUpXG4gICAgaWYgKHNwZWNpYWwgIT09IGZhbHNlKSB7XG4gICAgICAgIHNwZWNpYWxBdHRyaWJ1dGUoYXR0ck5hbWUsIG5ld0F0dHJWYWx1ZSwgZWxlbWVudCwgc3BlY2lhbCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChuZXdBdHRyVmFsdWUpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtwYWludENvbnRlbnRQdXNoLCBbZWxlbWVudCwgYXR0ck5hbWVdXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKG5ld0F0dHJWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbihlbGVtZW50LCBuZXdBdHRyVmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lKTtcbiAgICB9XG4gICAgLy8gdmFsdWUgaXMgMFxuICAgIGhvd1RvU2V0KGVsZW1lbnQsIGF0dHJOYW1lLCBuZXdBdHRyVmFsdWUpO1xufVxuZnVuY3Rpb24gY2FsbGJhY2tGdW4oc3VwcG9ydCwgbmV3QXR0clZhbHVlLCBlbGVtZW50LCBhdHRyTmFtZSwgaXNTcGVjaWFsLCBob3dUb1NldCwgc3ViamVjdCkge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzdXBwb3J0LnRlbXBsYXRlci53cmFwcGVyO1xuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IHdyYXBwZXI/LnRhZ0pzVHlwZSB8fCB3cmFwcGVyPy5vcmlnaW5hbD8udGFnSnNUeXBlO1xuICAgIGNvbnN0IG9uZVJlbmRlciA9IHRhZ0pzVHlwZSA9PT0gVmFsdWVUeXBlcy5yZW5kZXJPbmNlO1xuICAgIGlmICghb25lUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzVGFnQ2FsbGJhY2tGdW4oc3ViamVjdCwgbmV3QXR0clZhbHVlLCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzQXR0cmlidXRlU3ViamVjdFZhbHVlKG5ld0F0dHJWYWx1ZSwgZWxlbWVudCwgYXR0ck5hbWUsIGlzU3BlY2lhbCwgaG93VG9TZXQsIHN1cHBvcnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWdDYWxsYmFja0Z1bihzdWJqZWN0LCBuZXdBdHRyVmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lLCBlbGVtZW50KSB7XG4gICAgLy8gdGFnIGhhcyBzdGF0ZSBhbmQgd2lsbCBuZWVkIGFsbCBmdW5jdGlvbnMgd3JhcHBlZCB0byBjYXVzZSByZS1yZW5kZXJzXG4gICAgbmV3QXR0clZhbHVlID0gYmluZFN1YmplY3RDYWxsYmFjayhuZXdBdHRyVmFsdWUsIHN1cHBvcnQpO1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gc3ViamVjdC50YWdKc1ZhcjsgLy8gPSB2YWx1ZVRvVGFnSnNWYXIobmV3QXR0clZhbHVlKVxuICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSBwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQ7XG4gICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbihlbGVtZW50LCBuZXdBdHRyVmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lKTtcbn1cbmZ1bmN0aW9uIHBhaW50Q29udGVudFB1c2goZWxlbWVudCwgYXR0ck5hbWUpIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBwcm9jZXNzRHluYW1pY05hbWVWYWx1ZUF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcHJvY2Vzc05hbWVWYWx1ZUF0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQgfSBmcm9tICcuL3Byb2Nlc3NVcGRhdGVBdHRyQ29udGV4dC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRUYWdWYXJJbmRleCB9IGZyb20gJy4vZ2V0VGFnVmFySW5kZXguZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL3ZhbHVlVG9UYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG4vKiogU3VwcG9ydCBzdHJpbmcgYXR0cmlidXRlcyB3aXRoIGR5bmFtaWNzIEV4OiA8ZGl2IHN0eWxlPVwiY29sb3I6YmxhY2s7Zm9udC1zaXplOjoke2ZvbnRTaXplfTtcIj48L2Rpdj4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEeW5hbWljQXJyYXlBdHRyaWJ1dGUoYXR0ck5hbWUsIGFycmF5LCBlbGVtZW50LCBjb250ZXh0cywgaG93VG9TZXQsIC8vICA9IGhvd1RvU2V0SW5wdXRWYWx1ZVxudmFsdWVzLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAvLyBsb29wIGFsbCB0byBhdHRhY2ggY29udGV4dCBhbmQgcHJvY2Vzc29yc1xuICAgIGFycmF5LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlVmFyID0gZ2V0VGFnVmFySW5kZXgodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWVWYXIgPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgbXlJbmRleCA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHRhZ0pzVmFyID0gdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICAgICAgICAgIGlzQXR0cjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyTmFtZSxcbiAgICAgICAgICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFnSnNWYXIsXG4gICAgICAgICAgICAgICAgdmFsdWVJbmRleDogY29udGV4dHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHZhbHVlSW5kZXhTZXRCeTogJ2NyZWF0ZUR5bmFtaWNBcnJheUF0dHJpYnV0ZScsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBjb250ZXh0SXRlbS5oYW5kbGVyID1cbiAgICAgICAgICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSBmdW5jdGlvbiBhcnJheUl0ZW1IYW5kbGVyKHZhbHVlLCBuZXdTdXBwb3J0LCBjb250ZXh0SXRlbSwgbmV3VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgc2V0QnkobmV3VmFsdWVzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwdXNoVmFsdWUgPSB2YWx1ZXNbbXlJbmRleF07XG4gICAgICAgICAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHB1c2hWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHRzLnB1c2goY29udGV4dEl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gc2V0QnkodmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGNvbmNhdFZhbHVlID0gYnVpbGROZXdWYWx1ZUZyb21BcnJheShhcnJheSwgdmFsdWVzLCBzdGFydEluZGV4KS5qb2luKCcnKTtcbiAgICAgICAgaG93VG9TZXQoZWxlbWVudCwgYXR0ck5hbWUsIGNvbmNhdFZhbHVlKTtcbiAgICB9XG4gICAgc2V0QnkodmFsdWVzKTtcbiAgICByZXR1cm4gY29udGV4dHM7XG59XG5mdW5jdGlvbiBidWlsZE5ld1ZhbHVlRnJvbUFycmF5KGFycmF5LCB2YWx1ZXMsIHN0YXJ0SW5kZXgpIHtcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKChhbGwsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlVmFyID0gZ2V0VGFnVmFySW5kZXgodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWVWYXIgPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgbXlJbmRleCA9IHN0YXJ0SW5kZXgrKztcbiAgICAgICAgICAgIGNvbnN0IHB1c2hWYWx1ZSA9IHZhbHVlc1tteUluZGV4XTtcbiAgICAgICAgICAgIGFsbC5wdXNoKHB1c2hWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gYWxsO1xuICAgICAgICB9XG4gICAgICAgIGFsbC5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCBbXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHluYW1pY0F0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGNvbnRleHQsIGhvd1RvU2V0LCAvLyAgPSBob3dUb1NldElucHV0VmFsdWVcbnN1cHBvcnQsIGlzU3BlY2lhbCwgdmFySW5kZXgpIHtcbiAgICBjb25zdCB0YWdKc1ZhciA9IHZhbHVlVG9UYWdKc1Zhcih2YWx1ZSk7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSB7XG4gICAgICAgIGlzQXR0cjogdHJ1ZSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgYXR0ck5hbWUsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgdGFnSnNWYXIsXG4gICAgICAgIHZhbHVlSW5kZXg6IHZhckluZGV4LFxuICAgICAgICB2YWx1ZUluZGV4U2V0Qnk6ICdjcmVhdGVEeW5hbWljQXR0cmlidXRlJyxcbiAgICAgICAgcGFyZW50Q29udGV4dDogc3VwcG9ydC5jb250ZXh0LFxuICAgIH07XG4gICAgY29udGV4dC5wdXNoKGNvbnRleHRJdGVtKTtcbiAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlID0gcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0O1xuICAgIHByb2Nlc3NEeW5hbWljTmFtZVZhbHVlQXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgY29udGV4dEl0ZW0sIGVsZW1lbnQsIGhvd1RvU2V0LCBzdXBwb3J0LCBpc1NwZWNpYWwpO1xuICAgIGNvbnRleHRJdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtO1xufVxuIiwiaW1wb3J0IHsgc3BlY2lhbEF0dHJpYnV0ZSB9IGZyb20gJy4vc3BlY2lhbEF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnQ2FsbGJhY2tGdW4gfSBmcm9tICcuLi8uLi9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRHluYW1pY05hbWVWYWx1ZUF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGNvbnRleHRJdGVtLCBlbGVtZW50LCBob3dUb1NldCwgc3VwcG9ydCwgaXNTcGVjaWFsKSB7XG4gICAgY29udGV4dEl0ZW0uZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgY29udGV4dEl0ZW0uaG93VG9TZXQgPSBob3dUb1NldDtcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NUYWdDYWxsYmFja0Z1bihjb250ZXh0SXRlbSwgdmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lLCBlbGVtZW50KTtcbiAgICB9XG4gICAgY29udGV4dEl0ZW0uYXR0ck5hbWUgPSBhdHRyTmFtZTtcbiAgICBjb250ZXh0SXRlbS5pc1NwZWNpYWwgPSBpc1NwZWNpYWw7XG4gICAgaWYgKHZhbHVlPy50YWdKc1R5cGUpIHtcbiAgICAgICAgcHJvY2Vzc1RhZ0pzQXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgY29udGV4dEl0ZW0sIHN1cHBvcnQsIGVsZW1lbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzTm9uRHluYW1pY0F0dHIoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBob3dUb1NldCwgaXNTcGVjaWFsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGFnSnNBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGVsZW1lbnQpIHtcbiAgICB2YWx1ZS5wcm9jZXNzSW5pdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgZWxlbWVudCwgdmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc05vbkR5bmFtaWNBdHRyKGF0dHJOYW1lLCB2YWx1ZSwgZWxlbWVudCwgaG93VG9TZXQsIGlzU3BlY2lhbCkge1xuICAgIGlmIChpc1NwZWNpYWwpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpYWxBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBpc1NwZWNpYWwpO1xuICAgIH1cbiAgICBob3dUb1NldChlbGVtZW50LCBhdHRyTmFtZSwgdmFsdWUpO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWdKc1ZhcihhdHRyUGFydCkge1xuICAgIGlmIChpc09iamVjdChhdHRyUGFydCkgJiYgJ3RhZ0pzVmFyJyBpbiBhdHRyUGFydClcbiAgICAgICAgcmV0dXJuIGF0dHJQYXJ0LnRhZ0pzVmFyO1xuICAgIHJldHVybiAtMTtcbiAgICAvLyByZXR1cm4gKGF0dHJQYXJ0IGFzIFRhZ1ZhcklkTnVtKT8udGFnSnNWYXIgfHwgLTFcbn1cbiIsImltcG9ydCB7IHZhbHVlVG9UYWdKc1ZhciB9IGZyb20gXCIuL3ZhbHVlVG9UYWdKc1Zhci5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGVsZW1lbnQsIG5hbWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IGNvbnRleHRJdGVtLnZhbHVlO1xuICAgIC8vIGNvbnN0IG9sZFRhZzIgPSB2YWx1ZVRvVGFnSnNWYXIob2xkVmFsdWUpIC8vIGNvbnRleHRJdGVtLnRhZ0pzVmFyIGFzIFRhZ0pzVmFyXG4gICAgY29uc3Qgb2xkVGFnID0gY29udGV4dEl0ZW0udGFnSnNWYXI7IC8vIGNvbnRleHRJdGVtLnRhZ0pzVmFyIGFzIFRhZ0pzVmFyXG4gICAgY29uc3QgdGFnVmFsdWUgPSB2YWx1ZTtcbiAgICBjb25zdCBjaGVja1Jlc3VsdCA9IG9sZFRhZy5jaGVja1ZhbHVlQ2hhbmdlKHRhZ1ZhbHVlLCBjb250ZXh0SXRlbSwgLy8gdG9kbzogd2VpcmQgdHlwaW5nIHNob3VsZCBqdXN0IGJlIENvbnRleHRJdGVtXG4gICAgb3duZXJTdXBwb3J0KTtcbiAgICBpZiAoY2hlY2tSZXN1bHQgPj0gMCkge1xuICAgICAgICBvbGRUYWcuZGVsZXRlKGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgY29uc3QgbmV3VGFnVmFyID0gdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKTtcbiAgICAgICAgbmV3VGFnVmFyLmlzQXR0ciA9IHRydWU7XG4gICAgICAgIG5ld1RhZ1Zhci5wcm9jZXNzSW5pdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgZWxlbWVudCwgbmV3VGFnVmFyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBuZXdUYWdWYXI7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaG93VG9TZXRGaXJzdElucHV0VmFsdWUgfSBmcm9tIFwiLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tIFwiLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9pc1NwZWNpYWxBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NOb25EeW5hbWljQXR0ciB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NOYW1lVmFsdWVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGNoZWNrU2ltcGxlVmFsdWVDaGFuZ2UsIGRlbGV0ZVNpbXBsZUF0dHJpYnV0ZSB9IGZyb20gXCIuL2dldFNpbXBsZVRhZ1Zhci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZSB9IGZyb20gXCIuL3Byb2Nlc3NBdHRyaWJ1dGVVcGRhdGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU2ltcGxlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5lbGVtZW50LCB0YWdKc1ZhciwgY29udGV4dEl0ZW0pIHtcbiAgICAvLyBjb25zdCB0YWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyXG4gICAgdGFnSnNWYXIuZGVsZXRlID0gZGVsZXRlU2ltcGxlQXR0cmlidXRlO1xuICAgIHRhZ0pzVmFyLmNoZWNrVmFsdWVDaGFuZ2UgPSBjaGVja1NpbXBsZVZhbHVlQ2hhbmdlO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gdGFnSnNWYXI7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSA9ICh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkgPT4ge1xuICAgICAgICBwcm9jZXNzQXR0cmlidXRlVXBkYXRlKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBlbGVtZW50LCBuYW1lKTtcbiAgICB9O1xuICAgIGNvbnN0IGlzU3BlY2lhbCA9IGlzU3BlY2lhbEF0dHIobmFtZSk7XG4gICAgcHJvY2Vzc05vbkR5bmFtaWNBdHRyKG5hbWUsIHZhbHVlLCBlbGVtZW50LCBob3dUb1NldEZpcnN0SW5wdXRWYWx1ZSwgaXNTcGVjaWFsKTtcbn1cbiIsImltcG9ydCB7IGNhc3RUZXh0VmFsdWUgfSBmcm9tICcuLi9jYXN0VGV4dFZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50QmVmb3JlVGV4dCwgcGFpbnRDb21tYW5kcywgYWRkUGFpbnRSZW1vdmVyIH0gZnJvbSBcIi4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1VwZGF0ZVJlZ3VsYXJWYWx1ZSB9IGZyb20gXCIuLi90YWcvdXBkYXRlL3Byb2Nlc3NSZWd1bGFyVmFsdWUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlciB9IGZyb20gXCIuLi90YWcvdXBkYXRlL3RhZ1ZhbHVlVXBkYXRlSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1NpbXBsZUF0dHJpYnV0ZSB9IGZyb20gXCIuL3Byb2Nlc3NTaW1wbGVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVTaW1wbGVBdHRyaWJ1dGUoY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudDtcbiAgICBjb25zdCBuYW1lID0gY29udGV4dEl0ZW0uYXR0ck5hbWU7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2ltcGxlVGFnVmFyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnSnNUeXBlOiAnc2ltcGxlJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBwcm9jZXNzU2ltcGxlQXR0cmlidXRlLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1NpbXBsZVZhbHVlSW5pdCxcbiAgICAgICAgZGVsZXRlOiBkZWxldGVTaW1wbGVWYWx1ZSxcbiAgICAgICAgLy8gVE9ETzogZ2V0IGRvd24gdG8gb25seSBvbmVcbiAgICAgICAgY2hlY2tWYWx1ZUNoYW5nZTogY2hlY2tVcGRhdGVEZWxldGVTaW1wbGVWYWx1ZUNoYW5nZSxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogdGFnVmFsdWVVcGRhdGVIYW5kbGVyLFxuICAgIH07XG59XG5mdW5jdGlvbiBwcm9jZXNzU2ltcGxlVmFsdWVJbml0KHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgLy8gdmFsdWUgPSB2YWx1ZS52YWx1ZVxuICAgIGNvbnN0IGNhc3RlZFZhbHVlID0gY2FzdFRleHRWYWx1ZSh2YWx1ZSk7XG4gICAgaW5zZXJ0QmVmb3JlID0gY29udGV4dEl0ZW0ucGxhY2Vob2xkZXI7XG4gICAgLy8gYWx3YXlzIGluc2VydEJlZm9yZSBmb3IgY29udGVudFxuICAgIGNvbnN0IHBhaW50ID0gY29udGV4dEl0ZW0ucGFpbnQgPSBbcGFpbnRCZWZvcmVUZXh0LCBbaW5zZXJ0QmVmb3JlLCBjYXN0ZWRWYWx1ZSwgZnVuY3Rpb24gYWZ0ZXJTaW1wbGVWYWx1ZSh4KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dEl0ZW0uc2ltcGxlVmFsdWVFbG0gPSB4O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb250ZXh0SXRlbS5wYWludDtcbiAgICAgICAgICAgIH1dXTtcbiAgICBwYWludENvbW1hbmRzLnB1c2gocGFpbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVNpbXBsZVZhbHVlKGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgZWxtID0gY29udGV4dEl0ZW0uc2ltcGxlVmFsdWVFbG07XG4gICAgZGVsZXRlIGNvbnRleHRJdGVtLnNpbXBsZVZhbHVlRWxtO1xuICAgIGlmICghZWxtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaXNzdWUgc3RhcnRzIGhlcmUgbm8gZWxtJyk7XG4gICAgfVxuICAgIGFkZFBhaW50UmVtb3ZlcihlbG0sICdkZWxldGVTaW1wbGVWYWx1ZScpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU2ltcGxlVmFsdWVDaGFuZ2UobmV3VmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgaXNCYWRWYWx1ZSA9IG5ld1ZhbHVlID09PSBudWxsIHx8IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNSZWd1bGFyVXBkYXRlID0gaXNCYWRWYWx1ZSB8fCAhKHR5cGVvZiAobmV3VmFsdWUpID09PSBCYXNpY1R5cGVzLm9iamVjdCk7XG4gICAgaWYgKGlzUmVndWxhclVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gLTE7IC8vIG5vIG5lZWQgdG8gZGVzdHJveSwganVzdCB1cGRhdGUgZGlzcGxheVxuICAgIH1cbiAgICByZXR1cm4gNjsgLy8gJ2NoYW5nZWQtc2ltcGxlLXZhbHVlJ1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXBkYXRlRGVsZXRlU2ltcGxlVmFsdWVDaGFuZ2UobmV3VmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgaXNCYWRWYWx1ZSA9IG5ld1ZhbHVlID09PSBudWxsIHx8IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNSZWd1bGFyVXBkYXRlID0gaXNCYWRWYWx1ZSB8fCAhKHR5cGVvZiAobmV3VmFsdWUpID09PSBCYXNpY1R5cGVzLm9iamVjdCk7XG4gICAgaWYgKGlzUmVndWxhclVwZGF0ZSkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgY2F1c2UgYWxsIG90aGVyIHZhbHVlcyB0byByZW5kZXJcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZVJlZ3VsYXJWYWx1ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pO1xuICAgICAgICByZXR1cm4gLTE7IC8vIG5vIG5lZWQgdG8gZGVzdHJveSwganVzdCB1cGRhdGUgZGlzcGxheVxuICAgIH1cbiAgICBkZWxldGVTaW1wbGVWYWx1ZShjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIDY7IC8vICdjaGFuZ2VkLXNpbXBsZS12YWx1ZSdcbn1cbiIsImltcG9ydCB7IGNhc3RUZXh0VmFsdWUgfSBmcm9tICcuLi8uLi9jYXN0VGV4dFZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50QmVmb3JlVGV4dCwgcGFpbnRDb21tYW5kcywgcGFpbnRDb250ZW50LCBzZXRDb250ZW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFNpbXBsZVRhZ1ZhciB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy9nZXRTaW1wbGVUYWdWYXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVSZWd1bGFyVmFsdWUodmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgY2FzdGVkVmFsdWUgPSBjYXN0VGV4dFZhbHVlKHZhbHVlKTtcbiAgICBpZiAoY29udGV4dEl0ZW0ucGFpbnQpIHtcbiAgICAgICAgLy8gaXRzIGFscmVhZHkgcGFpbnRpbmcsIGp1c3QgcHJvdmlkZSBuZXcgdGV4dCBwYWludFtmdW5jdGlvbiwgW2VsZW1lbnQsIHRleHRdXVxuICAgICAgICBjb250ZXh0SXRlbS5wYWludFsxXVsxXSA9IGNhc3RlZFZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9sZENsb25lID0gY29udGV4dEl0ZW0uc2ltcGxlVmFsdWVFbG07IC8vIHBsYWNlaG9sZGVyXG4gICAgcGFpbnRDb250ZW50LnB1c2goW3NldENvbnRlbnQsIFtjYXN0ZWRWYWx1ZSwgb2xkQ2xvbmVdXSk7XG59XG4vKiogVXNlZCBkdXJpbmcgdXBkYXRlcyB0aGF0IHdlcmUgYW5vdGhlciB2YWx1ZS90YWcgZmlyc3QgYnV0IG5vdyBzaW1wbGUgc3RyaW5nICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc05vd1JlZ3VsYXJWYWx1ZSh2YWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBnZXRTaW1wbGVUYWdWYXIodmFsdWUpO1xuICAgIGNvbnN0IGJlZm9yZSA9IGNvbnRleHRJdGVtLnBsYWNlaG9sZGVyO1xuICAgIGNvbnN0IGNhc3RlZFZhbHVlID0gY2FzdFRleHRWYWx1ZSh2YWx1ZSk7XG4gICAgY29uc3QgcGFpbnQgPSBjb250ZXh0SXRlbS5wYWludCA9IFtwYWludEJlZm9yZVRleHQsIFtiZWZvcmUsIGNhc3RlZFZhbHVlLCBmdW5jdGlvbiBjbGVhblJlZ3VsYXJWYWx1ZSh4KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dEl0ZW0uc2ltcGxlVmFsdWVFbG0gPSB4O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb250ZXh0SXRlbS5wYWludDtcbiAgICAgICAgICAgIH1dXTtcbiAgICBwYWludENvbW1hbmRzLnB1c2gocGFpbnQpO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY29tcGFyZUFycmF5SXRlbXMgfSBmcm9tICcuL2NvbXBhcmVBcnJheUl0ZW1zLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSB9IGZyb20gJy4vY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGFnQXJyYXkoY29udGV4dEl0ZW0sIHZhbHVlLCAvLyBhcnJ5IG9mIFRhZyBjbGFzc2VzXG5vd25lclN1cHBvcnQsIGFwcGVuZFRvKSB7XG4gICAgY29uc3Qgbm9MYXN0ID0gY29udGV4dEl0ZW0ubGFzdEFycmF5ID09PSB1bmRlZmluZWQ7XG4gICAgaWYgKG5vTGFzdCkge1xuICAgICAgICBjb250ZXh0SXRlbS5sYXN0QXJyYXkgPSBbXTtcbiAgICB9XG4gICAgY29uc3QgbGFzdEFycmF5ID0gY29udGV4dEl0ZW0ubGFzdEFycmF5O1xuICAgIGxldCBydW50aW1lSW5zZXJ0QmVmb3JlID0gY29udGV4dEl0ZW0ucGxhY2Vob2xkZXI7XG4gICAgbGV0IHJlbW92ZWQgPSAwO1xuICAgIC8qKiDwn5eR77iPIHJlbW92ZSBwcmV2aW91cyBpdGVtcyBmaXJzdCAqL1xuICAgIGNvbnN0IGZpbHRlcmVkTGFzdCA9IFtdO1xuICAgIC8vIGlmIG5vdCBmaXJzdCB0aW1lLCB0aGVuIGNoZWNrIGZvciBkZWxldGVzXG4gICAgaWYgKCFub0xhc3QpIHtcbiAgICAgICAgLy8gb24gZWFjaCBsb29wIGNoZWNrIHRoZSBuZXcgbGVuZ3RoXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXN0QXJyYXkubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gbGFzdEFycmF5W2luZGV4XTtcbiAgICAgICAgICAgIC8vIPCfkYHvuI8gQ09NUEFSRSAmIFJFTU9WRVxuICAgICAgICAgICAgY29uc3QgbmV3UmVtb3ZlZCA9IGNvbXBhcmVBcnJheUl0ZW1zKHZhbHVlLCBpbmRleCwgbGFzdEFycmF5LCByZW1vdmVkKTtcbiAgICAgICAgICAgIGlmIChuZXdSZW1vdmVkID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRMYXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkbyB0aGUgc2FtZSBudW1iZXIgYWdhaW4gYmVjYXVzZSBpdCB3YXMgYSBtaWQgZGVsZXRlXG4gICAgICAgICAgICBpZiAobmV3UmVtb3ZlZCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggLSAxO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlZCA9IHJlbW92ZWQgKyBuZXdSZW1vdmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHRJdGVtLmxhc3RBcnJheSA9IGZpbHRlcmVkTGFzdDtcbiAgICB9XG4gICAgY29uc3QgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3QgbmV3U3ViamVjdCA9IHJldmlld0FycmF5SXRlbSh2YWx1ZSwgaW5kZXgsIGNvbnRleHRJdGVtLmxhc3RBcnJheSwgb3duZXJTdXBwb3J0LCBydW50aW1lSW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG4gICAgICAgIHJ1bnRpbWVJbnNlcnRCZWZvcmUgPSBuZXdTdWJqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJldmlld0FycmF5SXRlbShhcnJheSwgaW5kZXgsIGxhc3RBcnJheSwgb3duZXJTdXBwb3J0LCBydW50aW1lSW5zZXJ0QmVmb3JlLCAvLyB1c2VkIGR1cmluZyB1cGRhdGVzXG5hcHBlbmRUbykge1xuICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtpbmRleF07XG4gICAgY29uc3QgcHJldmlvdXMgPSBsYXN0QXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gcmV2aWV3UHJldmlvdXNBcnJheUl0ZW0oaXRlbSwgcHJldmlvdXMsIGxhc3RBcnJheSwgb3duZXJTdXBwb3J0LCBpbmRleCwgcnVudGltZUluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbShpdGVtLCBvd25lclN1cHBvcnQsIGxhc3RBcnJheSwgcnVudGltZUluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgIC8vIEFkZGVkIHRvIHByZXZpb3VzIGFycmF5XG4gICAgbGFzdEFycmF5LnB1c2goY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbmZ1bmN0aW9uIHJldmlld1ByZXZpb3VzQXJyYXlJdGVtKHZhbHVlLCBpdGVtU3ViamVjdCwgbGFzdEFycmF5LCBvd25lclN1cHBvcnQsIGluZGV4LCBydW50aW1lSW5zZXJ0QmVmb3JlLCAvLyB1c2VkIGR1cmluZyB1cGRhdGVzXG5hcHBlbmRUbykge1xuICAgIGNvbnN0IGNvdWxkQmVTYW1lID0gbGFzdEFycmF5Lmxlbmd0aCA+IGluZGV4O1xuICAgIGlmIChjb3VsZEJlU2FtZSkge1xuICAgICAgICB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIodmFsdWUsIGl0ZW1TdWJqZWN0LCBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm4gaXRlbVN1YmplY3Q7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHRJdGVtID0gY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtKHZhbHVlLCBvd25lclN1cHBvcnQsIGxhc3RBcnJheSwgcnVudGltZUluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgIC8vIEFkZGVkIHRvIHByZXZpb3VzIGFycmF5XG4gICAgbGFzdEFycmF5LnB1c2goY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGNoZWNrQXJyYXlWYWx1ZUNoYW5nZSwgZGVzdHJveUFycmF5Q29udGV4dEl0ZW0gfSBmcm9tICcuLi90YWcvY2hlY2tEZXN0cm95UHJldmlvdXMuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0FycmF5IH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzVGFnQXJyYXkuanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFycmF5VGFnVmFyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnSnNUeXBlOiAnYXJyYXknLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NBcnJheUluaXQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NBcnJheVVwZGF0ZXMsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrQXJyYXlWYWx1ZUNoYW5nZSxcbiAgICAgICAgZGVsZXRlOiBkZXN0cm95QXJyYXlDb250ZXh0SXRlbSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc0FycmF5VXBkYXRlcyhuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHRhZ1VwZGF0ZVJlc3BvbnNlID0gdGFnVmFsdWVVcGRhdGVIYW5kbGVyKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICBpZiAodGFnVXBkYXRlUmVzcG9uc2UgPT09IC0xKSB7XG4gICAgICAgIHByb2Nlc3NUYWdBcnJheShjb250ZXh0SXRlbSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJvY2Vzc0FycmF5SW5pdCh2YWx1ZSwgLy8gVGVtcGxhdGVWYWx1ZSB8IFN0cmluZ1RhZyB8IFN1YnNjcmliZVZhbHVlIHwgU2lnbmFsT2JqZWN0LFxuY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlO1xuICAgIHByb2Nlc3NUYWdBcnJheShjb250ZXh0SXRlbSwgc3ViVmFsdWUsIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8pO1xufVxuIiwiaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgZ2V0U2ltcGxlVGFnVmFyIH0gZnJvbSAnLi9nZXRTaW1wbGVUYWdWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0QXJyYXlUYWdWYXIgfSBmcm9tICcuL2dldEFycmF5VGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlVG9UYWdKc1Zhcih2YWx1ZSkge1xuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IHZhbHVlPy50YWdKc1R5cGU7XG4gICAgaWYgKHRhZ0pzVHlwZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBnZXRCYXNpY1RhZ1Zhcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRCYXNpY1RhZ1Zhcih2YWx1ZSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZ2V0QXJyYXlUYWdWYXIodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0U2ltcGxlVGFnVmFyKHZhbHVlKTtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZHMsIHBhaW50QmVmb3JlLCBwYWludENvbW1hbmRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRvbVByb2Nlc3NDb250ZXh0SXRlbSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvZG9tUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHZhbHVlVG9UYWdKc1ZhciB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy92YWx1ZVRvVGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuLyoqIE11c3QgcHJvdmlkZSBpbnNlcnRCZWZvcmUgT1IgYXBwZW5kVG8gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0odmFsdWUsIG93bmVyU3VwcG9ydCwgY29udGV4dHMsIGluc2VydEJlZm9yZSwgLy8gdXNlZCBkdXJpbmcgdXBkYXRlc1xuYXBwZW5kVG8pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZW1wdHkpO1xuICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdGFnSnNWYXI6IHZhbHVlVG9UYWdKc1Zhcih2YWx1ZSksXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogZmFsc2UsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBlbGVtZW50LFxuICAgICAgICAvLyBUT0RPOiBUaGlzIHdpbGwgbmVlZCB0byBiZSBwYXNzZWQgaW5cbiAgICAgICAgcGFyZW50Q29udGV4dDogb3duZXJTdXBwb3J0LmNvbnRleHQsXG4gICAgICAgIHZhbHVlSW5kZXg6IGNvbnRleHRzLmxlbmd0aCxcbiAgICAgICAgdmFsdWVJbmRleFNldEJ5OiAnY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtJyxcbiAgICB9O1xuICAgIGlmICghYXBwZW5kVG8pIHtcbiAgICAgICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZSwgW2luc2VydEJlZm9yZSwgZWxlbWVudF1dKTtcbiAgICB9XG4gICAgZG9tUHJvY2Vzc0NvbnRleHRJdGVtKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtLCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGVsZW1lbnRdXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSB9IGZyb20gJy4vY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBvbkZpcnN0U3ViQ29udGV4dCh2YWx1ZSwgc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0LCAvLyBvd25lclN1cHBvcnQgP1xuaW5zZXJ0QmVmb3JlKSB7XG4gICAgc3ViQ29udGV4dC5oYXNFbWl0dGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3ViQ29udGV4dC5jb250ZXh0SXRlbSA9IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgb3duZXJTdXBwb3J0LCBbXSwgaW5zZXJ0QmVmb3JlKTtcbn1cbiIsImltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZHMgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZ3VhcmFudGVlSW5zZXJ0QmVmb3JlKGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBsZXQgYXBwZW5kTWFya2VyO1xuICAgIC8vIGRvIHdlIG5lZWQgdG8gYXBwZW5kIG5vdyBidXQgcHJvY2VzcyBzdWJzY3JpcHRpb24gbGF0ZXI/XG4gICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgIGFwcGVuZE1hcmtlciA9IGluc2VydEJlZm9yZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVtcHR5KTtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGluc2VydEJlZm9yZV1dKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBwZW5kTWFya2VyLFxuICAgICAgICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgY2hlY2tTdGlsbFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vY2hlY2tTdGlsbFN1YnNjcmlwdGlvbi5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBlbWl0U3ViQ29udGV4dCB9IGZyb20gJy4vcHJvY2Vzc1N1YnNjcmliZVdpdGguZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVTdWJzY3JpYmUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCByZXN1bHROdW0gPSBjaGVja1N0aWxsU3Vic2NyaXB0aW9uKG5ld1ZhbHVlLCAvLyBzdWJWYWx1ZSxcbiAgICBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICBpZiAocmVzdWx0TnVtID09PSAtMSAmJiBuZXdWYWx1ZS5jYWxsYmFjaykge1xuICAgICAgICBjb25zdCBzdWJDb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICAgICAgZW1pdFN1YkNvbnRleHQobmV3VmFsdWUsIHN1YkNvbnRleHQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHBhaW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uLy4uL3N0YXRlL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlIH0gZnJvbSAnLi9mb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVsZXRlU3ViQ29udGV4dCB9IGZyb20gJy4vZGVsZXRlQ29udGV4dFN1YkNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgb25GaXJzdFN1YkNvbnRleHQgfSBmcm9tICcuL29uRmlyc3RTdWJDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGd1YXJhbnRlZUluc2VydEJlZm9yZSB9IGZyb20gJy4uL2d1YXJhbnRlZUluc2VydEJlZm9yZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NVcGRhdGVTdWJzY3JpYmUgfSBmcm9tICcuL3Byb2Nlc3NVcGRhdGVTdWJzY3JpYmUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU3Vic2NyaWJlKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlT3JpZ2luYWwpIHtcbiAgICBjb25zdCBvYnNlcnZhYmxlcyA9IHZhbHVlLk9ic2VydmFibGVzO1xuICAgIGNvbnN0IHsgYXBwZW5kTWFya2VyLCBpbnNlcnRCZWZvcmUgfSA9IGd1YXJhbnRlZUluc2VydEJlZm9yZShhcHBlbmRUbywgaW5zZXJ0QmVmb3JlT3JpZ2luYWwpO1xuICAgIGxldCBvbk91dHB1dCA9IGZ1bmN0aW9uIG9uU3ViVmFsdWUodmFsdWUsIHN5bmNSdW4sIHN1YkNvbnRleHQpIHtcbiAgICAgICAgb25GaXJzdFN1YkNvbnRleHQodmFsdWUsIHN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCwgaW5zZXJ0QmVmb3JlKTtcbiAgICAgICAgY2hlY2tUb1BhaW50KHN5bmNSdW4pO1xuICAgICAgICAvLyBNVVRBVElPTjogZnJvbSBub3cgb24ganVzdCBydW4gdXBkYXRlXG4gICAgICAgIG9uT3V0cHV0ID0gc3ViQ29udGV4dC50YWdKc1Zhci5vbk91dHB1dCA9IGZ1bmN0aW9uIHN1YnNjcmlwdGlvblVwZGF0ZSh1cGRhdGVWYWx1ZSwgc3luY1J1biwgc3ViQ29udGV4dCkge1xuICAgICAgICAgICAgY29uc3QgYUNvbnRleHQgPSBzdWJDb250ZXh0LmNvbnRleHRJdGVtO1xuICAgICAgICAgICAgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGFDb250ZXh0LCB1cGRhdGVWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgICAgIGFDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUodXBkYXRlVmFsdWUsIGFDb250ZXh0LCBvd25lclN1cHBvcnQsIFt1cGRhdGVWYWx1ZV0pO1xuICAgICAgICAgICAgLy8gcHJvY2Vzc1VwZGF0ZUNvbnRleHQob3duZXJTdXBwb3J0KVxuICAgICAgICAgICAgY2hlY2tUb1BhaW50KHN5bmNSdW4pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IHNldHVwU3Vic2NyaWJlQ2FsbGJhY2tQcm9jZXNzb3Iob2JzZXJ2YWJsZXMsIG93bmVyU3VwcG9ydCwgKHZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KSA9PiBvbk91dHB1dCh2YWx1ZSwgc3luY1J1biwgc3ViQ29udGV4dCksIHZhbHVlKTtcbiAgICBzdWJDb250ZXh0LmFwcGVuZE1hcmtlciA9IGFwcGVuZE1hcmtlcjtcbiAgICBjb250ZXh0SXRlbS5zdWJDb250ZXh0ID0gc3ViQ29udGV4dDtcbiAgICB2YWx1ZS5wcm9jZXNzVXBkYXRlID0gcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZTtcbiAgICB2YWx1ZS5vbk91dHB1dCA9IG9uT3V0cHV0O1xuICAgIHJldHVybiBzdWJDb250ZXh0O1xufVxuLyoqIEFmdGVyIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiB5b3UgbmVlZCB0byBzZXQgYGNvbnRleHRJdGVtLnN1YkNvbnRleHQgPSBzdWJDb250ZXh0YCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU3Vic2NyaWJlQ2FsbGJhY2tQcm9jZXNzb3Iob2JzZXJ2YWJsZXMsIG93bmVyU3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0ID9cbm9uT3V0cHV0LCB0YWdKc1Zhcikge1xuICAgIC8vIGNvbnN0IGNvbXBvbmVudCA9IGdldFN1cHBvcnRXaXRoU3RhdGUob3duZXJTdXBwb3J0KVxuICAgIC8vIG9uVmFsdWUgbXV0YXRlcyBzbyBmdW5jdGlvbiBiZWxvdyBjYWxscyBvcmlnaW5hbCBhbmQgbXV0YXRpb25cbiAgICBmdW5jdGlvbiBzdWJWYWx1ZUhhbmRsZXIodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHN1YkNvbnRleHQubGFzdFZhbHVlc1tpbmRleF0gPSB7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHRhZ0pzVmFyOiB2YWx1ZVRvVGFnSnNWYXIodmFsdWUpLFxuICAgICAgICAgICAgb2xkVGFnSnNWYXI6IHN1YkNvbnRleHQubGFzdFZhbHVlc1tpbmRleF0/LnRhZ0pzVmFyXG4gICAgICAgIH07XG4gICAgICAgIHZhbHVlc0hhbmRsZXIoc3ViQ29udGV4dC5sYXN0VmFsdWVzLCBpbmRleCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZhbHVlc0hhbmRsZXIobmV3VmFsdWVzLCBpbmRleCkge1xuICAgICAgICAvLyBjb25zdCBuZXdDb21wb25lbnQgPSBjb21wb25lbnQuY29udGV4dC5nbG9iYWwubmV3ZXN0XG4gICAgICAgIC8vIHN5bmNTdXBwb3J0cyhuZXdDb21wb25lbnQsIGNvbXBvbmVudClcbiAgICAgICAgY29uc3QgbmV3ZXN0UGFyZW50VGFnSnNWYXIgPSBzdWJDb250ZXh0LnRhZ0pzVmFyO1xuICAgICAgICBpZiAobmV3ZXN0UGFyZW50VGFnSnNWYXI/LmNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVZhbHVlID0gbmV3ZXN0UGFyZW50VGFnSnNWYXIuY2FsbGJhY2soLi4ubmV3VmFsdWVzLm1hcCh4ID0+IHgudmFsdWUpKTtcbiAgICAgICAgICAgIG9uT3V0cHV0KHJlc3BvbnNlVmFsdWUsIHN5bmNSdW4sIHN1YkNvbnRleHQpO1xuICAgICAgICAgICAgLy8gb2xkVmFsdWVzW2luZGV4XS52YWx1ZSA9IHJlc3BvbnNlVmFsdWVcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbk91dHB1dChuZXdWYWx1ZXNbaW5kZXhdLnZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KTtcbiAgICB9XG4gICAgbGV0IHN5bmNSdW4gPSB0cnVlO1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSB7XG4gICAgICAgIGxhc3RWYWx1ZXM6IFtdLFxuICAgICAgICBzdWJWYWx1ZUhhbmRsZXIsXG4gICAgICAgIHZhbHVlc0hhbmRsZXIsXG4gICAgICAgIHRhZ0pzVmFyLFxuICAgICAgICBzdWJzY3JpcHRpb25zOiBbXSxcbiAgICB9O1xuICAgIC8vIEhJTlQ6IE11c3Qgc3Vic2NyaWJlIEFGVEVSIGluaXRpYWwgdmFyaWFibGUgY3JlYXRlZCBhYm92ZSBpbmNhc2Ugc3Vic2NyaWJpbmcgY2F1c2VzIGltbWVkaWF0ZSBydW5cbiAgICBvYnNlcnZhYmxlcy5mb3JFYWNoKChvYnNlcnZhYmxlLCBpbmRleCkgPT4ge1xuICAgICAgICBzeW5jUnVuID0gdHJ1ZTtcbiAgICAgICAgc3ViQ29udGV4dC5zdWJzY3JpcHRpb25zLnB1c2gob2JzZXJ2YWJsZS5zdWJzY3JpYmUodmFsdWUgPT4gc3ViVmFsdWVIYW5kbGVyKHZhbHVlLCBpbmRleCkpKTtcbiAgICAgICAgc3luY1J1biA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHRhZ0pzVmFyLm9uT3V0cHV0ID0gb25PdXRwdXQ7XG4gICAgcmV0dXJuIHN1YkNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zdWJzY3JpYmVDb250ZXh0KGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnM7XG4gICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gICAgZGVsZXRlIGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQW5kVW5zdWJzY3JpYmUoY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSBjb250ZXh0SXRlbS5zdWJDb250ZXh0O1xuICAgIHVuc3Vic2NyaWJlQ29udGV4dChjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIGRlbGV0ZVN1YkNvbnRleHQoc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RvUGFpbnQoc3luY1J1bikge1xuICAgIGlmICghc3luY1J1biAmJiAhc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN1cHBvcnQpIHtcbiAgICAgICAgcGFpbnQoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBzZXR1cFN1YnNjcmliZSB9IGZyb20gJy4vc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1N1YnNjcmliZVdpdGgodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gc2V0dXBTdWJzY3JpYmUodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgIGlmICghc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIGVtaXRTdWJDb250ZXh0KHZhbHVlLCBzdWJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YkNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZW1pdFN1YkNvbnRleHQodmFsdWUsIHN1YkNvbnRleHQpIHtcbiAgICBjb25zdCBvYnNlcnZhYmxlcyA9IHZhbHVlLk9ic2VydmFibGVzO1xuICAgIGNvbnN0IG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1swXTtcbiAgICBpZiAoIXN1YkNvbnRleHQuaGFzRW1pdHRlZCkge1xuICAgICAgICBpZiAoJ3dpdGhEZWZhdWx0JyBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgc3ViQ29udGV4dC5zdWJWYWx1ZUhhbmRsZXIodmFsdWUud2l0aERlZmF1bHQsIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgndmFsdWUnIGluIG9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHN1YkNvbnRleHQuc3ViVmFsdWVIYW5kbGVyKG9ic2VydmFibGUudmFsdWUsIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjsgLy8gbm90aGluZyB0byBlbWl0XG4gICAgfVxuICAgIGNvbnN0IGVtaXRWYWx1ZSA9IHN1YkNvbnRleHQubGFzdFZhbHVlc1swXS52YWx1ZTtcbiAgICBzdWJDb250ZXh0LnN1YlZhbHVlSGFuZGxlcihlbWl0VmFsdWUsIDApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTaWduYWwodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvKSB7XG4gICAgY29uc3Qgc3ViVmFsdWUgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5zdWJzY3JpYmUsXG4gICAgICAgIHN0YXRlczogW10sXG4gICAgICAgIE9ic2VydmFibGVzOiBbdmFsdWVdLFxuICAgIH07XG4gICAgc2V0dXBTdWJzY3JpYmUoc3ViVmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvKTtcbn1cbiIsImltcG9ydCB7IGhvd1RvU2V0Rmlyc3RJbnB1dFZhbHVlIH0gZnJvbSBcIi4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaG93VG9TZXRJbnB1dFZhbHVlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBpc1NwZWNpYWxBdHRyIH0gZnJvbSBcIi4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaXNTcGVjaWFsQXR0cmlidXRlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzTm9uRHluYW1pY0F0dHIgfSBmcm9tIFwiLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyB1bnN1YnNjcmliZUNvbnRleHQsIGNoZWNrVG9QYWludCwgc2V0dXBTdWJzY3JpYmVDYWxsYmFja1Byb2Nlc3NvciB9IGZyb20gXCIuLi90YWcvdXBkYXRlL3NldHVwU3Vic2NyaWJlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzQXR0cmlidXRlVXBkYXRlIH0gZnJvbSBcIi4vcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZS5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbmVsZW1lbnQsIF90YWdKc1ZhciwgLy8gc2FtZSBhcyB2YWx1ZVxuY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIC8vIGNoYW5nZSBob3cgdGhlIGRlbGV0ZSBvY2N1cnNcbiAgICB2YWx1ZS5kZWxldGUgPSB1bnN1YnNjcmliZUNvbnRleHQ7XG4gICAgY29uc3QgaXNTcGVjaWFsID0gaXNTcGVjaWFsQXR0cihuYW1lKTtcbiAgICBjb25zdCBvbk91dHB1dCA9IGZ1bmN0aW9uIG9uU3ViVmFsdWUoY2FsbGJhY2tWYWx1ZSwgc3luY1J1bikge1xuICAgICAgICBwcm9jZXNzTm9uRHluYW1pY0F0dHIobmFtZSwgY2FsbGJhY2tWYWx1ZSwgZWxlbWVudCwgaG93VG9TZXRGaXJzdElucHV0VmFsdWUsIGlzU3BlY2lhbCk7XG4gICAgICAgIGNoZWNrVG9QYWludChzeW5jUnVuKTtcbiAgICB9O1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSBzZXR1cFN1YnNjcmliZUNhbGxiYWNrUHJvY2Vzc29yKHZhbHVlLk9ic2VydmFibGVzLCBvd25lclN1cHBvcnQsIG9uT3V0cHV0LCB2YWx1ZSk7XG4gICAgY29udGV4dEl0ZW0uc3ViQ29udGV4dCA9IHN1YkNvbnRleHQ7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IHZhbHVlO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlVXBkYXRlV3JhcCh2YWx1ZSwgY29udGV4dEl0ZW0yLCBvd25lclN1cHBvcnQpIHtcbiAgICAgICAgcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZSh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgZWxlbWVudCwgbmFtZSk7XG4gICAgfTtcbiAgICByZXR1cm4geyBzdWJDb250ZXh0LCBvbk91dHB1dCB9O1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydFdpdGhTdGF0ZSB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFN1cHBvcnRXaXRoU3RhdGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSBcIi4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tIFwiLi4vdGFnL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBkZWxldGVBbmRVbnN1YnNjcmliZSwgc2V0dXBTdWJzY3JpYmUgfSBmcm9tIFwiLi4vdGFnL3VwZGF0ZS9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQgfSBmcm9tIFwiLi9zdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzU3Vic2NyaWJlQXR0cmlidXRlIH0gZnJvbSBcIi4vcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSBcIi4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBjaGVja1N0aWxsU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvY2hlY2tTdGlsbFN1YnNjcmlwdGlvbi5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlKG5hbWUsIHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5lbGVtZW50LCBfdGFnSnNWYXIsIC8vIGl0cyB0aGUgc2FtZSBhcyB0aGUgdmFsdWVcbmNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCB7IHN1YkNvbnRleHQgfSA9IHByb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbiAgICBlbGVtZW50LCB2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgaWYgKCFzdWJDb250ZXh0Lmhhc0VtaXR0ZWQpIHtcbiAgICAgICAgZW1pdFN1YlNjcmlwdGlvbkFzSXModmFsdWUsIHN1YkNvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBlbWl0U3ViU2NyaXB0aW9uQXNJcyh2YWx1ZSwgc3ViQ29udGV4dCkge1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gc3ViQ29udGV4dC50YWdKc1ZhcjtcbiAgICBjb25zdCBvbk91dHB1dCA9IHRhZ0pzVmFyLm9uT3V0cHV0OyAvLyB2YWx1ZS5vbk91dHB1dFxuICAgIC8vIFRPRE86IHJlbW92ZVxuICAgIGlmIChvbk91dHB1dCA9PT0gYmxhbmtIYW5kbGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYmxhbmtoYW5kbGVyIG5vdCBjb252ZXJ0ZWQnKTtcbiAgICB9XG4gICAgY29uc3Qgb2JzZXJ2YWJsZXMgPSB2YWx1ZS5PYnNlcnZhYmxlcztcbiAgICBsZXQgb2JWYWx1ZSA9IG9ic2VydmFibGVzWzBdPy52YWx1ZSB8fCB2YWx1ZS53aXRoRGVmYXVsdDtcbiAgICBpZiAodmFsdWUuY2FsbGJhY2spIHtcbiAgICAgICAgb2JWYWx1ZSA9IHZhbHVlLmNhbGxiYWNrKG9iVmFsdWUpO1xuICAgIH1cbiAgICBvbk91dHB1dChvYlZhbHVlLCB0cnVlLCBzdWJDb250ZXh0KTtcbn1cbi8qKiBIYXZlIGFuIGh0bWwgdGFnZ2VkIHZhbHVlIGFzIHZhbHVlIG9mIHN1YnNjcmliZSBlbWlzc2lvbnMuIEF1dG9tYXRpY2FsbHkgdW5zdWJzY3JpYmVzIGZvciB5b3UgKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmUoT2JzZXJ2YWJsZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICBjb25zdCBzdGF0ZXMgPSBzdXBwb3J0ID8gZ2V0U3VwcG9ydFdpdGhTdGF0ZShzdXBwb3J0KS5zdGF0ZXMgOiBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvbk91dHB1dDogYmxhbmtIYW5kbGVyLCAvLyBnZXRzIHNldCB3aXRoaW4gc2V0dXBTdWJzY3JpYmUoKVxuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMuc3Vic2NyaWJlLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZSxcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHNldHVwU3Vic2NyaWJlLFxuICAgICAgICBjaGVja1ZhbHVlQ2hhbmdlOiBjaGVja1N1YnNjcmliZVZhbHVlQ2hhbmdlZCxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogY2hlY2tTdGlsbFN1YnNjcmlwdGlvbixcbiAgICAgICAgLy8gcHJvY2Vzc1VwZGF0ZTogcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZSxcbiAgICAgICAgZGVsZXRlOiBkZWxldGVBbmRVbnN1YnNjcmliZSxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHN0YXRlcyxcbiAgICAgICAgT2JzZXJ2YWJsZXM6IFtPYnNlcnZhYmxlXSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydFdpdGhTdGF0ZSB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFN1cHBvcnRXaXRoU3RhdGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tIFwiLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gXCIuLi90YWcvaW5kZXguanNcIjtcbmltcG9ydCB7IHByb2Nlc3NTdWJzY3JpYmVXaXRoIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvcHJvY2Vzc1N1YnNjcmliZVdpdGguZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGRlbGV0ZUFuZFVuc3Vic2NyaWJlIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlIH0gZnJvbSBcIi4vc3Vic2NyaWJlLmZ1bmN0aW9uLmpzXCI7XG4vKiogSGF2ZSBhbiBodG1sIHRhZ2dlZCB2YWx1ZSBhcyB2YWx1ZSBvZiBzdWJzY3JpYmUgZW1pc3Npb25zLCB3aXRoIGluaXRpYWwgZGVmYXVsdCB2YWx1ZSBlbWlzc2lvbi4gQXV0b21hdGljYWxseSB1bnN1YnNjcmliZXMgZm9yIHlvdSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZVdpdGgoT2JzZXJ2YWJsZSwgd2l0aERlZmF1bHQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25PdXRwdXQ6IGJsYW5rSGFuZGxlciwgLy8gdGhpcyBnZXRzIHNldCB3aXRoaW4gc2V0dXBTdWJzY3JpYmVcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLnN1YnNjcmliZSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IHByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1N1YnNjcmliZVdpdGgsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrU3Vic2NyaWJlVmFsdWVDaGFuZ2VkLFxuICAgICAgICAvLyBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgZGVsZXRlOiBkZWxldGVBbmRVbnN1YnNjcmliZSxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHdpdGhEZWZhdWx0LFxuICAgICAgICBzdGF0ZXM6IGdldFN1cHBvcnRXaXRoU3RhdGUoZ2V0U3VwcG9ydEluQ3ljbGUoKSkuc3RhdGVzLFxuICAgICAgICBPYnNlcnZhYmxlczogW09ic2VydmFibGVdLFxuICAgIH07XG59XG4vKiogY2hlY2tzIGlzIGEgcHJldmlvdXMgdGFnIHZhciB3YXMgYSBzdWJzY3JpcHRpb24gYnV0IG5vdyBoYXMgY2hhbmdlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU3Vic2NyaWJlVmFsdWVDaGFuZ2VkKHZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIGlmICghdmFsdWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICByZXR1cm4gMTsgLy8gaXRzIG5vdCBhIHN1YnNjcmlwdGlvbiBhbnltb3JlXG4gICAgfVxuICAgIGNvbnN0IG5ld09ic2VydmVzID0gdmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgaWYgKCFuZXdPYnNlcnZlcykge1xuICAgICAgICByZXR1cm4gMjsgLy8gaXRzIG5vdCBhIHN1YnNjcmlwdGlvbiBhbnltb3JlXG4gICAgfVxuICAgIGNvbnN0IG9sZFZhbHVlID0gY29udGV4dEl0ZW0udmFsdWU7XG4gICAgY29uc3Qgb2xkT2JzZXJ2ZXMgPSBvbGRWYWx1ZS5PYnNlcnZhYmxlcztcbiAgICBpZiAoIW9sZE9ic2VydmVzIHx8IG9sZE9ic2VydmVzLmxlbmd0aCAhPT0gbmV3T2JzZXJ2ZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAzOyAvLyBub3QgdGhlIHNhbWUgc3Vic2NyaXB0aW9uXG4gICAgfVxuICAgIGNvbnN0IGFsbE1hdGNoID0gbmV3T2JzZXJ2ZXMuZXZlcnkoKG9iLCBpbmRleCkgPT4gb2IgPT09IG9sZE9ic2VydmVzW2luZGV4XSk7XG4gICAgaWYgKCFhbGxNYXRjaCkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgcmV0dXJuIC0xOyAvLyBzdGlsbCB0aGUgc2FtZVxufVxuIiwiaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzU2lnbmFsIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzU3Vic2NyaWJlV2l0aC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBkZWxldGVBbmRVbnN1YnNjcmliZSB9IGZyb20gJy4uL3RhZy91cGRhdGUvc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQgfSBmcm9tICcuLi90YWdKc1ZhcnMvc3Vic2NyaWJlV2l0aC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlU3Vic2NyaWJlIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzVXBkYXRlU3Vic2NyaWJlLmZ1bmN0aW9uLmpzJztcbi8qKiBDaGVja3MgaWYgcmVuZGVyaW5nIGN5Y2xlIGluIHByb2Nlc3MuIFRoZW4gY3JlYXRlcyBvYmplY3Qgd2l0aCBcInZhbHVlXCIga2V5IGFuZCBhYmlsaXR5IHRvIFwic3Vic2NyaWJlXCIgdG8gdmFsdWUgY2hhbmdlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbChpbml0aWFsVmFsdWUpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gc3RhdGUoKCkgPT4gU2lnbmFsKGluaXRpYWxWYWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gU2lnbmFsKGluaXRpYWxWYWx1ZSk7XG59XG4vKiogQ3JlYXRlcyBvYmplY3Qgd2l0aCBcInZhbHVlXCIga2V5IGFuZCBhYmlsaXR5IHRvIFwic3Vic2NyaWJlXCIgdG8gdmFsdWUgY2hhbmdlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNpZ25hbChpbml0aWFsVmFsdWUpIHtcbiAgICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZW1pdCA9IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAvLyBOb3RpZnkgYWxsIHN1YnNjcmliZXJzXG4gICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sobmV3VmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5zaWduYWwsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrU3Vic2NyaWJlVmFsdWVDaGFuZ2VkLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1NpZ25hbCxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZSxcbiAgICAgICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIGVtaXQobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWxldGU6IGRlbGV0ZUFuZFVuc3Vic2NyaWJlLFxuICAgICAgICBlbWl0LFxuICAgICAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlKTsgLy8gZW1pdCBpbml0aWFsIHZhbHVlXG4gICAgICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgLy8gUmV0dXJuIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uXG4gICAgICAgICAgICBjb25zdCB1bnN1YiA9ICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBzdXBwb3J0IHRyYWRpdGlvbmFsIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICB1bnN1Yi51bnN1YnNjcmliZSA9IHVuc3ViO1xuICAgICAgICAgICAgcmV0dXJuIHVuc3ViO1xuICAgICAgICB9LFxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0LCBkZWZpbmVWYWx1ZU9uIH0gZnJvbSAnLi9TdWJqZWN0LmNsYXNzLmpzJztcbmV4cG9ydCBjbGFzcyBWYWx1ZVN1YmplY3QgZXh0ZW5kcyBTdWJqZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcih2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1cGVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5IHdpdGggdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgY2FsbGJhY2sodGhpcy52YWx1ZSwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVmFsdWVTdWJqZWN0aXZlIGV4dGVuZHMgU3ViamVjdCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIodmFsdWUpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIGRlZmluZVZhbHVlT24odGhpcyk7IC8vIGlmIHlvdSBleHRlbmQgdGhpcyBBTkQgaGF2ZSBhIGNvbnN0cnVjdG9yLCB5b3UgbXVzdCBjYWxsIHRoaXMgaW4geW91ciBleHRlbnNpb25cbiAgICB9XG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1cGVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5IHdpdGggdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgY2FsbGJhY2sodGhpcy5fdmFsdWUsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHdpbGxDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHJldHVybiAoKGxhc3RWYWx1ZSwgdXRpbHMpID0+IHtcbiAgICAgICAgdXRpbHMuc2V0SGFuZGxlcigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2sobGFzdFZhbHVlLCB1dGlscy5uZXh0KTtcbiAgICB9KTtcbn1cbi8qKiAucGlwZSggcHJvbWlzZSgoeCkgPT4gUHJvbWlzZS5yZXNvbHZlKDQ0KSkgKSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpbGxQcm9taXNlKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuICgobGFzdFZhbHVlLCB1dGlscykgPT4ge1xuICAgICAgICB1dGlscy5zZXRIYW5kbGVyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pOyAvLyBkbyBub3RoaW5nIG9uIGluaXRpYWwgcmV0dXJuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKGxhc3RWYWx1ZSk7XG4gICAgICAgIHJlc3VsdC50aGVuKHggPT4gdXRpbHMubmV4dCh4KSk7XG4gICAgfSk7XG59XG4vKiogLnBpcGUoIHdpbGxTdWJzY3JpYmUoKHgpID0+IG5ldyBWYWx1ZVN1YmplY3QoNDQpKSApICovXG5leHBvcnQgY29uc3Qgd2lsbFN1YnNjcmliZSA9IChjYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiAoKGxhc3RWYWx1ZSwgdXRpbHMpID0+IHtcbiAgICAgICAgdXRpbHMuc2V0SGFuZGxlcigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTsgLy8gZG8gbm90aGluZyBvbiBpbml0aWFsIHJldHVyblxuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayhsYXN0VmFsdWUpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSByZXN1bHQuc3Vic2NyaWJlKHggPT4ge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB1dGlscy5uZXh0KHgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuLyoqIFVzZWQgZm9yIHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gcmVtYWluIHRoZSBzYW1lIHZhcmlhYmxlIGR1cmluZyByZW5kZXIgcGFzc2VzICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5oYW5kbGVycy5oYW5kbGVyKGRlZmF1bHRWYWx1ZSk7XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVN1YmplY3QgfSBmcm9tICcuLi9zdWJqZWN0L2luZGV4LmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuL3N0YXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IG9sZFN5bmNTdGF0ZXMgfSBmcm9tICcuL3N5bmNTdGF0ZXMuZnVuY3Rpb24uanMnO1xuLyoqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gd2F0Y2ggYXJyYXkgY2hhbmdlcywgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSB0cmlnZ2VyZWQuXG4gKiBUcmlnZ2VycyBvbiBpbml0aWFsIHdhdGNoIHNldHVwLiBUSVA6IHRyeSB3YXRjaC5ub0luaXQoKVxuICogQHBhcmFtIGN1cnJlbnRWYWx1ZXMgVFtdXG4gKiBAcGFyYW0gY2FsbGJhY2sgV2F0Y2hDYWxsYmFja1xuICogQHJldHVybnMgVFtdXG4gKi9cbmV4cG9ydCBjb25zdCB3YXRjaCA9ICgoY3VycmVudFZhbHVlcywgY2FsbGJhY2spID0+IHtcbiAgICByZXR1cm4gc2V0dXBXYXRjaChjdXJyZW50VmFsdWVzLCBjYWxsYmFjayk7XG59KTtcbmNvbnN0IGRlZmF1bHRGaW5hbGx5ID0gKHgpID0+IHg7XG5mdW5jdGlvbiBuZXdXYXRjaChzZXR1cCkge1xuICAgIGNvbnN0IG1ldGhvZCA9IChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICByZXR1cm4gc2V0dXBXYXRjaChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaywgc2V0dXApO1xuICAgIH07XG4gICAgbWV0aG9kLnNldHVwID0gc2V0dXA7XG4gICAgZGVmaW5lT25NZXRob2QoKCkgPT4gbWV0aG9kLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG4vKipcbiAqIHB1dHMgYWJvdmUgZnVuY3Rpb25hbGl0eSB0b2dldGhlclxuICogQHBhcmFtIGN1cnJlbnRWYWx1ZXMgdmFsdWVzIGJlaW5nIHdhdGNoZWRcbiAqIEBwYXJhbSBjYWxsYmFjayAoY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlcykgPT4gcmVzb2x2ZVRvVmFsdWVcbiAqIEBwYXJhbSBwYXJhbTJcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IHNldHVwV2F0Y2ggPSAoY3VycmVudFZhbHVlcywgY2FsbGJhY2ssIHsgaW5pdCwgYmVmb3JlLCBmaW5hbCA9IGRlZmF1bHRGaW5hbGx5LCB9ID0ge30pID0+IHtcbiAgICBjb25zdCBwcmV2aW91cyA9IHN0YXRlKHtcbiAgICAgICAgcGFzdFJlc3VsdDogdW5kZWZpbmVkLFxuICAgICAgICB2YWx1ZXM6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICBjb25zdCBwcmV2aW91c1ZhbHVlcyA9IHByZXZpb3VzLnZhbHVlcztcbiAgICAvLyBGaXJzdCB0aW1lIHJ1bm5pbmcgd2F0Y2g/XG4gICAgaWYgKHByZXZpb3VzVmFsdWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGJlZm9yZSAmJiAhYmVmb3JlKGN1cnJlbnRWYWx1ZXMpKSB7XG4gICAgICAgICAgICBwcmV2aW91cy52YWx1ZXMgPSBjdXJyZW50VmFsdWVzO1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzLnBhc3RSZXN1bHQ7IC8vIGRvIG5vdCBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhc3RlZEluaXQgPSBpbml0IHx8IGNhbGxiYWNrO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYXN0ZWRJbml0KGN1cnJlbnRWYWx1ZXMsIHByZXZpb3VzVmFsdWVzKTtcbiAgICAgICAgcHJldmlvdXMucGFzdFJlc3VsdCA9IGZpbmFsKHJlc3VsdCk7XG4gICAgICAgIHByZXZpb3VzLnZhbHVlcyA9IGN1cnJlbnRWYWx1ZXM7XG4gICAgICAgIHJldHVybiBwcmV2aW91cy5wYXN0UmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBhbGxFeGFjdCA9IGN1cnJlbnRWYWx1ZXMuZXZlcnkoKGl0ZW0sIGluZGV4KSA9PiBpdGVtID09PSBwcmV2aW91c1ZhbHVlc1tpbmRleF0pO1xuICAgIGlmIChhbGxFeGFjdCkge1xuICAgICAgICByZXR1cm4gcHJldmlvdXMucGFzdFJlc3VsdDtcbiAgICB9XG4gICAgaWYgKGJlZm9yZSAmJiAhYmVmb3JlKGN1cnJlbnRWYWx1ZXMpKSB7XG4gICAgICAgIHByZXZpb3VzLnZhbHVlcyA9IGN1cnJlbnRWYWx1ZXM7XG4gICAgICAgIHJldHVybiBwcmV2aW91cy5wYXN0UmVzdWx0OyAvLyBkbyBub3QgY29udGludWVcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2soY3VycmVudFZhbHVlcywgcHJldmlvdXNWYWx1ZXMpO1xuICAgIHByZXZpb3VzLnBhc3RSZXN1bHQgPSBmaW5hbChyZXN1bHQpO1xuICAgIHByZXZpb3VzVmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgcHJldmlvdXNWYWx1ZXMucHVzaCguLi5jdXJyZW50VmFsdWVzKTtcbiAgICByZXR1cm4gcHJldmlvdXMucGFzdFJlc3VsdDtcbn07XG5mdW5jdGlvbiBkZWZpbmVPbk1ldGhvZChnZXRXYXRjaCwgYXR0YWNoVG8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXR0YWNoVG8sICdub0luaXQnLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhdGNoID0gZ2V0V2F0Y2goKTtcbiAgICAgICAgICAgIHdhdGNoLnNldHVwLmluaXQgPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2g7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGF0dGFjaFRvLCAnYXNTdWJqZWN0Jywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRXYXRjaCA9IGdldFdhdGNoKCk7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFN1cHBvcnQgPSBzdGF0ZSgoKSA9PiBnZXRTdXBwb3J0SW5DeWNsZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IHN1YmplY3QgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgY29uc3Qgb2xkU3RhdGUgPSBzdGF0ZSgoKSA9PiAoe1xuICAgICAgICAgICAgICAgIHN0YXRlQXJyYXk6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZUFycmF5LFxuICAgICAgICAgICAgICAgIHN0YXRlczogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlcyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIHNldHVwV2F0Y2goY3VycmVudFZhbHVlcywgKGN1cnJlbnRWYWx1ZXMsIHByZXZpb3VzVmFsdWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vd1N1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRUbyA9IGNhbGxiYWNrKGN1cnJlbnRWYWx1ZXMsIHByZXZpb3VzVmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vd1N1cHBvcnQgIT09IGZpcnN0U3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3ZXN0U3RhdGUgPSBvbGRTdGF0ZS5zdGF0ZUFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2xvYmFsID0gZmlyc3RTdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkZXN0ID0gZ2xvYmFsLm9sZGVzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZGVzdFN0YXRlID0gb2xkZXN0LnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U3RhdGVzID0gb2xkU3RhdGUuc3RhdGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkU3RhdGVzID0gb2xkZXN0LnN0YXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFN5bmNTdGF0ZXMobmV3ZXN0U3RhdGUsIG9sZGVzdFN0YXRlLCBuZXdTdGF0ZXMsIG9sZFN0YXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KHNldFRvKTtcbiAgICAgICAgICAgICAgICB9LCBvbGRXYXRjaC5zZXR1cCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbWV0aG9kLnNldHVwID0gb2xkV2F0Y2guc2V0dXA7XG4gICAgICAgICAgICBkZWZpbmVPbk1ldGhvZCgoKSA9PiBtZXRob2QsIG1ldGhvZCk7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhdHRhY2hUbywgJ3RydXRoeScsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgY29uc3Qgd2F0Y2ggPSBnZXRXYXRjaCgpO1xuICAgICAgICAgICAgd2F0Y2guc2V0dXAuYmVmb3JlID0gKGN1cnJlbnRWYWx1ZXMpID0+IGN1cnJlbnRWYWx1ZXMuZXZlcnkoeCA9PiB4KTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaDtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXR0YWNoVG87XG59XG5kZWZpbmVPbk1ldGhvZCgoKSA9PiBuZXdXYXRjaCh7fSksIHdhdGNoKTtcbiIsImltcG9ydCB7IFN1YmplY3QsIFZhbHVlU3ViamVjdCB9IGZyb20gJy4uL3N1YmplY3QvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4vc3RhdGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgb2xkU3luY1N0YXRlcyB9IGZyb20gJy4vc3luY1N0YXRlcy5mdW5jdGlvbi5qcyc7XG4vKiogQ3JlYXRlIGEgU3ViamVjdCB0aGF0IG9uIHVwZGF0ZXMgd2lsbCBzeW5jIHN0YXRlIHZhbHVlcyB0byBrZWVwIGNoYWluZWQgZnVuY3Rpb25zIHVzaW5nIGxhdGVzdCB2YXJpYWJsZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJqZWN0KGluaXRpYWxWYWx1ZSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmIChzdXBwb3J0KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdChpbml0aWFsVmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdWJqZWN0KGluaXRpYWxWYWx1ZSk7XG59XG5zdWJqZWN0Ll92YWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG9sZGVzdFN0YXRlID0gc3RhdGUoZnVuY3Rpb24gc3ViamVjdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdGVBcnJheTogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlQXJyYXksXG4gICAgICAgICAgICBzdGF0ZXM6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZXMsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3Qgbm93U3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKCk7XG4gICAgcmV0dXJuIHN0YXRlKGZ1bmN0aW9uIHN1YmplY3RWYWx1ZSgpIHtcbiAgICAgICAgY29uc3Qgc3ViamVjdCA9IG5ldyBWYWx1ZVN1YmplY3QodmFsdWUpLnBpcGUoeCA9PiB7XG4gICAgICAgICAgICBvbGRTeW5jU3RhdGVzKG5vd1N1cHBvcnQuc3RhdGUsIG9sZGVzdFN0YXRlLnN0YXRlQXJyYXksIG5vd1N1cHBvcnQuc3RhdGVzLCBvbGRlc3RTdGF0ZS5zdGF0ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBhbGwoYXJncykge1xuICAgIGNvbnN0IG9sZGVzdFN0YXRlID0gc3RhdGUoKCkgPT4gKHtcbiAgICAgICAgc3RhdGVBcnJheTogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlQXJyYXksXG4gICAgICAgIHN0YXRlczogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlcyxcbiAgICB9KSk7XG4gICAgY29uc3Qgbm93U3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKCk7XG4gICAgcmV0dXJuIFN1YmplY3QuYWxsKGFyZ3MpLnBpcGUoeCA9PiB7XG4gICAgICAgIG9sZFN5bmNTdGF0ZXMobm93U3VwcG9ydC5zdGF0ZSwgb2xkZXN0U3RhdGUuc3RhdGVBcnJheSwgbm93U3VwcG9ydC5zdGF0ZXMsIG9sZGVzdFN0YXRlLnN0YXRlcyk7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH0pO1xufVxuc3ViamVjdC5hbGwgPSBhbGw7XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuLyoqIFVzZWQgZm9yIHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gcmVtYWluIHRoZSBzYW1lIHZhcmlhYmxlIGR1cmluZyByZW5kZXIgcGFzc2VzLiBJZiBkZWZhdWx0VmFsdWUgaXMgYSBmdW5jdGlvbiBpdCBpcyBjYWxsZWQgb25seSBvbmNlLCBpdHMgcmV0dXJuIHZhbHVlIGlzIGZpcnN0IHN0YXRlLCBhbmQgbGV0IHZhbHVlIGNhbiBjaGFuZ2VkICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVzKHNldHRlcikge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICByZXR1cm4gY29uZmlnLmhhbmRsZXJzLnN0YXRlc0hhbmRsZXIoc2V0dGVyKTtcbn1cbiIsImltcG9ydCB7IHNpZ25hbCB9IGZyb20gJy4vc2lnbmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHN0YXRlcyB9IGZyb20gJy4vc3RhdGVzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHdhdGNoIH0gZnJvbSAnLi93YXRjaC5mdW5jdGlvbi5qcyc7XG4vKipcbiAqIEVuYWJsZXMgdGhlIGFiaWxpdHkgdG8gbWFpbnRhaW4gYSBjaGFuZ2UgdG8gYSBwcm9wcyB2YWx1ZSB1bnRpbCB0aGUgcHJvcCBpdHNlbGYgY2hhbmdlc1xuICogQHBhcmFtIHByb3AgdHlwaWNhbGx5IHRoZSBuYW1lIG9mIGFuIGV4aXN0aW5nIHByb3BcbiAqIEByZXR1cm5zIGltbWVkaWF0ZWx5IGNhbGwgdGhlIHJldHVybmVkIGZ1bmN0aW9uOiBsZXRQcm9wKHkpKHggPT4gW3ksIHk9eF0pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXRQcm9wKHNldHRlcikge1xuICAgIGNvbnN0IHByb3BTdGF0ZXMyID0gc2lnbmFsKFtdKTtcbiAgICBjb25zdCBwYXNzZXMgPSBzaWduYWwoMCk7XG4gICAgY29uc3QgcGFzc2VkT24gPSBzaWduYWwoMCk7XG4gICAgbGV0IG5vd1ZhbHVlcyA9IFtdO1xuICAgIGxldCBwYXNzZWQgPSAwO1xuICAgIHBhc3NlZE9uLnZhbHVlID0gcGFzc2VzLnZhbHVlO1xuICAgIHNldHRlcigoLi4udmFsdWVzKSA9PiB7XG4gICAgICAgIG5vd1ZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xuICAgIH0pO1xuICAgIC8vIFdoZW4gdGhlIHdhdGNoZWQgdmFyaWFibGUgY2hhbmdlcywgdGhlbiB0aGUgbG9jYWwgcHJvcCB2YXJpYWJsZSBoYXMgdG8gdXBkYXRlXG4gICAgd2F0Y2gobm93VmFsdWVzLCAoKSA9PiB7XG4gICAgICAgICsrcGFzc2VkOyAvLyBmaXJzdCB0aW1lIHZhbHVlcyBhbmQgY2hhbmdlZCB2YWx1ZXMgY2F1c2UgbmV3IHN0YXRlXG4gICAgICAgIHByb3BTdGF0ZXMyLnZhbHVlID0gbm93VmFsdWVzO1xuICAgICAgICBzZXR0ZXIoKCkgPT4gbm93VmFsdWVzKTtcbiAgICB9KTtcbiAgICAvLyBjYWxsZWQgYW5kIG9ubHkgdXNlZCBkdXJpbmcgc3luYydpbmcgcHJvY2Vzc2VzXG4gICAgc3RhdGVzKChfeCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIC8vIG5vdyBpdHMgY29sbGVjdGlvbiBvZiB2YXJpYWJsZXMgdGltZVxuICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgICBzZXR0ZXIoKC4uLnZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZGlyZWN0aW9uIHx8IGRpcmVjdGlvbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3RhdGVzMi52YWx1ZSA9IHZhbHVlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXNzZWRPbi52YWx1ZSA9IHBhc3Nlcy52YWx1ZTtcbiAgICAgICAgICAgICsrcGFzc2VzLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaW4gYW4gaW5zeW5jIGNhbGwsIHdlIGRvIG5vdCBjYXJlIGFib3V0IHRoZSB2YWx1ZXMgaGVyZVxuICAgICAgICBzZXR0ZXIoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICArK3Bhc3NlZDtcbiAgICByZXR1cm4gcHJvcFN0YXRlczIudmFsdWU7XG59XG4iLCJpbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5mdW5jdGlvbi5qcyc7XG5mdW5jdGlvbiBnZXRCbGFua0RpZmZNZW1vcnkoKSB7XG4gICAgcmV0dXJuIHsgc3RhdGVEaWZmOiAwLCBwcm92aWRlcjogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgcHJvdmlkZXJzID0ge1xuICAgIGNyZWF0ZTogKGNvbnN0cnVjdE1ldGhvZCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZURpZmZNZW1vcnkgPSBzdGF0ZShnZXRCbGFua0RpZmZNZW1vcnkpO1xuICAgICAgICAvLyBtaW1pYyBob3cgbWFueSBzdGF0ZXMgd2VyZSBjYWxsZWQgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgaWYgKHN0YXRlRGlmZk1lbW9yeS5zdGF0ZURpZmYpIHtcbiAgICAgICAgICAgIGxldCB4ID0gc3RhdGVEaWZmTWVtb3J5LnN0YXRlRGlmZjtcbiAgICAgICAgICAgIHdoaWxlICh4LS0pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RhdGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgICAgICAgICBjb25zdCBvbGRTdGF0ZUNvdW50ID0gc3RhdGVDb25maWcuc3RhdGVBcnJheS5sZW5ndGg7XG4gICAgICAgICAgICAvLyBQcm92aWRlcnMgd2l0aCBwcm92aWRlciByZXF1aXJlbWVudHMganVzdCBuZWVkIHRvIHVzZSBwcm92aWRlcnMuY3JlYXRlKCkgYW5kIHByb3ZpZGVycy5pbmplY3QoKVxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBjb25zdHJ1Y3RNZXRob2QucHJvdG90eXBlID8gbmV3IGNvbnN0cnVjdE1ldGhvZCgpIDogY29uc3RydWN0TWV0aG9kKCk7XG4gICAgICAgICAgICBjb25zdCBzdXBwb3J0ID0gc3RhdGVDb25maWcuc3VwcG9ydDtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlRGlmZiA9IHN0YXRlQ29uZmlnLnN0YXRlQXJyYXkubGVuZ3RoIC0gb2xkU3RhdGVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0ge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdE1ldGhvZCxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICBzdGF0ZURpZmYsXG4gICAgICAgICAgICAgICAgb3duZXI6IHN1cHBvcnQsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXRlRGlmZk1lbW9yeS5wcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzIHx8IFtdO1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xuICAgICAgICAgICAgc3RhdGVEaWZmTWVtb3J5LnN0YXRlRGlmZiA9IHN0YXRlRGlmZjtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNtID0gY29uc3RydWN0TWV0aG9kO1xuICAgICAgICBjb25zdCBjb21wYXJlVG8gPSBjbS5jb21wYXJlVG8gPSBjbS50b1N0cmluZygpO1xuICAgICAgICBzdGF0ZURpZmZNZW1vcnkucHJvdmlkZXIuY29uc3RydWN0TWV0aG9kLmNvbXBhcmVUbyA9IGNvbXBhcmVUbztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHsobmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVCkgfCAoKSA9PiBUfSBjb25zdHJ1Y3RvclxuICAgICAqIEByZXR1cm5zIHtUfVxuICAgICAqL1xuICAgIGluamVjdDogcHJvdmlkZXJJbmplY3Rcbn07XG5mdW5jdGlvbiBwcm92aWRlckluamVjdChjb25zdHJ1Y3Rvcikge1xuICAgIC8vIGZpbmQgb25jZSwgcmV0dXJuIHNhbWUgZXZlcnkgdGltZSBhZnRlclxuICAgIHJldHVybiBzdGF0ZShmdW5jdGlvbiBwcm92aWRlckluamVjdFN0YXRlKCkge1xuICAgICAgICAvLyBjb25zdCBtZW1vcnkgPSBzZXRVc2UubWVtb3J5XG4gICAgICAgIGNvbnN0IGNtID0gY29uc3RydWN0b3I7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVUbyA9IGNtLmNvbXBhcmVUbyA9IGNtLmNvbXBhcmVUbyB8fCBjb25zdHJ1Y3Rvci50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTsgLy8gbWVtb3J5LnN0YXRlQ29uZmlnLnN1cHBvcnQgYXMgQW55U3VwcG9ydFxuICAgICAgICBjb25zdCBwcm92aWRlcnMgPSBbXTtcbiAgICAgICAgbGV0IG93bmVyID0ge1xuICAgICAgICAgICAgb3duZXJTdXBwb3J0OiBzdXBwb3J0Lm93bmVyU3VwcG9ydFxuICAgICAgICB9O1xuICAgICAgICB3aGlsZSAob3duZXIub3duZXJTdXBwb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBvd25HbG9iYWwgPSBvd25lci5vd25lclN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgICAgICBjb25zdCBvd25lclByb3ZpZGVycyA9IG93bkdsb2JhbC5wcm92aWRlcnM7XG4gICAgICAgICAgICBpZiAoIW93bmVyUHJvdmlkZXJzKSB7XG4gICAgICAgICAgICAgICAgb3duZXIgPSBvd25lci5vd25lclN1cHBvcnQ7IC8vIGNhdXNlIHJlbG9vcCBjaGVja2luZyBuZXh0IHBhcmVudFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBvd25lclByb3ZpZGVycy5maW5kKHByb3ZpZGVyID0+IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uc3RydWN0b3JNYXRjaCA9IHByb3ZpZGVyLmNvbnN0cnVjdE1ldGhvZC5jb21wYXJlVG8gPT09IGNvbXBhcmVUbztcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RydWN0b3JNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwcm92aWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gZ2xvYmFsLnByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgfHwgW107XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLmNoaWxkcmVuLnB1c2goc3VwcG9ydCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyLmluc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3duZXIgPSBvd25lci5vd25lclN1cHBvcnQ7IC8vIGNhdXNlIHJlbG9vcCBjaGVja2luZyBuZXh0IHBhcmVudFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1zZyA9IGBDb3VsZCBub3QgaW5qZWN0IHByb3ZpZGVyOiAke2NvbnN0cnVjdG9yLm5hbWV9ICR7Y29uc3RydWN0b3J9YDtcbiAgICAgICAgY29uc29sZS53YXJuKGAke21zZ30uIEF2YWlsYWJsZSBwcm92aWRlcnNgLCBwcm92aWRlcnMpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCBjYWxsYmFja1N0YXRlVXBkYXRlIGZyb20gJy4vY2FsbGJhY2tTdGF0ZVVwZGF0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc3luY0Vycm9yIH0gZnJvbSAnLi9jYWxsYmFja01ha2VyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG4vKiogV3JhcCBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjay4gQWZ0ZXIgdGhlIHdyYXBwZXIgYW5kIGZ1bmN0aW9uIGFyZSBjYWxsZWQsIGEgcmVuZGVyaW5nIGN5Y2xlIHdpbGwgdXBkYXRlIGRpc3BsYXkgKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxsYmFjayhjYWxsYmFjaykge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmICghc3VwcG9ydCkge1xuICAgICAgICB0aHJvdyBzeW5jRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVUcmlnZ2VyKHN1cHBvcnQsIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZywgLy8gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlQXJyYXlcbiAgICBjYWxsYmFjayk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJpZ2dlcihzdXBwb3J0LCBvbGRTdGF0ZSwgdG9DYWxsYmFjaykge1xuICAgIC8vIGNvbnN0IG9sZFN0YXRlcyA9IFsuLi5vbGRTdGF0ZS5zdGF0ZXNdXG4gICAgY29uc3Qgb2xkU3RhdGVzID0gb2xkU3RhdGUuc3RhdGVzO1xuICAgIHJldHVybiBmdW5jdGlvbiB0cmlnZ2VyKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tNYWtlciA9IHN1cHBvcnQuY29udGV4dC5yZW5kZXJDb3VudCA+IDA7XG4gICAgICAgIGlmIChjYWxsYmFja01ha2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tTdGF0ZVVwZGF0ZShzdXBwb3J0LCBvbGRTdGF0ZXMsIHRvQ2FsbGJhY2ssIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGFyZSBpbiBzeW5jIHdpdGggcmVuZGVyaW5nLCBqdXN0IHJ1biBjYWxsYmFjayBuYXR1cmFsbHlcbiAgICAgICAgcmV0dXJuIHRvQ2FsbGJhY2soLi4uYXJncyk7XG4gICAgfTtcbn1cbiIsImltcG9ydCB7IHJlbmRlclN1cHBvcnQgfSBmcm9tICcuLi9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGxiYWNrU3RhdGVVcGRhdGUoc3VwcG9ydCwgb2xkU3RhdGVzLCBjYWxsYmFjaywgLi4uYXJncykge1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgY29uc3QgbmV3ZXN0U3VwcG9ydCA9IGdsb2JhbC5uZXdlc3Q7XG4gICAgLy8gTkVXRVNUIFVQREFURSBPTERFU1Q6IGVuc3VyZSB0aGF0IHRoZSBvbGRlc3QgaGFzIHRoZSBsYXRlc3QgdmFsdWVzIGZpcnN0XG4gICAgLy9zeW5jU3RhdGVzQXJyYXkobmV3ZXN0U3VwcG9ydC5zdGF0ZXMsIG9sZFN0YXRlcylcbiAgICAvLyBydW4gdGhlIGNhbGxiYWNrXG4gICAgY29uc3QgbWF5YmVQcm9taXNlID0gY2FsbGJhY2soLi4uYXJncyk7XG4gICAgcmVuZGVyU3VwcG9ydChuZXdlc3RTdXBwb3J0KTtcbiAgICBpZiAoaXNQcm9taXNlKG1heWJlUHJvbWlzZSkpIHtcbiAgICAgICAgbWF5YmVQcm9taXNlLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyU3VwcG9ydChuZXdlc3RTdXBwb3J0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHJldHVybiB1bmRlZmluZWQgYXMgVFxuICAgIHJldHVybiBtYXliZVByb21pc2U7XG59XG4iLCJpbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IFN5bmNDYWxsYmFja0Vycm9yIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGNyZWF0ZVRyaWdnZXIgfSBmcm9tICcuL2NhbGxiYWNrLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBjb25zdCBjYWxsYmFja01ha2VyID0gKCkgPT4ge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIC8vIGNhbGxiYWNrIGFzIHR5cGVvZiBpbm5lckNhbGxiYWNrXG4gICAgaWYgKCFzdXBwb3J0KSB7XG4gICAgICAgIHRocm93IHN5bmNFcnJvcjtcbiAgICB9XG4gICAgY29uc3Qgb2xkU3RhdGUgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7IC8vIC5zdGF0ZUFycmF5XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRyaWdnZXJNYWtlcihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gY3JlYXRlVHJpZ2dlcihzdXBwb3J0LCBvbGRTdGF0ZSwgY2FsbGJhY2spO1xuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHN5bmNFcnJvciA9IG5ldyBTeW5jQ2FsbGJhY2tFcnJvcignY2FsbGJhY2soKSB3YXMgY2FsbGVkIG91dHNpZGUgb2Ygc3luY2hyb25vdXMgcmVuZGVyaW5nLiBVc2UgYGNhbGxiYWNrID0gY2FsbGJhY2tNYWtlcigpYCB0byBjcmVhdGUgYSBjYWxsYmFjayB0aGF0IGNvdWxkIGJlIGNhbGxlZCBvdXQgb2Ygc3luYyB3aXRoIHJlbmRlcmluZycpO1xuIiwiaW1wb3J0IHsgY2hlY2tUb1Jlc29sdmVQcm9taXNlIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9jaGVja1RvUmVzb2x2ZVByb21pc2UuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5mdW5jdGlvbi5qcyc7XG4vKiogcnVucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIG9uZSB0aW1lIGFuZCBuZXZlciBhZ2Fpbi4gU2FtZSBhcyBjYWxsaW5nIHN0YXRlKCgpID0+IC4uLikgKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkluaXQoY2FsbGJhY2spIHtcbiAgICBzdGF0ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgICAgIGNvbnN0IG5vd1N1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgICAgICByZXR1cm4gY2hlY2tUb1Jlc29sdmVQcm9taXNlKHJlc3VsdCwgbm93U3VwcG9ydCwgbm93U3VwcG9ydC5jb250ZXh0Lmdsb2JhbCwgJ29uSW5pdCcsIHsgcmVzb2x2ZVByb21pc2UsIHJlc29sdmVWYWx1ZSB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHgpIHtcbiAgICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVWYWx1ZSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gXCIuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gXCIuL3N0YXRlLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gb25EZXN0cm95KGNhbGxiYWNrKSB7XG4gICAgc3RhdGUoZnVuY3Rpb24gc3RhdGVEZXN0cm95KCkge1xuICAgICAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICAgICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgZ2xvYmFsLmRlc3Ryb3kkLnRvQ2FsbGJhY2soY2FsbGJhY2spO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU2lnbmFsIH0gZnJvbSAnLi9zaWduYWwuZnVuY3Rpb24uanMnO1xuLyoqIHJldHVybnMgYSBzaWduYWwgdGhhdCBjb250YWlucyBhbiBhcnJheSBhbmQgbW9ja3MgYWN0aW5nIGxpa2UgYW4gYXJyYXkgdG8gc3VwcG9ydCByb290IGFycmF5IGZ1bmN0aW9uYWxpdHkgKi9cbmV4cG9ydCBmdW5jdGlvbiBhcnJheShpbml0aWFsVmFsdWUgPSBbXSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmIChzdXBwb3J0KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSgoKSA9PiBmaXJzdFNpZ25hbChTaWduYWwoaW5pdGlhbFZhbHVlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RTaWduYWwoU2lnbmFsKGluaXRpYWxWYWx1ZSkpO1xufVxuZnVuY3Rpb24gZmlyc3RTaWduYWwoc2lnKSB7XG4gICAgY29uc3QgZWRpdG9ycyA9IFsncHVzaCcsICdwb3AnLCAnc3BsaWNlJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnXTtcbiAgICBjb25zdCByZWFkZXJzID0gWydtYXAnLCAncmVkdWNlJywgJ2ZvckVhY2gnLCAnZXZlcnknXTtcbiAgICBjb25zdCBvdmVyd3JpdGVFbWl0dGVyID0gKGFjdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gcmVzaWduYWxbYWN0aW9uXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzaWcudmFsdWVbYWN0aW9uXSguLi5hcmdzKTtcbiAgICAgICAgICAgIHNpZy5lbWl0KHNpZy52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVzaWduYWwgPSBuZXcgUHJveHkoc2lnLCB7XG4gICAgICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIC8vIElmIGFjY2Vzc2luZyBudW1lcmljIGluZGV4IGxpa2UgJzAnLCAnMScsIGV0Yy5cbiAgICAgICAgICAgIGlmICghaXNOYU4ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnLnZhbHVlW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdsZW5ndGgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZy52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWRpdG9ycy5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdmVyd3JpdGVFbWl0dGVyKHByb3ApO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBzaWcudmFsdWVbcHJvcF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZWFkZXJzLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZy52YWx1ZVtwcm9wXS5iaW5kKHNpZy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFpc05hTihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHNpZy52YWx1ZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHNpZy5lbWl0KHNpZy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgICAgICBzaWcudmFsdWUubGVuZ3RoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgc2lnLmVtaXQoc2lnLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFwcGxpZXMgdG8gdGhlIHNpZ25hbCBhbmQgbm90IHRoZSBzaWduYWwudmFsdWUgYXJyYXlcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHNpZ1twcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzaWduYWw7XG59XG4iLCJpbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSwgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZUNvbnRleHQoc3VwcG9ydCwgY29udGV4dHMpIHtcbiAgICBjb25zdCB0aGlzVGFnID0gc3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXNUYWcudmFsdWVzO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgY29uc3QgbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHtcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZU9uZUNvbnRleHQodmFsdWVzLCBpbmRleCwgY29udGV4dHMsIHN1cHBvcnQpO1xuICAgICAgICArK2luZGV4O1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dHM7XG59XG4vKiogcmV0dXJucyBib29sZWFuIG9mIGRpZCByZW5kZXIgKi9cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVPbmVDb250ZXh0KHZhbHVlcywgLy8gdGhlIGludGVycG9sYXRlZCB2YWx1ZXNcbmluZGV4LCBjb250ZXh0LCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IGNvbnRleHRbaW5kZXhdO1xuICAgIGlmIChjb250ZXh0SXRlbS5kZWxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc29tZSB2YWx1ZXMsIGxpa2Ugc3R5bGUsIGdldCByZWFycmFuZ2VkIGFuZCB0aGVyZSB2YWx1ZSBhcHBlYXJhbmNlIG1heSBub3QgbWF0Y2ggY29udGV4dCBhcHBlYXJhbmNlXG4gICAgY29uc3QgdmFsdWVJbmRleCA9IGNvbnRleHRJdGVtLnZhbHVlSW5kZXg7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZXNbdmFsdWVJbmRleF07XG4gICAgLy8gRG8gbm90IGNvbnRpbnVlIGlmIHRoZSB2YWx1ZSBpcyBqdXN0IHRoZSBzYW1lXG4gICAgaWYgKG5ld1ZhbHVlID09PSBjb250ZXh0SXRlbS52YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUobmV3VmFsdWUsIC8vIHZhbHVlVG9UYWdKc1ZhcihuZXdWYWx1ZSksXG4gICAgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgdmFsdWVzKTtcbiAgICByZW1vdmVDb250ZXh0SW5DeWNsZSgpO1xuICAgIGNvbnRleHRJdGVtLnZhbHVlID0gbmV3VmFsdWU7XG59XG4iLCJpbXBvcnQgeyBwYWludCwgcGFpbnRpbmcgfSBmcm9tICcuLi9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlQ29udGV4dCB9IGZyb20gJy4uLy4uL3RhZy9wcm9jZXNzVXBkYXRlQ29udGV4dC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3VwcG9ydEJ5KG9sZGVyU3VwcG9ydCwgbmV3ZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgY29udGV4dHMgPSBvbGRlclN1cHBvcnQuY29udGV4dC5jb250ZXh0cztcbiAgICB1cGRhdGVTdXBwb3J0VmFsdWVzQnkob2xkZXJTdXBwb3J0LCBuZXdlclN1cHBvcnQpO1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgcHJvY2Vzc1VwZGF0ZUNvbnRleHQob2xkZXJTdXBwb3J0LCBjb250ZXh0cyk7XG4gICAgLS1wYWludGluZy5sb2NrcztcbiAgICBwYWludCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVN1cHBvcnRWYWx1ZXNCeShvbGRlclN1cHBvcnQsIG5ld2VyU3VwcG9ydCkge1xuICAgIGNvbnN0IG5ld1RlbXBsYXRlID0gbmV3ZXJTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCB0ZW1wVGFnID0gbmV3ZXJTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgY29uc3QgdmFsdWVzID0gbmV3VGVtcGxhdGUudmFsdWVzIHx8IHRlbXBUYWcudmFsdWVzO1xuICAgIGNvbnN0IHRhZyA9IG9sZGVyU3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIHRhZy52YWx1ZXMgPSB2YWx1ZXM7XG59XG4iLCJpbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGlzVGFnQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBoYW5kbGVTdGlsbFRhZyB9IGZyb20gJy4vaGFuZGxlU3RpbGxUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZVN1cHBvcnQgfSBmcm9tICcuLi9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbi8qKiByZXN1bHQgaXMgYW4gaW5kaWNhdGlvbiB0byBpZ25vcmUgZnVydGhlciBwcm9jZXNzaW5nIGJ1dCB0aGF0IGRvZXMgbm90IHNlZW0gaW4gdXNlIGFueW1vcmUgKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlVcGRhdGVUb1RhZyhjb250ZXh0SXRlbSwgbmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5vd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBpc0NvbXAgPSBpc1RhZ0NvbXBvbmVudChuZXdWYWx1ZSk7XG4gICAgaWYgKGlzQ29tcCkge1xuICAgICAgICBpZiAoY29udGV4dEl0ZW0uZ2xvYmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJlcGFyZVVwZGF0ZVRvQ29tcG9uZW50KG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICAgICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBuZXdWYWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGRldGVjdCBpZiBwcmV2aW91cyB2YWx1ZSB3YXMgYSB0YWdcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgaWYgKGdsb2JhbCkge1xuICAgICAgICBjb250ZXh0SXRlbS5vbGRUYWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgICAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IG5ld1ZhbHVlO1xuICAgICAgICAvLyBpdHMgaHRtbC9kb20gYmFzZWQgdGFnXG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBnbG9iYWwubmV3ZXN0O1xuICAgICAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAobmV3VmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVTdGlsbFRhZyhzdXBwb3J0LCBjb250ZXh0SXRlbSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICA7XG4gICAgbmV3VmFsdWUucHJvY2Vzc0luaXQobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIHVuZGVmaW5lZCwgLy8gYXBwZW5kVG8sXG4gICAgY29udGV4dEl0ZW0ucGxhY2Vob2xkZXIpO1xuICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBuZXdWYWx1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHByZXBhcmVVcGRhdGVUb0NvbXBvbmVudCh0ZW1wbGF0ZXIsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgLy8gV2hlbiBsYXN0IHZhbHVlIHdhcyBub3QgYSBjb21wb25lbnRcbiAgICBpZiAoIWdsb2JhbC5uZXdlc3QpIHtcbiAgICAgICAgO1xuICAgICAgICB0ZW1wbGF0ZXIucHJvY2Vzc0luaXQodGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCB1bmRlZmluZWQsIC8vIGFwcGVuZFRvLFxuICAgICAgICBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQob3duZXJTdXBwb3J0LCBzdXBwb3J0LCAvLyBsYXRlc3QgdmFsdWVcbiAgICBjb250ZXh0SXRlbSk7XG59XG4iLCJpbXBvcnQgeyB1cGRhdGVTdXBwb3J0QnkgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3VwZGF0ZVN1cHBvcnRCeS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdXBwb3J0IH0gZnJvbSAnLi4vY3JlYXRlU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlU3RpbGxUYWcob2xkU3VwcG9ydCwgc3ViamVjdCwgdmFsdWUsIG93bmVyU3VwcG9ydCkge1xuICAgIC8vIFZhbHVlIGlzIHJlc3VsdCBvZiBlaXRoZXIgdGFnKCgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExMzAxMFswXSkpIG9yICgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExMzAxMFsxXSlcbiAgICBsZXQgdGVtcGxhdGVyID0gdmFsdWUudGVtcGxhdGVyIHx8IHZhbHVlO1xuICAgIGNvbnN0IG9sZFR0YWcgPSBvbGRTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgaWYgKG9sZFR0YWcpIHtcbiAgICAgICAgY29uc3QgaW5uZXJIVE1MID0gb2xkVHRhZy5faW5uZXJIVE1MO1xuICAgICAgICBpZiAoaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAvLyBWYWx1ZSBoYXMgaW5uZXJIVE1MIHRoYXQgaXMgZWl0aGVyIHRhZygpIG9yIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExMzAxMFsyXSlcbiAgICAgICAgICAgIHRlbXBsYXRlciA9IHZhbHVlLm91dGVySFRNTCB8fCB2YWx1ZS5faW5uZXJIVE1MLm91dGVySFRNTDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2YWx1ZVN1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgY29uc3QgbGFzdFN1YmplY3QgPSBvbGRTdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3QgbmV3R2xvYmFsID0gbGFzdFN1YmplY3QuZ2xvYmFsO1xuICAgIGNvbnN0IG9sZGVzdCA9IG5ld0dsb2JhbC5vbGRlc3Q7XG4gICAgdXBkYXRlU3VwcG9ydEJ5KG9sZGVzdCwgdmFsdWVTdXBwb3J0KTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxMTMwMTA6IFtbXSwgW10sIFtdXSB9O1xuIiwiaW1wb3J0IHsgQmFzaWNUeXBlcywgVmFsdWVUeXBlcyB9IGZyb20gJy4uL2luZGV4LmpzJztcbmltcG9ydCB7IHRyeVVwZGF0ZVRvVGFnIH0gZnJvbSAnLi90cnlVcGRhdGVUb1RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnQXJyYXkgfSBmcm9tICcuL3Byb2Nlc3NUYWdBcnJheS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTm93UmVndWxhclZhbHVlIH0gZnJvbSAnLi9wcm9jZXNzUmVndWxhclZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldEFycmF5VGFnVmFyIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL2dldEFycmF5VGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRvRGlmZlZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpZ25vcmVPckRlc3Ryb3llZCkge1xuICAgIC8vIGlzIG5ldyB2YWx1ZSBhIHRhZz9cbiAgICBjb25zdCB0YWdKc1R5cGUgPSBuZXdWYWx1ZSAmJiBuZXdWYWx1ZS50YWdKc1R5cGU7XG4gICAgLy8gY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhclxuICAgIC8vIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gdmFsdWVUb1RhZ0pzVmFyKG5ld1ZhbHVlKVxuICAgIGlmICh0YWdKc1R5cGUpIHtcbiAgICAgICAgaWYgKHRhZ0pzVHlwZSA9PT0gVmFsdWVUeXBlcy5yZW5kZXJPbmNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5VXBkYXRlVG9UYWcoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgICBwcm9jZXNzVGFnQXJyYXkoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQpO1xuICAgICAgICBjb250ZXh0SXRlbS5vbGRUYWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgICAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IGdldEFycmF5VGFnVmFyKG5ld1ZhbHVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChuZXdWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgY29udGV4dEl0ZW0udmFsdWUgPSBuZXdWYWx1ZTsgLy8gZG8gbm90IHJlbmRlciBmdW5jdGlvbnMgdGhhdCBhcmUgbm90IGV4cGxpY2l0eSBkZWZpbmVkIGFzIHRhZyBodG1sIHByb2Nlc3NpbmdcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaWdub3JlT3JEZXN0cm95ZWQpIHtcbiAgICAgICAgcHJvY2Vzc05vd1JlZ3VsYXJWYWx1ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgdXBkYXRlVG9EaWZmVmFsdWUgfSBmcm9tICcuL3VwZGF0ZVRvRGlmZlZhbHVlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1N0aWxsU3Vic2NyaXB0aW9uKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgY29uc3QgaGFzQ2hhbmdlZCA9IGhhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tKFZhbHVlVHlwZXMuc3Vic2NyaWJlLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc0NoYW5nZWQ7XG4gICAgfVxuICAgIGlmICghc3ViQ29udGV4dCB8fCAhc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgc3ViQ29udGV4dC50YWdKc1ZhciA9IG5ld1ZhbHVlO1xuICAgIHN1YkNvbnRleHQudmFsdWVzSGFuZGxlcihzdWJDb250ZXh0Lmxhc3RWYWx1ZXMsIDApO1xuICAgIHJldHVybiAtMTtcbn1cbi8qKiB1c2VkIHRvIGhhbmRsZSB3aGVuIHZhbHVlIHdhcyBzdWJzY3JpYmUgYnV0IG5vdyBpcyBzb21ldGhpbmcgZWxzZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tKG9yaWdpbmFsVHlwZSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBpc0RpZmZlcmVudCA9ICFuZXdWYWx1ZSB8fCAhbmV3VmFsdWUudGFnSnNUeXBlIHx8IG5ld1ZhbHVlLnRhZ0pzVHlwZSAhPT0gb3JpZ2luYWxUeXBlO1xuICAgIGlmIChpc0RpZmZlcmVudCkge1xuICAgICAgICBjb25zdCBvbGRUYWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgICAgICBvbGRUYWdKc1Zhci5kZWxldGUoY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIHVwZGF0ZVRvRGlmZlZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgLy8gc3ViU3ViQ29udGV4dCxcbiAgICAgICAgb3duZXJTdXBwb3J0LCA5OSk7XG4gICAgICAgIHJldHVybiA5OTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIsIHByb2Nlc3NUYWcsIHRhZ0Zha2VUZW1wbGF0ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05ld1N1YmplY3RUYWcgfSBmcm9tICcuL3Byb2Nlc3NOZXdTdWJqZWN0VGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRG9tVGFnSW5pdCh2YWx1ZSwgLy8gU3RyaW5nVGFnLFxuY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xub3duZXJTdXBwb3J0LCAvLyBvd25pbmdTdXBwb3J0XG5hcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgdGFnID0gdmFsdWU7XG4gICAgbGV0IHRlbXBsYXRlciA9IHRhZy50ZW1wbGF0ZXI7XG4gICAgaWYgKCF0ZW1wbGF0ZXIpIHtcbiAgICAgICAgdGVtcGxhdGVyID0gdGFnRmFrZVRlbXBsYXRlcih0YWcpO1xuICAgIH1cbiAgICBjb25zdCBnbG9iYWwgPSBnZXROZXdHbG9iYWwoY29udGV4dEl0ZW0pO1xuICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc05ld1N1YmplY3RUYWcodGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICB9XG4gICAgZ2xvYmFsLm5ld2VzdCA9IG5ld1N1cHBvcnRCeVRlbXBsYXRlcih0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBwcm9jZXNzVGFnKG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0pO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0RvbVRhZ0luaXQgfSBmcm9tICcuL3VwZGF0ZS9wcm9jZXNzRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RhZ1ZhbHVlQ2hhbmdlLCBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0gfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tICcuL3VwZGF0ZS9mb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIHRvIG92ZXJyaWRlIHRoZSBodG1sYGAgcHJvY2Vzc2luZyB0aGF0IHdpbGwgZmlyc3QgcmVuZGVyIG91dGVySFRNTCBhbmQgdGhlbiBpdHMgaW5uZXJIVE1MICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc091dGVyRG9tVGFnSW5pdCh2YWx1ZSwgY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xub3duZXJTdXBwb3J0LCAvLyBvd25pbmdTdXBwb3J0XG5hcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3Qgb3V0ZXJIVE1MID0gdmFsdWUub3V0ZXJIVE1MO1xuICAgIHByb2Nlc3NEb21UYWdJbml0KG91dGVySFRNTCwgY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xuICAgIG93bmVyU3VwcG9ydCwgLy8gb3duaW5nU3VwcG9ydFxuICAgIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgIC8vIGNvbnRleHRJdGVtLmhhbmRsZXIgPSBmdW5jdGlvbiBvdXREb21UYWdIYW5sZGVyKFxuICAgIGNvbnN0IHRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgdGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSA9IGZ1bmN0aW9uIG91dERvbVRhZ0hhbmxkZXIodmFsdWUsIGNvbnRleHRJdGVtMiwgbmV3U3VwcG9ydCkge1xuICAgICAgICBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUoY29udGV4dEl0ZW0yLCB2YWx1ZT8ub3V0ZXJIVE1MIHx8IHZhbHVlLCBuZXdTdXBwb3J0KTtcbiAgICB9O1xuICAgIC8vIFRPRE86IE5vdCBiZXN0IGlkZWEgdG8gc3dhcCBvdXQgdGhlIG9yaWdpbmFsIHZhbHVlcyBjaGFuZ2VDaGVja2VyXG4gICAgdmFsdWUuY2hlY2tWYWx1ZUNoYW5nZSA9IGNoZWNrT3V0ZXJUYWdWYWx1ZUNoYW5nZTtcbn1cbmZ1bmN0aW9uIGNoZWNrT3V0ZXJUYWdWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICByZXR1cm4gY2hlY2tUYWdWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgLy8gKG5ld1ZhbHVlIGFzIFRhZyk/Lm91dGVySFRNTCB8fCBuZXdWYWx1ZSxcbiAgICBjb250ZXh0SXRlbSk7XG59XG4vKiogV2hlbiBydW50aW1lIGlzIGluIGJyb3dzZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJpbmdUYWcoc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgY29uc3QgdGFnID0ge1xuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIG93bmVyU3VwcG9ydDogZ2V0U3VwcG9ydEluQ3ljbGUoKSxcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLnRhZyxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NEb21UYWdJbml0LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrVGFnVmFsdWVDaGFuZ2UsXG4gICAgICAgIGRlbGV0ZTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBzdHJpbmdzLFxuICAgICAgICAvKiogVXNlZCB3aXRoaW4gYW4gYXJyYXkubWFwKCkgdGhhdCByZXR1cm5zIGh0bWwgYWthIGFycmF5Lm1hcCh4ID0+IGh0bWxgYC5rZXkoeCkpICovXG4gICAgICAgIGtleShhcnJheVZhbHVlKSB7XG4gICAgICAgICAgICB0YWcuYXJyYXlWYWx1ZSA9IGFycmF5VmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9LFxuICAgICAgICAvKiogYWthIHNldElubmVySFRNTCAqL1xuICAgICAgICBzZXRIVE1MOiBmdW5jdGlvbiBzZXRIVE1MKGlubmVySFRNTCkge1xuICAgICAgICAgICAgaW5uZXJIVE1MLm91dGVySFRNTCA9IHRhZztcbiAgICAgICAgICAgIHRhZy5faW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICAgICAgICAgICAgaW5uZXJIVE1MLm9sZFByb2Nlc3NJbml0ID0gaW5uZXJIVE1MLnByb2Nlc3NJbml0O1xuICAgICAgICAgICAgLy8gVE9ETzogTm90IGJlc3QgaWRlYSB0byBvdmVycmlkZSB0aGUgaW5pdFxuICAgICAgICAgICAgaW5uZXJIVE1MLnByb2Nlc3NJbml0ID0gcHJvY2Vzc091dGVyRG9tVGFnSW5pdDtcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBVc2VkIHdpdGhpbiB0aGUgb3V0ZXJIVE1MIHRhZyB0byBzaWduaWZ5IHRoYXQgaXQgY2FuIHVzZSBpbm5lckhUTUwgKi9cbiAgICAgICAgYWNjZXB0SW5uZXJIVE1MOiBmdW5jdGlvbiBhY2NlcHRJbm5lckhUTUwodXNlVGFnVmFyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBkYXRhdHlwZVxuICAgICAgICAgICAgdXNlVGFnVmFyLm93bmVyID0gdGFnO1xuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfSxcbiAgICAgICAgaHRtbDogZnVuY3Rpb24gaHRtbChzdHJpbmdzLCB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHRhZy5jaGlsZHJlbiA9IHsgc3RyaW5ncywgdmFsdWVzIH07XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFnLCAnaW5uZXJIVE1MJywge1xuICAgICAgICBzZXQoaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFnLnNldEhUTUwoaW5uZXJIVE1MKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGFnO1xufVxuIiwiaW1wb3J0IHsgZ2V0RG9tVGFnIH0gZnJvbSAnLi9nZXREb21UYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFRlbXBsYXRlclJlc3VsdCB9IGZyb20gJy4vZ2V0VGVtcGxhdGVyUmVzdWx0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN0cmluZ1RhZyB9IGZyb20gJy4vcHJvY2Vzc091dGVyRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG4vKiogVXNlZCBhcyBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMTMzODNbMV0pICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbChzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgICBjb25zdCBzdHJpbmdUYWcgPSBnZXRTdHJpbmdUYWcoc3RyaW5ncywgdmFsdWVzKTtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBnZXRUZW1wbGF0ZXJSZXN1bHQoUHJvcFdhdGNoZXMuTk9ORSk7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHN0cmluZ1RhZztcbiAgICBzdHJpbmdUYWcudGVtcGxhdGVyID0gdGVtcGxhdGVyO1xuICAgIHJldHVybiBzdHJpbmdUYWc7XG59XG5odG1sLmRvbSA9IGZ1bmN0aW9uIChkb20sIC4uLnZhbHVlcykge1xuICAgIHJldHVybiBnZXREb21UYWcoZG9tLCB2YWx1ZXMpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxMTMzODM6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiB9XV0gfTtcbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4vY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NEb21UYWdJbml0IH0gZnJvbSAnLi91cGRhdGUvcHJvY2Vzc0RvbVRhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZSwgZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgcHJvY2Vzc091dGVyRG9tVGFnSW5pdCB9IGZyb20gJy4vcHJvY2Vzc091dGVyRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuLyoqIFdoZW4gY29tcGlsZWQgdG8gdGhlbiBydW4gaW4gYnJvd3NlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERvbVRhZyhkb20sIHZhbHVlcykge1xuICAgIGNvbnN0IHRhZyA9IHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBvd25lclN1cHBvcnQ6IGdldFN1cHBvcnRJbkN5Y2xlKCksXG4gICAgICAgIGRvbSxcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLmRvbSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NEb21UYWdJbml0LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrVGFnVmFsdWVDaGFuZ2UsXG4gICAgICAgIGRlbGV0ZTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBrZXk6IGZ1bmN0aW9uIGtleUZ1bihhcnJheVZhbHVlKSB7XG4gICAgICAgICAgICB0YWcuYXJyYXlWYWx1ZSA9IGFycmF5VmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIVE1MOiBmdW5jdGlvbiBzZXRIVE1MKGlubmVySFRNTCkge1xuICAgICAgICAgICAgaW5uZXJIVE1MLm91dGVySFRNTCA9IHRhZztcbiAgICAgICAgICAgIHRhZy5faW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICAgICAgICAgICAgaW5uZXJIVE1MLm9sZFByb2Nlc3NJbml0ID0gaW5uZXJIVE1MLnByb2Nlc3NJbml0O1xuICAgICAgICAgICAgLy8gVE9ETzogTm90IGJlc3QgaWRlYSB0byBvdmVycmlkZSB0aGUgaW5pdFxuICAgICAgICAgICAgaW5uZXJIVE1MLnByb2Nlc3NJbml0ID0gcHJvY2Vzc091dGVyRG9tVGFnSW5pdDtcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBVc2VkIHdpdGhpbiB0aGUgb3V0ZXJIVE1MIHRhZyB0byBzaWduaWZ5IHRoYXQgaXQgY2FuIHVzZSBpbm5lckhUTUwgKi9cbiAgICAgICAgYWNjZXB0SW5uZXJIVE1MOiBmdW5jdGlvbiBhY2NlcHRJbm5lckhUTUwodXNlVGFnVmFyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBkYXRhdHlwZVxuICAgICAgICAgICAgdXNlVGFnVmFyLm93bmVyID0gdGFnO1xuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfSxcbiAgICAgICAgaHRtbDoge1xuICAgICAgICAgICAgZG9tOiBmdW5jdGlvbiBkb20oZG9tLCAvLyBPYmplY3RDaGlsZHJlblxuICAgICAgICAgICAgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgdGFnLmNoaWxkcmVuID0geyBkb206IGRvbSwgdmFsdWVzIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhZywgJ2lubmVySFRNTCcsIHtcbiAgICAgICAgc2V0KGlubmVySFRNTCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZy5zZXRIVE1MKGlubmVySFRNTCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRhZztcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGFwcEVsZW1lbnRzLCBidWlsZEJlZm9yZUVsZW1lbnQgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJUYWdFbGVtZW50KHN1cHBvcnQsIGVsZW1lbnQsIGdsb2JhbCwgdGVtcGxhdGVyLCBhcHAsIHBsYWNlaG9sZGVyKSB7XG4gICAgY29uc29sZS5kZWJ1Zygn8J+Pt++4jyBCdWlsZGluZyBlbGVtZW50IGludG8gdGFnLi4uJywgeyBlbGVtZW50LCBhcHAsIHN1cHBvcnQgfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGVsZW1lbnQsIHVuZGVmaW5lZCk7XG4gICAgZ2xvYmFsLm9sZGVzdCA9IHN1cHBvcnQ7XG4gICAgZ2xvYmFsLm5ld2VzdCA9IHN1cHBvcnQ7XG4gICAgbGV0IHNldFVzZSA9IHRlbXBsYXRlci5zZXRVc2U7XG4gICAgaWYgKHRlbXBsYXRlci50YWdKc1R5cGUgIT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIpIHtcbiAgICAgICAgY29uc3Qgd3JhcCA9IGFwcDtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSB3cmFwLm9yaWdpbmFsO1xuICAgICAgICBzZXRVc2UgPSBvcmlnaW5hbC5zZXRVc2U7XG4gICAgICAgIG9yaWdpbmFsLmlzQXBwID0gdHJ1ZTtcbiAgICB9XG4gICAgO1xuICAgIGVsZW1lbnQuc2V0VXNlID0gc2V0VXNlO1xuICAgIGVsZW1lbnQuVmFsdWVUeXBlcyA9IFZhbHVlVHlwZXM7XG4gICAgYXBwRWxlbWVudHMucHVzaCh7IGVsZW1lbnQsIHN1cHBvcnQgfSk7XG4gICAgY29uc3QgbmV3RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgbmV3RnJhZ21lbnQuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuICAgIGZvciAoY29uc3QgZG9tSXRlbSBvZiByZXN1bHQuZG9tKSB7XG4gICAgICAgIHB1dE9uZURvbURvd24oZG9tSXRlbSwgbmV3RnJhZ21lbnQpO1xuICAgIH1cbiAgICBjb25zb2xlLmRlYnVnKCfwn4+377iPIEVsZW1lbnQgVGFnIERPTSBidWlsdCDinIUnKTtcbiAgICByZXR1cm4gbmV3RnJhZ21lbnQ7XG59XG5mdW5jdGlvbiBwdXRPbmVEb21Eb3duKGRvbSwgbmV3RnJhZ21lbnQpIHtcbiAgICBpZiAoZG9tLmRvbUVsZW1lbnQpIHtcbiAgICAgICAgbmV3RnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9tLmRvbUVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoZG9tLm1hcmtlcikge1xuICAgICAgICBuZXdGcmFnbWVudC5hcHBlbmRDaGlsZChkb20ubWFya2VyKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRCYXNlU3VwcG9ydCwgdXBncmFkZUJhc2VUb1N1cHBvcnQgfSBmcm9tICcuL2NyZWF0ZUh0bWxTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBsb2FkTmV3QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBzdWJqZWN0LCBhcHBFbGVtZW50KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgY29uc3QgbmV3U3VwcG9ydCA9IGdldEJhc2VTdXBwb3J0KHRlbXBsYXRlciwgc3ViamVjdCk7XG4gICAgdXBncmFkZUJhc2VUb1N1cHBvcnQodGVtcGxhdGVyLCBuZXdTdXBwb3J0LCBuZXdTdXBwb3J0KTtcbiAgICBuZXdTdXBwb3J0LmFwcEVsZW1lbnQgPSBhcHBFbGVtZW50O1xuICAgIGdsb2JhbC5vbGRlc3QgPSBnbG9iYWwub2xkZXN0IHx8IG5ld1N1cHBvcnQ7XG4gICAgZ2xvYmFsLm5ld2VzdCA9IG5ld1N1cHBvcnQ7XG4gICAgcmV0dXJuIG5ld1N1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyB0YWdzIH0gZnJvbSAnLi4vdGFnL3RhZy51dGlscy5qcyc7XG5pbXBvcnQgeyBlbXB0eSwgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuL2Rlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50LCBwYWludGluZyB9IGZyb20gJy4vcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL3RhZy9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJ1bkFmdGVyUmVuZGVyIH0gZnJvbSAnLi4vcmVuZGVyL2FmdGVyUmVuZGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXcmFwIH0gZnJvbSAnLi9leGVjdXRlV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZWdpc3RlclRhZ0VsZW1lbnQgfSBmcm9tICcuL3JlZ2lzdGVyTmV3VGFnRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBsb2FkTmV3QmFzZVN1cHBvcnQgfSBmcm9tICcuLi90YWcvbG9hZE5ld0Jhc2VTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlU3RhdGUgfSBmcm9tICcuLi9zdGF0ZS9zdGF0ZS51dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVGFnRWxlbWVudChhcHAsIGdsb2JhbCwgdGVtcGxhdGVyLCB0ZW1wbGF0ZXIyLCBlbGVtZW50LCBzdWJqZWN0LCBpc0FwcEZ1bmN0aW9uKSB7XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlbXB0eSk7XG4gICAgdGFncy5wdXNoKCh0ZW1wbGF0ZXIud3JhcHBlciB8fCB7IG9yaWdpbmFsOiB0ZW1wbGF0ZXIgfSkpO1xuICAgIGNvbnN0IHN1cHBvcnQgPSBydW5XcmFwcGVyKHRlbXBsYXRlciwgcGxhY2Vob2xkZXIsIGVsZW1lbnQsIHN1YmplY3QsIGlzQXBwRnVuY3Rpb24pO1xuICAgIGdsb2JhbC5pc0FwcCA9IHRydWU7XG4gICAgaWYgKGlzQXBwRnVuY3Rpb24pIHtcbiAgICAgICAgdGVtcGxhdGVyMi50YWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgfVxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB0YWdFbGVtZW50LCBlbGVtZW50IHJlY2VpdmVkIGlzIHR5cGUgJHt0eXBlb2YgZWxlbWVudH0gYW5kIG5vdCB0eXBlIEVsZW1lbnRgKTtcbiAgICB9XG4gICAgLy8gZW5hYmxlcyBobXIgZGVzdHJveSBzbyBpdCBjYW4gY29udHJvbCBlbnRpcmUgYXBwXG4gICAgO1xuICAgIGVsZW1lbnQuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gZ2xvYmFsLmV2ZW50cztcbiAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbC5ldmVudHMgPSB7fTtcbiAgICAgICAgKytwYWludGluZy5sb2NrcztcbiAgICAgICAgY29uc3QgdG9Bd2FpdCA9IGRlc3Ryb3lTdXBwb3J0KHN1cHBvcnQsIGdsb2JhbCk7IC8vIG5ldmVyIHJldHVybiBhbnl0aGluZyBoZXJlXG4gICAgICAgIC0tcGFpbnRpbmcubG9ja3M7XG4gICAgICAgIHBhaW50KCk7XG4gICAgICAgIHJldHVybiB0b0F3YWl0O1xuICAgIH07XG4gICAgKytwYWludGluZy5sb2NrcztcbiAgICBjb25zdCBuZXdGcmFnbWVudCA9IHJlZ2lzdGVyVGFnRWxlbWVudChzdXBwb3J0LCBlbGVtZW50LCBnbG9iYWwsIHRlbXBsYXRlciwgYXBwLCBwbGFjZWhvbGRlcik7XG4gICAgLS1wYWludGluZy5sb2NrcztcbiAgICBwYWludCgpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RnJhZ21lbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1cHBvcnQsXG4gICAgICAgIHRhZ3MsXG4gICAgICAgIFZhbHVlVHlwZXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBydW5XcmFwcGVyKHRlbXBsYXRlciwgcGxhY2Vob2xkZXIsIGFwcEVsZW1lbnQsIHN1YmplY3QsIGlzQXBwRnVuY3Rpb24pIHtcbiAgICBzdWJqZWN0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgY29uc3Qgb2xkZXN0ID0gZ2xvYmFsLm9sZGVzdDtcbiAgICBjb25zdCBpc0ZpcnN0UmVuZGVyID0gZ2xvYmFsLm5ld2VzdCA9PT0gb2xkZXN0O1xuICAgIGNvbnN0IG5ld1N1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgZ2xvYmFsLm5ld2VzdCwgZ2xvYmFsLm5ld2VzdC5hcHBTdXBwb3J0LCAvLyBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCBhcyBBbnlTdXBwb3J0LFxuICAgIHN1YmplY3QpO1xuICAgIGlmICghaXNGaXJzdFJlbmRlcikge1xuICAgICAgICByZVN0YXRlKG5ld1N1cHBvcnQsIGdsb2JhbC5uZXdlc3QsIC8vIGdsb2JhbC5vbGRlc3QsIC8vIGdsb2JhbC5uZXdlc3QsXG4gICAgICAgIG9sZGVzdC5zdGF0ZSk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlU3RhdGVXcmFwKHRlbXBsYXRlciwgaXNBcHBGdW5jdGlvbiwgbmV3U3VwcG9ydCwgc3ViamVjdCwgYXBwRWxlbWVudCk7XG4gICAgfVxuICAgIC8vIENhbGwgdGhlIGFwcHMgZnVuY3Rpb24gZm9yIG91ciB0YWcgdGVtcGxhdGVyXG4gICAgY29uc3Qgd3JhcHBlciA9IHRlbXBsYXRlci53cmFwcGVyO1xuICAgIGNvbnN0IG5vd1N1cHBvcnQgPSB3cmFwcGVyKG5ld1N1cHBvcnQsIHN1YmplY3QpO1xuICAgIHJ1bkFmdGVyUmVuZGVyKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBub3dTdXBwb3J0O1xufVxuZnVuY3Rpb24gZXhlY3V0ZVN0YXRlV3JhcCh0ZW1wbGF0ZXIsIGlzQXBwRnVuY3Rpb24sIG5ld1N1cHBvcnQsIHN1YmplY3QsIGFwcEVsZW1lbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSAodGVtcGxhdGVyLndyYXBwZXIgfHwgeyBvcmlnaW5hbDogdGVtcGxhdGVyIH0pO1xuICAgIGlmICghaXNBcHBGdW5jdGlvbikge1xuICAgICAgICBjb25zdCBuZXdTdXBwb3J0ID0gbG9hZE5ld0Jhc2VTdXBwb3J0KHRlbXBsYXRlciwgc3ViamVjdCwgYXBwRWxlbWVudCk7XG4gICAgICAgIHJ1bkFmdGVyUmVuZGVyKG5ld1N1cHBvcnQpO1xuICAgICAgICByZXR1cm4gbmV3U3VwcG9ydDtcbiAgICB9XG4gICAgZXhlY3V0ZVdyYXAodGVtcGxhdGVyLCByZXN1bHQsIG5ld1N1cHBvcnQpO1xuICAgIHJ1bkFmdGVyUmVuZGVyKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBuZXdTdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi91cGRhdGUvZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMsIFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydCB9IGZyb20gJy4uL3JlbmRlci9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBQcm9wV2F0Y2hlcyB9IGZyb20gJy4vaW5kZXguanMnO1xuaW1wb3J0IHsgaW5pdFN0YXRlIH0gZnJvbSAnLi4vc3RhdGUvc3RhdGUudXRpbHMuanMnO1xuaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGNoZWNrVGFnVmFsdWVDaGFuZ2UsIGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSB9IGZyb20gJy4vY2hlY2tUYWdWYWx1ZUNoYW5nZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL3JlbmRlclRhZ0VsZW1lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgbG9hZE5ld0Jhc2VTdXBwb3J0IH0gZnJvbSAnLi9sb2FkTmV3QmFzZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmlmICh0eXBlb2YgKGRvY3VtZW50KSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoZG9jdW1lbnQudGFnZ2VkSnMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfwn4+377iP8J+Pt++4jyBNdWx0aXBsZSB2ZXJzaW9ucyBvZiB0YWdnZWRqcyBhcmUgbG9hZGVkLiBNYXkgY2F1c2UgaXNzdWVzLicpO1xuICAgIH1cbiAgICBkb2N1bWVudC50YWdnZWRKcyA9IHRydWU7XG59XG5leHBvcnQgY29uc3QgYXBwRWxlbWVudHMgPSBbXTtcbi8qKlxuICpcbiAqIEBwYXJhbSBhcHAgdGFnZ2VkanMgdGFnXG4gKiBAcGFyYW0gZWxlbWVudCBIVE1MRWxlbWVudFxuICogQHBhcmFtIHByb3BzIG9iamVjdFxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhZ0VsZW1lbnQoYXBwLCBlbGVtZW50LCBwcm9wcykge1xuICAgIGNvbnN0IGFwcEVsbUluZGV4ID0gYXBwRWxlbWVudHMuZmluZEluZGV4KGFwcEVsbSA9PiBhcHBFbG0uZWxlbWVudCA9PT0gZWxlbWVudCk7XG4gICAgaWYgKGFwcEVsbUluZGV4ID49IDApIHtcbiAgICAgICAgY29uc3Qgc3VwcG9ydCA9IGFwcEVsZW1lbnRzW2FwcEVsbUluZGV4XS5zdXBwb3J0O1xuICAgICAgICBkZXN0cm95U3VwcG9ydChzdXBwb3J0LCBzdXBwb3J0LmNvbnRleHQuZ2xvYmFsKTtcbiAgICAgICAgYXBwRWxlbWVudHMuc3BsaWNlKGFwcEVsbUluZGV4LCAxKTtcbiAgICAgICAgLy8gYW4gZWxlbWVudCBhbHJlYWR5IGhhZCBhbiBhcHAgb24gaXRcbiAgICAgICAgY29uc29sZS53YXJuKCdGb3VuZCBhbmQgZGVzdHJveWVkIGFwcCBlbGVtZW50IGFscmVhZHkgcmVuZGVyZWQgdG8gZWxlbWVudCcsIHsgZWxlbWVudCB9KTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHRoZSBhcHAgd2hpY2ggcmV0dXJucyBbcHJvcHMsIHJ1bk9uZVRpbWVGdW5jdGlvbl1cbiAgICBsZXQgdGVtcGxhdGVyID0gKCgpID0+IHRlbXBsYXRlcjIocHJvcHMpKTtcbiAgICB0ZW1wbGF0ZXIucHJvcFdhdGNoID0gUHJvcFdhdGNoZXMuTk9ORTtcbiAgICB0ZW1wbGF0ZXIudGFnSnNUeXBlID0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcjtcbiAgICB0ZW1wbGF0ZXIucHJvY2Vzc1VwZGF0ZSA9IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcjtcbiAgICAvLyB0b2RvOiBwcm9wcyBzaG91bGQgYmUgYW4gYXJyYXlcbiAgICB0ZW1wbGF0ZXIucHJvcHMgPSBbcHJvcHNdO1xuICAgIHRlbXBsYXRlci5pc0FwcCA9IHRydWU7XG4gICAgLy8gY3JlYXRlIG9ic2VydmFibGUgdGhlIGFwcCBsaXZlcyBvblxuICAgIGNvbnN0IHN1YmplY3QgPSBnZXROZXdTdWJqZWN0KHRlbXBsYXRlciwgZWxlbWVudCk7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgaW5pdFN0YXRlKGdsb2JhbC5uZXdlc3QpO1xuICAgIGxldCB0ZW1wbGF0ZXIyID0gYXBwKHByb3BzKTtcbiAgICBjb25zdCBpc0FwcEZ1bmN0aW9uID0gdHlwZW9mIHRlbXBsYXRlcjIgPT0gQmFzaWNUeXBlcy5mdW5jdGlvbjtcbiAgICBpZiAoIWlzQXBwRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKCFpc1RhZ0NvbXBvbmVudCh0ZW1wbGF0ZXIyKSkge1xuICAgICAgICAgICAgdGVtcGxhdGVyLnRhZyA9IHRlbXBsYXRlcjI7XG4gICAgICAgICAgICB0ZW1wbGF0ZXIyID0gYXBwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLm5ld2VzdC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBsYXRlc3Q6IFtwcm9wc10sXG4gICAgICAgICAgICAgICAgY2FzdFByb3BzOiBbcHJvcHNdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRlbXBsYXRlci5wcm9wV2F0Y2ggPSB0ZW1wbGF0ZXIyLnByb3BXYXRjaDtcbiAgICAgICAgICAgIHRlbXBsYXRlci50YWdKc1R5cGUgPSB0ZW1wbGF0ZXIyLnRhZ0pzVHlwZTtcbiAgICAgICAgICAgIHRlbXBsYXRlci53cmFwcGVyID0gdGVtcGxhdGVyMi53cmFwcGVyO1xuICAgICAgICAgICAgdGVtcGxhdGVyID0gdGVtcGxhdGVyMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyVGFnRWxlbWVudChhcHAsIGdsb2JhbCwgdGVtcGxhdGVyLCB0ZW1wbGF0ZXIyLCBlbGVtZW50LCBzdWJqZWN0LCBpc0FwcEZ1bmN0aW9uKTtcbn1cbmZ1bmN0aW9uIGdldE5ld1N1YmplY3QodGVtcGxhdGVyLCBhcHBFbGVtZW50KSB7XG4gICAgY29uc3QgdGFnSnNWYXIgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ3RlbXBsYXRlcicsXG4gICAgICAgIGNoZWNrVmFsdWVDaGFuZ2U6IGNoZWNrVGFnVmFsdWVDaGFuZ2UsXG4gICAgICAgIGRlbGV0ZTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogZnVuY3Rpb24gYXBwRG9Ob3RoaW5nKCkge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnZG8gbm90aGluZyBhcHAgZnVuY3Rpb24nKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogdGFnVmFsdWVVcGRhdGVIYW5kbGVyLFxuICAgIH07XG4gICAgY29uc3Qgc3ViamVjdCA9IHtcbiAgICAgICAgdmFsdWU6IHRlbXBsYXRlcixcbiAgICAgICAgdmFsdWVJbmRleDogMCxcbiAgICAgICAgdmFsdWVJbmRleFNldEJ5OiAnZ2V0TmV3U3ViamVjdCcsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogZmFsc2UsIC8vIGkgYW0gdGhlIGhpZ2hlc3Qgb3duZXJcbiAgICAgICAgcmVuZGVyQ291bnQ6IDAsXG4gICAgICAgIGdsb2JhbDogdW5kZWZpbmVkLCAvLyBnZXRzIHNldCBiZWxvdyBpbiBnZXROZXdHbG9iYWwoKVxuICAgICAgICB0YWdKc1ZhcixcbiAgICB9O1xuICAgIGNvbnN0IGdsb2JhbCA9IGdldE5ld0dsb2JhbChzdWJqZWN0KTtcbiAgICAvLyBUT0RPOiBldmVudHMgYXJlIG9ubHkgbmVlZGVkIG9uIHRoZSBiYXNlIGFuZCBub3QgZXZlcnkgc3VwcG9ydFxuICAgIC8vIGZvciBjbGljayBldmVudHMgYW5kIHN1Y2ggcmVhZCBhdCBhIGhpZ2hlciBsZXZlbFxuICAgIGdsb2JhbC5ldmVudHMgPSB7fTtcbiAgICBsb2FkTmV3QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBzdWJqZWN0LCBhcHBFbGVtZW50KTtcbiAgICByZXR1cm4gc3ViamVjdDtcbn1cbiIsImltcG9ydCB7IHBhaW50IH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHBhaW50QWZ0ZXJzLCBwYWludGluZyB9IGZyb20gXCIuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHN5bmNTdGF0ZXNBcnJheSB9IGZyb20gXCIuLi9zdGF0ZS9zeW5jU3RhdGVzLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gXCIuL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgc2FmZVJlbmRlclN1cHBvcnQgfSBmcm9tIFwiLi9wcm9wcy9zYWZlUmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qc1wiO1xuLyoqIFVzZWQgdG8gY2FsbCBhIGZ1bmN0aW9uIHRoYXQgYmVsb25ncyB0byBhIGNhbGxpbmcgdGFnIGJ1dCBpcyBub3Qgd2l0aCByb290IGFyZ3VtZW50cyAqL1xuZXhwb3J0IGZ1bmN0aW9uIG91dHB1dChjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGJsYW5rSGFuZGxlcjsgLy8gb3V0cHV0IHVzZWQgb24gYW4gYXJndW1lbnQgdGhhdCB3YXMgbm90IHBhc3NlZCBpblxuICAgIH1cbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICBpZiAoIXN1cHBvcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXQgbXVzdCBiZSB1c2VkIGluIHJlbmRlciBzeW5jIGZhc2hpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IHN1cHBvcnQub3duZXJTdXBwb3J0O1xuICAgICAgICByZXR1cm4gc3luY1dyYXBDYWxsYmFjayhhcmdzLCBjYWxsYmFjaywgb3duZXJTdXBwb3J0KTtcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN5bmNXcmFwQ2FsbGJhY2soYXJncywgY2FsbGJhY2ssIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IG93bmVyU3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICBjb25zdCBuZXdlc3RPd25lciA9IGdsb2JhbC5uZXdlc3Q7XG4gICAgLy8gc3luYyB0aGUgbmV3IHN0YXRlcyB0byB0aGUgb2xkIGJlZm9yZSB0aGUgb2xkIGRvZXMgYW55IHByb2Nlc3NpbmdcbiAgICBzeW5jU3RhdGVzQXJyYXkobmV3ZXN0T3duZXIuc3RhdGVzLCBvd25lclN1cHBvcnQuc3RhdGVzKTtcbiAgICBjb25zdCBjID0gY2FsbGJhY2soLi4uYXJncyk7IC8vIGNhbGwgdGhlIGxhdGVzdCBjYWxsYmFja1xuICAgIC8vIHN5bmMgdGhlIG9sZCBzdGF0ZXMgdG8gdGhlIG5ld1xuICAgIHN5bmNTdGF0ZXNBcnJheShvd25lclN1cHBvcnQuc3RhdGVzLCBuZXdlc3RPd25lci5zdGF0ZXMpO1xuICAgIC8vIG5vdyByZW5kZXIgdGhlIG93bmVyXG4gICAgcGFpbnRBZnRlcnMucHVzaChbKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3R2xvYmFsID0gbmV3ZXN0T3duZXIuY29udGV4dC5nbG9iYWw7XG4gICAgICAgICAgICBpZiAoIW5ld0dsb2JhbCkge1xuICAgICAgICAgICAgICAgIC8vIHBhaW50KClcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIGl0cyBub3QgYSB0YWcgYW55bW9yZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKytwYWludGluZy5sb2NrcztcbiAgICAgICAgICAgIHNhZmVSZW5kZXJTdXBwb3J0KG5ld2VzdE93bmVyKTtcbiAgICAgICAgICAgIC8vIHNhZmVSZW5kZXJTdXBwb3J0KGdsb2JhbC5uZXdlc3QpXG4gICAgICAgICAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgICAgICAgICAgcGFpbnQoKTtcbiAgICAgICAgfSwgW11dKTtcbiAgICByZXR1cm4gYztcbn1cbiIsImltcG9ydCB7IGRlbGV0ZUNvbnRleHRTdWJDb250ZXh0LCBndWFyYW50ZWVJbnNlcnRCZWZvcmUsIG9uRmlyc3RTdWJDb250ZXh0IH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZSB9IGZyb20gXCIuLi90YWcvdXBkYXRlL2luZGV4LmpzXCI7XG5mdW5jdGlvbiBoYW5kbGVJbm5lckhUTUwodmFsdWUsIGNvbnRleHRJdGVtLCBuZXdTdXBwb3J0KSB7XG4gICAgY29uc3Qgb3duZXIgPSB2YWx1ZS5vd25lcjtcbiAgICBjb25zdCByZWFsVmFsdWUgPSBvd25lci5faW5uZXJIVE1MO1xuICAgIHJlYWxWYWx1ZS5wcm9jZXNzSW5pdCA9IHJlYWxWYWx1ZS5vbGRQcm9jZXNzSW5pdDtcbiAgICBjb25zdCBjb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dD8uY29udGV4dEl0ZW07XG4gICAgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGNvbnRleHQsIHJlYWxWYWx1ZSwgbmV3U3VwcG9ydCk7XG59XG5mdW5jdGlvbiBwcm9jZXNzSW5uZXJIVE1MKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29udGV4dEl0ZW0uc3ViQ29udGV4dCA9IHt9O1xuICAgIC8vIGNvbnRleHRJdGVtLmhhbmRsZXIgPSBoYW5kbGVJbm5lckhUTUxcbiAgICB2YWx1ZS5wcm9jZXNzVXBkYXRlID0gaGFuZGxlSW5uZXJIVE1MO1xuICAgIGNoZWNrSW5uZXJIVE1MKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtLCBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSW5uZXJIVE1MKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtLCBpbnNlcnRCZWZvcmVPcmlnaW5hbCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCB7IGFwcGVuZE1hcmtlciwgaW5zZXJ0QmVmb3JlIH0gPSBndWFyYW50ZWVJbnNlcnRCZWZvcmUoYXBwZW5kVG8sIGluc2VydEJlZm9yZU9yaWdpbmFsKTtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICBzdWJDb250ZXh0LmFwcGVuZE1hcmtlciA9IGFwcGVuZE1hcmtlcjtcbiAgICBjb25zdCBvd25lciA9IHZhbHVlLm93bmVyO1xuICAgIGNvbnN0IHJlYWxWYWx1ZSA9IG93bmVyLl9pbm5lckhUTUw7XG4gICAgcmVhbFZhbHVlLnByb2Nlc3NJbml0ID0gcmVhbFZhbHVlLm9sZFByb2Nlc3NJbml0O1xuICAgIC8qKiBSZW5kZXIgdGhlIGNvbnRlbnQgdGhhdCB3aWxsIENPTlRBSU4gdGhlIGlubmVySFRNTCAqL1xuICAgIG9uRmlyc3RTdWJDb250ZXh0KHJlYWxWYWx1ZSwgc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldElubmVySFRNTCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdKc1R5cGU6ICdpbm5lckhUTUwnLFxuICAgICAgICBjaGVja1ZhbHVlQ2hhbmdlOiAoKSA9PiAtMSwgLy8gbm90IGV4cGVjdGVkIHRvIGRvIGFueXRoaW5nXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzSW5uZXJIVE1MLFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiBoYW5kbGVJbm5lckhUTUwsXG4gICAgICAgIGRlbGV0ZTogZGVsZXRlQ29udGV4dFN1YkNvbnRleHQsXG4gICAgfTtcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tIFwiLi4vdGFnL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBzeW5jV3JhcENhbGxiYWNrIH0gZnJvbSBcIi4uL3RhZy9vdXRwdXQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGhhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvY2hlY2tTdGlsbFN1YnNjcmlwdGlvbi5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSBcIi4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanNcIjtcbi8qKiBVc2UgdG8gZ2FpbiBhY2Nlc3MgdG8gZWxlbWVudFxuICogQGNhbGxiYWNrIGNhbGxlZCBldmVyeSByZW5kZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvc3QoY2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5ob3N0LFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogcHJvY2Vzc0hvc3RBdHRyaWJ1dGUsXG4gICAgICAgIC8vIFRPRE86IG1heWJlIGEgaG9zdCB2YWx1ZSBjYW4gY2hhbmdlP1xuICAgICAgICBjaGVja1ZhbHVlQ2hhbmdlOiAoKSA9PiAtMSxcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NIb3N0LCAvLyBUaGlzIHNob3VsZCBiZSBhIHRocm93IGVycm9yIGJlY2F1c2Ugb25seSBhdHRyaWJ1dGUgaXMgc3VwcG9ydGVkXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NIb3N0VXBkYXRlLFxuICAgICAgICBkZWxldGU6IGRlbGV0ZUhvc3QsXG4gICAgICAgIG9wdGlvbnM6IHsgY2FsbGJhY2ssIC4uLm9wdGlvbnMgfSxcbiAgICB9O1xufVxuLy8gQXR0YWNoIHRoZSBmdW5jdGlvbnMgdG8gdGhlIGhvc3QgbmFtZXNwYWNlXG47XG5ob3N0Lm9uSW5pdCA9IChjYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiBob3N0KCgpID0+IHsgfSwgeyBvbkluaXQ6IGNhbGxiYWNrIH0pO1xufTtcbmhvc3Qub25EZXN0cm95ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuIGhvc3QoKCkgPT4geyB9LCB7IG9uRGVzdHJveTogY2FsbGJhY2sgfSk7XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0hvc3RVcGRhdGUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBoYXNDaGFuZ2VkID0gaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20oVmFsdWVUeXBlcy5ob3N0LCBuZXdWYWx1ZSwgXG4gICAgLy8gdGFnSnNWYXIsXG4gICAgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc0NoYW5nZWQ7XG4gICAgfVxuICAgIC8vIGNvbnN0IG9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXIgYXMgSG9zdFZhbHVlXG4gICAgLy8gY29uc3Qgb3B0aW9ucyA9IG9sZFRhZ0pzVmFyLm9wdGlvbnNcbiAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudDtcbiAgICBjb25zdCBuZXdIb3N0ID0gbmV3VmFsdWU7XG4gICAgbmV3SG9zdC5vcHRpb25zLmNhbGxiYWNrKGVsZW1lbnQsIG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgY29udGV4dEl0ZW0uc3RhdGUpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0hvc3RBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbmVsZW1lbnQsIF90YWdKc1ZhciwgLy8gc2FtZSBhcyB2YWx1ZSBub3QgbmVlZGVkXG5jb250ZXh0SXRlbSkge1xuICAgIHJldHVybiBwcm9jZXNzSG9zdCh2YWx1ZSwgY29udGV4dEl0ZW0pO1xufVxuLyogT25seSBydW5zIG9uIGhvc3QoKSBpbml0ICovXG5mdW5jdGlvbiBwcm9jZXNzSG9zdCh0YWdKc1ZhciwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudDtcbiAgICBjb25zdCBzdGF0ZSA9IGNvbnRleHRJdGVtLnN0YXRlID0ge307XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgIHByb2Nlc0hvc3RUYWdKc1ZhcihlbGVtZW50LCB0YWdKc1ZhciwgY29udGV4dEl0ZW0sIHN0YXRlKTtcbiAgICByZW1vdmVDb250ZXh0SW5DeWNsZSgpO1xufVxuZnVuY3Rpb24gcHJvY2VzSG9zdFRhZ0pzVmFyKGVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgc3RhdGUpIHtcbiAgICB0YWdKc1Zhci5vcHRpb25zLmNhbGxiYWNrKGVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgc3RhdGUpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0YWdKc1Zhci5vcHRpb25zO1xuICAgIGlmIChvcHRpb25zLm9uSW5pdCkge1xuICAgICAgICAvLyBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgICAgIG9wdGlvbnMub25Jbml0KGVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgc3RhdGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlbGV0ZUhvc3QoY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBhdHRyQ29udGV4dCA9IGNvbnRleHRJdGVtO1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gYXR0ckNvbnRleHQudGFnSnNWYXI7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRhZ0pzVmFyLm9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMub25EZXN0cm95KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhdHRyQ29udGV4dC5lbGVtZW50O1xuICAgICAgICBjb25zdCBob3N0RGVzdHJveSA9IGZ1bmN0aW9uIHByb2Nlc3NIb3N0RGVzdHJveSgpIHtcbiAgICAgICAgICAgIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHRJdGVtKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9wdGlvbnMub25EZXN0cm95KGVsZW1lbnQsIHRhZ0pzVmFyLCBhdHRyQ29udGV4dCwgYXR0ckNvbnRleHQuc3RhdGUpO1xuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0YXRlT3duZXIgPSBjb250ZXh0SXRlbS5zdGF0ZU93bmVyO1xuICAgICAgICBzeW5jV3JhcENhbGxiYWNrKFtdLCBob3N0RGVzdHJveSwgc3RhdGVPd25lcik7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi90YWcvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zdGF0ZS9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3JlbmRlci9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3N1YmplY3QvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi90YWdKc1ZhcnMvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcnBvbGF0aW9ucy9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Vycm9ycy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2lzSW5zdGFuY2UuanMnO1xuZXhwb3J0IHsgc3RhdGVzIH0gZnJvbSAnLi9zdGF0ZS9zdGF0ZXMuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL1RhZ0pzRXZlbnQudHlwZS5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdPbmx5IH0gZnJvbSAnLi9yZW5kZXIvcmVuZGVyVGFnT25seS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJXaXRoU3VwcG9ydCB9IGZyb20gJy4vcmVuZGVyL3JlbmRlcldpdGhTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRhZ0VsZW1lbnQgfSBmcm9tICcuL3RhZy90YWdFbGVtZW50LmpzJztcbmltcG9ydCB7IHBhaW50IH0gZnJvbSAnLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZWVwRnVuY3Rpb25zLmpzJztcbmV4cG9ydCBjb25zdCBobXIgPSB7XG4gICAgdGFnRWxlbWVudCwgcmVuZGVyV2l0aFN1cHBvcnQsIHJlbmRlclN1cHBvcnQsXG4gICAgcmVuZGVyVGFnT25seSwgcGFpbnQsXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZ4KHsgZnhJbiwgZnhPdXQsIFxuLy8gc3RhZ2dlckJ5ID0gMzAwLFxub3V0UG9zaXRpb25BYnNvbHV0ZSA9IHRydWUsIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbjogKGlucHV0LCBzdGFnZ2VyKSA9PiBhbmltYXRlSW5pdCh7XG4gICAgICAgICAgICBmeE5hbWU6IGZ4SW4sXG4gICAgICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgfSwgc3RhZ2dlciksXG4gICAgICAgIG91dDogKGlucHV0LCBzdGFnZ2VyKSA9PiBhbmltYXRlRGVzdHJveSh7XG4gICAgICAgICAgICBmeE5hbWU6IGZ4T3V0LFxuICAgICAgICAgICAgb3V0UG9zaXRpb25BYnNvbHV0ZSxcbiAgICAgICAgICAgIC4uLmlucHV0LFxuICAgICAgICB9LCBzdGFnZ2VyKSxcbiAgICB9O1xufVxuY29uc3QgYW5pbWF0ZUluaXQgPSBhc3luYyAoeyB0YXJnZXQsIGZ4TmFtZSA9ICdmYWRlSW5VcCcgfSwgc3RhZ2dlcikgPT4ge1xuICAgIHRhcmdldC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIGlmIChzdGFnZ2VyKSB7XG4gICAgICAgIGF3YWl0IHdhaXQoc3RhZ2dlcik7XG4gICAgfVxuICAgIHRhcmdldC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIHJldHVybiBhZGRDbGFzc2VzVG8oZnhOYW1lLCB0YXJnZXQpO1xufTtcbmNvbnN0IGFuaW1hdGVEZXN0cm95ID0gYXN5bmMgKHsgdGFyZ2V0LCBvdXRQb3NpdGlvbkFic29sdXRlID0gdHJ1ZSwgZnhOYW1lID0gJ2ZhZGVPdXRVcCcsIH0sIHN0YWdnZXIpID0+IHtcbiAgICBpZiAob3V0UG9zaXRpb25BYnNvbHV0ZSkge1xuICAgICAgICBjYXB0dXJlRWxlbWVudFBvc2l0aW9uKHRhcmdldCk7XG4gICAgfVxuICAgIGlmIChzdGFnZ2VyKSB7XG4gICAgICAgIGF3YWl0IHdhaXQoc3RhZ2dlcik7XG4gICAgfVxuICAgIHJldHVybiBhZGRDbGFzc2VzVG8oZnhOYW1lLCB0YXJnZXQpO1xufTtcbmZ1bmN0aW9uIGFkZENsYXNzZXNUbyhmeE5hbWUsIHRhcmdldCkge1xuICAgIGxldCByZXM7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHJlc2luYXRlKHJlc29sdmUpIHtcbiAgICAgICAgcmVzID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBoYW5kbGVBbmltYXRpb25FbmQoZXZlbnQpIHtcbiAgICAgICAgLy8gT3B0aW9uYWw6IG1ha2Ugc3VyZSB0aGUgZXZlbnQgaXMgZnJvbSB0aGUgdGFyZ2V0IGVsZW1lbnRcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gdGFyZ2V0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZV9fYW5pbWF0ZWQnLCAnYW5pbWF0ZV9fJyArIGZ4TmFtZSk7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVBbmltYXRpb25FbmQpO1xuICAgICAgICByZXModW5kZWZpbmVkKTtcbiAgICB9XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGVfX2FuaW1hdGVkJywgJ2FuaW1hdGVfXycgKyBmeE5hbWUpO1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVBbmltYXRpb25FbmQpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuLy8gYWJzb2x1dGVcbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRWxlbWVudFBvc2l0aW9uKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnN0eWxlLnpJbmRleCA9IGVsZW1lbnQuc3R5bGUuekluZGV4IHx8IDE7XG4gICAgY29uc3QgdG9Ub3AgPSBlbGVtZW50Lm9mZnNldFRvcCArICdweCc7XG4gICAgY29uc3QgdG9MZWZ0ID0gZWxlbWVudC5vZmZzZXRMZWZ0ICsgJ3B4JztcbiAgICBjb25zdCB0b1dpZHRoID0gKGVsZW1lbnQuY2xpZW50V2lkdGggKyAoZWxlbWVudC5vZmZzZXRXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGgpICsgMSkgKyAncHgnO1xuICAgIGNvbnN0IHRvSGVpZ2h0ID0gKGVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgKGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQpICsgMSkgKyAncHgnO1xuICAgIGNvbnN0IGZpeCA9ICgpID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSB0b1RvcDtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gdG9MZWZ0O1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gdG9XaWR0aDtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0b0hlaWdodDtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgfTtcbiAgICAvLyBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJ1xuICAgIC8vIGFsbG93IG90aGVyIGVsZW1lbnRzIHRoYXQgYXJlIGJlaW5nIHJlbW92ZWQgdG8gaGF2ZSBhIG1vbWVudCB0byBmaWd1cmUgb3V0IHdoZXJlIHRoZXkgY3VycmVudGx5IHNpdFxuICAgIHNldFRpbWVvdXQoZml4LCAwKTtcbn1cbmZ1bmN0aW9uIHdhaXQodGltZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQocmVzLCB0aW1lKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUZ4LmZ1bmN0aW9uLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUZ4IH0gZnJvbSBcIi4vY3JlYXRlRnguZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGFkZFBhaW50UmVtb3ZlQXdhaXQsIGdldElubmVySFRNTCwgaG9zdCwgaHRtbCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuLyoqIHByZWZlcnJlZCAqL1xuZXhwb3J0IGNvbnN0IHsgaW46IGZhZGVJblVwLCBvdXQ6IGZhZGVPdXREb3duIH0gPSBjcmVhdGVGeCh7XG4gICAgZnhJbjogJ2ZhZGVJblVwJyxcbiAgICBmeE91dDogJ2ZhZGVPdXREb3duJ1xufSk7XG5leHBvcnQgY29uc3QgeyBpbjogZmFkZUluRG93biwgb3V0OiBmYWRlT3V0VXAgfSA9IGNyZWF0ZUZ4KHtcbiAgICBmeEluOiAnZmFkZUluRG93bicsXG4gICAgZnhPdXQ6ICdmYWRlT3V0VXAnXG59KTtcbmV4cG9ydCBjb25zdCB7IGluOiBmYWRlSW4sIG91dDogZmFkZU91dCB9ID0gY3JlYXRlRngoe1xuICAgIGZ4SW46ICdmYWRlSW4nLFxuICAgIGZ4T3V0OiAnZmFkZU91dCcsXG59KTtcbi8qKiBHcm91cCBjcmVhdGVkIGFuaW1hdGlvbnMgdG9nZXRoZXIgd2l0aCBzdGFnZ2VyaW5nICovXG5leHBvcnQgY29uc3QgZnhHcm91cCA9ICh7IHN0YWdnZXIgPSAxMDAsIGZ4SW4sIGZ4T3V0LCBkdXJhdGlvbiA9ICcycycsIGluTmFtZSA9ICdmYWRlSW5VcCcsIG91dE5hbWUgPSAnZmFkZU91dERvd24nLCBvdXRQb3NpdGlvbkFic29sdXRlID0gZmFsc2UsIH0gPSB7fSkgPT4ge1xuICAgIGxldCBzdGFnZ2VyVGltZSA9IDA7XG4gICAgY29uc3Qgc2V0dXAgPSBzZXR1cEZ4KGZ1bmN0aW9uIG9uSW5pdChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYW5pbWF0ZS1kdXJhdGlvbicsIGR1cmF0aW9uKTtcbiAgICAgICAgY29uc3QgdG90YWxTdGFnZ2VyID0gc3RhZ2dlciAqIChzdGFnZ2VyVGltZSsrKTtcbiAgICAgICAgcmV0dXJuIHNldHVwLmZ4SW4oeyB0YXJnZXQ6IGVsZW1lbnQgfSwgdG90YWxTdGFnZ2VyKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC0tc3RhZ2dlclRpbWU7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIG9uRGVzdHJveShlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYW5pbWF0ZS1kdXJhdGlvbicsIGR1cmF0aW9uKTtcbiAgICAgICAgY29uc3QgdG90YWxTdGFnZ2VyID0gc3RhZ2dlciAqIChzdGFnZ2VyVGltZSsrKTtcbiAgICAgICAgY29uc3QgZGVzdHJveVByb21pc2UgPSBzZXR1cC5meE91dCh7IHRhcmdldDogZWxlbWVudCB9LCB0b3RhbFN0YWdnZXIpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLS1zdGFnZ2VyVGltZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFkZFBhaW50UmVtb3ZlQXdhaXQoZGVzdHJveVByb21pc2UpO1xuICAgICAgICByZXR1cm4gZGVzdHJveVByb21pc2U7XG4gICAgfSwgZnhJbiwgZnhPdXQsIGluTmFtZSwgb3V0TmFtZSwgXG4gICAgLy8gc3RhZ2dlcixcbiAgICBvdXRQb3NpdGlvbkFic29sdXRlKTtcbiAgICByZXR1cm4gc2V0dXAuaG9zdDtcbn07XG4vKiogVXNlZCBhcyBhIGhvc3Qgb24gZWxlbWVudC4gPGRpdiAke2Z4KCl9PiAqL1xuZXhwb3J0IGNvbnN0IGZ4ID0gKHsgZnhJbiwgZnhPdXQsIHN0YWdnZXIsIGluTmFtZSA9ICdmYWRlSW5VcCcsIG91dE5hbWUgPSAnZmFkZU91dERvd24nLCBkdXJhdGlvbiA9ICcuMnMnLCBvdXRQb3NpdGlvbkFic29sdXRlID0gZmFsc2UsIH0gPSB7fSkgPT4ge1xuICAgIGNvbnN0IHNldHVwID0gc2V0dXBGeCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWFuaW1hdGUtZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgICAgIHJldHVybiBzZXR1cC5meEluKHsgdGFyZ2V0OiBlbGVtZW50IH0sIHN0YWdnZXIpO1xuICAgIH0sIChlbGVtZW50KSA9PiB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYW5pbWF0ZS1kdXJhdGlvbicsIGR1cmF0aW9uKTtcbiAgICAgICAgY29uc3QgZGVzdHJveVByb21pc2UgPSBzZXR1cC5meE91dCh7IHRhcmdldDogZWxlbWVudCB9LCBzdGFnZ2VyKTtcbiAgICAgICAgYWRkUGFpbnRSZW1vdmVBd2FpdChkZXN0cm95UHJvbWlzZSk7XG4gICAgICAgIHJldHVybiBkZXN0cm95UHJvbWlzZTtcbiAgICB9LCBmeEluLCBmeE91dCwgaW5OYW1lLCBvdXROYW1lLCBcbiAgICAvLyBzdGFnZ2VyLFxuICAgIG91dFBvc2l0aW9uQWJzb2x1dGUpO1xuICAgIHJldHVybiBzZXR1cC5ob3N0O1xufTtcbmZ1bmN0aW9uIHNldHVwRngob25Jbml0LCBvbkRlc3Ryb3ksIGZ4SW4sIGZ4T3V0LCBpbk5hbWUsIG91dE5hbWUsIFxuLy8gc3RhZ2dlcjogbnVtYmVyIHwgdW5kZWZpbmVkLFxub3V0UG9zaXRpb25BYnNvbHV0ZSkge1xuICAgIGlmICghZnhJbiB8fCAhZnhPdXQpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZ4KHtcbiAgICAgICAgICAgIGZ4SW46IGluTmFtZSxcbiAgICAgICAgICAgIGZ4T3V0OiBvdXROYW1lLFxuICAgICAgICAgICAgLy8gc3RhZ2dlckJ5OiBzdGFnZ2VyLFxuICAgICAgICAgICAgb3V0UG9zaXRpb25BYnNvbHV0ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZnhJbikge1xuICAgICAgICAgICAgZnhJbiA9IGNyZWF0ZWQuaW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmeE91dCkge1xuICAgICAgICAgICAgZnhPdXQgPSBjcmVhdGVkLm91dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBmeEluLCBmeE91dCxcbiAgICAgICAgaG9zdDogaG9zdCgoKSA9PiB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIG9uSW5pdCxcbiAgICAgICAgICAgIG9uRGVzdHJveSxcbiAgICAgICAgfSlcbiAgICB9O1xufVxuLyoqIEBkZXByZWNhdGVkIC0gSW5zdGVhZCB1c2UgPGRpdiAke2Z4KCl9PiAuLi4gVXNlIG9uIGh0bWwgZWxlbWVudHMgdG8gaGF2ZSB0aGVtIGFuaW1hdGVkIGluIGFuZCBvdXQgKi9cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRlV3JhcCh7IGZ4SW4sIGZ4T3V0LCBkdXJhdGlvbiA9ICcuMnMnLCBvdXRQb3NpdGlvbkFic29sdXRlID0gZmFsc2UsIH0gPSB7XG4gICAgZHVyYXRpb246ICcuMnMnLFxuICAgIG91dFBvc2l0aW9uQWJzb2x1dGU6IGZhbHNlLFxufSkge1xuICAgIGlmICghZnhJbiB8fCAhZnhPdXQpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZ4KHtcbiAgICAgICAgICAgIGZ4SW46ICdmYWRlSW5VcCcsXG4gICAgICAgICAgICBmeE91dDogJ2ZhZGVPdXREb3duJyxcbiAgICAgICAgICAgIG91dFBvc2l0aW9uQWJzb2x1dGUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWZ4SW4pIHtcbiAgICAgICAgICAgIGZ4SW4gPSBjcmVhdGVkLmluO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnhPdXQpIHtcbiAgICAgICAgICAgIGZ4T3V0ID0gY3JlYXRlZC5vdXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MKCk7XG4gICAgcmV0dXJuIGh0bWwgYFxuICAgIDxkaXYgb25pbml0PSR7ZnhJbn0gb25kZXN0cm95PSR7ZnhPdXR9IHN0eWxlLi0tYW5pbWF0ZS1kdXJhdGlvbj0ke2R1cmF0aW9ufT4ke2lubmVySFRNTH08L2Rpdj5cbiAgYC5hY2NlcHRJbm5lckhUTUwoaW5uZXJIVE1MKTtcbn1cbi8qKiBVc2Ugb24gaHRtbCBlbGVtZW50cywgd2l0aGluIGEgbG9vcCwgdG8gaGF2ZSB0aGVtIGFuaW1hdGVkIGluIGFuZCBvdXQgKi9cbmV4cG9ydCBmdW5jdGlvbiBhbmltYXRlTG9vcCh7IGZ4SW4sIGZ4T3V0LCBkdXJhdGlvbiA9ICcuMnMnLCBvdXRQb3NpdGlvbkFic29sdXRlID0gdHJ1ZSwgfSA9IHtcbiAgICBkdXJhdGlvbjogJy4ycycsXG4gICAgb3V0UG9zaXRpb25BYnNvbHV0ZTogdHJ1ZSxcbn0pIHtcbiAgICBpZiAoIWZ4SW4gfHwgIWZ4T3V0KSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBjcmVhdGVGeCh7XG4gICAgICAgICAgICBmeEluOiAnZmFkZUluVXAnLFxuICAgICAgICAgICAgZnhPdXQ6ICdmYWRlT3V0RG93bicsXG4gICAgICAgICAgICBvdXRQb3NpdGlvbkFic29sdXRlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWZ4SW4pIHtcbiAgICAgICAgICAgIGZ4SW4gPSBjcmVhdGVkLmluO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnhPdXQpIHtcbiAgICAgICAgICAgIGZ4T3V0ID0gY3JlYXRlZC5vdXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MKCk7XG4gICAgcmV0dXJuIGh0bWwgYFxuICAgIDxkaXYgb25pbml0PSR7ZnhJbn0gb25kZXN0cm95PSR7ZnhPdXR9IHN0eWxlLi0tYW5pbWF0ZS1kdXJhdGlvbj0ke2R1cmF0aW9ufT4ke2lubmVySFRNTH08L2Rpdj5cbiAgYC5hY2NlcHRJbm5lckhUTUwoaW5uZXJIVE1MKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCwgSXRlcmF0b3IgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnID0gT2JqZWN0LmNyZWF0ZSgodHlwZW9mIEl0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBJdGVyYXRvciA6IE9iamVjdCkucHJvdG90eXBlKTtcbiAgcmV0dXJuIGcubmV4dCA9IHZlcmIoMCksIGdbXCJ0aHJvd1wiXSA9IHZlcmIoMSksIGdbXCJyZXR1cm5cIl0gPSB2ZXJiKDIpLCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgQXN5bmNJdGVyYXRvciA9PT0gXCJmdW5jdGlvblwiID8gQXN5bmNJdGVyYXRvciA6IE9iamVjdCkucHJvdG90eXBlKSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiLCBhd2FpdFJldHVybiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlmIChnW25dKSB7IGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IGlmIChmKSBpW25dID0gZihpW25dKTsgfSB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG52YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIGFyID0gW107XG4gICAgZm9yICh2YXIgayBpbiBvKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspKSBhclthci5sZW5ndGhdID0gaztcbiAgICByZXR1cm4gYXI7XG4gIH07XG4gIHJldHVybiBvd25LZXlzKG8pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcbiAgICB2YXIgZGlzcG9zZSwgaW5uZXI7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKGRpc3Bvc2UgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgICBpZiAoYXN5bmMpIGlubmVyID0gZGlzcG9zZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGlmIChpbm5lcikgZGlzcG9zZSA9IGZ1bmN0aW9uKCkgeyB0cnkgeyBpbm5lci5jYWxsKHRoaXMpOyB9IGNhdGNoIChlKSB7IHJldHVybiBQcm9taXNlLnJlamVjdChlKTsgfSB9O1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICB2YXIgciwgcyA9IDA7XG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgd2hpbGUgKHIgPSBlbnYuc3RhY2sucG9wKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghci5hc3luYyAmJiBzID09PSAxKSByZXR1cm4gcyA9IDAsIGVudi5zdGFjay5wdXNoKHIpLCBQcm9taXNlLnJlc29sdmUoKS50aGVuKG5leHQpO1xuICAgICAgICBpZiAoci5kaXNwb3NlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHIuZGlzcG9zZS5jYWxsKHIudmFsdWUpO1xuICAgICAgICAgIGlmIChyLmFzeW5jKSByZXR1cm4gcyB8PSAyLCBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKG5leHQsIGZ1bmN0aW9uKGUpIHsgZmFpbChlKTsgcmV0dXJuIG5leHQoKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBzIHw9IDE7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICBmYWlsKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocyA9PT0gMSkgcmV0dXJuIGVudi5oYXNFcnJvciA/IFByb21pc2UucmVqZWN0KGVudi5lcnJvcikgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBpZiAoZW52Lmhhc0Vycm9yKSB0aHJvdyBlbnYuZXJyb3I7XG4gIH1cbiAgcmV0dXJuIG5leHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmV3cml0ZVJlbGF0aXZlSW1wb3J0RXh0ZW5zaW9uKHBhdGgsIHByZXNlcnZlSnN4KSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiAmJiAvXlxcLlxcLj9cXC8vLnRlc3QocGF0aCkpIHtcbiAgICAgIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcLih0c3gpJHwoKD86XFwuZCk/KSgoPzpcXC5bXi4vXSs/KT8pXFwuKFtjbV0/KXRzJC9pLCBmdW5jdGlvbiAobSwgdHN4LCBkLCBleHQsIGNtKSB7XG4gICAgICAgICAgcmV0dXJuIHRzeCA/IHByZXNlcnZlSnN4ID8gXCIuanN4XCIgOiBcIi5qc1wiIDogZCAmJiAoIWV4dCB8fCAhY20pID8gbSA6IChkICsgZXh0ICsgXCIuXCIgKyBjbS50b0xvd2VyQ2FzZSgpICsgXCJqc1wiKTtcbiAgICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19lc0RlY29yYXRlLFxuICBfX3J1bkluaXRpYWxpemVycyxcbiAgX19wcm9wS2V5LFxuICBfX3NldEZ1bmN0aW9uTmFtZSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxuICBfX2Rpc3Bvc2VSZXNvdXJjZXMsXG4gIF9fcmV3cml0ZVJlbGF0aXZlSW1wb3J0RXh0ZW5zaW9uLFxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgaHRtbCwgU3ViamVjdCwgc3ViamVjdCwgdGFnLCBzdGF0ZXMsIFZhbHVlU3ViamVjdGl2ZSwgc2lnbmFsLCBzdWJzY3JpYmUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG4vKiogdGhpcyB0YWcgcmVuZGVycyBvbmx5IG9uY2UgKi9cbmV4cG9ydCBjb25zdCBvbmVSZW5kZXIgPSAoKSA9PiB0YWcucmVuZGVyT25jZSA9IChjb3VudGVyID0gbmV3IFZhbHVlU3ViamVjdGl2ZSgwKSwgcmVuZGVyQ291bnQgPSAwKSA9PiB7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICBjb25zdCB4ID0gU3ViamVjdC5hbGwoWzAsICdhbGwnLCA0XSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczIyNjU5NDFbMF0sIHN1YnNjcmliZSh4LnBpcGUoeCA9PiBKU09OLnN0cmluZ2lmeSh4KSkpLCBzdWJzY3JpYmUoY291bnRlciksICgpID0+ICsrY291bnRlci52YWx1ZSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ29uZVJlbmRlcl90YWdfdHMnIH0pLCBpbnNpZGVNdWx0aVJlbmRlcigpKTtcbn07XG4vKiogdGhpcyB0YWcgcmVuZGVycyBvbiBldmVyeSBldmVudCBidXQgc2hvdWxkIG5vdCBjYXVzZSBwYXJlbnQgdG8gcmUtcmVuZGVyICovXG5jb25zdCBpbnNpZGVNdWx0aVJlbmRlciA9IHRhZygoKSA9PiAoY291bnRlciQgPSBzdWJqZWN0KDApLCBjb3VudGVyU2lnbmFsJCA9IHNpZ25hbCgwKSwgY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgLy8gc3RhdGUgY2FuIGJlIHVzZWQgYnV0IGl0IG5ldmVyIHVwZGF0ZXNcbl8gPSBzdGF0ZXMoZ2V0ID0+IFt7IHJlbmRlckNvdW50LCBjb3VudGVyIH1dID0gZ2V0KHsgcmVuZGVyQ291bnQsIGNvdW50ZXIgfSkpKSA9PiB7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjI2NTk0MVsxXSwgc3Vic2NyaWJlKGNvdW50ZXIkKSwgY291bnRlclNpZ25hbCQsIGNvdW50ZXIsICgpID0+IHtcbiAgICAgICAgKytjb3VudGVyO1xuICAgICAgICBjb3VudGVyJC5uZXh0KGNvdW50ZXIpO1xuICAgICAgICBjb3VudGVyU2lnbmFsJC52YWx1ZSA9IGNvdW50ZXI7XG4gICAgfSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2luc2lkZU11bHRpUmVuZGVyJyB9KSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyMjY1OTQxOiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkY1cIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+RjS1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJpZFwiLCBcIvCfkY0tY291bnRlci1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKyvwn5GNXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbnNpZGVNdWx0aVJlbmRlclwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+RjfCflKggc3ViIGNvdW50ZXItc3ViamVjdC1kaXNwbGF5OlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5GN8J+UqC1jb3VudGVyLXN1YmplY3QtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkY3wn5OhIHNpZ25hbCBjb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5OhLXNpZ25hbC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dIH0sIHsgXCJublwiOiBcImJyXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GN8J+UqCBzdWIgY291bnRlclwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5GN8J+UqC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcImJyXCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImlkXCIsIFwi8J+RjfCflKgtY291bnRlci1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKyvwn5GN8J+RjVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXCIgfV1dIH07XG4iLCJpbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSBcIi4vc2VjdGlvblNlbGVjdG9yLnRhZ1wiO1xuaW1wb3J0IHsgcnVuSXNvbGF0ZWRUZXN0cyB9IGZyb20gXCIuL2lzb2xhdGVkQXBwLnRlc3RcIjtcbmxldCB0ZXN0VGltZW91dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gcnVuVGVzdGluZyhtYW51YWwgPSB0cnVlLCB0ZXN0cywgcnVuU3RhcnRFbmRUZXN0cykge1xuICAgIGlmICh0ZXN0VGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGVzdFRpbWVvdXQpO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGDwn4+DIENsZWFyZWQgcHJldmlvdXMgdGVzdGluZyB0byBzdGFydCBhZ2Fpbi4uLmApO1xuICAgIH1cbiAgICBjb25zdCB3YWl0Rm9yID0gMjAwMDtcbiAgICB0ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0ZXN0cyA9IHRlc3RzIHx8IHN0b3JhZ2Uudmlld3M7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYPCfj4MgUHJlcGFyZSB0ZXN0IHN1aXRlcy4uLmApO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5Jc29sYXRlZFRlc3RzKHRlc3RzLCBydW5TdGFydEVuZFRlc3RzKTtcbiAgICAgICAgaWYgKCFtYW51YWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBhbGVydCgn4pyFIGFsbCBhcHAgdGVzdHMgcGFzc2VkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWxlcnQoJ+KdjCB0ZXN0cyBmYWlsZWQuIFNlZSBjb25zb2xlIGZvciBtb3JlIGRldGFpbHMnKTtcbiAgICB9LCB3YWl0Rm9yKTsgLy8gY2F1c2UgZGVsYXkgdG8gYmUgc2VwYXJhdGUgZnJvbSByZW5kZXJzXG59XG4iLCJpbXBvcnQgeyBWaWV3VHlwZXMgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyBleGVjdXRlQnJvd3NlclRlc3RzIH0gZnJvbSBcIi4vdGVzdGluZy90ZXN0UnVubmVyXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuSXNvbGF0ZWRUZXN0cyh2aWV3cywgcnVuU3RhcnRFbmRUZXN0cyA9IHRydWUpIHtcbiAgICBjb25zb2xlLmxvZygn8J+PgyBydW5Jc29sYXRlZFRlc3RzOiBMb2FkaW5nIHRlc3RzIGZvciB2aWV3czonLCB2aWV3cyk7XG4gICAgbGV0IHRlc3RDb3VudCA9IDA7XG4gICAgaWYgKHJ1blN0YXJ0RW5kVGVzdHMpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3N0YXJ0LnRlc3QuanMnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQ29udGVudCkpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2NvbnRlbnQudGVzdCcpO1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vZHVtcENvbnRlbnQudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Db3VudGVycykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2NvdW50ZXJzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuUHJvcHMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9wcm9wcy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlByb3ZpZGVyRGVidWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9wcm92aWRlcnMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5UYWdTd2l0Y2hEZWJ1ZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3RhZ1N3aXRjaC50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkNoaWxkKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vY2hpbGQudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5BcnJheXMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9hcnJheXMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5NaXJyb3JpbmcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9taXJyb3IudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5XYXRjaFRlc3RpbmcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi93YXRjaC50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkZ1bkluUHJvcHNUYWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9mdW5JblByb3BzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQXR0cmlidXRlRGVidWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9hdHRyaWJ1dGVzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuT25lUmVuZGVyKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vb25lUmVuZGVyLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuVG9kbykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3RvZG9zLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuRGVzdHJveXMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9kZXN0cm95cy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBjb25zb2xlLmRlYnVnKGDwn4+DIFJ1bm5pbmcgJHt0ZXN0Q291bnR9IHRlc3Qgc3VpdGVzLi4uYCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRlQnJvd3NlclRlc3RzKCk7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhg4pyFIHRlc3RzIGNvbXBsZXRlZCBpbiAke3RpbWV9bXNgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCB0ZXN0cyBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaHRtbCwgU3ViamVjdCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcnVuVGVzdGluZyB9IGZyb20gXCIuL3J1blRlc3RpbmcuZnVuY3Rpb25cIjtcbmV4cG9ydCB2YXIgVmlld1R5cGVzO1xuKGZ1bmN0aW9uIChWaWV3VHlwZXMpIHtcbiAgICBWaWV3VHlwZXNbXCJEZXN0cm95c1wiXSA9IFwiZGVzdHJveXNcIjtcbiAgICBWaWV3VHlwZXNbXCJUb2RvXCJdID0gXCJ0b2RvXCI7XG4gICAgVmlld1R5cGVzW1wiRnVuSW5Qcm9wc1RhZ1wiXSA9IFwiZnVuSW5Qcm9wc1RhZ1wiO1xuICAgIFZpZXdUeXBlc1tcIk9uZVJlbmRlclwiXSA9IFwib25lUmVuZGVyXCI7XG4gICAgVmlld1R5cGVzW1wiV2F0Y2hUZXN0aW5nXCJdID0gXCJ3YXRjaFRlc3RpbmdcIjtcbiAgICBWaWV3VHlwZXNbXCJNaXJyb3JpbmdcIl0gPSBcIm1pcnJvcmluZ1wiO1xuICAgIFZpZXdUeXBlc1tcIkNvbnRlbnRcIl0gPSBcImNvbnRlbnRcIjtcbiAgICBWaWV3VHlwZXNbXCJBcnJheXNcIl0gPSBcImFycmF5c1wiO1xuICAgIFZpZXdUeXBlc1tcIkNvdW50ZXJzXCJdID0gXCJjb3VudGVyc1wiO1xuICAgIFZpZXdUeXBlc1tcIlRhYmxlRGVidWdcIl0gPSBcInRhYmxlRGVidWdcIjtcbiAgICBWaWV3VHlwZXNbXCJQcm9wc1wiXSA9IFwicHJvcHNcIjtcbiAgICBWaWV3VHlwZXNbXCJDaGlsZFwiXSA9IFwiY2hpbGRcIjtcbiAgICBWaWV3VHlwZXNbXCJUYWdTd2l0Y2hEZWJ1Z1wiXSA9IFwidGFnU3dpdGNoRGVidWdcIjtcbiAgICBWaWV3VHlwZXNbXCJQcm92aWRlckRlYnVnXCJdID0gXCJwcm92aWRlckRlYnVnXCI7XG4gICAgVmlld1R5cGVzW1wiQXR0cmlidXRlRGVidWdcIl0gPSBcImF0dHJpYnV0ZURlYnVnXCI7XG59KShWaWV3VHlwZXMgfHwgKFZpZXdUeXBlcyA9IHt9KSk7XG5leHBvcnQgY29uc3Qgc3RvcmFnZSA9IGdldFNjb3BlZFN0b3JhZ2UoKTtcbmZ1bmN0aW9uIGdldFNjb3BlZFN0b3JhZ2UoKSB7XG4gICAgY29uc3Qgc3RyaW5nID0gbG9jYWxTdG9yYWdlLnRhZ2dlZGpzIHx8IEpTT04uc3RyaW5naWZ5KHsgYXV0b1Rlc3Q6IHRydWUsIHZpZXdzOiBPYmplY3QudmFsdWVzKFZpZXdUeXBlcykgfSk7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyaW5nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzYXZlU2NvcGVkU3RvcmFnZSgpIHtcbiAgICBsb2NhbFN0b3JhZ2UudGFnZ2VkanMgPSBKU09OLnN0cmluZ2lmeShzdG9yYWdlKTtcbn1cbmNvbnN0IGRlZmF1bHRWaWV3VHlwZXMgPSBPYmplY3QudmFsdWVzKFZpZXdUeXBlcyk7XG5leHBvcnQgY29uc3Qgc2VjdGlvblNlbGVjdG9yID0gKHZpZXdUeXBlcyA9IGRlZmF1bHRWaWV3VHlwZXMpID0+IHtcbiAgICAvLyBTb3J0IHZpZXdUeXBlcyBhbHBoYWJldGljYWxseVxuICAgIGNvbnN0IHNvcnRlZFZpZXdUeXBlcyA9IFsuLi52aWV3VHlwZXNdLnNvcnQoKGEsIGIpID0+IGEubG9jYWxlQ29tcGFyZShiKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQyODgyMFswXSwgc29ydGVkVmlld1R5cGVzLm1hcCh0eXBlID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQyODgyMFsxXSwgJ3ZpZXctdHlwZS0nICsgdHlwZSwgJ3ZpZXctdHlwZS0nICsgdHlwZSwgc3RvcmFnZS52aWV3cy5pbmNsdWRlcyh0eXBlKSAmJiAnY2hlY2tlZCcsICgpID0+IHRvZ2dsZVZpZXdUeXBlKHR5cGUpLCAndmlldy10eXBlLScgKyB0eXBlLCB0eXBlLCBgaXNvbGF0ZWQuaHRtbCMke3R5cGV9YCwgYCMke3R5cGV9YCkua2V5KHR5cGUpKSwgdmlld1R5cGVzLmxlbmd0aCA+IDEgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDI4ODIwWzJdLCAoKSA9PiB2aWV3VHlwZXMuZm9yRWFjaCh2aWV3VHlwZSA9PiB7XG4gICAgICAgIC8vIHZpZXdDaGFuZ2VkLm5leHQoe3ZpZXdUeXBlLCBjaGVja1Rlc3Rpbmc6IGZhbHNlfSlcbiAgICAgICAgYWN0aXZhdGUodmlld1R5cGUsIGZhbHNlKTtcbiAgICAgICAgc2F2ZVNjb3BlZFN0b3JhZ2UoKTtcbiAgICB9KSwgKCkgPT4gdmlld1R5cGVzLmZvckVhY2godmlld1R5cGUgPT4ge1xuICAgICAgICBkZWFjdGl2YXRlKHZpZXdUeXBlKTtcbiAgICAgICAgc2F2ZVNjb3BlZFN0b3JhZ2UoKTtcbiAgICB9KSkpO1xufTtcbnNlY3Rpb25TZWxlY3Rvci50ZW1wTm90ZSA9ICdzZWN0aW9ucyc7XG5mdW5jdGlvbiB0b2dnbGVWaWV3VHlwZSh0eXBlLCBjaGVja1Rlc3RpbmcgPSB0cnVlKSB7XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXModHlwZSkpIHtcbiAgICAgICAgZGVhY3RpdmF0ZSh0eXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXdDaGFuZ2VkLm5leHQoeyB0eXBlLCBjaGVja1Rlc3RpbmcgfSk7XG4gICAgfVxuICAgIHNhdmVTY29wZWRTdG9yYWdlKCk7XG59XG5leHBvcnQgY29uc3Qgdmlld0NoYW5nZWQgPSBuZXcgU3ViamVjdCgpO1xuZnVuY3Rpb24gZGVhY3RpdmF0ZSh0eXBlKSB7XG4gICAgKHN0b3JhZ2Uudmlld3MgPSBzdG9yYWdlLnZpZXdzLmZpbHRlcih4ID0+IHggIT09IHR5cGUpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSh0eXBlLCBjaGVja1Rlc3RpbmcgPSB0cnVlKSB7XG4gICAgc3RvcmFnZS52aWV3cy5wdXNoKHR5cGUpO1xuICAgIGlmIChjaGVja1Rlc3RpbmcgJiYgc3RvcmFnZS5hdXRvVGVzdCkge1xuICAgICAgICBydW5UZXN0aW5nKCk7XG4gICAgfVxufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQyODgyMDogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaDNcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiU2VjdGlvbnNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGNoZWNrYm94IG1lbnUgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2dhcDoxZW07ZmxleC13cmFwOndyYXA7bWFyZ2luOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblxcbiAgICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXg6MTt3aGl0ZS1zcGFjZTpub3dyYXA7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImNoZWNrYm94XCJdLCBbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wibmFtZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW3sgXCJ0YWdKc1ZhclwiOiAyIH1dLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wiZm9yXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDtcIiB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOi42ZW07dGV4dC1kZWNvcmF0aW9uOm5vbmU7XCJdLCBbXCJocmVmXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+Ul1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmb250LXNpemU6LjZlbTtcIl0sIFtcImhyZWZcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLihpfvuI9cIiB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwO2FsbFwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwO25vbmVcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGFycmF5RnVuVGFnID0gdGFnKChpdGVtLCBkZWxldGVJdGVtKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxOTM0N1swXSwgaXRlbSwgKCkgPT4gZGVsZXRlSXRlbShpdGVtKSkpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE5MzQ3OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggc29saWQgYmxhY2s7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkZWxldGVcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIG91dHB1dCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBhcnJheUZ1blRhZyB9IGZyb20gXCIuL2FycmF5RnVuLnRhZ1wiO1xuaW1wb3J0IHsgbWFpbiB9IGZyb20gXCIuL2Z1bkluUHJvcHMudGFnXCI7XG5leHBvcnQgY29uc3QgZnVuSW5Qcm9wc0NoaWxkID0gdGFnKChhcmcwLCBtYWluUHJvcCwgbXlGdW5jdGlvbjMpID0+IChvdGhlciA9ICdvdGhlcicsIGNvdW50ZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIF9fID0gc3RhdGVzKGdldCA9PiBbeyBvdGhlciwgY291bnRlciwgcmVuZGVyQ291bnQgfV0gPSBnZXQoeyBvdGhlciwgY291bnRlciwgcmVuZGVyQ291bnQgfSkpLCBfID0gKytyZW5kZXJDb3VudCwgeyBhZGRBcnJheUl0ZW0sIG15RnVuY3Rpb24sIGRlbGV0ZUl0ZW0sIGNoaWxkLCBhcnJheSB9ID0gYXJnMCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNTk4NjY5WzBdLCBtYWluUHJvcC5mdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbWFpblByb3AuY291bnQsIGNoaWxkLm15Q2hpbGRGdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbXlGdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbXlGdW5jdGlvbiwgb3V0cHV0KGNoaWxkLm15Q2hpbGRGdW5jdGlvbiksIG15RnVuY3Rpb24zLCBtYWluLmZ1bmN0aW9uLCAoKSA9PiArK2NvdW50ZXIsIGFycmF5Lmxlbmd0aCwgYXJyYXkubWFwKGl0ZW0gPT4gYXJyYXlGdW5UYWcoaXRlbSwgZGVsZXRlSXRlbSkua2V5KGl0ZW0pKSwgYWRkQXJyYXlJdGVtLCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnZnVuSW5Qcm9wc190YWdfY2hpbGQnIH0pKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNTk4NjY5OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibWFpbkZ1bmN0aW9uOlwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkRnVuY3Rpb246XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm15RnVuY3Rpb246XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJmdW5faW5fcHJvcDFcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+ksCArK29iamVjdCBhcmd1bWVudFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImZ1bl9pbl9wcm9wMlwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6SwICsrY2hpbGQubXlDaGlsZEZ1bmN0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZnVuX2luX3Byb3AzXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIivwn6SwICthcmd1bWVudFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfho4gKyttYWluXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKyttZVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZCBhcnJheSBsZW5ndGg6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJhZGRBcnJheUl0ZW1cIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEyIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5leHBvcnQgY29uc3QgYWRkQXJyYXlDb21wb25lbnQgPSB0YWcoKGFkZEFycmF5SXRlbSkgPT4gKHJlbmRlckNvdW50ID0gMCwgXyA9IHN0YXRlcyhnZXQgPT4gW3JlbmRlckNvdW50XSA9IGdldChyZW5kZXJDb3VudCkpLCBfXyA9ICsrcmVuZGVyQ291bnQsIGhhbmRsZUtleVVwID0gKGUpID0+IHtcbiAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgYWRkQXJyYXlJdGVtKHZhbHVlKTtcbiAgICAgICAgZS50YXJnZXQudmFsdWUgPSBcIlwiO1xuICAgIH1cbn0pID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY2OTY1WzBdLCBoYW5kbGVLZXlVcCwgKGUpID0+IHsgYWRkQXJyYXlJdGVtKGUudGFyZ2V0LnZhbHVlKTsgZS50YXJnZXQudmFsdWUgPSAnJzsgfSwgYWRkQXJyYXlJdGVtLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnYWRkQXJyYXlDb21wb25lbnQnIH0pKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjY5NjU6IFtbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcInRleHRcIl0sIFtcImtleXVwXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFkZCBieSBvdXRzaWRlXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cIiB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlcywgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgZnVuSW5Qcm9wc0NoaWxkIH0gZnJvbSBcIi4vZnVuSW5Qcm9wc0NoaWxkLnRhZ1wiO1xuaW1wb3J0IHsgYWRkQXJyYXlDb21wb25lbnQgfSBmcm9tIFwiLi9hZGRBcnJheUNvbXBvbmVudC50YWdcIjtcbmV4cG9ydCBjb25zdCBtYWluID0ge1xuICAgIGZ1bmN0aW9uOiAoKSA9PiArK21haW4uY291bnQsXG4gICAgY291bnQ6IDAsXG59O1xuZXhwb3J0IGRlZmF1bHQgdGFnKCgpID0+IChhcnJheSA9IFtdLCBjb3VudGVyID0gMCwgcmVuZGVyQ291bnQgPSAwLCBzaG93Q2hpbGQgPSB0cnVlLCBzb21ldGhpbmdFbHNlID0gJ2EnLCBteUZ1bmN0aW9uID0gKCkgPT4gKytjb3VudGVyLCBfc3RhdGVzID0gc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICBhcnJheSwgY291bnRlciwgcmVuZGVyQ291bnQsIHNob3dDaGlsZCwgc29tZXRoaW5nRWxzZVxuICAgIH1dID0gZ2V0KHtcbiAgICBhcnJheSwgY291bnRlciwgcmVuZGVyQ291bnQsIHNob3dDaGlsZCwgc29tZXRoaW5nRWxzZVxufSkpLCBfID0gKytyZW5kZXJDb3VudCwgYWRkQXJyYXlJdGVtID0gKHgpID0+IHtcbiAgICBhcnJheSA9IGFycmF5Lm1hcCh4ID0+IHgpO1xuICAgIGFycmF5LnB1c2godHlwZW9mICh4KSA9PT0gJ3N0cmluZycgPyB4IDogJ3B1c2gnICsgYXJyYXkubGVuZ3RoKTtcbn0sIGRlbGV0ZUl0ZW0gPSAoaXRlbSkgPT4gYXJyYXkgPSBhcnJheS5maWx0ZXIoeCA9PiB4ICE9PSBpdGVtKSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzYwNjUyWzBdLCBteUZ1bmN0aW9uLCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnZnVuSW5Qcm9wc190YWdfcGFyZW50JyB9KSwgbWFpbi5mdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbWFpbi5jb3VudCwgKCkgPT4gc2hvd0NoaWxkID0gIXNob3dDaGlsZCwgYXJyYXkubGVuZ3RoLCBhZGRBcnJheUl0ZW0sIHNob3dDaGlsZCAmJiBmdW5JblByb3BzQ2hpbGQoe1xuICAgIG15RnVuY3Rpb24sIGFycmF5LCBhZGRBcnJheUl0ZW0sIGRlbGV0ZUl0ZW0sXG4gICAgY2hpbGQ6IHsgbXlDaGlsZEZ1bmN0aW9uOiBteUZ1bmN0aW9uIH1cbn0sIG1haW4sIG15RnVuY3Rpb24pLCBhZGRBcnJheUNvbXBvbmVudChhZGRBcnJheUl0ZW0pKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMzYwNjUyOiBbW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImZ1bi1wYXJlbnQtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpLAgKytwYXJlbnRcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZnVuX2luX3Byb3BfZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfho4gbWFpbjpcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibWFpbl93cmFwX3N0YXRlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtZnVuLWluLWNoaWxkXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZ2dsZSBjaGlsZFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFycmF5IGxlbmd0aDogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZXNldCBhZGRcIiB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcXG4gIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXCIgfV1dIH07XG4iLCJpbXBvcnQgeyBzdGF0ZXMsIGh0bWwsIHRhZyB9IGZyb20gJ3RhZ2dlZGpzJztcbmV4cG9ydCBjb25zdCBJdGVtID0gdGFnLmltbXV0YWJsZVByb3BzKCh0b2RvLCBkaXNwYXRjaCwgaW5kZXgpID0+IChlZGl0aW5nID0gZmFsc2UsIF8gPSBzdGF0ZXMoZ2V0ID0+IFtlZGl0aW5nXSA9IGdldChlZGl0aW5nKSkpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTcyNzYzWzBdLCB0b2RvLmNvbXBsZXRlZCwgZWRpdGluZywgIWVkaXRpbmcgPyBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNzI3NjNbMV0sIHRvZG8uY29tcGxldGVkICYmICfinIUnLCAoZSkgPT4gZGlzcGF0Y2gudG9nZ2xlSXRlbSh0b2RvLCBpbmRleCksIHRvZG8uY29tcGxldGVkICYmICdjaGVja2VkJywgKCkgPT4gZGlzcGF0Y2gudG9nZ2xlSXRlbSh0b2RvLCBpbmRleCksICgpID0+IGVkaXRpbmcgPSAhZWRpdGluZywgdG9kby50aXRsZSwgKCkgPT4gZGlzcGF0Y2gucmVtb3ZlSXRlbUJ5SW5kZXgoaW5kZXgpKSA6IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczE3Mjc2M1syXSwgdG9kby50aXRsZSwgKCkgPT4gZWRpdGluZyA9IGZhbHNlLCAoZSkgPT4gaGFuZGxlS2V5KGUsIHRpdGxlID0+IHtcbiAgICAgICAgaGFuZGxlVXBkYXRlKHRpdGxlLCB0b2RvLCBpbmRleCwgZGlzcGF0Y2gpO1xuICAgICAgICBlZGl0aW5nID0gZmFsc2U7XG4gICAgfSkpKTtcbn0pO1xuZnVuY3Rpb24gaGFuZGxlVXBkYXRlKHRpdGxlLCB0b2RvLCBpbmRleCwgZGlzcGF0Y2gpIHtcbiAgICBpZiAodGl0bGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRpc3BhdGNoLnJlbW92ZUl0ZW0odG9kby5pZCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlzcGF0Y2gudXBkYXRlVG9CeUluZGV4KHRvZG8sIHsgdGl0bGUgfSwgaW5kZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUtleShlLCBvblZhbGlkKSB7XG4gICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZS50cmltKCk7XG4gICAgICAgIG9uVmFsaWQodmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG47XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTcyNzYzOiBbW3sgXCJublwiOiBcImxpXCIsIFwiYXRcIjogW1tcImNsYXNzLmNvbXBsZXRlZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBcImNsYXNzXCJdLCBbXCJjbGFzcy5lZGl0aW5nXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIFwiY2xhc3NcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidmlld1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcInZhbHVlXCIsIFwidG9nZ2xlXCJdXSB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZ2dsZVwiXSwgW1widHlwZVwiLCBcImNoZWNrYm94XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDIgfV0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wiZGF0YS10ZXN0aWRcIiwgXCJ0b2RvLWl0ZW0tbGFiZWxcIl0sIFtcImRibGNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJkZXN0cm95XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRlc3Ryb3lcIiB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcImlucHV0LWNvbnRhaW5lclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZWRpdC10b2RvLWlucHV0XCJdLCBbXCJ0eXBlXCIsIFwidGV4dFwiXSwgW1wiYXV0b2ZvY3VzXCJdLCBbXCJjbGFzc1wiLCBcImVkaXRcIl0sIFtcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJibHVyXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJrZXlkb3duXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInZpc3VhbGx5LWhpZGRlblwiXSwgW1wiaHRtbGZvclwiLCBcInRvZG8taW5wdXRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJFZGl0IFRvZG8gSW5wdXRcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgaGFuZGxlS2V5IH0gZnJvbSBcIi4vaXRlbS5qc1wiO1xuZXhwb3J0IGNvbnN0IEhlYWRlciA9IChkaXNwYXRjaCkgPT4gdGFnLnJlbmRlck9uY2UgPSAoKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0Nzg2MFswXSwgKGUpID0+IHtcbiAgICBjb25zdCBlbnRlciA9IGhhbmRsZUtleShlLCB0aXRsZSA9PiBkaXNwYXRjaC5hZGRJdGVtKHRpdGxlKSk7XG4gICAgaWYgKGVudGVyKSB7XG4gICAgICAgIGUudGFyZ2V0LnZhbHVlID0gXCJcIjtcbiAgICB9XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M0Nzg2MDogW1t7IFwibm5cIjogXCJoZWFkZXJcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJoZWFkZXJcIl0sIFtcImRhdGEtdGVzdGlkXCIsIFwiaGVhZGVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaDFcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidG9kb3NcIiB9XSB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJhdXRvZm9jdXNcIl0sIFtcImNsYXNzXCIsIFwibmV3LXRvZG9cIl0sIFtcInBsYWNlaG9sZGVyXCIsIFwiV2hhdCBuZWVkcyB0byBiZSBkb25lP1wiXSwgW1wia2V5ZG93blwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyB0YWcsIGh0bWwgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCBGb290ZXIgPSB0YWcuaW1tdXRhYmxlUHJvcHMoKHRvZG9zQ291bnQsIHJlbW92ZUNvbXBsZXRlZCwgcm91dGUsIGFjdGl2ZVRvZG9Db3VudCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzcxNTZbMF0sIGFjdGl2ZVRvZG9Db3VudCwgYWN0aXZlVG9kb0NvdW50ID4gMSAmJiBcInNcIiwgcm91dGUgPT09IFwiL1wiLCByb3V0ZSA9PT0gXCIvYWN0aXZlXCIsIHJvdXRlID09PSBcIi9jb21wbGV0ZWRcIiwgKHRvZG9zQ291bnQgLSBhY3RpdmVUb2RvQ291bnQpID4gMCAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3NzE1NlsxXSwgKCkgPT4gcmVtb3ZlQ29tcGxldGVkKCkpKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNzcxNTY6IFtbeyBcIm5uXCI6IFwiZm9vdGVyXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwiZm9vdGVyXCJdLCBbXCJkYXRhLXRlc3RpZFwiLCBcImZvb3RlclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0b2RvLWNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgaXRlbVwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIGxlZnQhXCIgfV0gfSwgeyBcIm5uXCI6IFwidWxcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJmaWx0ZXJzXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRvZG8tdmlldy1hbGwtbGlua1wiXSwgW1wiY2xhc3Muc2VsZWN0ZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJjbGFzc1wiXSwgW1wiaHJlZlwiLCBcIiMvXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQWxsXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwibGlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRvZG8tdmlldy1hY3RpdmUtbGlua1wiXSwgW1wiY2xhc3Muc2VsZWN0ZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgXCJjbGFzc1wiXSwgW1wiaHJlZlwiLCBcIiMvYWN0aXZlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQWN0aXZlXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwibGlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRvZG8tdmlldy1jb21wbGV0ZWQtbGlua1wiXSwgW1wiY2xhc3Muc2VsZWN0ZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgXCJjbGFzc1wiXSwgW1wiaHJlZlwiLCBcIiMvY29tcGxldGVkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ29tcGxldGVkXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSwgW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcImNsZWFyLWNvbXBsZXRlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJDbGVhciBjb21wbGV0ZWRcIiB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGNhbGxiYWNrLCBvbkRlc3Ryb3ksIHN0YXRlIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5jb25zdCBnZXRIYXNoID0gKCkgPT4gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpIHx8ICcvJztcbi8qKiBvbmx5IHNob3VsZCBydW4gb25jZSAqL1xuY29uc3QgSGFzaFJvdXRlciA9IChvbkhhc2hDaGFuZ2UpID0+IHtcbiAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IG9uSGFzaENoYW5nZShnZXRIYXNoKCkpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgIHJldHVybiBsaXN0ZW5lcjtcbn07XG4vKiogSG9vayBpbnRvIGJyb3dzZXIgd2luZG93IGhhc2ggY2hhbmdlcyBhbmQgY2F1c2Ugc3RhdGUgdG8gcmVuZGVyIGFmdGVyIGNoYW5nZSAqL1xuZXhwb3J0IGNvbnN0IHVzZUhhc2hSb3V0ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgbWVtb3J5ID0gc3RhdGUoKCkgPT4gKHtcbiAgICAgICAgcm91dGU6IGdldEhhc2goKSxcbiAgICAgICAgbG9jYXRpb246IHdpbmRvdy5sb2NhdGlvbixcbiAgICB9KSk7XG4gICAgLy8gV2hhdCB0byBydW4gb24gY2hhbmdlIGFuZCBzaWduaWZ5IGEgc3RhdGUgY2hhbmdlIHdpbGwgb2NjdXIuIE9ubHkgZmlyc3QgaW5zdGFuY2UgaXMgdXNlZCBiZWxvdyBpbiBsaXN0ZW5lclxuICAgIGNvbnN0IG9uSGFzaENoYW5nZSA9IGNhbGxiYWNrKChyb3V0ZSkgPT4gbWVtb3J5LnJvdXRlID0gZ2V0SGFzaCgpKTtcbiAgICAvLyBydW5zIGZ1bmN0aW9uIGNhbGwgb25seSBvbmNlXG4gICAgY29uc3QgbGlzdGVuZXIgPSBzdGF0ZSgoKSA9PiB7XG4gICAgICAgIHJldHVybiBIYXNoUm91dGVyKG9uSGFzaENoYW5nZSk7XG4gICAgfSk7XG4gICAgb25EZXN0cm95KCgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgbGlzdGVuZXIpKTtcbiAgICByZXR1cm4gbWVtb3J5O1xufTtcbiIsImltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvaGVhZGVyLmpzXCI7XG5pbXBvcnQgeyBGb290ZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL2Zvb3Rlci5qc1wiO1xuaW1wb3J0IHsgdG9kb1JlZHVjZXIgfSBmcm9tIFwiLi9yZWR1Y2VyLmpzXCI7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyB1c2VIYXNoUm91dGVyIH0gZnJvbSBcIi4vSGFzaFJvdXRlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuL2NvbXBvbmVudHMvaXRlbS5qc1wiO1xuZXhwb3J0IGNvbnN0IHRvZG9zID0gW107XG5jb25zdCBkaXNwYXRjaCA9IHRvZG9SZWR1Y2VyKHRvZG9zKTtcbmV4cG9ydCBjb25zdCB0b2RvQXBwID0gKCkgPT4ge1xuICAgIGNvbnN0IHJvdXRlID0gdXNlSGFzaFJvdXRlcigpLnJvdXRlO1xuICAgIGNvbnN0IGFjdGl2ZVRvZG9Db3VudCA9IHRvZG9zLmZpbHRlcigodG9kbykgPT4gIXRvZG8uY29tcGxldGVkKS5sZW5ndGg7XG4gICAgY29uc3QgaXNBY3RpdmVSb3V0ZSA9IHJvdXRlID09PSBcIi9hY3RpdmVcIjtcbiAgICBjb25zdCBpc0NvbXBsZXRlZFJvdXRlID0gcm91dGUgPT09IFwiL2NvbXBsZXRlZFwiO1xuICAgIGNvbnN0IHZpc2libGVUb2RvcyA9IGlzQWN0aXZlUm91dGUgJiYgdG9kb3MuZmlsdGVyKHRvZG8gPT4gIXRvZG8uY29tcGxldGVkKSB8fFxuICAgICAgICBpc0NvbXBsZXRlZFJvdXRlICYmIHRvZG9zLmZpbHRlcih0b2RvID0+IHRvZG8uY29tcGxldGVkKSB8fCB0b2RvcztcbiAgICBjb25zdCB0b2RvQ291bnQgPSB0b2Rvcy5sZW5ndGg7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczE1MDc0NlswXSwgLyphdXRvVGVzdGluZ0NvbnRyb2xzKFtWaWV3VHlwZXMuVG9kb10sIGZhbHNlKSovIGZhbHNlLCBIZWFkZXIoZGlzcGF0Y2gpLCB0b2RvQ291bnQgPiAwICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczE1MDc0NlsxXSwgYWN0aXZlVG9kb0NvdW50IDwgMSwgKGUpID0+IGRpc3BhdGNoLnRvZ2dsZUFsbChlLnRhcmdldC5jaGVja2VkKSwgdmlzaWJsZVRvZG9zLm1hcCgodG9kbywgaW5kZXgpID0+IEl0ZW0odG9kbywgZGlzcGF0Y2gsIGluZGV4KS5rZXkodG9kby5pZCkpLCBGb290ZXIodG9kb0NvdW50LCBkaXNwYXRjaC5yZW1vdmVDb21wbGV0ZWQsIHJvdXRlLCBhY3RpdmVUb2RvQ291bnQpKSk7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE1MDc0NjogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfV0sIFt7IFwibm5cIjogXCJtYWluXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwibWFpblwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZ2dsZS1hbGwtY29udGFpbmVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtYWxsXCJdLCBbXCJjbGFzc1wiLCBcInRvZ2dsZS1hbGxcIl0sIFtcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW1wiY2hlY2tlZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZ2dsZS1hbGwtbGFiZWxcIl0sIFtcImZvclwiLCBcInRvZ2dsZS1hbGxcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJUb2dnbGUgQWxsIElucHV0XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidWxcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0b2RvLWxpc3Qgc2hvdy1wcmlvcml0eVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH1dXSB9O1xuIiwiZnVuY3Rpb24gdXVpZCgpIHtcbiAgICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9kb1JlZHVjZXIodG9kb3MpIHtcbiAgICBmdW5jdGlvbiBhZGRJdGVtKHRpdGxlKSB7XG4gICAgICAgIHRvZG9zLnB1c2goeyBpZDogdXVpZCgpLCB0aXRsZSwgY29tcGxldGVkOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVJdGVtKGlkKSB7XG4gICAgICAgIHJldHVybiB0b2Rvcy5maWx0ZXIoKHQpID0+IHQuaWQgIT09IGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlSXRlbUJ5SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdG9kb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b2dnbGVJdGVtKHRvZG8sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVUb0J5SW5kZXgodG9kbywgeyBjb21wbGV0ZWQ6ICF0b2RvLmNvbXBsZXRlZCB9LCBpbmRleCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbCgpIHtcbiAgICAgICAgdG9kb3MgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b2dnbGVBbGwoY29tcGxldGVkKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdG9kb3MubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICAgICAgdG9kb3NbaW5kZXhdID0ge1xuICAgICAgICAgICAgICAgIC4uLnRvZG9zW2luZGV4XSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2RvcztcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQ29tcGxldGVkKCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRvZG9zLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh0b2Rvc1tpbmRleF0uY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgdG9kb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9kb3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVRvQnlJbmRleCh0b2RvLCBwYXJ0aWFsLCBpbmRleCkge1xuICAgICAgICB0b2Rvc1tpbmRleF0gPSB7IC4uLnRvZG8sIC4uLnBhcnRpYWwgfTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRJdGVtLFxuICAgICAgICByZW1vdmVJdGVtLFxuICAgICAgICB0b2dnbGVJdGVtLFxuICAgICAgICByZW1vdmVBbGwsXG4gICAgICAgIHRvZ2dsZUFsbCxcbiAgICAgICAgcmVtb3ZlQ29tcGxldGVkLFxuICAgICAgICByZW1vdmVJdGVtQnlJbmRleCxcbiAgICAgICAgY29tcGxldGVJdGVtOiBmdW5jdGlvbiBjb21wbGV0ZUl0ZW0odG9kbywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVUb0J5SW5kZXgodG9kbywgeyBjb21wbGV0ZWQ6IHRydWUgfSwgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVJdGVtQnlJbmRleDogZnVuY3Rpb24gdXBkYXRlSXRlbUJ5SW5kZXgodG9kbywgaW5kZXgpIHtcbiAgICAgICAgICAgIHRvZG9zW2luZGV4XSA9IHsgLi4udG9kbyB9O1xuICAgICAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVUb0J5SW5kZXgsXG4gICAgfTtcbn1cbjtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlcywgdGFnLCBpc1N1YmplY3RJbnN0YW5jZSB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnRcIjtcbmV4cG9ydCBjb25zdCBpbm5lckh0bWxUZXN0ID0gdGFnKChfcHJvcHMsIGIsIGNoaWxkcmVuKSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBjb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IGNvdW50ZXIsIHJlbmRlckNvdW50IH0pKTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMjgwMjZbMF0sIGNoaWxkcmVuLCBpc1N1YmplY3RJbnN0YW5jZShjaGlsZHJlbiksIGNoaWxkcmVuIGluc3RhbmNlb2YgQXJyYXksICgpID0+ICsrY291bnRlciwgY291bnRlciwgY291bnRlciwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2lubmVySHRtbFRlc3QnIH0pKTtcbn0pO1xuZXhwb3J0IGNvbnN0IGlubmVySHRtbFByb3BzVGVzdCA9IHRhZygoeCwgY2hpbGRyZW4pID0+IChjb3VudGVyID0gMCwgcmVuZGVyQ291bnQgPSAwLCBfID0gc3RhdGVzKGdldCA9PiBbeyBjb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IGNvdW50ZXIsIHJlbmRlckNvdW50IH0pKSwgX18gPSArK3JlbmRlckNvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMjgwMjZbMV0sIHgsIGNoaWxkcmVuLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIGNvdW50ZXIsIC8qcmVuZGVyQ291bnREaXYocmVuZGVyQ291bnQpKi8gZmFsc2UpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxMjgwMjY6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLWlubmVySHRtbFRlc3RzLmpzLS0+XCIgfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxUZXN0cy0xXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm5vIHByb3BzIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MnB4IHNvbGlkIHB1cnBsZTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpc1N1YmplY3RJbnN0YW5jZTpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpc1N1YmplY3RUYWdBcnJheTpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFRlc3QtY291bnRlci1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2UgaW5uZXJIdG1sVGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxUZXN0LWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1pbm5lckh0bWxUZXN0cy5qcy0tPlwiIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sVGVzdHMtMlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lckhUTUwgUHJvcHM6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxQcm9wc1Rlc3QtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIGlubmVySHRtbFByb3BzVGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxQcm9wc1Rlc3QtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGdldElubmVySFRNTCwgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGlubmVySHRtbFByb3BzVGVzdCwgaW5uZXJIdG1sVGVzdCB9IGZyb20gXCIuL2lubmVySHRtbFRlc3RzLmpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuY29uc3QgdGVzdDIyID0gdGFnKChhLCBiLCBjaGlsZHJlbikgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzk1MDUyWzBdLCBhLCBiLCBjaGlsZHJlbikpO1xuY29uc3Qgbm9UYWdUZXN0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGlubmVySFRNTCA9IGdldElubmVySFRNTCgpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3OTUwNTJbMV0sIDExLCBpbm5lckhUTUwsIDIyKS5hY2NlcHRJbm5lckhUTUwoaW5uZXJIVE1MKTtcbn07XG5leHBvcnQgY29uc3QgY2hpbGQgPSB0YWcoKF8gPSAnY2hpbGRUZXN0cycpID0+IChyZW5kZXJDb3VudCA9IDAsIGNvdW50ZXIgPSAwLCBfID0gc3RhdGVzKGdldCA9PiBbeyByZW5kZXJDb3VudCwgY291bnRlciB9XSA9IGdldCh7IHJlbmRlckNvdW50LCBjb3VudGVyIH0pKSwgX18gPSArK3JlbmRlckNvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3OTUwNTJbMl0sIHRlc3QyMigxLCAyLCBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3OTUwNTJbM10sIERhdGUubm93KCkpKSwgaW5uZXJIdG1sVGVzdCh7fSwgMiwgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzk1MDUyWzRdLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIHJlbmRlckNvdW50LCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY2hpbGRUZXN0cy1pbm5lckh0bWxUZXN0JyB9KSkpLCBub1RhZ1Rlc3QoKS5pbm5lckhUTUwgPSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3OTUwNTJbNV0sICgpID0+ICsrY291bnRlciwgY291bnRlciwgcmVuZGVyQ291bnQsIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjaGlsZFRlc3RzLWlubmVySHRtbFRlc3QtYycgfSkpLCBpbm5lckh0bWxQcm9wc1Rlc3QoMjIsIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczc5NTA1Mls2XSwgKCkgPT4gKytjb3VudGVyLCBjb3VudGVyLCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnaW5uZXJIdG1sUHJvcHNUZXN0IGNoaWxkJyB9KSkpLCBjaGlsZEFzUHJvcFRlc3QoeyBjaGlsZDogaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzk1MDUyWzddLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIGNvdW50ZXIpIH0pLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIHJlbmRlckNvdW50LCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY2hpbGRUZXN0cycgfSkpKTtcbmZ1bmN0aW9uIGNoaWxkQXNQcm9wVGVzdCh7IGNoaWxkIH0pIHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzk1MDUyWzhdLCBjaGlsZCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNzk1MDUyOiBbW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ4eHh4eFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoZWxsbyBvdGhlciB3b3JsZCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiAtIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjJweCBzb2xpZCByZWQ7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKioqXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIqKipcIiB9XSB9XSB9XSwgW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJub1RhZ1Rlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tLVwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKysrXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDoyIDIgMjBlbVwiXSwgW1wiaWRcIiwgXCJjaGlsZHJlbi10ZXN0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkVGVzdHNcIiB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFxcbiAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblxcbiAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblxcbiAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGRUZXN0cy1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QriBpbmNyZWFzZSBjaGlsZFRlc3RzIG91dHNpZGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgLSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjaGlsZFRlc3RzLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJhYmMtMTIzLVwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiaHJcIiB9XSB9XSwgW3sgXCJublwiOiBcImJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiRmllbGQgc2V0IGJvZHkgQVwiIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CuIChBKSBpbmNyZWFzZSBjaGlsZFRlc3RzIGluc2lkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfV0sIFt7IFwibm5cIjogXCJiXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkZpZWxkIHNldCBib2R5IENcIiB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1idXR0b24tY1wiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CuIChDKSBpbmNyZWFzZSBjaGlsZFRlc3RzIGluc2lkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtZGlzcGxheS1jXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBcIiB9XSwgW3sgXCJublwiOiBcImJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiRmllbGQgc2V0IGJvZHkgQlwiIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sUHJvcHNUZXN0LWNoaWxkVGVzdHMtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkK4gKEIpIGluY3JlYXNlIGNoaWxkVGVzdHMgaW5zaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFByb3BzVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgaGVsbG8gY2hpbGQgYXMgcHJvcCB0ZXN0XCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGQtYXMtcHJvcC10ZXN0LWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CuIGNoaWxkIGFzIHByb3AgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGQtYXMtcHJvcC10ZXN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkIGFzIHByb3BcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgb25EZXN0cm95LCBzaWduYWwsIHN0YXRlcywgdGFnLCBob3N0IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xubGV0IGRlc3Ryb3lDb3VudCA9IHNpZ25hbCgwKTsgLy8gbGV0cyB1c2UgU2lnbmFsc1xuZXhwb3J0IGNvbnN0IGRlc3Ryb3lzID0gdGFnKCgpID0+IChvbiA9IHRydWUsIHJlbmRlckNvdW50ID0gMCwgXyA9IHN0YXRlcyhnZXQgPT4gW3sgcmVuZGVyQ291bnQsIG9uIH1dID0gZ2V0KHsgcmVuZGVyQ291bnQsIG9uIH0pKSwgX18gPSArK3JlbmRlckNvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3Mjk5MFswXSwgZGVzdHJveUNvdW50LCBvbiwgb24gJiYgdG9EZXN0cm95KCksICgpID0+IHtcbiAgICBvbiA9ICFvbjtcbn0sIG9uID8gJ2Rlc3Ryb3knIDogJ3Jlc3RvcmUnLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnZGVzdHJveXMnIH0pKSk7XG5jb25zdCB0b0Rlc3Ryb3kgPSB0YWcoKCkgPT4gKF8gPSBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICsrZGVzdHJveUNvdW50LnZhbHVlO1xufSkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczcyOTkwWzFdLCBob3N0Lm9uRGVzdHJveSgoKSA9PiB7XG4gICAgKytkZXN0cm95Q291bnQudmFsdWU7XG59KSkpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczcyOTkwOiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgZGVzdHJveUNvdW50OiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZGVzdHJveUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJvbi9vZmY6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcXG4gIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9nZ2xlLWRlc3Ryb3lzXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggc29saWQgb3JhbmdlO1wiXSwgW1wiaWRcIiwgXCJkZXN0cm95YWJsZS1jb250ZW50XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3aWxsIGJlIGRlc3Ryb3llZFwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tICcuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBodG1sLCBzdGF0ZXMsIHRhZyB9IGZyb20gJ3RhZ2dlZGpzJztcbmV4cG9ydCBjb25zdCBhcnJheVNjb3JlRGF0YSA9IHRhZygoeyBzY29yZSwgcGxheWVySW5kZXggfSkgPT4ge1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbcmVuZGVyQ291bnRdID0gZ2V0KHJlbmRlckNvdW50KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NzhbMF0sIHNjb3JlLmZyYW1lLCBgc2NvcmUtZGF0YS0ke3BsYXllckluZGV4fS0ke3Njb3JlLmZyYW1lfS1pbnNpZGUtYnV0dG9uYCwgKCkgPT4gKytzY29yZS5zY29yZSwgc2NvcmUuc2NvcmUsIGBzY29yZS1kYXRhLSR7cGxheWVySW5kZXh9LSR7c2NvcmUuZnJhbWV9LWluc2lkZS1kaXNwbGF5YCwgc2NvcmUuc2NvcmUsICgpID0+ICsrcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzY29yZURhdGEnICsgc2NvcmUuZnJhbWUgfSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjc4Nzg6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIGZyYW1lOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lciBzY29yZSBidXR0b24gKytcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIHJlbmRlckNvdW50XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dXSB9O1xuIiwiaW1wb3J0IHsgZngsIGZ4R3JvdXAgfSBmcm9tICd0YWdnZWRqcy1hbmltYXRlLWNzcyc7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gJy4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzJztcbmltcG9ydCB7IGFycmF5U2NvcmVEYXRhIH0gZnJvbSAnLi9hcnJheVNjb3JlRGF0YS50YWcuanMnO1xuaW1wb3J0IHsgaHRtbCwgc3RhdGUsIHRhZywgc3RhdGVzLCBhcnJheSwgc3Vic2NyaWJlIH0gZnJvbSAndGFnZ2VkanMnO1xuZXhwb3J0IGNvbnN0IGFycmF5cyA9IHRhZygoKSA9PiAocGxheWVycyA9IHN0YXRlKFtdKSwgcmVuZGVyQ291bnQgPSAwLCBjb3VudGVyID0gMCwgXyA9IHN0YXRlcyhnZXQgPT4gW3sgY291bnRlciwgcmVuZGVyQ291bnQgfV0gPSBnZXQoeyBjb3VudGVyLCByZW5kZXJDb3VudCB9KSkpID0+IHtcbiAgICBjb25zdCBzaWduYWxBcnJheSA9IGFycmF5KFsnZCcsICdlJywgJ2YnXSk7XG4gICAgY29uc3Qgc2ltcGxlQXJyYXkgPSBzdGF0ZShbJ2EnLCAnYicsICdjJ10pO1xuICAgIGNvbnN0IGFycmF5RnggPSBzdGF0ZSgoKSA9PiBmeEdyb3VwKHsgc3RhZ2dlcjogMTAsIGR1cmF0aW9uOiAnLjFzJyB9KSk7XG4gICAgY29uc3QgZ2V0TmV3UGxheWVyID0gKCkgPT4gKHtcbiAgICAgICAgbmFtZTogJ1BlcnNvbiAnICsgcGxheWVycy5sZW5ndGgsXG4gICAgICAgIHNjb3JlczogJzAsJy5yZXBlYXQoLypmcmFtZUNvdW50Ki8gMCkuc3BsaXQoJywnKS5tYXAoKF92LCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgIGZyYW1lOiBpbmRleCArIDEsXG4gICAgICAgICAgICBzY29yZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCkgKyAxXG4gICAgICAgIH0pKVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGFkZEFycmF5U2lnbmFsKGxvb3BUaW1lcykge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9vcFRpbWVzOyArK2luZGV4KSB7XG4gICAgICAgICAgICBzaWduYWxBcnJheVtzaWduYWxBcnJheS5sZW5ndGhdID0gc2lnbmFsQXJyYXkubGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODczOTY4WzBdLCBjb3VudGVyLCBzaWduYWxBcnJheS5sZW5ndGgsIHN1YnNjcmliZShzaWduYWxBcnJheSwgYXJyYXkgPT4ge1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKCh4LCBpbmRleCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODczOTY4WzFdLCBhcnJheUZ4LCBgc2lnbmFsLWFycmF5LWl0ZW0tJHtpbmRleH1gLCBpbmRleCwgYHNpZ25hbC1hcnJheS1pdGVtLWNvdW50ZXItZGlzcGxheS0ke2luZGV4fWAsIGNvdW50ZXIsIHgsIHNpZ25hbEFycmF5Lmxlbmd0aCwgYHNpZ25hbC1hcnJheS1pdGVtLWRlbGV0ZS1idG4tJHtpbmRleH1gLCAoKSA9PiB7XG4gICAgICAgICAgICBzaWduYWxBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9LCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIpLmtleSh4KSk7XG4gICAgfSksICgpID0+ICsrY291bnRlciwgY291bnRlciwgKCkgPT4gYWRkQXJyYXlTaWduYWwoMSksICgpID0+IGFkZEFycmF5U2lnbmFsKDEwKSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNpZ25hbEFycmF5W3NpZ25hbEFycmF5Lmxlbmd0aF0gPSBzaWduYWxBcnJheS5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNpZ25hbEFycmF5Lmxlbmd0aCA9IDA7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH0sIHNpbXBsZUFycmF5Lm1hcCgoeCwgaW5kZXgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczg3Mzk2OFsyXSwgY291bnRlciwgaW5kZXgsIHgsIHNpbXBsZUFycmF5Lmxlbmd0aCwgKCkgPT4ge1xuICAgICAgICBzaW1wbGVBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0pLmtleSh4KSksICgpID0+ICsrY291bnRlciwgY291bnRlciwgKCkgPT4gc2ltcGxlQXJyYXlbc2ltcGxlQXJyYXkubGVuZ3RoXSA9IHNpbXBsZUFycmF5Lmxlbmd0aC50b1N0cmluZygpLCBwbGF5ZXJzRGlzcGxheSh7IHBsYXllcnMsIGdldE5ld1BsYXllciB9KSwgKCkgPT4ge1xuICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgIH0sIHBsYXllcnMubGVuZ3RoICsgMSwgKCkgPT4ge1xuICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgIH0sICgpID0+IHtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICB9LCBwbGF5ZXJzLmxlbmd0aCA+IDAgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODczOTY4WzNdLCBmeCh7IGR1cmF0aW9uOiAnLjFzJyB9KSwgKCkgPT4gcGxheWVycy5sZW5ndGggPSAwKSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2FycmF5VGVzdHMudHMnIH0pKTtcbn0pO1xuY29uc3QgcGxheWVyc0Rpc3BsYXkgPSB0YWcoKHsgcGxheWVycywgZ2V0TmV3UGxheWVyLCB9KSA9PiB7XG4gICAgY29uc3QgcGxheWVyc0NvbnRlbnQgPSBwbGF5ZXJzLm1hcCgocGxheWVyLCBpbmRleCkgPT4gZ2V0UGxheWVyRGlzcGxheShwbGF5ZXIsIGluZGV4LCBwbGF5ZXJzLCBnZXROZXdQbGF5ZXIpLmtleShwbGF5ZXIpKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODczOTY4WzRdLCBwbGF5ZXJzQ29udGVudCk7XG59KTtcbmZ1bmN0aW9uIGdldFBsYXllckRpc3BsYXkocGxheWVyLCBpbmRleCwgcGxheWVycywgZ2V0TmV3UGxheWVyKSB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczg3Mzk2OFs1XSwgZngoeyBkdXJhdGlvbjogJy4xcycgfSksIHBsYXllci5uYW1lLCBpbmRleCwgcGxheWVyLnNjb3Jlcy5tYXAoKHNjb3JlLCBwbGF5ZXJJbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODczOTY4WzZdLCBmeCgpLCBgc2NvcmUtZGF0YS0ke3BsYXllckluZGV4fS0ke3Njb3JlLmZyYW1lfS1vdXRzaWRlLWJ1dHRvbmAsICgpID0+ICsrc2NvcmUuc2NvcmUsIHNjb3JlLnNjb3JlLCBgc2NvcmUtZGF0YS0ke3BsYXllckluZGV4fS0ke3Njb3JlLmZyYW1lfS1vdXRzaWRlLWRpc3BsYXlgLCBzY29yZS5zY29yZSwgYXJyYXlTY29yZURhdGEoeyBzY29yZSwgcGxheWVySW5kZXggfSkpLmtleShzY29yZSk7XG4gICAgfSksIHBsYXllci5lZGl0ICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczg3Mzk2OFs3XSwgKCkgPT4ge1xuICAgICAgICBwbGF5ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHBsYXllci5lZGl0ID0gIXBsYXllci5lZGl0O1xuICAgIH0pLCBwbGF5ZXIuZWRpdCAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4NzM5NjhbOF0sICdwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLScgKyBpbmRleCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBwbGF5ZXIuZWRpdCA9ICFwbGF5ZXIuZWRpdDtcbiAgICAgICAgcGxheWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0pLCAncGxheWVyLWVkaXQtYnRuLScgKyBpbmRleCwgKCkgPT4gcGxheWVyLmVkaXQgPSAhcGxheWVyLmVkaXQsICgpID0+IHtcbiAgICAgICAgcGxheWVycy5zcGxpY2UoaW5kZXgsIDAsIGdldE5ld1BsYXllcigpKTtcbiAgICB9KTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M4NzM5Njg6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLWFycmF5VGVzdHMuanMtLT5cIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvdW50IGRpc3BsYXk6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFycmF5cy1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzaWduYWwgYXJyYXkgdGVzdCBcIiB9LCB7IFwibm5cIjogXCJzdXBcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzaWduYWwtYXJyYXktY291bnRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImlkXCIsIFwic2lnbmFsLWFycmF5LWluY3JlYXNlLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKytjb3VudGVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImlkXCIsIFwicHVzaC1zaWduYWwtYXJyYXktYnRuXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFkZCBudW1iZXJcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJhZGQgMTAgbnVtYmVyXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWRkIG51bWJlciBieSBkZWxheVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRlbGF5IGNsZWFyIGFycmF5XCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzaW1wbGUgYXJyYXkgdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK2NvdW50ZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFkZCBudW1iZXJcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFycmF5LXRlc3QtcHVzaC1pdGVtXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwdXNoIGl0ZW0gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTUgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInB1c2ggMyBpdGVtc1wiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwdXNoIDkgaXRlbXNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxOCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggc29saWQgYmxhY2s7Ym9yZGVyLXJhZGl1czouMmVtXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5kZXg6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgY29udGVudDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBsZW5ndGg6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+Xke+4jyBkZWxldGUgbWVcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK2NvdW50ZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBpbmRleDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiB4OlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIGxlbmd0aDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfl5HvuI8gZGVsZXRlIG1lXCIgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW3sgXCJ0YWdKc1ZhclwiOiAwIH1dLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInJlbW92ZSBhbGxcIiB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS0gcGxheWVyc0xvb3AuanMgLS0+XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGVuZDpwbGF5ZXJzTG9vcC5qcyAtLT5cIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJhY2tncm91bmQtY29sb3I6YmxhY2s7XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibmFtZTpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmRleDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJhY2tncm91bmQtY29sb3I6cHVycGxlO3BhZGRpbmc6LjVlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNjb3JlczpcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJlZGl0XCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWRkIGJlZm9yZVwiIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwiYW5pbWF0ZV9fc2xvd1wiXSwgW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJvdXRlciBzY29yZSBidXR0b24gKytcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW1vdmVcIiB9XSB9XSwgW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW1vdmUgYnkgcHJvbWlzZVwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgc3RhdGVzLCBodG1sLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5leHBvcnQgY29uc3QgdGFnU3dpdGNoRGVidWcgPSB0YWcoKF90ID0gJ3RhZ1N3aXRjaERlYnVnJykgPT4ge1xuICAgIGxldCBzZWxlY3RlZFRhZyA9IG51bGw7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHJlbmRlckNvdW50LCBzZWxlY3RlZFRhZyB9XSA9IGdldCh7IHJlbmRlckNvdW50LCBzZWxlY3RlZFRhZyB9KSk7XG4gICAgZnVuY3Rpb24gY2hhbmdlU2VsZWN0ZWRUYWcoZXZlbnQpIHtcbiAgICAgICAgc2VsZWN0ZWRUYWcgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGlmIChzZWxlY3RlZFRhZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVGFnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RlZFRhZyA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRhZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHRhZ091dHB1dCA9ICdzZWxlY3QgdGFnIGJlbG93JztcbiAgICBzd2l0Y2ggKHNlbGVjdGVkVGFnKSB7XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgIHRhZ091dHB1dCA9ICdudWxsLCBzZWxlY3QgdGFnIGJlbG93JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgICAgICB0YWdPdXRwdXQgPSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgICAgdGFnT3V0cHV0ID0gdGFnMSh7IHRpdGxlOiAndmFsdWUgc3dpdGNoJyB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgIHRhZ091dHB1dCA9IHRhZzIoeyB0aXRsZTogJ3ZhbHVlIHN3aXRjaCcgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICB0YWdPdXRwdXQgPSB0YWczKHsgdGl0bGU6ICd2YWx1ZSBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCB0YWdPdXRwdXQyID0gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDg0OTMyWzFdKTtcbiAgICBzd2l0Y2ggKHNlbGVjdGVkVGFnKSB7XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgIHRhZ091dHB1dDIgPSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJcIjpcbiAgICAgICAgICAgIHRhZ091dHB1dDIgPSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbM10pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgICAgdGFnT3V0cHV0MiA9IHRhZzEoeyB0aXRsZTogJ3RhZyBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgICAgdGFnT3V0cHV0MiA9IHRhZzIoeyB0aXRsZTogJ3RhZyBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgICAgdGFnT3V0cHV0MiA9IHRhZzMoeyB0aXRsZTogJ3RhZyBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMls0XSwgc2VsZWN0ZWRUYWcgPT09IG51bGwgJiYgJ251bGwnIHx8XG4gICAgICAgIHNlbGVjdGVkVGFnID09PSB1bmRlZmluZWQgJiYgJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgc2VsZWN0ZWRUYWcgPT09ICcnICYmICdlbXB0eS1zdHJpbmcnIHx8XG4gICAgICAgIHNlbGVjdGVkVGFnLCBjaGFuZ2VTZWxlY3RlZFRhZywgdHlwZW9mIChzZWxlY3RlZFRhZykgPT09ICdzdHJpbmcnICYmICFzZWxlY3RlZFRhZy5sZW5ndGggPyB7IHNlbGVjdGVkOiB0cnVlIH0gOiB7fSwgc2VsZWN0ZWRUYWcgPT09IHVuZGVmaW5lZCA/IHsgc2VsZWN0ZWQ6IHRydWUgfSA6IHt9LCBzZWxlY3RlZFRhZyA9PT0gbnVsbCA/IHsgc2VsZWN0ZWQ6IHRydWUgfSA6IHt9LCBzZWxlY3RlZFRhZyA9PT0gJzEnID8geyBzZWxlY3RlZDogdHJ1ZSB9IDoge30sIHNlbGVjdGVkVGFnID09PSAnMicgPyB7IHNlbGVjdGVkOiB0cnVlIH0gOiB7fSwgc2VsZWN0ZWRUYWcgPT09ICczJyA/IHsgc2VsZWN0ZWQ6IHRydWUgfSA6IHt9LCB0YWdPdXRwdXQsIHRhZ091dHB1dDIsIHNlbGVjdGVkVGFnID09PSAnMycgPyB0YWczKHsgdGl0bGU6ICd0ZXJuYXJ5IHNpbXBsZScgfSkgOiB0YWcxKHsgdGl0bGU6ICd0ZXJuYXJ5IHNpbXBsZScgfSksIHRlcm5hcnlQcm9wVGVzdCh7IHNlbGVjdGVkVGFnIH0pLCBhcnJheVN3aXRjaGluZyh7IHNlbGVjdGVkVGFnIH0pLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAndGFnU3dpdGNoRGVidWcnIH0pKTtcbn0pO1xuZXhwb3J0IGNvbnN0IHRlcm5hcnlQcm9wVGVzdCA9IHRhZygoeyBzZWxlY3RlZFRhZyB9KSA9PiB7XG4gICAgY29uc3Qgb3V0VGFnID0gc2VsZWN0ZWRUYWcgPT09ICczJyA/IHRhZzMoeyB0aXRsZTogJ3Rlcm5hcnlQcm9wVGVzdCcgfSkgOiB0YWcxKHsgdGl0bGU6ICd0ZXJuYXJ5UHJvcFRlc3QnIH0pO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbNV0sIHNlbGVjdGVkVGFnLCBvdXRUYWcpO1xufSk7XG5leHBvcnQgY29uc3QgdGFnMSA9IHRhZygoeyB0aXRsZSB9KSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBjb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IGNvdW50ZXIsIHJlbmRlckNvdW50IH0pKTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbNl0sIHRpdGxlLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICd0YWcxJyB9KSk7XG59KTtcbmV4cG9ydCBjb25zdCB0YWcyID0gdGFnKCh7IHRpdGxlIH0pID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IGNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgY291bnRlciwgcmVuZGVyQ291bnQgfSkpO1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMls3XSwgdGl0bGUsICgpID0+ICsrY291bnRlciwgY291bnRlciwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3RhZzEnIH0pKTtcbn0pO1xuZXhwb3J0IGNvbnN0IHRhZzMgPSB0YWcoKHsgdGl0bGUgfSkgPT4ge1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgY291bnRlciwgcmVuZGVyQ291bnQgfV0gPSBnZXQoeyBjb3VudGVyLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDg0OTMyWzhdLCB0aXRsZSwgKCkgPT4gKytjb3VudGVyLCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAndGFnMScgfSkpO1xufSk7XG5leHBvcnQgY29uc3QgYXJyYXlTd2l0Y2hpbmcgPSB0YWcoKHsgc2VsZWN0ZWRUYWcgfSwgXyA9ICdhcnJheVN3aXRjaGluZycpID0+IHtcbiAgICBzd2l0Y2ggKHNlbGVjdGVkVGFnKSB7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMls5XSk7XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbMTBdKTtcbiAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgICAgIC8vIFRPRE86ID8/PyBzaG91bGQgYmUgZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDg0OTMyWzExXSk7IC8vIHRlc3RzIGhvdyAucHJldmlvdXNTaWJsaW5nIHdvcmtzXG4gICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMlsxMl0sIHRhZzEoeyB0aXRsZTogYHRhZyAke3NlbGVjdGVkVGFnfWAgfSkpO1xuICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0ODQ5MzJbMTNdLCBbJ2InLCAnYyddLm1hcCh4ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMlsxNF0sIHRhZzIoeyB0aXRsZTogYGFycmF5ICR7c2VsZWN0ZWRUYWd9ICR7eH1gIH0pKS5rZXkoeCkpKTtcbiAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDg0OTMyWzE1XSwgWydkJywgJ2UnLCAnZiddLm1hcCh4ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMlsxNl0sIHRhZzMoeyB0aXRsZTogYGFycmF5ICR7c2VsZWN0ZWRUYWd9ICR7eH1gIH0pKS5rZXkoeCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ4NDkzMlsxN10pO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDg0OTMyOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImVtcHR5LXN0cmluZy0xXCJdXSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInNlbGVjdC10YWctYWJvdmVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzZWxlY3QgdGFnIGFib3ZlXCIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzZWxlY3QtdGFnLWFib3ZlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibnVsbCwgc2VsZWN0IHRhZyBhYm92ZVwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic2VsZWN0LXRhZy1hYm92ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImVtcHR5LXN0cmluZywgc2VsZWN0IHRhZyBhYm92ZVwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic2VsZWN0VGFnLXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzZWxlY3RlZFRhZzogfFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifFwiIH1dIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRhZy1zd2l0Y2gtZHJvcGRvd25cIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcIm9wdGlvblwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS0gVE9ETzogaW1wbGVtZW50IHNlbGVjdGVkIGF0dHJpYnV0ZSAtLS0+XCIgfSwgeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIFwiXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDIgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJlbXB0eS1zdHJpbmdcIiB9XSB9LCB7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgXCJ1bmRlZmluZWRcIl0sIFt7IFwidGFnSnNWYXJcIjogMyB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInVuZGVmaW5lZFwiIH1dIH0sIHsgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCBcIm51bGxcIl0sIFt7IFwidGFnSnNWYXJcIjogNCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm51bGxcIiB9XSB9LCB7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgXCIxXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDUgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0YWcgMVwiIH1dIH0sIHsgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCBcIjJcIl0sIFt7IFwidGFnSnNWYXJcIjogNiB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRhZyAyXCIgfV0gfSwgeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIFwiM1wiXSwgW3sgXCJ0YWdKc1ZhclwiOiA3IH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGFnIDNcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl0sIFtcImlkXCIsIFwic3dpdGNoLXRlc3RzLXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IHNvbGlkIGJsdWU7ZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJUZXN0IDEgLSBzdHJpbmcgfCBUYWdcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IHNvbGlkIGJsdWU7ZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJUZXN0IDIgLSBUYWdcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IHNvbGlkIGJsdWU7ZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJUZXN0IDMgLSB0ZXJuYXJ5IChvbmx5IDEgb3IgMyBzaG93cylcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBzb2xpZCBibHVlO2ZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaDNcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiVGVzdCAzLjIgLSB0ZXJuYXJ5IHZpYSBwcm9wIChvbmx5IDEgb3IgMyBzaG93cylcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBzb2xpZCByZWQ7ZmxleC1ncm93OjFcIl0sIFtcImlkXCIsIFwiYXJyYXlTd2l0Y2hpbmctdGVzdC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaDNcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiVGVzdCA0IC0gYXJyYXlTd2l0Y2hpbmdcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcnJheVN3aXRjaGluZy13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRlcm5hcnlQcm9wVGVzdC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggc29saWQgb3JhbmdlO1wiXSwgW1wiaWRcIiwgXCJ0YWcxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwidGFnU3dpdGNoLTEtaGVsbG9cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJIZWxsbyAxIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIFdvcmxkXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2UgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBzb2xpZCBvcmFuZ2U7XCJdLCBbXCJpZFwiLCBcInRhZzJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0YWdTd2l0Y2gtMi1oZWxsb1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkhlbGxvIDIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgV29ybGRcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmNyZWFzZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IHNvbGlkIG9yYW5nZTtcIl0sIFtcImlkXCIsIFwidGFnM1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRhZ1N3aXRjaC0zLWhlbGxvXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiSGVsbG8gMyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBXb3JsZFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIml0cyBhbiB1bmRlZmluZWQgdmFsdWVcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIml0cyBhIG51bGwgdmFsdWVcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNwYWNlXCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm5vdGhpbmcgdG8gc2hvdyBmb3IgaW4gYXJyYXlzXCIgfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IG1pcnJvcmluZyA9IHRhZygoKSA9PiB7XG4gICAgY29uc3QgdGFnID0gdGFnQ291bnRlcigpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNTY3MzRbMF0sIHRhZywgdGFnKTtcbn0pO1xuY29uc3QgdGFnQ291bnRlciA9ICgpID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbY291bnRlcl0gPSBnZXQoY291bnRlcikpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNTY3MzRbMV0sIGNvdW50ZXIsICgpID0+ICsrY291bnRlciwgY291bnRlcik7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE1NjczNDogW1t7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY291bnRlcjBcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb3VudGVyMVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfqp5cIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibWlycm9yLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibWlycm9yLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBzdGF0ZXMsIHN0YXRlLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5leHBvcnQgY29uc3Qgc3RhdGVQcm9wRGVidWcgPSAocHJvcENvdW50ZXIsIGNoaWxkKSA9PiB0YWcudXNlID0gKF8gPSBzdGF0ZSgnc3RhdGVQcm9wRGVidWcudGFnLnRzJyksIC8vIHNvbWV0aGluZyB0byBiZSBzZWVuIGluIGNvbnNvbGVcbmVkaXQgPSBmYWxzZSwgcmVuZGVyQ291bnQgPSAwLCBfX18gPSBzdGF0ZXMoZ2V0ID0+IFt7IGVkaXQsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgZWRpdCwgcmVuZGVyQ291bnQgfSkpLCBfXyA9ICsrcmVuZGVyQ291bnQpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczUzOTI5WzBdLCBwcm9wQ291bnRlciwgKCkgPT4gZWRpdCA9ICFlZGl0LCBlZGl0LCBjaGlsZCwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3N0YXRlUHJvcERlYnVnLXRhZycgfSkpO1xuZXhwb3J0IGRlZmF1bHQgc3RhdGVQcm9wRGVidWc7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNTM5Mjk6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBwcm9wQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImVkaXQgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZDogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXCIgfV1dIH07XG4iLCJpbXBvcnQgeyB3YXRjaCwgaHRtbCwgdGFnLCBsZXRQcm9wLCBzdGF0ZSwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuaW1wb3J0IHN0YXRlUHJvcERlYnVnVGFnIGZyb20gXCIuL3N0YXRlUHJvcERlYnVnLnRhZy5qc1wiO1xuZXhwb3J0IGNvbnN0IHByb3BzRGVidWdNYWluID0gdGFnKChfID0gJ3Byb3BzRGVidWdNYWluJykgPT4gKHN5bmNQcm9wTnVtYmVyID0gMCwgcHJvcE51bWJlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgcHJvcHNKc29uID0geyB0ZXN0OiAzMywgeDogJ3knIH0sIGRhdGUgPSBzdGF0ZSgoKSA9PiBuZXcgRGF0ZSgpKSwganNvbiA9IEpTT04uc3RyaW5naWZ5KHByb3BzSnNvbiwgbnVsbCwgMiksIHN0YXRlUHJvcERpc3BsYXkgPSB0cnVlLCBfID0gc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICBzeW5jUHJvcE51bWJlciwgcHJvcE51bWJlciwgcmVuZGVyQ291bnQsIHByb3BzSnNvbiwgZGF0ZSwgc3RhdGVQcm9wRGlzcGxheSxcbiAgICB9XSA9IGdldCh7XG4gICAgc3luY1Byb3BOdW1iZXIsIHByb3BOdW1iZXIsIHJlbmRlckNvdW50LCBwcm9wc0pzb24sIGRhdGUsIHN0YXRlUHJvcERpc3BsYXksXG59KSkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTc4NDdbMF0sIChldmVudCkgPT4gcHJvcHNKc29uID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQudmFsdWUpLCBqc29uLCBqc29uLCArK3JlbmRlckNvdW50LCAoKSA9PiArK3Byb3BOdW1iZXIsIHByb3BOdW1iZXIsIHByb3BOdW1iZXIsIHByb3BzRGVidWcoe1xuICAgIHByb3BOdW1iZXIsXG4gICAgcHJvcHNKc29uLFxuICAgIHByb3BOdW1iZXJDaGFuZ2U6IHggPT4ge1xuICAgICAgICBwcm9wTnVtYmVyID0geDtcbiAgICB9XG59KSwgc3luY1Byb3BOdW1iZXIsICgpID0+ICsrc3luY1Byb3BOdW1iZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzeW5jX3Byb3BzX2NhbGxiYWNrJyB9KSwgc3luY1Byb3BEZWJ1Zyh7XG4gICAgc3luY1Byb3BOdW1iZXIsXG4gICAgcHJvcE51bWJlckNoYW5nZTogeCA9PiBzeW5jUHJvcE51bWJlciA9IHgsXG4gICAgcGFyZW50VGVzdDogeCA9PiB4LCAvLyBjYXVzZXMgbm8gY2hhbmdlLCBob3dldmVyIHRoZSB0YWcgZGlkICsrY291bnRlciB0byBpdHNlbGYgd2hpY2ggc2hvdWxkIHJlbmRlclxufSksIHN0YXRlUHJvcERpc3BsYXkgJiYgc3RhdGVQcm9wRGVidWdUYWcocHJvcE51bWJlciwgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzE5Nzg0N1sxXSkpLCAoKSA9PiBzdGF0ZVByb3BEaXNwbGF5ID0gIXN0YXRlUHJvcERpc3BsYXksIGRhdGUsIHRpbWVzdGFtcFRvVmFsdWVzKGRhdGUpLmRhdGUsIChldmVudCkgPT4ge1xuICAgIGNvbnN0IG5ld0RhdGVTdHJpbmcgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKG5ld0RhdGVTdHJpbmcpO1xufSwgcHJvcERhdGVEZWJ1Zyh7IGRhdGUgfSkpKTtcbmNvbnN0IHByb3BEYXRlRGVidWcgPSB0YWcoKHsgZGF0ZSB9KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMTk3ODQ3WzJdLCBkYXRlKSk7XG4vKiogVGVzdHMgY2FsbGluZyBhIHByb3BlcnR5IHRoYXQgaXMgYSBmdW5jdGlvbiBpbW1lZGlhdGVseSB3aGljaCBzaG91bGQgY2F1c2UgcmVuZGVyaW5nICovXG5jb25zdCBzeW5jUHJvcERlYnVnID0gdGFnKCh7IHN5bmNQcm9wTnVtYmVyLCBwcm9wTnVtYmVyQ2hhbmdlLCBwYXJlbnRUZXN0LCB9KSA9PiAoXyA9IHN0YXRlKCdzeW5jUHJvcERlYnVnJyksIC8vIHNvbWV0aGluZyB0byBzZWUgaW4gY29uc29sZVxuY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgX18gPSBzdGF0ZXMoZ2V0ID0+IFt7IGNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgY291bnRlciwgcmVuZGVyQ291bnQgfSkpKSA9PiB7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICBpZiAoc3luY1Byb3BOdW1iZXIgJSAyID09PSAxKSB7XG4gICAgICAgIHByb3BOdW1iZXJDaGFuZ2Uoc3luY1Byb3BOdW1iZXIgPSBzeW5jUHJvcE51bWJlciArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzE5Nzg0N1szXSwgc3luY1Byb3BOdW1iZXIsICgpID0+IHByb3BOdW1iZXJDaGFuZ2UoKytzeW5jUHJvcE51bWJlciksIGNvdW50ZXIsIHBhcmVudFRlc3QoY291bnRlciksICgpID0+IHtcbiAgICAgICAgcGFyZW50VGVzdCgrK2NvdW50ZXIpO1xuICAgIH0sIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjaGlsZF9zeW5jX3Byb3BzX2NhbGxiYWNrJyB9KSk7XG59KTtcbmNvbnN0IHByb3BzRGVidWcgPSB0YWcoKHsgcHJvcE51bWJlciwgcHJvcHNKc29uLCBwcm9wTnVtYmVyQ2hhbmdlLCB9KSA9PiAoXyA9IHN0YXRlKCdwcm9wc0RlYnVnJyksIC8vIHNvbWV0aGluZyB0byBzZWUgaW4gY29uc29sZVxucmVuZGVyQ291bnQgPSAwLCBwcm9wTnVtYmVyQ2hhbmdlQ291bnQgPSAwLCBcbi8vIHNpbXBsZSB3YXkgdG8gbG9jYWxseSBvbmx5IHVwZGF0ZSBhbiBhcmd1bWVudFxuX19fID0gbGV0UHJvcChnZXQgPT4gW3Byb3BOdW1iZXJdID0gZ2V0KHByb3BOdW1iZXIpKSwgXG4vLyBfX18gPSBsZXRQcm9wKHByb3BOdW1iZXIpKHggPT4gW3Byb3BOdW1iZXIsIHByb3BOdW1iZXIgPSB4XSksXG4vLyBwb29yIHdheSB0byB1cGRhdGUgYW4gYXJndW1lbnRcbm15UHJvcE51bWJlciA9IHByb3BOdW1iZXIsIF9zdGF0ZXMgPSBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgIHJlbmRlckNvdW50LCBwcm9wTnVtYmVyQ2hhbmdlQ291bnQsIG15UHJvcE51bWJlcixcbiAgICB9XSA9IGdldCh7XG4gICAgcmVuZGVyQ291bnQsIHByb3BOdW1iZXJDaGFuZ2VDb3VudCwgbXlQcm9wTnVtYmVyLFxufSkpLCBfXyA9IHdhdGNoKFtwcm9wTnVtYmVyXSwgKCkgPT4gbXlQcm9wTnVtYmVyID0gcHJvcE51bWJlciksIHdhdGNoUmVzdWx0cyA9IHdhdGNoKFtteVByb3BOdW1iZXJdLCAoKSA9PiArK3Byb3BOdW1iZXJDaGFuZ2VDb3VudCkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTc4NDdbNF0sIChldmVudCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIE9iamVjdC5hc3NpZ24ocHJvcHNKc29uLCB2YWx1ZSk7XG59LCBKU09OLnN0cmluZ2lmeShwcm9wc0pzb24sIG51bGwsIDIpLCBKU09OLnN0cmluZ2lmeShwcm9wc0pzb24sIG51bGwsIDIpLCBKU09OLnN0cmluZ2lmeSh3YXRjaFJlc3VsdHMsIG51bGwsIDIpLCAoKSA9PiBwcm9wTnVtYmVyQ2hhbmdlKCsrbXlQcm9wTnVtYmVyKSwgbXlQcm9wTnVtYmVyLCBteVByb3BOdW1iZXIsICgpID0+ICsrcHJvcE51bWJlciwgcHJvcE51bWJlciwgcHJvcE51bWJlciwgKCkgPT4gKytyZW5kZXJDb3VudCwgKytyZW5kZXJDb3VudCwgKCkgPT4gKytteVByb3BOdW1iZXIsIG15UHJvcE51bWJlciwgcHJvcE51bWJlckNoYW5nZUNvdW50LCBwcm9wRm5VcGRhdGVUZXN0KHtcbiAgICBwcm9wTnVtYmVyOiBteVByb3BOdW1iZXIsXG4gICAgY2FsbGJhY2s6ICgpID0+ICsrbXlQcm9wTnVtYmVyXG59KSkpO1xuY29uc3QgcHJvcEZuVXBkYXRlVGVzdCA9IHRhZy5pbW11dGFibGVQcm9wcygoeyBwcm9wTnVtYmVyLCBjYWxsYmFjaywgfSkgPT4gKF8gPSBzdGF0ZSgncHJvcEZuVXBkYXRlVGVzdCcpLCAvLyBzb21ldGhpbmcgdG8gc2VlIGluIGNvbnNvbGVcbnJlbmRlckNvdW50ID0gMCwgX18gPSBzdGF0ZXMoZ2V0ID0+IFtyZW5kZXJDb3VudF0gPSBnZXQocmVuZGVyQ291bnQpKSkgPT4ge1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTc4NDdbNV0sIGNhbGxiYWNrLCBwcm9wTnVtYmVyLCBwcm9wTnVtYmVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAncHJvcEZuVXBkYXRlVGVzdCcgfSkpO1xufSk7XG5mdW5jdGlvbiB0aW1lc3RhbXBUb1ZhbHVlcyh0aW1lc3RhbXApIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIGNvbnN0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgY29uc3QgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IGhvdXJzID0gU3RyaW5nKGRhdGUuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICBjb25zdCBtaW51dGVzID0gU3RyaW5nKGRhdGUuZ2V0TWludXRlcygpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGU6IGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWAsXG4gICAgICAgIHRpbWU6IGAke2hvdXJzfToke21pbnV0ZXN9YFxuICAgIH07XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMzE5Nzg0NzogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXBcIl0sIFtcImlkXCIsIFwidGV4dGFyZWF3cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJoZWlnaHQ6MjAwcHg7Zm9udC1zaXplOjAuNmVtO3dpZHRoOjEwMCU7bWF4LXdpZHRoOjQwMHB4XCJdLCBbXCJpZFwiLCBcInByb3BzLWRlYnVnLXRleHRhcmVhXCJdLCBbXCJ3cmFwXCIsIFwib2ZmXCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInByZVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIocmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS0wLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WpIHByb3BOdW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3luYyBwcm9wcyBjYWxsYmFja1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgc3luY1Byb3BOdW1iZXI6IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzeW5jLXByb3AtbnVtYmVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgKytcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGF0ZSBwcm9wXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRhdGUgcHJvcFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRhdGU6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTQgfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImRhdGVcIl0sIFtcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNSB9LCBudWxsXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNyB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkIGlubmVySHRtbCDwn5G2XCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkYXRlOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tc3luY1Byb3BEZWJ1ZyBodG1sLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgY2hpbGQgc3luY1Byb3BOdW1iZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN5bmMtcHJvcC1jaGlsZC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzeW5jLXByb3AtY2hpbGQtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgKytcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN5bmMtcHJvcC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInBhcmVudFRlc3RcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm90aGluZy1wcm9wLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm90aGluZy1wcm9wLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisrXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb3BzRGVidWcuanMtLT5cIiB9LCB7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQcm9wcyBKc29uXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmb250LXNpemU6MC42ZW07aGVpZ2h0OjIwMHB4O3dpZHRoOjEwMCU7O21heC13aWR0aDo0MDBweFwiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJwcmVcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tPGRpdiBzdHlsZT1cXFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwXFxcIj48L2Rpdj4tLT5cIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImgzXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlByb3BzIE51bWJlclwiIH1dIH0sIHsgXCJublwiOiBcInRleHRhcmVhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjAuNmVtO2hlaWdodDoyMDBweDt3aWR0aDoxMDAlO2NvbG9yOndoaXRlO1wiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiZGlzYWJsZWRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc0RlYnVnLfCfpaktMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QhCDwn6WpIG15IHByb3BOdW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS0yLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CEIPCfpakgbG9jYWwgbGV0UHJvcCBwcm9wTnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS1sZXQtcHJvcC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widGl0bGVcIiwgXCJ0ZXN0IG9mIGluY3JlYXNpbmcgcmVuZGVyIGNvdW50IGFuZCBub3RoaW5nIGVsc2VcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInJlbmRlckNvdW50IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTIgfSwgbnVsbF0sIFtcInRpdGxlXCIsIFwib25seSBjaGFuZ2VzIG51bWJlciBsb2NhbGx5IGJ1dCBpZiBjaGFuZ2UgYnkgcGFyZW50IHRoYW4gdGhhdCBpcyB0aGUgbnVtYmVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QhCDwn6WpIGxvY2FsIHNldCBteVByb3BOdW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIihwcm9wTnVtYmVyQ2hhbmdlQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS1jaGFuZ2UtY291bnQtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE0IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImgzXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkZuIHVwZGF0ZSB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiICAgIFxcblwiIH1dLCBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNPbmVMZXZlbEZ1blVwZGF0ZS3wn6WpLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CEIPCfpakgbG9jYWwgJiAxLXBhcmVudCBpbmNyZWFzZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJzbWFsbFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6LjVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0aGUgY291bnQgaGVyZSBhbmQgd2l0aGluIHBhcmVudCBpbmNyZWFzZXMgYnV0IG5vdCBpbiBwYXJlbnQgcGFyZW50XCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCBkaWFsb2cgPSB0YWcoKHByb3ZpZGVyQ2xhc3MpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0ODgwNVswXSwgKCkgPT4gcHJvdmlkZXJDbGFzcy5zaG93RGlhbG9nID0gZmFsc2UsIHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZyA/IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0ODgwNVsxXSwgSlNPTi5zdHJpbmdpZnkocHJvdmlkZXJDbGFzcywgbnVsbCwgMikpIDogJ25vIGRpYWxvZycpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyNDg4MDU6IFtbeyBcIm5uXCI6IFwiZGlhbG9nXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowXCJdLCBbXCJpZFwiLCBcInByb3ZpZGVyX2RlYnVnX2RpYWxvZ1wiXSwgW1wibW91c2Vkb3duXCIsIFwidmFyIHIgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyhyLnRvcDw9ZXZlbnQuY2xpZW50WSYmZXZlbnQuY2xpZW50WTw9ci50b3Arci5oZWlnaHQmJnIubGVmdDw9ZXZlbnQuY2xpZW50WCYmZXZlbnQuY2xpZW50WDw9ci5sZWZ0K3Iud2lkdGgpIHx8IHRoaXMuY2xvc2UoKVwiXSwgW1wiZHJhZ3N0YXJ0XCIsIFwiY29uc3Qge2UsZHQsdH0gPSB7dDp0aGlzLGU6ZXZlbnQsZHQ6ZXZlbnQuZGF0YVRyYW5zZmVyfTtjb25zdCBkPXQuZHJhZz10LmRyYWd8fHt4OjAseTowfTtkLmluaXRYPWQueDtkLnN0YXJ0WD1ldmVudC5jbGllbnRYLXQub2Zmc2V0TGVmdDtkLnN0YXJ0WT1ldmVudC5jbGllbnRZLXQub2Zmc2V0VG9wO3Qub25kcmFnb3Zlcj1lLnRhcmdldC5vbmRyYWdvdmVyPShlKT0+ZS5wcmV2ZW50RGVmYXVsdCgpO2R0LmVmZmVjdEFsbG93ZWQ9J21vdmUnO2R0LmRyb3BFZmZlY3Q9J21vdmUnXCJdLCBbXCJkcmFnXCIsIFwiY29uc3Qge3QsZSxkdCxkfT17ZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXIsZDp0aGlzLmRyYWd9OyBpZihlLmNsaWVudFg9PT0wKSByZXR1cm47ZC54ID0gZC54ICsgZS5vZmZzZXRYIC0gZC5zdGFydFg7IGQueSA9IGQueSArIGUub2Zmc2V0WSAtIGQuc3RhcnRZOyB0aGlzLnN0eWxlLmxlZnQgPSBkLnggKyAncHgnOyB0aGlzLnN0eWxlLnRvcCA9IGQueSsncHgnO1wiXSwgW1wiZHJhZ2VuZFwiLCBcImNvbnN0IHt0LGUsZH09e3Q6dGhpcyxlOmV2ZW50LGQ6dGhpcy5kcmFnfTtpZiAoZC5pbml0WCA9PT0gZC54KSB7ZC54PWQueCtlLm9mZnNldFgtKGQuc3RhcnRYLWQueCk7ZC55PWQueStlLm9mZnNldFktKGQuc3RhcnRZLWQueSk7dGhpcy5zdHlsZS50cmFuc2Zvcm09dHJhbnNsYXRlM2QoZC54KydweCcsIGQueSsncHgnLCAwKX07dGhpcy5kcmFnZ2FibGU9ZmFsc2VcIl0sIFtcImNsb3NlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzouMjVlbVwiXSwgW1wibW91c2Vkb3duXCIsIFwidGhpcy5wYXJlbnROb2RlLmRyYWdnYWJsZT10cnVlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZGlhbG9nIHRpdGxlXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIFwicHJvdmlkZXJfZGVidWdfZGlhbG9nLmNsb3NlKClcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlXCIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJ3cmFwXCIsIFwib2ZmXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBkaWFsb2cgfSBmcm9tIFwiLi9wcm92aWRlckRpYWxvZy50YWcuanNcIjtcbmltcG9ydCB7IGh0bWwsIHRhZywgcHJvdmlkZXJzLCBzdGF0ZSwgY2FsbGJhY2tNYWtlciwgU3ViamVjdCwgb25Jbml0LCBzdGF0ZXMsIGhvc3QgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGZ4IH0gZnJvbSBcInRhZ2dlZGpzLWFuaW1hdGUtY3NzXCI7XG5leHBvcnQgY2xhc3MgVGFnRGVidWdQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGFnRGVidWcgPSAwO1xuICAgICAgICB0aGlzLnNob3dEaWFsb2cgPSBmYWxzZTtcbiAgICB9XG59XG5jb25zdCBQcm92aWRlckZ1bmMgPSAoKSA9PiAoeyBjb3VudGVyOiAwIH0pO1xuZXhwb3J0IGZ1bmN0aW9uIHRhZ0RlYnVnUHJvdmlkZXIoKSB7XG4gICAgY29uc3QgdXBwZXIgPSBwcm92aWRlcnMuY3JlYXRlKHVwcGVyVGFnRGVidWdQcm92aWRlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXBwZXIsXG4gICAgICAgIHRlc3Q6IDBcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVwcGVyVGFnRGVidWdQcm92aWRlcigpIHtcbiAgICBzdGF0ZSgnZW5zdXJlIHN0YXRlcyBpbiBwcm92aWRlcnMgYXJlIHN0YWJsZScpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICd1cHBlclRhZ0RlYnVnUHJvdmlkZXInLFxuICAgICAgICB0ZXN0OiAwXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBwcm92aWRlckRlYnVnID0gdGFnKChfeCA9ICdwcm92aWRlckRlYnVnQmFzZScpID0+IHtcbiAgICAvLyBwcm92aWRlckRlYnVnQmFzZSwgaGFzIHByb3ZpZGVyXG4gICAgcHJvdmlkZXJzLmNyZWF0ZShQcm92aWRlckZ1bmMpOyAvLyB0ZXN0IHRoYXQgYW4gYXJyb3cgZnVuY3Rpb24gY2FuIGJlIGEgcHJvdmlkZXJcbiAgICBjb25zdCBwcm92aWRlckNsYXNzID0gcHJvdmlkZXJzLmNyZWF0ZShUYWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBjb25zdCBwcm92aWRlciA9IHByb3ZpZGVycy5jcmVhdGUodGFnRGVidWdQcm92aWRlcik7XG4gICAgY29uc3QgY29sb3JPcHRpb25zID0gWydyZWQnLCAnYmx1ZScsICdncmVlbicsICdwdXJwbGUnLCAnb3JhbmdlJ107XG4gICAgbGV0IHByb3BDb3VudGVyID0gMDtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGxldCBjeWNsZUNvbG9yUGFyZW50ID0gJ3JlZCc7XG4gICAgbGV0IGN5Y2xlQ29sb3JDaGlsZCA9ICdncmVlbic7XG4gICAgbGV0IGN5Y2xlQ29sb3JDaGlsZDIgPSAnZ3JlZW4nO1xuICAgIHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgICAgIHByb3BDb3VudGVyLCByZW5kZXJDb3VudCwgY3ljbGVDb2xvclBhcmVudCwgY3ljbGVDb2xvckNoaWxkLCBjeWNsZUNvbG9yQ2hpbGQyLFxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIHByb3BDb3VudGVyLCByZW5kZXJDb3VudCwgY3ljbGVDb2xvclBhcmVudCwgY3ljbGVDb2xvckNoaWxkLCBjeWNsZUNvbG9yQ2hpbGQyLFxuICAgIH0pKTtcbiAgICBpZiAocHJvdmlkZXJDbGFzcy5zaG93RGlhbG9nKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm92aWRlcl9kZWJ1Z19kaWFsb2cnKS5zaG93TW9kYWwoKTtcbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1NlswXSwgcHJvdmlkZXIudGVzdCwgcHJvdmlkZXIudXBwZXI/LnRlc3QgfHwgJz8nLCBwcm92aWRlckNsYXNzLnRhZ0RlYnVnIHx8ICc/JywgKCkgPT4gKytwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCAoKSA9PiArK3Byb3ZpZGVyLnVwcGVyLnRlc3QsIHByb3ZpZGVyLnVwcGVyLnRlc3QsIHByb3ZpZGVyLnVwcGVyLnRlc3QsICgpID0+ICsrcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZywgcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZywgcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZywgKCkgPT4gKytwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiBwcm92aWRlckNsYXNzLnNob3dEaWFsb2cgPSB0cnVlLCBwcm92aWRlckNsYXNzLnNob3dEaWFsb2csIHByb3ZpZGVyQ2hpbGREZWJ1Zyh7XG4gICAgICAgIHByb3BDb3VudGVyLFxuICAgICAgICBwcm9wQ291bnRlckNoYW5nZTogeCA9PiB7XG4gICAgICAgICAgICBwcm9wQ291bnRlciA9IHg7XG4gICAgICAgIH1cbiAgICB9KSwgcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdwcm92aWRlckRlYnVnQmFzZScgfSksIGRpYWxvZyhwcm92aWRlckNsYXNzKSwgZSA9PiBjeWNsZUNvbG9yUGFyZW50ID0gZS50YXJnZXQudmFsdWUsIGNvbG9yT3B0aW9ucy5tYXAoY29sb3IgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1NlsxXSwgY29sb3IsIGN5Y2xlQ29sb3JQYXJlbnQgPT09IGNvbG9yLCBjb2xvcikua2V5KGNvbG9yKSksIGUgPT4gY3ljbGVDb2xvckNoaWxkID0gZS50YXJnZXQudmFsdWUsIGNvbG9yT3B0aW9ucy5tYXAoY29sb3IgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1NlsyXSwgY29sb3IsIGN5Y2xlQ29sb3JDaGlsZCA9PT0gY29sb3IsIGNvbG9yKS5rZXkoY29sb3IpKSwgZSA9PiBjeWNsZUNvbG9yQ2hpbGQyID0gZS50YXJnZXQudmFsdWUsIGNvbG9yT3B0aW9ucy5tYXAoY29sb3IgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1NlszXSwgY29sb3IsIGN5Y2xlQ29sb3JDaGlsZDIgPT09IGNvbG9yLCBjb2xvcikua2V5KGNvbG9yKSksIGluQ3ljbGVQYXJlbnQoY3ljbGVDb2xvclBhcmVudCksIGluQ3ljbGVDaGlsZChjeWNsZUNvbG9yQ2hpbGQpLCBpbkN5Y2xlQ2hpbGQyKGN5Y2xlQ29sb3JDaGlsZDIpKTtcbn0pO1xuLypcbmNvbnN0IHRhZ1N3aXRjaGluZ1dpdGhQcm92aWRlciA9IHRhZygoKSA9PiAoXG4gIHVwcGVyUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KCB1cHBlclRhZ0RlYnVnUHJvdmlkZXIgKVxuKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NzgzNjU2WzRdLCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCAlIDIgPT0gMCA/ICdvZmYnIDogJ29uJywgdGFnU3dpdGNoaW5nUHJvQ2hpbGQxKCksIHVwcGVyUHJvdmlkZXIudGVzdCAlIDIgPT0gMCA/IG51bGwgOiB0YWdTd2l0Y2hpbmdQcm9DaGlsZDIoKSkpXG4qL1xuLypcbmNvbnN0IHRhZ1N3aXRjaGluZ1Byb0NoaWxkMSA9IHRhZygoKSA9PiAoXG4gIHVwcGVyUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KCB1cHBlclRhZ0RlYnVnUHJvdmlkZXIgKSxcbikgPT4gdXBwZXJQcm92aWRlci50ZXN0ICUgMiA9PSAwID8gbnVsbCA6IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODM2NTZbNV0sICgpID0+ICsrdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCkpXG5cbmNvbnN0IHRhZ1N3aXRjaGluZ1Byb0NoaWxkMiA9IHRhZygoKSA9PiAoXG4gIHVwcGVyUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KCB1cHBlclRhZ0RlYnVnUHJvdmlkZXIgKVxuKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NzgzNjU2WzZdLCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QpKSovXG4vKiBjaGlsZCBvZiBtYWluIHByb3ZpZGVyIHRlc3RpbmcgKi9cbmNvbnN0IHByb3ZpZGVyQ2hpbGREZWJ1ZyA9IHRhZygoeyBwcm9wQ291bnRlciwgcHJvcENvdW50ZXJDaGFuZ2UsIF8gPSAncHJvdmlkZXJEZWJ1Zy5qc0BjaGlsZCcsIH0pID0+IHtcbiAgICBjb25zdCBmdW5jUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KFByb3ZpZGVyRnVuYyk7IC8vIHRlc3QgdGhhdCBhbiBhcnJvdyBmdW5jdGlvbiBjYW4gYmUgYSBwcm92aWRlclxuICAgIGNvbnN0IHByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCh0YWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBjb25zdCBwcm92aWRlckNsYXNzID0gcHJvdmlkZXJzLmluamVjdChUYWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBjb25zdCB1cHBlclByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCh1cHBlclRhZ0RlYnVnUHJvdmlkZXIpO1xuICAgIGxldCBzaG93UHJvUHJvcHMgPSBmYWxzZTtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvd1Byb1Byb3BzLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IHNob3dQcm9Qcm9wcywgcmVuZGVyQ291bnQgfSkpO1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBjYWxsYmFja1Rlc3RTdWIgPSBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdCgpKTtcbiAgICBvbkluaXQoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmluZm8oJ3Byb3ZpZGVyRGVidWcudHM6IPCfkYkg8J+RiSBpIHNob3VsZCBvbmx5IGV2ZXIgcnVuIG9uY2UnKTtcbiAgICAgICAgY2FsbGJhY2tUZXN0U3ViLnN1YnNjcmliZSh4ID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrcygoeSkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnRlc3QgPSB4O1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1Nls3XSwgKCkgPT4gKytwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QsICgpID0+ICsrZnVuY1Byb3ZpZGVyLmNvdW50ZXIsIGZ1bmNQcm92aWRlci5jb3VudGVyLCBmdW5jUHJvdmlkZXIuY291bnRlciwgKCkgPT4gY2FsbGJhY2tUZXN0U3ViLm5leHQocHJvdmlkZXIudGVzdCArIDEpLCBwcm92aWRlci50ZXN0LCAoKSA9PiArK3Byb3ZpZGVyQ2xhc3MudGFnRGVidWcsIHByb3ZpZGVyQ2xhc3MudGFnRGVidWcsIHByb3ZpZGVyQ2xhc3MudGFnRGVidWcsICgpID0+IHByb3BDb3VudGVyQ2hhbmdlKCsrcHJvcENvdW50ZXIpLCBwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsICgpID0+IHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZyA9IHRydWUsIHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZywgKCkgPT4gc2hvd1Byb1Byb3BzID0gIXNob3dQcm9Qcm9wcywgc2hvd1Byb1Byb3BzID8gJ2hpZGUnIDogJ3Nob3cnLCBzaG93UHJvUHJvcHMgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1Nls4XSwgZngoKSwgdGVzdFByb3ZpZGVyQXNQcm9wcyhwcm92aWRlckNsYXNzKSksIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAncHJvdmlkZXJEZWJ1Z0lubmVyJyB9KSk7XG59KTtcbmNvbnN0IHRlc3RQcm92aWRlckFzUHJvcHMgPSB0YWcoKHByb3ZpZGVyQ2xhc3MpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4MzY1Nls5XSwgSlNPTi5zdHJpbmdpZnkocHJvdmlkZXJDbGFzcywgbnVsbCwgMikpO1xufSk7XG5jb25zdCBpbkN5Y2xlUGFyZW50ID0gKGNvbG9yID0gJ3JlZCcpID0+IGhvc3QoKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0YWcuZ2V0RWxlbWVudCgpO1xuICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyID0gJzJweCBzb2xpZCAnICsgY29sb3I7XG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgIGVsZW1lbnQuc3R5bGUuZ2FwID0gJzFlbSc7XG59KTtcbmNvbnN0IGluQ3ljbGVDaGlsZCA9IChjb2xvciA9ICdncmVlbicpID0+IHtcbiAgICByZXR1cm4gaG9zdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0YWcuZ2V0RWxlbWVudCgpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlciA9ICcycHggc29saWQgJyArIGNvbG9yO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZsZXggPSAnMSc7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gJ3dvbmRlcmZ1bCc7XG4gICAgfSk7XG59O1xuY29uc3QgaW5DeWNsZUNoaWxkMiA9IChjb2xvciA9ICdncmVlbicpID0+IHtcbiAgICByZXR1cm4gaG9zdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0YWcuZ2V0RWxlbWVudCgpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlciA9ICcycHggc29saWQgJyArIGNvbG9yO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZsZXggPSAnMSc7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gJ3dvbmRlcmZ1bCB0b28nO1xuICAgIH0pO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M2NzgzNjU2OiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1wcm92aWRlckRlYnVnLmpzLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInN0cm9uZ1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwcm92aWRlci50ZXN0IHN1Z2FyLWRhZGR5LTc3XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInN0cm9uZ1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwcm92aWRlci51cHBlcj8udGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicHJvdmlkZXJDbGFzcy50YWdEZWJ1Z1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYwtMC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NjCBpbmNyZWFzZSBwcm92aWRlci50ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42MIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42MLTAtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXVwcGVyLfCfjLktMC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuSBpbmNyZWFzZSB1cHBlci5wcm92aWRlci50ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTAtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYAtMC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA5IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NgCBpbmNyZWFzZSBwcm92aWRlciBjbGFzcyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYAgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYAtMC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3At8J+Qty0wLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QtyArK3Byb3BDb3VudGVyIGluIHBhcmVudCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkLcgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3At8J+Qty0wLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDE1IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+SrCB0b2dnbGUgZGlhbG9nIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE2IH1dIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNyB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInJlbmRlckNvdW50IG91dGVyOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wibmFtZVwiLCBcInJlbmRlcl9jb3VudF9vdXRlclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE4IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblxcbiAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMCB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiSW4tQ3ljbGUgQ29udGV4dCBDb21tdW5pY2F0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWFyZ2luLWJvdHRvbTogMWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUGFyZW50IENvbG9yOiBcIiB9LCB7IFwibm5cIjogXCJzZWxlY3RcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXJlbnQtY29sb3Itc2VsZWN0XCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDIxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjIgfV0gfV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXJnaW4tbGVmdDogMWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ2hpbGQgQ29sb3I6IFwiIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkLWNvbG9yLXNlbGVjdFwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAyMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI0IH1dIH1dIH0sIHsgXCJublwiOiBcImxhYmVsXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWFyZ2luLWxlZnQ6IDFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNoaWxkIENvbG9yMjogXCIgfSwgeyBcIm5uXCI6IFwic2VsZWN0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGQtY29sb3Itc2VsZWN0LTJcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMjUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyNiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbi1jeWNsZS1wYXJlbnRcIl0sIFt7IFwidGFnSnNWYXJcIjogMjcgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbi1jeWNsZS1jaGlsZFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAyOCB9XV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW4tY3ljbGUtY2hpbGQtMlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI5IH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJzZWxlY3RlZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcInNlbGVjdGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wic2VsZWN0ZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXN3aXRjaC3wn4y5LTAtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLkgaW5jcmVhc2Ugc3dpdGNoLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLlcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItc3dpdGNoLfCfjLktMC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGF0dWU6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci1zd2l0Y2gt8J+MuS0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IGluY3JlYXNlIHN3aXRjaC5wcm92aWRlci50ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXN3aXRjaC3wn4y5LTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItc3dpdGNoLfCfjLktMi1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuSBpbmNyZWFzZSBzd2l0Y2gucHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuVwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci1zd2l0Y2gt8J+MuS0yLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb3ZpZGVyRGVidWcuanNAY2hpbGQtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42MIGluY3JlYXNlIHByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYwtMS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IGluY3JlYXNlIHVwcGVyLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLlcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1hcnJvdy1wcm92aWRlci3imqHvuI8tMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4pqh77iPIGluY3JlYXNlIHVwcGVyLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKaoe+4j1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1hcnJvdy1wcm92aWRlci3imqHvuI8tMS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3ViamVjdC1pbmNyZWFzZS1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgc3ViamVjdCBpbmNyZWFzZTpcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN1YmplY3QtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYAgaW5jcmVhc2UgcHJvdmlkZXIgY2xhc3MgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42AIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42ALTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm9wLfCfkLctMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkLcgKytwcm9wQ291bnRlciBpbiBjaGlsZCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkLcgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3At8J+Qty0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDE3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+SrCB0b2dnbGUgZGlhbG9nIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE4IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgcHJvdmlkZXIgYXMgcHJvcHNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQgaW5uZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjMgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQcm92aWRlciBhcyBQcm9wc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvdmlkZXJEZWJ1Zy5qc0BUZXN0UHJvdmlkZXJBc1Byb3BzLS0+XCIgfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ3aWR0aDoxMDAlO2ZvbnQtc2l6ZTowLjZlbVwiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wicm93c1wiLCBcIjIwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlcywgdGFnIH0gZnJvbSAndGFnZ2VkanMnO1xuZXhwb3J0IGNvbnN0IG1vdXNlT3ZlclRhZyA9IHRhZygoeyBsYWJlbCwgbWVtb3J5LCB9KSA9PiB7XG4gICAgbGV0IG1vdXNlT3ZlckVkaXRTaG93ID0gZmFsc2U7XG4gICAgbGV0IGVkaXQgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IG1vdXNlT3ZlckVkaXRTaG93LCBlZGl0IH1dID0gZ2V0KHsgbW91c2VPdmVyRWRpdFNob3csIGVkaXQgfSkpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNDA0MDdbMF0sICgpID0+IG1vdXNlT3ZlckVkaXRTaG93ID0gdHJ1ZSwgKCkgPT4gbW91c2VPdmVyRWRpdFNob3cgPSBmYWxzZSwgbGFiZWwsIG1lbW9yeS5jb3VudGVyLCBtb3VzZU92ZXJFZGl0U2hvdyB8fCAnZmFsc2UnLCAoKSA9PiArK21lbW9yeS5jb3VudGVyLCAoZWRpdCB8fCBtb3VzZU92ZXJFZGl0U2hvdykgPyAndmlzaWJsZScgOiAnaGlkZGVuJywgKCkgPT4gZWRpdCA9ICFlZGl0KTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE0MDQwNzogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIG1vdXNlT3ZlclRhZyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yOnB1cnBsZTtwYWRkaW5nOi4yZW07ZmxleDoxXCJdLCBbXCJtb3VzZW92ZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcIm1vdXNlb3V0XCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibW91c2VvdmVyIC0gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK2NvdW50ZXJcIiB9XSB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlLnZpc2liaWxpdHlcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgXCJzdHlsZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLimpnvuI8mbmJzcDtcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IG1vdXNlT3ZlclRhZyB9IGZyb20gXCIuL21vdXNlb3Zlci50YWcuanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBzdGF0ZXMsIGh0bWwsIHRhZywgU3ViamVjdCwgb25Jbml0LCBjYWxsYmFja01ha2VyLCBzdGF0ZSwgVmFsdWVTdWJqZWN0LCBjYWxsYmFjaywgc3ViamVjdCwgc3Vic2NyaWJlLCBob3N0IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5jb25zdCBsb2FkU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbmV4cG9ydCBjb25zdCBjb3VudGVycyA9IHRhZy5pbW11dGFibGVQcm9wcygoeyBhcHBDb3VudGVyU3ViamVjdCB9LCBfID0gJ2NvdW50ZXJzRGVidWcnKSA9PiB7XG4gICAgc3RhdGUoJ2NvdW50ZXJzRGVidWcgc3RhdGUnKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzOTUyMjI3N1swXSwgc3Vic2NyaWJlKFN1YmplY3QuZ2xvYmFsU3ViQ291bnQkKSwgKCkgPT4gY29uc29sZS5pbmZvKCdzdWJzJywgU3ViamVjdC5nbG9iYWxTdWJzKSwgKCkgPT4gYXBwQ291bnRlclN1YmplY3QubmV4dCgoYXBwQ291bnRlclN1YmplY3QudmFsdWUgfHwgMCkgKyAxKSwgc3Vic2NyaWJlKGFwcENvdW50ZXJTdWJqZWN0KSwgYXBwQ291bnRlclN1YmplY3QudmFsdWUsIGlubmVyQ291bnRlckNvbnRlbnQoKSk7XG59KTtcbmNvbnN0IGlubmVyQ291bnRlcnMgPSB0YWcuZGVlcFByb3BXYXRjaCgoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4gKG90aGVyQ291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgZWxtSW5pdENvdW50ID0gMCwgXyA9IHN0YXRlcyhnZXQgPT4gW3sgZWxtSW5pdENvdW50LCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgZWxtSW5pdENvdW50LCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50IH0pKSwgX18gPSArK3JlbmRlckNvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M5NTIyMjc3WzFdLCBob3N0Lm9uSW5pdCgoKSA9PiArK2VsbUluaXRDb3VudCksIGVsbUluaXRDb3VudCwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiArK290aGVyQ291bnRlciwgb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnaW5uZXJfY291bnRlcnMnIH0pKSk7XG5jb25zdCBzaGFsbG93UHJvcENvdW50ZXJzID0gdGFnLndhdGNoUHJvcHMoKHsgcHJvcENvdW50ZXIsIGluY3JlYXNlUHJvcENvdW50ZXIsIH0pID0+IHtcbiAgICBsZXQgb3RoZXJDb3VudGVyID0gMDtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQgfSkpO1xuICAgICsrcmVuZGVyQ291bnQ7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzOTUyMjI3N1syXSwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiArK290aGVyQ291bnRlciwgb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnc2hhbGxvd19jb3VudGVycycgfSkpO1xufSk7XG5jb25zdCBpbW11dGFibGVQcm9wQ291bnRlcnMgPSB0YWcuaW1tdXRhYmxlUHJvcHMoKHsgcHJvcENvdW50ZXIsIGluY3JlYXNlUHJvcENvdW50ZXIsIH0pID0+IHtcbiAgICBsZXQgb3RoZXJDb3VudGVyID0gMDtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQgfSkpO1xuICAgICsrcmVuZGVyQ291bnQ7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzOTUyMjI3N1szXSwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiArK290aGVyQ291bnRlciwgb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnaW1tdXRhYmxlX2NvdW50ZXJzJyB9KSk7XG59KTtcbmNvbnN0IG5vV2F0Y2hQcm9wQ291bnRlcnMgPSAoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IG5vV2F0Y2hQcm9wQ291bnRlcnMgPSAnbm9XYXRjaFByb3BDb3VudGVycyc7IC8vIGp1c3QgYSBuYW1lIHRvIHBpY2t1cFxuICAgIHN0YXRlcyhnZXQgPT4gW3sgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCwgbm9XYXRjaFByb3BDb3VudGVycyB9XSA9IGdldCh7IG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIG5vV2F0Y2hQcm9wQ291bnRlcnMgfSkpO1xuICAgICsrcmVuZGVyQ291bnQ7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzOTUyMjI3N1s0XSwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiArK290aGVyQ291bnRlciwgb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnbm93YXRjaF9jb3VudGVycycgfSkpO1xufTtcbmV4cG9ydCBjb25zdCBpbm5lckNvdW50ZXJDb250ZW50ID0gKCkgPT4gdGFnLnVzZSA9IChzdGF0ZXNSZW5kZXJDb3VudCA9IDAsIHN0YXRlc1JlbmRlckNvdW50MiA9IDAsIGNvdW50ZXIgPSAwLCBjb3VudGVyMiA9IDAsIHJlbmRlckNvdW50ID0gMCwgcHJvcENvdW50ZXIgPSAwLCBpbml0Q291bnRlciA9IDAsIGNhbGxiYWNrcyA9IGNhbGxiYWNrTWFrZXIoKSwgY2FsbGJhY2tUbyA9IGNhbGxiYWNrKHogPT4ge1xuICAgIGNvdW50ZXIyID0gejtcbn0pLCBpbmNyZWFzZVByb3BDb3VudGVyID0gKCkgPT4ge1xuICAgICsrcHJvcENvdW50ZXI7XG59LCBpbW11dGFibGVQcm9wcyA9IHN0YXRlKCgpID0+ICh7IHByb3BDb3VudGVyLCBpbmNyZWFzZVByb3BDb3VudGVyIH0pKSwgXyA9IHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgY291bnRlciwgcmVuZGVyQ291bnQsIHByb3BDb3VudGVyLCBpbml0Q291bnRlciwgaW1tdXRhYmxlUHJvcHMsXG4gICAgICAgIHN0YXRlc1JlbmRlckNvdW50LCBzdGF0ZXNSZW5kZXJDb3VudDIsXG4gICAgfV0gPSBnZXQoe1xuICAgIGNvdW50ZXIsIHJlbmRlckNvdW50LCBwcm9wQ291bnRlciwgaW5pdENvdW50ZXIsIGltbXV0YWJsZVByb3BzLFxuICAgIHN0YXRlc1JlbmRlckNvdW50LCBzdGF0ZXNSZW5kZXJDb3VudDIsXG59KSksIGNhbGxiYWNrVGVzdFN1YiA9IHN0YXRlKCgpID0+IG5ldyBTdWJqZWN0KGNvdW50ZXIpKSwgY2FsbGJhY2tUZXN0U3ViMiA9IHN0YXRlKCgpID0+IG5ldyBTdWJqZWN0KDApKSwgcGlwZWRTdWJqZWN0MCA9IHN0YXRlKCgpID0+IG5ldyBWYWx1ZVN1YmplY3QoJzIyMicpKSwgXG4vLyBTdGF0ZSBhcyBhIGNhbGxiYWNrIG9ubHkgbmVlZGVkIHNvIHBpcGVkU3ViamVjdDEgaGFzIHRoZSBsYXRlc3QgdmFsdWVcbmluY3JlYXNlQ291bnRlciA9ICgpID0+IHtcbiAgICArK2NvdW50ZXI7XG4gICAgcGlwZWRTdWJqZWN0MC5uZXh0KCczMzMtJyArIGNvdW50ZXIpO1xufSwgcGlwZWRTdWJqZWN0MSA9IFN1YmplY3QuYWxsKFtwaXBlZFN1YmplY3QwLCBjYWxsYmFja1Rlc3RTdWJdKSwgcGlwZWRTdWJqZWN0MiA9IHN1YmplY3QuYWxsKFtwaXBlZFN1YmplY3QwLCBjYWxsYmFja1Rlc3RTdWJdKSwgbWVtb3J5ID0gc3RhdGUoKCkgPT4gKHsgY291bnRlcjogMCB9KSksIFxuLy8gY3JlYXRlIGFuIG9iamVjdCB0aGF0IHJlbWFpbnMgdGhlIHNhbWVcbnJlYWRTdGFydFRpbWUgPSBzdGF0ZSgoKSA9PiBEYXRlLm5vdygpKSwgX18gPSBvbkluaXQoKCkgPT4ge1xuICAgICsraW5pdENvdW50ZXI7XG4gICAgY29uc29sZS5pbmZvKCdjb3VudGVyc0RlYnVnLnRzOiDwn5GJIGkgc2hvdWxkIG9ubHkgZXZlciBydW4gb25jZScpO1xuICAgIGNhbGxiYWNrVGVzdFN1Yi5zdWJzY3JpYmUoY2FsbGJhY2tzKHkgPT4ge1xuICAgICAgICBjb3VudGVyID0geTtcbiAgICB9KSk7XG4gICAgY2FsbGJhY2tUZXN0U3ViLnN1YnNjcmliZShjYWxsYmFja1RvKTtcbn0pKSA9PiB7XG4gICAgaWYgKGltbXV0YWJsZVByb3BzLnByb3BDb3VudGVyICE9PSBwcm9wQ291bnRlcikge1xuICAgICAgICBpbW11dGFibGVQcm9wcyA9IHsgcHJvcENvdW50ZXIsIGluY3JlYXNlUHJvcENvdW50ZXIgfTtcbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDsgLy8gZm9yIGRlYnVnZ2luZ1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M5NTIyMjc3WzVdLCBpbml0Q291bnRlciwgc3RhdGVzUmVuZGVyQ291bnQsICgpID0+IHtcbiAgICAgICAgKytzdGF0ZXNSZW5kZXJDb3VudDtcbiAgICB9LCBzdGF0ZXNSZW5kZXJDb3VudDIsICgpID0+IHtcbiAgICAgICAgKytzdGF0ZXNSZW5kZXJDb3VudDI7XG4gICAgfSwgKGUpID0+IChjb3VudGVyID0gTnVtYmVyKGUudGFyZ2V0LnZhbHVlKSB8fCAwKSwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCBpbmNyZWFzZUNvdW50ZXIsIGNvdW50ZXIsIGNvdW50ZXIgPiAxICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczk1MjIyNzdbNl0sIGluY3JlYXNlQ291bnRlciwgY291bnRlciwgY291bnRlciksICgpID0+IGNhbGxiYWNrVGVzdFN1Yi5uZXh0KGNvdW50ZXIgKyAxKSwgc3Vic2NyaWJlKGNhbGxiYWNrVGVzdFN1YiksICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFja1Rlc3RTdWIyLm5leHQoY2FsbGJhY2tUZXN0U3ViMi52YWx1ZSArIDEpO1xuICAgICAgICB9LCAxMCk7XG4gICAgfSwgc3Vic2NyaWJlKGNhbGxiYWNrVGVzdFN1YjIpLCBzdWJzY3JpYmUocGlwZWRTdWJqZWN0MSwgKCkgPT4gY291bnRlciksIHN1YnNjcmliZShwaXBlZFN1YmplY3QyLCAoKSA9PiBjb3VudGVyKSwgdHJ1ZSwgbW91c2VPdmVyVGFnKHsgbGFiZWw6ICdhLWEt8J+YuycsIG1lbW9yeSB9KSwgbW91c2VPdmVyVGFnKHsgbGFiZWw6ICdiLWIt8J+YuycsIG1lbW9yeSB9KSwgbWVtb3J5LmNvdW50ZXIsICgpID0+ICsrbWVtb3J5LmNvdW50ZXIsIGlubmVyQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSwgc2hhbGxvd1Byb3BDb3VudGVycyh7IHByb3BDb3VudGVyLCBpbmNyZWFzZVByb3BDb3VudGVyIH0pLCBpbW11dGFibGVQcm9wQ291bnRlcnMoaW1tdXRhYmxlUHJvcHMpLCBub1dhdGNoUHJvcENvdW50ZXJzKHsgcHJvcENvdW50ZXIsIGluY3JlYXNlUHJvcENvdW50ZXIgfSksIGhvc3Qub25Jbml0KChlbGVtZW50KSA9PiBlbGVtZW50LmlubmVyVGV4dCA9IChEYXRlLm5vdygpIC0gbG9hZFN0YXJ0VGltZSkudG9TdHJpbmcoKSksIGhvc3Qub25Jbml0KChlbGVtZW50KSA9PiBlbGVtZW50LmlubmVyVGV4dCA9IChEYXRlLm5vdygpIC0gcmVhZFN0YXJ0VGltZSkudG9TdHJpbmcoKSksIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjb3VudGVycycgfSkpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M5NTIyMjc3OiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1jb3VudGVycy0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkYkgU3Vic2NyaXB0aW9uIGNvdW50OlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5GJLWNvdW50ZXItc3ViLWNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJsb2cgc3Vic1wiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb3VudGVycy1hcHAtY291bnRlci1zdWJqZWN0LWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SICsrYXBwIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVycy1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVycy1zdWJqZWN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiXSwgW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+UpSBlbG1Jbml0Q291bnQ6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCflKUtaW5pdC1jb3VudGVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI8taW5uZXItY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI8taW5uZXItY291bnRlciBwcm9wQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4p2k77iPIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI8taW5uZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+kvy1kZWVwLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+kvyBvdGhlckNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpL8gXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfpL8tZGVlcC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi4p2k77iP8J+Spy1zaGFsbG93LWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4p2k77iP8J+SpyBwcm9wQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4p2k77iP8J+SpyBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi4p2k77iP8J+Spy1zaGFsbG93LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfkqctc2hhbGxvdy1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkqcgb3RoZXJDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5KnIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5KnLXNoYWxsb3ctZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInJlbmRlckNvdW50OlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi4p2k77iP8J+qqC1pbW11dGFibGUtY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn6qoIHByb3BDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn6qoIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn6qoLWltbXV0YWJsZS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6qoLWltbXV0YWJsZS1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfqqggb3RoZXJDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6qoIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6qoLWltbXV0YWJsZS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn5qrLW5vd2F0Y2gtY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn5qrIHByb3BDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn5qrIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn5qrLW5vd2F0Y2gtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+aqy1ub3dhdGNoLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+aqyBvdGhlckNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfmqsgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfmqstbm93YXRjaC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5pdENvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+YsSBzdGF0ZXNSZW5kZXJDb3VudDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfmLEgKytzdGF0ZXNSZW5kZXJDb3VudFwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5ix8J+YsSBzdGF0ZXNSZW5kZXJDb3VudDI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5ix8J+YsSArK3N0YXRlc1JlbmRlckNvdW50MlwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzZXQtbWFpbi1jb3VudGVyLWlucHV0XCJdLCBbXCJwbGFjZWhvbGRlclwiLCBcImlucHV0IGNvdW50ZXIgdmFsdWVcIl0sIFtcImtleXVwXCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi4p2k77iPLWluY3JlYXNlLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4p2k77iPIHByb3BDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI8gXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4jy1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6WmLXN0YW5kYWxvbmUtY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WmIHN0YW5kIGFsb25lIGNvdW50ZXJzXCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WmIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6WmLXN0YW5kYWxvbmUtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6WmLXN1YmplY3QtaW5jcmVhc2UtY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKytzdWJqZWN0Jmx0OyZndDtcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaYmbHQ7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN1YmplY3QtY291bnRlci1zdWJqZWN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImZ3Q7XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfpaYtc3ViamVjdC1pbmNyZWFzZS1hc3luYy1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5SAIPCfpaYgKytzdWJqZWN0Jmx0OyZndDtcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCflIAg8J+lpiZsdDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3ViamVjdC1hc3luYy1jb3VudGVyLXN1YmplY3QtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE1IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZndDtcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+qiCBwaXBlZFN1YmplY3QgMVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+qiC1waXBlZFN1YmplY3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNiB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+qiCBwaXBlZFN1YmplY3QgMlwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+qiC1waXBlZFN1YmplY3QtMlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE3IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzaGFyZWQgbWVtb3J5XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDouNWVtXCJdLCBbXCJjbGFzcy5ib2xkLnRleHQtYmx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMTggfSwgXCJjbGFzc1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIwIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm1lbW9yeS5jb3VudGVyOvCfmLtcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2Ug8J+Yu1wiIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lciBjb3VudGVyXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjMgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNoYWxsb3cgcHJvcHNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyNCB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW1tdXRhYmxlIHByb3BzXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjUgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm5vd2F0Y2ggcHJvcHNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyNiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmb250LXNpemU6MC44ZW07b3BhY2l0eTowLjhcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLijJrvuI8gcGFnZSBsb2FkIHRvIGRpc3BsYXkgaW4mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1t7IFwidGFnSnNWYXJcIjogMjcgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibXNcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmb250LXNpemU6MC44ZW07b3BhY2l0eTowLjhcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLijJrvuI8gcmVhZCBpbiZuYnNwO1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW3sgXCJ0YWdKc1ZhclwiOiAyOCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi1cIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJtc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbmRpdGlvbmFsLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29uZGl0aW9uYWwgY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+lpiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29uZGl0aW9uYWwtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IHRhYmxlRGVidWcgPSB0YWcoKCkgPT4ge1xuICAgIGxldCBzaG93Q2VsbCA9IHRydWU7XG4gICAgc3RhdGVzKGdldCA9PiBbc2hvd0NlbGxdID0gZ2V0KHNob3dDZWxsKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczUyNzgyWzBdLCA1LCA1LCBzaG93Q2VsbCAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M1Mjc4MlsxXSksIHNob3dDZWxsICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczUyNzgyWzJdKSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M1Mjc4MjogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXgtaGVpZ2h0OiA4MDBweDtvdmVyZmxvdy15OiBzY3JvbGw7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGFibGVcIiwgXCJhdFwiOiBbW1wiY2VsbHBhZGRpbmdcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImNlbGxzcGFjaW5nXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJib3JkZXJcIiwgXCIxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGhlYWRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwb3NpdGlvbjogc3RpY2t5O3RvcDogMDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0clwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0aFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoZWxsb1wiIH1dIH0sIHsgXCJublwiOiBcInRoXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhlbGxvXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0Ym9keVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0clwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3b3JsZFwiIH1dIH0sIHsgXCJublwiOiBcInRkXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIndvcmxkXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcInRkXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhlbGxvIDIgdGhlYWQgY2VsbFwiIH1dIH1dLCBbeyBcIm5uXCI6IFwidGRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid29ybGQgMiB0Ym9keSBjZWxsXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyB3YXRjaCwgaHRtbCwgdGFnLCBzdGF0ZXMsIHN1YnNjcmliZSwgY2FsbGJhY2sgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCB3YXRjaFRlc3RpbmcgPSB0YWcuZGVlcFByb3BXYXRjaCgoKSA9PiAoc3RhdGVOdW0gPSAwLCBzdGF0ZU51bUNoYW5nZUNvdW50ID0gMCwgc2xvd0NoYW5nZUNvdW50ID0gMCwgc3ViamVjdENoYW5nZUNvdW50ID0gMCwgdHJ1dGhDaGFuZ2UgPSBmYWxzZSwgdHJ1dGhDaGFuZ2VDb3VudCA9IDAsIHRydXRoU3ViQ2hhbmdlQ291bnQgPSAwLCBfc3RhdGVzID0gc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICBzdGF0ZU51bSwgc3RhdGVOdW1DaGFuZ2VDb3VudCwgc2xvd0NoYW5nZUNvdW50LCBzdWJqZWN0Q2hhbmdlQ291bnQsXG4gICAgICAgIHRydXRoQ2hhbmdlLCB0cnV0aENoYW5nZUNvdW50LFxuICAgICAgICB0cnV0aFN1YkNoYW5nZUNvdW50LFxuICAgIH1dID0gZ2V0KHtcbiAgICBzdGF0ZU51bSwgc3RhdGVOdW1DaGFuZ2VDb3VudCwgc2xvd0NoYW5nZUNvdW50LCBzdWJqZWN0Q2hhbmdlQ291bnQsXG4gICAgdHJ1dGhDaGFuZ2UsIHRydXRoQ2hhbmdlQ291bnQsXG4gICAgdHJ1dGhTdWJDaGFuZ2VDb3VudCxcbn0pKSwgXyA9IHdhdGNoKFtzdGF0ZU51bV0sICgpID0+ICsrc3RhdGVOdW1DaGFuZ2VDb3VudCksIHdhdGNoUHJvcE51bVNsb3cgPSB3YXRjaC5ub0luaXQoW3N0YXRlTnVtXSwgY2FsbGJhY2soKCkgPT4gKytzbG93Q2hhbmdlQ291bnQpKSwgd2F0Y2hQcm9wTnVtU3ViamVjdCA9IHdhdGNoLmFzU3ViamVjdChbc3RhdGVOdW1dLCBjYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuICsrc3ViamVjdENoYW5nZUNvdW50O1xufSkpLCB3YXRjaFRydXRoID0gd2F0Y2gudHJ1dGh5KFt0cnV0aENoYW5nZV0sIGNhbGxiYWNrKCgpID0+ICsrdHJ1dGhDaGFuZ2VDb3VudCkpLCB3YXRjaFRydXRoQXNTdWIgPSB3YXRjaC50cnV0aHkuYXNTdWJqZWN0KFt0cnV0aENoYW5nZV0sIGNhbGxiYWNrKCh0cnV0aENoYW5nZSkgPT4ge1xuICAgICsrdHJ1dGhTdWJDaGFuZ2VDb3VudDtcbiAgICByZXR1cm4gdHJ1dGhTdWJDaGFuZ2VDb3VudDtcbn0pKSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjE4NzYxM1swXSwgc3RhdGVOdW0sICgpID0+ICsrc3RhdGVOdW0sIHN0YXRlTnVtQ2hhbmdlQ291bnQsIHNsb3dDaGFuZ2VDb3VudCwgd2F0Y2hQcm9wTnVtU2xvdywgc3ViamVjdENoYW5nZUNvdW50LCBzdWJzY3JpYmUod2F0Y2hQcm9wTnVtU3ViamVjdCksIHRydXRoQ2hhbmdlID8gJ3RydWUnIDogJ2ZhbHNlJywgd2F0Y2hUcnV0aCB8fCAnZmFsc2UnLCB0cnV0aENoYW5nZUNvdW50LCBzdWJzY3JpYmUod2F0Y2hUcnV0aEFzU3ViKSwgdHJ1dGhTdWJDaGFuZ2VDb3VudCwgKCkgPT4gdHJ1dGhDaGFuZ2UgPSAhdHJ1dGhDaGFuZ2UsIHRydXRoQ2hhbmdlID8gJ3RydWUnIDogJ2ZhbHNlJykpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczIxODc2MTM6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSB3YXRjaFRlc3RpbmcudGFnLnRzIC0tPnN0YXRlTnVtOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ3YXRjaC10ZXN0aW5nLW51bS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ3YXRjaC10ZXN0aW5nLW51bS1idXR0b25cIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKysgc3RhdGVOdW1cIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhdGVOdW1DaGFuZ2VDb3VudDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3RhdGVOdW1DaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYQgc2xvd0NoYW5nZUNvdW50XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn42ELXNsb3dDaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIndhdGNoUHJvcE51bVNsb3c6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfjYQtd2F0Y2hQcm9wTnVtU2xvd1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYTigI3wn5+rIHN1YmplY3RDaGFuZ2VDb3VudFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+NhOKAjfCfn6stc3ViamVjdENoYW5nZUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKHdhdGNoUHJvcE51bVN1YmplY3Q6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfjYTigI3wn5+rLXdhdGNoUHJvcE51bVN1YmplY3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+mtyB0cnV0aENoYW5nZVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty10cnV0aENoYW5nZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNpbXBsZSB0cnV0aFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3YXRjaFRydXRoOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6a3LXdhdGNoVHJ1dGhcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIodHJ1dGhDaGFuZ2VDb3VudDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty10cnV0aENoYW5nZUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRydXRoIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid2F0Y2hUcnV0aEFzU3ViOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6a3LXdhdGNoVHJ1dGhBc1N1YlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIodHJ1dGhTdWJDaGFuZ2VDb3VudDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty10cnV0aFN1YkNoYW5nZUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKVwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfprctdHJ1dGhDaGFuZ2UtYnV0dG9uXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6a3IHRvZ2dsZSB0byBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IHRhZywgc3RhdGUsIHN0YXRlcywgU3ViamVjdCwgVmFsdWVTdWJqZWN0LCBzdWJzY3JpYmVXaXRoLCBzdWJzY3JpYmUsIGh0bWwgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCBzdWJzY3JpYmVBdHRyaWJ1dGVzID0gdGFnKCgpID0+IHtcbiAgICBjb25zdCBzdWJDb2xvciQgPSBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdCgpKTtcbiAgICBjb25zdCBzdWJDb2xvclB1cnBsZU9yYW5nZSQgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KCdwdXJwbGUnKSk7XG4gICAgY29uc3Qgc3ViQ29sb3JHcmVlblllbGxvdyQgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KCdncmVlbicpKTtcbiAgICBsZXQgc2hvdWxkSGlkZUF0dHJpYnV0ZXMgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHNob3VsZEhpZGVBdHRyaWJ1dGVzIH1dID0gZ2V0KHsgc2hvdWxkSGlkZUF0dHJpYnV0ZXMgfSkpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyMTk4MjBbMF0sIHNob3VsZEhpZGVBdHRyaWJ1dGVzID8gJycgOiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyMTk4MjBbMV0sIHN1YnNjcmliZVdpdGgoc3ViQ29sb3IkLCAncmVkJyksIHN1YnNjcmliZVdpdGgoc3ViQ29sb3IkLCAncmVkJywgc3ViQ29sb3IgPT4gJ2JhY2tncm91bmQtY29sb3I6JyArIHN1YkNvbG9yKSwgKHN1YkNvbG9yJC52YWx1ZSA9PT0gJ2JsdWUnICYmIHN1YnNjcmliZShzdWJDb2xvclB1cnBsZU9yYW5nZSQsIHN1YkNvbG9yID0+IHtcbiAgICAgICAgcmV0dXJuICdiYWNrZ3JvdW5kLWNvbG9yOicgKyBzdWJDb2xvcjtcbiAgICB9KSkgfHwgKHN1YkNvbG9yJC52YWx1ZSA9PT0gJ3JlZCcgJiYgc3Vic2NyaWJlKHN1YkNvbG9yR3JlZW5ZZWxsb3ckLCBzdWJDb2xvciA9PiB7XG4gICAgICAgIHJldHVybiAnYmFja2dyb3VuZC1jb2xvcjonICsgc3ViQ29sb3I7XG4gICAgfSkpIHx8ICdiYWNrZ3JvdW5kLWNvbG9yOnBpbms7JyksICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudENvbG9yID0gc3ViQ29sb3IkLnZhbHVlO1xuICAgICAgICBzdWJDb2xvciQubmV4dChjdXJyZW50Q29sb3IgPT09ICdyZWQnID8gJ2JsdWUnIDogJ3JlZCcpO1xuICAgIH0sIHN1YnNjcmliZShzdWJDb2xvciQpLCAoKSA9PiBzaG91bGRIaWRlQXR0cmlidXRlcyA9ICFzaG91bGRIaWRlQXR0cmlidXRlcywgc2hvdWxkSGlkZUF0dHJpYnV0ZXMgPyAnU2hvdycgOiAnSGlkZScsICgpID0+IHN1YkNvbG9yJC5uZXh0KCcnKSwgc3Vic2NyaWJlV2l0aChTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JCwgU3ViamVjdC5nbG9iYWxTdWJDb3VudCQudmFsdWUpKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczIxOTgyMDogW1t7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZSBhdHRyaWJ1dGVzXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtY29sb3ItYnRuXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlRvZ2dsZSBDb2xvciAoXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9nZ2xlLWF0dHJpYnV0ZXMtYnRuXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIEF0dHJpYnV0ZXNcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjbGVhci1jb2xvci1idG5cIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ2xlYXIgQ29sb3JcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWJzY3JpcHRpb25zOiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3Vic2NyaXB0aW9ucy1jb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtmb250LXNpemU6MC44ZW1cIl0sIFtcImlkXCIsIFwic3Vic2NyaWJlLWF0dHJpYnV0ZXMtd3JhcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWJzY3JpYmUgc3BlY2lhbCBhdHRyaWJ1dGVcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3Vic2NyaWJlLXN0eWxlLWRvdC1iZy1jb2xvci1jaGFuZ2VyXCJdLCBbXCJzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJiYWNrZ3JvdW5kIGNvbG9yIGNoYW5nZXJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZSBzdHlsZSBhdHRyaWJ1dGVcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJpZFwiLCBcInN1YnNjcmliZS1zdHlsZS1iZy1jb2xvclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZSBiZyBjb2xvclwiIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic29tZXRpbWVzIHN1YnNjcmliZSBzdHlsZSBhdHRyaWJ1dGVcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJpZFwiLCBcIm11bHRpcGxlLXN1YnNjcmliZS1iZy1jb2xvclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm11bHRpcGxlIHN1YnNjcmliZSBiZyBjb2xvclwiIH1dIH1dIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHN1YnNjcmliZUF0dHJpYnV0ZXMgfSBmcm9tIFwiLi9zdWJzY3JpYmVBdHRyaWJ1dGVzLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IGF0dHJpYnV0ZURlYnVnID0gdGFnKCgpID0+IHtcbiAgICBsZXQgc2VsZWN0ZWQgPSAnYSc7XG4gICAgbGV0IGlzT3JhbmdlID0gdHJ1ZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHNlbGVjdGVkLCBpc09yYW5nZSB9XSA9IGdldCh7IHNlbGVjdGVkLCBpc09yYW5nZSB9KSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczIxNDgwNlswXSwgKGV2ZW50KSA9PiBzZWxlY3RlZCA9IGV2ZW50LnRhcmdldC52YWx1ZSwgWydhJywgJ2InLCAnYyddLm1hcChpdGVtID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczIxNDgwNlsxXSwgaXRlbSwgaXRlbSA9PSBzZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnJywgaXRlbSwgaXRlbSA9PSBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScpLmtleShpdGVtKSksIChldmVudCkgPT4gaXNPcmFuZ2UgPSBldmVudC50YXJnZXQuY2hlY2tlZCwgaXNPcmFuZ2UgJiYgJ2NoZWNrZWQnLCBpc09yYW5nZSA/ICd0cnVlJyA6ICdmYWxzZScsIGlzT3JhbmdlID8gJ29yYW5nZScgOiAnJywgaXNPcmFuZ2UgPyAnYmxhY2snIDogJycsIGlzT3JhbmdlID8gdHJ1ZSA6IGZhbHNlLCBpc09yYW5nZSA/IHRydWUgOiBmYWxzZSwgaXNPcmFuZ2UgPyAnYmFja2dyb3VuZC1vcmFuZ2UgdGV4dC1ibGFjaycgOiAnJywgeyBjbGFzczogJ3RleHQtd2hpdGUnICsgKGlzT3JhbmdlID8gJyBiYWNrZ3JvdW5kLW9yYW5nZScgOiAnJykgfSwge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGlzT3JhbmdlID8gJ29yYW5nZScgOiAnbGlnaHRncmF5JyxcbiAgICAgICAgcGFkZGluZzogJzEwcHgnLFxuICAgICAgICBib3JkZXI6ICcycHggc29saWQgYmxhY2snLFxuICAgICAgICBib3JkZXJSYWRpdXM6IGlzT3JhbmdlID8gJzhweCcgOiAnNHB4JyxcbiAgICAgICAgYm94U2hhZG93OiBpc09yYW5nZSA/ICcycHggMnB4IDRweCByZ2JhKDAsMCwwLDAuMyknIDogJ25vbmUnXG4gICAgfSwge1xuICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6IGlzT3JhbmdlID8gJ3JlZCcgOiAnYmx1ZScsXG4gICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICBwYWRkaW5nOiAnNXB4JyxcbiAgICAgICAgJ21hcmdpbi10b3AnOiAnMTBweCdcbiAgICB9LCBzdWJzY3JpYmVBdHRyaWJ1dGVzKCkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMjE0ODA2OiBbW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXR0ci1pbnB1dC1hYmNcIl0sIFtcInBsYWNlaG9sZGVyXCIsIFwiYSBiIG9yIGNcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwic2VsZWN0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic2VsZWN0LXNhbXBsZS1kcm9wLWRvd25cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiaDNcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiU3BlY2lhbCBBdHRyaWJ1dGVzXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW1wiaWRcIiwgXCJ0b2dnbGUtYmFja2dyb3VuZHNcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXSwgW3sgXCJ0YWdKc1ZhclwiOiAzIH1dXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgLSB0b2dnbGUgYmFja2dyb3VuZHM6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OiBmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJvbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsaVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhdHRyLXN0eWxlLXN0cmluZ3NcIl0sIFtcInN0eWxlLmJhY2tncm91bmQtY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgXCJzdHlsZVwiXSwgW1wic3R5bGUuY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN0eWxlLmJhY2tncm91bmQtY29sb3I9JmRvbGxhcjt7J29yYW5nZSd9XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwibGlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXR0ci1jbGFzcy1ib29sZWFuc1wiXSwgW1wiY2xhc3MuYmFja2dyb3VuZC1vcmFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgXCJjbGFzc1wiXSwgW1wiY2xhc3MudGV4dC1ibGFja1wiLCB7IFwidGFnSnNWYXJcIjogOCB9LCBcImNsYXNzXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY2xhc3MuYmFja2dyb3VuZC1vcmFuZ2U9JmRvbGxhcjt7dHJ1ZX1cIiB9XSB9XSB9LCB7IFwibm5cIjogXCJsaVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhdHRyLWlubGluZS1jbGFzc1wiXSwgW1wiY2xhc3NcIiwgeyBcInRhZ0pzVmFyXCI6IDkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjbGFzcz0mZG9sbGFyO3snYmFja2dyb3VuZC1vcmFuZ2UgdGV4dC1ibGFjayd9XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwibGlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXR0ci1keW5hbWljLWlubGluZS1jbGFzc1wiXSwgW3sgXCJ0YWdKc1ZhclwiOiAxMCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNsYXNzPSZkb2xsYXI7eydiYWNrZ3JvdW5kLW9yYW5nZSd9IGJ1dCBhbHdheXMgd2hpdGVcIiB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbi10b3A6IDFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdHlsZSBvYmplY3QgYXR0cmlidXRlXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMSB9LCBudWxsXSwgW1wiaWRcIiwgXCJzdHlsZS1vYmplY3QtdGVzdFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlN0eWxlIG9iamVjdCB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMiB9LCBudWxsXSwgW1wiaWRcIiwgXCJzdHlsZS1zZXQtcHJvcGVydHktdGVzdFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN0eWxlIHByb3BlcnR5IHRlc3RcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJzdHlsZVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIuYmFja2dyb3VuZC1vcmFuZ2Uge2JhY2tncm91bmQtY29sb3I6b3JhbmdlfVxcbiAgICAgIC50ZXh0LWJsYWNrIHtjb2xvcjpibGFja31cXG4gICAgICAudGV4dC13aGl0ZSB7Y29sb3I6d2hpdGV9XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW3sgXCJ0YWdKc1ZhclwiOiAxIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgLSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGUsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgb25lUmVuZGVyIH0gZnJvbSBcIi4vb25lUmVuZGVyLnRhZ1wiO1xuaW1wb3J0IHsgc3RvcmFnZSwgVmlld1R5cGVzIH0gZnJvbSBcIi4vc2VjdGlvblNlbGVjdG9yLnRhZ1wiO1xuaW1wb3J0IGZ1bkluUHJvcHNUYWcgZnJvbSBcIi4vZnVuSW5Qcm9wcy50YWdcIjtcbmltcG9ydCB7IHRvZG9BcHAgfSBmcm9tIFwiLi90b2RvL3RvZG9zLmFwcFwiO1xuaW1wb3J0IHsgY2hpbGQgfSBmcm9tIFwiLi9jaGlsZFRlc3RzLnRhZ1wiO1xuaW1wb3J0IHsgZGVzdHJveXMgfSBmcm9tIFwiLi9kZXN0cm95cy50YWdcIjtcbmltcG9ydCB7IGFycmF5cyB9IGZyb20gXCIuL2FycmF5cy50YWdcIjtcbmltcG9ydCB7IHRhZ1N3aXRjaERlYnVnIH0gZnJvbSBcIi4vdGFnU3dpdGNoRGVidWcuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBtaXJyb3JpbmcgfSBmcm9tIFwiLi9taXJyb3JpbmcudGFnXCI7XG5pbXBvcnQgeyBwcm9wc0RlYnVnTWFpbiB9IGZyb20gXCIuL1Byb3BzRGVidWcudGFnXCI7XG5pbXBvcnQgeyBwcm92aWRlckRlYnVnIH0gZnJvbSBcIi4vcHJvdmlkZXJzLnRhZ1wiO1xuaW1wb3J0IHsgY291bnRlcnMgfSBmcm9tIFwiLi9jb3VudGVyc0RlYnVnXCI7XG5pbXBvcnQgeyB0YWJsZURlYnVnIH0gZnJvbSBcIi4vdGFibGVEZWJ1Zy5jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRlbnQgfSBmcm9tIFwiLi9Db250ZW50RGVidWcudGFnXCI7XG5pbXBvcnQgeyB3YXRjaFRlc3RpbmcgfSBmcm9tIFwiLi93YXRjaFRlc3RpbmcudGFnXCI7XG5pbXBvcnQgeyBhdHRyaWJ1dGVEZWJ1ZyB9IGZyb20gXCIuL2F0dHJpYnV0ZURlYnVnLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IG91dHB1dFNlY3Rpb25zID0gW3tcbiAgICAgICAgdmlldzogVmlld1R5cGVzLk9uZVJlbmRlciwgdGFnOiBvbmVSZW5kZXIsIGVtb2ppOiAnMe+4j+KDoydcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Qcm9wcywgdGFnOiBwcm9wc0RlYnVnTWFpbiwgZW1vamk6ICfwn6ezJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5XYXRjaFRlc3RpbmcsIHRhZzogd2F0Y2hUZXN0aW5nLCBlbW9qaTogJ+KMmu+4jycsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuVGFibGVEZWJ1ZywgdGFnOiB0YWJsZURlYnVnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLlByb3ZpZGVyRGVidWcsIHRhZzogcHJvdmlkZXJEZWJ1ZyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5UYWdTd2l0Y2hEZWJ1ZywgdGFnOiB0YWdTd2l0Y2hEZWJ1ZywgZW1vamk6ICfwn5SAJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5NaXJyb3JpbmcsIHRhZzogbWlycm9yaW5nLCBlbW9qaTogJ/Cfqp4nLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkFycmF5cywgdGFnOiBhcnJheXMsIGVtb2ppOiAn4qCHJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Db250ZW50LCB0YWc6IGNvbnRlbnQsIGVtb2ppOiAn8J+TsCcsXG4gICAgICAgIGRlYnVnOiB0cnVlLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkNoaWxkLCB0YWc6IGNoaWxkLCBlbW9qaTogJ/CfkbYnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkRlc3Ryb3lzLCB0YWc6IGRlc3Ryb3lzLCBlbW9qaTogJ/Cfl5HvuI8nLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkZ1bkluUHJvcHNUYWcsIHRhZzogZnVuSW5Qcm9wc1RhZyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5BdHRyaWJ1dGVEZWJ1ZywgdGFnOiBhdHRyaWJ1dGVEZWJ1ZywgZW1vamk6ICfwn4+5JyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Ub2RvLCB0YWc6IHRhZyh0b2RvQXBwKSxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Db3VudGVycywgdGFnOiBjb3VudGVycywgZW1vamk6ICfwn5KvJyxcbiAgICB9XTtcbmV4cG9ydCBjb25zdCByZW5kZXJlZFNlY3Rpb25zID0gdGFnKChhcHBDb3VudGVyU3ViamVjdCwgdmlld1R5cGVzID0gc3RvcmFnZS52aWV3cykgPT4ge1xuICAgIGNvbnN0IHZpc2libGVTZWN0aW9ucyA9IHN0YXRlKCgpID0+IG91dHB1dFNlY3Rpb25zLmZpbHRlcihzZWN0aW9uID0+IHtcbiAgICAgICAgaWYgKHZpZXdUeXBlcy5pbmNsdWRlcyhzZWN0aW9uLnZpZXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pLm1hcCgoeyB2aWV3LCB0aXRsZSwgZW1vamksIHRhZywgLi4uZXh0cmEgfSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6IHRpdGxlIHx8IHZpZXcsXG4gICAgICAgICAgICBvdXRwdXQ6IHZpZXcgPT09IFZpZXdUeXBlcy5Db3VudGVycyA/IHRhZyh7IGFwcENvdW50ZXJTdWJqZWN0IH0pIDogdGFnKCksXG4gICAgICAgICAgICB2aWV3LFxuICAgICAgICAgICAgZW1vamksXG4gICAgICAgICAgICAuLi5leHRyYSxcbiAgICAgICAgfTtcbiAgICB9KS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIC8vIFNvcnQgYWxwaGFiZXRpY2FsbHkgYnkgdmlldyBuYW1lXG4gICAgICAgIHJldHVybiBhLnZpZXcubG9jYWxlQ29tcGFyZShiLnZpZXcpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTY2ODkyMFswXSwgdmlzaWJsZVNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4gZ2V0U2VjdGlvbihzZWN0aW9uKS5rZXkoc2VjdGlvbi52aWV3KSkpO1xufSk7XG5jb25zdCBnZXRTZWN0aW9uID0gKHNlY3Rpb24pID0+IHtcbiAgICBjb25zdCB7IGVtb2ppLCB2aWV3LCB0aXRsZSwgb3V0cHV0LCBkZWJ1ZyB9ID0gc2VjdGlvbjtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTY2ODkyMFsxXSwgdmlldywgZW1vamksIHRpdGxlLCBzZWN0aW9uLmNvbnRlbnRIaWRlID8gJ25vbmUnIDogJycsIG91dHB1dCwgJ3NlY3Rpb25fJyArIHNlY3Rpb24udmlldywgKCkgPT4gc2VjdGlvbi5jb250ZW50SGlkZSA9ICFzZWN0aW9uLmNvbnRlbnRIaWRlLCBzZWN0aW9uLmNvbnRlbnRIaWRlID8gJ2dyZXknIDogJycpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxNjY4OTIwOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXg6MiAyIDIwZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSDimpPvuI8gLS0+XCIgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlLmRpc3BsYXlcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXg6MTtcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIG51bGxdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXSwgW1wic3R5bGUuYmFja2dyb3VuZC1jb2xvclwiLCB7IFwidGFnSnNWYXJcIjogNyB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+Rge+4jyBoaWRlL3Nob3dcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmb250LXNpemU6MC42ZW07dGV4dC1hbGlnbjpyaWdodDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImhyZWZcIiwgXCIjdG9wXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4o+rXCIgfV0gfV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIG9uSW5pdCwgY2FsbGJhY2tNYWtlciwgb25EZXN0cm95LCBzdGF0ZXMgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmNvbnN0IHRlc3QwaW50ZXJ2YWwgPSAzMDAwO1xuY29uc3QgdGVzdDFpbnRlcnZhbCA9IDYwMDA7XG5leHBvcnQgY29uc3QgaW50ZXJ2YWxUZXN0ZXIwID0gdGFnKCgpID0+IHtcbiAgICBsZXQgaW50ZXJ2YWxDb3VudCA9IDA7XG4gICAgbGV0IGludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGludGVydmFsSWQyID0gdW5kZWZpbmVkO1xuICAgIGxldCByZW5kZXJDb3VudGVyID0gMDtcbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgICAgIGludGVydmFsQ291bnQsIGludGVydmFsSWQsIGludGVydmFsSWQyLCByZW5kZXJDb3VudGVyLCBjdXJyZW50VGltZSxcbiAgICAgICAgfV0gPSBnZXQoe1xuICAgICAgICBpbnRlcnZhbENvdW50LCBpbnRlcnZhbElkLCBpbnRlcnZhbElkMiwgcmVuZGVyQ291bnRlciwgY3VycmVudFRpbWUsXG4gICAgfSkpO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tNYWtlcigpO1xuICAgIGNvbnN0IGluY3JlYXNlID0gKCkgPT4gKytpbnRlcnZhbENvdW50O1xuICAgIGNvbnN0IHN0YXJ0SW50ZXJ2YWwgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygn8J+foiBpbnRlcnZhbCB0ZXN0IDAgc3RhcnRlZC4uLicpO1xuICAgICAgICB0cmFja1RpbWUoKTtcbiAgICAgICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGluY3JlYXNlKCk7XG4gICAgICAgIH0pLCB0ZXN0MGludGVydmFsKTtcbiAgICB9O1xuICAgIGNvbnN0IHN0b3BJbnRlcnZhbCA9ICgpID0+IHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkMik7XG4gICAgICAgIGludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGludGVydmFsSWQyID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zb2xlLmluZm8oJ/Cfm5EgaW50ZXJ2YWwgdGVzdCAwIHN0b3BwZWQnKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRyYWNrVGltZSgpIHtcbiAgICAgICAgY3VycmVudFRpbWUgPSAwO1xuICAgICAgICBpbnRlcnZhbElkMiA9IHNldEludGVydmFsKGNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgKyA1MDA7XG4gICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPj0gdGVzdDBpbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIDUwMCk7XG4gICAgICAgIGNvbnNvbGUuaW5mbygn4pa277iPIGludGVydmFsIHN0YXJ0ZWQnKTtcbiAgICB9XG4gICAgY29uc3QgdG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICBpZiAoaW50ZXJ2YWxJZCB8fCBpbnRlcnZhbElkMikge1xuICAgICAgICAgICAgc3RvcEludGVydmFsKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnRJbnRlcnZhbCgpO1xuICAgIH07XG4gICAgY29uc3QgZGVsYXlJbmNyZWFzZSA9ICgpID0+IHNldFRpbWVvdXQoY2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lICsgMjAwO1xuICAgIH0pLCAxMDAwKTtcbiAgICBvbkluaXQoc3RhcnRJbnRlcnZhbCk7XG4gICAgb25EZXN0cm95KHN0b3BJbnRlcnZhbCk7XG4gICAgKytyZW5kZXJDb3VudGVyO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MzgwMDhbMF0sIHRlc3QwaW50ZXJ2YWwsIGludGVydmFsSWQsIGluY3JlYXNlLCBpbnRlcnZhbENvdW50LCByZW5kZXJDb3VudGVyLCB0ZXN0MGludGVydmFsLCBjdXJyZW50VGltZSwgY3VycmVudFRpbWUsIHRvZ2dsZSwgaW50ZXJ2YWxJZCB8fCBpbnRlcnZhbElkMiA/ICdyZWQnIDogJ2dyZWVuJywgZGVsYXlJbmNyZWFzZSk7XG59KTtcbmV4cG9ydCBjb25zdCBpbnRlcnZhbFRlc3RlcjEgPSB0YWcoKCkgPT4ge1xuICAgIGxldCBpbnRlcnZhbENvdW50ID0gMDtcbiAgICBsZXQgaW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgaW50ZXJ2YWxJZDIgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHJlbmRlckNvdW50ZXIgPSAwO1xuICAgIGxldCBjdXJyZW50VGltZSA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgaW50ZXJ2YWxDb3VudCwgaW50ZXJ2YWxJZCwgaW50ZXJ2YWxJZDIsIHJlbmRlckNvdW50ZXIsIGN1cnJlbnRUaW1lXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgaW50ZXJ2YWxDb3VudCwgaW50ZXJ2YWxJZCwgaW50ZXJ2YWxJZDIsIHJlbmRlckNvdW50ZXIsIGN1cnJlbnRUaW1lXG4gICAgfSkpO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tNYWtlcigpO1xuICAgIGNvbnN0IGluY3JlYXNlID0gKCkgPT4gKytpbnRlcnZhbENvdW50O1xuICAgIGZ1bmN0aW9uIHRyYWNrVGltZSgpIHtcbiAgICAgICAgY3VycmVudFRpbWUgPSAwO1xuICAgICAgICBpbnRlcnZhbElkMiA9IHNldEludGVydmFsKGNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gY3VycmVudFRpbWUgKyA1MDA7XG4gICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPj0gdGVzdDFpbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIDUwMCk7XG4gICAgfVxuICAgIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZDIpO1xuICAgICAgICBpbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgICAgICBpbnRlcnZhbElkMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc29sZS5pbmZvKCfwn5S0IGludGVydmFsIDEgc3RvcHBlZCcpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gdG9nZ2xlSW50ZXJ2YWwoKSB7XG4gICAgICAgIGlmIChpbnRlcnZhbElkKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuaW5mbygn8J+foiBpbnRlcnZhbCB0ZXN0IDEgc3RhcnRlZC4uLicpO1xuICAgICAgICB0cmFja1RpbWUoKTtcbiAgICAgICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGluY3JlYXNlKCk7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ3Nsb3cgaW50ZXJ2YWwgcmFuJyk7XG4gICAgICAgIH0pLCB0ZXN0MWludGVydmFsKTtcbiAgICB9XG4gICAgb25Jbml0KHRvZ2dsZUludGVydmFsKTtcbiAgICBvbkRlc3Ryb3koZGVzdHJveSk7XG4gICAgKytyZW5kZXJDb3VudGVyO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MzgwMDhbMV0sIHRlc3QxaW50ZXJ2YWwsIGludGVydmFsSWQsIGluY3JlYXNlLCBpbnRlcnZhbENvdW50LCByZW5kZXJDb3VudGVyLCB0ZXN0MWludGVydmFsLCBjdXJyZW50VGltZSwgY3VycmVudFRpbWUsIHRvZ2dsZUludGVydmFsLCBpbnRlcnZhbElkID8gJ3JlZCcgOiAnZ3JlZW4nKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczgzODAwODogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0taW50ZXJ2YWxEZWJ1Zy5qcy0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbnRlcnZhbCB0eXBlIDEgYXQgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJtc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImludGVydmFsSWQ6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwicmFuZ2VcIl0sIFtcIm1pblwiLCBcIjBcIl0sIFtcIm1heFwiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXSwgW1wic3RlcFwiLCBcIjFcIl0sIFtcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiLS1cIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIG51bGxdLCBbXCJzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yXCIsIHsgXCJ0YWdKc1ZhclwiOiA5IH0sIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGFydC9zdG9wXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRlbGF5IGluY3JlYXNlIGN1cnJlbnRUaW1lXCIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW50ZXJ2YWwgdHlwZSAyIHdpdGggXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJtc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImludGVydmFsSWQ6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwicmFuZ2VcIl0sIFtcIm1pblwiLCBcIjBcIl0sIFtcIm1heFwiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXSwgW1wic3RlcFwiLCBcIjFcIl0sIFtcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiLS1cIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIG51bGxdLCBbXCJzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yXCIsIHsgXCJ0YWdKc1ZhclwiOiA5IH0sIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGFydC9zdG9wXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBpbnRlcnZhbFRlc3RlcjAsIGludGVydmFsVGVzdGVyMSB9IGZyb20gXCIuL2ludGVydmFsRGVidWdcIjtcbmltcG9ydCB7IGh0bWwsIHRhZywgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBmeCB9IGZyb20gXCJ0YWdnZWRqcy1hbmltYXRlLWNzc1wiO1xuZXhwb3J0IGNvbnN0IHRhZ0RlYnVnID0gdGFnKCgpID0+IHtcbiAgICBsZXQgX2ZpcnN0U3RhdGUgPSAndGFnSnNEZWJ1Zy5qcyc7XG4gICAgbGV0IHNob3dJbnRlcnZhbHMgPSBmYWxzZTtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgX2ZpcnN0U3RhdGUsIHNob3dJbnRlcnZhbHMsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgX2ZpcnN0U3RhdGUsIHNob3dJbnRlcnZhbHMsIHJlbmRlckNvdW50IH0pKTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3NzUwMFswXSwgKCkgPT4gc2hvd0ludGVydmFscyA9ICFzaG93SW50ZXJ2YWxzLCBzaG93SW50ZXJ2YWxzICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczc3NTAwWzFdLCBmeCgpLCBpbnRlcnZhbFRlc3RlcjAoKSwgaW50ZXJ2YWxUZXN0ZXIxKCkpKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczc3NTAwOiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS0gdGFnRGVidWcuanMgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXg6MiAyIDIwZW1cIl0sIFtcImlkXCIsIFwiZGVidWctaW50ZXJ2YWxzXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkludGVydmFsIFRlc3RpbmdcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoaWRlL3Nob3dcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1t7IFwidGFnSnNWYXJcIjogMCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyB0YWcsIGh0bWwgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHVzZUhhc2hSb3V0ZXIgfSBmcm9tIFwiLi90b2RvL0hhc2hSb3V0ZXIuZnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VNZW51TmFtZSgpIHtcbiAgICBjb25zdCByb3V0ZXIgPSB1c2VIYXNoUm91dGVyKCk7XG4gICAgY29uc3Qgcm91dGUgPSByb3V0ZXIucm91dGU7XG4gICAgY29uc3QgcGF0aG5hbWUgPSByb3V0ZXIubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgaWYgKHBhdGhuYW1lICYmIHJvdXRlID09PSAnY291bnRlcnMvJykge1xuICAgICAgICByZXR1cm4gJ2NvdW50ZXJzJztcbiAgICB9XG4gICAgaWYgKHBhdGhuYW1lICYmIHJvdXRlID09PSAnY29udGVudC8nKSB7XG4gICAgICAgIHJldHVybiAnY29udGVudCc7XG4gICAgfVxuICAgIGNvbnN0IGlzSXNvbGF0ZWQgPSBwYXRobmFtZS5lbmRzV2l0aCgnaXNvbGF0ZWQuaHRtbCcpO1xuICAgIGlmIChpc0lzb2xhdGVkKSB7XG4gICAgICAgIHJldHVybiAnaXNvbGF0ZWQnO1xuICAgIH1cbiAgICBjb25zdCBpc1RvZG8gPSBwYXRobmFtZS5pbmNsdWRlcygndG9kby93d3cnKTtcbiAgICBpZiAoaXNUb2RvKSB7XG4gICAgICAgIHJldHVybiAndG9kbyc7XG4gICAgfVxuICAgIHJldHVybiAnaG9tZSc7XG59XG5leHBvcnQgY29uc3QgbWVudSA9ICgpID0+IHRhZy51c2UgPSAobWVudU5hbWUgPSB1c2VNZW51TmFtZSgpKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMjA4MjlbMF0sIG1lbnVOYW1lID09PSAnaG9tZScgPyAnLjUnIDogJzEnLCBtZW51TmFtZSA9PT0gJ2hvbWUnID8gdW5kZWZpbmVkIDogJyMvJywgbWVudU5hbWUgPT09ICdpc29sYXRlZCcgPyAnLjUnIDogJzEnLCBtZW51TmFtZSA9PT0gJ2lzb2xhdGVkJyA/IHVuZGVmaW5lZCA6ICdpc29sYXRlZC5odG1sJywgbWVudU5hbWUgPT09ICdjb3VudGVycycgPyAnLjUnIDogJzEnLCBtZW51TmFtZSA9PT0gJ2NvdW50ZXJzJyA/IHVuZGVmaW5lZCA6ICcjY291bnRlcnMvJywgbWVudU5hbWUgPT09ICdjb250ZW50JyA/ICcuNScgOiAnMScsIG1lbnVOYW1lID09PSAnY29udGVudCcgPyB1bmRlZmluZWQgOiAnI2NvbnRlbnQvJywgbWVudU5hbWUgPT09ICd0b2RvJyA/ICcuNScgOiAnMScsIG1lbnVOYW1lID09PSAndG9kbycgPyB1bmRlZmluZWQgOiAndG9kby93d3cvJyk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTIwODI5OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlLm9wYWNpdHlcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgXCJzdHlsZVwiXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhvbWVcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDstJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS5vcGFjaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIFwic3R5bGVcIl0sIFtcImhyZWZcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpc29sYXRlZFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOy0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlLm9wYWNpdHlcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgXCJzdHlsZVwiXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvdW50ZXJzXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7LSZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGUub3BhY2l0eVwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBcInN0eWxlXCJdLCBbXCJocmVmXCIsIHsgXCJ0YWdKc1ZhclwiOiA3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29udGVudFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOy0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlLm9wYWNpdHlcIiwgeyBcInRhZ0pzVmFyXCI6IDggfSwgXCJzdHlsZVwiXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZG8gYXBwXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7LSZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiaHJlZlwiLCBcImh0dHBzOi8vZ2l0aHViLmNvbS9BY2tlckFwcGxlL3RhZ2dlZGpzXCJdLCBbXCJ0YXJnZXRcIiwgXCJfYmxhbmtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZXBvXCIgfV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIG9uSW5pdCwgc3RhdGUsIFN1YmplY3QsIGNhbGxiYWNrTWFrZXIsIG9uRGVzdHJveSwgc3RhdGVzLCBzdWJzY3JpYmUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlcmVkU2VjdGlvbnMgfSBmcm9tIFwiLi9yZW5kZXJlZFNlY3Rpb25zLnRhZ1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnRcIjtcbmltcG9ydCB7IHNlY3Rpb25TZWxlY3RvciB9IGZyb20gXCIuL3NlY3Rpb25TZWxlY3Rvci50YWdcIjtcbmltcG9ydCB7IHRhZ0RlYnVnIH0gZnJvbSBcIi4vdGFnSnNEZWJ1Z1wiO1xuaW1wb3J0IHsgcnVuVGVzdHMgfSBmcm9tIFwiLi90ZXN0c1wiO1xuaW1wb3J0IHsgbWVudSwgdXNlTWVudU5hbWUgfSBmcm9tIFwiLi9tZW51LnRhZ1wiO1xuaW1wb3J0IHsgaW5uZXJDb3VudGVyQ29udGVudCB9IGZyb20gXCIuL2NvdW50ZXJzRGVidWdcIjtcbmltcG9ydCB7IGNvbnRlbnQgfSBmcm9tIFwiLi9Db250ZW50RGVidWcudGFnXCI7XG5pbXBvcnQgeyBhbmltYXRlV3JhcCB9IGZyb20gXCJ0YWdnZWRqcy1hbmltYXRlLWNzc1wiO1xuY29uc3QgYXBwRGF0ZSA9IERhdGUubm93KCk7XG5mdW5jdGlvbiBhcHBGdW4oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJ1bkFwcEZ1bihtZW51TmFtZSA9IHVzZU1lbnVOYW1lKCkpIHtcbiAgICAgICAgbGV0IHNob3dIaWRlID0gZmFsc2U7XG4gICAgICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvd0hpZGUgfV0gPSBnZXQoeyBzaG93SGlkZSB9KSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn42SIEFwcCByZW5kZXJlZCcsIGFwcERhdGUpO1xuICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjgwNTAxNFswXSwgMiArIDIsICgpID0+IHNob3dIaWRlID0gIXNob3dIaWRlLCBzaG93SGlkZSwgc2hvd0hpZGUgJiYgZnhUYWcoKSwgbWVudSgpLCBtZW51TmFtZSA9PT0gJ2hvbWUnICYmIGhvbWVQYWdlKCksIG1lbnVOYW1lID09PSAnY291bnRlcnMnICYmIGlubmVyQ291bnRlckNvbnRlbnQoKSwgbWVudU5hbWUgPT09ICdjb250ZW50JyAmJiBjb250ZW50KCkpO1xuICAgIH07XG59XG5hcHBGdW4uaXNBcHAgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IEFwcCA9IHRhZyhhcHBGdW4pO1xuZXhwb3J0IGNvbnN0IGhvbWVQYWdlID0gKCkgPT4gdGFnLnVzZSA9IChzaG93U2VjdGlvbnMgPSB0cnVlLCBhcHBDb3VudGVyID0gMCwgdG9nZ2xlVmFsdWUgPSBmYWxzZSwgdGVzdFRpbWVvdXQgPSBudWxsLCBhcHBDb3VudGVyU3ViamVjdCA9IHN0YXRlKCgpID0+IG5ldyBTdWJqZWN0KGFwcENvdW50ZXIpKSwgcmVuZGVyQ291bnQgPSAwLCB0ZXN0RW1vamkgPSAn8J+fpicsIF8gPSBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgIHNob3dTZWN0aW9ucyxcbiAgICAgICAgYXBwQ291bnRlcixcbiAgICAgICAgdG9nZ2xlVmFsdWUsXG4gICAgICAgIHRlc3RUaW1lb3V0LFxuICAgICAgICByZW5kZXJDb3VudCxcbiAgICAgICAgdGVzdEVtb2ppLFxuICAgIH1dID0gZ2V0KHtcbiAgICBzaG93U2VjdGlvbnMsXG4gICAgYXBwQ291bnRlcixcbiAgICB0b2dnbGVWYWx1ZSxcbiAgICB0ZXN0VGltZW91dCxcbiAgICByZW5kZXJDb3VudCxcbiAgICB0ZXN0RW1vamksXG59KSksIHRvZ2dsZSA9ICgpID0+IHtcbiAgICB0b2dnbGVWYWx1ZSA9ICF0b2dnbGVWYWx1ZTtcbn0pID0+IHtcbiAgICAvLyBzdGF0ZXMoZ2V0ID0+ICh7IGFwcENvdW50ZXIgfSA9IGdldCh7IGFwcENvdW50ZXIgfSkpKVxuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBvblRlc3RDb21wbGV0ZSA9IGNhbGxiYWNrcyhzdWNjZXNzID0+IHRlc3RFbW9qaSA9IHN1Y2Nlc3MgPyAn4pyFJyA6ICfinYwnKTtcbiAgICAvLyBpZiBJIGFtIGRlc3Ryb3llZCBiZWZvcmUgbXkgdGVzdCBydW5zLCBwcmV2ZW50IHRlc3QgZnJvbSBydW5uaW5nXG4gICAgb25EZXN0cm95KGZ1bmN0aW9uIGFwcE9uRGVzdHJveSgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRlc3RUaW1lb3V0KTtcbiAgICAgICAgdGVzdFRpbWVvdXQgPSBudWxsO1xuICAgIH0pO1xuICAgIG9uSW5pdChmdW5jdGlvbiBhcHBPbkluaXQoKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnMe+4j+KDoyBhcHAgaW5pdCBzaG91bGQgb25seSBydW4gb25jZScpO1xuICAgICAgICBmaXJlVGVzdGluZyhmYWxzZSwgb25UZXN0Q29tcGxldGUpO1xuICAgICAgICBhcHBDb3VudGVyU3ViamVjdC5zdWJzY3JpYmUoY2FsbGJhY2tzKHggPT4gYXBwQ291bnRlciA9IHgpKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBmaXJlVGVzdGluZyhtYW51YWwgPSB0cnVlLCBvbkNvbXBsZXRlID0gKCkgPT4gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRlc3RFbW9qaSA9ICfwn5+mJztcbiAgICAgICAgY29uc3Qgd2FpdEZvciA9IDIwMDA7XG4gICAgICAgIHRlc3RUaW1lb3V0ID0gc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCfwn4+DIPCfj4PigI3imYDvuI8g8J+Pg+KAjeKZgu+4jyBSdW5uaW5nIHRlc3RzLi4uIPCfj4PigI3imYLvuI/igI3inqHvuI8g8J+Pg+KAjeKZgO+4j+KAjeKeoe+4jyDwn4+D4oCN4p6h77iPeCcpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcnVuVGVzdHMoKTtcbiAgICAgICAgICAgIG9uQ29tcGxldGUocmVzdWx0KTtcbiAgICAgICAgICAgIGlmICghbWFudWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGFsZXJ0KCfinIUgYWxsIGFwcCB0ZXN0cyBwYXNzZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGVydCgn4p2MIHRlc3RzIGZhaWxlZC4gU2VlIGNvbnNvbGUgZm9yIG1vcmUgZGV0YWlscycpO1xuICAgICAgICB9LCB3YWl0Rm9yKTsgLy8gY2F1c2UgZGVsYXkgdG8gYmUgc2VwYXJhdGUgZnJvbSByZW5kZXJzXG4gICAgfVxuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI4MDUwMTRbMV0sICgpID0+IGZpcmVUZXN0aW5nKHRydWUsIG9uVGVzdENvbXBsZXRlKSwgdGVzdEVtb2ppLCAoKSA9PiB7XG4gICAgICAgIGFwcENvdW50ZXJTdWJqZWN0Lm5leHQoYXBwQ291bnRlciArIDEpO1xuICAgIH0sICgpID0+ICsrYXBwQ291bnRlciwgYXBwQ291bnRlciwgc3Vic2NyaWJlKGFwcENvdW50ZXJTdWJqZWN0KSwgYXBwQ291bnRlclN1YmplY3QudmFsdWUsICgpID0+IHRvZ2dsZSgpLCB0b2dnbGVWYWx1ZSwgcmVuZGVyQ291bnREaXYoeyBuYW1lOiAnYXBwJywgcmVuZGVyQ291bnQgfSksIHN1YnNjcmliZShTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JCksIHNlY3Rpb25TZWxlY3RvcigpLCAoKSA9PiBzaG93U2VjdGlvbnMgPSAhc2hvd1NlY3Rpb25zLCBzaG93U2VjdGlvbnMgJiYgcmVuZGVyZWRTZWN0aW9ucyhhcHBDb3VudGVyU3ViamVjdCksIHRhZ0RlYnVnKCkpO1xufTtcbmNvbnN0IGZ4VGFnID0gdGFnKCgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI4MDUwMTRbMl0sIGFuaW1hdGVXcmFwKCkuaW5uZXJIVE1MID0gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjgwNTAxNFszXSkpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyODA1MDE0OiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1hcHAuanMtLT5cIiB9LCB7IFwibm5cIjogXCJoMVwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImgxLWFwcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfj7fvuI8gVGFnZ2VkSnMgLSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNob3cvaGlkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXFxuXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfV0sIFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJydW4gdGVzdHMgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZGlyZWN0IGFwcCB0ZXN0c1wiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLXN1YmplY3QtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIgKythcHAgc3ViamVjdFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SICsrYXBwXCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIkJmx0O1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1zdWJqZWN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZndDtcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIkLnZhbHVlJmx0O1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1zdWJqZWN0LXZhbHVlLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZndDtcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtdGVzdFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2dnbGUgdGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6bm93cmFwO2dhcDoxZW07anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKHN1YnNjcmlwdGlvbiBjb3VudDogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKVwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wibmFtZVwiLCBcInRvcFwiXSwgW1wiaWRcIiwgXCJ0b3BcIl1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRhZ0RlYnVnLWZ4LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidG9nZ2xlIHNlY3Rpb25zXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTQgfV0gfV0sIFt7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiaHJcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBIZWxsbyBhbmltYXRlZCB3b3JsZFxcbiAgXCIgfV1dIH07XG4iLCJpbXBvcnQgeyBvdXRwdXRTZWN0aW9ucyB9IGZyb20gXCIuL3JlbmRlcmVkU2VjdGlvbnMudGFnXCI7XG4vLyBpbXBvcnQgeyBtb2NoYUxvYWRlZCB9IGZyb20gXCIuL3Rlc3RpbmcvaW5pdGlhbGl6ZS1tb2NoYS1jaGFpXCIgLy8gTm8gbG9uZ2VyIG5lZWRlZFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blRlc3RzKCkge1xuICAgIGNvbnNvbGUubG9nKCfwn4+DIHJ1blRlc3RzOiBJbXBvcnRpbmcgdGVzdHMuLi4nKTtcbiAgICBhd2FpdCBpbXBvcnQoJy4vYmFzaWMudGVzdCcpOyAvLyBub3QgaW4gZ2gtcGFnZXNcbiAgICBhd2FpdCBpbXBvcnQoJy4vc3RhcnQudGVzdC5qcycpO1xuICAgIC8vIGNhbm5vdCBiZSBkeW5hbWljIGZpbGUgbmFtZXMsIG11c3QgYmUgaGFuZCB0eXBlZCBvdXRcbiAgICBhd2FpdCBpbXBvcnQoJy4vY29udGVudC50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL2R1bXBDb250ZW50LnRlc3QnKTtcbiAgICBhd2FpdCBpbXBvcnQoJy4vY291bnRlcnMudGVzdCcpO1xuICAgIGF3YWl0IGltcG9ydCgnLi9wcm9wcy50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL3RhZ1N3aXRjaC50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL2FycmF5cy50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL21pcnJvci50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL29uZVJlbmRlci50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL2Z1bkluUHJvcHMudGVzdCcpO1xuICAgIGF3YWl0IGltcG9ydCgnLi9hdHRyaWJ1dGVzLnRlc3QnKTtcbiAgICBhd2FpdCBpbXBvcnQoJy4vZGVzdHJveXMudGVzdCcpO1xuICAgIGF3YWl0IGltcG9ydCgnLi93YXRjaC50ZXN0Jyk7XG4gICAgYXdhaXQgaW1wb3J0KCcuL2NoaWxkLnRlc3QnKTtcbiAgICBhd2FpdCBpbXBvcnQoJy4vcHJvdmlkZXJzLnRlc3QnKTtcbiAgICBhd2FpdCBpbXBvcnQoJy4vdG9kb3MudGVzdCcpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTsgLy9wZXJmb3JtYW5jZS5ub3coKVxuICAgICAgICAvLyBSdW4gdGVzdHMgd2l0aCBvdXIgYnJvd3NlciB0ZXN0IHJ1bm5lclxuICAgICAgICBpZiAod2luZG93Lm1vY2hhKSB7XG4gICAgICAgICAgICAvLyBMZWdhY3kgTW9jaGEgc3VwcG9ydCBpZiBzdGlsbCBhdmFpbGFibGVcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubW9jaGEucnVuKChmYWlsdXJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGAke2ZhaWx1cmVzfSB0ZXN0KHMpIGZhaWxlZGApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVXNlIG91ciBjdXN0b20gYnJvd3NlciB0ZXN0IHJ1bm5lclxuICAgICAgICAgICAgY29uc3QgeyBleGVjdXRlQnJvd3NlclRlc3RzIH0gPSBhd2FpdCBpbXBvcnQoJy4vdGVzdGluZy90ZXN0UnVubmVyJyk7XG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgZXhlY3V0ZUJyb3dzZXJUZXN0cygpO1xuICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXN0cyBmYWlsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0OyAvLyBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0XG4gICAgICAgIGNvbnNvbGUuaW5mbyhg4pyFIGFsbCB0ZXN0cyBwYXNzZWQgaW4gJHt0aW1lfW1zYCk7XG4gICAgICAgIC8vIGNsb3NlIGFuZCBoaWRlIGFsbCBzZWN0aW9uc1xuICAgICAgICBvdXRwdXRTZWN0aW9ucy5tYXAoc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VjdGlvbl8nICsgc2VjdGlvbi52aWV3KTtcbiAgICAgICAgICAgIGVsbS5jbGljaygpOyAvLyBjYXVzZSBoaWRlIGNvbnRlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIHRlc3RzIGZhaWxlZDogJyArIGVycm9yLm1lc3NhZ2UsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHRhZywgaHRtbCwgb25Jbml0IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBzYXZlU2NvcGVkU3RvcmFnZSwgc3RvcmFnZSB9IGZyb20gXCIuL3NlY3Rpb25TZWxlY3Rvci50YWdcIjtcbmltcG9ydCB7IHJ1blRlc3RpbmcgfSBmcm9tIFwiLi9ydW5UZXN0aW5nLmZ1bmN0aW9uXCI7XG5leHBvcnQgY29uc3QgYXV0b1Rlc3RpbmdDb250cm9scyA9ICh0ZXN0cywgcnVuU3RhcnRFbmRUZXN0cykgPT4gdGFnLnVzZSA9IChfID0gb25Jbml0KCgpID0+IHtcbiAgICBpZiAoc3RvcmFnZS5hdXRvVGVzdCkge1xuICAgICAgICBydW5UZXN0aW5nKGZhbHNlLCB0ZXN0cywgcnVuU3RhcnRFbmRUZXN0cyk7XG4gICAgfVxufSkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczYyOTQ3WzBdLCBzdG9yYWdlLmF1dG9UZXN0ICYmICdjaGVja2VkJywgdG9nZ2xlQXV0b1Rlc3RpbmcsICgpID0+IHJ1blRlc3RpbmcodHJ1ZSwgdGVzdHMsIHJ1blN0YXJ0RW5kVGVzdHMpKTtcbmZ1bmN0aW9uIHRvZ2dsZUF1dG9UZXN0aW5nKCkge1xuICAgIHN0b3JhZ2UuYXV0b1Rlc3QgPSBzdG9yYWdlLmF1dG9UZXN0ID0gIXN0b3JhZ2UuYXV0b1Rlc3Q7XG4gICAgc2F2ZVNjb3BlZFN0b3JhZ2UoKTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M2Mjk0NzogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIGF1dG8gdGVzdGluZyBcIiB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiY2hlY2tib3hcIl0sIFt7IFwidGFnSnNWYXJcIjogMCB9XSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJydW4gdGVzdHNcIiB9XSB9XV0gfTtcbiIsImltcG9ydCB7IFN1YmplY3QsIGNhbGxiYWNrTWFrZXIsIGh0bWwsIG9uSW5pdCwgdGFnLCBzdGF0ZSwgc3RhdGVzLCBzdWJzY3JpYmUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBhY3RpdmF0ZSwgc2VjdGlvblNlbGVjdG9yLCB2aWV3Q2hhbmdlZCB9IGZyb20gXCIuL3NlY3Rpb25TZWxlY3Rvci50YWdcIjtcbmltcG9ydCB7IHJlbmRlcmVkU2VjdGlvbnMgfSBmcm9tIFwiLi9yZW5kZXJlZFNlY3Rpb25zLnRhZ1wiO1xuaW1wb3J0IHsgYXV0b1Rlc3RpbmdDb250cm9scyB9IGZyb20gXCIuL2F1dG9UZXN0aW5nQ29udHJvbHMudGFnXCI7XG5pbXBvcnQgeyBtZW51IH0gZnJvbSBcIi4vbWVudS50YWdcIjtcbmltcG9ydCB7IHVzZUhhc2hSb3V0ZXIgfSBmcm9tIFwiLi90b2RvL0hhc2hSb3V0ZXIuZnVuY3Rpb25cIjtcbmV4cG9ydCBkZWZhdWx0ICgpID0+IHRhZy51c2UgPSAoXyA9IHN0YXRlKCdpc29sYXRlZCBhcHAgc3RhdGUnKSwgcmVuZGVyQ291bnQgPSAwLCBhcHBDb3VudGVyID0gMCwgYXBwQ291bnRlclN1YmplY3QgPSBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdChhcHBDb3VudGVyKSksIHRvZ2dsZVZhbHVlID0gZmFsc2UsIF9fID0gc3RhdGVzKGdldCA9PiBbeyByZW5kZXJDb3VudCwgYXBwQ291bnRlciwgdG9nZ2xlVmFsdWUgfV0gPSBnZXQoeyByZW5kZXJDb3VudCwgYXBwQ291bnRlciwgdG9nZ2xlVmFsdWUgfSkpLCB0b2dnbGUgPSAoKSA9PiB0b2dnbGVWYWx1ZSA9ICF0b2dnbGVWYWx1ZSwgY2FsbGJhY2sgPSBjYWxsYmFja01ha2VyKCkpID0+IHtcbiAgICBjb25zdCByb3V0ZSA9IHVzZUhhc2hSb3V0ZXIoKS5yb3V0ZS5zcGxpdCgnLycpXG4gICAgICAgIC5tYXAoeCA9PiB4LnRyaW0oKSlcbiAgICAgICAgLmZpbHRlcihoYXNMZW5ndGggPT4gaGFzTGVuZ3RoLmxlbmd0aCk7XG4gICAgbGV0IHZpZXdUeXBlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAocm91dGUubGVuZ3RoKSB7XG4gICAgICAgIHZpZXdUeXBlcyA9IHJvdXRlO1xuICAgIH1cbiAgICBvbkluaXQoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmluZm8oJzHvuI/ig6MgYXBwIGluaXQgc2hvdWxkIG9ubHkgcnVuIG9uY2UnKTtcbiAgICAgICAgYXBwQ291bnRlclN1YmplY3Quc3Vic2NyaWJlKGNhbGxiYWNrKHggPT4ge1xuICAgICAgICAgICAgYXBwQ291bnRlciA9IHg7XG4gICAgICAgIH0pIC8vIGEgbGV0IHZhcmlhYmxlIGlzIGV4cGVjdGVkIHRvIG1haW50YWluIG5ldyB2YWx1ZSBvdmVyIHJlbmRlciBjeWNsZXMgZm9yd2FyZFxuICAgICAgICApO1xuICAgIH0pO1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEwNTQ1NzBbMF0sIHJvdXRlLCBtZW51KCksICgpID0+IHtcbiAgICAgICAgYXBwQ291bnRlclN1YmplY3QubmV4dChhcHBDb3VudGVyICsgMSk7XG4gICAgfSwgKCkgPT4ge1xuICAgICAgICArK2FwcENvdW50ZXI7XG4gICAgfSwgYXBwQ291bnRlciwgc3Vic2NyaWJlKGFwcENvdW50ZXJTdWJqZWN0KSwgYXBwQ291bnRlclN1YmplY3QudmFsdWUsIHRvZ2dsZSwgdG9nZ2xlVmFsdWUsIGF1dG9UZXN0aW5nQ29udHJvbHModmlld1R5cGVzKSwgcmVuZGVyQ291bnREaXYoeyBuYW1lOiAnYXBwJywgcmVuZGVyQ291bnQgfSksIHN1YnNjcmliZShTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JCksIHNlY3Rpb25TZWxlY3Rvcih2aWV3VHlwZXMpLCByZW5kZXJlZFNlY3Rpb25zKGFwcENvdW50ZXJTdWJqZWN0LCB2aWV3VHlwZXMpLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnaXNvbGF0ZWRBcHAnIH0pKTtcbn07XG52aWV3Q2hhbmdlZC5zdWJzY3JpYmUoKHsgdHlwZSwgY2hlY2tUZXN0aW5nIH0pID0+IHtcbiAgICBhY3RpdmF0ZSh0eXBlLCBjaGVja1Rlc3RpbmcpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTA1NDU3MDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0taXNvbGF0ZWRBcHAuanMtLT5cIiB9LCB7IFwibm5cIjogXCJoMVwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfj7fvuI8gVGFnZ2VkSnMgLSBpc29sYXRlZFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6LjZcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIobm8gSE1SKVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6LjZcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyb3V0ZTogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZGlyZWN0IGFwcCB0ZXN0c1wiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLXN1YmplY3QtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIgKythcHAgc3ViamVjdFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SICsrYXBwXCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIkJmx0O1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1zdWJqZWN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZndDtcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIkLnZhbHVlJmx0O1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1zdWJqZWN0LXZhbHVlLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZndDtcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtdGVzdFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2dnbGUgdGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA5IH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6bm93cmFwO2dhcDoxZW07anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIihzdWJzY3JpcHRpb24gY291bnQ6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0YWdEZWJ1Zy1meC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTQgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyB0YWdFbGVtZW50IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHAudGFnXCI7XG5pbXBvcnQgSXNvbGF0ZWRBcHAgZnJvbSBcIi4vaXNvbGF0ZWRBcHBcIjtcbmV4cG9ydCBmdW5jdGlvbiBydW4oKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhcHAnKVswXTtcbiAgICBjb25zdCBwYXRobmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICBjb25zdCBsb2NhdGlvblNwbGl0ID0gcGF0aG5hbWUuc3BsaXQoJy8nKS5maWx0ZXIoeCA9PiB4KTtcbiAgICBjb25zdCBsb2NhdGlvbiA9IGxvY2F0aW9uU3BsaXRbMF0/LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxvY2F0aW9uICYmIFsnaXNvbGF0ZWQuaHRtbCcsICdpbmRleC1zdGF0aWMuaHRtbCddLmluY2x1ZGVzKGxvY2F0aW9uKSkge1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIHRhZ0VsZW1lbnQoSXNvbGF0ZWRBcHAsIGVsZW1lbnQsIHsgdGVzdDogMSB9KTtcbiAgICAgICAgY29uc3QgZW5kID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgICBjb25zb2xlLmluZm8oYOKPse+4jyBpc29sYXRlZCByZW5kZXIgaW4gJHtlbmR9bXNgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgdGFnRWxlbWVudChBcHAsIGVsZW1lbnQsIHsgdGVzdDogMSB9KTtcbiAgICBjb25zdCBlbmQgPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgY29uc29sZS5pbmZvKGDij7HvuI8gcmVuZGVyZWQgaW4gJHtlbmR9bXNgKTtcbn1cbiJdLCJuYW1lcyI6WyJwaXBlRnJvbUFycmF5IiwiZm5zIiwibGVuZ3RoIiwiaWRlbnRpdHkiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJmbiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJ0aGlzIiwiX3N1YnNjcmliZSIsInByb3RvdHlwZSIsImxpZnQiLCJvcGVyYXRvciIsIm9ic2VydmFibGUiLCJzb3VyY2UiLCJvYnNlcnZlck9yTmV4dCIsImVycm9yIiwiY29tcGxldGUiLCJ2YWx1ZSIsIl90aGlzIiwic3Vic2NyaWJlciIsIlN1YnNjcmliZXIiLCJpc0Z1bmN0aW9uIiwibmV4dCIsImlzT2JzZXJ2ZXIiLCJlcnJvckNvbnRleHQiLCJfYSIsImFkZCIsImNhbGwiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsImVyciIsImZvckVhY2giLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInVuc3Vic2NyaWJlIiwicGlwZSIsIm9wZXJhdGlvbnMiLCJfaSIsImFyZ3VtZW50cyIsInRvUHJvbWlzZSIsIngiLCJjcmVhdGUiLCJjb25maWciLCJQcm9taXNlIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwidW5kZWZpbmVkIiwia2luZCIsIl9zdXBlciIsImRlc3RpbmF0aW9uIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJTYWZlU3Vic2NyaWJlciIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJjbG9zZWQiLCJTdWJzY3JpcHRpb24iLCJfYmluZCIsIkZ1bmN0aW9uIiwiYmluZCIsInRoaXNBcmciLCJDb25zdW1lck9ic2VydmVyIiwicGFydGlhbE9ic2VydmVyIiwiaGFuZGxlVW5oYW5kbGVkRXJyb3IiLCJjb250ZXh0XzEiLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJPYmplY3QiLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwicmVwb3J0VW5oYW5kbGVkRXJyb3IiLCJub3RpZmljYXRpb24iLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJ0aW1lb3V0UHJvdmlkZXIiLCJzZXRUaW1lb3V0Iiwibm9vcCIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJlcnJvcnMiLCJtZXNzYWdlIiwibWFwIiwiaSIsInRvU3RyaW5nIiwiam9pbiIsIm5hbWUiLCJpbml0aWFsVGVhcmRvd24iLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJlbXB0eSIsImVfMSIsImVfMiIsIl9iIiwiQXJyYXkiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJkb25lIiwicmVtb3ZlIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiZSIsIl9maW5hbGl6ZXJzXzEiLCJfZmluYWxpemVyc18xXzEiLCJmaW5hbGl6ZXIiLCJleGVjRmluYWxpemVyIiwicHVzaCIsImVfMl8xIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsImFyclJlbW92ZSIsIkVNUFRZIiwiRU1QVFlfU1VCU0NSSVBUSU9OIiwiaXNTdWJzY3JpcHRpb24iLCJvblVuaGFuZGxlZEVycm9yIiwiY29uY2F0QWxsIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwibWVyZ2VNYXAiLCJvYnNlcnZlT24iLCJzY2hlZHVsZXIiLCJkZWxheSIsImV4ZWN1dGVTY2hlZHVsZSIsInN1YnNjcmliZU9uIiwic2NoZWR1bGUiLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJFcnJvciIsIml0ZXJhdG9yIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRoZW4iLCJyZXN1bHQiLCJzY2hlZHVsZWQiLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwiaW5uZXJGcm9tIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwiaXNBcnJheUxpa2UiLCJzY2hlZHVsZUFycmF5IiwiaXNQcm9taXNlIiwic2NoZWR1bGVQcm9taXNlIiwiaXNBc3luY0l0ZXJhYmxlIiwiaXNJdGVyYWJsZSIsInNjaGVkdWxlSXRlcmFibGUiLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwiY29uY2F0IiwiYXJncyIsIm9iaiIsIm9icyIsIlR5cGVFcnJvciIsImFycmF5IiwicHJvbWlzZSIsImZyb21Bc3luY0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwicmVhZGFibGVTdHJlYW0iLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJsYWJlbCIsInRyeXMiLCJzZW50IiwicHJvY2VzcyIsImNhdGNoIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsInByb2plY3QiLCJpbmRleCIsInJlc3VsdFNlbGVjdG9yIiwiYSIsImIiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbEZpbmFsaXplciIsImJ1ZmZlciIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiX2xvb3BfMSIsImJ1ZmZlcmVkVmFsdWUiLCJzaGlmdCIsIm1lcmdlSW50ZXJuYWxzIiwiaGFuZGxlciIsInRpbWVvdXQiLCJkZWxlZ2F0ZSIsImFwcGx5IiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlIiwibGFzdCIsImFyciIsInBvcFNjaGVkdWxlciIsInBvcCIsIml0ZW0iLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlRXJyb3JDbGFzcyIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsImluc3RhbmNlIiwic3RhY2siLCJjb25zdHJ1Y3RvciIsImNvbnRleHQiLCJjYiIsImlzUm9vdCIsImVycm9yVGhyb3duIiwiY2FwdHVyZUVycm9yIiwicGFyZW50U3Vic2NyaXB0aW9uIiwid29yayIsInJlcGVhdCIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImlzU2NoZWR1bGVyIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJjb2x1bW5FZGl0b3IiLCJpbmNsdWRlZCIsImNvbHVtbk5hbWVzIiwiYWxsQ29sdW1uTmFtZXMiLCJlZGl0Rm9ybXVsYSIsIm1vdXNlT3ZlckVkaXRTaG93IiwiZWRpdCIsImZvcm11bGFzIiwiZ2V0IiwiZG9tIiwiYWxsU3RyaW5ncyIsImFsbFN0cmluZ3M0MzE2OTEiLCJldnQiLCJ1cGRhdGVGb3JtdWxhIiwiZm9ybXVsYSIsIm5ld0Zvcm11bGEiLCJ0YXJnZXQiLCJzdHJpbmdGb3JtdWxhIiwic2FuZGJveFJ1bkV2YWwiLCJ0aXRsZSIsImtleSIsInNyYyIsImN0eCIsIlByb3h5IiwiaGFzIiwic2FuZGJveEV2YWwiLCJpc05hTiIsIk1hdGgiLCJOdW1iZXIiLCJEYXRlIiwiYXJyYXlUYWJsZSIsInNob3dBbGwiLCJzaG93S2lkcyIsInRvZ2dsZUNvbHVtbkRpYWxvZyIsImZvcm1hdENoYW5nZSIsImFsbG93TWF4aW1pemUiLCJldmVyeVNpbXBsZVZhbHVlIiwiYWxsU3RyaW5nczEyMjE4NCIsInJvdyIsImR1bXAiLCJzaG93TGV2ZWxzIiwiaXNSb290RHVtcCIsImFycmF5RGlzcGxheSIsImFsbFN0cmluZ3MxNTIxMjciLCJpbnB1dE9iamVjdCIsImtleXNBcnJheSIsImZpbHRlcmVkT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJmaWx0ZXJPYmplY3RCeUtleXMiLCJwYXJhbVZhbHVlS2V5cyIsIm9uSGVhZGVyQ2xpY2siLCJhcnJheXNEaXNwbGF5IiwiYXJyYXlWaWV3IiwiYWxsIiwia2V5cyIsImdldEFsbEtleXMiLCJkZWZhdWx0Q29sdW1uTmFtZXMiLCJzaG93Q29sdW1uRGlhbG9nIiwidW5pcXVlSWQiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIm5vSW5pdCIsImVsZW1lbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2hvd01vZGFsIiwiY2xvc2UiLCJhcnJheVRhZyIsImFsbFN0cmluZ3M0NjMxNzEiLCJkdW1wQXJyYXkiLCJzaG93Iiwic2hvd0xvd2VyIiwibWF4aW1pemUiLCJtYXhpbWl6ZUlkIiwidG9nZ2xlTWF4aW1pemUiLCJkdW1wQm9keSIsImdldEhlYWRlciIsImFsbFN0cmluZ3M0NzkzNzAiLCJkaXNwbGF5T3B0aW9ucyIsImNvcHlUZXh0IiwidGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzZWxlY3QiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImV4ZWNDb21tYW5kIiwicmVtb3ZlQ2hpbGQiLCJkdW1wU2ltcGxlIiwiaXNMaW5rVmFsdWUiLCJzZWFyY2giLCJzbGljZSIsImRpc3BsYXlWYWx1ZSIsInNpbXBsZVZhbHVlIiwibGlua1ZhbHVlIiwiYWxsU3RyaW5nczI0Njk3OCIsImlzTGlrZU51bGwiLCJudW1iZXIiLCJ0b0xvY2FsZVN0cmluZyIsImdldExhcmdlTnVtYmVyVGl0bGUiLCJkb3duVGltZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJkdW1wT2JqZWN0IiwiY29udGludWVEdW1wIiwiZ2V0SGVhZCIsImFsbFN0cmluZ3M0NzAyNDQiLCJnZXREdW1wQm9keSIsImVudHJpZXMiLCJjb250cm9sUGFuZWwiLCJmb3JtYXQiLCJzaG93QWxsQ2hhbmdlIiwiYWxsU3RyaW5nczQ0MDgzMyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb3B5QXNKc29uVGV4dCIsInR5cGluZyIsImdldE9iamVjdFRlbXBsYXRlIiwiZHVtcENvdW50IiwiYWxsU3RyaW5nczMwNjE4OCIsImR1bXBDb250ZW50IiwidXNlckpzb25TdHJpbmciLCJyZW5kZXJDb3VudCIsInVzZXJKc29uIiwiYmFkRXZhbCIsInNhbXBsZUR1bXAiLCJ0ZXN0IiwiYW5vdGhlck9uZSIsImFycmF5VGVzdCIsImxvY2F0aW9uIiwic3RyZWV0IiwiYWxsU3RyaW5nczE4MzYzMiIsInBhcnNlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiU3ViamVjdCIsImN1cnJlbnRPYnNlcnZlcnMiLCJvYnNlcnZlcnMiLCJoYXNFcnJvciIsInRocm93bkVycm9yIiwic3ViamVjdCIsIkFub255bW91c1N1YmplY3QiLCJfdGhyb3dJZkNsb3NlZCIsImZyb20iLCJfYyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwiX2lubmVyU3Vic2NyaWJlIiwiYXNPYnNlcnZhYmxlIiwic3RhcnRXaXRoIiwidmFsdWVzIiwidGVzdFN0YWdnZXJCeSIsImNvbmNhdFN0eWxlcyIsImlubmVySFRNTCIsIndpZHRoIiwiYm9yZGVyQ29sb3IiLCJhbGxTdHJpbmdzMTM0MDY5NyIsImNvbnRlbnQiLCJzdWIwIiwic3ViMSIsInN1YkFycmF5IiwidnMwIiwidnMxIiwib3JhbmdlVG9nZ2xlIiwiYm9sZFRvZ2dsZSIsImNvdW50ZXIiLCJzdGFnZ2VyQnkiLCJzaG93SGlkZUZ4IiwiY291bnRzIiwiYWRkZWQiLCJyZW1vdmVkIiwiZngiLCJkdXJhdGlvbiIsInN0YWdnZXIiLCJhY2NlcHRJbm5lckhUTUwiLCJvdXRlckh0bWwiLCJpbm5lckh0bWxUYWciLCJudW1iZXJlZE5vUGFyZW50cyIsInBhc3NTdWJzY3JpcHRpb24iLCJubiIsImNoIiwidGMiLCJzdHlsZSIsInRlc3RIb3N0Iiwib25PZmYiLCJvYiIsIm51bWJlckZ1biIsIm51bWJlclRhZyIsImhpZGVTaG93IiwiZGVzdHJveUNvdW50IiwiY2xpY2tDb3VudGVyIiwiaG8iLCJvbkRlc3Ryb3kiLCJmeFRpbWUiLCJ0aW1lIiwicmVzIiwiaXQiLCJzaWduYWxBcnJheUNvdW50IiwiaW5pdGlhbENvdW50IiwiaW5uZXJUZXh0IiwidG9CZSIsInB1c2hCdG4iLCJjbGljayIsIm5ld0NvdW50IiwiY291bnRlckRpc3BsYXkiLCJjb3VudGVyVmFsdWUiLCJhcnJheUxlbmd0aCIsIml0ZW1Db3VudGVyIiwidG9CZURlZmluZWQiLCJxdWVyeVNlbGVjdG9yIiwibmV3Q291bnRlclZhbHVlIiwiYXN5bmMiLCJjdXJyZW50Q291bnQiLCJjb3VudCIsImJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5zaWRlQ291bnQiLCJpbnNpZGVFbG0iLCJpbnNpZGVEaXNwbGF5IiwiaW5kZXhWYWx1ZSIsIm91dHNpZGVFbG0iLCJvdXRzaWRlRGlzcGxheSIsIm91dHNpZGVWYWx1ZSIsIl9jbGljayIsInJlc3VsdDIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjbGFzc0xpc3QiLCJkeW5hbWljQ2xhc3NMaXN0IiwiYmdDb2xvckNoYW5nZXIiLCJzdWJzY3JpYmVCZ0NvbG9yIiwibXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yIiwidG9nZ2xlQ29sb3JCdG4iLCJjbGVhckNvbG9yQnRuIiwidG9nZ2xlQXR0cmlidXRlc0J0biIsInN1YnNjcmlwdGlvbnNDb3VudCIsImFmdGVySGlkZUNvdW50IiwiYWZ0ZXJTaG93Q291bnQiLCJzdHlsZU9iamVjdFRlc3QiLCJ0b2dnbGVCdG4iLCJjaGVja2VkIiwicGFkZGluZyIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsInN0eWxlUHJvcGVydHlUZXN0IiwiY29sb3IiLCJtYXJnaW5Ub3AiLCJ0b2dnbGVUZXN0IiwicHJvcHNUZXh0YXJlYSIsInJlcGxhY2UiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwiZGVzY3JpYmUiLCJydW5zIiwid2FpdEZvckVsZW1lbnRDb3VudCIsInNlbGVjdG9yIiwiZXhwZWN0ZWRDb3VudCIsIm1heFdhaXQiLCJzdGFydFRpbWUiLCJmb250V2VpZ2h0IiwiaHRtbCIsInBhcmVudE5vZGUiLCJ0cmltIiwid2FybiIsImluY3JlYXNlIiwiaGlkZVNob3dWYWx1ZSIsInRleHRDb250ZW50Iiwic3ViVmFsdWUiLCJib3JkZXJXaWR0aCIsImFuaW1hdGluZ0NvdW50IiwidG9CZUdyZWF0ZXJUaGFuIiwid2FpdEZvckFuaW1hdGlvbnNUb0NvbXBsZXRlIiwiaGlkZUFuaW1hdGluZ0NvdW50IiwiaG9zdERlc3Ryb3lDb3VudCIsImZpcnN0UnVuIiwiY291bnRlcklucHV0IiwiYmVmb3JlUmVuZGVyQ291bnQiLCJiZWZvcmVJbm5lclJlbmRlckNvdW50IiwiY3VycmVudFN1YnMiLCJwcmVJbml0Q291bnRlciIsInNwZWVkQ2xpY2tDb3VudFRlc3QiLCJwaXBlMCIsInBpcGVkU3ViRGlzcGxheSIsInN1YmplY3RDb3VudERpc3BsYXkiLCJjbGlja1NwZWVkQW1vdW50IiwiY291bnRlclF1ZXJ5IiwiZGlzcGxheVF1ZXJ5IiwiaW5jcmVhc2VPdXRlckNvdW50ZXJRdWVyeSIsImNsaWNrQ291bnQiLCJlbG0iLCJwcm9wQ291bnRlckJ0bkVsbSIsInRpbWVFbmQiLCJkaXNwbGF5UXVlcnlUaW1lIiwib2xkRGVzdHJveUNvdW50IiwicmVzdWx0RWxtcyIsInJlc3VsdEVsbXMyIiwiZnVuVXBkYXRlVmFsdWUiLCJjaGFuZ2VkIiwib3duZXJIVE1MIiwicGFyZW50SFRNTCIsImNoaWxkSFRNTCIsIm93bmVyTnVtIiwicGFyZW50TnVtIiwiY2hpbGROdW0iLCJwcm9wQ291bnRlciIsInN5bmNDb3VudGVyIiwiQWN0aW9uIiwic3RhdGUiLCJpbnRlcnZhbFByb3ZpZGVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQXN5bmNBY3Rpb24iLCJwZW5kaW5nIiwiaWQiLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwiX2lkIiwiZmx1c2giLCJfc2NoZWR1bGVyIiwiZXhlY3V0ZSIsIl9leGVjdXRlIiwiX2RlbGF5IiwiZXJyb3JWYWx1ZSIsImVycm9yZWQiLCJhY3Rpb25zIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVyQWN0aW9uQ3RvciIsImFzeW5jU2NoZWR1bGVyIiwiQXN5bmNTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJfYWN0aXZlIiwiYWN0aW9uIiwidGFrZSIsInNlZW4iLCJkZWxheVdoZW4iLCJkZWxheUR1cmF0aW9uU2VsZWN0b3IiLCJzdWJzY3JpcHRpb25EZWxheSIsIm1hcFRvIiwidGltZXIiLCJkdWVUaW1lIiwiaW50ZXJ2YWxPclNjaGVkdWxlciIsImludGVydmFsRHVyYXRpb24iLCJkdWUiLCJuIiwicGFyZW50RWxlbWVudCIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJoYXNSZWQiLCJib3JkZXJTdHlsZSIsImNoaWxkRWxlbWVudCIsImhhc0dyZWVuIiwiY29udGFpbnMiLCJwYXJlbnRDb2xvclNlbGVjdCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImJ1YmJsZXMiLCJoYXNCbHVlIiwiY2hpbGRDb2xvclNlbGVjdCIsImhhc1B1cnBsZSIsInJlbmRlckNvdW50RGl2IiwiYWxsU3RyaW5nczIxNTQxIiwiY3VycmVudCIsImFmdGVyQ2xpY2siLCJkcm9wZG93biIsIl9jaGFuZ2UiLCJjcmVhdGVFeHBlY3QiLCJhY3R1YWwiLCJjYWxsZXJMaW5lIiwic3BsaXQiLCJleHBlY3RlZCIsImVycm9yTWVzc2FnZSIsImZ1bGxNZXNzYWdlIiwidG9CZVVuZGVmaW5lZCIsInRvSGF2ZUxlbmd0aCIsImFjdHVhbFdpdGhMZW5ndGgiLCJub3QiLCJpc1ZpdGVzdCIsImdsb2JhbFRoaXMiLCJ2aXRlc3QiLCJ2aXRlc3RFeHBlY3QiLCJleHBlY3QiLCJtYXRjaGVycyIsInRvIiwiYmUiLCJncmVhdGVyVGhhbiIsImVsbUNvdW50IiwicXVlcnkiLCJxIiwiZm9jdXMiLCJjbGlja0J5SWQiLCJjbGlja09uZSIsImtleWRvd25PbiIsImtleUV2ZW50IiwiS2V5Ym9hcmRFdmVudCIsImtleXVwT24iLCJjaGFuZ2VPbmUiLCJjaGFuZ2VFbG0iLCJieUlkIiwiaHRtbEJ5SWQiLCJjYW5jZWxhYmxlIiwiY2hhbmdlRXZlbnQiLCJ0cmlnZ2VyQ2hhbmdlRWxtIiwic2xlZXAiLCJtcyIsImV4cGVjdEVsbUNvdW50IiwiZWxlbWVudHMiLCJmb3VuZCIsImV4cGVjdE1hdGNoZWRIdG1sIiwicXVlcmllcyIsImxhc3RIdG1sIiwiZXhwZWN0SFRNTCIsImV4cGVjdGVkSHRtbCIsInRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyIsImNvdW50ZXJCdXR0b25zIiwiY291bnRlckRpc3BsYXlzIiwiZWxlbWVudENvdW50RXhwZWN0ZWQiLCJjb3VudGVyQnV0dG9uU2VsZWN0IiwiY291bnRlckRpc3BsYXlTZWxlY3QiLCJ0ZXN0UXVhbnRpZmllciIsImluY3JlYXNlQ291bnRlciIsInRlc3RDb3VudGVyRWxlbWVudHMiLCJ0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyIsInNldHMiLCJidXR0b24wIiwiZGlzcGxheTAiLCJidXR0b25RdWVyeSIsImlwMCIsImJ1dHRvbjEiLCJkaXNwbGF5MSIsImRpc3BsYXkxRWxlbWVudCIsImlwMUNoZWNrIiwic2Vjb25kSW5jcmVhc2UiLCJiZWZvcmVFYWNoIiwiYWZ0ZXJFYWNoIiwiY3VycmVudFN1aXRlIiwic3VpdGVzIiwiTWFwIiwidGVzdFF1ZXVlIiwic3VpdGUiLCJzdWl0ZVRlc3RzIiwic2V0IiwicHJldmlvdXNTdWl0ZSIsImV4ZWN1dGVCcm93c2VyVGVzdHMiLCJwYXNzZWQiLCJmYWlsZWQiLCJmYWlsdXJlcyIsInRlc3RzQnlTdWl0ZSIsInN1aXRlTmFtZSIsInRlc3RzIiwiaW5kZW50IiwiZnVsbE5hbWUiLCJsaW5lIiwiY2xlYXIiLCJydW5Ub2RvU3BlZWRvbWV0ZXIiLCJuZXdUb2RvIiwiY2hlY2tib3hlcyIsImRlbGV0ZUJ1dHRvbnMiLCJudW1iZXJPZkl0ZW1zVG9BZGQiLCJ0b2RvSW5wdXQiLCJoYXNoIiwidG9kb1RvZ2dsZTIiLCJNb3VzZUV2ZW50IiwidmlldyIsImVkaXRJbnB1dCIsInNsb3dDb3VudCIsInN0YXJ0Q291bnQiLCJ0cnV0aFN0YXJ0Q291bnQiLCJkaXNwbGF5IiwidmFyaWFibGVQcmVmaXgiLCJ2YXJpYWJsZVN1ZmZpeCIsImlzU3BlY2lhbEF0dHIiLCJhdHRyTmFtZSIsInN0YXJ0c1dpdGgiLCJzcGVjaWFsQWN0aW9uIiwiaXNTcGVjaWFsQWN0aW9uIiwicGxhY2Vob2xkZXJSZWdleCIsIlJlZ0V4cCIsImdldFRhZ1ZhckluZGV4IiwiZnJhZ0ZpbmRBbnkiLCJvbmRvdWJsZWNsaWNrIiwicmVnZXhBdHRyIiwicmVnZXhUYWdPcmciLCJwYXJzZUhUTUwiLCJ2YWx1ZVBvc2l0aW9ucyIsImN1cnJlbnRFbGVtZW50IiwidmFsdWVJbmRleCIsInBvc2l0aW9uIiwicmVnZXhUYWciLCJyZW1vdmVDb21tZW50UmVnWCIsIm1hdGNoIiwicHJlcHJvY2Vzc1RhZ3NJbkNvbW1lbnRzIiwidGFnTWF0Y2giLCJleGVjIiwiZnVsbE1hdGNoIiwidGFnTmFtZSIsImF0dHJTdHJpbmciLCJpc0Nsb3NpbmdUYWciLCJpc1NlbGZDbG9zaW5nIiwiZW5kc1dpdGgiLCJ0ZXh0VmFyTWF0Y2hlcyIsInNwbGl0QnlUYWdWYXIiLCJmYWtlVGFnc1JlZ0V4IiwicHVzaFRleHRUbyIsImF0dHJpYnV0ZXMiLCJhdHRyTWF0Y2giLCJwYXJzZUF0dHJTdHJpbmciLCJhdCIsInRleHROb2RlIiwicHVzaFRvIiwicG9zdFByb2Nlc3NUYWdzSW5Db21tZW50cyIsImlucHV0U3RyaW5nIiwiZmlsdGVyIiwibm90RW1wdHlTdHJpbmdNYXBwZXIiLCJwYXJ0IiwiYXR0clZhbHVlIiwibm90RW1wdHkiLCJub1ZhbHVlIiwibG93ZXJOYW1lIiwidG9Mb3dlckNhc2UiLCJmaXhlZE5hbWUiLCJldmVudE5hbWUiLCJjbGVhbkV2ZW50TmFtZSIsInZhbHVlTmFtZSIsIndob2xlVmFsdWUiLCJhdHRyU2V0IiwiYXR0clZhbHVlU3BsaXQiLCJmaW5kUmVhbFRhZ3NSZWdFeCIsImlzU3BlY2lhbCIsInVuc2hpZnQiLCJyZWFsVGFnc1JlZ0V4Iiwic2hvcnRGcm9udCIsInJlcGxhY2VtZW50IiwiaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEiLCJzdHJpbmdzIiwiaHRtbFN0cmluZyIsInNhbml0aXplZEZyYWdtZW50cyIsInJlc3VsdHMiLCJzYWZlRnJhZ21lbnQiLCJkaWZmIiwiYmFsYW5jZUFycmF5QnlBcnJheXMiLCJhZGRQbGFjZWhvbGRlcnMiLCJodG1sSW50ZXJwb2xhdGlvblRvUGxhY2Vob2xkZXJzIiwiQmFzaWNUeXBlcyIsIkltbXV0YWJsZVR5cGVzIiwidGFnIiwidGVtcGxhdGVyIiwidGFnQ29tcG9uZW50IiwidGFnQXJyYXkiLCJob3N0Iiwic2lnbmFsIiwicmVuZGVyT25jZSIsInN0YXRlUmVuZGVyIiwidmVyc2lvbiIsInJlcGxhY2VQbGFjZWhvbGRlcnMiLCJ2YWx1ZUNvdW50IiwiY3VycmVudFRhaWwiLCJsb29wVGFpbCIsImF0dHJzIiwicHJvY2Vzc0F0dHJpYnV0ZXMiLCJjaGlsZHJlbiIsImlubmVyTG9vcFRhaWwiLCJleGFtaW5lQ2hpbGQiLCJjaGlsZCIsInRleHRDaGlsZCIsInN0cmluZyIsInNlY29uZE1hdGNoIiwid0luZGV4IiwicGFyc2VJbnQiLCJ2YXJDb250ZW50IiwiYWZ0ZXIiLCJ2IiwibGFzdEluZGV4IiwibWFwcGVkIiwidGFnSnNWYXIiLCJsZW5ndGhNYXBwZXIiLCJsYXN0UnVucyIsImdldERvbU1ldGEiLCJzdHJpbmdJZCIsImdldFN0cmluZ3NJZCIsImxhc3RSdW4iLCJtYXRjaGVzIiwiZXZlcnkiLCJpc0xhc3RSdW5NYXRjaGVkIiwiZG9tTWV0YU1hcCIsInRlbXBsYXRlIiwiaW50ZXJwb2xhdGlvbiIsImFkZFBhaW50UmVtb3ZlQXdhaXQiLCJwYWludFJlbW92ZUF3YWl0cyIsInBhaW50UmVtb3ZlcyIsInBhaW50Q29tbWFuZHMiLCJwYWludEFwcGVuZHMiLCJwYWludEFmdGVycyIsInBhaW50aW5nIiwibG9ja3MiLCJyZW1vdmVMb2NrcyIsInNldENvbnRlbnQiLCJwYWludCIsImN1cnJlbnRBd2FpdHMiLCJkYXRhIiwib3V0ZXJQYWludFJlbW92ZXMiLCJydW5QYWludFJlbW92ZXMiLCJydW5QYWludEN5Y2xlcyIsIm5vd1BhaW50QWZ0ZXJzIiwicnVuQWZ0ZXJDeWNsZSIsImFkZFBhaW50UmVtb3ZlciIsImNhbGxlciIsInBhaW50UmVtb3ZlciIsIl9jYWxsZXIiLCJwYWludEJlZm9yZSIsInJlbGF0aXZlIiwiaW5zZXJ0QmVmb3JlIiwicGFpbnRBcHBlbmQiLCJjb250ZW50Q2xlYW5lciIsInRvUGxhaW5UZXh0RWxtIiwiY3JlYXRlVGV4dE5vZGUiLCJwYWludEJlZm9yZVRleHQiLCJjYWxsYmFjayIsInRleHRFbG0iLCJwYWludEJlZm9yZUVsZW1lbnRTdHJpbmciLCJwYWludEFwcGVuZEVsZW1lbnRTdHJpbmciLCJkZWxldGVDb250ZXh0U3ViQ29udGV4dCIsImNvbnRleHRJdGVtIiwib3duZXJTdXBwb3J0IiwiZGVsZXRlU3ViQ29udGV4dCIsInN1YkNvbnRleHQiLCJkZWxldGVkIiwiYXBwZW5kTWFya2VyIiwiaGFzRW1pdHRlZCIsInN1YkNvbnRleHRJdGVtIiwiZGVsZXRlIiwiaXNTdGF0aWNUYWciLCJ0YWdKc1R5cGUiLCJpc1RhZ0NvbXBvbmVudCIsInRhZ1R5cGUiLCJpc1N1YmplY3RJbnN0YW5jZSIsImZ1bmN0aW9uIiwib2JqZWN0IiwiZ2V0TmV3R2xvYmFsIiwiZ2xvYmFsIiwic2V0VXNlTWVtb3J5Iiwic3RhdGVDb25maWciLCJzdXBwb3J0Iiwic2V0U3VwcG9ydEluQ3ljbGUiLCJjb21wb25lbnQiLCJuZXdlc3QiLCJyZXR1cm5BcmdzIiwiZmlyc3RTdGF0ZXNIYW5kbGVyIiwic2V0dGVyIiwic3RhdGVzIiwic3RhdGVzSW5kZXgiLCJyZVN0YXRlc0hhbmRsZXIiLCJvbGRTdGF0ZXMiLCJwcmV2U3VwcG9ydCIsImxhc3RWYWx1ZXMiLCJfYXJncyIsImluaXRTdGF0ZSIsImhhbmRsZXJzIiwicnVuRmlyc3RTdGF0ZSIsInN0YXRlc0hhbmRsZXIiLCJyZWFycmF5Iiwic3RhdGVBcnJheSIsInJlU3RhdGUiLCJuZXdTdXBwb3J0IiwicHJldlN0YXRlIiwicnVuUmVzdGF0ZSIsIlN0YXRlRWNob0JhY2siLCJnZXRTdGF0ZVZhbHVlIiwiZGVmYXVsdFZhbHVlIiwiY2hlY2tWYWx1ZSIsImdldENhbGxiYWNrVmFsdWUiLCJyZXN0YXRlIiwiaW5pdFZhbHVlIiwib3JpZ2luYWwiLCJjb21iaW5lTGF0ZXN0Iiwic3ViamVjdHMiLCJvdXRwdXQiLCJzdWJzY3JpYmVXaXRoIiwidmFsdWVzU2VlbiIsInNldFZhbHVlIiwic3Vic2NyaXB0aW9uIiwiY2xvbmVzIiwic3Vic2NyaXB0aW9ucyIsImdldFN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXJzIiwiY291bnRTdWJqZWN0IiwiZ2xvYmFsU3ViQ291bnQkIiwiZmluZEluZGV4Iiwic3ViIiwicmVtb3ZlU3ViRnJvbUFycmF5IiwidmFsU3ViIiwicnVuUGlwZWRNZXRob2RzIiwibWV0aG9kcyIsImNsb25lTWV0aG9kcyIsImZpcnN0TWV0aG9kIiwibmV3VmFsdWUiLCJtZXRob2RSZXNwb25zZSIsInNldEhhbmRsZXIiLCJvblN1YnNjcmlwdGlvbiIsImlzU3ViamVjdCIsIm9yZ0NhbGxiYWNrIiwibGFzdFZhbHVlIiwiZW1pdCIsInN1YnMiLCJ0b0NhbGxiYWNrIiwicnVudGltZVN1YiIsInRhZ0pzVW5zdWIiLCJzZXRNZXRob2RzIiwiYXJnIiwiZGVmaW5lVmFsdWVPbiIsIl92YWx1ZSIsInRhZ0Nsb3NlZCQiLCJmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUiLCJpZ25vcmVPckRlc3Ryb3llZCIsImNoZWNrVmFsdWVDaGFuZ2UiLCJ1cGRhdGVUb0RpZmZWYWx1ZSIsImRvbVByb2Nlc3NDb250ZXh0SXRlbSIsImFwcGVuZFRvIiwibG9ja2VkIiwic2V0Q29udGV4dEluQ3ljbGUiLCJwcm9jZXNzSW5pdCIsInByb2Nlc3NGaXJzdFN1YmplY3RWYWx1ZSIsInJlbW92ZUNvbnRleHRJbkN5Y2xlIiwiY2FzdFRleHRWYWx1ZSIsInRhZ1ZhbHVlVXBkYXRlSGFuZGxlciIsImhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZSIsInNldE9iamVjdFZhbHVlIiwic2V0UHJvcGVydHkiLCJzZXRQcm9wZXJ0eVZhbHVlIiwiaG93VG9TZXRTdGFuZEFsb25lQXR0ciIsInNldEF0dHJpYnV0ZSIsImhvd1RvU2V0Rmlyc3RJbnB1dFZhbHVlIiwicmVtb3ZlQXR0cmlidXRlIiwic3BlY2lhbEF0dHJpYnV0ZSIsInNwZWNpYWxOYW1lIiwiYXV0b2ZvY3VzIiwiYXV0b3NlbGVjdCIsIm5hbWVzIiwicGFpbnRTdHlsZSIsImNsYXNzTGlzdEFkZCIsImNsYXNzTGlzdFJlbW92ZSIsInByb2Nlc3NTcGVjaWFsQ2xhc3MiLCJzbWFsbE5hbWUiLCJoYW5kbGVQcm92aWRlckNoYW5nZXMiLCJhcHBTdXBwb3J0IiwicHJvdmlkZXIiLCJ0YWdzV2l0aFByb3ZpZGVyIiwibWVtb3J5IiwiY2hpbGRUYWdzIiwiY1N1YmplY3QiLCJnZXRUYWdzV2l0aFByb3ZpZGVyIiwibWFwVG9TdXBwb3J0IiwiZGVlcENsb25lIiwibWF4RGVwdGgiLCJtYWtlRGVlcENsb25lIiwiY2xvbmUiLCJnZXRQcm90b3R5cGVPZiIsImRlZXBFcXVhbCIsIm9iajEiLCJvYmoyIiwiaXNEZWVwRXF1YWwiLCJmbjAiLCJmbjEiLCJnZXRUaW1lIiwiaXNBcnJheURlZXBFcXVhbCIsImtleXMxIiwia2V5czIiLCJpc09iamVjdERlZXBFcXVhbCIsInNoYWxsb3dQcm9wTWF0Y2giLCJwcm9wcyIsInBhc3RDbG9uZVByb3BzIiwibGVuIiwicHJvcCIsInBhc3RQcm9wIiwib2JFbnRyaWVzIiwic3ViSXRlbSIsIm9iamVjdEl0ZW1NYXRjaGVzIiwicGFzdFZhbHVlIiwiY2xvbmVWYWx1ZUFycmF5IiwiY2xvbmVUYWdKc1ZhbHVlIiwic2hhbGxvd01hcHBlciIsInNoYWxsb3dDb21wYXJlRGVwdGgiLCJkZWVwTWFwcGVyIiwiZGVlcENvbXBhcmVEZXB0aCIsImdldEJhc2VTdXBwb3J0IiwiY2FzdGVkUHJvcHMiLCJiYXNlU3VwcG9ydCIsImJsb2NrZWQiLCJkZXN0cm95JCIsInVwZ3JhZGVCYXNlVG9TdXBwb3J0IiwicHJvcHNDb25maWciLCJjYXN0UHJvcHMiLCJwcm9wV2F0Y2giLCJQcm9wV2F0Y2hlcyIsIklNTVVUQUJMRSIsImxhdGVzdCIsIlNIQUxMT1ciLCJjbG9uZVByb3BzQnkiLCJydW5CZWZvcmVEZXN0cm95IiwicHJvdmlkZXJzIiwiZGVzdHJveUNvbnRleHQiLCJsYXN0QXJyYXkiLCJjaGlsZFZhbHVlIiwiaVN1YnMiLCJ1bnN1YnNjcmliZUZyb20iLCJjb250ZXh0cyIsImdldENoaWxkVGFnc1RvU29mdERlc3Ryb3kiLCJ0YWdzIiwic3ViVGFncyIsImNvbXBhcmVBcnJheUl0ZW1zIiwibmV3TGVuZ3RoIiwibGVzc0xlbmd0aCIsInByZXZDb250ZXh0IiwiZGVzdHJveUFycmF5SXRlbSIsIm9sZEtleSIsIm5ld1ZhbHVlVGFnIiwiaXNEaWZmIiwiYXJyYXlWYWx1ZSIsInJ1bkFycmF5SXRlbURpZmYiLCJkZXN0cm95U3VwcG9ydCIsIm9sZGVzdCIsInNpbXBsZVZhbHVlRWxtIiwiZGVzdHJveUFycmF5SXRlbUJ5R2xvYmFsIiwiY2hlY2tBcnJheVZhbHVlQ2hhbmdlIiwiZGVzdHJveUFycmF5Q29udGV4dEl0ZW0iLCJkZXN0cm95QXJyYXkiLCJzbWFydFJlbW92ZUtpZHMiLCJhbGxQcm9taXNlcyIsIndpdGhpbk93bmVyRWxlbWVudCIsInN1cHBvcnRPd25lciIsInN1Ykdsb2JhbCIsInNtYXJ0UmVtb3ZlQnlDb250ZXh0IiwiaHRtbERvbU1ldGEiLCJkZXN0cm95Q2xvbmUiLCJkZXN0cm95Q2xvbmVzIiwibWFya2VyIiwiZG9tRWxlbWVudCIsInByb21pc2VzIiwiaXNMaWtlVGFncyIsIm9sZFN1cHBvcnQiLCJpc0xpa2UiLCJpc0xpa2VCYXNlVGFncyIsIl9pbm5lckhUTUwiLCJvdXRlckhUTUwiLCJ0ZW1wbGF0ZXIwIiwidGVtcGxhdGVyMSIsIm5ld1RhZyIsIm9sZFRhZyIsImRvbU1ldGEwIiwiZG9tTWV0YTEiLCJpc0xpa2VEb21UYWdzIiwibGlrZSIsInN0cmluZ3MwIiwic3RyaW5nczEiLCJ2YWx1ZXMwIiwidmFsdWVzMSIsInZhbHVlc0xlbmd0aHNNYXRjaCIsImFsbFZhcnNNYXRjaCIsImNvbXBhcmVUbyIsImlzTGlrZVZhbHVlU2V0cyIsImlzTGlrZVN0cmluZ1RhZ3MiLCJjaGVja1RhZ1ZhbHVlQ2hhbmdlIiwibGFzdFN1cHBvcnQiLCJ0cnlVcGRhdGVUb1RhZyIsImlzVGFnIiwiZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIiwiYWRkT25lQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJ2YWx1ZUluZGV4U2V0QnkiLCJ2YWx1ZVRvVGFnSnNWYXIiLCJhdHRhY2hEeW5hbWljRG9tIiwiZGVwdGgiLCJwbGFjZWhvbGRlciIsImF0dGFjaERvbUVsZW1lbnRzIiwibm9kZXMiLCJub2RlIiwibmV3Tm9kZSIsImF0dGFjaERvbVRleHQiLCJjcmVhdGVkQ29udGV4dHMiLCJhdHRhY2hEb21FbGVtZW50IiwibmV3UGFyZW50Q29udGV4dCIsImF0dHIiLCJuZXdDb250ZXh0IiwicHJvY2Vzc0F0dHJpYnV0ZSIsIm93bmVyIiwiYnVpbGRCZWZvcmVFbGVtZW50IiwiZG9tTWV0YSIsInRoaXNUYWciLCJsb2FkRG9tTWV0YSIsImF0dGFjaEh0bWxEb21NZXRhIiwicHJvY2Vzc1RhZyIsInBoIiwidGFnRmFrZVRlbXBsYXRlciIsInByb2Nlc3NUYWdJbml0IiwibmV3U3VwcG9ydEJ5VGVtcGxhdGVyIiwiY3JlYXRlSHRtbFN1cHBvcnQiLCJwcm9jZXNzTmV3U3ViamVjdFRhZyIsImdldFRlbXBsYXRlclJlc3VsdCIsInByb2Nlc3NJbml0QXR0cmlidXRlIiwicHJvY2Vzc1VwZGF0ZSIsInNhZmVSZW5kZXJTdXBwb3J0IiwiaXNJbmxpbmVIdG1sIiwicmVuZGVySW5saW5lSHRtbCIsInJlbmRlckV4aXN0aW5nU3VwcG9ydCIsImNoZWNrUHJvcCIsImFsdGVyUHJvcCIsImFscmVhZHkiLCJtZW0iLCJ3cmFwIiwidG9DYWxsIiwiY2FsbFdpdGgiLCJub0N5Y2xlIiwiY2FsbGJhY2tSZXN1bHQiLCJydW4iLCJjYWxsYmFja1Byb3BPd25lciIsImFzc2lnbiIsImdldFByb3BXcmFwIiwiaXNTa2lwUHJvcFZhbHVlIiwiYWZ0ZXJDaGVja1Byb3AiLCJjaGVja0FycmF5UHJvcCIsImdldHNldCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNoZWNrT2JqZWN0UHJvcCIsIm9yaWdpbmFsVmFsdWUiLCJuZXdQcm9wIiwiZXhlY3V0ZVdyYXAiLCJ1c2VTdXBwb3J0Iiwib3JpZ2luYWxGdW5jdGlvbiIsInN0YXRlbGVzcyIsImNyZWF0ZVN1cHBvcnQiLCJnZXRDYXN0ZWRQcm9wcyIsIkRFRVAiLCJwcmVDYXN0ZWRQcm9wcyIsImxhc3RQcm9wc0NvbmZpZyIsImxhc3RDYXN0UHJvcHMiLCJzeW5jRnVuY3Rpb25Qcm9wcyIsIlRhZ0Vycm9yIiwiZXJyb3JDb2RlIiwiZGV0YWlscyIsInN1cGVyIiwiU3RhdGVNaXNtYXRjaEVycm9yIiwiU3luY0NhbGxiYWNrRXJyb3IiLCJjaGVja1N0YXRlTWlzbWF0Y2giLCJ3cmFwcGVyIiwidGFnRnVuY3Rpb24iLCJuZXdTdGF0ZXMiLCJoaW50IiwidGhyb3dTdGF0ZU1pc21hdGNoIiwicnVuQWZ0ZXJSZW5kZXIiLCJyZW5kZXJUYWdPbmx5IiwicnVuQmVmb3JlUmVuZGVyIiwicmVTdXBwb3J0IiwicHJvY2Vzc1JlbmRlck9uY2VJbml0Iiwib25lUmVuZGVyVG9TdXBwb3J0IiwicHJvY2Vzc0ZpcnN0U3ViamVjdENvbXBvbmVudCIsIm5ld1Byb3BzQ29uZmlnIiwicHJvY2Vzc0ZpcnN0VGFnUmVzdWx0IiwicHJvY2Vzc1RhZ0NvbXBvbmVudEluaXQiLCJwcm9jZXNzUmVzdWx0IiwicHJvY2Vzc1JlcGxhY2VtZW50Q29tcG9uZW50IiwidGFnQ291bnQiLCJwYXJlbnRXcmFwIiwiaW5uZXJUYWdXcmFwIiwiZ2V0VGFnV3JhcCIsInNldFVzZSIsIlZhbHVlVHlwZXMiLCJ0YWdJbmRleCIsImhhc1Byb3BDaGFuZ2VzIiwiaGFzUHJvcExlbmd0aHNDaGFuZ2VkIiwiTk9ORSIsImltbXV0YWJsZVByb3BNYXRjaCIsImNhc3RlZFBhc3RQcm9wcyIsImNvbXBhcmUiLCJzdWJDYXN0ZWRQcm9wcyIsInN1YkNvbXBhcmVQcm9wcyIsIm1hdGNoZWQiLCJjb21wYXJlUHJvcHMiLCJvbmVQcm9wQ29tcGFyZSIsImRlZXBQcm9wQ2hhbmdlQ29tcGFyZSIsIm9uRGVsZXRlIiwiY29tcGFyZU9yaWdpbmFsIiwiZ2V0RWxlbWVudCIsInVzZSIsImRlZXBQcm9wV2F0Y2giLCJyb3V0ZSIsIl9yb3V0ZVByb3BzIiwiYXBwIiwiX3JvdXRlVGFnIiwiaW1tdXRhYmxlUHJvcHMiLCJ3YXRjaFByb3BzIiwib25lUmVuZGVyRnVuY3Rpb24iLCJyZW5kZXJGdW5jdGlvbiIsInN5bmNQcmlvclByb3BGdW5jdGlvbiIsInByaW9yUHJvcCIsIm9sZFByb3AiLCJ1cGRhdGVFeGlzdGluZ0FycmF5IiwiaGFzU2V0dGVyIiwidXBkYXRlRXhpc3RpbmdPYmplY3QiLCJ1cGRhdGVFeGlzdGluZ1RhZ0NvbXBvbmVudCIsIm9sZFdyYXBwZXIiLCJuZXdXcmFwcGVyIiwiaXNTYW1lVGFnIiwic2tpcENvbXBhcmluZyIsIm9sZGVzdFN1cHBvcnQiLCJzd2FwVGFncyIsImhhc0NoYW5nZWQiLCJuZXdUZW1wbGF0ZXIiLCJoYXNTdXBwb3J0Q2hhbmdlZCIsInJlbmRlclN1cHBvcnQiLCJuZXdQcm9wcyIsInN5bmNTdXBwb3J0cyIsIm5ld1Byb3BzQXJyYXkiLCJwcmlvclByb3BzQXJyYXkiLCJuZXdBcnJheSIsInNvZnREZXN0cm95U3VwcG9ydCIsInNvZnREZXN0cm95T25lIiwicmVuZGVyV2l0aFN1cHBvcnQiLCJpc0xpa2VUYWciLCJsYXN0VGVtcGxhdGVyIiwibGFzdFRhZyIsImxhc3REb20iLCJsYXN0U3RyaW5ncyIsIm9sZExlbmd0aCIsImNoZWNrVGFnU29mdERlc3Ryb3kiLCJwSW5kZXgiLCJwTGVuIiwicGNMZW4iLCJtb3ZlUHJvdmlkZXJzIiwid2FzTGlrZVRhZ3MiLCJ1cGRhdGVTdXBwb3J0QnkiLCJpbmxpbmVIdG1sIiwiY2hlY2tSZW5kZXJVcCIsInNlbGZQcm9wQ2hhbmdlIiwibm93UHJvcHMiLCJsYXRlc3RQcm9wcyIsImhhc1Byb3BzVG9Pd25lckNoYW5nZWQiLCJnZXRVcFRhZ3MiLCJzdXBwb3J0cyIsImlzQ29tcG9uZW50IiwiY29udGludWVVcCIsInByb1N1cHBvcnRzIiwicHJvc1dpdGhDaGFuZ2VzIiwiaGFzQ2hhbmdlIiwicHJvdmlkZXJzQ2hhbmdlQ2hlY2siLCJyZW5kZXJUYWdVcGRhdGVBcnJheSIsIm1hcFRhZ1VwZGF0ZSIsInN5bmNTdGF0ZXNBcnJheSIsIm9udG8iLCJzeW5jU3RhdGVzIiwiZ290Iiwic3luY0Zyb21TdGF0ZSIsInN5bmNPbnRvU3RhdGUiLCJvbGRTeW5jU3RhdGVzIiwic3RhdGVGcm9tIiwic3RhdGVUbyIsImludG9TdGF0ZXMiLCJzdGF0ZXNGcm9tIiwiZnJvbVZhbHVlIiwib2xkVmFsdWVzIiwiZ2V0SW5kZXgiLCJzdGF0ZUZyb21UYXJnZXQiLCJvbGRHZXRDYWxsYmFjayIsIm5ld1NldENhbGxiYWNrIiwiXyIsImNoZWNrVG9SZXNvbHZlUHJvbWlzZSIsIm1vZGUiLCJyZXNvbHZlUHJvbWlzZSIsInJlc29sdmVWYWx1ZSIsImdsb2JhbDEiLCJuZXdlc3RTdXBwb3J0IiwidGhlblJlc29sdmVCeSIsImJpbmRTdWJqZWN0Q2FsbGJhY2siLCJzdWJqZWN0RnVuY3Rpb24iLCJiaW5kVG8iLCJldmVudEhhbmRsZXJTdXBwb3J0IiwicmVuZGVyQ2FsbGJhY2tTdXBwb3J0IiwiYWZ0ZXJUYWdDYWxsYmFjayIsInJ1blRhZ0NhbGxiYWNrIiwibm9EYXRhIiwicHJvbWlzZU5vRGF0YSIsImFkZFN1cHBvcnRFdmVudExpc3RlbmVyIiwiYXBwRWxlbWVudCIsInJlcGxhY2VFdmVudE5hbWUiLCJldmVudFJlZyIsImV2ZW50cyIsImxpc3RlbmVyIiwib3JpZ2luYWxTdG9wUHJvcGFnYXRpb24iLCJidWJibGVFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9wcGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbiIsIm5ld0F0dHJWYWx1ZSIsImZ1biIsImlzTm9EaXNwbGF5VmFsdWUiLCJwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQiLCJhdHRyQ29udGV4dEl0ZW0iLCJ0YWdWYWx1ZSIsIm9sZFZhbHVlIiwiaXNBdHRyIiwiaXNOYW1lT25seSIsImhvd1RvU2V0IiwicHJvY2Vzc05hbWVPbmx5QXR0clZhbHVlIiwidXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUiLCJwcm9jZXNzVGFnQ2FsbGJhY2tGdW4iLCJwcm9jZXNzQXR0cmlidXRlU3ViamVjdFZhbHVlIiwiY2FsbGJhY2tGdW4iLCJwcm9jZXNzQXR0cmlidXRlRW1pdCIsImNyZWF0ZUR5bmFtaWNBcnJheUF0dHJpYnV0ZSIsInN0YXJ0SW5kZXgiLCJzZXRCeSIsImNvbmNhdFZhbHVlIiwibXlJbmRleCIsInB1c2hWYWx1ZSIsImJ1aWxkTmV3VmFsdWVGcm9tQXJyYXkiLCJuZXdWYWx1ZXMiLCJjcmVhdGVEeW5hbWljQXR0cmlidXRlIiwidmFySW5kZXgiLCJwcm9jZXNzVGFnSnNBdHRyaWJ1dGUiLCJwcm9jZXNzTm9uRHluYW1pY0F0dHIiLCJwcm9jZXNzRHluYW1pY05hbWVWYWx1ZUF0dHJpYnV0ZSIsImdldFRhZ0pzVmFyIiwiYXR0clBhcnQiLCJpc05hbWVWYXIiLCJ2YWx1ZUluVmFsdWVzIiwic3RhdGVPd25lciIsIm9sZFRhZ0pzVmFyIiwicHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlIiwidmFsdWVWYXIiLCJzcGVjaWFsIiwicGFpbnRDb250ZW50UHVzaCIsInByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUiLCJuZXdUYWdWYXIiLCJwcm9jZXNzU2ltcGxlQXR0cmlidXRlIiwiZGVsZXRlU2ltcGxlQXR0cmlidXRlIiwiY2hlY2tTaW1wbGVWYWx1ZUNoYW5nZSIsImdldFNpbXBsZVRhZ1ZhciIsInByb2Nlc3NTaW1wbGVWYWx1ZUluaXQiLCJkZWxldGVTaW1wbGVWYWx1ZSIsImNoZWNrVXBkYXRlRGVsZXRlU2ltcGxlVmFsdWVDaGFuZ2UiLCJjYXN0ZWRWYWx1ZSIsIm9sZENsb25lIiwicHJvY2Vzc1VwZGF0ZVJlZ3VsYXJWYWx1ZSIsInByb2Nlc3NUYWdBcnJheSIsIm5vTGFzdCIsInJ1bnRpbWVJbnNlcnRCZWZvcmUiLCJmaWx0ZXJlZExhc3QiLCJuZXdSZW1vdmVkIiwicmV2aWV3QXJyYXlJdGVtIiwicHJldmlvdXMiLCJpdGVtU3ViamVjdCIsImNvdWxkQmVTYW1lIiwiY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtIiwicmV2aWV3UHJldmlvdXNBcnJheUl0ZW0iLCJnZXRBcnJheVRhZ1ZhciIsInByb2Nlc3NBcnJheUluaXQiLCJwcm9jZXNzQXJyYXlVcGRhdGVzIiwiZ2V0QmFzaWNUYWdWYXIiLCJvbkZpcnN0U3ViQ29udGV4dCIsImd1YXJhbnRlZUluc2VydEJlZm9yZSIsInByb2Nlc3NVcGRhdGVTdWJzY3JpYmUiLCJjaGVja1N0aWxsU3Vic2NyaXB0aW9uIiwiZW1pdFN1YkNvbnRleHQiLCJpbnNlcnRCZWZvcmVPcmlnaW5hbCIsIm9ic2VydmFibGVzIiwiT2JzZXJ2YWJsZXMiLCJvbk91dHB1dCIsInN5bmNSdW4iLCJjaGVja1RvUGFpbnQiLCJ1cGRhdGVWYWx1ZSIsImFDb250ZXh0Iiwic2V0dXBTdWJzY3JpYmVDYWxsYmFja1Byb2Nlc3NvciIsInN1YlZhbHVlSGFuZGxlciIsInZhbHVlc0hhbmRsZXIiLCJuZXdlc3RQYXJlbnRUYWdKc1ZhciIsInJlc3BvbnNlVmFsdWUiLCJ1bnN1YnNjcmliZUNvbnRleHQiLCJwcm9jZXNzU3Vic2NyaWJlV2l0aCIsIndpdGhEZWZhdWx0IiwiZW1pdFZhbHVlIiwicHJvY2Vzc1NpZ25hbCIsInByb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUiLCJfdGFnSnNWYXIiLCJjYWxsYmFja1ZhbHVlIiwiY29udGV4dEl0ZW0yIiwicHJvY2Vzc1N1YnNjcmliZVdpdGhBdHRyaWJ1dGUiLCJvYlZhbHVlIiwiZW1pdFN1YlNjcmlwdGlvbkFzSXMiLCJuZXdPYnNlcnZlcyIsIm9sZE9ic2VydmVzIiwiaW5pdGlhbFZhbHVlIiwiU2lnbmFsIiwiU2V0IiwidW5zdWIiLCJWYWx1ZVN1YmplY3QiLCJWYWx1ZVN1YmplY3RpdmUiLCJ3aWxsUHJvbWlzZSIsInV0aWxzIiwid2F0Y2giLCJjdXJyZW50VmFsdWVzIiwic2V0dXBXYXRjaCIsImRlZmF1bHRGaW5hbGx5IiwiYmVmb3JlIiwiZmluYWwiLCJwYXN0UmVzdWx0IiwicHJldmlvdXNWYWx1ZXMiLCJkZWZpbmVPbk1ldGhvZCIsImdldFdhdGNoIiwiYXR0YWNoVG8iLCJzZXR1cCIsIm9sZFdhdGNoIiwiZmlyc3RTdXBwb3J0Iiwib2xkU3RhdGUiLCJtZXRob2QiLCJub3dTdXBwb3J0Iiwic2V0VG8iLCJuZXdlc3RTdGF0ZSIsImxldFByb3AiLCJwcm9wU3RhdGVzMiIsInBhc3NlcyIsInBhc3NlZE9uIiwibm93VmFsdWVzIiwiX3giLCJkaXJlY3Rpb24iLCJnZXRCbGFua0RpZmZNZW1vcnkiLCJzdGF0ZURpZmYiLCJuZXdXYXRjaCIsIm9sZGVzdFN0YXRlIiwiY29uc3RydWN0TWV0aG9kIiwic3RhdGVEaWZmTWVtb3J5Iiwib2xkU3RhdGVDb3VudCIsImNtIiwiaW5qZWN0Iiwib3duZXJQcm92aWRlcnMiLCJmaW5kIiwibXNnIiwic3luY0Vycm9yIiwiY3JlYXRlVHJpZ2dlciIsIm1heWJlUHJvbWlzZSIsImZpbmFsbHkiLCJjYWxsYmFja1N0YXRlVXBkYXRlIiwiY2FsbGJhY2tNYWtlciIsIm9uSW5pdCIsImZpcnN0U2lnbmFsIiwic2lnIiwiZWRpdG9ycyIsInJlYWRlcnMiLCJyZXNpZ25hbCIsInByb2Nlc3NVcGRhdGVPbmVDb250ZXh0Iiwib2xkZXJTdXBwb3J0IiwibmV3ZXJTdXBwb3J0IiwibmV3VGVtcGxhdGUiLCJ0ZW1wVGFnIiwidXBkYXRlU3VwcG9ydFZhbHVlc0J5IiwicHJvY2Vzc1VwZGF0ZUNvbnRleHQiLCJwcmVwYXJlVXBkYXRlVG9Db21wb25lbnQiLCJvbGRUdGFnIiwidmFsdWVTdXBwb3J0IiwiaGFuZGxlU3RpbGxUYWciLCJwcm9jZXNzTm93UmVndWxhclZhbHVlIiwiaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20iLCJvcmlnaW5hbFR5cGUiLCJwcm9jZXNzRG9tVGFnSW5pdCIsInByb2Nlc3NPdXRlckRvbVRhZ0luaXQiLCJjaGVja091dGVyVGFnVmFsdWVDaGFuZ2UiLCJzdHJpbmdUYWciLCJzZXRIVE1MIiwib2xkUHJvY2Vzc0luaXQiLCJ1c2VUYWdWYXIiLCJnZXRTdHJpbmdUYWciLCJnZXREb21UYWciLCJwdXRPbmVEb21Eb3duIiwibmV3RnJhZ21lbnQiLCJsb2FkTmV3QmFzZVN1cHBvcnQiLCJyZW5kZXJUYWdFbGVtZW50IiwidGVtcGxhdGVyMiIsImlzQXBwRnVuY3Rpb24iLCJpc0ZpcnN0UmVuZGVyIiwiZXhlY3V0ZVN0YXRlV3JhcCIsInJ1bldyYXBwZXIiLCJpc0FwcCIsImRlc3Ryb3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG9Bd2FpdCIsImRlYnVnIiwiYXBwRWxlbWVudHMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZG9tSXRlbSIsInJlZ2lzdGVyVGFnRWxlbWVudCIsInRhZ2dlZEpzIiwidGFnRWxlbWVudCIsImFwcEVsbUluZGV4IiwiYXBwRWxtIiwiZ2V0TmV3U3ViamVjdCIsInN5bmNXcmFwQ2FsbGJhY2siLCJuZXdlc3RPd25lciIsImMiLCJoYW5kbGVJbm5lckhUTUwiLCJyZWFsVmFsdWUiLCJwcm9jZXNzSW5uZXJIVE1MIiwiY2hlY2tJbm5lckhUTUwiLCJnZXRJbm5lckhUTUwiLCJvcHRpb25zIiwicHJvY2Vzc0hvc3RBdHRyaWJ1dGUiLCJwcm9jZXNzSG9zdCIsInByb2Nlc3NIb3N0VXBkYXRlIiwiZGVsZXRlSG9zdCIsInByb2Nlc0hvc3RUYWdKc1ZhciIsImF0dHJDb250ZXh0IiwiaG1yIiwiZnhJbiIsImZ4T3V0Iiwib3V0UG9zaXRpb25BYnNvbHV0ZSIsImluIiwiYW5pbWF0ZUluaXQiLCJmeE5hbWUiLCJvdXQiLCJhbmltYXRlRGVzdHJveSIsIm9wYWNpdHkiLCJ3YWl0IiwiYWRkQ2xhc3Nlc1RvIiwiekluZGV4IiwidG9Ub3AiLCJvZmZzZXRUb3AiLCJ0b0xlZnQiLCJvZmZzZXRMZWZ0IiwidG9XaWR0aCIsImNsaWVudFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJ0b0hlaWdodCIsImNsaWVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsInRvcCIsImxlZnQiLCJoZWlnaHQiLCJjYXB0dXJlRWxlbWVudFBvc2l0aW9uIiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwiZmFkZUluVXAiLCJmYWRlT3V0RG93biIsImZhZGVJbkRvd24iLCJmYWRlT3V0VXAiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZnhHcm91cCIsImluTmFtZSIsIm91dE5hbWUiLCJzdGFnZ2VyVGltZSIsInNldHVwRngiLCJ0b3RhbFN0YWdnZXIiLCJkZXN0cm95UHJvbWlzZSIsImNyZWF0ZWQiLCJhbmltYXRlV3JhcCIsImV4dGVuZFN0YXRpY3MiLCJkIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwIiwiX19leHRlbmRzIiwiU3RyaW5nIiwiX18iLCJfX2F3YWl0ZXIiLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIl9fZ2VuZXJhdG9yIiwiZiIsInkiLCJ0Iiwib3BzIiwiZyIsIkl0ZXJhdG9yIiwidmVyYiIsIm9wIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJfX3JlYWQiLCJyIiwiYXIiLCJfX3NwcmVhZEFycmF5IiwicGFjayIsImwiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsIkFzeW5jSXRlcmF0b3IiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY1ZhbHVlcyIsIlN1cHByZXNzZWRFcnJvciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsInRvU3RyaW5nVGFnIiwiaW5zaWRlTXVsdGlSZW5kZXIiLCJjb3VudGVyJCIsImNvdW50ZXJTaWduYWwkIiwiYWxsU3RyaW5nczIyNjU5NDEiLCJ0ZXN0VGltZW91dCIsInJ1blRlc3RpbmciLCJtYW51YWwiLCJydW5TdGFydEVuZFRlc3RzIiwic3RvcmFnZSIsInZpZXdzIiwidGVzdENvdW50IiwiVmlld1R5cGVzIiwiQ29udGVudCIsIkNvdW50ZXJzIiwiUHJvcHMiLCJQcm92aWRlckRlYnVnIiwiVGFnU3dpdGNoRGVidWciLCJDaGlsZCIsIkFycmF5cyIsIk1pcnJvcmluZyIsIldhdGNoVGVzdGluZyIsIkZ1bkluUHJvcHNUYWciLCJBdHRyaWJ1dGVEZWJ1ZyIsIk9uZVJlbmRlciIsIlRvZG8iLCJEZXN0cm95cyIsInN0YXJ0IiwiaW5mbyIsInJ1bklzb2xhdGVkVGVzdHMiLCJhbGVydCIsImxvY2FsU3RvcmFnZSIsInRhZ2dlZGpzIiwiYXV0b1Rlc3QiLCJnZXRTY29wZWRTdG9yYWdlIiwic2F2ZVNjb3BlZFN0b3JhZ2UiLCJkZWZhdWx0Vmlld1R5cGVzIiwic2VjdGlvblNlbGVjdG9yIiwidmlld1R5cGVzIiwic29ydGVkVmlld1R5cGVzIiwic29ydCIsImxvY2FsZUNvbXBhcmUiLCJhbGxTdHJpbmdzNDI4ODIwIiwidHlwZSIsImNoZWNrVGVzdGluZyIsImRlYWN0aXZhdGUiLCJ2aWV3Q2hhbmdlZCIsInRvZ2dsZVZpZXdUeXBlIiwidmlld1R5cGUiLCJhY3RpdmF0ZSIsInRlbXBOb3RlIiwiYXJyYXlGdW5UYWciLCJkZWxldGVJdGVtIiwiYWxsU3RyaW5nczE5MzQ3IiwiZnVuSW5Qcm9wc0NoaWxkIiwiYXJnMCIsIm1haW5Qcm9wIiwibXlGdW5jdGlvbjMiLCJvdGhlciIsImFkZEFycmF5SXRlbSIsIm15RnVuY3Rpb24iLCJhbGxTdHJpbmdzNTk4NjY5IiwibXlDaGlsZEZ1bmN0aW9uIiwibWFpbiIsImFkZEFycmF5Q29tcG9uZW50IiwiaGFuZGxlS2V5VXAiLCJhbGxTdHJpbmdzNjY5NjUiLCJzaG93Q2hpbGQiLCJzb21ldGhpbmdFbHNlIiwiX3N0YXRlcyIsImFsbFN0cmluZ3MzNjA2NTIiLCJJdGVtIiwidG9kbyIsImRpc3BhdGNoIiwiZWRpdGluZyIsImFsbFN0cmluZ3MxNzI3NjMiLCJjb21wbGV0ZWQiLCJoYW5kbGVLZXkiLCJyZW1vdmVJdGVtIiwidXBkYXRlVG9CeUluZGV4IiwiaGFuZGxlVXBkYXRlIiwidG9nZ2xlSXRlbSIsInJlbW92ZUl0ZW1CeUluZGV4Iiwib25WYWxpZCIsImFsbFN0cmluZ3M0Nzg2MCIsIkZvb3RlciIsInRvZG9zQ291bnQiLCJyZW1vdmVDb21wbGV0ZWQiLCJhY3RpdmVUb2RvQ291bnQiLCJhbGxTdHJpbmdzNzcxNTYiLCJnZXRIYXNoIiwic3Vic3RyaW5nIiwidXNlSGFzaFJvdXRlciIsIm9uSGFzaENoYW5nZSIsIkhhc2hSb3V0ZXIiLCJ0b2RvcyIsInBhcnRpYWwiLCJhZGRJdGVtIiwicmFuZG9tIiwicmVtb3ZlQWxsIiwidG9nZ2xlQWxsIiwiY29tcGxldGVJdGVtIiwidXBkYXRlSXRlbUJ5SW5kZXgiLCJ0b2RvUmVkdWNlciIsInRvZG9BcHAiLCJpc0NvbXBsZXRlZFJvdXRlIiwidmlzaWJsZVRvZG9zIiwidG9kb0NvdW50IiwiYWxsU3RyaW5nczE1MDc0NiIsIkhlYWRlciIsImlubmVySHRtbFRlc3QiLCJfcHJvcHMiLCJhbGxTdHJpbmdzMTI4MDI2IiwiaW5uZXJIdG1sUHJvcHNUZXN0IiwidGVzdDIyIiwiYWxsU3RyaW5nczc5NTA1MiIsIm5vVGFnVGVzdCIsImNoaWxkQXNQcm9wVGVzdCIsImRlc3Ryb3lzIiwib24iLCJhbGxTdHJpbmdzNzI5OTAiLCJ0b0Rlc3Ryb3kiLCJhcnJheVNjb3JlRGF0YSIsInNjb3JlIiwicGxheWVySW5kZXgiLCJhbGxTdHJpbmdzNjc4NzgiLCJmcmFtZSIsImFycmF5cyIsInBsYXllcnMiLCJzaWduYWxBcnJheSIsInNpbXBsZUFycmF5IiwiYXJyYXlGeCIsImdldE5ld1BsYXllciIsInNjb3JlcyIsIl92IiwiZmxvb3IiLCJhZGRBcnJheVNpZ25hbCIsImxvb3BUaW1lcyIsImFsbFN0cmluZ3M4NzM5NjgiLCJwbGF5ZXJzRGlzcGxheSIsInBsYXllcnNDb250ZW50IiwicGxheWVyIiwiZ2V0UGxheWVyRGlzcGxheSIsInRhZ1N3aXRjaERlYnVnIiwiX3QiLCJzZWxlY3RlZFRhZyIsInRhZ091dHB1dCIsImFsbFN0cmluZ3M0ODQ5MzIiLCJ0YWcxIiwidGFnMiIsInRhZzMiLCJ0YWdPdXRwdXQyIiwic2VsZWN0ZWQiLCJ0ZXJuYXJ5UHJvcFRlc3QiLCJhcnJheVN3aXRjaGluZyIsIm91dFRhZyIsIm1pcnJvcmluZyIsInRhZ0NvdW50ZXIiLCJhbGxTdHJpbmdzMTU2NzM0IiwiX19fIiwiYWxsU3RyaW5nczUzOTI5IiwicHJvcHNEZWJ1Z01haW4iLCJzeW5jUHJvcE51bWJlciIsInByb3BOdW1iZXIiLCJwcm9wc0pzb24iLCJkYXRlIiwianNvbiIsInN0YXRlUHJvcERpc3BsYXkiLCJhbGxTdHJpbmdzMzE5Nzg0NyIsInByb3BzRGVidWciLCJwcm9wTnVtYmVyQ2hhbmdlIiwic3luY1Byb3BEZWJ1ZyIsInBhcmVudFRlc3QiLCJ0aW1lc3RhbXAiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJkYXkiLCJnZXREYXRlIiwiaG91cnMiLCJnZXRIb3VycyIsIm1pbnV0ZXMiLCJnZXRNaW51dGVzIiwidGltZXN0YW1wVG9WYWx1ZXMiLCJuZXdEYXRlU3RyaW5nIiwicHJvcERhdGVEZWJ1ZyIsInByb3BOdW1iZXJDaGFuZ2VDb3VudCIsIm15UHJvcE51bWJlciIsIndhdGNoUmVzdWx0cyIsInByb3BGblVwZGF0ZVRlc3QiLCJkaWFsb2ciLCJwcm92aWRlckNsYXNzIiwiYWxsU3RyaW5nczI0ODgwNSIsInNob3dEaWFsb2ciLCJUYWdEZWJ1Z1Byb3ZpZGVyIiwidGFnRGVidWciLCJQcm92aWRlckZ1bmMiLCJ0YWdEZWJ1Z1Byb3ZpZGVyIiwidXBwZXIiLCJ1cHBlclRhZ0RlYnVnUHJvdmlkZXIiLCJwcm92aWRlckRlYnVnIiwiY29sb3JPcHRpb25zIiwiY3ljbGVDb2xvclBhcmVudCIsImN5Y2xlQ29sb3JDaGlsZCIsImN5Y2xlQ29sb3JDaGlsZDIiLCJhbGxTdHJpbmdzNjc4MzY1NiIsInByb3ZpZGVyQ2hpbGREZWJ1ZyIsInByb3BDb3VudGVyQ2hhbmdlIiwiaW5DeWNsZVBhcmVudCIsImluQ3ljbGVDaGlsZCIsImluQ3ljbGVDaGlsZDIiLCJmdW5jUHJvdmlkZXIiLCJ1cHBlclByb3ZpZGVyIiwic2hvd1Byb1Byb3BzIiwiY2FsbGJhY2tzIiwiY2FsbGJhY2tUZXN0U3ViIiwidGVzdFByb3ZpZGVyQXNQcm9wcyIsImdhcCIsImZsZXgiLCJtb3VzZU92ZXJUYWciLCJhbGxTdHJpbmdzMTQwNDA3IiwibG9hZFN0YXJ0VGltZSIsImNvdW50ZXJzIiwiYXBwQ291bnRlclN1YmplY3QiLCJhbGxTdHJpbmdzOTUyMjI3NyIsImdsb2JhbFN1YnMiLCJpbm5lckNvdW50ZXJDb250ZW50IiwiaW5uZXJDb3VudGVycyIsImluY3JlYXNlUHJvcENvdW50ZXIiLCJvdGhlckNvdW50ZXIiLCJlbG1Jbml0Q291bnQiLCJzaGFsbG93UHJvcENvdW50ZXJzIiwiaW1tdXRhYmxlUHJvcENvdW50ZXJzIiwic3RhdGVzUmVuZGVyQ291bnQiLCJzdGF0ZXNSZW5kZXJDb3VudDIiLCJjb3VudGVyMiIsImluaXRDb3VudGVyIiwiY2FsbGJhY2tUbyIsInoiLCJjYWxsYmFja1Rlc3RTdWIyIiwicGlwZWRTdWJqZWN0MCIsInBpcGVkU3ViamVjdDEiLCJwaXBlZFN1YmplY3QyIiwicmVhZFN0YXJ0VGltZSIsIm5vV2F0Y2hQcm9wQ291bnRlcnMiLCJ0YWJsZURlYnVnIiwic2hvd0NlbGwiLCJhbGxTdHJpbmdzNTI3ODIiLCJ3YXRjaFRlc3RpbmciLCJzdGF0ZU51bSIsInN0YXRlTnVtQ2hhbmdlQ291bnQiLCJzbG93Q2hhbmdlQ291bnQiLCJzdWJqZWN0Q2hhbmdlQ291bnQiLCJ0cnV0aENoYW5nZSIsInRydXRoQ2hhbmdlQ291bnQiLCJ0cnV0aFN1YkNoYW5nZUNvdW50Iiwid2F0Y2hQcm9wTnVtU2xvdyIsIndhdGNoUHJvcE51bVN1YmplY3QiLCJhc1N1YmplY3QiLCJ3YXRjaFRydXRoIiwidHJ1dGh5Iiwid2F0Y2hUcnV0aEFzU3ViIiwiYWxsU3RyaW5nczIxODc2MTMiLCJzdWJzY3JpYmVBdHRyaWJ1dGVzIiwic3ViQ29sb3IkIiwic3ViQ29sb3JQdXJwbGVPcmFuZ2UkIiwic3ViQ29sb3JHcmVlblllbGxvdyQiLCJzaG91bGRIaWRlQXR0cmlidXRlcyIsImFsbFN0cmluZ3MyMTk4MjAiLCJzdWJDb2xvciIsImN1cnJlbnRDb2xvciIsImF0dHJpYnV0ZURlYnVnIiwiaXNPcmFuZ2UiLCJhbGxTdHJpbmdzMjE0ODA2IiwiY2xhc3MiLCJvdXRwdXRTZWN0aW9ucyIsImVtb2ppIiwiVGFibGVEZWJ1ZyIsInJlbmRlcmVkU2VjdGlvbnMiLCJ2aXNpYmxlU2VjdGlvbnMiLCJzZWN0aW9uIiwiZXh0cmEiLCJhbGxTdHJpbmdzMTY2ODkyMCIsImdldFNlY3Rpb24iLCJjb250ZW50SGlkZSIsInRlc3QwaW50ZXJ2YWwiLCJ0ZXN0MWludGVydmFsIiwiaW50ZXJ2YWxUZXN0ZXIwIiwiaW50ZXJ2YWxJZCIsImludGVydmFsSWQyIiwiaW50ZXJ2YWxDb3VudCIsInJlbmRlckNvdW50ZXIiLCJjdXJyZW50VGltZSIsInN0YXJ0SW50ZXJ2YWwiLCJzdG9wSW50ZXJ2YWwiLCJhbGxTdHJpbmdzODM4MDA4IiwiaW50ZXJ2YWxUZXN0ZXIxIiwidG9nZ2xlSW50ZXJ2YWwiLCJfZmlyc3RTdGF0ZSIsInNob3dJbnRlcnZhbHMiLCJhbGxTdHJpbmdzNzc1MDAiLCJ1c2VNZW51TmFtZSIsInJvdXRlciIsInBhdGhuYW1lIiwibWVudSIsIm1lbnVOYW1lIiwiYWxsU3RyaW5nczEyMDgyOSIsImFwcERhdGUiLCJhcHBGdW4iLCJzaG93SGlkZSIsImFsbFN0cmluZ3MyODA1MDE0IiwiZnhUYWciLCJob21lUGFnZSIsIkFwcCIsInNob3dTZWN0aW9ucyIsImFwcENvdW50ZXIiLCJ0b2dnbGVWYWx1ZSIsInRlc3RFbW9qaSIsInRvZ2dsZSIsIm9uVGVzdENvbXBsZXRlIiwic3VjY2VzcyIsImZpcmVUZXN0aW5nIiwibW9jaGEiLCJydW5UZXN0cyIsInRvZ2dsZUF1dG9UZXN0aW5nIiwiYWxsU3RyaW5nczYyOTQ3IiwiaGFzTGVuZ3RoIiwiYWxsU3RyaW5nczEwNTQ1NzAiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxvY2F0aW9uU3BsaXQiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9