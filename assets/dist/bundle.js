var t={842:(t,e,n)=>{n.r(e),n.d(e,{fxTime:()=>r});var o=n(78);const r=160;function s(t){return new Promise((e=>setTimeout(e,t)))}(0,o.yY)("⠇ array testing",(()=>{(0,o.it)("signal array count and items",(()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);(0,o.l_)(e).toBe(3);for(let t=0;t<e;t++)(0,o.l_)((0,o.o5)(`#signal-array-item-${t}`)).toBe(1);(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(0)})),(0,o.it)("push signal array button",(async()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText),n=(0,o.L7)("push-signal-array-btn");(0,o.l_)(e).toBe(3),n.click();const a=Number(t.innerText);(0,o.l_)(a).toBe(e+1),(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(1),n.click(),(0,o.l_)(Number(t.innerText)).toBe(e+2),(0,o.l_)((0,o.o5)(`#signal-array-item-${e+1}`)).toBe(1),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(5),(0,o.V4)("#signal-array-item-delete-btn-3"),(0,o.V4)("#signal-array-item-delete-btn-4"),await s(2*r),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(3)})),(0,o.it)("arrays counter display matches item counter displays",(()=>{const t=(0,o.L7)("arrays-counter-display"),e=Number(t.innerText),n=(0,o.L7)("signal-array-count"),r=Number(n.innerText);for(let t=0;t<r;t++){const n=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(n).toBeDefined(),(0,o.l_)(Number(n.innerText)).toBe(e)}document.querySelector("#signal-array-increase-counter").click();const s=Number(t.innerText);(0,o.l_)(s).toBe(e+1);for(let t=0;t<r;t++){const e=`signal-array-item-counter-display-${t}`,n=(0,o.L7)(e),r=Number(n.innerText);(0,o.l_)(r).toBe(s,`Index ${t} ID ${e} has ${r} but need toBe ${s} like #signal-array-increase-counter`)}})),(0,o.it)("signal array item delete button with animation",(async()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);(0,o.l_)(e).toBe(3),0===e&&(0,o.L7)("push-signal-array-btn").click();const n=Number(t.innerText);(0,o.l_)((0,o.o5)("#signal-array-item-0")).toBe(1);(0,o.L7)("signal-array-item-delete-btn-0").click(),await s(r),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(2);const a=Number(t.innerText),i=n-1;(0,o.l_)(a).toBe(i,`#signal-array-count has ${a} but expected ${i}`);const c=(0,o.o5)("#signal-array-item-2");(0,o.l_)(c).toBe(0,`Expected signal array item 2 but got ${c}`);const l=Number(t.innerText);for(let t=0;t<l;t++){const e=(0,o.o5)(`#signal-array-item-${t}`);(0,o.l_)(e).toBe(1,`Expected only one #signal-array-item-${t} but got ${e}`)}})),(0,o.it)("array basics",(()=>{(0,o.l_)((0,o.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,o.l_)(t.length).toBe(0);const e=(0,o.o5)("#score-data-0-1-inside-button");(0,o.l_)(e).toBe(0),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const n=(0,o.L7)("score-data-0-1-inside-button"),r=(0,o.L7)("score-data-0-1-inside-display");let s=r.innerText;const a=(0,o.L7)("score-data-0-1-outside-button"),i=(0,o.L7)("score-data-0-1-outside-display"),c=i.innerText;(0,o.l_)(s).toBe(c),n.click(),(0,o.l_)(r.innerText).toBe(i.innerText),(0,o.l_)(r).toBe((0,o.L7)("score-data-0-1-inside-display")),(0,o.l_)(s).toBe((Number(r.innerText)-1).toString()),(0,o.l_)(s).toBe((Number(i.innerText)-1).toString()),a.click(),(0,o.l_)(r.innerText).toBe(i.innerText),(0,o.l_)(s).toBe((Number(r.innerText)-2).toString()),(0,o.l_)(s).toBe((Number(i.innerText)-2).toString())})),(0,o.it)("🗑️ deletes",(async()=>{(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(1);const t=(0,o.L7)("player-edit-btn-0")._click();(0,o.l_)(t).toBe("no-data-ever"),(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(1);const e=await(0,o.L7)("player-remove-promise-btn-0")._click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r),await e,(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0,"Expected element not to exist #player-remove-promise-btn-0"),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(0)})),(0,o.it)("add then deletes",(async()=>{(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(2),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(2),(0,o.L7)("player-edit-btn-0").click();const t=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(t).toBe("promise-no-data-ever"),await s(r-10),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("player-edit-btn-0").click();const e=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r+25),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(0),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🏹 special attributes",(()=>{(0,o.it)("style and class tests",(async()=>{(0,o.l_)((0,o.QX)("#attr-input-abc")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-backgrounds")).toBe(1),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,o.L7)("attr-dynamic-inline-class").classList;(0,o.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,o.it)("subscribe attributes colors",(()=>{const t=(0,o.L7)("subscribe-style-dot-bg-color-changer"),e=(0,o.L7)("subscribe-style-bg-color"),n=(0,o.L7)("multiple-subscribe-bg-color"),r=(0,o.L7)("toggle-color-btn"),s=(0,o.L7)("clear-color-btn");(0,o.l_)(t.style.backgroundColor).toBe("red","bgColorChanger should start red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("pink"),(0,o.l_)(r.innerText).toBe("Toggle Color ()"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (red)"),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("green"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (blue)"),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(e.style.backgroundColor).toBe("blue"),(0,o.l_)(n.style.backgroundColor).toBe("purple"),s.click(),(0,o.l_)(t.style.backgroundColor).toBe("","expected no background in bgColorChanger"),(0,o.l_)(e.style.backgroundColor).toBe("","expected no background in subscribeBgColor"),(0,o.l_)(n.style.backgroundColor).toBe("pink")})),(0,o.it)("hide/show attributes affects subscription count",(()=>{const t=(0,o.L7)("toggle-attributes-btn"),e=(0,o.L7)("subscriptions-count"),n=Number(e.innerText);(0,o.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,o.l_)(t.innerText).toBe("Show Attributes");const r=Number(e.innerText),s=n-2;(0,o.l_)(r).toBe(s,`afterHideCount expected(${r}) toBe(${s})`),t.click(),(0,o.l_)(t.innerText).toBe("Hide Attributes");const a=Number(e.innerText);(0,o.l_)(a).toBe(n)})),(0,o.it)("style object converts to individual CSS properties",(()=>{const t=(0,o.L7)("style-object-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("lightgrey"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("4px"),(0,o.l_)(t.style.boxShadow).toBe("none"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,o.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,o.L7)("style-set-property-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("red")}))}))},566:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("elements exists",(()=>{(0,o.l_)((0,o.L7)("h1-app")).toBeDefined();const t=(0,o.L7)("toggle-test");(0,o.l_)(t).toBeDefined(),(0,o.l_)(t.innerText).toBe("toggle test")})),(0,o.it)("toggle test",(()=>{const t=(0,o.L7)("toggle-test");(0,o.l_)(t.innerText).toBe("toggle test"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test")}))},527:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("👶 👧child tests",(()=>{(0,o.it)("child tests",(()=>{(0,o.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,o.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,o.it)("a",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,o.it)("b",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,o.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,o.it)("c",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},118:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 content",(()=>{(0,o.it)("spacing",(()=>{(0,o.l_)((0,o.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,o.it)("style.",(()=>{(0,o.l_)((0,o.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,o.it)("style set as object",(()=>{(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,o.yY)("no parent element tests",(()=>{(0,o.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,o.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,o.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,o.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,o.it)("concat style",(()=>{(0,o.L7)("dynamic-border-width").value=2,(0,o.L7)("dynamic-border-color").value="white",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,o.L7)("dynamic-border-width").value=1,(0,o.L7)("dynamic-border-color").value="blue",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,o.it)("tagvar injections",(()=>{(0,o.l_)((0,o.L7)("inject-tagvar-0").innerText).toBe((0,o.L7)("inject-read-tagvar-0").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-1").innerText).toBe((0,o.L7)("inject-read-tagvar-1").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-2").innerText).toBe((0,o.L7)("inject-read-tagvar-2").innerText)}))}))},428:(t,e,n)=>{n.r(e),n.d(e,{clickSpeedAmount:()=>s});var o=n(78);let r=0;(0,o.yY)("💯 counters",(()=>{const t=0===r;++r,(0,o.it)("basics",(()=>{const e=(0,o.L7)("set-main-counter-input");(0,o.l_)(e).toBeDefined(),e.value="0",(0,o.Sb)(e);Number((0,o.dy)("#counters_render_count")),Number((0,o.dy)("#inner_counters_render_count"));(0,o.wG)("#conditional-counter",0);const n=(0,o._8)("👉-counter-sub-count");(0,o.di)("#❤️-increase-counter","#❤️-counter-display"),(0,o.l_)((0,o._8)("👉-counter-sub-count")).toBe(n);const r=(0,o.dy)("#counters_render_count");(0,o.l_)(r).toBe("1",`expected render count ${r} to be 1`);let s="1",i=(0,o.dy)("#inner_counters_render_count");(0,o.l_)(i).toBe(s,`Expected renderCount ${i} to be ${s}`);const c=(0,o.dy)("#🔥-init-counter");(0,o.l_)(c).toBe("1",`#🔥-init-counter to be 1 but it's ${c}`),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(s,"#counters_render_count fail"),i=(0,o.dy)("#inner_counters_render_count"),(0,o.l_)(i).toBe(s),(0,o.di)("#🥦-standalone-counter","#🥦-standalone-display"),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(s,"#counters_render_count failed"),i=(0,o.dy)("#inner_counters_render_count"),(0,o.l_)(i).toBe(s,"#inner_counters_render_count failed"),(0,o.wG)("#conditional-counter",1),(0,o.wG)("#conditional-display",1),t&&(0,o.l_)((0,o.dy)("#conditional-display")).toBe("2"),i=(0,o._8)("❤️💧-shallow-display"),(0,o.di)("#conditional-counter","#conditional-display"),(0,o.l_)(i).toBe((0,o._8)("❤️💧-shallow-display")),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),(0,o.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),a("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),a("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),a("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),a("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,o.it)("counters.test piped subject",(()=>{if(t){(0,o.dy)("#🥦-standalone-display");const t=(0,o.dy)("#🪈-pipedSubject");(0,o.l_)(t).toBe("",`firstRun failure pipe0. Expected "${t}" toBe empty-string`);const e=(0,o.dy)("#🪈-pipedSubject-2");(0,o.l_)(e).toBe("","firstRun failure pipe2 expected toBe empty-string");const n=(0,o.dy)("#🪈-pipedSubject-3");(0,o.l_)(n).toBe("","firstRun failure pipe3 expected toBe empty-string")}(0,o.V4)("#🥦-subject-increase-counter");const e=(0,o.dy)("#🪈-pipedSubject"),n=(0,o.dy)("#🥦-standalone-display");(0,o.l_)(e).toBe(n),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe((0,o.dy)("#🥦-standalone-display"))}))}));const s=600;function a(t,e,n){const r=(0,o._8)(e),a=(0,o.L7)(t),i=(0,o.L7)(n);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)a.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)i.click();console.timeEnd(`⌚️ outer ${t}`);const c=(Number(r)+s).toString();(0,o.l_)((0,o._8)(e)).toBe(c)}},236:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("destroys",(async()=>{(0,o.l_)((0,o.QX)("#destroyCount")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-destroys")).toBe(1);const t=(0,o.QX)("#destroyable-content");(0,o.l_)(t).toBe(1,"Expected #destroyable-content to be defined");let e=Number((0,o.dy)("#destroyCount"));(0,o.V4)("#toggle-destroys");let n=Number((0,o.dy)("#destroyCount"));const r=e+1;(0,o.l_)(n).toBe(r,`Expected #destroyCount.innerHTML to be ${r} but it is ${n}`);const s=(0,o.QX)("#destroyable-content");(0,o.l_)(s).toBe(0,"Expected #destroyable-content to not exist"),e=n,(0,o.V4)("#toggle-destroys"),n=Number((0,o.dy)("#destroyCount")),(0,o.l_)(n).toBe(e),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1)}))},835:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("taggedjs-dump",(()=>{(0,o.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,o.L7)("taggedjs-dump-user-textarea");(0,o.l_)(t.value).toBe(""),t.value="{test:22}",(0,o.b$)(t),(0,o.l_)(t.value).toBe("{test:22}");const e=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(e.length).toBe(1),(0,o.l_)(e[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,o.b$)(t);const n=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(n.length).toBe(2),(0,o.l_)(n[0].innerText).toBe("test"),(0,o.l_)(n[1].innerText).toBe("testb"),t.value="",(0,o.b$)(t)}))}))},157:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("function in props",(async()=>{(0,o.di)("#fun_in_prop1","#fun_in_prop_display"),(0,o.di)("#fun_in_prop2","#fun_in_prop_display"),(0,o.di)("#fun_in_prop3","#fun_in_prop_display"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},488:(t,e,n)=>{n.r(e);var o=n(78);console.log("INCLUDED!!!"),(0,o.yY)("Injection Test",(()=>{const t=()=>{const t=[];for(let e=0;e<10;e++){const n=(0,o.L7)(`injection-test-item-${e}`);n&&t.push(n)}return t},e=()=>t().map((t=>t.querySelector('input[type="checkbox"]'))),n=()=>e().filter((t=>t?.checked)).length,r=()=>{const n=t();e().forEach(((t,e)=>{t?.checked&&n[e].click()}))};(0,o.HF)((()=>{r()})),(0,o.iu)((()=>{r()})),(0,o.it)("should have injection testing section with all items unchecked initially",(()=>{const n=(0,o.L7)("injection-testing-wrap-host");(0,o.l_)(n).toBeDefined();const r=t();(0,o.l_)(r.length).toBe(10);e().forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)}))})),(0,o.it)("should select individual items when clicked",(()=>{const r=t(),s=e();(0,o.l_)(n()).toBe(0),r[0].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(n()).toBe(1),r[2].click(),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(n()).toBe(2),r[4].click(),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(n()).toBe(3)})),(0,o.it)("should deselect items when clicked again",(()=>{(0,o.l_)(n()).toBe(0);const r=t(),s=e();r[1].click(),r[3].click(),r[5].click(),(0,o.l_)(n()).toBe(3),r[3].click(),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(n()).toBe(2),r[1].click(),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(n()).toBe(1),r[5].click(),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should select multiple items when clicking on different items",(()=>{const r=t(),s=e();r[0].click(),r[2].click(),r[4].click(),r[6].click(),r[8].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(s[6].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[8].checked).toBe(!0),(0,o.l_)(s[9].checked).toBe(!1),(0,o.l_)(n()).toBe(5)})),(0,o.it)("should toggle selection state correctly",(()=>{const n=t(),r=e();n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1)})),(0,o.it)("should maintain selection state across multiple operations",(()=>{const r=t(),s=e();r[1].click(),r[2].click(),r[3].click(),(0,o.l_)(n()).toBe(3),r[7].click(),r[9].click(),(0,o.l_)(n()).toBe(5),r[2].click(),r[7].click(),(0,o.l_)(n()).toBe(3),(0,o.l_)(s[1].checked).toBe(!0),(0,o.l_)(s[2].checked).toBe(!1),(0,o.l_)(s[3].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[9].checked).toBe(!0)})),(0,o.it)("should restore to original unchecked state after test",(()=>{const s=t(),a=e();s.forEach((t=>t.click())),(0,o.l_)(n()).toBe(10),r(),a.forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)})),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should handle rapid clicking without issues",(()=>{const n=t(),r=e();for(let t=0;t<10;t++)n[0].click();(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0)})),(0,o.it)("should update visual indicators when items are selected",(()=>{const e=t();e[0].click();const n=e[0].getAttribute("style")||"";(0,o.l_)(n.includes("background: rgb(76, 175, 80)")).toBe(!0),(0,o.l_)(n.includes("border: 3px solid rgb(51, 51, 51)")).toBe(!0);const r=e[1].getAttribute("style")||"";(0,o.l_)(r.includes("background: rgb(33, 150, 243)")).toBe(!0),(0,o.l_)(r.includes("border: 1px solid rgb(153, 153, 153)")).toBe(!0)}))}))},774:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("🪞 mirror testing",(()=>{(0,o.wG)("#mirror-counter-display",2),(0,o.wG)("#mirror-counter-button",2);const t=Number((0,o._8)("mirror-counter-display"));(0,o.L7)("mirror-counter-button").click(),(0,o.l_)(t+1).toBe(Number((0,o._8)("mirror-counter-display"))),(0,o.wG)("#mirror-counter-display",2),(0,o.Lo)("#mirror-counter-display")}))},994:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("oneRender",(()=>{(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,o.di)("#👍-counter-button","#👍-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,o.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🧳 props",(()=>{(0,o.it)("json",(()=>{const t=(0,o.L7)("props-debug-textarea");(0,o.l_)(t.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')})),(0,o.it)("test duels",(()=>{(0,o.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,o.it)("child prop communications",(()=>{(0,o.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,o.it)("basics",(()=>{const t=(0,o.dy)("#propsOneLevelFunUpdate-🥩-display"),e=(0,o.dy)("#propsDebug-🥩-change-count-display");(0,o.l_)(e).toBe((Number(t)+1).toString());const n=(0,o.L7)("propsDebug-🥩-0-display").innerHTML,r=(0,o.L7)("propsDebug-🥩-1-display").innerHTML,s=(0,o.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,a=Number(n),i=Number(r),c=Number(s);(0,o.l_)(i).toBe(c),(0,o.l_)(a+2).toBe(i)})),(0,o.it)("letProp",(()=>{(0,o.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,o.dy)("#propsDebug-🥩-0-display")),e=(0,o.IO)("#propsDebug-🥩-2-button")[0]._click();(0,o.l_)(e).toBe("no-data-ever"),(0,o.l_)((0,o.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,o.l_)((0,o.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,o.L7)("propsDebug-🥩-1-button").click()})),(0,o.it)("props as functions",(()=>{const t=Number((0,o._8)("sync-prop-number-display"));(0,o.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,o.L7)("sync-prop-child-button").click(),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🫴 providers",(()=>{(0,o.it)("basics",(()=>{(0,o.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,o.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,o.it)("inner outer debug",(()=>{(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,o.yY)("host attributes",(()=>{(0,o.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(255, 0, 0)")||e.borderColor.includes("red");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),t&&(0,o.l_)(t.innerHTML.trim()).toBe("wonderful - parent(red)")})),(0,o.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),e=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e&&(0,o.l_)(t.contains(e)).toBe(!0)})),(0,o.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),e=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,o.wS)(t);const n=window.getComputedStyle(e),r=n.borderColor.includes("blue")||n.borderColor.includes("rgb(0, 0, 255)");(0,o.l_)(r).toBe(!0,`in-cycle-parent should be blue not ${n.borderColor}`)}})),(0,o.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),e=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("purple")||n.borderColor.includes("rgb(128, 0, 128)");(0,o.l_)(r).toBe(!0)}})),(0,o.it)("child2 has correct innerHTML and green border",(()=>{const t=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),t){(0,o.l_)(t.textContent.trim().replace(/\n(\s+)/g," ")).toBe("wonderful too part 2");const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child2 color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select-2"),e=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="orange",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("orange")||n.borderColor.includes("rgb(255, 165, 0)");(0,o.l_)(r).toBe(!0,`in-cycle-child-2 should be orange not ${n.borderColor}`)}}))}))}))},451:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("basic app subject",(()=>{const t=(0,o.dZ)("#app-counter-subject-value-display");(0,o.V4)("#app-counter-subject-button");const e=(0,o.dZ)("#app-counter-subject-value-display");(0,o.l_)(Number(t)).toBe(Number(e)-1)}))},528:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 subscriptions",(()=>{(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1")})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,o.it)("subscribe",(async()=>{(0,o.l_)((0,o._8)("content-subscribe-sub0")).toBe(""),(0,o.l_)((0,o._8)("content-subscribe-sub0-with")).toBe("-1")})),(0,o.yY)("passed in subscription",(()=>{(0,o.it)("increase subscription",(async()=>{const t=(0,o.L7)("passed-in-sub-increase"),e=(0,o.L7)("passed-in-sub-hide-show"),n=(0,o.L7)("passed-in-sub-hideShow-value");(0,o.l_)(n.textContent).toBe(""),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),e.click();let r=(0,o._8)("passed-in-output");(0,o.l_)(n.textContent).toBe("true"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0");const s="0||||0",a="1||||1",i=(0,o._8)("passed-in-sub-ex1"),c=`1||your fun number ${r}||1`;(0,o.l_)(i).toBe(c,`failed after hide expected #passed-in-sub-ex1 to be ${c} but its ${i}`),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),t.click(),r=(0,o._8)("passed-in-output"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe(`0||${r}||0`),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed third increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),e.click();const l=(0,o._8)("passed-in-sub-ex0");(0,o.l_)(l).toBe(s,`Lest click check expected #passed-in-sub-ex0 to be ${s} but it is ${l}`);const u=(0,o._8)("passed-in-sub-ex1");(0,o.l_)(u).toBe(a,`Failed closing expected #passed-in-sub-ex1 ${u} to be ${a} but it is ${u}`),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,o.it)("host",(()=>{let t=Number((0,o._8)("hostDestroyCount"));(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1,"hostedContent html not as expected"),(0,o.cS)("hostHideShow"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1,"host destroy mismatch"),(0,o.l_)((0,o._8)("hostedContent")).toBe(""),(0,o.cS)("hostHideShow"),(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1,"hostedContent check 2 not right"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1,"host destroy mismatch 2")})),(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,o.l_)((0,o.dy)("#content-dom-parse-0-0")).toBe((0,o.dy)("#content-dom-parse-0-1"))})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")}))}))},168:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🔀 tagSwitching",(()=>{(0,o.it)("0",(()=>{(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(1),(0,o.l_)((0,o.o5)("#tag-switch-dropdown")).toBe(1),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(2),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,o.it)("1",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="1",t.onchange({target:t}),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0),(0,o.wG)("#tagSwitch-1-hello",5)})),(0,o.it)("2",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="2",t.onchange({target:t}),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",4),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("3",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="3",t.onchange({target:t}),(0,o.l_)((0,o.L7)("selectTag-display").textContent).toBe("3"),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(0);const e=(0,o.o5)("#tagSwitch-2-hello");(0,o.l_)(e).toBe(0,`Expected no #tagSwitch-2-hello but got ${e}`),(0,o.wG)("#tagSwitch-3-hello",7),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("4",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="",t.onchange({target:t}),(0,o.wG)("#select-tag-above",1),(0,o.wG)("#tag-switch-dropdown",1),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",0),(0,o.wG)("#tagSwitch-3-hello",0)}))}))},525:(t,e,n)=>{function o(t){const e=((new Error).stack||"").split("\n")[3]||"";return{toBe(n,o){if(t!==n){const r="function"==typeof o?o():o,s=r||`Expected ${JSON.stringify(n)} but got ${JSON.stringify(t)}`,a=new Error(s);throw a.stack=s+"\n"+e+(a.stack?"\n"+a.stack:""),a}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(e,n){if("number"!=typeof t||!(t>e))throw new Error(`Expected ${t} to be greater than ${e}\n\n${n}`)},toHaveLength(e){const n=t;if(!("length"in n)||n.length!==e)throw new Error(`Expected length ${e} but got ${n.length||"undefined"}`)},not:{toBe(e){if(t===e)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(e)}`)}}}}n.d(e,{l:()=>a});const r=void 0!==globalThis.vitest,s=r?globalThis.expect:null;const a=r&&s?function(t,e){if(void 0!==e){const n=s(t);return{toBe(t){try{n.toBe(t)}catch(t){throw new Error(e)}},toBeDefined(){try{n.toBeDefined()}catch(t){throw new Error(e)}},toBeUndefined(){try{n.toBeUndefined()}catch(t){throw new Error(e)}},toBeGreaterThan(t){try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}},toHaveLength(t){try{n.toHaveLength(t)}catch(t){throw new Error(e)}},not:{toBe(t){try{n.not.toBe(t)}catch(t){throw new Error(e)}}},to:{be:{greaterThan:t=>{try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}}}}}}const n=s(t);return{...n,to:{be:{greaterThan:e=>s(t).toBeGreaterThan(e)}},toBe:t=>n.toBe(t)}}:function(t,e){if(void 0!==e){const n=o(t);return{toBe(t){n.toBe(t,e)},toBeDefined(){n.toBeDefined()},toBeUndefined(){n.toBeUndefined()},toHaveLength(t){n.toHaveLength(t)},not:{toBe(t){n.not.toBe(t)}},to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}const n=o(t);return{...n,to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}},78:(t,e,n)=>{n.d(e,{iu:()=>L,HF:()=>E,L7:()=>m,wS:()=>f,VJ:()=>g,V4:()=>l,cS:()=>u,dQ:()=>d,QX:()=>s,yY:()=>j,o5:()=>a,l_:()=>r.l,wG:()=>k,Fr:()=>S,Lo:()=>_,T_:()=>c,dy:()=>b,_8:()=>y,it:()=>I,WB:()=>p,Sb:()=>h,IO:()=>i,_v:()=>C,di:()=>B,Iq:()=>V,dZ:()=>x,b$:()=>w});var o=n(995),r=n(525);function s(t){return document.querySelectorAll(t).length}const a=s;function i(t){return document.querySelectorAll(t)}function c(t){return i(t).forEach((t=>t.focus()))}function l(t){[...i(t)].forEach((t=>t.click()))}function u(t){l("#"+t)}function d(t,e=0){i(t)[e].click()}function p(t,e){const n=new KeyboardEvent("keydown",{key:e,bubbles:!0});t.dispatchEvent(n)}function h(t,e){const n=new KeyboardEvent("keyup",{key:e,bubbles:!0});t.dispatchEvent(n)}function g(t,e=0){f(i(t)[e])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function b(t){let e="";return i(t).forEach((t=>e+=t.innerHTML)),e}function x(t){let e="";return i(t).forEach((t=>e+=t.textContent)),e}function m(t){return document.getElementById(t)}function y(t){const e=document.getElementById(t);return e?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const v=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(v)}function C(t){return new Promise((e=>setTimeout(e,t)))}function k(t,e,n){const o=document.querySelectorAll(t),s=o.length;return n=n||`Expected ${e} elements to match query ${t} but found ${s}`,(0,r.l)(s).toBe(e,n),o}function _(...t){const e=t.reduce(((t,e)=>{const n=document.querySelectorAll(e);return t.push(...n),t}),[]);if(0===e.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const n=e.pop().innerHTML;e.forEach((t=>(0,r.l)(t.innerHTML).toBe(n)))}function S(t,e){(0,r.l)(b(t)).toBe(e)}function T(t,e,{elementCountExpected:n}={elementCountExpected:1},o,s,a=0){(0,r.l)(t.length).toBe(n,(()=>`Expected ${o} to be ${n} elements but is instead ${t.length}`)),(0,r.l)(e.length).toBe(n,(()=>`Expected ${s} to be ${n} elements but is instead ${e.length}`)),t.forEach(((t,e)=>{const n=document.querySelectorAll(s)[e];(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body BEFORE clicking ${o}`);let i=Number(n?.innerText);(0,r.l)(typeof t.click).toBe("function"),t.click(),(0,r.l)(n).toBeDefined(),(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body AFTER clicking ${o}`);let c=i+1;i=Number(n.innerText),(0,r.l)(document.body.contains(n)).toBe(!0),(0,r.l)(c).toBe(i,(()=>`After click ${o}, counter test ${a+1} of ${a+2} expected ${s} to be value ${c} but it is ${i}`)),t.click(),i=Number(n?.innerText),++c,(0,r.l)(c).toBe(i,(()=>`Counter test ${a+2} of ${a+2} expected ${s} to increase value to ${c} but it is ${i}`))}))}function B(t,e,{elementCountExpected:n}={elementCountExpected:1}){return T(document.querySelectorAll(t),document.querySelectorAll(e),{elementCountExpected:n},t,e)}function V(...t){const[e,n]=t.shift();let o=k(n,1),s=k(e,1);const a=o[0].innerText;T(s,o,{elementCountExpected:1},e,n);let i=2;t.forEach((([t,c],l)=>{o=k(c,1),s=k(t,1);let u=o[0],d=u.innerText;const p=(Number(a)+i).toString();(0,r.l)(d).toBe(p,(()=>`Expected second ${c} increase provider to be increased to ${a} but got ${d}`)),T(s,o,{elementCountExpected:1},e,n,l+2),u=o[0],d=u.innerText;const h=i+2;(0,r.l)(d).toBe((Number(a)+h).toString(),(()=>`Expected ${c} innerText to be ${Number(a)+h} but instead it is ${d}`)),i+=2}))}const J=void 0!==globalThis.vitest,I=J?globalThis.it:o.it,j=J?globalThis.describe:o.yY,E=J?globalThis.beforeEach:o.HF,L=J?globalThis.afterEach:o.iu},995:(t,e,n)=>{n.d(e,{HF:()=>u,executeBrowserTests:()=>p,it:()=>c,iu:()=>d,yY:()=>l});n(525);let o=null,r=new Map,s=[],a=new Map;const i=void 0!==globalThis.vitest,c=i?globalThis.it:(t,e)=>{const n={name:t,fn:e,suite:o};s.push(n);const a=r.get(o)||[];a.push(n),r.set(o,a)},l=i?globalThis.describe:(t,e)=>{const n=o;o=t,r.set(t,[]),a.set(t,{beforeEach:[],afterEach:[]}),e(),o=n},u=i?globalThis.beforeEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.beforeEach.push(t),a.set(o,e)},d=i?globalThis.afterEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.afterEach.push(t),a.set(o,e)};async function p(){let t=0,e=0;const n=[];console.log(`🧪 Running ${s.length} tests...\n`);const i=new Map;for(const t of s){const e=t.suite||null,n=i.get(e)||[];n.push(t),i.set(e,n)}for(const[o,r]of i){o&&console.log(`${o}`);for(const s of r){const r=o?"  ":"",i=a.get(s.suite);try{if(i?.beforeEach)for(const t of i.beforeEach)await t();if(await s.fn(),t++,console.log(`${r}✅ ${s.name}`),i?.afterEach)for(const t of i.afterEach)await t()}catch(t){if(e++,n.push({test:s.name,suite:s.suite,error:t}),console.error(`${r}❌ ${s.name}`),console.error(t),i?.afterEach)for(const t of i.afterEach)try{await t()}catch(t){console.error("Error in afterEach hook:",t)}}}o&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${e} failed`),n.length>0&&(console.error("\n❌ Failed Tests:"),n.forEach((({test:t,suite:e,error:n})=>{const o=e?`${e} > ${t}`:t;if(console.error(`\n${o}:`),console.error(n),n.stack){n.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),s=[],r.clear(),a.clear(),o=null,0===e}},337:(t,e,n)=>{n.r(e);var o=n(78);function r(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let e=0;e<500;e++)t.value="aaa - "+e,(0,o.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const e=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)e[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const n=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)n[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,o.yY)("☑️ todos",(function(){const t=(0,o.IO)(".new-todo")[0];(0,o.it)("todos add one remove one",(async function(){(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.l_)(t).toBeDefined(),t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0)})),(0,o.it)("todos basic",(async function(){window.location.hash="#/",await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),(0,o.V4)("input.toggle"),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),t.value="two",(0,o.WB)(t,"Enter");const e=(0,o.IO)("input.toggle")[1];e.click(),(0,o.l_)(e.checked).toBe(!0),t.value="three",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.V4)("#todo-view-active-link"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.l_)(window.location.hash).toBe("#/active"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.V4)("#todo-view-completed-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(0)})),(0,o.it)("todos editing",(function(){t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0);let e=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,o.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(e),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(1),(0,o.T_)("input#edit-todo-input");const n=(0,o.IO)("input#edit-todo-input")[0];n.value="two",(0,o.WB)(n,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0)})),(0,o.it)("⌚️ todos speedometer",r)}))},702:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("⌚️ watch tests",(()=>{const t=(0,o.dy)("#🍄-slowChangeCount"),e="0"===t;(0,o.it)("basic",(async()=>{const n=Number((0,o._8)("watch-testing-num-display"));(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),e?((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,o.l_)(Number((0,o.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe((0,o.dy)("#🦷-truthSubChangeCount"))),(0,o.V4)("#watch-testing-num-button"),(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🍄‍🟫-subjectChangeCount")).toBe((n+2).toString()),(0,o.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const r=Number((0,o.dy)("#🦷-truthChangeCount"));(0,o.V4)("#🦷-truthChange-button");let s=(r+1).toString();(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+1).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+2).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),(0,o.V4)("#🦷-reset-button");const a=(0,o.dy)("#🦷-watchTruth"),i=(0,o.dy)("#🦷-watchTruthAsSub");(0,o.l_)(i).toBe(a)}))}))}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={exports:{}};return t[o](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.d(o,{gV:()=>Ql,jG:()=>ru,fm:()=>Js,KH:()=>au,bX:()=>Lr,mK:()=>ia});const t=":tagvar",e=":";function r(t){if(t.startsWith("class."))return"class";const e=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==e?e:!!t.startsWith("style.")&&"style"}const s=new RegExp(t+"(\\d+)"+e,"g");function a(e){return e.search&&e.startsWith(t)?e.search(s):-1}const i=/(:tagvar\d+:)/,c="ondoubleclick",l=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,u=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function d(n){const o=[],r=[],s=[];let a=null,c=-1,d=0;const g=new RegExp(u,"g");for(n=function(t){return t.replace(p,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(n);d<n.length;){const u=g.exec(n);if(!u)break;const[p,b,m]=u,y=p.startsWith("</"),v=p.endsWith("/>");if(d<u.index){const o=n.slice(d,u.index);if(o.trim()){const n=f(o);for(let o of n)o.startsWith(t)&&o.search(i)>=0&&-1===o.search(w)&&(o=t+ ++c+e),h(a,r,o)}}if(d=u.index+p.length,y){a=s.pop()||null;continue}const C=[];let k;for(;null!==(k=l.exec(m));)c=x(k,c,o,C);const _={nn:b};C.length&&(_.at=C),a?(a.ch||(a.ch=[]),a.ch.push(_)):r.push(_),v||(s.push(a),a=_)}if(d<n.length){const e=n.slice(d);if(e.trim()){const n=f(e);for(const e of n)e.startsWith(t)&&++c,h(a,r,e)}}return r}const p=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function h(t,e,n){!function(t,e,n){t?(t.ch||(t.ch=[]),t.ch.push(n)):e.push(n)}(t,e,{nn:"text",tc:g(n)})}function g(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function f(t){return t.split(i).filter(b)}function b(t){return""!==t}function x(n,o,a,i){const l=n[1]||n[3]||n[5];let u=n[2]||n[4]||n[6];if(void 0===l)return o;const d=""!==n[2],p=void 0===u&&d,h=l.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===c.length&&t===c?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(l.slice(0,t.length)===t){const n=t+ ++o+e;return a.push(["at",n]),i.push([n]),o}if(n[0].startsWith(l)&&n[0].slice(l.length,n[0].length).search(/\s+$/)>=0)return i.push([g]),o;const r=n[3];if(r.search(w)>=0){u=r;const t=[g,u];return i.push(t),o}u=t+ ++o+e}d||(u=n[2]);const f=u.split(y).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(s)>=0&&++o})));const b=[g,u],x=r(h);return x&&b.push(x),"style"===g?(i.unshift(b),o):(i.push(b),o)}const m=new RegExp(t+"(\\d+)"+e,"gi"),y=new RegExp("("+t+"\\d+"+e+")","gi"),v=t.slice(0,t.length-1),w=new RegExp(v+"&#x72;(\\d+)"+e,"gi"),C=v+"&#x72;$1"+e;function k(n,o){const r=function(n,o){const r=n;return function(n,o){const r=[];for(let s=0;s<n.length;++s){const a=n[s].replace(m,C);s<o.length?r.push(a+t+s+e):r.push(a)}return function(n,o,r){const s=r.length-o.length;if(s>0)for(let r=s;r>0;--r)n.push(t+(o.length+r-1)+e)}(r,n,o),r}(r,o)}(n,o).join("");return d(r)}const _="";var S,T;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(S||(S={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(T||(T={}));const B={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},V="ch";function J(t,e,n=[],o=[]){const r=t;for(let t=0;t<r.length;t++){const s=[...o,t],a=r[t];if(a.at){const t=a.at;a.at=j(t,e)}if(a.ch){const t=a.ch,o=[...s,V];a.ch=J(t,e,n,o)}t=I(a,e,r,t)}return r}function I(n,o,r,a){if("text"!==n.nn)return a;const i=n;let c,l=i.tc;if(typeof l!==S.string)return a;for(;null!==(c=s.exec(l));){const n=c[1],i=parseInt(n,10);if(!isNaN(i)&&i<o){const n=t+i+e,o=l.slice(c.index+n.length);r.splice(a,1,{nn:"text",v:i}),l=o,s.lastIndex=0}}return i.tc=l,a}function j(e,n){const o=[];for(const r of e){const[e,s,a]=r;if(e.startsWith(t)){const r=parseInt(e.replace(t,""),10);if(!isNaN(r)&&r<n){o.push([{tagJsVar:r}]);continue}}if(typeof s===S.string&&s.startsWith(t)){const r=parseInt(s.replace(t,""),10);if(!isNaN(r)&&r<n){o.push([e,{tagJsVar:r},a]);continue}}o.push(r)}return o}function E(t){return t.length}const L={};function P(t,e){const n=function(t){const e=t.map(E);return e.push(t.length),Number(e.join(""))}(t),o=L[n],r=o&&function(t,e,n){if(n&&n.strings.length===t.length&&n.strings.every(((e,n)=>e===t[n]))&&n.values.length===e.length)return!0;return!1}(t,e,o);if(r)return o.domMetaMap;const s=J(k(t,e),e.length),a={interpolation:void 0,string:void 0,strings:t,values:e,domMetaMap:s};return L[n]=a,s}const D=function(){};let O=[];const N=[];let $=[],A=[],H=[];const M={locks:0,removeLocks:0};function R(t,e){e.textContent=t}function U(){if(!(M.locks>0))return function(){const t=N.length;(function(){for(const t of N)t[0](...t[1])})(),N.splice(0,t);for(const t of $)t[0](...t[1]);for(const t of A)t[0](...t[1]);for(const t of O)t[0](...t[1])}(),void function(){O=[],$=[],A=[];const t=H;H=[];for(const e of t)e[0](...e[1])}()}function W(t,e){N.push([z,[t,e]])}function z(t,e){t||console.info("no element by",e);t.parentNode.removeChild(t)}function F(t,e,n){t.parentNode.insertBefore(e,t)}function Y(t,e){t.appendChild(e)}const X="object"==typeof document&&document.createElement("div");function q(t){return X.innerHTML=t,document.createTextNode(X.innerHTML)}function G(t,e,n=D,o){const r=q(e);F(t,r),n(r)}function K(t,e,n=D){X.innerHTML=e;const o=document.createTextNode(X.textContent);F(t,o),n(o)}function Q(t,e,n){X.innerHTML=e;const o=document.createTextNode(X.textContent);Y(t,o),n(o)}function Z(t,e){++t.updateCount;const n=tt(t.subContext,e);return delete t.subContext,n}function tt(t,e){t.deleted=!0;const n=t.appendMarker;if(n&&(W(n,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const o=t.contextItem;return o.tagJsVar.destroy(o,e),76}function et(t){if(!t)return!1;switch(t.tagJsType){case B.dom:case B.tag:case B.templater:return!0}return!1}function nt(t){const e=t?.tagJsType;return e===B.tagComponent||e===B.stateRender}function ot(t){return at(t)&&typeof t.subscribe===T.function}function rt(t){return t&&st(t.then)}function st(t){return typeof t===T.function}function at(t){return typeof t===T.object&&null!==t}function it(t){return Array.isArray(t)}function ct(t){return t.renderCount=t.renderCount||0,t.state={newer:{state:[],states:[]}},t.global={blocked:[]}}function lt(){return Jt.stateConfig.support}function ut(t){return fr(t.context),Jt.stateConfig.support=t}function dt(t){const e=t.state;return e&&e.newest&&e.newest?e.newest:t.parentContext?dt(t.parentContext):void 0}function pt(t){let e=t;for(;e.ownerSupport&&!nt(e.templater);)e=e.ownerSupport;const n=e.context.state;return n&&n.newest||e}function ht(...t){return t}function gt(t){const e=Jt.stateConfig;return e.states[e.statesIndex]=t,++e.statesIndex,t(ht)}function ft(t){const e=Jt.stateConfig,n=e.statesIndex,o=pt(e.prevSupport).context.state.newer.states[n];let r=[];o((function(...t){return r=t,t}));return e.states[e.statesIndex]=t,++e.statesIndex,t((function(...t){return r}))}function bt(t){fr(t);const e=Jt.stateConfig;e.handlers.handler=Ct,e.handlers.statesHandler=gt,e.rearray=[];const n=e.state=[],o=e.states=[];e.statesIndex=0;(t.state=t.state||{}).newer={state:n,states:o}}function xt(t){const e=Jt.stateConfig;return e.rearray=t,e.state=[],e.states=[],e.statesIndex=0,e.handlers.handler=wt,e.handlers.statesHandler=ft,e}function mt(t,e,n){xt(n);Jt.stateConfig.prevSupport=e,ut(t)}class yt{}function vt(t){const e=t.callback;if(!e)return t.defaultValue;const[n]=function(t){const[e]=t(yt),[n]=t(e);return[e,n]}(e);return n}function wt(){const t=Jt.stateConfig,e=t.rearray[t.state.length];return t.state.push(e),e.defaultValue}function Ct(t){const e=Jt.stateConfig,n=hr();if(!n||!n.state){const t="State requested but TaggedJs is not currently rendering a tag or host";throw console.error(t,{config:e,context:n}),new Error(t)}const o=n.state.newer;e.state=o.state;let r=t;if(typeof t===T.function&&(r=t()),typeof r===T.function){const t=r;r=function(...e){return t(...e)},r.original=t}const s={get:function(){return vt(s)},defaultValue:r};return e.state.push(s),r}function kt(t){const e=new Tt;return e.subscribeWith=e=>{const n=[],o=[],r=(r,s)=>{n[s]=!0,o[s]=r;if(n.length===t.length){for(const t of n)if(!t)return;e(o,a)}},s=[...t],a=s.shift().subscribe((t=>r(t,0))),i=s.map(((t,e)=>t.subscribe((t=>r(t,e+1)))));return a.subscriptions=i,a},e}function _t(t,e,n){const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value+1);const r=function(){r.unsubscribe()};return r.callback=e,r.subscriptions=[],r.unsubscribe=function(){return function(t,e,n){!function(t,e){const n=t.findIndex((t=>t.callback===e));-1!==n&&t.splice(n,1)}(e,n);const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value-1),t.unsubscribe=()=>t;const r=t.subscriptions;for(const t of r)t.unsubscribe();return t}(r,n,e)},r.add=t=>(r.subscriptions.push(t),r),r.next=t=>{e(t,r)},r}function St(t,e,n){const o=[...e],r=o.shift(),s=t=>{if(o.length)return St(t,o,n);n(t)};let a=s;const i=r(t,{setHandler:t=>a=t,next:s});a(i)}class Tt{constructor(t,e){this.onSubscription=e,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this),arguments.length>0&&(this.value=t)}subscribe(t){const e=_t(0,t,this.subscribers),n=this.subscribeWith;if(n){if(this.methods.length){const n=t;t=t=>{St(t,this.methods,(t=>n(t,e)))}}return n(t)}return this.subscribers.push(e),this.onSubscription&&this.onSubscription(e),e}next(t){this.value=t,this.emit()}emit(){const t=this.value,e=this.subscribers;for(const n of e)n.callback(t,n)}toPromise(){return new Promise((t=>{this.subscribe(((e,n)=>{n.unsubscribe(),t(e)}))}))}toCallback(t){const e=this.subscribe(((n,o)=>{const r=o?.unsubscribe;r?r():setTimeout((()=>e.unsubscribe()),0),t(n)}));return this}pipe(...t){const e=[];"value"in this&&e.push(this.value);const n=new Tt(...e);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return kt(t.map((t=>{if(ot(t))return t;return new Tt(t,(e=>(e.next(t),e)))})))}}Tt.globalSubCount$=new Tt(0);function Bt(t){Object.defineProperty(t,"value",{set(e){t._value=e,t.emit()},get:()=>t._value})}const Vt=new Tt(void 0,(function(t){lt()||t.next()})),Jt={stateConfig:{state:[],version:Date.now(),handlers:{handler:Ct,statesHandler:gt}},tagClosed$:Vt};function It(t,e,n){const o=t.tagJsVar.hasValueChanged(e,t,n);return 0===o||vr(e,t,n,o),o}function jt(t,e,n,o,r){const s=e.context;s.locked=3,n.element=n.element||o,fr(n),n.tagJsVar.processInit(t,n,e,r,o),br(),n.value=t,delete s.locked}function Et(t){switch(t){case void 0:case!1:case null:return _}return t}function Lt(t,e,n,o){switch(o){case"autofocus":return void $.push([$t,[n]]);case"autoselect":return void $.push([Nt,[n]]);case"style":{const o=t.split(".");return void $.push([Pt,[n,o,e]])}case"class":return void function(t,e,n){const o=t.split(".");if(o.shift(),e){for(const t of o)$.push([Dt,[n,t]]);return}for(const t of o)$.push([Ot,[n,t]])}(t,e,n)}throw new Error(`Invalid special attribute of ${o}. ${t}`)}function Pt(t,e,n){const o=e[1];t.style[o]=n,t.style.setProperty(o,n)}function Dt(t,e){t.classList.add(e)}function Ot(t,e){t.classList.remove(e)}function Nt(t){t.select()}function $t(t){t.focus()}function At(t,e,n){"object"!=typeof t[e]&&(t[e]={});for(const o in n){const r=n[o];$.push([zt,[t,e,o,r]])}if(t[e].setProperty)for(const o in n){const r=n[o];$.push([Wt,[t,e,o,r]])}}function Ht(t,e,n){t.setAttribute(e,"")}function Mt(t,e,n){if(at(n))return At(t,e,n);Ut(t,e,n)}function Rt(t,e,n){t[e]=!!n}function Ut(t,e,n){t[e]=n,void 0!==n&&!1!==n&&null!==n?t.setAttribute(e,n):t.removeAttribute(e)}function Wt(t,e,n,o){t[e].setProperty(n,o)}function zt(t,e,n,o){t[e][n]=o}function Ft(t,e){const n=function(t,e,n=[]){const o=t.context;n.push({support:t,renderCount:o.renderCount,provider:e});const r=e.children;for(let t=r.length-1;t>=0;--t){const o=r[t],s=o.context;n.push({support:o,renderCount:s.renderCount,provider:e})}return n}(t,e);return n}function Yt(t){return t.support}function Xt(t,e){return qt(t,e)}function qt(t,e){if(null===t||typeof t!==T.object)return t;if(e<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const n=it(t)?[]:Object.create(Object.getPrototypeOf(t));if(it(t))for(let o=0;o<t.length;o++)n[o]=qt(t[o],e-1);else for(const o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=qt(t[o],e-1));return n}function Gt(t,e,n){return Kt(t,e,n)}function Kt(t,e,n){return!(t!==e&&(o=t,r=e,!st(o)||!st(r)||o.toString()!==r.toString()))||(n<0||typeof t===T.object&&typeof e===T.object&&(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():it(t)&&it(e)?function(t,e,n){if(t.length!==e.length)return!1;for(let o=0;o<t.length;o++)if(!Kt(t[o],e[o],n-1))return!1;return!0}(t,e,n-1):!it(t)&&!it(e)&&function(t,e,n){const o=Object.keys(t),r=Object.keys(e);if(0===o.length&&0===r.length)return!0;if(o.length!==r.length)return!1;for(const s of o){if(!r.includes(s)||!Kt(t[s],e[s],n-1))return!1}return!0}(t,e,n-1)));var o,r}function Qt(t,e){const n=t.length;for(let o=0;o<n;++o){const n=t[o],r=e[o];if(it(n)&&it(r)){if(n===r)continue;return 3}if(typeof n!==T.function||typeof r!==T.function)if(typeof n!==T.object){if(n!==r)return 3.3}else if(typeof e===T.object){const t=Object.entries(n);for(const e of t){if(!Zt(e,r))return 3.1}}}return!1}function Zt([t,e],n){const o=n[t];return typeof e===T.function&&typeof o===T.function||o===e}function te(t){return t.map(ee)}function ee(t,e){const n=t,o=t?.tagJsType;if(o)switch(o){case B.signal:case B.subscribe:case B.stateRender:return;case B.dom:case B.tag:case B.templater:return te(n.values)}return it(t)?te(n):Xt(t,e)}function ne(t){return ee(t,Pn)}function oe(t){return ee(t,Dn)}function re(t,e,n){const o={templater:t,context:e,castedProps:n,appSupport:void 0};return e.global.blocked=[],e.state||(e.state={newer:{state:[],states:[]}}),o}function se(t,e,n,o){e.appSupport=n;const r=t.props;return r&&(e.propsConfig=function(t,e,n){const o=t.templater;if(o.tagJsType!==B.stateRender){switch(o.propWatch){case Bn.IMMUTABLE:return t.propsConfig={latest:e,castProps:n};case Bn.SHALLOW:return t.propsConfig={latest:e.map(ne),castProps:n}}return t.propsConfig={latest:e.map(oe),castProps:n}}}(e,r,o)),e}function ae(t,e){const n=e.providers;if(n)for(const t of n)for(let n=t.children.length-1;n>=0;--n){t.children[n].context.global===e&&t.children.splice(n,1)}t.context.destroy$.next(),t.context.renderCount=0}function ie(t,e){for(const n of t){const t=n.lastArray;if(t){ie(t,e);continue}const o=n.value;if(o?.tagJsType===B.subscribe){o.destroy(n,e),n.deleted=!0;continue}const r=n.global;if(!r)continue;const s=n.state.newest,a=r.subscriptions;a&&a.forEach(le),nt(s.templater)&&ae(s,r);ie(n.contexts,s),r.deleted=!0}}function ce(t,e=[],n=[]){for(const o of t){const t=o.global;if(!t)continue;const r=o.state.newest;if(r){e.push(r);const o=t.subscriptions;o&&n.push(...o)}const s=o.contexts;s&&ce(s,e,n)}return{tags:e,subs:n}}function le(t){t.unsubscribe()}function ue(t,e,n,o){const r=t.length-1,s=e-o,a=s<0||r<s,i=n[e];if(a)return de(i),1;const c=function(t,e,n,o,r){const s=e&&t!==e.arrayValue;if(s)return de(n),o.splice(r,1),2;return 0}(i.value.arrayValue,t[e],i,n,e);return c}function de(t){!function(t,e){if(t&&e.state?.oldest){return void xe(e.state.oldest,t)}e.tagJsVar.destroy(e,{})}(t.global,t)}function pe(t){++t.updateCount;he(t,t.lastArray)}function he(t,e){for(let t=0;t<e.length;++t)de(e[t]);delete t.lastArray}function ge(t){const e=t.marker;e&&W(e,"destroyMarker");W(t.domElement,"destroyClone")}function fe(t,e){!function(t,e){for(const n of t){if(n.withinOwnerElement){const t=n.tagJsVar;if(t&&"host"===t.tagJsType){const o=n.supportOwner,r=t.destroy(n,o);rt(r)&&e.push(r)}continue}const t=n.lastArray;if(t){he(n,t);continue}const o=n.simpleValueElm;if(o){delete n.simpleValueElm,W(o,"smartRemoveByContext");continue}const r=n.global;if(void 0===r)continue;r.deleted=!0;const s=n.state?.oldest;s&&fe(n,e)}}(t.contexts,e),be(t)}function be(t){!function(t){for(let e=t.length-1;e>=0;--e)ge(t[e]),t.splice(e,1)}(t.htmlDomMeta)}function xe(t,e){const n=t.context;e.deleted=!0,n.renderCount=0;const o=[];return ie(n.contexts,t),t.templater.wrapper&&ae(t,e),fe(n,o),delete n.state,delete n.contexts,delete n.returnValue,o}function me(t,e){const n=ye(t,e);return!(n||!e.templater.tag?._innerHTML||!ye(t.outerHTML,e))||n}function ye(t,e){const n=t.templater,o=e.templater,r=n?.tag||t,s=o.tag;if(n?.tagJsType===B.stateRender)return n.dom===o.dom;switch(r.tagJsType){case B.dom:return s?.tagJsType===B.dom&&function(t,e){const n=t.dom,o=e.dom;return n===o}(r,s);case B.tag:{const n=function(t,e,n,o){const r=t.strings,s=e.strings;if(r.length!==s.length)return!1;if(!r.every(((t,e)=>s[e].length===t.length)))return!1;const a=n.templater.values||t.values,i=o.templater.values||e.values;return function(t,e){const n=t.length===e.length;if(!n)return!1;const o=e.every((function(e,n){const o=t[n];if(typeof e===T.function&&typeof o===T.function){return!!(e.toString()===o.toString())}return!0}));if(o)return!0;return!1}(a,i)}(r,s,t,e);return n}}throw new Error(`unknown tagJsType of ${r.tagJsType}`)}function ve(t){++t.updateCount;const e=t.global;xe(t.state.newest,e),function(t){t.htmlDomMeta=[],delete t.contexts,delete t.state,delete t.global,t.renderCount=0}(t)}function we(t,e){const n=e.global,o=e.state?.newest;if(et(t)){return me(t,o)?(yr(e,t,o),0):(xe(o,n),ct(e),7)}const r=t?.tagJsType;if(r){return!0===yr(e,t,e.state.newest.ownerSupport)?0:88}return ve(e),8}function Ce(t,e,n,o){const r={updateCount:0,value:t,destroy$:new Tt,tagJsVar:Jo(t),withinOwnerElement:n,parentContext:o,valueIndex:e.length};return e.push(r),r}function ke(t,e,n,o,r,s,a){const i=document.createTextNode(_),c=Ce(t,e,r>0,o);return c.placeholder=i,c.element=s,s?A.push([Y,[s,i]]):O.push([F,[a,i,"attachDynamicDom.attachDynamicDom"]]),jt(t,n,c,s,a),c}function _e(t,e,n,o,r,s){for(const a of t){const t=a[0],i=a[1],c=a[2]||!1;let l=a.length>1?Mt:Ht;a[3]&&(l=a[3]);const u=co(t,i,e,n,o,l,o.context.contexts,r,c);"object"==typeof u&&s.push(u)}}function Se(t,e,n,o,r,s,a){const i=[];return e.at&&_e(e.at,n,t,o,r,i),s?A.push([Y,[s,t,"appendToAttachDomElement"]]):O.push([F,[a,t,"insertBeforeAttachDomElement"]]),i}function Te(t,e,n,o,r,s,a){const i=n.context.contexts,c=[];s&&void 0===a&&(a=document.createTextNode(_),A.push([Y,[s,a]]),s=void 0);for(let l=0;l<t.length;++l){const u=t[l],d=u.v;if(!isNaN(d)){ke(e[i.length],i,n,o,r,s,a);continue}const p={};if(c.push(p),"text"===u.nn){Be(p,u,s,a);continue}const h=p.domElement=document.createElement(u.nn),g={updateCount:0,isAttrs:!0,element:h,parentContext:o,contexts:[],destroy$:new Tt,tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,withinOwnerElement:!0},f=Se(h,u,e,n,g,s,a);g.element=h,g.contexts=f,u.ch&&(p.ch=Te(u.ch,e,n,g,r+1,h,a).dom)}return{dom:c,contexts:i}}function Be(t,e,n,o){const r=t,s=r.tc=e.tc;n?A.push([Q,[n,s,function(t){r.domElement=t}]]):O.push([K,[o,s,function(t){r.domElement=t}]])}function Ve(t,e,n){const o=t.context;o.state=o.state||{};const r=o.state;r.oldest=t,r.newest=t,o.state.older=o.state.newer,++M.locks;const s=function(t,e,n,o){const r=function(t){const e=t.templater,n=e.tag;if(n.tagJsType===B.dom)return n.dom;const o=n.strings;return P(o,n.values)}(t),s=t.templater.tag,a=s.values,i=[];t.context.contexts=i;const c=Te(r,a,t,e,0,n,o);return c}(t,t.context,e,n);return o.htmlDomMeta=s.dom,--M.locks,s}function Je(t,e){const n=e.state.newest,o=e.placeholder;return n.ownerSupport=t,Ve(n,void 0,o),n}function Ie(t){const e={tagJsType:B.templater,processInitAttribute:D,processInit:Le,processUpdate:D,hasValueChanged:we,destroy:D,propWatch:"shallow",key:D};return e.tag=t,t.templater=e,e}function je(t,e,n){const o=function(t,e,n,o,r){const s={templater:t,context:o,castedProps:r,appSupport:void 0};return s.ownerSupport=e,s.appSupport=n,s}(t,e,e.appSupport,n);return n.contexts=[],o}function Ee(t,e,n,o,r){const s=je(t,n,e);s.ownerSupport=n;const a=Ve(s,o,o?void 0:r);for(const t of a.dom)t.marker&&(o?A.push([Y,[o,t.marker]]):O.push([F,[r,t.marker,"subMarker"]])),t.domElement&&(o?A.push([Y,[o,t.domElement,"subAppendTo"]]):O.push([F,[r,t.domElement,"subInsertBefore"]]));return s}function Le(t,e,n,o,r){return e.state={},r?Ee(t,e,n,r,o):Je(n,e)}function Pe(t,e,n){++e.updateCount;const o=e.tagJsVar.tagJsType;return o&&["tag-conversion","element"].includes(o)?(e.tagJsVar.processUpdate(t,e,n,[]),e.value=t,0):t===e.value?0:It(e,t,n)}function De(t,e){const n={tagJsType:B.templater,processInit:Le,processInitAttribute:D,processUpdate:Pe,hasValueChanged:we,destroy:ve,propWatch:t,props:e,key:function(t){return n.arrayValue=t,n},matchesInjection:t=>n.wrapper===t||n.wrapper?.original===t?.original};return n}const Oe=[];function Ne(t){const e=t.context;return Un(t.templater)?zn(t):Rn(t,t,e)}function $e(t,e,n){return t.map((function(t){return function(t,e,n,o){if(et(t)||!t)return t;if(!e)return t;return Ae(t,e,n,o)}(t,e.ownerSupport,e,n)}))}function Ae(t,e,n,o,r){if(!t)return t;if(t.tagJsType)return t;if(typeof t===T.function)return o<=1?function(t,e,n){const o=t.mem;if(o)return t;const r=function(...t){return function(t,e,n,o){const r=o.context,s=r.state?.newest||o,a=void 0===lt(),i=t.apply(e,n),c=function(){const t=s.context,e=t.global;return t.locked?i:e?(Ne(s),i):(r.tagJsVar.processUpdate(r.value,r,o,[]),i)};if(a)return c();return Jt.tagClosed$.toCallback(c),i}(r.mem,e,t,n)};return r.original=t,r.mem=t,Object.assign(r,t),r}(t,r,e):t;if(o===Dn)return t;return Me(t)?t:it(t)?function(t,e,n,o){for(let r=t.length-1;r>=0;--r){const s=t[r];if(t[r]=Ae(s,n,e,o+1,t),typeof s===T.function){if(s.mem)continue;He(o+1,r,s,t,e)}}return t}(t,n,e,o):function(t,e,n,o){const r=Object.keys(t);for(const s of r){const r=t[s],a=Ae(r,n,e,o+1,t);if(t[s]===a)continue;const i=Object.getOwnPropertyDescriptor(t,s);if(!(i?.get||i?.set)&&(t[s]=a,typeof a===T.function)){if(r.mem)continue;He(o+1,s,r,t,e)}}return t}(t,n,e,o)}function He(t,e,n,o,r){t>0&&(o[e].subscription=r.context.destroy$.toCallback((function(){o[e]=n})))}function Me(t){return typeof t!==T.object||!t||t.tagJsType}function Re(t,e,n,o){const r=e.original,s=t.tagJsType===B.stateRender,a=Jt.stateConfig;let i;return ut(n),s?i=t():(i=r(...o),typeof i===T.function&&void 0===i.tagJsType&&(i=i())),n.context.returnValue=i,i.templater=t,t.tag=i,n.context.state.newer={...a},n}function Ue(t,e,n,o,r){const s=re(t,o,r);return s.ownerSupport=e,se(t,s,n,r)}function We(t,e,n){const o=t.propWatch===Bn.DEEP?Dn:Pn,r=t.props,s=e.propsConfig;let a=s.castProps;const i=n?.propsConfig,c=i?.castProps;c&&(s.castProps=c,a=$n(e,n,n.ownerSupport,r,o));return a||$e(r,e,0)}function ze(t,e){++t.context.renderCount,Fe(),Jt.tagClosed$.next(e)}function Fe(t){!function(t){const e=Jt.stateConfig,n=t||e.context;n.state=n.state||{},n.state.newer={...e};const o=e.support;n.state.newest=o}(t),function(){const t=Jt.stateConfig;delete t.prevSupport,delete t.support,delete t.state,delete t.states,br()}()}function Ye(t,e,n,o){let r;const s=t.templater;if(s.tagJsType===B.stateRender){const e=s;r=Ue(s,o,t.appSupport,n),Re(s,e,r)}else{r=(0,s.wrapper)(t,n,e)}return ze(r,o),r.ownerSupport=t.ownerSupport,r}function Xe(t,e,n,o){return mt(t,e,n.state.older.state),Ye(t,e,n,o)}function qe(t,e,n,o){return bt(t.context),ut(t),Ye(t,e,n,o)}function Ge(t,e,n,o,r){ct(e);const s=function(t,e,n){const o=De(Bn.DEEP);o.tagJsType=t.tagJsType;const r=je(o,n,e);function s(){return o.tag=t(),r}return o.wrapper=s,s.tagJsType=t.tagJsType,s.original=t.original||t,r}(t,e,n);return qe(s,void 0,e),Ee(s.templater,e,n,r,o)}function Ke(t,e,n){const o=Ue(t,n,n.appSupport,e),r=o.propsConfig;if(r){const e=t.tagJsType!==B.tagComponent?[]:We(t,o);r.castProps=e}return qe(o,e.state.newest,e)}function Qe(t,e,n){const o=t.context,r=o.toRender||o.returnValue,s=Jo(r);delete o.global;const a={updateCount:0,value:r,tagJsVar:s,destroy$:new Tt,placeholder:o.placeholder,valueIndex:-1,withinOwnerElement:!0,parentContext:o},i=function(t,e,n,o){const r={tagJsType:"tag-conversion",processInitAttribute:D,processInit:(r,s,a)=>{const i=t.toRender||t.returnValue;return e.tagJsVar.processInit(i,e,n,o.placeholder)},processUpdate:(o,s,a)=>{++t.updateCount,++s.updateCount;const i=t.toRender||t.returnValue,c=t.value.tagJsType,l=o?.tagJsType,u=l!==c,d=function(t,e){const n=e.state?.newest;if(et(t))return me(t,n)?0:7;const o=t?.tagJsType;return o?t.wrapper?.original===e.value.wrapper?.original?0:88:8}(o,t);if(d||u||r.hasValueChanged(i,t,n))return r.destroy(t,n),void vr(o,t,a,789);if(e.value.props=$e(o.props,a,1),e.updatesHandler=t.updatesHandler,t.updatesHandler){(0,t.updatesHandler)(e.value.props)}e.tagJsVar.processUpdate(i,e,n,[]),e.value=i},hasValueChanged:(o,r)=>{const s=t.toRender||t.returnValue;return e.tagJsVar.hasValueChanged(s,e,n)},destroy:(o,r)=>{++t.updateCount;const s=e.tagJsVar.destroy(e,n);return rt(s)?s.then((()=>{const e=Ze(t,r);return U(),e})):Ze(t,r)}};return r}(o,a,t,n);return o.tagJsVar=i,s.processInit(r,a,t,n.placeholder),t}function Ze(t,e){delete t.returnValue,delete t.toRender,delete t.global,t.contexts=[],t.htmlDomMeta=[],delete t.updatesHandler}function tn(t,e,n,o){const r=Ke(t,e,n),s=r.templater.tag;return["dom","html"].includes(s.tagJsType)?function(t,e){const n=Ve(t,e,void 0);for(const t of n.dom)t.domElement&&A.push([Y,[e,t.domElement]]),t.marker&&A.push([Y,[e,t.marker]]);return t}(r,o):Qe(r,0,e)}function en(t,e,n,o,r){return ct(e),r?tn(t,e,n,r):function(t,e,n){const o=Ke(t,e,n),r=o.templater.tag;return["dom","html"].includes(r.tagJsType)?(Ve(o,void 0,e.placeholder),o):Qe(o,0,e)}(t,e,n)}function nn(t){++M.locks,t.forEach(on),--M.locks,U()}function on(t){const e=t.context;if(!e.global)return void e.tagJsVar.processUpdate(e.value,e,t.ownerSupport,[]);Wn(e.state.newest)}function rn(t,e){for(let n=0;n<t.length;++n){ln(t[n],e[n])}}let sn;function an(...t){return sn=t,t}function cn(){return sn}function ln(t,e){t(an,1),e(cn,2)}function un(t,e,n,o){for(let n=t.length-1;n>=0;--n){const o=t[n].get(),r=e[n].callback;r&&r(o)}for(let t=o.length-1;t>=0;--t){pn.length=0,dn=0;(0,o[t])(hn),n[t](gn)}}let dn=0;const pn=[];function hn(...t){return pn.push(t),t}function gn(...t){return pn[dn++]}function fn(t,e,{resolvePromise:n,resolveValue:o}){if(rt(t)){return e.context.locked=2,t.then(function(t,e){return n=>{const o=t.context.global,r=t.context;if(delete r.locked,!0===o.deleted)return e(n);!function(t,e){const n=t.context.state,o=e.context.state;rn(n.newer.states,o.newer.states)}(t,r.state.newest);return nn(Fn(t)),e(n)}}(e,n))}return o(t)}function bn(t){return Jt.stateConfig.handlers.handler(t)}function xn(t){return bn((()=>{const e=t();if(hr().global){return fn(e,lt(),{resolvePromise:mn,resolveValue:yn})}})),Vn}function mn(t){return t}function yn(t){return t}function vn(t){return bn((function(){hr().destroy$.toCallback(t)})),Vn}let wn=0;const Cn=_n("click"),kn=_n("mousedown");function _n(t){return function(e){const n=cr(e);return bn((()=>{gr().addEventListener(t,n)})),n}}const Sn={get:gr,onclick:Cn,click:Cn,onClick:Cn,mousedown:kn,onmousedown:kn,onMouseDown:kn};function Tn(t,e){Object.defineProperty(Vn,t,{get:()=>e,set:t=>e(t)})}var Bn;function Vn(t,e=Bn.SHALLOW){const n=function(...o){const r=De(e,o);r.tagJsType=B.tagComponent,r.processInit=en,r.hasValueChanged=we;const s=function(t,e){return function(n,o,r){const s=We(t,n,r),a=n.ownerSupport,i=Ue(t,a,n.appSupport,o,s);return Re(t,e,i,s)}}(r,n);return s.original=t,r.wrapper=s,r},o=t;n.original=t,o.tags=Oe,o.setUse=Jt,o.ValueTypes=B,o.tagIndex=wn++,Oe.push(n);const r=n;return r.updates=r.inputs=t=>(hr().updatesHandler=t,!0),r}function Jn(t,e){const n=e.context.global;if(n&&n.deleted)return!1;const o=function(t,e){const n=t.props,o=e.propsConfig,r=o.latest;if(In(n,r))return!0;switch(t.propWatch){case Bn.IMMUTABLE:return Ln(n,r);case Bn.SHALLOW:return Qt(n,r)}return!Gt(n,r,Dn)}(t,e);return!!o}function In(t,e){return t.length!==e.length}function jn(t,e,n){if(In(t,e))return 11;switch(n){case Bn.NONE:return 1;case Bn.SHALLOW:return Qt(t,e);case Bn.IMMUTABLE:return Ln(t,e)}return function(t,e){let n=t,o=e;n=[...t],o=[...e||[]];if(!n.every(((t,e)=>function(t,e,n,o){const r=o[e];if(typeof t===T.object){const e={...t},n={...r||{}},o=Object.entries(e).every((([t,o])=>En(o,n[t],(()=>{delete e[t],delete n[t]}))));return o}return En(t,r,(function(){n.splice(e,1),o.splice(e,1)}))}(t,e,n,o))))return 7;return!1}(t,e)}function En(t,e,n){if(typeof t!==T.function)return!!Gt(t,e,Dn)&&4;if(typeof e!==T.function)return!1;const o=e?.original;o&&(e=o);t.original&&(t=t.original);return t.toString()===e.toString()?(n(),5):(n(),6)}function Ln(t,e){const n=t.length;for(let o=0;o<n;++o){if(t[o]!==e[o])return 2}return!1}Tn("onclick",Cn),Tn("click",Cn),Tn("onMouseDown",kn),Tn("onmousedown",kn),Tn("mousedown",kn),function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(Bn||(Bn={})),Vn.element=Sn,Vn.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},Vn.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},Vn.deepPropWatch=Vn,Vn.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Vn.inject=function(t){const e=hr();if(!e)throw new Error("tag.inject can only be called within a tag or host context");let n=e.parentContext;for(;n;){const e=n.contexts;if(e)for(const n of e)if(n.isAttr&&n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;if(n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;n=n.parentContext}const o=`Could not find parent context for tag.inject ${t}`;throw console.error(o,{targetItem:t,context:e}),new Error(o)},Vn.onInit=xn,Vn.onDestroy=vn,Vn.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Vn.immutableProps=function(t){return Vn(t,Bn.IMMUTABLE)},Vn.watchProps=function(t){return Vn(t,Bn.SHALLOW)},Object.defineProperty(Vn,"renderOnce",{set(t){t.tagJsType=B.renderOnce,t.processInit=Ge,t.processUpdate=Pe,t.destroy=ve,t.hasValueChanged=function(){return 0}}}),Object.defineProperty(Vn,"use",{set(t){t.original={setUse:Jt,tags:Oe},t.tagJsType=B.stateRender,t.processInit=en,t.processUpdate=Pe,t.hasValueChanged=we,t.destroy=ve}});const Pn=3,Dn=10;function On(t,e,n,o,r,s){return null==t||s>r?e:typeof t===T.function?e.mem?(t.mem=e.mem,e):(t.mem=e,t):Me(e)?e:it(e)?function(t,e,n,o,r,s){for(let a=t.length-1;a>=0;--a){const i=t[a],c=e[a];t[a]=On(c,i,n,o,s,r+1)}return t}(e,t,n,o,s,r):function(t,e,n,o,r,s){const a=Object.keys(t);for(const i of a){const a=t[i],c=On(e[i],a,n,o,s,r+1);if(a===c)continue;const l=Object.getOwnPropertyDescriptor(t,i)?.set;l||(t[i]=c)}return t}(e,t,n,o,s,r)}function Nn(t,e,n){const o=n.global,r=n.state.newest,s=r.templater.wrapper;let a=e.templater.wrapper,i=!1;const c=e.templater.tagJsType,l=B.stateRender===c||B.renderOnce===c;if(l)i=e.templater.tagJsType===B.renderOnce||me(r,e);else if(s&&a){const t=r.templater.tag?._innerHTML;t&&(a=e.outerHTML);i=s.original===a.original}const u=e.templater;if(!i)return void function(t,e,n){const o=t.global;xe(t.state.oldest,o),ct(t),e.processInit(e,t,n,t.placeholder)}(n,u,t);const d=l||function(t,e){return jn(e.props,t.propsConfig.latest,t.templater.propWatch)}(r,u);if(d)n.locked?o.blocked.push(e):(Wn(e),++n.renderCount);else{!function(t,e,n,o,r){const s=t.props,a=$n(e,n,o,s,r),i=e.propsConfig;i.castProps=a;const c=n.propsConfig;c.latest=i.latest}(u,e,r,t,u.propWatch===Bn.DEEP?Dn:Pn)}}function $n(t,e,n,o,r,s=-1){const a=e.context;if(!a.global||!a.state.newest){const e=$e(o,t,s);o.push(...e);return t.propsConfig.castProps=e,o}const i=(e=a.state.newest||e).propsConfig.castProps,c=[];for(let e=0;e<o.length;++e){const a=o[e],l=On(i[e],a,t,n,r,s+1);c.push(l)}return t.propsConfig.castProps=c,c}function An(t){const e=t.context,n=e.global,{subs:o,tags:r}=ce(e.contexts);Hn(e);for(const t of r){if(!0===t.context.global.deleted)return;Hn(t.context)}n.subscriptions&&o.forEach(le),ct(e)}function Hn(t){t.global.deleted=!0,fe(t,[])}function Mn(t,e,n){let o;delete n.toRender,o=function(t){const e=t?.context,n=e?.state;return n?.older?.state}(e)?Xe(t,e,n):qe(t,e,n);const r=!e||me(e,o);if(r){if(e){const t=e.templater.tag;if(t&&n.renderCount>0){const n=e?.templater,o=n?.tag;!function(t,e,n){if(t.tagJsType===B.dom){const o=n?.dom;return void(o!==t.dom&&An(e))}if(n){const o=n.strings;if(o){const n=o?.length;n!==t.strings.length&&An(e)}}}(t,e,o)}}}else{!function(t,e){const n=t.context.global;let o=-1;const r=n.providers=n.providers||[],s=r.length-1;for(;o++<s;){const t=r[o];let s=-1;const a=t.children.length-1;for(;s++<a;)if(n===t.children[s].context.global)return t.children.splice(s,1),void t.children.push(e)}}(e,o),An(e);const t=o.context;t.state.oldest=o,t.state.newest=o,t.state.older=t.state.newer}return o.ownerSupport=t.ownerSupport,{support:o,wasLikeTags:r}}function Rn(t,e,n){const o=Mn(e,t,n);if(o.wasLikeTags){return mr(n.state.oldest,o.support),o.support}return Je(e,n)}function Un(t){return B.templater===t.tagJsType}function Wn(t){const e=t.context,n=e.global,o=Un(t.templater);if(e.locked)return n.blocked.push(t),t;if(o){return zn(t)}e.locked=4,n.blocked.length&&(t=n.blocked.pop(),n.blocked=[]);const r=Rn(e.state.newest,t,e);return delete e.locked,r}function zn(t){return Wn(pt(t).context.state.newest)}function Fn(t,e=[]){const n=t.context,o=Un(t.templater),r=t.ownerSupport;if(n.locked)return e.push(t),e;if(o)return Fn(r,e);const s=t.context.global;if(s&&!0===s.deleted)return e;const a=t,i=nt(a.templater),c=t.templater.tagJsType,l=r&&c!==B.stateRender&&(!i||Jn(a.templater,a));if(a.context.global){const t=function(t){const e=t.context.global.providers;if(!e)return[];const n=[];for(const t of e){const e=Ft(t.owner,t);n.push(...e.map(Yt))}return n}(a);e.push(...t)}return l?(Fn(r,e),i&&e.push(a),e):(e.push(a),e)}function Yn(t,e){const n=e.context.global,o=function(t,e){if(!0!==n.deleted)return function(t,e,n,o){const r=pt(e),s=r.context;s.locked=1;const a=t.apply(n,o);delete s.locked;return function(t,e){const n=e.context.global;if(n?.deleted)return;const o=Fn(e);return nn(o),fn(t,e,{resolvePromise:Gn,resolveValue:Kn})}(a,r)}(o.tagFunction,o.support,t,e)};return o.tagFunction=t,o.support=e,o}const Xn="no-data-ever",qn="promise-no-data-ever";function Gn(){return qn}function Kn(){return Xn}function Qn(t,e,n){const o=n[e];if(o){let e=!1;if(t.originalStopPropagation=t.stopPropagation,t.stopPropagation=function(){e=!0,t.originalStopPropagation.call(t),t.stopPropagation=t.originalStopPropagation,delete t.originalStopPropagation},o(t),t.defaultPrevented||e)return}const r=n.parentNode;r&&Qn(t,e,r)}function Zn(t,e,n,o){const r=t.appElement,s=function(t){"blur"===t&&(t="focusout");return"_"+t}(e);"blur"===e&&(e="focusout");const a=t.context.global.events;if(!a[e]){const t=function(t){Qn(t,s,t.target)};a[e]=t,r.addEventListener(e,t)}n[s]=o,n[e]=o}function to(t,e,n,o){const r=function(...e){return r.tagFunction(t,e)};r.tagFunction=e,r.support=n,Zn(n.appSupport,o,t,r)}function eo(t){return null==t||!1===t}function no(t,e,n,o,s,a,i){if(!eo(e))if(typeof e!==T.object)0!==e.length&&s(n,e,_);else for(const s in e){const c=r(s);co(s,e[s],t,n,o,Mt,a,i,c)}}function oo(t,e){t.removeAttribute(e)}function ro(t,e,n,o){const r=e,s=t;if(s?.tagJsType){const o=e.value;return o?.tagJsType?void o.hasValueChanged(s,e,n):(s.isAttr=!0,fr(e),s.processInitAttribute(r.attrName,t,r.element,s,r,n,Mt),br(),void(r.tagJsVar=s))}if(r.isNameOnly)return function(t,e,n,o,r,s,a,i){if(n){if(eo(e)||""===e)return void o.removeAttribute(n);if(typeof n===T.object)if(typeof e===T.object)for(const t in n)t in e||$.push([oo,[o,t]]);else for(const t in n)$.push([oo,[o,t]])}no(t,e,o,r,s,a,i)}(o,t,r.value,r.element,n,r.howToSet,[],r.parentContext),void(r.value=t);const a=r.element;!function(t,e,n,o,r,s,a){if(st(t))return function(t,e,n,o,r,s,a){const i=t.templater.wrapper,c=(i?.tagJsType||i?.original?.tagJsType)===B.renderOnce;if(!c)return uo(a,e,t,o,n);return lo(e,n,o,r,s,t)}(r,t,o,e,a,s,n);lo(t,o,e,a,s,r)}(t,r.attrName,r,a,n,r.howToSet,r.isSpecial),e.value=t}function so(t,e,n,o,r,s,i){const c=o.length;function l(o){const s=function(t,e,n){return t.reduce(((t,o)=>{if(a(o)>=0){const o=n++,r=e[o];return t.push(r),t}return t.push(o),t}),[])}(e,o,c).join("");r(n,t,s)}return e.forEach((e=>{if(a(e)>=0){const r=o.length,a=Jo(e),c={updateCount:0,isAttr:!0,element:n,attrName:t,withinOwnerElement:!0,tagJsVar:a,valueIndex:o.length,parentContext:i,destroy$:new Tt};a.processUpdate=function(t,e,n,o){++e.updateCount,l(o)};const u=s[r];c.value=u,o.push(c)}})),l(s),o}function ao(t,e,n,o,r,s,a,i,c,l){const u=Jo(e),d={updateCount:0,isAttr:!0,element:n,attrName:t,howToSet:s,value:e,withinOwnerElement:!0,tagJsVar:u,destroy$:new Tt,valueIndex:c,parentContext:r};return o.push(d),u.processUpdate=ro,function(t,e,n,o,r,s,a,i){if(n.element=o,n.howToSet=r,typeof e===T.function)return uo(n,e,s,t,o);if(n.attrName=t,n.isSpecial=a,e?.tagJsType)return function(t,e,n,o,r){e.processInitAttribute(t,e,r,e,n,o,Mt),n.tagJsVar=e}(t,e,n,s,o);ho(t,e,o,r,a,n)}(t,e,d,n,s,a,i),d.value=e,d}function io(t){return at(t)&&"tagJsVar"in t?t.tagJsVar:-1}function co(t,e,n,o,r,s,a,i,c){const l=io(t);let u=l>=0||void 0===e&&"string"!=typeof t,d=n[l];e?.tagJsType?d=e:t?.tagJsType&&(u=!0,d=t,e=t);const p=d;if(p?.tagJsType)return function(t,e,n,o,r,s,a,i,c){const l=Ce(t,e||[],!0,n);return l.element=i,l.valueIndex=r,l.isAttr=!0,l.isNameOnly=c,l.stateOwner=pt(s),l.supportOwner=s,fr(l),o.processInitAttribute(a,t,i,o,l,s,Mt),br(),l.oldTagJsVar=l.tagJsVar,l.tagJsVar=o,l}(e,a,i,p,l,r,t,o,u);if(u){-1===l&&u&&(d=t);const e=Ce(d,a,!0,i);e.valueIndex=l,e.isAttr=!0,e.element=o,e.isNameOnly=!0,e.howToSet=s;return e.tagJsVar.processUpdate=ro,no(n,d,o,r,s,a,i),e}if(Array.isArray(e))return so(t,e,o,a,s,n,r.context);const h=io(e);if(h>=0){return ao(t,n[h],o,a,i,s,r,c,h)}return ho(t,e,o,s,c,i)}function lo(t,e,n,o,r,s){if(!1===o){switch(t){case void 0:case!1:case null:return void $.push([po,[e,n]])}if(st(t))return to(e,t,s,n);r(e,n,t)}else Lt(n,t,e,o)}function uo(t,e,n,o,r){e=Yn(e,n);return t.tagJsVar.processUpdate=ro,to(r,e,n,o)}function po(t,e){t.removeAttribute(e)}function ho(t,e,n,o,r,s){return r?Lt(t,e,n,r):"function"==typeof e?function(t,e,n,o,r){const s=t(),a={tagJsType:"dynamic-attr",hasValueChanged:(e,n,o)=>{const r=t();return i.tagJsVar.hasValueChanged(r,i,o)},processInit:D,processInitAttribute:D,destroy:(t,e)=>{i.tagJsVar.destroy(i,e)},processUpdate:(t,e,n,o)=>{++e.updateCount;const r=t();i.tagJsVar.processUpdate(r,i,n,o),i.value=r}},i={updateCount:0,isAttr:!0,element:o,parentContext:e,value:s,tagJsVar:Jo(s),valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt},c={updateCount:0,isAttr:!0,contexts:[i],element:o,parentContext:e,value:t,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};return i.tagJsVar.processInitAttribute(n,s,o,i.tagJsVar,i,{},r),c}(e,s,t,n,o):void o(n,t,e)}function go(t,e,n,o,r,s){const a=e.tagJsVar,i=t;if(a.hasValueChanged(i,e,n)>0){a.destroy(e,n),o.removeAttribute(r);const i=Jo(t);return i.isAttr=!0,i.processInitAttribute(r,t,o,i,e,n,s),void(e.tagJsVar=i)}}function fo(t,e,n,o,s,a,i){o.destroy=bo,o.hasValueChanged=wo,o.processUpdate=(e,o,r)=>go(e,o,r,n,t,i);const c=r(t);ho(t,e,n,i,c,s),s.tagJsVar=o}function bo(t){const e=t.element,n=t.attrName;e.removeAttribute(n)}function xo(t){return{tagJsType:"simple",value:t,processInitAttribute:fo,processInit:yo,destroy:vo,hasValueChanged:Co,processUpdate:mo}}function mo(t,e,n){return t===e.value?0:It(e,t,n)}function yo(t,e,n,o,r){const s=Et(t);o=e.placeholder;const a=e.paint=[G,[o,s,function(t){e.simpleValueElm=t,delete e.paint},"processSimpleValueInit"]];O.push(a)}function vo(t){if(!t.simpleValueElm&&t.paint)return void(t.paint[0]=D);const e=t.simpleValueElm;delete t.simpleValueElm,W(e,"deleteSimpleValue")}function wo(t,e){return null==t||t===e.value?0:6}function Co(t,e){return null!=t&&typeof t===T.object?(vo(e),6):(function(t,e){const n=Et(t);if(e.paint)return void(e.paint[1][1]=n);const o=e.simpleValueElm;$.push([R,[n,o]])}(t,e),0)}function ko(t,e){return it(t)?0:(pe(e),9)}function _o(t,e,n,o){const r=void 0===t.lastArray;r&&(t.lastArray=[]);const s=t.lastArray;let a=t.placeholder,i=0;const c=[];if(!r){for(let t=0;t<s.length;++t){const n=s[t],o=ue(e,t,s,i);0!==o?2!==o?i+=o:t-=1:c.push(n)}t.lastArray=c}const l=e.length;for(let r=0;r<l;++r){a=So(e,r,t.lastArray,n,a,o).placeholder}}function So(t,e,n,o,r,s){const a=t[e],i=n[e];if(i)return function(t,e,n,o,r,s,a){const i=n.length>r;if(i)return Pe(t,e,o),e;const c=Io(t,o,n,s,a);return n.push(c),c}(a,i,n,o,e,r,s);const c=Io(a,o,n,r,s);return n.push(c),c}function To(t){return{tagJsType:"array",value:t,processInitAttribute:D,processInit:Vo,processUpdate:Bo,hasValueChanged:ko,destroy:pe}}function Bo(t,e,n){++e.updateCount;0===Pe(t,e,n)&&_o(e,t,n)}function Vo(t,e,n,o,r){_o(e,t,n,r)}function Jo(t){const e=t?.tagJsType;return e?t:function(t){if(it(t))return To(t);return xo(t)}(t)}function Io(t,e,n,o,r){const s=document.createTextNode(_),a={updateCount:0,value:t,tagJsVar:Jo(t),withinOwnerElement:!1,placeholder:s,destroy$:new Tt,parentContext:e.context,valueIndex:n.length};return r||(a.placeholder=o),jt(t,e,a,r,o),r&&A.push([Y,[r,s]]),a}function jo(t,e,n,o){return e.hasEmitted=!0,e.contextItem=Io(t,n,[],o)}function Eo(t,e){let n;return t&&(n=e=document.createTextNode(_),A.push([Y,[t,e]])),{appendMarker:n,insertBefore:e}}function Lo(t,e,n,o,r){const s=Oo(t,e,n,o,r);return s.hasEmitted||Po(t,s),s}function Po(t,e){const n=t.Observables[0];if(!e.hasEmitted)return"withDefault"in t?void e.subValueHandler(t.withDefault,0):"value"in n?void e.subValueHandler(n.value,0):void 0;const o=e.lastValues[0].value;e.subValueHandler(o,0)}function Do(t,e,n){const o=Cr(t,e,n);if(!0!==e.hasEmitted){const t=e.value.Observables;if(!t)return;if(!("value"in t[0]))return}if(0===o&&t.callback){Po(t,e.subContext)}}function Oo(t,e,n,o,r){const s=t.Observables,{appendMarker:a,insertBefore:i}=Eo(r,o);let c=function(t,e,o){jo(t,o,n,i),Ho(e),c=o.tagJsVar.onOutput=function(t,e,o){const r=o.contextItem;It(r,t,n),r.tagJsVar.processUpdate(t,r,n,[t]),r.value=t,Ho(e)}};const l=No(s,n,((t,e,n)=>c(t,e,n)),t,e);return l.appendMarker=a,e.subContext=l,t.processUpdate=Do,t.onOutput=c,l}function No(t,e,n,o,r){function s(t,e){c.lastValues[e]={value:t,tagJsVar:Jo(t),oldTagJsVar:c.lastValues[e]?.tagJsVar},a(c.lastValues,e)}function a(t,e){const o=c.tagJsVar,s=o?.callback;if(s){fr(r);const e=o.callback(...t.map((t=>t.value)));return n(e,i,c),void br()}n(t[e].value,i,c)}let i=!0;const c={lastValues:[],subValueHandler:s,valuesHandler:a,tagJsVar:o,subscriptions:[]};return t.forEach(((t,e)=>{i=!0,c.subscriptions.push(t.subscribe((t=>s(t,e)))),i=!1})),o.onOutput=n,c}function $o(t){const e=t.subContext;if(!e)return;e.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function Ao(t,e){++t.updateCount;const n=t.subContext;return $o(t),tt(n,e)}function Ho(t){t||Jt.stateConfig.support||U()}function Mo(t,e,n,o,r){Oo({tagJsType:B.subscribe,states:[],Observables:[t]},e,n,o,r)}function Ro(t,e,n,o,s,a){e.destroy=$o;const i=r(t),c=function(e,o){ho(t,e,n,Mt,i,s),Ho(o)},l=No(e.Observables,0,c,e,s);return s.subContext=l,s.value=e,s.tagJsVar=e,e.processUpdate=function(e,o,r){return go(e,s,r,n,t,Mt)},{subContext:l,onOutput:c}}function Uo(t,e,n,o,r,s){const{subContext:a}=Ro(t,e,n,0,r);a.hasEmitted||function(t,e){const n=e.tagJsVar,o=n.onOutput,r=t.Observables;let s=r[0]?.value||t.withDefault;t.callback&&(s=t.callback(s));o(s,!0,e)}(e,a)}function Wo(t,e,n){return{onOutput:D,tagJsType:B.subscribe,processInitAttribute:Uo,processInit:Lo,hasValueChanged:zo,processUpdate:D,destroy:Ao,callback:n,withDefault:e,Observables:[t]}}function zo(t,e){if(!t?.tagJsType)return 1;const n=t.Observables;if(!n)return 2;const o=e.value.Observables;if(!o||o.length!==n.length)return 3;return n.every(((t,e)=>t===o[e]))?0:4}function Fo(t){return lt()?bn((()=>Yo(t))):Yo(t)}function Yo(t){let e=t;const n=new Set,o=t=>{n.forEach((e=>e(t)))};return{tagJsType:B.signal,hasValueChanged:zo,processInitAttribute:D,processInit:Mo,processUpdate:Do,get value(){return e},set value(t){e!==t&&(e=t,o(t))},destroy:Ao,emit:o,subscribe(t){t(e),n.add(t);const o=()=>n.delete(t);return o.unsubscribe=o,o}}}class Xo extends Tt{constructor(t){super(t),this.value=t}subscribe(t){const e=super.subscribe(t);return t(this.value,e),e}}class qo extends Tt{constructor(t){super(t),this.value=t,this._value=t,Bt(this)}subscribe(t){const e=super.subscribe(t);return t(this._value,e),e}}const Go=(t,e)=>Qo(t,e),Ko=t=>t;const Qo=(t,e,{init:n,before:o,final:r=Ko}={})=>{const s=bn({pastResult:void 0,values:void 0}),a=s.values;if(void 0===a){if(o&&!o(t))return s.values=t,s.pastResult;const i=(n||e)(t,a);return s.pastResult=r(i),s.values=t,s.pastResult}if(t.every(((t,e)=>t===a[e])))return s.pastResult;if(o&&!o(t))return s.values=t,s.pastResult;const i=e(t,a);return s.pastResult=r(i),a.length=0,a.push(...t),s.pastResult};function Zo(t,e){return Object.defineProperty(e,"noInit",{get(){const e=t();return e.setup.init=()=>{},e}}),Object.defineProperty(e,"asSubject",{get(){const e=t(),n=bn((()=>lt())),o=bn((()=>new Xo(void 0))),r=bn((()=>({state:Jt.stateConfig.state,states:Jt.stateConfig.states}))),s=(t,s)=>(Qo(t,((t,e)=>{const a=lt(),i=s(t,e);if(a!==n){const t=r.state,e=n.context.state.older;un(t,e.state,r.states,e.states)}o.next(i)}),e.setup),o);return s.setup=e.setup,Zo((()=>s),s),s}}),Object.defineProperty(e,"truthy",{get(){const e=t();return e.setup.before=t=>t.every((t=>t)),e}}),e}function tr(t){return lt()?bn((()=>new Tt(t))):new Tt(t)}function er(t){return Jt.stateConfig.handlers.statesHandler(t)}function nr(t){const e=Fo([]),n=Fo(0),o=Fo(0);let r=[],s=0;return o.value=n.value,t(((...t)=>(r=t,e.value))),Go(r,(()=>{++s,e.value=r,t((()=>r))})),er(((r,a)=>{if(s)return t(((...t)=>(a&&1!==a||(e.value=t),e.value))),o.value=n.value,void++n.value;t((()=>e.value))})),++s,e.value}function or(){return{stateDiff:0,provider:void 0}}Zo((()=>function(t){const e=(e,n)=>Qo(e,n,t);return e.setup=t,Zo((()=>e),e),e}({})),Go),tr._value=t=>{const e=bn((function(){return{state:Jt.stateConfig.state,states:Jt.stateConfig.states}})),n=lt();return bn((function(){return new Xo(t).pipe((t=>{const o=n.context.state.newer;return un(o.state,e.state,o.states,e.states),t}))}))},tr.all=function(t){const e=bn((()=>({state:Jt.stateConfig.state,states:Jt.stateConfig.states}))),n=lt();return Tt.all(t).pipe((t=>{const o=n.context.state.newer;return o&&un(o.state,e.state,o.states,e.states),t}))};const rr={create:t=>{const e=bn(or);if(e.stateDiff){let t=e.stateDiff;for(;t--;)bn(void 0);return bn(void 0)}const n=bn((()=>{const n=Jt.stateConfig,o=n.state.length,r=t.prototype?new t:t(),s=n.support,a=n.state.length-o,i={constructMethod:t,instance:r,stateDiff:a,owner:s,children:[]};e.provider=i;const c=s.context.global;return(c.providers=c.providers||[]).push(i),e.stateDiff=a,r})),o=t,r=o.compareTo=o.toString();return e.provider.constructMethod.compareTo=r,n},inject:function(t){return bn((function(){const e=t,n=e.compareTo=e.compareTo||t.toString(),o=lt(),r=[];let s={ownerSupport:o.ownerSupport};for(;s.ownerSupport;){const t=s.ownerSupport.context.global.providers;if(!t){s=s.ownerSupport;continue}const e=t.find((t=>{r.push(t);if(t.constructMethod.compareTo===n)return!0}));if(e){const t=o.context.global;return(t.providers=t.providers||[]).push(e),e.children.push(o),e.instance}s=s.ownerSupport}const a=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${a}. Available providers`,r),new Error(a)}))}};class sr extends Error{constructor(t,e,n={}){super(t),this.name=sr.name,this.details={...n,errorCode:e}}}class ar extends sr{constructor(t,e){super(t,"sync-callback-error",e),this.name=ar.name}}function ir(t,e,n,...o){const r=n(...o),s=dt(t);return s&&(t.global?Wn(s):t.tagJsVar.processUpdate(t.value,t,s,[]),rt(r)&&r.finally((()=>{t.global?Wn(s):t.tagJsVar.processUpdate(t.value,t,s,[])}))),r}function cr(t){const e=hr(),n=bn({callback:t}),o=bn((()=>lr(e,Jt.stateConfig,n)));return n.callback=t,o}function lr(t,e,n){const o=e.states;return function(...e){return ir(t,o,n.callback,...e)}}const ur=()=>{const t=hr();if(!t)throw dr;const e=Jt.stateConfig;return function(n){return lr(t,e,{callback:n})}},dr=new ar("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function pr(t){const e=["push","pop","splice","shift","unshift"],n=["map","reduce","forEach","every"],o=new Proxy(t,{get(r,s){return isNaN(s)?"length"===s?t.value.length:e.includes(s)?o[a=s]=(...e)=>{const n=t.value[a](...e);return t.emit(t.value),n}:n.includes(s)?t.value[s].bind(t.value):t[s]:t.value[s];var a},set:(e,n,o)=>isNaN(n)?"length"===n?(t.value.length=o,t.emit(t.value),!0):(t[n]=o,!0):(t.value[n]=o,t.emit(t.value),!0)});return o}function hr(){return Jt.stateConfig.context}function gr(){return hr().element}function fr(t){return Jt.stateConfig.context=t}function br(){delete Jt.stateConfig.context}function xr(t,e,n,o){const r=n[e];if(r.deleted)return;const s=t[r.valueIndex],a=r.tagJsVar;fr(r),a.processUpdate(s,r,o,t),br(),r.value=s}function mr(t,e){const n=t.context.contexts;!function(t,e){const n=e.templater,o=e.templater.tag,r=n.values||o.values,s=t.templater.tag;s.values=r}(t,e),++M.locks,function(t,e){const n=t.templater.tag.values;let o=0;const r=n.length;for(;o<r;)xr(n,o,e,t),++o}(t,n),--M.locks,U()}function yr(t,e,n){if(nt(e))return void 0===t.global&&ct(t),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,function(t,e,n){if(!e.state.newest)return void t.processInit(t,e,n,e.placeholder);const o=Ue(t,n,n.appSupport,e);Nn(n,o,e)}(e,t,n),!0;if(t.global){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e;const o=t.state.newest;if(o)return typeof e===T.function||function(t,e,n,o){let r=n.templater||n;const s=t.templater.tag;s&&s._innerHTML&&(r=n.outerHTML||n._innerHTML.outerHTML);const a=Ue(r,o,o.appSupport,e);mr(t.context.state.oldest,a)}(o,t,e,n),!0}return e.processInit(e,t,n,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,!0}function vr(t,e,n,o){const r=t&&t.tagJsType;if(r){if(r===B.renderOnce)return;yr(e,t,n)}else{if(it(t))return _o(e,t,n),e.oldTagJsVar=e.tagJsVar,void(e.tagJsVar=To(t));typeof t!==T.function?o&&function(t,e){e.value=t,e.oldTagJsVar=e.tagJsVar,e.tagJsVar=xo(t);const n=e.placeholder,o=Et(t),r=e.paint=[G,[n,o,function(t){e.simpleValueElm=t,delete e.paint},"processNowRegularValue"]];O.push(r)}(t,e):e.value=t}}function wr(t,e,n,o){if(!e||!e.tagJsType||e.tagJsType!==t){return o.tagJsVar.destroy(o,n),vr(e,o,n,99),99}}function Cr(t,e,n){const o=e.subContext,r=wr(B.subscribe,t,n,e);return r||(o&&o.hasEmitted?(o.tagJsVar=t,o.valuesHandler(o.lastValues,0),0):0)}function kr(t,e,n,o,r){const s=t;let a=s.templater;if(a||(a=Ie(s)),ct(e),r)return Ee(a,e,n,r,o);return(e.state=e.state||{}).newest=je(a,n,e),Je(n,e)}function _r(t,e,n,o,r){kr(t.outerHTML,e,n,o,r);e.tagJsVar.processUpdate=function(t,e,n){It(e,t?.outerHTML||t,n)},t.hasValueChanged=Sr}function Sr(t,e){return we(t,e)}function Tr(t,e){const n={values:e,ownerSupport:lt(),tagJsType:B.tag,processInitAttribute:D,processInit:kr,processUpdate:Pe,hasValueChanged:we,destroy:ve,strings:t,key:t=>Br(t,n),setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=_r,n},acceptInnerHTML:function(t){return t.owner=n,n},html:function(t,e){return n.children={strings:t,values:e},n}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}function Br(t,e){return Br(t,e),e.arrayValue=t,e}function Vr(t,...e){const n=Tr(t,e),o=De(Bn.NONE);return o.tag=n,n.templater=o,n}Vr.dom=function(t,...e){return function(t,e){const n={values:e,ownerSupport:lt(),dom:t,tagJsType:B.dom,processInitAttribute:D,processInit:kr,processUpdate:Pe,hasValueChanged:we,destroy:ve,key:function(t){return n.arrayValue=t,n},setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=_r,n},acceptInnerHTML:function(t){return t.owner=n,n},html:{dom:function(t,e){return n.children={dom:t,values:e},n}}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}(t,e)};function Jr(t,e){t.domElement&&e.appendChild(t.domElement),t.marker&&e.appendChild(t.marker)}function Ir(t,e,n){const o=re(t,e);return se(t,o,o),o.appElement=n,e.state.oldest||(e.state.oldest=o,e.state.older=e.state.newer),e.state.newest=o,o}function jr(t,e,n,o,r,s,a){const i=document.createTextNode(_);Oe.push(n.wrapper||{original:n});const c=function(t,e,n,o,r){o.placeholder=e;const s=o.state.oldest,a=o.state.newest,i=a===s,c=Ue(t,a,a.appSupport,o);if(!i){mt(c,a,o.state.older.state)}if(t.tagJsType===B.stateRender)return function(t,e,n,o,r){const s=t.wrapper||{original:t};if(!e){const e=Ir(t,o,r);return ze(e),e}return Re(t,s,n),ze(n),n}(t,r,c,o,n);const l=t.wrapper,u=l(c,o);return ze(c),u}(n,i,r,s,a);if(e.isApp=!0,a&&(o.tag=c.templater.tag),!r)throw new Error(`Cannot tagElement, element received is type ${typeof r} and not type Element`);r.destroy=function(){const t=e.events;for(const e in t){const n=t[e];r.removeEventListener(e,n)}e.events={},++M.locks;const n=xe(c,e);return--M.locks,U(),n},++M.locks;const l=function(t,e,n,o,r,s){const a=Ve(t,e,void 0),i=t.context;i.state.oldest=t,i.state.newest=t,i.state.older=i.state.newer;let c=o.setUse;if(o.tagJsType!==B.stateRender){const t=r.original;c=t.setUse,t.isApp=!0}e.setUse=c,e.ValueTypes=B,Er.push({element:e,support:t});const l=document.createDocumentFragment();l.appendChild(s);for(const t of a.dom)Jr(t,l);return l}(c,r,0,n,t,i);return--M.locks,U(),r.appendChild(l),{support:c,tags:Oe,ValueTypes:B}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const Er=[];function Lr(t,e,n){const o=Er.findIndex((t=>t.element===e));if(o>=0){const t=Er[o].support;xe(t,t.context.global),Er.splice(o,1),console.warn("Found and destroyed app element already rendered to element",{element:e})}let r=()=>c(n);r.propWatch=Bn.NONE,r.tagJsType=B.stateRender,r.processUpdate=Pe,r.props=[n],r.isApp=!0;const s=function(t,e){const n={tagJsType:"templater",hasValueChanged:we,destroy:ve,processInitAttribute:D,processInit:function(){console.debug("do nothing app function")},processUpdate:Pe},o={updateCount:0,value:t,valueIndex:0,destroy$:new Tt,withinOwnerElement:!1,renderCount:0,global:void 0,state:{},tagJsVar:n},r=ct(o);return r.events={},Ir(t,o,e),o}(r,e),a=s.global,i=s.state.newest;bt(i.context),ut(i);let c=t(n);const l=typeof c==T.function;return l||(nt(c)?(s.state.newest.propsConfig={latest:[n],castProps:[n]},r.propWatch=c.propWatch,r.tagJsType=c.tagJsType,r.wrapper=c.wrapper,r=c):(r.tag=c,c=t)),jr(t,a,r,c,e,s,l)}function Pr(t,e,n){const o=n.state,r=o.newer.states,s=o.older?o.older.states:r,a=o.newest;rn(r,s);const i=e(...t);return rn(s,r),H.push([()=>{const t=a.context.global;void 0===t||!0===t.deleted||(++M.locks,Ne(a),--M.locks,U())},[]]),i}function Dr(t,e){return{onOutput:D,tagJsType:B.subscribe,processInitAttribute:Ro,processInit:Oo,hasValueChanged:zo,processUpdate:Cr,destroy:Ao,callback:e,Observables:[t]}}function Or(t,e,n){++e.updateCount;const o=t.owner._innerHTML;o.processInit=o.oldProcessInit;const r=e.subContext?.contextItem;It(r,o,n)}function Nr(t,e,n,o,r){e.subContext={},t.processUpdate=Or,function(t,e,n,o,r){const{appendMarker:s,insertBefore:a}=Eo(r,o),i=n.subContext;i.appendMarker=s;const c=t.owner,l=c._innerHTML;l.processInit=l.oldProcessInit,jo(l,i,e,a)}(t,n,e,o,r)}function $r(){return{tagJsType:"innerHTML",hasValueChanged:()=>0,processInitAttribute:D,processInit:Nr,processUpdate:Or,destroy:Z}}function Ar(t,e={}){const n={tagJsType:B.host,processInitAttribute:Mr,hasValueChanged:()=>0,processInit:Rr,processUpdate:Hr,destroy:Ur,options:{callback:t,...e},matchesInjection(e){const n=e?.options?.callback;return n===t}},o=(...n)=>({...o,options:{arguments:n,...e,callback:t}});return Object.assign(o,n),o}function Hr(t,e,n){const o=wr(B.host,t,n,e);if(o)return o;const r=e.tagJsVar.options,s=t;!function(t){xt(t.state.newer.state)}(e);const a=s.options.arguments||r.arguments||[];e.returnValue=s.options.callback(...a),Fe(e)}function Mr(t,e,n,o,r){return Rr(o,r)}function Rr(t,e){const n=e.element,o=e.state={};bt(e),function(t,e,n,o){const r=e.options.arguments||[],s=e.options.callback(...r);n.returnValue=s;const a=e.options;a.onInit&&a.onInit(t,e,n,o)}(n,t,e,o),Fe()}function Ur(t){++t.updateCount;const e=t,n=e.tagJsVar,o=n.options;if(e.destroy$.subscribers.length&&(fr(t),Pr([],e.destroy$.next.bind(e.destroy$),t),br()),o.onDestroy){const r=e.element;return Pr([],(function(){fr(t);const s=o.onDestroy(r,n,e,e.state);return br(),s}),t.stateOwner.context)}}function Wr(t,e,n){function o(t){return o.toCallback(t)}return o.toCallback=n,t.listeners.push([e,o]),t.allListeners.push([e,o]),t}function zr(t,e){return t.attributes.push(e),Xr(e[0])?Yr(e[0],t):Xr(e[1])&&Yr(e[1],t),t}function Fr(t){function e(e){return function(n){return function(t,e,n){return Wr(as(t,t.elementFunctions),e,n)}(t,e,n)}}const n={onClick:e("click"),onChange:e("onchange"),onKeyup:e("onkeyup"),attr:(...e)=>function(t,e){const n=as(t,t.elementFunctions);return n.attributes.push(e),Xr(e[0])?Yr(e[0],n):Xr(e[1])&&Yr(e[1],n),n}(t,e),key:function(t){return this.arrayValue=t,this}};return n}function Yr(t,e){e.contexts||(e.contexts=[]),e.contexts.push(t)}function Xr(t){return Array.isArray(t)||st(t)||t?.tagJsType}function qr(t,e){return(n,o)=>zr(n,[t,o,!1,e])}function Gr(t){return(e,n)=>Wr(e,t,n)}Dr.all=function(t,e){return Dr(Tt.all(t),e)},Ar.onInit=t=>Ar((()=>{}),{onInit:t}),Ar.onDestroy=t=>Ar((()=>{}),{onDestroy:t});const Kr={checked:qr("checked",Rt),selected:qr("selected",Rt),class:qr("class",(function(t,e,n){at(n)?Object.entries(n).forEach((([e,n])=>{n?t.classList.add(e):t.classList.remove(e)})):Ut(t,e,n)})),onClick:Gr("click"),onChange:Gr("onchange"),onKeyup:Gr("onkeyup")};function Qr(t,e,n,o,r,s){t.forEach((t=>{if("element"===t.tagJsType){const a=ts(t,e,n,o);return void O.push([s,[r,a]])}switch(typeof t){case"string":case"number":return function(t,e,n){const o=document.createTextNode(t);return O.push([n,[e,o]]),o}(t,r,s);case"function":return function(t,e,n,o,r,s){const a=[],i={updateCount:0,parentContext:n,contexts:a,value:t,htmlDomMeta:[],tagJsVar:{tagJsType:"dynamic-text",hasValueChanged:()=>0,processInit:D,processInitAttribute:D,destroy:(t,e)=>{++i.updateCount,a.forEach((t=>t.tagJsVar.destroy(t,e)))},processUpdate:(t,e,n,o)=>{++i.updateCount;const r=t(c),s=c.tagJsVar.processUpdate(r,c,n,o);return c.value=r,e.value=t,s}},valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};r.push(i);const c=Zr(t(),n,i.contexts,e,o,s);return c}(t,r,e,n,o,s)}return Zr(t,e,o,r,n,s)}))}function Zr(t,e,n,o,r,s){const a=Jo(t),i={updateCount:0,value:t,parentContext:e,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};return n.push(i),i.placeholder=document.createTextNode(""),O.push([s,[o,i.placeholder]]),a.processInit(t,i,r,i.placeholder),i}function ts(t,e,n,o){const r=document.createElement(t.tagName);return e.element=r,_e(t.attributes,[],r,n,e,o),Qr(t.innerHTML,e,n,o,r,Y),t.listeners.forEach(((e,o)=>{Zn(n.appSupport,e[0],r,((...e)=>{const r=t.listeners[o][1],s=pt(n),a=s.context.updateCount,i=r(...e);return a===s.context.updateCount&&nn([s]),rt(i)?i.then((()=>(nn([s.context.state.newest]),"promise-no-data-ever"))):"no-data-ever"}))})),r}function es(t,e){++t.updateCount;const n=t.contexts,o=[];if(n.length&&(ns(n,e,o),o.length))return Promise.all(o).then((()=>{++M.locks,be(t),t.htmlDomMeta=[],--M.locks,U()}));be(t),t.htmlDomMeta=[]}function ns(t,e,n){const o=t[0],r=o.tagJsVar.destroy(o,e);return rt(r)?(n.push(r),r.then((()=>{if(t.length>1)return ns(t.slice(1,t.length),e,n)}))):(o.htmlDomMeta&&(be(o),delete o.htmlDomMeta),t.length>1?ns(t.slice(1,t.length),e,n):void 0)}function os(t,e,n){++e.updateCount;if(rs(t,e))return es(e,n),void vr(t,e,n,789);if(e.updatesHandler){(0,e.updatesHandler)(t.props)}const o=e.contexts,r=t.contexts||[],s=e.tagJsVar.allListeners;t.allListeners.forEach(((t,e)=>{s[e][1].toCallback=t[1].toCallback})),o.forEach(((t,e)=>{t.tagJsVar.processUpdate(r[e],t,n)}))}function rs(t,e){if(e.value===t)return 0;return!t||"element"!==t.tagJsType?1:0}function ss(t){const e=as({tagJsType:"element",processInitAttribute:D,processInit:is,destroy:es,processUpdate:os,hasValueChanged:rs,tagName:t,innerHTML:[],attributes:[],listeners:[],allListeners:[],elementFunctions:Fr},Fr);return e.tagName=t,e}function as(t,e){const n=(...t)=>{const e={...n};var o,r;return e.attributes=[...n.attributes],e.listeners=[...n.listeners],e.allListeners=[...n.allListeners],t.length>0&&"object"==typeof t[0]&&!Array.isArray(t[0])&&!t[0].tagJsType&&(o=e,r=t[0],Object.entries(r).reduce(((t,[e,n])=>e in Kr?Kr[e](o,n):zr(o,[e,n,!1,Mt])),o),t.splice(0,1)),e.innerHTML=t,t.forEach((t=>{if(Xr(t)){if("element"===t.tagJsType)return e.allListeners.push(...t.allListeners),void(t.contexts&&(e.contexts?e.contexts.push(...t.contexts):e.contexts=t.contexts));n=t,(o=e).contexts||(o.contexts=[]),o.contexts.push(n)}var n,o})),e};return Object.assign(n,t),Object.assign(n,Fr(n)),n.attributes=[...t.attributes],n.listeners=[...t.listeners],n.allListeners=[...t.allListeners],n}function is(t,e,n,o){e.contexts=[];const r=ts(t,e,n,e.contexts);O.push([F,[o,r,"designElement.processInit"]]);const s={nn:t.tagName,domElement:r,at:t.attributes};return e.htmlDomMeta=[s],r}const cs=function(){const t=as({tagJsType:"element",processInitAttribute:D,processInit:ls,destroy:es,processUpdate:os,hasValueChanged:rs,tagName:"no-element",innerHTML:[],attributes:[],listeners:[],allListeners:[],elementFunctions:Fr});return t.tagName="no-element",t}();function ls(t,e,n,o){e.contexts=[],Qr(t.innerHTML,e,n,e.contexts,o,F)}const us=ss("button"),ds=ss("select"),ps=ss("option"),hs=ss("input"),gs=ss("hr"),fs=(ss("h1"),ss("h2")),bs=ss("h3"),xs=(ss("h4"),ss("h5"),ss("h6"),ss("ol")),ms=ss("li"),ys=ss("div"),vs=ss("fieldset"),ws=ss("legend"),Cs=ss("p"),ks=ss("a"),_s=ss("span"),Ss=ss("strong"),Ts=ss("small"),Bs=ss("label"),Vs=ss("sup"),Js={tagElement:Lr,renderWithSupport:Mn,renderSupport:Wn,firstTagRender:qe,reRenderTag:Xe,paint:U},Is=Vn((({renderCount:t,name:e})=>(Is.updates((n=>[{renderCount:t,name:e}]=n)),ys(Ts(`(${e} render count`,_s({id:`${e}_render_count`},(e=>t)),")"))))),js=Vn((()=>(t=tr(0),e=Fo(0),n=0,o=0,r=er((t=>[{renderCount:o,counter:n}]=t({renderCount:o,counter:n}))))=>(++o,Vr.dom(Es.allStrings2265941[1],Dr(t),e,n,(()=>{++n,t.next(n),e.value=n}),Is({renderCount:o,name:"insideMultiRender"}))))),Es={allStrings2265941:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"div",ch:[{nn:"span",ch:[{nn:"text",tc:"👍"},{nn:"span",at:[["id","👍-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"button",at:[["type","button"],["id","👍-counter-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"++👍"}]}]},{nn:"text",v:3},{nn:"hr"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"insideMultiRender"}]},{nn:"text",v:4}]}],[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var Ls=n(995);let Ps=null;function Ds(t=!0,e,o){null!==Ps&&(clearTimeout(Ps),console.debug("🏃 Cleared previous testing to start again..."));Ps=setTimeout((async()=>{e=e||Ns.views,console.debug("🏃 Prepare test suites...");const r=await async function(t,e=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let o=0;e&&(await Promise.resolve().then(n.bind(n,451)),++o),t.includes(Os.Content)&&(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835)),++o),t.includes(Os.Subscriptions)&&(await Promise.resolve().then(n.bind(n,528)),++o),t.includes(Os.Counters)&&(await Promise.resolve().then(n.bind(n,428)),++o),t.includes(Os.Props)&&(await Promise.resolve().then(n.bind(n,749)),++o),t.includes(Os.ProviderDebug)&&(await Promise.resolve().then(n.bind(n,186)),await Promise.resolve().then(n.bind(n,488)),++o),t.includes(Os.TagSwitchDebug)&&(await Promise.resolve().then(n.bind(n,168)),++o),t.includes(Os.Child)&&(await Promise.resolve().then(n.bind(n,527)),++o),t.includes(Os.Arrays)&&(await Promise.resolve().then(n.bind(n,842)),++o),t.includes(Os.Mirroring)&&(await Promise.resolve().then(n.bind(n,774)),++o),t.includes(Os.WatchTesting)&&(await Promise.resolve().then(n.bind(n,702)),++o),t.includes(Os.FunInPropsTag)&&(await Promise.resolve().then(n.bind(n,157)),++o),t.includes(Os.AttributeDebug)&&(await Promise.resolve().then(n.bind(n,178)),++o),t.includes(Os.OneRender)&&(await Promise.resolve().then(n.bind(n,994)),++o),t.includes(Os.Todo)&&(await Promise.resolve().then(n.bind(n,337)),++o),t.includes(Os.Destroys)&&(await Promise.resolve().then(n.bind(n,236)),++o),t.includes(Os.Basic)&&(await Promise.resolve().then(n.bind(n,566)),++o),console.debug(`🏃 Running ${o} test suites...`);try{const t=Date.now(),e=await(0,Ls.executeBrowserTests)(),n=Date.now()-t;return console.info(`✅ tests completed in ${n}ms`),e}catch(t){return console.error("❌ tests failed:",t),!1}}(e,o);t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var Os;!function(t){t.Basic="basic",t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug",t.Subscriptions="subscriptions"}(Os||(Os={}));const Ns=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(Os)});return JSON.parse(t)}();function $s(){localStorage.taggedjs=JSON.stringify(Ns)}const As=Object.values(Os),Hs=(t=As)=>{const e=[...t].sort(((t,e)=>t.localeCompare(e))).map((t=>({type:t,meta:Ol.find((e=>e.view===t))})));return ys(bs("᭟ Sections"),ys({style:"display:flex;gap:1em;flex-wrap:wrap;margin:1em;"},(t=>e.map((({meta:t,type:e})=>ys({style:"flex:0 0 auto;min-width:150px;white-space:nowrap;"},hs({name:t=>"view-type-"+e,type:"checkbox",id:t=>"view-type-"+e,checked:t=>Ns.views.includes(e),onClick:()=>function(t,e=!0){Ns.views.includes(t)?Rs(t):Ms.next({type:t,checkTesting:e});$s()}(e)}),(e=>t?.emoji?t.emoji+" ":null),Bs({for:t=>"view-type-"+e}," ",(t=>e))," ",ks({href:t=>`isolated.html#${e}`,style:"font-size:.6em;text-decoration:none;"},"🔗")," ",ks({href:t=>`#${e}`,style:"font-size:.6em;"},"↗️")).key(e)))),(e=>t.length>1&&[ys(Bs({onClick:()=>t.forEach((t=>{Us(t,!1),$s()}))}," all")),ys(Bs({onClick:()=>t.forEach((t=>{Rs(t),$s()}))}," none"))])))};Hs.tempNote="sections";const Ms=new Tt;function Rs(t){Ns.views=Ns.views.filter((e=>e!==t))}function Us(t,e=!0){Ns.views.push(t),e&&Ns.autoTest&&Ds()}const Ws=Vn(((t,e)=>Vr.dom(zs.allStrings19347[0],t,(()=>e(t))))),zs={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},Fs=Vn(((t,e,n)=>(o="other",r=0,s=0,a=er((t=>[{other:o,counter:r,renderCount:s}]=t({other:o,counter:r,renderCount:s}))),i=++s,{addArrayItem:c,myFunction:l,deleteItem:u,child:d,array:p}=t)=>Vr.dom(Ys.allStrings598669[0],e.function.original?"taggjedjs-wrapped":"nowrap",e.count,d.myChildFunction.original?"taggjedjs-wrapped":"nowrap",l.original?"taggjedjs-wrapped":"nowrap",l,function(t){if(!t)return D;const e=lt();if(!e)throw new Error("output must be used in render sync fashion");return(...n)=>{const o=e.ownerSupport;return Pr(n,t,o.context)}}(d.myChildFunction),n,qs.function,(()=>++r),p.length,p.map((t=>Ws(t,u).key(t))),c,r,Is({renderCount:s,name:"funInProps_tag_child"})))),Ys={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},Xs=Vn((t=>(e=0,n=++e,o=(e=>{if(console.log("e",e),"Enter"===e.key){const n=e.target.value.trim();t(n),e.target.value=""}}))=>[hs({type:"text",onKeyup:o,onChange:e=>{t(e.target.value),e.target.value=""}}),us({type:"button",onClick:t},"add by outside"),t=>Is({renderCount:e,name:"addArrayComponent"})])),qs={function:()=>++qs.count,count:0},Gs=Vn((()=>(t=[],e=0,n=0,o=!0,r="a",s=(()=>++e),a=++n,i=(e=>{t=t.map((t=>t)),t.push("string"==typeof e?e:"push"+t.length)}),c=(e=>t=t.filter((t=>t!==e))))=>ys(us({id:"fun-parent-button",onClick:s},"🤰 ++parent"),_s({id:"fun_in_prop_display"},(t=>e)),(t=>Is({renderCount:n,name:"funInProps_tag_parent"})),ys(Ss("🆎 main:"),_s({id:"main_wrap_state"},(t=>qs.function.original?"taggjedjs-wrapped":"nowrap")),":",(t=>qs.count)),us({id:"toggle-fun-in-child",type:"button",onClick:()=>o=!o},"toggle child"),"array length: ",t.length,us({onClick:i},"reset add"),gs(),(e=>o&&Fs({myFunction:s,array:t,addArrayItem:i,deleteItem:c,child:{myChildFunction:s}},qs,s)),(t=>Xs(i))))),Ks=Vn.immutableProps(((t,e,n)=>(o=!1,r=er((t=>[o]=t(o))))=>Vr.dom(Zs.allStrings349976[0],t.completed,o,o?Vr.dom(Zs.allStrings349976[2],t.title,(()=>o=!1),(r=>Qs(r,(r=>{!function(t,e,n,o){if(0===t.length)return void o.removeItem(e.id);o.updateToByIndex(e,{title:t},n)}(r,t,n,e),o=!1})))):Vr.dom(Zs.allStrings349976[1],t.completed&&"✅",(o=>e.toggleItem(t,n)),t.completed&&"checked",(()=>e.toggleItem(t,n)),(()=>o=!o),t.title,(()=>e.removeItemByIndex(n))))));function Qs(t,e){if("Enter"===t.key){return e(t.target.value.trim()),!0}}const Zs={allStrings349976:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🗑️ destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},ta={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},ea=Vn.immutableProps(((t,e,n,o)=>Vr.dom(na.allStrings77156[0],o,o>1&&"s","/"===n,"/active"===n,"/completed"===n,t-o>0&&Vr.dom(na.allStrings77156[1],(()=>e()))))),na={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const oa=()=>window.location.hash.substring(1)||"/",ra=()=>{const t=bn((()=>({route:oa(),location:window.location}))),e=cr((e=>t.route=oa())),n=bn((()=>(t=>{const e=()=>t(oa());return window.addEventListener("hashchange",e),e})(e)));return vn((()=>window.removeEventListener("hashchange",n))),t},sa=[],aa=function(t){function e(e,n,o){return t[o]={...e,...n},t}return{addItem:function(e){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})),title:e,completed:!1}),t},removeItem:function(e){return t.filter((t=>t.id!==e))},toggleItem:function(t,n){return e(t,{completed:!t.completed},n)},removeAll:function(){return t=[]},toggleAll:function(e){for(let n=t.length-1;n>=0;--n)t[n]={...t[n],completed:e};return t},removeCompleted:function(){for(let e=t.length-1;e>=0;--e)t[e].completed&&t.splice(e,1);return t},removeItemByIndex:function(e){return t.splice(e,1),t},completeItem:function(t,n){return e(t,{completed:!0},n)},updateItemByIndex:function(e,n){return t[n]={...e},t},updateToByIndex:e}}(sa),ia=()=>{const t=ra().route,e=sa.filter((t=>!t.completed)).length,n="/completed"===t,o="/active"===t&&sa.filter((t=>!t.completed))||n&&sa.filter((t=>t.completed))||sa,r=sa.length,s=o.map(((t,e)=>Ks(t,aa,e).key(t.id)));return Vr.dom(ca.allStrings143180[0],!1,(t=>Vn.renderOnce=()=>Vr.dom(ta.allStrings47860[0],(e=>{Qs(e,(e=>t.addItem(e)))&&(e.target.value="")})))(aa),r>0&&Vr.dom(ca.allStrings143180[1],e<1?1:0,(t=>aa.toggleAll(t.target.checked)),s,ea(r,aa.removeCompleted,t,e)))},ca={allStrings143180:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},la=Vn(((t,e,n)=>{let o=0;return la.updates((o=>[t,e,n]=o)),vs({id:"innerHtmlTests-1"},ws("no props test"),ys({style:"border:2px solid purple;"},(t=>n)),ys((t=>`isSubjectInstance:${ot(n)}`)),ys((t=>`isSubjectTagArray:${n instanceof Array}`)),us({id:"innerHtmlTest-counter-button",onClick:()=>++o},(t=>`increase innerHtmlTest ${o}`)),_s({id:"innerHtmlTest-counter-display"},(t=>o)),(t=>Is({renderCount:1,name:"innerHtmlTest"})))})),ua=Vn(((t,e)=>(n=0,o=0,r=er((t=>[{counter:n,renderCount:o}]=t({counter:n,renderCount:o}))),s=++o)=>Vr.dom(da.allStrings127090[0],t,e,(()=>++n),n,n,!1))),da={allStrings127090:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},pa=Vn(((t,e,n)=>(pa.updates((o=>[t,e,n]=o)),vs(ws("xxxxx"),ys("hello other world",(e=>t)," - ",(t=>e)),ys({style:"border:2px solid red;"},"***",(t=>n),"***"))))),ha=Vn(((t="childTests")=>(t=0,e=0,n=er((n=>[{renderCount:t,counter:e}]=n({renderCount:t,counter:e}))),o=++t)=>Vr.dom(fa.allStrings801974[1],pa(1,2,Vr.dom(fa.allStrings801974[2],Date.now())),la({},2,Vr.dom(fa.allStrings801974[3],(()=>++e),e,t,e,Is({renderCount:t,name:"childTests-innerHtmlTest"}))),(()=>{const t=$r();return Vr.dom(fa.allStrings801974[0],11,t,22).acceptInnerHTML(t)})().innerHTML=Vr.dom(fa.allStrings801974[4],(()=>++e),e,t,e,Is({renderCount:t,name:"childTests-innerHtmlTest-c"})),ua(22,Vr.dom(fa.allStrings801974[5],(()=>++e),e,e,Is({renderCount:t,name:"innerHtmlPropsTest child"}))),ga({child:Vr.dom(fa.allStrings801974[6],(()=>++e),e,e)}),(()=>++e),e,t,e,Is({renderCount:t,name:"childTests"})))),ga=Vn((({child:t})=>(ga.updates((e=>[{child:t}]=e)),vs(ws("child as prop"),(e=>t))))),fa={allStrings801974:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}]]};let ba=Fo(0);const xa=Vn((()=>(t=!0,e=0,n=++e)=>cs("destroyCount: ",_s({id:"destroyCount"},(t=>ba)),"on/off: ",(e=>t),(e=>t&&ma()),us({id:"toggle-destroys",type:"button",onClick:()=>{t=!t}},(e=>t?"destroy":"restore")),(()=>Is({renderCount:e,name:"destroys"}))))),ma=Vn((()=>(t=vn((()=>++ba.value)))=>ys.attr(Ar.onDestroy((()=>{++ba.value})))({id:"destroyable-content",style:"border:1px solid orange;"},"will be destroyed")));function ya({fxIn:t,fxOut:e,outPositionAbsolute:n=!0}){return{in:(e,n)=>va({fxName:t,...e},n),out:(t,o)=>wa({fxName:e,outPositionAbsolute:n,...t},o)}}const va=async({target:t,fxName:e="fadeInUp"},n)=>(t.style.opacity="0",n&&await ka(n),t.style.opacity="1",Ca(e,t)),wa=async({target:t,outPositionAbsolute:e=!0,fxName:n="fadeOutUp"},o)=>(e&&function(t){t.style.zIndex=t.style.zIndex||1;const e=t.offsetTop+"px",n=t.offsetLeft+"px",o=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",r=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=e,t.style.left=n,t.style.width=o,t.style.height=r,t.style.position="absolute"}),0)}(t),o&&await ka(o),Ca(n,t));function Ca(t,e){let n;const o=new Promise((function(t){n=t}));return e.classList.add("animate__animated","animate__"+t),e.addEventListener("animationend",(function o(r){r.target===e&&(e.classList.remove("animate__animated","animate__"+t),e.removeEventListener("animationend",o),n(void 0))})),o}function ka(t){return new Promise((e=>{setTimeout(e,t)}))}const{in:_a,out:Sa}=ya({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:Ta,out:Ba}=ya({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:Va,out:Ja}=ya({fxIn:"fadeIn",fxOut:"fadeOut"}),Ia=({fxIn:t,fxOut:e,stagger:n,inName:o="fadeInUp",outName:r="fadeOutDown",duration:s=".2s",outPositionAbsolute:a=!1}={})=>{const i=ja((t=>(t.style.setProperty("--animate-duration",s),i.fxIn({target:t},n))),(t=>{t.style.setProperty("--animate-duration",s);const e=i.fxOut({target:t},n);return e}),t,e,o,r,a);return i.host};function ja(t,e,n,o,r,s,a){if(!n||!o){const t=ya({fxIn:r,fxOut:s,outPositionAbsolute:a});n||(n=t.in),o||(o=t.out)}return{fxIn:n,fxOut:o,host:Ar((()=>{}),{onInit:t,onDestroy:e})}}const Ea=Vn((({score:t,playerIndex:e})=>{let n=0;return er((t=>[n]=t(n))),++n,Vr.dom(La.allStrings67878[0],t.frame,`score-data-${e}-${t.frame}-inside-button`,(()=>++t.score),t.score,`score-data-${e}-${t.frame}-inside-display`,t.score,(()=>++n),Is({renderCount:n,name:"scoreData"+t.frame}))})),La={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},Pa=Vn((()=>{const t=[];let e=0;const n=function(t=[]){return lt()?bn((()=>pr(Yo(t)))):pr(Yo(t))}(["d","e","f"]),o=["a","b","c"],r=(({stagger:t=100,fxIn:e,fxOut:n,duration:o="2s",inName:r="fadeInUp",outName:s="fadeOutDown",outPositionAbsolute:a=!1}={})=>{let i=0;const c=ja((function(e){e.style.setProperty("--animate-duration",o);const n=t*i++;return c.fxIn({target:e},n).then((()=>{--i}))}),(function(e){e.style.setProperty("--animate-duration",o);const n=t*i++;return c.fxOut({target:e},n).then((()=>{--i}))}),e,n,r,s,a);return c.host})({stagger:10,duration:".1s"}),s=()=>({name:"Person "+t.length,scores:"0,".repeat(0).split(",").map(((t,e)=>({frame:e+1,score:Math.floor(4*Math.random())+1})))}),a=e=>{const n=t[e];t.splice(e,1),n.edit=!n.edit};function i(t){for(let e=0;e<t;++e)n[n.length]=n.length.toString()}return ys(_s("count display:",_s({id:"arrays-counter-display"},(t=>e))),vs(ws("signal array test ",Vs({id:"signal-array-count"},(t=>n.length))),ys({style:"display:flex;flex-wrap:wrap;gap:1em"},Dr(n,(t=>t.map(((t,o)=>ys({attr:r,id:t=>`signal-array-item-${o}`,style:"border:1px solid black;border-radius:.2em"},"index:",(t=>o)," counter:",_s({id:t=>`signal-array-item-counter-display-${o}`},(t=>e))," content:",(e=>t)," length:",(t=>n.length),us({id:`signal-array-item-delete-btn-${o}`,onClick:()=>{n.splice(o,1)}},"🗑️ delete subscribe"),us({type:"button",onClick:()=>++e},"++counter ",(t=>e))).key(t))))),ys(us({type:"button",id:"signal-array-increase-counter",onClick:()=>++e},"++counter ",(t=>e)),us({type:"button",id:"push-signal-array-btn",onClick:()=>i(1)},"add number"),us({type:"button",onClick:()=>i(10)},"add 10 number"),us({type:"button",onClick:()=>{setTimeout((()=>{n[n.length]=n.length.toString()}),1e3)}},"add number by delay"),us({type:"button",onClick:()=>{setTimeout((()=>{n.length=0}),1e3)}},"delay clear array")))),vs({style:"display:flex;flex-wrap:wrap;gap:1em"},ws("simple array test - length:",(t=>o.length)),(t=>o.map(((t,n)=>ys("counter:",(t=>e)," index:",(t=>n)," x:",(e=>t)," length:",(t=>o.length),us({onClick:()=>{o.splice(n,1)}},"🗑️ delete simple")).key(t)))),ys(us({type:"button",onClick:()=>++e},"++counter ",(t=>e)),us({type:"button",onClick:()=>o[o.length]=o.length.toString()},"add number"))),vs(ws("game with players"),ys({style:"display:flex;flex-wrap:wrap;gap:1em"},ys("players count:",(e=>t.length)),(e=>t.map(((e,n)=>Da(e,n,t,s,a).key(e.name))))),us({id:"array-test-push-item",onClick:()=>{t.push(s())}},"push item ",t.length+1),us({onClick:()=>{t.push(s()),t.push(s()),t.push(s())}},"push 3 items"),us({onClick:()=>{t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s())}},"push 9 items"),(e=>t.length>0&&us({attr:Ia({duration:".1s"}),onClick:()=>t.length=0},"remove all"))),(t=>Is({renderCount:1,name:"arrayTests.ts"})))})),Da=Vn(((t,e,n,o,r)=>(Da.updates((s=>{[t,e,n,o,r]=s})),ys({style:"background-color:black;",attr:Ia({duration:".1s"})},ys((e=>`name:${t.name}`)),ys((t=>`index:${e}`)),ys({style:"background-color:purple;padding:.5em"},"scores:",(e=>t.scores.map(((t,e)=>Oa(e,t).key(t))))),(n=>t.edit&&us({onClick:()=>{r(e)}},"remove")),(n=>t.edit&&us({id:t=>`player-remove-promise-btn-${e}`,onClick:async()=>(t.edit=!t.edit,r(e),"player-remove-promise-btn-xx")},"remove by promise")),us({id:t=>`player-edit-btn-${e}`,onClick:()=>t.edit=!t.edit},"edit"),us({onClick:()=>{n.splice(e,0,o())}},"add before"))))),Oa=Vn(((t,e)=>ys({class:"animate__slow",attr:Ia({duration:".1s"})},vs(ws(us({id:n=>`score-data-${t}-${e.frame}-outside-button`,onClick:()=>++e.score},(t=>`outer score button ++${e.score}`)),_s({id:n=>`score-data-${t}-${e.frame}-outside-display`},(t=>e.score))),(n=>Ea({score:e,playerIndex:t})))))),Na=Vn(((t="tagSwitchDebug")=>{let e=null;return ys(ys({id:"selectTag-wrap"},"selectedTag: |",_s({id:"selectTag-display"},(()=>(null===e?"null":void 0===e&&"undefined")||""===e&&"empty-string"||e)),"|"),ds({id:"tag-switch-dropdown",onChange:function(t){e=t.target.value,"undefined"===e&&(e=void 0),"null"===e&&(e=null)}},ps(),ps({value:"",selected:()=>"string"!=typeof e||e.length?{}:{selected:!0}},"empty-string"),ps({value:"undefined",selected:()=>void 0===e?{selected:!0}:{}},"undefined"),ps({value:"null",selected:()=>null===e},"null"),ps({value:"1",selected:()=>"1"===e},"tag 1"),ps({value:"2",selected:()=>"2"===e},"tag 2"),ps({value:"3",selected:()=>"3"===e},"tag 3")),ys({id:"switch-tests-wrap",style:"display:flex;flex-wrap:wrap;gap:1em;"},ys({style:"border:1px solid blue;flex-grow:1"},bs("Test 1 - string | Tag"),ys((()=>{switch(e){case null:return"null, select tag below";case"":return ys({id:"empty-string-1"});case"1":return Aa({title:"value switch"});case"2":return Ha({title:"value switch"});case"3":return Ma({title:"value switch"})}return"select tag below"}))),ys({style:"border:1px solid blue;flex-grow:1"},bs("Test 2 - Tag"),ys((()=>{switch(e){case null:return ys({id:"select-tag-above"},"null, select tag above");case"":return ys({id:"select-tag-above"},"empty-string, select tag above");case"1":return Aa({title:"tag switch"});case"2":return Ha({title:"tag switch"});case"3":return Ma({title:"tag switch"})}return ys({id:"select-tag-above"},"select tag above")}))),ys({style:"border:1px solid blue;flex-grow:1"},bs("Test 3 - ternary (only 1 or 3 shows)"),ys((()=>"3"===e?Ma({title:"ternary simple"}):Aa({title:"ternary simple"})))),ys({style:"border:1px solid blue;flex-grow:1"},bs("Test 3.2 - ternary via prop (only 1 or 3 shows)"),ys((()=>$a({selectedTag:e})))),ys({id:"arraySwitching-test-wrap",style:"border:1px solid red;flex-grow:1"},bs("Test 4 - arraySwitching"),ys({id:"arraySwitching-wrap"},(()=>Ra({selectedTag:e}))))),(()=>Is({renderCount:1,name:"tagSwitchDebug"})))})),$a=Vn((({selectedTag:t})=>($a.inputs((e=>[{selectedTag:t}]=e)),ys({id:"ternaryPropTest-wrap"},(()=>`${t}:`),(e=>"3"===t?Ma({title:"ternaryPropTest"}):Aa({title:"ternaryPropTest"})))))),Aa=Vn((({title:t})=>{let e=0;return Aa.inputs((e=>[{title:t}]=e)),ys({id:"tag1",style:"border:1px solid orange;"},ys({id:"tagSwitch-1-hello"},(()=>`Hello 1 ${t} World`)),us({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Is({renderCount:1,name:"tag1"})))})),Ha=Vn((({title:t})=>{let e=0;return ys({id:"tag2",style:"border:1px solid orange;"},ys({id:"tagSwitch-2-hello"},(()=>`Hello 2 ${t} World`)),us({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Is({renderCount:1,name:"tag1"})))})),Ma=Vn((({title:t})=>{let e=0;return Ma.inputs((e=>[{title:t}]=e)),ys({id:"tag3",style:"border:1px solid orange;"},ys({id:"tagSwitch-3-hello"},(()=>`Hello 3 ${t} World`)),us({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Is({renderCount:1,name:"tag1"})))})),Ra=({selectedTag:t})=>{switch(t){case void 0:return"its an undefined value";case null:return"its a null value";case"":return"space";case"1":return Aa({title:`tag ${t}`});case"2":return["b","c"].map((e=>Ha({title:`array ${t} ${e}`}).key(e)));case"3":return["d","e","f"].map((e=>Ma({title:`array ${t} ${e}`}).key(e)))}return"nothing to show for in arrays"},Ua=Vn((()=>{const t=Wa();return Vr.dom(za.allStrings156734[0],t,t)})),Wa=()=>{let t=0;return er((e=>[t]=e(t))),Vr.dom(za.allStrings156734[1],t,(()=>++t),t)},za={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},Fa=(t,e)=>Vn.use=(n=bn("statePropDebug.tag.ts"),o=!1,r=0,s=er((t=>[{edit:o,renderCount:r}]=t({edit:o,renderCount:r}))),a=++r)=>Vr.dom(Ya.allStrings53929[0],t,(()=>o=!o),o,e,Is({renderCount:r,name:"statePropDebug-tag"})),Ya={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},Xa=Vn(((t="propsDebugMain")=>(t=0,e=0,n=0,o={test:33,x:"y"},r=bn((()=>new Date)),s=JSON.stringify(o,null,2),a=!0,i=er((s=>[{syncPropNumber:t,propNumber:e,renderCount:n,propsJson:o,date:r,statePropDisplay:a}]=s({syncPropNumber:t,propNumber:e,renderCount:n,propsJson:o,date:r,statePropDisplay:a}))))=>Vr.dom(Za.allStrings3198315[0],(t=>o=JSON.parse(t.target.value)),s,s,++n,(()=>++e),e,e,Ka({propNumber:e,propsJson:o,propNumberChange:t=>{e=t}}),t,(()=>++t),Is({renderCount:n,name:"sync_props_callback"}),Ga({syncPropNumber:t,propNumberChange:e=>t=e,parentTest:t=>t}),a&&Fa(e,Vr.dom(Za.allStrings3198315[1])),(()=>a=!a),r,function(t){const e=new Date(t),n=e.getFullYear(),o=String(e.getMonth()+1).padStart(2,"0"),r=String(e.getDate()).padStart(2,"0"),s=String(e.getHours()).padStart(2,"0"),a=String(e.getMinutes()).padStart(2,"0");return{date:`${n}-${o}-${r}`,time:`${s}:${a}`}}(r).date,(t=>{const e=t.target.value;r=new Date(e)}),qa({date:r})))),qa=Vn((({date:t})=>Vr.dom(Za.allStrings3198315[2],t))),Ga=Vn((({syncPropNumber:t,propNumberChange:e,parentTest:n})=>(o=bn("syncPropDebug"),r=0,s=0,a=er((t=>[{counter:r,renderCount:s}]=t({counter:r,renderCount:s}))))=>(++s,t%2==1&&e(t+=1),Vr.dom(Za.allStrings3198315[3],t,(()=>e(++t)),r,n(r),(()=>{n(++r)}),Is({renderCount:s,name:"child_sync_props_callback"}))))),Ka=Vn((({propNumber:t,propsJson:e,propNumberChange:n})=>(o=bn("propsDebug"),r=0,s=0,a=nr((e=>[t]=e(t))),i=t,c=er((t=>[{renderCount:r,propNumberChangeCount:s,myPropNumber:i}]=t({renderCount:r,propNumberChangeCount:s,myPropNumber:i}))),l=Go([t],(()=>i=t)),u=Go([i],(()=>++s)))=>Vr.dom(Za.allStrings3198315[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(u,null,2),(()=>n(++i)),i,i,(()=>++t),t,t,(()=>++r),++r,(()=>++i),i,s,Qa({propNumber:i,callback:()=>++i})))),Qa=Vn.immutableProps((({propNumber:t,callback:e})=>(n=bn("propFnUpdateTest"),o=0,r=er((t=>[o]=t(o))))=>(++o,Vr.dom(Za.allStrings3198315[5],e,t,t,Is({renderCount:o,name:"propFnUpdateTest"})))));const Za={allStrings3198315:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},ti=Vn((t=>Vr.dom(ei.allStrings248805[0],(()=>t.showDialog=!1),t.showDialog?Vr.dom(ei.allStrings248805[1],JSON.stringify(t,null,2)):"no dialog"))),ei={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]},ni=Ar(((t,e)=>({selected:t,targets:bn([])}))),oi=Ar((t=>{const e=Vn.inject(ni);Vn.onInit((()=>e.targets.push(t))).onDestroy((()=>{const n=e.targets.findIndex((e=>e===t));-1!==n&&e.targets.splice(n,1)})).element.onclick((()=>{const n=e.selected.findIndex((e=>e===t));-1!==n?e.selected.splice(n,1):e.selected.push(t)}))})),ri=Vn((()=>{const t=bn((()=>[0,1,2,3,4,5,6,7,8,9].map((t=>({id:t}))))),e=bn([]),n=ni(e,(t=>{e.length=0,e.push(...t)}));return Vr.dom(si.allStrings171524[0],e.length,n,t.map((t=>Vr.dom(si.allStrings171524[1],`injection-test-item-${t.id}`,oi(t),e.includes(t)?"#4CAF50":"#2196F3",e.includes(t)?"3px solid #333":"1px solid #999",{checked:!!e.includes(t)},t.id))),e.length>0?e.map((t=>t.id)).join(", "):"No items selected. Click to select items.")})),si={allStrings171524:[[{nn:"div",at:[["style","padding: 20px;"]],ch:[{nn:"h2",ch:[{nn:"text",tc:"Injection Test"}]},{nn:"text",tc:"selected: "},{nn:"text",v:0},{nn:"div",at:[["style","\n          border: 2px solid #666;\n          gap:1em;\n          background: #f0f0f0;\n          padding: 20px;\n          min-height: 300px;\n          position: relative;\n          user-select: none;\n          display:flex;flex-wrap:wrap;\n        "],["id","injection-testing-wrap-host"],[{tagJsVar:1}]],ch:[{nn:"text",v:2}]},{nn:"div",at:[["style","margin-top: 20px; padding: 10px; background: #333; color: white;"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Selected Items:"}]},{nn:"p",ch:[{nn:"text",v:3}]}]},{nn:"div",at:[["style","margin-top: 10px; color: #666;"]],ch:[{nn:"small",ch:[{nn:"strong",ch:[{nn:"text",tc:"Instructions:"}]},{nn:"br"},{nn:"text",tc:"- Click to select/deselect items"},{nn:"br"},{nn:"text",tc:"- Click on empty space to deselect all"},{nn:"br"},{nn:"text",tc:"- Selected items will be highlighted in green"}]}]}]}],[{nn:"div",at:[["style","\n              display: inline-block;\n              color: black;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: bold;\n              cursor: pointer;\n              transition: background 0.3s;\n              "],["id",{tagJsVar:0},null],[{tagJsVar:1}],["style.background",{tagJsVar:2},"style"],["style.border",{tagJsVar:3},"style"]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:4}]]},{nn:"text",tc:"Item "},{nn:"text",v:5}]}]]};class ai{constructor(){this.tagDebug=0,this.showDialog=!1}}const ii=()=>({counter:0});function ci(){return{upper:rr.create(li),test:0}}function li(){return bn("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const ui=Vn(((t="providerDebugBase")=>{rr.create(ii);const e=rr.create(ai),n=rr.create(ci);let o=0,r=0;return er((t=>[{propCounter:o,renderCount:r}]=t({propCounter:o,renderCount:r}))),e.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++r,Vr.dom(yi.allStrings6857929[0],n.test,n.upper?.test||"?",e.tagDebug||"?",(()=>++n.test),n.test,n.test,(()=>++n.upper.test),n.upper.test,n.upper.test,(()=>++e.tagDebug),e.tagDebug,e.tagDebug,(()=>++o),o,o,(()=>e.showDialog=!0),e.showDialog,di({propCounter:o,propCounterChange:t=>{o=t}}),r,Is({renderCount:r,name:"providerDebugBase"}),ti(e),mi())})),di=Vn((({propCounter:t,propCounterChange:e,_:n="providerDebug.js@child"})=>{const o=rr.inject(ii),r=rr.inject(ci),s=rr.inject(ai),a=rr.inject(li);let i=!1,c=0;er((t=>[{showProProps:i,renderCount:c}]=t({showProProps:i,renderCount:c})));const l=ur(),u=bn((()=>new Tt));return xn((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),u.subscribe((t=>{l((e=>{r.test=t}))()}))})),++c,Vr.dom(yi.allStrings6857929[4],(()=>++r.test),r.test,r.test,(()=>++a.test),a.test,a.test,(()=>++o.counter),o.counter,o.counter,(()=>u.next(r.test+1)),r.test,(()=>++s.tagDebug),s.tagDebug,s.tagDebug,(()=>e(++t)),t,t,(()=>s.showDialog=!0),s.showDialog,(()=>i=!i),i?"hide":"show",i&&Vr.dom(yi.allStrings6857929[5],Ia(),pi(s)),c,Is({renderCount:c,name:"providerDebugInner"}))})),pi=Vn((t=>Vr.dom(yi.allStrings6857929[6],JSON.stringify(t,null,2)))),hi=Ar(((t="red")=>{const e=Vn.element.get();e.style.border="2px solid "+t,e.style.display="flex",e.style.gap="1em";return{color:t,title:"inCycleParent"}})),gi=Ar(((t="green")=>{const e=Vn.inject(hi),n=Vn.element.get();n.style.border="2px solid "+t,n.style.flex="1",n.innerHTML=`wonderful - parent(${e.color})`})),fi=Ar(((t="green")=>{const e=Vn.element.get();e.style.border="2px solid "+t,e.style.flex="1"})),bi=Ar(((t="green")=>{Vn.element.get().style.color=t})),xi=["red","blue","green","purple","orange"],mi=Vn((()=>{let t="red",e="green",n="green",o=!1;return er((r=>[{cycleColorParent:t,cycleColorChild:e,cycleColorChild2:n,hideShowCycles:o}]=r({cycleColorParent:t,cycleColorChild:e,cycleColorChild2:n,hideShowCycles:o}))),Vr.dom(yi.allStrings6857929[7],!o,(t=>o=!o),!o&&Vr.dom(yi.allStrings6857929[8],(e=>t=e.target.value),xi.map((e=>Vr.dom(yi.allStrings6857929[9],e,t===e,e).key(e))),(t=>e=t.target.value),xi.map((t=>Vr.dom(yi.allStrings6857929[10],t,e===t,t).key(t))),(t=>n=t.target.value),xi.map((t=>Vr.dom(yi.allStrings6857929[11],t,n===t,t).key(t))),ri(),hi(t),gi(e),fi(n),bi(n)))})),yi={allStrings6857929:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}],[{nn:"fieldset",at:[["id","in-cycle-context-comms"]],ch:[{nn:"legend",ch:[{nn:"label",ch:[{nn:"input",at:[["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"text",tc:"In-Cycle Context Communication"}]}]},{nn:"text",v:2}]}],[{nn:"div",at:[["style","margin-bottom: 1em"],["id","fieldset-body-wrap"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:2},null]],ch:[{nn:"text",v:3}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",at:[["id","drag-drop-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Drag Selection Testing"}]},{nn:"text",v:6}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:7}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:8}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",tc:"wonderful too\n            "},{nn:"text",v:9},{nn:"span",ch:[{nn:"text",tc:"part 2"},{nn:"text",v:10}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},vi=Vn((({label:t,memory:e})=>{let n=!1,o=!1;return er((t=>[{mouseOverEditShow:n,edit:o}]=t({mouseOverEditShow:n,edit:o}))),Vr.dom(wi.allStrings140407[0],(()=>n=!0),(()=>n=!1),t,e.counter,n||"false",(()=>++e.counter),o||n?"visible":"hidden",(()=>o=!o))})),wi={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Ci=Date.now(),ki=Vn((()=>ys("hello complex world"))),_i=Vn.immutableProps((({appCounterSubject:t},e="countersDebug")=>ys("\x3c!--counters--\x3e",ki(),ys({style:"display:flex;flex-wrap:wrap;gap:1em"},ys("👉 Subscription count:",_s({id:"👉-counter-sub-count"},Dr(Tt.globalSubCount$))),us({onClick:()=>console.info("subs",Tt.globalSubs)},"log subs"),ys(us({id:"counters-app-counter-subject-button",onClick:()=>t.next((t.value||0)+1)},"🍒 ++app subject"),_s("🍒 ",_s({id:"app-counters-display"},Dr(t))),_s("🍒 ",_s({id:"app-counters-subject-display"},t.value)))),Ji()))),Si=Vn.deepPropWatch((({propCounter:t,increasePropCounter:e})=>(n=0,o=0,r=0,s=++o)=>(Si.updates((n=>{[{propCounter:t,increasePropCounter:e}]=n})),ys(ys.attr(Ar.onInit((()=>++r)))({style:"display:flex;flex-wrap:wrap;gap:1em;"},ys({style:"border:1px dashed black;padding:1em;"},"🔥 elmInitCount:",_s({id:"🔥-init-counter"},(t=>r))),ys({style:"border:1px dashed black;padding:1em;"},us({id:"❤️-inner-counter",onClick:e},"❤️-inner-counter propCounter:",(e=>t)),_s("❤️ ",_s({id:"❤️-inner-display"},(e=>t)))),ys({style:"border:1px dashed black;padding:1em;"},us({id:"🤿-deep-counter",onClick:()=>++n},"🤿 otherCounter:",(t=>n)),_s("🤿 ",_s({id:"🤿-deep-display"},(t=>n))))),ys("renderCount:",(t=>o)),(t=>Is({renderCount:o,name:"inner_counters"})))))),Ti=Vn.watchProps((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0;return er((t=>[{otherCounter:n,renderCount:o}]=t({otherCounter:n,renderCount:o}))),++o,Vr.dom(Ii.allStrings9737161[0],e,t,t,(()=>++n),n,n,o,Is({renderCount:o,name:"shallow_counters"}))})),Bi=Vn.immutableProps((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0;return er((t=>[{otherCounter:n,renderCount:o}]=t({otherCounter:n,renderCount:o}))),++o,Vr.dom(Ii.allStrings9737161[1],e,t,t,(()=>++n),n,n,o,Is({renderCount:o,name:"immutable_counters"}))})),Vi=Vn((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0,r="noWatchPropCounters";return er((t=>[{otherCounter:n,renderCount:o,noWatchPropCounters:r}]=t({otherCounter:n,renderCount:o,noWatchPropCounters:r}))),++o,Vr.dom(Ii.allStrings9737161[2],e,t,t,(()=>++n),n,n,o,Is({renderCount:o,name:"nowatch_counters"}))})),Ji=Vn((()=>(t=0,e=0,n=0,o=0,r=0,s=0,a=0,i=ur(),c=cr((t=>{t})),l=(()=>{++s}),u={propCounter:s,increasePropCounter:l},d=new Tt(n),p=new Tt(0),h=new Tt,g=new Xo("222"),f=(()=>{++n,g.next("333-"+n)}),b=Tt.all([g,d]),x=tr.all([g,d]),m=tr.all([g,d,h]),y={counter:0},v=Date.now())=>(++a,console.info("countersDebug.ts: 👉 i should only ever run once"),d.subscribe(i((t=>{n=t}))),d.subscribe(c),u.propCounter!==s&&(u={propCounter:s,increasePropCounter:l}),++r,ys(ys("initCounter:",(t=>a)),ys("😱 statesRenderCount:",(e=>t),us({type:"button",onClick:()=>{++t}},"😱 ++statesRenderCount")),ys("😱😱 statesRenderCount2:",(t=>e),us({type:"button",onClick:()=>{++e}},"😱😱 ++statesRenderCount2")),ys({style:"display:flex;flex-wrap:wrap;gap:1em"},hs({id:"set-main-counter-input",placeholder:"input counter value",onKeyup:t=>n=Number(t.target.value)||0}),ys(us({id:"❤️-increase-counter",onClick:l},"❤️ propCounter:",(t=>s)),_s("❤️ ",_s({id:"❤️-counter-display"},(t=>s)))),ys(us({id:"🥦-standalone-counter",onClick:f},"🥦 stand alone counters"),_s("🥦 ",_s({id:"🥦-standalone-display"},(t=>n)))),(t=>n>1&&ys(us({id:"conditional-counter",onClick:f},"conditional counter:",(t=>n)))),_s("🥦 ",_s({id:"conditional-display"},(t=>n)))),ys(us({id:"🥦-subject-increase-counter",onClick:()=>d.next(n+1)},"++subject<>"),_s("🥦<",_s({id:"subject-counter-subject-display"},Dr(d)),">")),ys(us({id:"🥦-subject-increase-async-counter",onClick:()=>{setTimeout((()=>{p.next(p.value+1)}),10)}},"🔀 🥦 ++subject<>"),_s("🔀 🥦<",_s({id:"subject-async-counter-subject-display"},Dr(p)),">")),vs(ws("🪈 pipedSubject 1"),ys(Ts(_s({id:"🪈-pipedSubject"},Dr(b,(()=>n)))))),vs(ws("🪈 pipedSubject 2"),ys(Ts(_s({id:"🪈-pipedSubject-2"},Dr(x,(()=>n)))))),vs(ws("🪈 pipedSubject 3"),ys(Ts(_s({id:"🪈-pipedSubject-3"},Dr(m,(t=>(console.log("pipedSubject3",m),"hello world"))))))),vs(ws("shared memory"),ys({class:{bold:!0,"text-blue":!0},style:"display:flex;flex-wrap:wrap;gap:.5em"},(t=>vi({label:"a-a-😻",memory:y})),(t=>vi({label:"b-b-😻",memory:y}))),"memory.counter:😻",(t=>y.counter),us({onClick:()=>++y.counter},"increase 😻")),vs(ws("inner counter"),(t=>Si({propCounter:s,increasePropCounter:l}))),vs(ws("shallow props"),(t=>Ti({propCounter:s,increasePropCounter:l}))),vs(ws("immutable props"),(t=>Bi(u))),vs(ws("nowatch props"),(t=>Vi({propCounter:s,increasePropCounter:l}))),ys({style:"font-size:0.8em;opacity:0.8"},"⌚️ page load to display in ",_s.attr(Ar.onInit((t=>t.innerText=(Date.now()-Ci).toString())))("-"),"ms"),ys({style:"font-size:0.8em;opacity:0.8"},"⌚️ read in ",_s.attr(Ar.onInit((t=>t.innerText=(Date.now()-v).toString())))("-"),"ms"),(t=>Is({renderCount:r,name:"counters"})))))),Ii={allStrings9737161:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},ji=Vn((()=>{let t=!0;return er((e=>[t]=e(t))),Vr.dom(Ei.allStrings52782[0],5,5,t&&Vr.dom(Ei.allStrings52782[1]),t&&Vr.dom(Ei.allStrings52782[2]))})),Ei={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]},Li=Vn((({name:t,array:e,included:n,columnNames:o,allColumnNames:r})=>{let s,a=!1,i=!1;const c=bn([]);er((t=>[{mouseOverEditShow:a,edit:i,editFormula:s}]=t({mouseOverEditShow:a,edit:i,editFormula:s})));return Vr.dom(Di.allStrings431691[0],(function(){const e=o.indexOf(t);e>=0?o.splice(e,1):o.push(t)}),n&&"checked",t,(()=>a=!0),(()=>a=!1),i||a?"visible":"hidden",(()=>i=!i),n&&o.length!==r.length?Vr.dom(Di.allStrings431691[1],(()=>{o.length=0,o.push(...r)})):Vr.dom(Di.allStrings431691[2],(()=>{o.length=0,o.push(t)})),i&&Vr.dom(Di.allStrings431691[3],s&&Vr.dom(Di.allStrings431691[4],(t=>{return n=s,o=t.target.value,n.stringFormula=o,void(n.value=Pi(o,{array:e}));var n,o}),s.value),c.map((t=>Vr.dom(Di.allStrings431691[5],t.title,(()=>s=t),t.value).key(t))),(()=>{const n=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;c.push({title:"sum",stringFormula:n,value:Pi(n,{array:e})})})))}));function Pi(t,e={}){return function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{isNaN,Math,Number,Date,...e})}const Di={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},Oi=Vn((({array:t,showAll:e,showKids:n,toggleColumnDialog:o,columnNames:r,formatChange:s,allowMaximize:a,everySimpleValue:i})=>Vr.dom(Ni.allStrings122184[0],t.length&&Vr.dom(Ni.allStrings122184[1],r.map((t=>Vr.dom(Ni.allStrings122184[2],o&&"pointer",o,t).key(t)))),t.map((t=>Vr.dom(Ni.allStrings122184[3],r.map((o=>Vr.dom(Ni.allStrings122184[4],Zi({value:t[o],showLevels:0,showAll:e,showKids:e||n,isRootDump:!1,formatChange:s,allowMaximize:a})).key(t[o])))).key(t)))))),Ni={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},$i=Vn((({array:t,showLevels:e,showAll:n,showKids:o,columnNames:r,formatChange:s,toggleColumnDialog:a,allowMaximize:i,everySimpleValue:c})=>Vr.dom(Ai.allStrings152127[0],t.map(((t,o)=>{const l=function(t,e){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,e){if(!e)return t;const n={};return e.forEach((e=>{(t.hasOwnProperty(e)||e in t)&&(n[e]=t[e])})),n}(t,e)}(t,r);return Vr.dom(Ai.allStrings152127[1],Zi({value:l,showLevels:e,showAll:n,showKids:!0,isRootDump:!1,formatChange:s,onHeaderClick:a,allowMaximize:i,everySimpleValue:c})).key(o)})))));const Ai={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},Hi=Vn((({showLevels:t,showAll:e,showKids:n,array:o,arrayView:r,formatChange:s,allowMaximize:a,everySimpleValue:i})=>{const c=Go([o,o.length],(()=>o.length?function(t){return t.reduce(((t,e)=>{if(e&&"object"==typeof e){if(Array.isArray(e))return t;Object.keys(e).forEach((e=>{t.includes(e)||t.push(e)}))}return t}),[])}(o):[]));let l;const u=Go([c],(()=>[...c]));let d=!1;const p=bn((()=>"columnDialog"+performance.now()));er((t=>[{columnNames:l,showColumnDialog:d}]=t({columnNames:l,showColumnDialog:d}))),Go.noInit([u.length],(()=>{l||(l=u)}));const h=()=>{d=!d;const t=document.getElementById(p);d?t.showModal():t.close()},g="table"===r?Oi({showAll:e,showKids:n,array:o,toggleColumnDialog:h,columnNames:l||c,formatChange:s,everySimpleValue:i}):$i({array:o,showLevels:t,showAll:e,showKids:n,formatChange:s,columnNames:l||c,toggleColumnDialog:h,allowMaximize:a,everySimpleValue:i});return Vr.dom(Mi.allStrings463171[0],g,p,c.map((t=>{const e=void 0===l||l.includes(t);return Vr.dom(Mi.allStrings463171[1],Li({name:t,array:o,included:e,columnNames:l||u,allColumnNames:c})).key(t)})),h)}));const Mi={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},Ri=Vn((({key:t,value:e,show:n,showAll:o,showKids:r,showLevels:s,formatChange:a,allowMaximize:i,everySimpleValue:c})=>{let l,u,d=!1;er((t=>[{showLower:l,arrayView:u,maximize:d}]=t({showLower:l,arrayView:u,maximize:d}))),nr((t=>[r]=t(r))),nr((t=>[o]=t(o))),Go.noInit([n],(([t])=>l=t)),Go.noInit([o],(([t])=>l=t));const p=bn((()=>"maximize-dump-"+performance.now())),h=()=>{d=!d,d&&document.getElementById(p).showModal()},g=o||l||r||null==l&&s>0,f=n=>Vr.dom(Ui.allStrings479370[0],(()=>{if(void 0===l)return o=r=l=!g;o=r=l=!l}),t,"table"===u?"bold":"",(()=>u="table"===u?void 0:"table"),"table"===u?"flex":"table",e.length,n&&Vr.dom(Ui.allStrings479370[1],h)),b={showLevels:s,showAll:o,showKids:r,formatChange:a,array:e,arrayView:u,allowMaximize:i,everySimpleValue:c};return Vr.dom(Ui.allStrings479370[3],f(i),g&&Vr.dom(Ui.allStrings479370[2],Hi(b)),p,d&&f(!1),d&&Vr.dom(Ui.allStrings479370[4],Hi({...b,allowMaximize:!1})),(()=>document.getElementById(p).close()))})),Ui={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function Wi(t){var e=document.createElement("textarea");e.value=t,document.body.appendChild(e),e.select(),e.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(e)}function zi({key:t,value:e,onHeaderClick:n,everySimpleValue:o}){const r=e.search&&("https://"===e.slice(0,8)||"http://"===e.slice(0,7));let s;return s=o?Fi({value:e,everySimpleValue:o}):r?Yi(e):Fi({value:e}),Vr.dom(Xi.allStrings246978[0],t&&Vr.dom(Xi.allStrings246978[1],n&&"pointer",n,t),s)}const Fi=Vn((({value:t,everySimpleValue:e})=>{const n=[void 0,null,"null"].includes(t),o=t,r=!isNaN(o)&&o>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(o):"";let s=0;er((t=>[s]=t(s)));let a=t;return e&&(a=e(t)),a=(null===a?"null":!1===a&&"false")||void 0===a&&"undefined"||a,Vr.dom(Xi.allStrings246978[2],(()=>{s=Date.now()}),(e=>{if(Date.now()-s>300)return e.preventDefault(),e.stopPropagation(),!0;Wi(t)}),n?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||n&&"white"||"",r,a)}));const Yi=t=>Vr.dom(Xi.allStrings246978[3],(()=>Wi(t)),t,t),Xi={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},qi=Vn((({key:t,showKids:e,show:n,showLevels:o,value:r,showAll:s,onHeaderClick:a,formatChange:i,allowMaximize:c,everySimpleValue:l})=>{let u,d=!1;const p=bn((()=>"maximize-dump-"+performance.now()));er((t=>[{showLower:u,maximize:d}]=t({showLower:u,maximize:d}))),nr((t=>[e]=t(e))),Go.noInit([n],(([t])=>u=t)),Go.noInit([s],(([t])=>u=t));const h=!t||e||u||void 0===u&&o>0,g=()=>{d=!d,d&&document.getElementById(p).showModal()},f=n=>Vr.dom(Gi.allStrings470244[0],u?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===u)return s=e=u=!(s||e||u);e=u=!u}),t,Object.keys(r).length,n&&Vr.dom(Gi.allStrings470244[1],g)),b=t=>Vr.dom(Gi.allStrings470244[2],Object.entries(r).map((([n,r])=>Vr.dom(Gi.allStrings470244[3],r&&"object"==typeof r?"flex-grow:1;":"flex: 1 1 10em;",Zi({value:r,key:n,show:u,showAll:s,showLevels:o-1,showKids:s||e,isRootDump:!1,formatChange:i,onHeaderClick:a,allowMaximize:t,everySimpleValue:l})).key(n))));return Vr.dom(Gi.allStrings470244[4],t&&f(c),h&&b(c),p,d&&f(!1),d&&b(!1),(()=>document.getElementById(p).close()))})),Gi={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},Ki=Vn((({value:t,format:e,showAll:n,formatChange:o,showAllChange:r})=>Vr.dom(Qi.allStrings440833[0],!e||"flex"===e&&Vr.dom(Qi.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n?"background-color:#33cd5f;":"background-color:#444444"),(()=>r(n=!n))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e&&"flex"!==e?"background-color:#444444":"background-color:#33cd5f;"),(()=>o(e="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===e?"background-color:#33cd5f;":"background-color:#444444"),(()=>o(e="json")),(()=>function(t){const e=JSON.stringify(t,null,2);Wi(e)}(t)))));const Qi={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},Zi=Vn((({key:t,value:e,showKids:n=!1,showLevels:o=-1,showAll:r=!1,format:s="flex",formatChange:a=(t=>s=t),isRootDump:i=!0,onHeaderClick:c,allowMaximize:l,everySimpleValue:u})=>{i&&void 0===l&&(l=!0);const d=null===e?"null":typeof e;let p,h=!1;return nr((t=>[s]=t(s))),nr((t=>[r]=t(r))),nr((t=>[o]=t(o))),er((t=>[{show:h,arrayView:p}]=t({show:h,arrayView:p}))),xn((()=>{(o=o>=0&&o||(-1===o&&!t&&e&&e instanceof Object?2:0))>0&&(h=!0)})),[null,void 0].includes(e)?zi({key:t,value:d,onHeaderClick:c,everySimpleValue:u}):["boolean","number","string"].includes(d)?zi({key:t,value:e,onHeaderClick:c,everySimpleValue:u}):ec({value:e,showKids:n,key:t,onHeaderClick:c,everySimpleValue:u,format:s,isRootDump:i,showAll:r,showAllChange:t=>r=t,formatChange:a,show:h,showLevels:o,allowMaximize:l})}));let tc=0;const ec=({value:t,showKids:e,key:n,onHeaderClick:o,everySimpleValue:r,format:s,isRootDump:a,showAll:i,showAllChange:c,formatChange:l,show:u,showLevels:d,allowMaximize:p})=>{if(null===t)return e?zi({key:n,value:"null",onHeaderClick:o,everySimpleValue:r}):Vr.dom(nc.allStrings306188[0]);const h=Array.isArray(t);return Vr.dom(nc.allStrings306188[2],"taggedjs-dump-"+ ++tc,a&&Ki({value:t,format:s,showAll:i,showAllChange:c,formatChange:l}),"json"===s&&Vr.dom(nc.allStrings306188[1],JSON.stringify(t,null,2))||(h?Ri({key:n,value:t,show:u,showAll:i,showKids:e,showLevels:d,formatChange:l,allowMaximize:p,everySimpleValue:r}):qi({key:n,show:u,showKids:e,showLevels:d,value:t,showAll:i,formatChange:l,onHeaderClick:o,allowMaximize:p,everySimpleValue:r})))},nc={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]},oc=Vn((()=>{let t="",e=0,n="",o=!1;er((r=>[{userJsonString:t,renderCount:e,userJson:n,badEval:o}]=r({userJsonString:t,renderCount:e,userJson:n,badEval:o}))),++e;const r=bn((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return Vr.dom(rc.allStrings183632[0],(e=>{t=e.target.value;try{n=function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{}),t=JSON.stringify(n,null,2)}catch(e){o=!0;try{JSON.parse(t)}catch(t){n=Object.getOwnPropertyNames(t).reduce(((e,n)=>(e[n]=t[n])&&e||e),{})}}}),""===n?"":t,""===n?"":Vr.dom(rc.allStrings183632[1],Zi({value:n})),Zi(r),Is({renderCount:e,name:"dumpContent"}))}));const rc={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]},sc=Vn((t=>{sc.updates((e=>[t]=e));let e=1,n="white";return ys(ys({id:"dynamic-border-element",style:t=>`border-width:${e}px;border-color:${n};border-style:solid;`},t),ys("borderWidth:",hs({id:"dynamic-border-width",type:"range",min:"0",max:"10",step:"1",value:t=>e,onChange:t=>e=Number(t.target.value)})," - ",(t=>e),"px"),ys("borderColor:",ds({id:"dynamic-border-color",onChange:t=>n=t.target.value},ps({value:"",selected:t=>""===n}),ps({value:"black",selected:t=>"black"===n},"black"),ps({value:"blue",selected:t=>"blue"===n},"blue"),ps({value:"white",selected:t=>"white"===n},"white"))))})),ac=Vn((()=>{const t=bn((()=>new Xo(0)));let e=0,n=!0,o=!1,r=0,s=20,a=!1;const i=bn((()=>new Tt({added:0,removed:0})));er((t=>[{renderCount:e,orangeToggle:n,boldToggle:o,counter:r,showHideFx:a,staggerBy:s}]=t({renderCount:e,orangeToggle:n,boldToggle:o,counter:r,showHideFx:a,staggerBy:s}))),++e;const c=Dr(t,(()=>Vr.dom(lc.allStrings647663[1],(()=>{++r}),r,(()=>t.next(t.value+1)))));return Vr.dom(lc.allStrings647663[2],r,c,(()=>++r),r,(()=>a=!a),a&&Vr.dom(lc.allStrings647663[3],Ia({duration:"10ms"})),a&&Vr.dom(lc.allStrings647663[4],Ia({duration:"10ms",stagger:s})),a&&Vr.dom(lc.allStrings647663[5],Ia({duration:"10ms",stagger:2*s})),a&&(((t=10)=>{const e=$r();return Vr.dom(lc.allStrings647663[0],Ia({stagger:t,duration:".1s"}),e).acceptInnerHTML(e)})(s).innerHTML=cc()),Dr(i,(t=>t.added)),Dr(i,(t=>t.removed)),(t=>s=Number(t.target.value)),sc(Vr.dom(lc.allStrings647663[6])),oc(),Is({renderCount:e,name:"content"}),ic(),ic(),'<script>alert("i should never run but be seen on page")<\/script>',Vr.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),Vr.dom(lc.allStrings647663[7]),"3px solid orange",n?"3px solid orange":"3px solid green",(()=>n=!n),n,o?{style:"font-weight:bold;"}:{},(()=>o=!o),o?"true":"false",54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",Is({renderCount:e,name:"content"}))})),ic=()=>Vr.dom(lc.allStrings647663[8],"test0","test1","test3"),cc=Vn((()=>Vr.dom(lc.allStrings647663[9]))),lc={allStrings647663:[[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:16},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:17}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:18},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:20},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:23}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:24}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:25},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:26}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:27},{nn:"text",tc:" "},{nn:"text",v:28},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:29},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:34},{nn:"text",tc:"22"},{nn:"text",v:35},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:36},{nn:"text",tc:"__tagVar0"},{nn:"text",v:37},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:38},{nn:"text",tc:'"'}]}]}]},{nn:"text",v:39},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"text",tc:"inner html tag"}]]},uc=Vn.deepPropWatch((()=>(t=0,e=0,n=0,o=0,r=!1,s=0,a=0,i=er((i=>[{stateNum:t,stateNumChangeCount:e,slowChangeCount:n,subjectChangeCount:o,truthChange:r,truthChangeCount:s,truthSubChangeCount:a}]=i({stateNum:t,stateNumChangeCount:e,slowChangeCount:n,subjectChangeCount:o,truthChange:r,truthChangeCount:s,truthSubChangeCount:a}))),c=Go([t],(()=>++e)),l=Go.noInit([t],cr((()=>++n))),u=Go.asSubject([t],cr((()=>++o))),d=Go.truthy([r],cr((()=>++s))),p=Go.truthy.asSubject([r],cr((t=>++a))))=>Vr.dom(dc.allStrings2187613[0],t,(()=>++t),e,n,l,o,Dr(u),r?"true":"false",d||"false",s,Dr(p),a,(()=>r=!r),r?"true":"false"))),dc={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},pc=Vn((()=>{const t=new Tt,e=new Xo("purple"),n=new Xo("green");let o=!1;return vs({style:"flex-grow:1"},ws("subscribe attributes",(()=>`- shouldHideAttributes: ${o}`)),(()=>o?"":ys({style:"display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em",id:"subscribe-attributes-wrap"},ys({style:"display:flex;flex-wrap:wrap;gap:1em"},vs({style:"flex-grow:1"},ws("subscribe special attribute"),_s({id:"subscribe-style-dot-bg-color-changer",style:Wo(t,"red",(t=>({backgroundColor:t})))},"background color changer")),vs({style:"flex-grow:1"},ws("subscribe style attribute"),_s({id:"subscribe-style-bg-color",style:Wo(t,"red",(t=>`background-color:${t}`))},"subscribe bg color")),vs({style:"flex-grow:1"},ws("sometimes subscribe style attribute"),_s({id:"multiple-subscribe-bg-color",style:()=>"blue"===t.value&&Dr(e,(t=>"background-color:"+t))||"red"===t.value&&Dr(n,(t=>"background-color:"+t))||"background-color:pink;"},"multiple subscribe bg color"))))),us({id:"toggle-color-btn",type:"button",onClick:()=>{const e=t.value;t.next("red"===e?"blue":"red")}},"Toggle Color (",Dr(t),")"),us({id:"toggle-attributes-btn",type:"button",onClick:()=>{o=!o}},(()=>o?"Show":"Hide")," Attributes"),us({onClick:()=>t.next(""),id:"clear-color-btn",type:"button"},"Clear Color"),"subscriptions: ",_s({id:"subscriptions-count"},Wo(Tt.globalSubCount$,Tt.globalSubCount$.value)))})),hc=Vn((()=>{let t="a",e=!0;return ys(hs({id:"attr-input-abc",placeholder:"a b or c",onChange:e=>t=e.target.value}),ds({onChange:e=>t=e.target.value,id:"select-sample-drop-down"},["a","b","c"].map((e=>ps({value:e,selected:()=>e==t},e," - ",(n=>e==t?"true":"false"))))),ds({onChange:e=>t=e.target.value,id:"select-sample-drop-down-clone"},["a","b","c"].map((e=>ps({value:e,selected:()=>e==t},e," - ",e==t?"true":"false")))),gs,bs("Special Attributes"),ys(hs({type:"checkbox",id:"toggle-backgrounds",checked:()=>e&&"checked",onChange:t=>e=t.target.checked}),(()=>" - toggle backgrounds:"+(e?"true":"false"))),ys({style:"display: flex;flex-wrap:wrap;gap:1em"},xs(ms(ys({id:"attr-style-strings",style:t=>({backgroundColor:e?"orange":"",color:e?"black":""})},"style.background-color=${'orange'}")),ms(ys({id:"attr-class-booleans",class:()=>({"background-orange":!!e,"text-black":!!e})},(()=>`class.background-orange=${e}`))),ms(ys({id:"attr-inline-class",class:()=>e?"background-orange text-black":""},"class=${'background-orange text-black'}")),ms(ys({id:"attr-dynamic-inline-class",class:()=>"text-white"+(e?" background-orange":"")},"class=${'background-orange'} but always white")))),vs({style:"margin-top: 1em"},ws("style object attribute"),ys({id:"style-object-test",style:t=>({backgroundColor:e?"orange":"lightgrey",padding:"10px",border:"2px solid black",borderRadius:e?"8px":"4px",boxShadow:e?"2px 2px 4px rgba(0,0,0,0.3)":"none"})},"Style object test"),ys({id:"style-set-property-test",style:t=>({"background-color":e?"red":"blue",color:"white",padding:"5px","margin-top":"10px"})},"style property test")),(t=>pc()))})),gc=Vn((()=>{let t=0,e=!0;return ys(fs("Basic Component"),Cs((e=>`Counter: ${t}`)),Cs((t=>"Render Count: 1")),us({onClick:()=>t++},"Increment Counter"),us({onClick:()=>e=!e},(t=>`Toggle Div (${e?"Hide":"Show"})`)),(n=>e&&fc(t)))})),fc=Vn((t=>{let e=0,n="red";return fc.updates((e=>[t]=e)),ys((()=>`color: ${n}`),ds({onChange:t=>n=t.target.value},ps({value:"red"},"red"),ps({value:"green"},"green")),(()=>bc(t)),_s({style:t=>"color:"+n},"hello my span world"),ys({style:t=>"color:"+n},"hello my div world"),us({onClick:()=>++e},"click me"),ys((t=>`click counts ${e}`)),ys((e=>`parent counter: ${t}`)),ys((n=>`combined counters: ${e+t}`)))})),bc=Vn((t=>{bc.updates((e=>[t]=e));let e=0;return[ys("hello array bolt 0"),ys("hello array bolt 1"),ys("innerCounter: ",(t=>e)),ys((()=>`parent counter: ${t}`)),us({onClick:()=>++e},"inner counter")]}));var xc=function(t,e){return xc=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},xc(t,e)};function mc(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}xc(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function yc(t,e,n,o){return new(n||(n=Promise))((function(r,s){function a(t){try{c(o.next(t))}catch(t){s(t)}}function i(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,i)}c((o=o.apply(t,e||[])).next())}))}function vc(t,e){var n,o,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(s=0)),s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;function wc(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function Cc(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,s=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(o=s.next()).done;)a.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return a}function kc(t,e,n){if(n||2===arguments.length)for(var o,r=0,s=e.length;r<s;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))}function _c(t){return this instanceof _c?(this.v=t,this):new _c(t)}function Sc(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(t,e||[]),s=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),a("next"),a("throw"),a("return",(function(t){return function(e){return Promise.resolve(e).then(t,l)}})),o[Symbol.asyncIterator]=function(){return this},o;function a(t,e){r[t]&&(o[t]=function(e){return new Promise((function(n,o){s.push([t,e,n,o])>1||i(t,e)}))},e&&(o[t]=e(o[t])))}function i(t,e){try{(n=r[t](e)).value instanceof _c?Promise.resolve(n.value.v).then(c,l):u(s[0][2],n)}catch(t){u(s[0][3],t)}var n}function c(t){i("next",t)}function l(t){i("throw",t)}function u(t,e){t(e),s.shift(),s.length&&i(s[0][0],s[0][1])}}function Tc(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=wc(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(o,r){(function(t,e,n,o){Promise.resolve(o).then((function(e){t({value:e,done:n})}),e)})(o,r,(e=t[n](e)).done,e.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function Bc(t){return"function"==typeof t}function Vc(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var Jc=Vc((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function Ic(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var jc=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,o,r;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var a=wc(s),i=a.next();!i.done;i=a.next()){i.value.remove(this)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}else s.remove(this);var c=this.initialTeardown;if(Bc(c))try{c()}catch(t){r=t instanceof Jc?t.errors:[t]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var u=wc(l),d=u.next();!d.done;d=u.next()){var p=d.value;try{Pc(p)}catch(t){r=null!=r?r:[],t instanceof Jc?r=kc(kc([],Cc(r)),Cc(t.errors)):r.push(t)}}}catch(t){n={error:t}}finally{try{d&&!d.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}}if(r)throw new Jc(r)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)Pc(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&Ic(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&Ic(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=function(){var e=new t;return e.closed=!0,e}(),t}(),Ec=jc.EMPTY;function Lc(t){return t instanceof jc||t&&"closed"in t&&Bc(t.remove)&&Bc(t.add)&&Bc(t.unsubscribe)}function Pc(t){Bc(t)?t():t.unsubscribe()}var Dc={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Oc={setTimeout:function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var r=Oc.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,kc([t,e],Cc(n))):setTimeout.apply(void 0,kc([t,e],Cc(n)))},clearTimeout:function(t){var e=Oc.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function Nc(t){Oc.setTimeout((function(){var e=Dc.onUnhandledError;if(!e)throw t;e(t)}))}function $c(){}var Ac=Hc("C",void 0,void 0);function Hc(t,e,n){return{kind:t,value:e,error:n}}var Mc=null;function Rc(t){if(Dc.useDeprecatedSynchronousErrorHandling){var e=!Mc;if(e&&(Mc={errorThrown:!1,error:null}),t(),e){var n=Mc,o=n.errorThrown,r=n.error;if(Mc=null,o)throw r}}else t()}var Uc=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,Lc(e)&&e.add(n)):n.destination=Gc,n}return mc(e,t),e.create=function(t,e,n){return new Yc(t,e,n)},e.prototype.next=function(t){this.isStopped?qc(function(t){return Hc("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?qc(Hc("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?qc(Ac,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(jc),Wc=Function.prototype.bind;function zc(t,e){return Wc.call(t,e)}var Fc=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){Xc(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){Xc(t)}else Xc(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){Xc(t)}},t}(),Yc=function(t){function e(e,n,o){var r,s,a=t.call(this)||this;Bc(e)||!e?r={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=o?o:void 0}:a&&Dc.useDeprecatedNextContext?((s=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},r={next:e.next&&zc(e.next,s),error:e.error&&zc(e.error,s),complete:e.complete&&zc(e.complete,s)}):r=e;return a.destination=new Fc(r),a}return mc(e,t),e}(Uc);function Xc(t){var e;Dc.useDeprecatedSynchronousErrorHandling?(e=t,Dc.useDeprecatedSynchronousErrorHandling&&Mc&&(Mc.errorThrown=!0,Mc.error=e)):Nc(t)}function qc(t,e){var n=Dc.onStoppedNotification;n&&Oc.setTimeout((function(){return n(t,e)}))}var Gc={closed:!0,next:$c,error:function(t){throw t},complete:$c},Kc="function"==typeof Symbol&&Symbol.observable||"@@observable";function Qc(t){return t}function Zc(t){return 0===t.length?Qc:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var tl=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var o,r=this,s=(o=t)&&o instanceof Uc||function(t){return t&&Bc(t.next)&&Bc(t.error)&&Bc(t.complete)}(o)&&Lc(o)?t:new Yc(t,e,n);return Rc((function(){var t=r,e=t.operator,n=t.source;s.add(e?e.call(s,n):n?r._subscribe(s):r._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=el(e))((function(e,o){var r=new Yc({next:function(e){try{t(e)}catch(t){o(t),r.unsubscribe()}},error:o,complete:e});n.subscribe(r)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[Kc]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Zc(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=el(t))((function(t,n){var o;e.subscribe((function(t){return o=t}),(function(t){return n(t)}),(function(){return t(o)}))}))},t.create=function(e){return new t(e)},t}();function el(t){var e;return null!==(e=null!=t?t:Dc.Promise)&&void 0!==e?e:Promise}var nl=Vc((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ol=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return mc(e,t),e.prototype.lift=function(t){var e=new rl(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new nl},e.prototype.next=function(t){var e=this;Rc((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var r=wc(e.currentObservers),s=r.next();!s.done;s=r.next()){s.value.next(t)}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;Rc((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;Rc((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,o=n.hasError,r=n.isStopped,s=n.observers;return o||r?Ec:(this.currentObservers=null,s.push(t),new jc((function(){e.currentObservers=null,Ic(s,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,o=e.thrownError,r=e.isStopped;n?t.error(o):r&&t.complete()},e.prototype.asObservable=function(){var t=new tl;return t.source=this,t},e.create=function(t,e){return new rl(t,e)},e}(tl),rl=function(t){function e(e,n){var o=t.call(this)||this;return o.destination=e,o.source=n,o}return mc(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:Ec},e}(ol);function sl(t){return function(e){if(function(t){return Bc(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function al(t,e,n,o,r){return new il(t,e,n,o,r)}var il=function(t){function e(e,n,o,r,s,a){var i=t.call(this,e)||this;return i.onFinalize=s,i.shouldUnsubscribe=a,i._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,i._error=r?function(t){try{r(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,i._complete=o?function(){try{o()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,i}return mc(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(Uc);var cl=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function ll(t){return Bc(null==t?void 0:t.then)}function ul(t){return Bc(t[Kc])}function dl(t){return Symbol.asyncIterator&&Bc(null==t?void 0:t[Symbol.asyncIterator])}function pl(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var hl="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function gl(t){return Bc(null==t?void 0:t[hl])}function fl(t){return Sc(this,arguments,(function(){var e,n,o;return vc(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,_c(e.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,_c(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,_c(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function bl(t){return Bc(null==t?void 0:t.getReader)}function xl(t){if(t instanceof tl)return t;if(null!=t){if(ul(t))return o=t,new tl((function(t){var e=o[Kc]();if(Bc(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(cl(t))return function(t){return new tl((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}(t);if(ll(t))return n=t,new tl((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,Nc)}));if(dl(t))return ml(t);if(gl(t))return e=t,new tl((function(t){var n,o;try{for(var r=wc(e),s=r.next();!s.done;s=r.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}t.complete()}));if(bl(t))return ml(fl(t))}var e,n,o;throw pl(t)}function ml(t){return new tl((function(e){(function(t,e){var n,o,r,s;return yc(this,void 0,void 0,(function(){var a,i;return vc(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),n=Tc(t),c.label=1;case 1:return[4,n.next()];case 2:if((o=c.sent()).done)return[3,4];if(a=o.value,e.next(a),e.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return i=c.sent(),r={error:i},[3,11];case 6:return c.trys.push([6,,9,10]),o&&!o.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(r)throw r.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(t,e).catch((function(t){return e.error(t)}))}))}function yl(t,e,n,o,r){void 0===o&&(o=0),void 0===r&&(r=!1);var s=e.schedule((function(){n(),r?t.add(this.schedule(null,o)):this.unsubscribe()}),o);if(t.add(s),!r)return s}function vl(t,e,n){return void 0===n&&(n=1/0),Bc(e)?vl((function(n,o){return function(t,e){return sl((function(n,o){var r=0;n.subscribe(al(o,(function(n){o.next(t.call(e,n,r++))})))}))}((function(t,r){return e(n,t,o,r)}))(xl(t(n,o)))}),n):("number"==typeof e&&(n=e),sl((function(e,o){return function(t,e,n,o,r,s,a,i){var c=[],l=0,u=0,d=!1,p=function(){!d||c.length||l||e.complete()},h=function(t){return l<o?g(t):c.push(t)},g=function(t){s&&e.next(t),l++;var i=!1;xl(n(t,u++)).subscribe(al(e,(function(t){null==r||r(t),s?h(t):e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(var t=function(){var t=c.shift();a?yl(e,a,(function(){return g(t)})):g(t)};c.length&&l<o;)t();p()}catch(t){e.error(t)}})))};return t.subscribe(al(e,h,(function(){d=!0,p()}))),function(){null==i||i()}}(e,o,t,n)})))}function wl(){return void 0===(t=1)&&(t=1/0),vl(Qc,t);var t}function Cl(t){return t[t.length-1]}function kl(t){return(e=Cl(t))&&Bc(e.schedule)?t.pop():void 0;var e}function _l(t,e){return void 0===e&&(e=0),sl((function(n,o){n.subscribe(al(o,(function(n){return yl(o,t,(function(){return o.next(n)}),e)}),(function(){return yl(o,t,(function(){return o.complete()}),e)}),(function(n){return yl(o,t,(function(){return o.error(n)}),e)})))}))}function Sl(t,e){return void 0===e&&(e=0),sl((function(n,o){o.add(t.schedule((function(){return n.subscribe(o)}),e))}))}function Tl(t,e){if(!t)throw new Error("Iterable cannot be null");return new tl((function(n){yl(n,e,(function(){var o=t[Symbol.asyncIterator]();yl(n,e,(function(){o.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Bl(t,e){if(null!=t){if(ul(t))return function(t,e){return xl(t).pipe(Sl(e),_l(e))}(t,e);if(cl(t))return function(t,e){return new tl((function(n){var o=0;return e.schedule((function(){o===t.length?n.complete():(n.next(t[o++]),n.closed||this.schedule())}))}))}(t,e);if(ll(t))return function(t,e){return xl(t).pipe(Sl(e),_l(e))}(t,e);if(dl(t))return Tl(t,e);if(gl(t))return function(t,e){return new tl((function(n){var o;return yl(n,e,(function(){o=t[hl](),yl(n,e,(function(){var t,e,r;try{e=(t=o.next()).value,r=t.done}catch(t){return void n.error(t)}r?n.complete():n.next(e)}),0,!0)})),function(){return Bc(null==o?void 0:o.return)&&o.return()}}))}(t,e);if(bl(t))return function(t,e){return Tl(fl(t),e)}(t,e)}throw pl(t)}function Vl(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return wl()(function(t,e){return e?Bl(t,e):xl(t)}(t,kl(t)))}function Jl(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kl(t);return sl((function(e,o){(n?Vl(t,e,n):Vl(t,e)).subscribe(o)}))}const Il=Vn((()=>{const t=bn((()=>new Tt)),e=bn((()=>new Xo(3))),n=bn((()=>new Xo(["a","b","c"]))),o=bn((()=>new Xo(0))),r=bn((()=>new Xo(1)));return Vr.dom(Dl.allStrings678527[0],Dr(t),Dr(n,(t=>t.map((t=>Vr.dom(Dl.allStrings678527[1],t).key(t))))),Dr(n,(t=>t.map((t=>Vr.dom(Dl.allStrings678527[2],t,t).key(t))))),Wo(t,-1),Dr(o),Dr(o,(()=>55)),Pl(),Dr(kt([o,r]).pipe((t=>t[1]))),Dr(kt([o,r]).pipe(function(t){return(e,n)=>{n.setHandler((()=>{})),t(e).then((t=>n.next(t)))}}((t=>Promise.resolve(Vr.dom(Dl.allStrings678527[3])))))),jl({sub0:t,sub1:e}))})),jl=Vn((({sub0:t,sub1:e})=>{let n=!1;const o=bn((()=>new ol));return er((t=>[n]=t(n))),Vr.dom(Dl.allStrings678527[4],Dr(t),(()=>t.next((t.value||0)+1)),(()=>o.next(t.value=(t.value||0)+1)),(()=>n=!n),n?"show":"hide",n,n&&Dr(t),n&&Dr(t,El),n&&Dr(t,Ll),Dr(e,Ll),Dr(o,Ll),Dr(o.pipe(Jl(33)),Ll),Dr(o.pipe(Jl(void 0)),(t=>Ll(t))),Dr(o,(t=>Ll(t))))})),El=t=>Vr.dom(Dl.allStrings678527[5],t),Ll=Vn((t=>Vr.dom(Dl.allStrings678527[6],t))),Pl=Vn((()=>{let t=!0,e=0,n=0;return er((o=>[{hideShow:t,destroyCount:e,clickCounter:n}]=o({hideShow:t,destroyCount:e,clickCounter:n}))),Vr.dom(Dl.allStrings678527[7],t&&Vr.dom(Dl.allStrings678527[8],Ar((()=>Vn.element.get().innerHTML=Date.now().toString()),{onDestroy:()=>++e}),(()=>++n),n),(()=>t=!t),e)})),Dl={allStrings678527:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:1}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:2}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:4}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:7}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:8}]}]}]}]}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:9}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]},Ol=[{view:Os.Basic,tag:gc,emoji:"🔢"},{view:Os.OneRender,tag:()=>Vn.renderOnce=(t=new qo(0),e=0)=>{++e;const n=Tt.all([0,"all",4]);return Vr.dom(Es.allStrings2265941[0],Dr(n.pipe((t=>JSON.stringify(t)))),Dr(t),(()=>++t.value),Is({renderCount:e,name:"oneRender_tag_ts"}),js())},emoji:"1️⃣"},{view:Os.Props,tag:Xa,emoji:"🧳"},{view:Os.WatchTesting,tag:uc,emoji:"⌚️"},{view:Os.TableDebug,tag:ji},{view:Os.ProviderDebug,tag:ui},{view:Os.TagSwitchDebug,tag:Na,emoji:"🔀"},{view:Os.Mirroring,tag:Ua,emoji:"🪞"},{view:Os.Arrays,tag:Pa,emoji:"⠇"},{view:Os.Content,tag:ac,emoji:"📰",debug:!0},{view:Os.Child,tag:ha,emoji:"👶"},{view:Os.Destroys,tag:xa,emoji:"🗑️"},{view:Os.FunInPropsTag,tag:Gs,emoji:"🤡"},{view:Os.AttributeDebug,tag:hc,emoji:"🏹"},{view:Os.Todo,tag:Vn(ia),emoji:"✏️"},{view:Os.Counters,tag:_i,emoji:"💯"},{view:Os.Subscriptions,tag:Il,emoji:"📡"}],Nl=Vn(((t,e=Ns.views)=>{const n=bn((()=>Ol.filter((t=>{if(e.includes(t.view))return!0})).map((({view:e,title:n,emoji:o,tag:r,...s})=>({title:n||e,output:e===Os.Counters?r({appCounterSubject:t}):r(),view:e,emoji:o,...s}))).sort(((t,e)=>t.view.localeCompare(e.view)))));return Vr.dom(Al.allStrings2101465[0],n.map((t=>$l(t).key(t.view))))})),$l=t=>{const{emoji:e,view:n,title:o,output:r,debug:s}=t;return Vr.dom(Al.allStrings2101465[1],n,e,o,t.contentHide?"none":"",r,"section_"+t.view,(()=>t.contentHide=!t.contentHide),t.contentHide?"grey":"")},Al={allStrings2101465:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["style","flex:2 2 20em"]],ch:[{nn:"a",at:[["id",{tagJsVar:0},null]],ch:[{nn:"text",tc:"\x3c!-- ⚓️ --\x3e"}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",v:1},{nn:"text",tc:" "},{nn:"text",v:2}]},{nn:"div",at:[["id","many-section-contents"],["style.display",{tagJsVar:3},"style"]],ch:[{nn:"text",v:4}]},{nn:"div",at:[["style","display:flex;"]],ch:[{nn:"button",at:[["style","flex:1;"],["id",{tagJsVar:5},null],["click",{tagJsVar:6},null],["style.background-color",{tagJsVar:7},"style"]],ch:[{nn:"text",tc:"👁️ hide/show"}]}]}]},{nn:"div",at:[["style","font-size:0.6em;text-align:right;"]],ch:[{nn:"a",at:[["href","#top"]],ch:[{nn:"text",tc:"⏫"}]}]}]}]]},Hl=3e3,Ml=6e3,Rl=Vn((()=>{let t,e,n=0,o=0,r=0;er((s=>[{intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r}]=s({intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r})));const s=ur(),a=()=>++n,i=()=>{console.info("🟢 interval test 0 started..."),r=0,e=setInterval(s((()=>{r+=500,r>=Hl&&(r=0)})),500),console.info("▶️ interval started"),t=setInterval(s((()=>{a()})),Hl)},c=()=>{clearInterval(t),clearInterval(e),t=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return xn(i),vn(c),++o,Vr.dom(Wl.allStrings838008[0],Hl,t,a,n,o,Hl,r,r,(()=>{t||e?c():i()}),t||e?"red":"green",(()=>setTimeout(s((()=>{r+=200})),1e3)))})),Ul=Vn((()=>{let t,e,n=0,o=0,r=0;er((s=>[{intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r}]=s({intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r})));const s=ur(),a=()=>++n;const i=()=>{clearInterval(t),clearInterval(e),t=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function c(){if(t)return i();console.info("🟢 interval test 1 started..."),r=0,e=setInterval(s((()=>{r+=500,r>=Ml&&(r=0)})),500),t=setInterval(s((()=>{a(),console.info("slow interval ran")})),Ml)}return xn(c),vn(i),++o,Vr.dom(Wl.allStrings838008[1],Ml,t,a,n,o,Ml,r,r,c,t?"red":"green")})),Wl={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},zl=Vn((()=>{let t="tagJsDebug.js",e=!1,n=0;return er((o=>[{_firstState:t,showIntervals:e,renderCount:n}]=o({_firstState:t,showIntervals:e,renderCount:n}))),++n,Vr.dom(Fl.allStrings77500[0],(()=>e=!e),e&&Vr.dom(Fl.allStrings77500[1],Ia(),Rl(),Ul()))})),Fl={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};function Yl(){const t=ra(),e=t.route,n=t.location.pathname;if(n&&"counters/"===e)return"counters";if(n&&"content/"===e)return"content";if(n.endsWith("isolated.html"))return"isolated";return n.includes("todo/www")?"todo":"home"}const Xl=()=>Vn.use=(t=Yl())=>Vr.dom(ql.allStrings120829[0],"home"===t?".5":"1","home"===t?void 0:"#/","isolated"===t?".5":"1","isolated"===t?void 0:"isolated.html","counters"===t?".5":"1","counters"===t?void 0:"#counters/","content"===t?".5":"1","content"===t?void 0:"#content/","todo"===t?".5":"1","todo"===t?void 0:"todo/www/"),ql={allStrings120829:[[{nn:"div",ch:[{nn:"a",at:[["style.opacity",{tagJsVar:0},"style"],["href",{tagJsVar:1},null]],ch:[{nn:"text",tc:"home"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:2},"style"],["href",{tagJsVar:3},null]],ch:[{nn:"text",tc:"isolated"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:4},"style"],["href",{tagJsVar:5},null]],ch:[{nn:"text",tc:"counters"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:6},"style"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"content"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:8},"style"],["href",{tagJsVar:9},null]],ch:[{nn:"text",tc:"todo app"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["href","https://github.com/AckerApple/taggedjs"],["target","_blank"]],ch:[{nn:"text",tc:"repo"}]}]}]]},Gl=Date.now();function Kl(){return function(t=Yl()){let e=!1;return er((t=>[{showHide:e}]=t({showHide:e}))),console.log("🍒 App rendered",Gl),Vr.dom(eu.allStrings2805303[0],4,(()=>e=!e),e,e&&tu(),Xl(),"home"===t&&Zl(),"counters"===t&&Ji(),"content"===t&&ac())}}Kl.isApp=!0;const Ql=Vn(Kl),Zl=()=>Vn.use=(t=!0,e=0,o=!1,r=null,s=bn((()=>new Tt(e))),a=0,i="🟦",c=er((n=>[{showSections:t,appCounter:e,toggleValue:o,testTimeout:r,renderCount:a,testEmoji:i}]=n({showSections:t,appCounter:e,toggleValue:o,testTimeout:r,renderCount:a,testEmoji:i}))),l=(()=>{o=!o}))=>{const u=ur(),d=u((t=>i=t?"✅":"❌"));function p(t=!0,e=(()=>{})){i="🟦";r=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const o=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(n.bind(n,566)),await Promise.resolve().then(n.bind(n,451)),Ns.views.includes(Os.Content)?(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835))):console.log("⏭️ Skipping content tests (unchecked)"),Ns.views.includes(Os.Subscriptions)?await Promise.resolve().then(n.bind(n,528)):console.log("⏭️ Skipping subscriptions tests (unchecked)"),Ns.views.includes(Os.Counters)?await Promise.resolve().then(n.bind(n,428)):console.log("⏭️ Skipping counters tests (unchecked)"),Ns.views.includes(Os.Props)?await Promise.resolve().then(n.bind(n,749)):console.log("⏭️ Skipping props tests (unchecked)"),Ns.views.includes(Os.TagSwitchDebug)?await Promise.resolve().then(n.bind(n,168)):console.log("⏭️ Skipping tagSwitch tests (unchecked)"),Ns.views.includes(Os.Arrays)?await Promise.resolve().then(n.bind(n,842)):console.log("⏭️ Skipping arrays tests (unchecked)"),Ns.views.includes(Os.Mirroring)?await Promise.resolve().then(n.bind(n,774)):console.log("⏭️ Skipping mirroring tests (unchecked)"),Ns.views.includes(Os.OneRender)?await Promise.resolve().then(n.bind(n,994)):console.log("⏭️ Skipping oneRender tests (unchecked)"),Ns.views.includes(Os.FunInPropsTag)?await Promise.resolve().then(n.bind(n,157)):console.log("⏭️ Skipping funInPropsTag tests (unchecked)"),Ns.views.includes(Os.AttributeDebug)?await Promise.resolve().then(n.bind(n,178)):console.log("⏭️ Skipping attributeDebug tests (unchecked)"),Ns.views.includes(Os.Destroys)?await Promise.resolve().then(n.bind(n,236)):console.log("⏭️ Skipping destroys tests (unchecked)"),Ns.views.includes(Os.WatchTesting)?await Promise.resolve().then(n.bind(n,702)):console.log("⏭️ Skipping watchTesting tests (unchecked)"),Ns.views.includes(Os.Child)?await Promise.resolve().then(n.bind(n,527)):console.log("⏭️ Skipping child tests (unchecked)"),Ns.views.includes(Os.ProviderDebug)?await Promise.resolve().then(n.bind(n,186)):console.log("⏭️ Skipping providerDebug tests (unchecked)"),Ns.views.includes(Os.Todo)?await Promise.resolve().then(n.bind(n,337)):console.log("⏭️ Skipping todo tests (unchecked)");try{const t=Date.now();if(window.mocha)await new Promise(((t,e)=>{window.mocha.run((n=>{n>0?e(new Error(`${n} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(n.bind(n,995));if(!await t())throw new Error("Tests failed")}const e=Date.now()-t;return console.info(`✅ all tests passed in ${e}ms`),Ol.filter((t=>Ns.views.includes(t.view))).map((t=>{const e=document.getElementById("section_"+t.view);e&&e.click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();e(o),t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return vn((function(){clearTimeout(r),r=null})),xn((function(){console.info("1️⃣ app init should only run once"),p(!1,d),s.subscribe(u((t=>e=t)))})),++a,Vr.dom(eu.allStrings2805303[1],(()=>p(!0,d)),i,(()=>{s.next(e+1)}),(()=>++e),e,Dr(s),s.value,(()=>l()),o,Is({name:"app",renderCount:a}),Dr(Tt.globalSubCount$),Hs(),(()=>t=!t),t&&Nl(s),zl())},tu=Vn((()=>Vr.dom(eu.allStrings2805303[2],(function({fxIn:t,fxOut:e,duration:n=".2s",outPositionAbsolute:o=!1}={duration:".2s",outPositionAbsolute:!1}){if(!t||!e){const n=ya({fxIn:"fadeInUp",fxOut:"fadeOutDown",outPositionAbsolute:o});t||(t=n.in),e||(e=n.out)}const r=$r();return Vr`
    <div oninit=${t} ondestroy=${e} style.--animate-duration=${n}>${r}</div>
  `.acceptInnerHTML(r)}()).innerHTML=Vr.dom(eu.allStrings2805303[3])))),eu={allStrings2805303:[[{nn:"text",tc:"\x3c!--app.js--\x3e"},{nn:"h1",at:[["id","h1-app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - "},{nn:"text",v:0}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"show/hide "},{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n\n\n      "},{nn:"text",v:4},{nn:"text",tc:"\n\n      "},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n    "}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"run tests "},{nn:"text",v:1}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:9},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:10},{nn:"text",tc:")"}]}]}]},{nn:"a",at:[["name","top"],["id","top"]]},{nn:"text",v:11},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"button",at:[["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"toggle sections"}]},{nn:"text",v:13},{nn:"text",tc:"\n\n      "},{nn:"text",v:14}]}],[{nn:"hr"},{nn:"text",v:0},{nn:"hr"}],[{nn:"text",tc:"\n    Hello animated world\n  "}]]};function nu(){Ns.autoTest=Ns.autoTest=!Ns.autoTest,$s()}const ou={allStrings62947:[[{nn:"text",tc:"\n  auto testing "},{nn:"input",at:[["type","checkbox"],[{tagJsVar:0}],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"run tests"}]}]]},ru=()=>Vn.use=(t=bn("isolated app state"),e=0,n=0,o=bn((()=>new Tt(n))),r=!1,s=er((t=>[{renderCount:e,appCounter:n,toggleValue:r}]=t({renderCount:e,appCounter:n,toggleValue:r}))),a=(()=>r=!r),i=ur())=>{const c=ra().route.split("/").map((t=>t.trim())).filter((t=>t.length));let l;return c.length&&(l=c),xn((()=>{console.info("1️⃣ app init should only run once"),o.subscribe(i((t=>{n=t})))})),++e,Vr.dom(su.allStrings1054570[0],c,Xl(),(()=>{o.next(n+1)}),(()=>{++n}),n,Dr(o),o.value,a,r,(u=l,Vn.use=(t=xn((()=>{Ns.autoTest&&Ds(!1,u,d)})))=>Vr.dom(ou.allStrings62947[0],Ns.autoTest&&"checked",nu,(()=>Ds(!0,u,d)))),Is({name:"app",renderCount:e}),Dr(Tt.globalSubCount$),Hs(l),Nl(o,l),Is({renderCount:e,name:"isolatedApp"}));var u,d};Ms.subscribe((({type:t,checkTesting:e})=>{Us(t,e)}));const su={allStrings1054570:[[{nn:"text",tc:"\x3c!--isolatedApp.js--\x3e"},{nn:"h1",at:[["id","app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - isolated"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"(no HMR)"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"route: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"div",ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"text",tc:" "},{nn:"text",v:9}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:10},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:11},{nn:"text",tc:")"}]}]}]},{nn:"text",v:12},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]}]]};function au(){const t=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),n=e[0]?.toLowerCase();if(n&&["isolated.html","index-static.html"].includes(n)){const e=Date.now();Lr(ru,t,{test:1});const n=Date.now()-e;return void console.info(`⏱️ isolated render in ${n}ms`)}const o=Date.now();Lr(Ql,t,{test:1});const r=Date.now()-o;console.info(`⏱️ rendered in ${r}ms`)}})();var r=o.gV,s=o.jG,a=o.fm,i=o.KH,c=o.bX,l=o.mK;export{r as App,s as IsolatedApp,a as hmr,i as run,c as tagElement,l as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI4REFDTyxNQUFNQSxFQUFTLElBa0t0QixTQUFTQyxFQUFNQyxHQUNYLE9BQU8sSUFBSUMsU0FBU0MsR0FBUUMsV0FBV0QsRUFBS0YsSUFDaEQsRUFuS0EsUUFBUyxtQkFBbUIsTUFDeEIsSUFBQUksSUFBRyxnQ0FBZ0MsS0FDL0IsTUFBTUMsR0FBbUIsUUFBSyxzQkFDeEJDLEVBQWVDLE9BQU9GLEVBQWlCRyxZQUM3QyxRQUFPRixHQUFjRyxLQUFLLEdBRTFCLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJSixFQUFjSSxLQUM5QixTQUFPLFFBQVMsc0JBQXNCQSxNQUFNRCxLQUFLLElBR3JELFNBQU8sUUFBUyxzQkFBc0JILE1BQWlCRyxLQUFLLEVBQUUsS0FFbEUsSUFBQUwsSUFBRyw0QkFBNEJPLFVBQzNCLE1BQU1OLEdBQW1CLFFBQUssc0JBQ3hCQyxFQUFlQyxPQUFPRixFQUFpQkcsV0FDdkNJLEdBQVUsUUFBSywwQkFDckIsUUFBT04sR0FBY0csS0FBSyxHQUUxQkcsRUFBUUMsUUFFUixNQUFNQyxFQUFXUCxPQUFPRixFQUFpQkcsWUFDekMsUUFBT00sR0FBVUwsS0FBS0gsRUFBZSxJQUVyQyxTQUFPLFFBQVMsc0JBQXNCQSxNQUFpQkcsS0FBSyxHQUU1REcsRUFBUUMsU0FFUixRQUFPTixPQUFPRixFQUFpQkcsWUFBWUMsS0FBS0gsRUFBZSxJQUMvRCxTQUFPLFFBQVMsc0JBQXNCQSxFQUFlLE1BQU1HLEtBQUssSUFDaEUsUUFBT0YsUUFBTyxRQUFLLHNCQUFzQkMsWUFBWUMsS0FBSyxJQUMxRCxRQUFNLG9DQUNOLFFBQU0seUNBRUFWLEVBQWUsRUFBVEQsSUFDWixRQUFPUyxRQUFPLFFBQUssc0JBQXNCQyxZQUFZQyxLQUFLLEVBQUUsS0FFaEUsSUFBQUwsSUFBRyx3REFBd0QsS0FDdkQsTUFBTVcsR0FBaUIsUUFBSywwQkFDdEJDLEVBQWVULE9BQU9RLEVBQWVQLFdBRXJDSCxHQUFtQixRQUFLLHNCQUN4QlksRUFBY1YsT0FBT0YsRUFBaUJHLFdBQzVDLElBQUssSUFBSUUsRUFBSSxFQUFHQSxFQUFJTyxFQUFhUCxJQUFLLENBQ2xDLE1BQU1RLEdBQWMsUUFBSyxxQ0FBcUNSLE1BQzlELFFBQU9RLEdBQWFDLGVBQ3BCLFFBQU9aLE9BQU9XLEVBQVlWLFlBQVlDLEtBQUtPLEVBQy9DLENBRXNCSSxTQUFTQyxjQUFjLGtDQUMvQlIsUUFFZCxNQUFNUyxFQUFrQmYsT0FBT1EsRUFBZVAsWUFDOUMsUUFBT2MsR0FBaUJiLEtBQUtPLEVBQWUsR0FDNUMsSUFBSyxJQUFJTixFQUFJLEVBQUdBLEVBQUlPLEVBQWFQLElBQUssQ0FDbEMsTUFBTWEsRUFBSyxxQ0FBcUNiLElBQzFDUSxHQUFjLFFBQUtLLEdBQ25CQyxFQUFRakIsT0FBT1csRUFBWVYsWUFDakMsUUFBT2dCLEdBQU9mLEtBQUthLEVBQWlCLFNBQVNaLFFBQVFhLFNBQVVDLG1CQUF1QkYsd0NBQzFGLE1BRUosSUFBQWxCLElBQUcsa0RBQWtETyxVQUNqRCxNQUFNTixHQUFtQixRQUFLLHNCQUN4QkMsRUFBZUMsT0FBT0YsRUFBaUJHLFlBQzdDLFFBQU9GLEdBQWNHLEtBQUssR0FDTCxJQUFqQkgsSUFFQSxRQUFLLHlCQUF5Qk8sUUFFbEMsTUFBTVksRUFBZWxCLE9BQU9GLEVBQWlCRyxZQUc3QyxTQUFPLFFBQVMseUJBQXdDQyxLQUFLLElBRTNDLFFBQUssa0NBQ2JJLGNBRUpkLEVBQU1ELElBQ1osUUFBT1MsUUFBTyxRQUFLLHNCQUFzQkMsWUFBWUMsS0FBSyxHQUUxRCxNQUFNaUIsRUFBV25CLE9BQU9GLEVBQWlCRyxXQUNuQ21CLEVBQVlGLEVBQWUsR0FDakMsUUFBT0MsR0FBVWpCLEtBQUtrQixFQUFXLDJCQUEyQkQsa0JBQXlCQyxLQUVyRixNQUFNQyxHQUFhLFFBQVMseUJBQzVCLFFBQU9BLEdBQVluQixLQUFLLEVBQUcsd0NBQXdDbUIsS0FFbkUsTUFBTWQsRUFBV1AsT0FBT0YsRUFBaUJHLFdBQ3pDLElBQUssSUFBSUUsRUFBSSxFQUFHQSxFQUFJSSxFQUFVSixJQUFLLENBQy9CLE1BQU1tQixHQUFRLFFBQVMsc0JBQXNCbkIsTUFDN0MsUUFBT21CLEdBQU9wQixLQUFLLEVBQUcsd0NBQXdDQyxhQUFhbUIsSUFDL0UsTUFFSixJQUFBekIsSUFBRyxnQkFBZ0IsTUFDZixTQUFPLFFBQVMsMEJBQTBCSyxLQUFLLEdBQy9DLE1BQU1xQixFQUFVVixTQUFTVyxpQkFBaUIsbUNBQzFDLFFBQU9ELEVBQVFFLFFBQVF2QixLQUFLLEdBQzVCLE1BQU13QixHQUFjLFFBQVMsa0NBQzdCLFFBQU9BLEdBQWF4QixLQUFLLElBRXpCLFFBQUssd0JBQXdCSSxTQUM3QixTQUFPLFFBQVMsa0NBQWtDSixLQUFLLEVBQUcsaUNBQzFELFNBQU8sUUFBUyxtQ0FBbUNBLEtBQUssRUFBRyxpQ0FDM0QsTUFBTXlCLEdBQVksUUFBSyxnQ0FDakJDLEdBQWdCLFFBQUssaUNBQzNCLElBQUlDLEVBQWFELEVBQWMzQixVQUMvQixNQUFNNkIsR0FBYSxRQUFLLGlDQUNsQkMsR0FBaUIsUUFBSyxrQ0FDdEJDLEVBQWVELEVBQWU5QixXQUNwQyxRQUFPNEIsR0FBWTNCLEtBQUs4QixHQUV4QkwsRUFBVXJCLFNBQ1YsUUFBT3NCLEVBQWMzQixXQUFXQyxLQUFLNkIsRUFBZTlCLFlBQ3BELFFBQU8yQixHQUFlMUIsTUFBSyxRQUFLLG1DQUNoQyxRQUFPMkIsR0FBWTNCLE1BQU1GLE9BQU80QixFQUFjM0IsV0FBYSxHQUFHZ0MsYUFDOUQsUUFBT0osR0FBWTNCLE1BQU1GLE9BQU8rQixFQUFlOUIsV0FBYSxHQUFHZ0MsWUFFL0RILEVBQVd4QixTQUNYLFFBQU9zQixFQUFjM0IsV0FBV0MsS0FBSzZCLEVBQWU5QixZQUNwRCxRQUFPNEIsR0FBWTNCLE1BQU1GLE9BQU80QixFQUFjM0IsV0FBYSxHQUFHZ0MsYUFDOUQsUUFBT0osR0FBWTNCLE1BQU1GLE9BQU8rQixFQUFlOUIsV0FBYSxHQUFHZ0MsV0FBVyxLQUU5RSxJQUFBcEMsSUFBRyxlQUFlTyxXQUNkLFNBQU8sUUFBUyxpQ0FBaUNGLEtBQUssSUFDdEQsU0FBTyxRQUFTLHVCQUF1QkEsS0FBSyxHQUU1QyxNQUFNZ0MsR0FBSSxRQUFLLHFCQUFxQkMsVUFDcEMsUUFBT0QsR0FBR2hDLEtBQUssaUJBQ2YsU0FBTyxRQUFTLGlDQUFpQ0EsS0FBSyxHQUV0RCxNQUFNa0MsUUFBZSxRQUFLLCtCQUErQkQsVUFDekQsUUFBT0MsR0FBUWxDLEtBQUssOEJBQ2RWLEVBQU1ELFNBQ042QyxHQUNOLFNBQU8sUUFBUyxpQ0FBaUNsQyxLQUFLLEVBQUcsK0RBQ3pELFNBQU8sUUFBUyx1QkFBdUJBLEtBQUssRUFBRSxLQUVsRCxJQUFBTCxJQUFHLG9CQUFvQk8sV0FFbkIsUUFBSyx3QkFBd0JFLFNBQzdCLFNBQU8sUUFBUyxrQ0FBa0NKLEtBQUssSUFDdkQsU0FBTyxRQUFTLG1DQUFtQ0EsS0FBSyxJQUV4RCxRQUFLLHdCQUF3QkksU0FDN0IsU0FBTyxRQUFTLGtDQUFrQ0osS0FBSyxJQUN2RCxTQUFPLFFBQVMsbUNBQW1DQSxLQUFLLElBRXhELFFBQUsscUJBQXFCSSxRQUMxQixNQUFNOEIsUUFBZSxRQUFLLCtCQUErQjlCLFNBQ3pELFFBQU84QixHQUFRbEMsS0FBSyw4QkFDZFYsRUFBTUQsRUFBUyxLQUNyQixTQUFPLFFBQVMsa0NBQWtDVyxLQUFLLElBQ3ZELFNBQU8sUUFBUyxtQ0FBbUNBLEtBQUssSUFFeEQsUUFBSyxxQkFBcUJJLFFBQzFCLE1BQU0rQixRQUFnQixRQUFLLCtCQUErQi9CLFNBQzFELFFBQU8rQixHQUFTbkMsS0FBSyw4QkFDZlYsRUFBTUQsRUFBUyxLQUNyQixTQUFPLFFBQVMsa0NBQWtDVyxLQUFLLElBQ3ZELFNBQU8sUUFBUyxtQ0FBbUNBLEtBQUssRUFBRSxHQUM1RCxHLG9DQy9KTixRQUFTLHlCQUF5QixNQUM5QixJQUFBTCxJQUFHLHlCQUF5Qk8sV0FDeEIsU0FBTyxRQUFNLG9CQUFvQkYsS0FBSyxJQUN0QyxTQUFPLFFBQU0sd0JBQXdCQSxLQUFLLElBQzFDLFNBQU8sUUFBSyxzQkFBc0JvQyxNQUFNQyxpQkFBaUJyQyxLQUFLLFdBQzlELFFBQU8sSUFBSXNDLFVBQVMsUUFBSyx1QkFBdUJDLFdBQVdDLFNBQVMsc0JBQXNCeEMsTUFBSyxJQUMvRixRQUFPLElBQUlzQyxVQUFTLFFBQUsscUJBQXFCQyxXQUFXQyxTQUFTLHNCQUFzQnhDLE1BQUssR0FDN0YsTUFDTXlDLEdBRGlCLFFBQUssNkJBQ1lGLFdBQ3hDLFFBQU8sSUFBSUQsU0FBU0csR0FBa0JELFNBQVMsc0JBQXNCeEMsTUFBSyxJQUMxRSxRQUFNLHdCQUNOLFNBQU8sUUFBSyxzQkFBc0JvQyxNQUFNQyxpQkFBaUJyQyxLQUFLLEtBQzlELFFBQU8sSUFBSXNDLFVBQVMsUUFBSyx1QkFBdUJDLFdBQVdDLFNBQVMsc0JBQXNCeEMsTUFBSyxJQUMvRixRQUFPLElBQUlzQyxVQUFTLFFBQUsscUJBQXFCQyxXQUFXQyxTQUFTLHNCQUFzQnhDLE1BQUssSUFDN0YsUUFBTyxJQUFJc0MsVUFBUyxRQUFLLDZCQUE2QkMsV0FBV0MsU0FBUyxzQkFBc0J4QyxNQUFLLElBRXJHLFFBQU0sd0JBQ04sU0FBTyxRQUFLLHNCQUFzQm9DLE1BQU1DLGlCQUFpQnJDLEtBQUssV0FDOUQsUUFBTyxJQUFJc0MsVUFBUyxRQUFLLHVCQUF1QkMsV0FBV0MsU0FBUyxzQkFBc0J4QyxNQUFLLElBQy9GLFFBQU8sSUFBSXNDLFVBQVMsUUFBSyxxQkFBcUJDLFdBQVdDLFNBQVMsc0JBQXNCeEMsTUFBSyxJQUM3RixRQUFPLElBQUlzQyxVQUFTLFFBQUssNkJBQTZCQyxXQUFXQyxTQUFTLHNCQUFzQnhDLE1BQUssRUFBSyxLQUU5RyxJQUFBTCxJQUFHLCtCQUErQixLQUU5QixNQUFNK0MsR0FBaUIsUUFBSyx3Q0FDdEJDLEdBQW1CLFFBQUssNEJBQ3hCQyxHQUEyQixRQUFLLCtCQUNoQ0MsR0FBaUIsUUFBSyxvQkFDdEJDLEdBQWdCLFFBQUssb0JBRTNCLFFBQU9KLEVBQWVOLE1BQU1DLGlCQUFpQnJDLEtBQUssTUFBTyxvQ0FDekQsUUFBTzJDLEVBQWlCUCxNQUFNQyxpQkFBaUJyQyxLQUFLLFFBQ3BELFFBQU80QyxFQUF5QlIsTUFBTUMsaUJBQWlCckMsS0FBSyxTQUU1RCxRQUFPNkMsRUFBZTlDLFdBQVdDLEtBQUssbUJBRXRDNkMsRUFBZXpDLFNBQ2YsUUFBT3lDLEVBQWU5QyxXQUFXQyxLQUFLLHVCQUV0QyxRQUFPMEMsRUFBZU4sTUFBTUMsaUJBQWlCckMsS0FBSyxRQUNsRCxRQUFPMkMsRUFBaUJQLE1BQU1DLGlCQUFpQnJDLEtBQUssUUFDcEQsUUFBTzRDLEVBQXlCUixNQUFNQyxpQkFBaUJyQyxLQUFLLFNBRTVENkMsRUFBZXpDLFNBQ2YsUUFBT3lDLEVBQWU5QyxXQUFXQyxLQUFLLHdCQUV0QyxRQUFPMEMsRUFBZU4sTUFBTUMsaUJBQWlCckMsS0FBSyxTQUNsRCxRQUFPMkMsRUFBaUJQLE1BQU1DLGlCQUFpQnJDLEtBQUssU0FDcEQsUUFBTzRDLEVBQXlCUixNQUFNQyxpQkFBaUJyQyxLQUFLLFVBRTVEOEMsRUFBYzFDLFNBRWQsUUFBT3NDLEVBQWVOLE1BQU1DLGlCQUFpQnJDLEtBQUssR0FBSSw2Q0FDdEQsUUFBTzJDLEVBQWlCUCxNQUFNQyxpQkFBaUJyQyxLQUFLLEdBQUksK0NBQ3hELFFBQU80QyxFQUF5QlIsTUFBTUMsaUJBQWlCckMsS0FBSyxPQUFPLEtBRXZFLElBQUFMLElBQUcsbURBQW1ELEtBQ2xELE1BQU1vRCxHQUFzQixRQUFLLHlCQUMzQkMsR0FBcUIsUUFBSyx1QkFFMUJuRCxFQUFlQyxPQUFPa0QsRUFBbUJqRCxZQUUvQyxRQUFPZ0QsRUFBb0JoRCxXQUFXQyxLQUFLLG1CQUUzQytDLEVBQW9CM0MsU0FFcEIsUUFBTzJDLEVBQW9CaEQsV0FBV0MsS0FBSyxtQkFFM0MsTUFBTWlELEVBQWlCbkQsT0FBT2tELEVBQW1CakQsV0FFM0NDLEVBQU9ILEVBRFMsR0FFdEIsUUFBT29ELEdBQWdCakQsS0FBS0EsRUFBTSwyQkFBMkJpRCxXQUF3QmpELE1BRXJGK0MsRUFBb0IzQyxTQUVwQixRQUFPMkMsRUFBb0JoRCxXQUFXQyxLQUFLLG1CQUUzQyxNQUFNa0QsRUFBaUJwRCxPQUFPa0QsRUFBbUJqRCxZQUNqRCxRQUFPbUQsR0FBZ0JsRCxLQUFLSCxFQUFhLEtBRTdDLElBQUFGLElBQUcsc0RBQXNELEtBQ3JELE1BQU13RCxHQUFrQixRQUFLLHFCQUN2QkMsR0FBWSxRQUFLLHVCQUV2QixRQUFPQSxFQUFVQyxTQUFTckQsTUFBSyxJQUcvQixRQUFPbUQsRUFBZ0JmLE1BQU1DLGlCQUFpQnJDLEtBQUssV0FDbkQsUUFBT21ELEVBQWdCZixNQUFNa0IsU0FBU3RELEtBQUssU0FDM0MsUUFBT21ELEVBQWdCZixNQUFNbUIsUUFBUXZELEtBQUssb0JBQzFDLFFBQU9tRCxFQUFnQmYsTUFBTW9CLGNBQWN4RCxLQUFLLFFBQ2hELFFBQU9tRCxFQUFnQmYsTUFBTXFCLFdBQVd6RCxLQUFLLGtDQUU3Q29ELEVBQVVoRCxTQUVWLFFBQU8rQyxFQUFnQmYsTUFBTUMsaUJBQWlCckMsS0FBSyxjQUNuRCxRQUFPbUQsRUFBZ0JmLE1BQU1rQixTQUFTdEQsS0FBSyxTQUMzQyxRQUFPbUQsRUFBZ0JmLE1BQU1tQixRQUFRdkQsS0FBSyxvQkFDMUMsUUFBT21ELEVBQWdCZixNQUFNb0IsY0FBY3hELEtBQUssUUFDaEQsUUFBT21ELEVBQWdCZixNQUFNcUIsV0FBV3pELEtBQUssUUFFN0NvRCxFQUFVaEQsU0FFVixRQUFPK0MsRUFBZ0JmLE1BQU1DLGlCQUFpQnJDLEtBQUssV0FDbkQsUUFBT21ELEVBQWdCZixNQUFNb0IsY0FBY3hELEtBQUssUUFDaEQsUUFBT21ELEVBQWdCZixNQUFNcUIsV0FBV3pELEtBQUssaUNBQWlDLEtBRWxGLElBQUFMLElBQUcsNERBQTRELEtBQzNELE1BQU0rRCxHQUFvQixRQUFLLDJCQUN6Qk4sR0FBWSxRQUFLLHVCQUV2QixRQUFPQSxFQUFVQyxTQUFTckQsTUFBSyxJQUUvQixRQUFPMEQsRUFBa0J0QixNQUFNQyxpQkFBaUJyQyxLQUFLLFFBQ3JELFFBQU8wRCxFQUFrQnRCLE1BQU11QixPQUFPM0QsS0FBSyxVQUMzQyxRQUFPMEQsRUFBa0J0QixNQUFNa0IsU0FBU3RELEtBQUssUUFDN0MsUUFBTzBELEVBQWtCdEIsTUFBTXdCLFdBQVc1RCxLQUFLLFFBRS9Db0QsRUFBVWhELFNBRVYsUUFBT3NELEVBQWtCdEIsTUFBTUMsaUJBQWlCckMsS0FBSyxTQUNyRCxRQUFPMEQsRUFBa0J0QixNQUFNdUIsT0FBTzNELEtBQUssVUFDM0MsUUFBTzBELEVBQWtCdEIsTUFBTWtCLFNBQVN0RCxLQUFLLFFBQzdDLFFBQU8wRCxFQUFrQnRCLE1BQU13QixXQUFXNUQsS0FBSyxRQUUvQ29ELEVBQVVoRCxTQUVWLFFBQU9zRCxFQUFrQnRCLE1BQU1DLGlCQUFpQnJDLEtBQUssTUFBTSxHQUM3RCxHLG9DQ2hJTixJQUFBTCxJQUFHLG1CQUFtQixNQUNsQixTQUFPLFFBQUssV0FBV2UsY0FDdkIsTUFBTW1ELEdBQWEsUUFBSyxnQkFDeEIsUUFBT0EsR0FBWW5ELGVBQ25CLFFBQU9tRCxFQUFXOUQsV0FBV0MsS0FBSyxjQUFjLEtBRXBELElBQUFMLElBQUcsZUFBZSxLQUNkLE1BQU1rRSxHQUFhLFFBQUssZ0JBQ3hCLFFBQU9BLEVBQVc5RCxXQUFXQyxLQUFLLGVBQ2xDNkQsRUFBV3pELFNBRVgsUUFBT3lELEVBQVc5RCxXQUFXQyxLQUFLLG9CQUNsQzZELEVBQVd6RCxTQUVYLFFBQU95RCxFQUFXOUQsV0FBV0MsS0FBSyxjQUFjLEcsb0NDZHBELFFBQVMsb0JBQW9CLE1BQ3pCLElBQUFMLElBQUcsZUFBZSxNQUNkLFFBQW9CLDZCQUE4QixnQ0FDbEQsUUFBb0IsZ0NBQWlDLGlDQUFpQyxLQUUxRixJQUFBQSxJQUFHLEtBQUssTUFDSixRQUF3QixDQUFDLHFCQUFzQix1QkFBd0IsQ0FBQyxtQ0FBb0MscUNBQXFDLEtBRXJKLElBQUFBLElBQUcsS0FBSyxNQUNKLFFBQXdCLENBQUMscUJBQXNCLHVCQUF3QixDQUFDLDZCQUE4QixpQ0FDdEcsUUFBb0Isd0NBQXlDLHlDQUF5QyxLQUUxRyxJQUFBQSxJQUFHLEtBQUssTUFDSixRQUF3QixDQUFDLHFCQUFzQix1QkFBd0IsQ0FBQyxxQ0FBc0MsdUNBQXVDLEdBQ3ZKLEcsb0NDY04sUUFBUyxjQUFjLE1BQ25CLElBQUFBLElBQUcsV0FBVyxNQUNWLFNBQU8sUUFBSyx5QkFBeUJLLEtBQUssMkJBQzFDLFNBQU8sUUFBSyw0QkFBNEJBLEtBQUssMkJBQzdDLFNBQU8sUUFBSyw2QkFBNkJBLEtBQUssa0JBQWtCLEtBRXBFLElBQUFMLElBQUcsVUFBVSxNQUNULFNBQU8sUUFBTSwrQkFBK0IsR0FBR3lDLE1BQU1tQixRQUFRdkQsS0FBSyxxQkFDbEUsU0FBTyxRQUFNLDRCQUE0QixHQUFHb0MsTUFBTW1CLFFBQVF2RCxLQUFLLHFCQUMvRCxTQUFPLFFBQU0sK0JBQStCLEdBQUdvQyxNQUFNbUIsUUFBUXZELEtBQUsscUJBQ2xFLFFBQU0sMEJBQ04sU0FBTyxRQUFNLCtCQUErQixHQUFHb0MsTUFBTW1CLFFBQVF2RCxLQUFLLG9CQUNsRSxRQUFNLDBCQUNOLFNBQU8sUUFBTSwrQkFBK0IsR0FBR29DLE1BQU1tQixRQUFRdkQsS0FBSyxtQkFBbUIsS0FFekYsSUFBQUwsSUFBRyx1QkFBdUIsTUFDdEIsU0FBTyxRQUFNLHNCQUFzQixHQUFHeUMsTUFBTTBCLFlBQVk5RCxLQUFLLEtBQzdELFFBQU0saUJBQ04sU0FBTyxRQUFNLHNCQUFzQixHQUFHb0MsTUFBTTBCLFlBQVk5RCxLQUFLLFNBQzdELFFBQU0saUJBQ04sU0FBTyxRQUFNLHNCQUFzQixHQUFHb0MsTUFBTTBCLFlBQVk5RCxLQUFLLEdBQUcsS0FFcEUsUUFBUywyQkFBMkIsTUFDaEMsSUFBQUwsSUFBRyx1QkFBdUIsS0FDdEIsTUFBTW9FLEVBQVVwRCxTQUFTcUQsZUFBZSx3QkFDeEMsUUFBT0QsR0FBU2hFLFdBQVdDLEtBQUssOEVBQThFLEtBRWxILElBQUFMLElBQUcsaUVBQWlFLEtBQ2hFLE1BRU1zRSxFQUZVdEQsU0FBU3FELGVBQWUsdUJBQ2pCRSxXQUNIQyxVQUFVQyxRQUFRLDZDQUE4QyxJQUFJQSxRQUFRLHVDQUF3QyxJQUFJQyxRQUM1SSxRQUFPSixHQUFNakUsS0FBSyxrRkFBa0YsR0FDdEcsS0FFTixJQUFBTCxJQUFHLGdCQUFnQixNQUNmLFFBQUssd0JBQXdCb0IsTUFBUSxHQUNyQyxRQUFLLHdCQUF3QkEsTUFBUSxTQUNyQyxRQUFVLDBCQUNWLFFBQVUsMEJBQ1YsU0FBTyxRQUFLLDBCQUEwQnFCLE1BQU1rQyxhQUFhdEUsS0FBSyxVQUM5RCxTQUFPLFFBQUssMEJBQTBCb0MsTUFBTW1DLGFBQWF2RSxLQUFLLFFBQzlELFFBQUssd0JBQXdCZSxNQUFRLEdBQ3JDLFFBQUssd0JBQXdCQSxNQUFRLFFBQ3JDLFFBQVUsMEJBQ1YsUUFBVSwwQkFDVixTQUFPLFFBQUssMEJBQTBCcUIsTUFBTWtDLGFBQWF0RSxLQUFLLFNBQzlELFNBQU8sUUFBSywwQkFBMEJvQyxNQUFNbUMsYUFBYXZFLEtBQUssTUFBTSxLQUV4RSxJQUFBTCxJQUFHLHFCQUFxQixNQUNwQixTQUFPLFFBQUssbUJBQW1CSSxXQUFXQyxNQUFLLFFBQUssd0JBQXdCRCxZQUM1RSxTQUFPLFFBQUssbUJBQW1CQSxXQUFXQyxNQUFLLFFBQUssd0JBQXdCRCxZQUM1RSxTQUFPLFFBQUssbUJBQW1CQSxXQUFXQyxNQUFLLFFBQUssd0JBQXdCRCxVQUFVLEdBQ3hGLEcsbUVDL0VOLElBQUl5RSxFQUFPLEdBQ1gsUUFBUyxlQUFlLEtBRXBCLE1BQU1DLEVBQW9CLElBQVRELElBQ2ZBLEdBQ0YsSUFBQTdFLElBQUcsVUFBVSxLQUNULE1BQU0rRSxHQUFlLFFBQUssMkJBQzFCLFFBQU9BLEdBQWNoRSxjQUNyQmdFLEVBQWEzRCxNQUFRLEtBQ3JCLFFBQVEyRCxHQUNrQjVFLFFBQU8sUUFBSywyQkFDUEEsUUFBTyxRQUFLLGtDQUMzQyxRQUFlLHVCQUF3QixHQUN2QyxNQUFNNkUsR0FBYyxRQUFTLHlCQUM3QixRQUFvQix1QkFBd0Isd0JBQzVDLFNBQU8sUUFBUyx5QkFBeUIzRSxLQUFLMkUsR0FDOUMsTUFBTUMsR0FBc0IsUUFBSywyQkFHakMsUUFBT0EsR0FBcUI1RSxLQURULElBQzBCLHlCQUF5QjRFLGFBR3RFLElBQUk1RSxFQUFPLElBQ1A2RSxHQUFjLFFBQUssaUNBQ3ZCLFFBQU9BLEdBQWE3RSxLQUFLQSxFQUFNLHdCQUF3QjZFLFdBQXFCN0UsS0FDNUUsTUFBTThFLEdBQWlCLFFBQUsscUJBQzVCLFFBQU9BLEdBQWdCOUUsS0FBSyxJQUFLLHFDQUFxQzhFLE1BQ3RFLFFBQW9CLG9CQUFxQixxQkFFekNELEdBQWMsUUFBSywyQkFDbkIsUUFBT0EsR0FBYTdFLEtBQUtBLEVBQU0sK0JBRS9CNkUsR0FBYyxRQUFLLGlDQUVuQixRQUFPQSxHQUFhN0UsS0FBS0EsSUFDekIsUUFBb0IseUJBQTBCLDBCQUU5QzZFLEdBQWMsUUFBSywyQkFDbkIsUUFBT0EsR0FBYTdFLEtBQUtBLEVBQU0saUNBRS9CNkUsR0FBYyxRQUFLLGlDQUVuQixRQUFPQSxHQUFhN0UsS0FBS0EsRUFBTSx3Q0FDL0IsUUFBZSx1QkFBd0IsSUFDdkMsUUFBZSx1QkFBd0IsR0FDbkN5RSxJQUNBLFNBQU8sUUFBSyx5QkFBeUJ6RSxLQUFLLEtBRTlDNkUsR0FBYyxRQUFTLHlCQUN2QixRQUFvQix1QkFBd0IseUJBQzVDLFFBQU9BLEdBQWE3RSxNQUFLLFFBQVMsMEJBRWxDLFFBQW9CLG9CQUFxQixzQkFDekMsUUFBb0Isd0JBQXlCLHlCQUM3QytFLEVBQW9CLGtCQUFtQixrQkFBbUIsb0JBQzFEQSxFQUFvQixxQkFBc0IscUJBQXNCLHdCQUNoRUEsRUFBb0IsdUJBQXdCLHVCQUF3QiwwQkFDcEVBLEVBQW9CLHFCQUFzQixxQkFBc0IsdUJBQXVCLEtBSzNGLElBQUFwRixJQUFHLCtCQUErQixLQUM5QixHQUFJOEUsRUFBVSxFQUNNLFFBQUssMEJBQXJCLE1BQ01PLEdBQVEsUUFBSyxxQkFFbkIsUUFBT0EsR0FBT2hGLEtBQUssR0FBSSxxQ0FBcUNnRix3QkFDNUQsTUFBTUMsR0FBUSxRQUFLLHVCQUVuQixRQUFPQSxHQUFPakYsS0FBSyxHQUFJLHFEQUN2QixNQUFNa0YsR0FBUSxRQUFLLHVCQUNuQixRQUFPQSxHQUFPbEYsS0FBSyxHQUFJLG9EQUMzQixFQUNBLFFBQU0sZ0NBQ04sTUFBTW1GLEdBQWtCLFFBQUssb0JBQ3ZCQyxHQUFzQixRQUFLLDJCQUNqQyxRQUFPRCxHQUFpQm5GLEtBQUtvRixJQUM3QixTQUFPLFFBQUssdUJBQXVCcEYsTUFBSyxRQUFLLDBCQUEwQixHQUN6RSxJQUVDLE1BQU1xRixFQUFtQixJQUNoQyxTQUFTTixFQUFvQk8sRUFBY0MsRUFBY0MsR0FDckQsTUFBTUMsR0FBYSxRQUFTRixHQUN0QkcsR0FBTSxRQUFLSixHQUNYSyxHQUFvQixRQUFLSCxHQUMvQkksUUFBUXJHLEtBQUssTUFBTStGLEtBQ25CLElBQUssSUFBSU8sRUFBUSxFQUFHQSxFQUFRLElBQUtBLElBQzdCSCxFQUFJdEYsUUFFUndGLFFBQVFFLFFBQVEsTUFBTVIsS0FDdEJNLFFBQVFyRyxLQUFLLFlBQVkrRixLQUN6QixJQUFLLElBQUlPLEVBQVEsRUFBR0EsRUFBUSxJQUFLQSxJQUM3QkYsRUFBa0J2RixRQUV0QndGLFFBQVFFLFFBQVEsWUFBWVIsS0FDNUIsTUFBTVMsR0FBb0JqRyxPQUFPMkYsR0FBY0osR0FBa0J0RCxZQUNqRSxTQUFPLFFBQVN3RCxJQUFldkYsS0FBSytGLEVBQ3hDLEMsb0NDbkdBLElBQUFwRyxJQUFHLFlBQVlPLFdBQ1gsU0FBTyxRQUFNLGtCQUFrQkYsS0FBSyxJQUNwQyxTQUFPLFFBQU0scUJBQXFCQSxLQUFLLEdBQ3ZDLE1BQU1nRyxHQUFZLFFBQU0seUJBQ3hCLFFBQU9BLEdBQVdoRyxLQUFLLEVBQUcsK0NBQzFCLElBQUlpRyxFQUFrQm5HLFFBQU8sUUFBSyxtQkFFbEMsUUFBTSxvQkFDTixJQUFJb0csRUFBZXBHLFFBQU8sUUFBSyxrQkFDL0IsTUFBTXFHLEVBQWVGLEVBQWtCLEdBQ3ZDLFFBQU9DLEdBQWNsRyxLQUFLbUcsRUFBYywwQ0FBMENBLGVBQTBCRCxLQUU1RyxNQUFNRSxHQUFnQixRQUFNLHlCQUM1QixRQUFPQSxHQUFlcEcsS0FBSyxFQUFHLDhDQUM5QmlHLEVBQWtCQyxHQUVsQixRQUFNLG9CQUNOQSxFQUFlcEcsUUFBTyxRQUFLLG1CQUMzQixRQUFPb0csR0FBY2xHLEtBQUtpRyxJQUMxQixTQUFPLFFBQU0seUJBQXlCakcsS0FBSyxFQUFFLEcsb0NDbEJqRCxRQUFTLGlCQUFpQixNQUN0QixJQUFBTCxJQUFHLGtFQUFrRSxLQUNqRSxNQUFNK0YsR0FBTSxRQUFLLGdDQUNqQixRQUFPQSxFQUFJM0UsT0FBT2YsS0FBSyxJQUN2QjBGLEVBQUkzRSxNQUFRLGFBQ1osUUFBaUIyRSxJQUNqQixRQUFPQSxFQUFJM0UsT0FBT2YsS0FBSyxhQUN2QixNQUFNcUcsR0FBYSxRQUFNLHNEQUN6QixRQUFPQSxFQUFXOUUsUUFBUXZCLEtBQUssSUFDL0IsUUFBT3FHLEVBQVcsR0FBR3RHLFdBQVdDLEtBQUssUUFDckMwRixFQUFJM0UsTUFBUSx1Q0FDWixRQUFpQjJFLEdBQ2pCLE1BQU1ZLEdBQWMsUUFBTSxzREFDMUIsUUFBT0EsRUFBWS9FLFFBQVF2QixLQUFLLElBQ2hDLFFBQU9zRyxFQUFZLEdBQUd2RyxXQUFXQyxLQUFLLFNBQ3RDLFFBQU9zRyxFQUFZLEdBQUd2RyxXQUFXQyxLQUFLLFNBQ3RDMEYsRUFBSTNFLE1BQVEsSUFDWixRQUFpQjJFLEVBQUksR0FDdkIsRyxvQ0NsQk4sSUFBQS9GLElBQUcscUJBQXFCTyxXQUNwQixRQUFvQixnQkFBaUIseUJBQ3JDLFFBQW9CLGdCQUFpQix5QkFDckMsUUFBb0IsZ0JBQWlCLHlCQUNyQyxTQUFPLFFBQUsscUJBQXFCRixLQUFLLHNCQUN0QyxRQUFNLHlCQUNOLFFBQU0sdUJBRU4sUUFBTSx5QkFDTixRQUFNLHVCQUNOLFNBQU8sUUFBSyxxQkFBcUJBLEtBQUssb0JBQW9CLEcsbUNDWDlENEYsUUFBUVcsSUFBSSxnQkFDWixRQUFTLGtCQUFrQixLQUV2QixNQUFNQyxFQUFXLEtBQ2IsTUFBTUMsRUFBUSxHQUNkLElBQUssSUFBSXhHLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUFLLENBQ3pCLE1BQU15RyxHQUFPLFFBQUssdUJBQXVCekcsS0FDckN5RyxHQUNBRCxFQUFNRSxLQUFLRCxFQUNuQixDQUNBLE9BQU9ELENBQUssRUFHVkcsRUFBZ0IsSUFDSkosSUFDREssS0FBSUgsR0FBUUEsRUFBSzlGLGNBQWMsNEJBRzFDa0csRUFBa0IsSUFDREYsSUFDREcsUUFBT0MsR0FBTUEsR0FBSTNELFVBQVM5QixPQUcxQzBGLEVBQWtCLEtBQ3BCLE1BQU1SLEVBQVFELElBQ0tJLElBRVJNLFNBQVEsQ0FBQ0MsRUFBVXRCLEtBQ3RCc0IsR0FBVTlELFNBQ1ZvRCxFQUFNWixHQUFPekYsT0FDakIsR0FDRixHQUdOLFNBQVcsS0FDUDZHLEdBQWlCLEtBRXJCLFNBQVUsS0FDTkEsR0FBaUIsS0FFckIsSUFBQXRILElBQUcsNEVBQTRFLEtBQzNFLE1BQU15SCxHQUF1QixRQUFLLGdDQUNsQyxRQUFPQSxHQUFzQjFHLGNBRTdCLE1BQU0rRixFQUFRRCxLQUNkLFFBQU9DLEVBQU1sRixRQUFRdkIsS0FBSyxJQUVQNEcsSUFDUk0sU0FBUUMsS0FDZixRQUFPQSxHQUFVOUQsU0FBU3JELE1BQUssRUFBTSxHQUN2QyxLQUVOLElBQUFMLElBQUcsK0NBQStDLEtBQzlDLE1BQU04RyxFQUFRRCxJQUNSYSxFQUFhVCxLQUVuQixRQUFPRSxLQUFtQjlHLEtBQUssR0FFL0J5RyxFQUFNLEdBQUdyRyxTQUNULFFBQU9pSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPOEcsS0FBbUI5RyxLQUFLLEdBRS9CeUcsRUFBTSxHQUFHckcsU0FDVCxRQUFPaUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBTzhHLEtBQW1COUcsS0FBSyxHQUUvQnlHLEVBQU0sR0FBR3JHLFNBQ1QsUUFBT2lILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLElBQ25DLFFBQU84RyxLQUFtQjlHLEtBQUssRUFBRSxLQUVyQyxJQUFBTCxJQUFHLDRDQUE0QyxNQUMzQyxRQUFPbUgsS0FBbUI5RyxLQUFLLEdBQy9CLE1BQU15RyxFQUFRRCxJQUNSYSxFQUFhVCxJQUVuQkgsRUFBTSxHQUFHckcsUUFDVHFHLEVBQU0sR0FBR3JHLFFBQ1RxRyxFQUFNLEdBQUdyRyxTQUNULFFBQU8wRyxLQUFtQjlHLEtBQUssR0FFL0J5RyxFQUFNLEdBQUdyRyxTQUNULFFBQU9pSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPOEcsS0FBbUI5RyxLQUFLLEdBRS9CeUcsRUFBTSxHQUFHckcsU0FDVCxRQUFPaUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBTzhHLEtBQW1COUcsS0FBSyxHQUUvQnlHLEVBQU0sR0FBR3JHLFNBQ1QsUUFBT2lILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLElBQ25DLFFBQU84RyxLQUFtQjlHLEtBQUssRUFBRSxLQUVyQyxJQUFBTCxJQUFHLGlFQUFpRSxLQUNoRSxNQUFNOEcsRUFBUUQsSUFDUmEsRUFBYVQsSUFFbkJILEVBQU0sR0FBR3JHLFFBQ1RxRyxFQUFNLEdBQUdyRyxRQUNUcUcsRUFBTSxHQUFHckcsUUFDVHFHLEVBQU0sR0FBR3JHLFFBQ1RxRyxFQUFNLEdBQUdyRyxTQUNULFFBQU9pSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPcUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBT3FILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLElBQ25DLFFBQU9xSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPcUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBT3FILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLElBQ25DLFFBQU9xSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPcUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBT3FILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLElBQ25DLFFBQU9xSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPOEcsS0FBbUI5RyxLQUFLLEVBQUUsS0FFckMsSUFBQUwsSUFBRywyQ0FBMkMsS0FDMUMsTUFBTThHLEVBQVFELElBQ1JhLEVBQWFULElBRW5CSCxFQUFNLEdBQUdyRyxTQUNULFFBQU9pSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxHQUNuQ3lHLEVBQU0sR0FBR3JHLFNBQ1QsUUFBT2lILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLEdBQ25DeUcsRUFBTSxHQUFHckcsU0FDVCxRQUFPaUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssR0FDbkN5RyxFQUFNLEdBQUdyRyxTQUNULFFBQU9pSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxFQUFNLEtBRTdDLElBQUFMLElBQUcsOERBQThELEtBQzdELE1BQU04RyxFQUFRRCxJQUNSYSxFQUFhVCxJQUVuQkgsRUFBTSxHQUFHckcsUUFDVHFHLEVBQU0sR0FBR3JHLFFBQ1RxRyxFQUFNLEdBQUdyRyxTQUNULFFBQU8wRyxLQUFtQjlHLEtBQUssR0FFL0J5RyxFQUFNLEdBQUdyRyxRQUNUcUcsRUFBTSxHQUFHckcsU0FDVCxRQUFPMEcsS0FBbUI5RyxLQUFLLEdBRS9CeUcsRUFBTSxHQUFHckcsUUFDVHFHLEVBQU0sR0FBR3JHLFNBQ1QsUUFBTzBHLEtBQW1COUcsS0FBSyxJQUUvQixRQUFPcUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBT3FILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLElBQ25DLFFBQU9xSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxJQUNuQyxRQUFPcUgsRUFBVyxHQUFHaEUsU0FBU3JELE1BQUssSUFDbkMsUUFBT3FILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLEVBQUssS0FFNUMsSUFBQUwsSUFBRyx5REFBeUQsS0FDeEQsTUFBTThHLEVBQVFELElBQ1JhLEVBQWFULElBRW5CSCxFQUFNUyxTQUFRUixHQUFRQSxFQUFLdEcsV0FDM0IsUUFBTzBHLEtBQW1COUcsS0FBSyxJQUUvQmlILElBRUFJLEVBQVdILFNBQVFDLEtBQ2YsUUFBT0EsR0FBVTlELFNBQVNyRCxNQUFLLEVBQU0sS0FFekMsUUFBTzhHLEtBQW1COUcsS0FBSyxFQUFFLEtBRXJDLElBQUFMLElBQUcsK0NBQStDLEtBQzlDLE1BQU04RyxFQUFRRCxJQUNSYSxFQUFhVCxJQUVuQixJQUFLLElBQUkzRyxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDcEJ3RyxFQUFNLEdBQUdyRyxTQUdiLFFBQU9pSCxFQUFXLEdBQUdoRSxTQUFTckQsTUFBSyxHQUVuQ3lHLEVBQU0sR0FBR3JHLFNBRVQsUUFBT2lILEVBQVcsR0FBR2hFLFNBQVNyRCxNQUFLLEVBQUssS0FFNUMsSUFBQUwsSUFBRywyREFBMkQsS0FDMUQsTUFBTThHLEVBQVFELElBRWRDLEVBQU0sR0FBR3JHLFFBRVQsTUFBTWtILEVBQWFiLEVBQU0sR0FBR2MsYUFBYSxVQUFZLElBQ3JELFFBQU9ELEVBQVc5RSxTQUFTLGlDQUFpQ3hDLE1BQUssSUFDakUsUUFBT3NILEVBQVc5RSxTQUFTLHNDQUFzQ3hDLE1BQUssR0FFdEUsTUFBTXdILEVBQWFmLEVBQU0sR0FBR2MsYUFBYSxVQUFZLElBQ3JELFFBQU9DLEVBQVdoRixTQUFTLGtDQUFrQ3hDLE1BQUssSUFDbEUsUUFBT3dILEVBQVdoRixTQUFTLHlDQUF5Q3hDLE1BQUssRUFBSyxHQUNoRixHLG9DQzVMTixJQUFBTCxJQUFHLHFCQUFxQixNQUNwQixRQUFlLDBCQUEyQixJQUMxQyxRQUFlLHlCQUEwQixHQUN6QyxNQUFNOEgsRUFBVTNILFFBQU8sUUFBUyw0QkFDaEMsUUFBSyx5QkFBeUJNLFNBQzlCLFFBQU9xSCxFQUFVLEdBQUd6SCxLQUFLRixRQUFPLFFBQVMsNkJBQ3pDLFFBQWUsMEJBQTJCLElBQzFDLFFBQWtCLDBCQUEwQixHLG9DQ1BoRCxJQUFBSCxJQUFHLGFBQWEsTUFDWixTQUFPLFFBQUssbUNBQW1DSyxLQUFLLE1BQ3BELFFBQW9CLHFCQUFzQix3QkFDMUMsUUFBb0IsdUJBQXdCLDBCQUM1QyxRQUFvQix1QkFBd0Isa0NBQzVDLFFBQW9CLHVCQUF3QiwrQkFDNUMsU0FBTyxRQUFLLG1DQUFtQ0EsS0FBSyxJQUFJLEcsb0NDTjVELFFBQVMsWUFBWSxNQUNqQixJQUFBTCxJQUFHLFFBQVEsS0FDUCxNQUFNK0gsR0FBZ0IsUUFBSyx5QkFDM0IsUUFBT0EsRUFBYzNHLE1BQU1xRCxRQUFRLE1BQU8sS0FBS3BFLEtBQUssc0JBQXNCLEtBRTlFLElBQUFMLElBQUcsY0FBYyxNQUNiLFFBQXdCLENBQUMsMEJBQTJCLDRCQUE2QixDQUFDLDBCQUEyQiw0QkFBNEIsS0FFN0ksSUFBQUEsSUFBRyw2QkFBNkIsTUFDNUIsUUFBd0IsQ0FBQywwQkFBMkIsNEJBQTZCLENBQUMsb0NBQXFDLHNDQUFzQyxLQUVqSyxJQUFBQSxJQUFHLFVBQVUsS0FFVCxNQUFNZ0ksR0FBaUIsUUFBSyxzQ0FDdEJDLEdBQVUsUUFBSyx3Q0FFckIsUUFBT0EsR0FBUzVILE1BQU1GLE9BQU82SCxHQUFrQixHQUFHNUYsWUFDbEQsTUFBTThGLEdBQVksUUFBSywyQkFBMkIxRCxVQUM1QzJELEdBQWEsUUFBSywyQkFBMkIzRCxVQUM3QzRELEdBQVksUUFBSyxxQ0FBcUM1RCxVQUN0RDZELEVBQVdsSSxPQUFPK0gsR0FDbEJJLEVBQVluSSxPQUFPZ0ksR0FDbkJJLEVBQVdwSSxPQUFPaUksSUFDeEIsUUFBT0UsR0FBV2pJLEtBQUtrSSxJQUN2QixRQUFPRixFQUFXLEdBQUdoSSxLQUFLaUksRUFBVSxLQUV4QyxJQUFBdEksSUFBRyxXQUFXLE1BRVYsUUFBa0IsMkJBQTRCLG1DQUM5QyxNQUFNd0ksRUFBY3JJLFFBQU8sUUFBSyw2QkFDMUJvQyxHQUFTLFFBQU0sMkJBQTJCLEdBQUdELFVBQ25ELFFBQU9DLEdBQVFsQyxLQUFLLGlCQUVwQixTQUFPLFFBQUssNkJBQTZCQSxLQUFLbUksRUFBWXBHLGFBQzFELFNBQU8sUUFBSyxvQ0FBb0MvQixNQUFNbUksRUFBYyxHQUFHcEcsYUFFdkUsUUFBSywwQkFBMEIzQixPQUFPLEtBRTFDLElBQUFULElBQUcsc0JBQXNCLEtBQ3JCLE1BQU15SSxFQUFjdEksUUFBTyxRQUFTLDhCQUVwQyxRQUFrQiw0QkFBNkIsNkJBQy9DLFFBQUssMEJBQTBCTSxTQUMvQixRQUFXLDZCQUE4QmdJLEVBQWMsR0FBR3JHLGFBQzFELFFBQW9CLCtCQUFnQyxrQ0FDcEQsUUFBVyw2QkFBOEJxRyxFQUFjLEdBQUdyRyxhQUMxRCxRQUFrQiw2QkFBOEIsZ0NBQWdDLEdBQ2xGLEcsb0NDaEROLFFBQVMsZ0JBQWdCLE1BQ3JCLElBQUFwQyxJQUFHLFVBQVUsTUFDVCxRQUF3QixDQUFDLGlDQUFrQyxtQ0FBb0MsQ0FBQyxpQ0FBa0MscUNBQ2xJLFFBQXdCLENBQUMsdUNBQXdDLHlDQUEwQyxDQUFDLHVDQUF3QywyQ0FDcEosUUFBd0IsQ0FBQyxpQ0FBa0MsbUNBQW9DLENBQUMsaUNBQWtDLG1DQUFtQyxLQUV6SyxJQUFBQSxJQUFHLHFCQUFxQixNQUNwQixRQUF3QixDQUFDLDZCQUE4QiwrQkFBZ0MsQ0FBQyw2QkFBOEIsaUNBRXRILFFBQXdCLENBQUMsaUNBQWtDLG1DQUFvQyxDQUFDLGlDQUFrQyxxQ0FFbEksUUFBd0IsQ0FBQyw2QkFBOEIsK0JBQWdDLENBQUMsNkJBQThCLCtCQUErQixLQUV6SixRQUFTLG1CQUFtQixNQUN4QixJQUFBQSxJQUFHLHlCQUF5QixLQUN4QixNQUFNMEksRUFBZ0IxSCxTQUFTcUQsZUFBZSxtQkFFOUMsSUFEQSxRQUFPcUUsR0FBZTNILGNBQ2xCMkgsRUFBZSxDQUNmLE1BQU1DLEVBQVNDLE9BQU9DLGlCQUFpQkgsR0FFakNJLEVBQVNILEVBQU9oRSxZQUFZOUIsU0FBUyxtQkFDdkM4RixFQUFPaEUsWUFBWTlCLFNBQVMsUUFDaEMsUUFBT2lHLEdBQVF6SSxNQUFLLElBQ3BCLFFBQU9zSSxFQUFPL0QsYUFBYXZFLEtBQUssUUFDaEMsUUFBT3NJLEVBQU9JLGFBQWExSSxLQUFLLFFBQ3BDLE1BRUosSUFBQUwsSUFBRywwQkFBMEIsS0FDekIsTUFBTWdKLEVBQWVoSSxTQUFTcUQsZUFBZSxrQkFFN0MsSUFEQSxRQUFPMkUsR0FBY2pJLGNBQ2pCaUksRUFBYyxDQUNkLE1BQU1MLEVBQVNDLE9BQU9DLGlCQUFpQkcsR0FFakNDLEVBQVdOLEVBQU9oRSxZQUFZOUIsU0FBUyxtQkFDekM4RixFQUFPaEUsWUFBWTlCLFNBQVMsVUFDaEMsUUFBT29HLEdBQVU1SSxNQUFLLElBQ3RCLFFBQU9zSSxFQUFPL0QsYUFBYXZFLEtBQUssUUFDaEMsUUFBT3NJLEVBQU9JLGFBQWExSSxLQUFLLFFBQ3BDLE1BRUosSUFBQUwsSUFBRywrQkFBK0IsS0FDOUIsTUFBTWdKLEVBQWVoSSxTQUFTcUQsZUFBZSxtQkFDN0MsUUFBTzJFLEdBQWNqSSxjQUNqQmlJLElBQ0EsUUFBT0EsRUFBYXhFLFVBQVVFLFFBQVFyRSxLQUFLLDBCQUMvQyxLQUVKLElBQUFMLElBQUcsaUNBQWlDLEtBQ2hDLE1BQU0wSSxFQUFnQjFILFNBQVNxRCxlQUFlLG1CQUN4QzJFLEVBQWVoSSxTQUFTcUQsZUFBZSxtQkFDN0MsUUFBT3FFLEdBQWUzSCxlQUN0QixRQUFPaUksR0FBY2pJLGNBQ2pCMkgsR0FBaUJNLElBQ2pCLFFBQU9OLEVBQWNRLFNBQVNGLElBQWUzSSxNQUFLLEVBQ3RELEtBRUosSUFBQUwsSUFBRywrQ0FBK0NPLFVBQzlDLE1BQU00SSxFQUFvQm5JLFNBQVNxRCxlQUFlLHVCQUM1Q3FFLEVBQWdCMUgsU0FBU3FELGVBQWUsbUJBRzlDLElBRkEsUUFBTzhFLEdBQW1CcEksZUFDMUIsUUFBTzJILEdBQWUzSCxjQUNsQm9JLEdBQXFCVCxFQUFlLENBRXBDUyxFQUFrQi9ILE1BQVEsT0FDMUIrSCxFQUFrQkMsY0FBYyxJQUFJQyxNQUFNLFNBQVUsQ0FBRUMsU0FBUyxNQUMvRCxRQUFVSCxHQUNWLE1BQU1SLEVBQVNDLE9BQU9DLGlCQUFpQkgsR0FDakNhLEVBQVVaLEVBQU9oRSxZQUFZOUIsU0FBUyxTQUN4QzhGLEVBQU9oRSxZQUFZOUIsU0FBUyxtQkFDaEMsUUFBTzBHLEdBQVNsSixNQUFLLEVBQU0sc0NBQXNDc0ksRUFBT2hFLGNBQzVFLE1BRUosSUFBQTNFLElBQUcsOENBQThDTyxVQUM3QyxNQUFNaUosRUFBbUJ4SSxTQUFTcUQsZUFBZSxzQkFDM0MyRSxFQUFlaEksU0FBU3FELGVBQWUsa0JBRzdDLElBRkEsUUFBT21GLEdBQWtCekksZUFDekIsUUFBT2lJLEdBQWNqSSxjQUNqQnlJLEdBQW9CUixFQUFjLENBRWxDUSxFQUFpQnBJLE1BQVEsU0FDekJvSSxFQUFpQkosY0FBYyxJQUFJQyxNQUFNLFNBQVUsQ0FBRUMsU0FBUyxLQUM5RCxNQUFNWCxFQUFTQyxPQUFPQyxpQkFBaUJHLEdBQ2pDUyxFQUFZZCxFQUFPaEUsWUFBWTlCLFNBQVMsV0FDMUM4RixFQUFPaEUsWUFBWTlCLFNBQVMscUJBQ2hDLFFBQU80RyxHQUFXcEosTUFBSyxFQUMzQixNQUVKLElBQUFMLElBQUcsaURBQWlELEtBQ2hELE1BQU0wSixFQUFnQjFJLFNBQVNxRCxlQUFlLG9CQUU5QyxJQURBLFFBQU9xRixHQUFlM0ksY0FDbEIySSxFQUFlLEVBQ2YsUUFBT0EsRUFBY0MsWUFBWWpGLE9BQU9ELFFBQVEsV0FBWSxNQUFNcEUsS0FBSyx3QkFDdkUsTUFBTXNJLEVBQVNDLE9BQU9DLGlCQUFpQmEsR0FDakNULEVBQVdOLEVBQU9oRSxZQUFZOUIsU0FBUyxtQkFDekM4RixFQUFPaEUsWUFBWTlCLFNBQVMsVUFDaEMsUUFBT29HLEdBQVU1SSxNQUFLLElBQ3RCLFFBQU9zSSxFQUFPL0QsYUFBYXZFLEtBQUssUUFDaEMsUUFBT3NJLEVBQU9JLGFBQWExSSxLQUFLLFFBQ3BDLE1BRUosSUFBQUwsSUFBRywrQ0FBK0NPLFVBQzlDLE1BQU1xSixFQUFvQjVJLFNBQVNxRCxlQUFlLHdCQUM1Q3FGLEVBQWdCMUksU0FBU3FELGVBQWUsb0JBRzlDLElBRkEsUUFBT3VGLEdBQW1CN0ksZUFDMUIsUUFBTzJJLEdBQWUzSSxjQUNsQjZJLEdBQXFCRixFQUFlLENBRXBDRSxFQUFrQnhJLE1BQVEsU0FDMUJ3SSxFQUFrQlIsY0FBYyxJQUFJQyxNQUFNLFNBQVUsQ0FBRUMsU0FBUyxLQUMvRCxNQUFNWCxFQUFTQyxPQUFPQyxpQkFBaUJhLEdBQ2pDRyxFQUFZbEIsRUFBT2hFLFlBQVk5QixTQUFTLFdBQzFDOEYsRUFBT2hFLFlBQVk5QixTQUFTLHFCQUNoQyxRQUFPZ0gsR0FBV3hKLE1BQUssRUFBTSx5Q0FBeUNzSSxFQUFPaEUsY0FDakYsSUFDRixHQUNKLEcsb0NDN0dOLElBQUEzRSxJQUFHLHFCQUFxQixLQUNwQixNQUFNOEosR0FBVSxRQUFZLHVDQUM1QixRQUFNLCtCQUNOLE1BQU1DLEdBQWEsUUFBWSx1Q0FDL0IsUUFBTzVKLE9BQU8ySixJQUFVekosS0FBS0YsT0FBTzRKLEdBQWMsRUFBRSxHLG9DQ1R4RCxRQUFTLG9CQUFvQixNQUN6QixJQUFBL0osSUFBRyxTQUFTLE1BQ1IsUUFBa0IsaUNBQWtDLG1DQUNwRCxRQUFrQix1Q0FBd0MsdUNBQXVDLEtBRXJHLElBQUFBLElBQUcsUUFBUSxNQUNQLFFBQWtCLDJDQUE0QywyQ0FBMkMsS0FFN0csSUFBQUEsSUFBRyxhQUFhTyxXQUNaLFNBQU8sUUFBUywyQkFBMkJGLEtBQUssS0FDaEQsU0FBTyxRQUFTLGdDQUFnQ0EsS0FBSyxLQUFLLEtBRTlELFFBQVMsMEJBQTBCLE1BQy9CLElBQUFMLElBQUcseUJBQXlCTyxVQUN4QixNQUFNeUosR0FBVyxRQUFLLDBCQUNoQkMsR0FBVyxRQUFLLDJCQUNoQkMsR0FBZ0IsUUFBSyxpQ0FDM0IsUUFBT0EsRUFBY1AsYUFBYXRKLEtBQUssS0FDdkMsU0FBTyxRQUFTLHNCQUFzQkEsS0FBSyxXQUMzQyxTQUFPLFFBQVMsc0JBQXNCQSxLQUFLLFNBQVUsMkJBQ3JELFNBQU8sUUFBUyxzQkFBc0JBLEtBQUssVUFDM0MySixFQUFTdkosU0FDVCxTQUFPLFFBQVMsc0JBQXNCSixLQUFLLFdBQzNDLFNBQU8sUUFBUyxzQkFBc0JBLEtBQUssU0FBVSwwQkFDckQsU0FBTyxRQUFTLHNCQUFzQkEsS0FBSyxVQUMzQzRKLEVBQVN4SixRQUNULElBQUkwSixHQUFXLFFBQVMscUJBQ3hCLFFBQU9ELEVBQWNQLGFBQWF0SixLQUFLLFNBQ3ZDLFNBQU8sUUFBUyxzQkFBc0JBLEtBQUssVUFDM0MsTUFBTStKLEVBQVEsU0FDUkMsRUFBTyxTQUNQQyxHQUFXLFFBQVMscUJBQ3BCQyxFQUFrQixzQkFBc0JKLFFBQzlDLFFBQU9HLEdBQVVqSyxLQUFLa0ssRUFBaUIsdURBQXVEQSxhQUEyQkQsTUFDekgsU0FBTyxRQUFTLHNCQUFzQmpLLEtBQUssc0JBQXNCOEosUUFDakVILEVBQVN2SixRQUNUMEosR0FBVyxRQUFTLHFCQUNwQixTQUFPLFFBQVMsc0JBQXNCOUosS0FBSyxNQUFNOEosU0FDakQsU0FBTyxRQUFTLHNCQUFzQjlKLEtBQUssc0JBQXNCOEosT0FBZSwwQkFDaEYsU0FBTyxRQUFTLHNCQUFzQjlKLEtBQUssc0JBQXNCOEosUUFDakVGLEVBQVN4SixRQUNULE1BQU0rSixHQUFVLFFBQVMsc0JBQ3pCLFFBQU9BLEdBQVNuSyxLQUFLK0osRUFBTyxzREFBc0RBLGVBQW1CSSxLQUNyRyxNQUFNQyxHQUFVLFFBQVMsc0JBQ3pCLFFBQU9BLEdBQVNwSyxLQUFLZ0ssRUFBTSw4Q0FBOENJLFdBQWlCSixlQUFrQkksTUFDNUcsU0FBTyxRQUFTLHNCQUFzQnBLLEtBQUssU0FBUyxHQUN0RCxLQUVOLElBQUFMLElBQUcsUUFBUSxLQUNQLElBQUkwSyxFQUFtQnZLLFFBQU8sUUFBUyxzQkFFdkMsUUFBT3dLLE1BQU14SyxRQUFPLFFBQVMsb0JBQW9CRSxNQUFLLEVBQU8sdUNBQzdELFFBQVUsaUJBQ1YsUUFBT0YsUUFBTyxRQUFTLHNCQUFzQkUsS0FBS3FLLEVBQW1CLEVBQUcsMEJBRXhFLFNBQU8sUUFBUyxrQkFBa0JySyxLQUFLLEtBQ3ZDLFFBQVUsaUJBRVYsUUFBT3NLLE1BQU14SyxRQUFPLFFBQVMsb0JBQW9CRSxNQUFLLEVBQU8sb0NBRTdELFFBQU9GLFFBQU8sUUFBUyxzQkFBc0JFLEtBQUtxSyxFQUFtQixFQUFHLDBCQUEwQixLQUV0RyxJQUFBMUssSUFBRyxTQUFTLE1BQ1IsUUFBa0IsaUNBQWtDLG1DQUNwRCxRQUFrQix1Q0FBd0MseUNBQzFELFNBQU8sUUFBSywyQkFBMkJLLE1BQUssUUFBSywwQkFBMEIsS0FFL0UsSUFBQUwsSUFBRyxRQUFRLE1BQ1AsUUFBa0IsMkNBQTRDLDJDQUEyQyxHQUMzRyxHLG9DQ3JFTixRQUFTLG1CQUFtQixNQUN4QixJQUFBQSxJQUFHLEtBQUssTUFDSixTQUFPLFFBQVMsc0JBQXNCSyxLQUFLLElBQzNDLFNBQU8sUUFBUyx5QkFBeUJBLEtBQUssSUFDOUMsU0FBTyxRQUFTLHVCQUF1QkEsS0FBSyxJQUM1QyxTQUFPLFFBQVMsdUJBQXVCQSxLQUFLLElBQzVDLFNBQU8sUUFBUyx1QkFBdUJBLEtBQUssRUFBRSxLQUVsRCxJQUFBTCxJQUFHLEtBQUssS0FDSixNQUFNNEssR0FBVyxRQUFLLHVCQUN0QkEsRUFBU3hKLE1BQVEsSUFDakJ3SixFQUFTQyxTQUFTLENBQUVDLE9BQVFGLEtBQzVCLFNBQU8sUUFBUyx1QkFBdUJ2SyxLQUFLLElBQzVDLFNBQU8sUUFBUyx1QkFBdUJBLEtBQUssSUFDNUMsU0FBTyxRQUFTLHNCQUFzQkEsS0FBSyxJQUMzQyxRQUFlLHFCQUFzQixFQUFFLEtBRTNDLElBQUFMLElBQUcsS0FBSyxLQUNKLE1BQU00SyxHQUFXLFFBQUssdUJBQ3RCQSxFQUFTeEosTUFBUSxJQUNqQndKLEVBQVNDLFNBQVMsQ0FBRUMsT0FBUUYsS0FDNUIsUUFBZSxxQkFBc0IsSUFDckMsUUFBZSxxQkFBc0IsSUFDckMsU0FBTyxRQUFTLHVCQUF1QnZLLEtBQUssSUFDNUMsU0FBTyxRQUFTLHNCQUFzQkEsS0FBSyxFQUFFLEtBRWpELElBQUFMLElBQUcsS0FBSyxLQUNKLE1BQU00SyxHQUFXLFFBQUssdUJBQ3RCQSxFQUFTeEosTUFBUSxJQUNqQndKLEVBQVNDLFNBQVMsQ0FBRUMsT0FBUUYsS0FDNUIsU0FBTyxRQUFLLHFCQUFxQmpCLGFBQWF0SixLQUFLLE1BQ25ELFNBQU8sUUFBUyx1QkFBdUJBLEtBQUssR0FDNUMsTUFBTTBLLEdBQVcsUUFBUyx1QkFDMUIsUUFBT0EsR0FBVTFLLEtBQUssRUFBRywwQ0FBMEMwSyxNQUNuRSxRQUFlLHFCQUFzQixJQUNyQyxTQUFPLFFBQVMsc0JBQXNCMUssS0FBSyxFQUFFLEtBRWpELElBQUFMLElBQUcsS0FBSyxLQUNKLE1BQU00SyxHQUFXLFFBQUssdUJBQ3RCQSxFQUFTeEosTUFBUSxHQUNqQndKLEVBQVNDLFNBQVMsQ0FBRUMsT0FBUUYsS0FDNUIsUUFBZSxvQkFBcUIsSUFDcEMsUUFBZSx1QkFBd0IsSUFDdkMsUUFBZSxxQkFBc0IsSUFDckMsUUFBZSxxQkFBc0IsSUFDckMsUUFBZSxxQkFBc0IsRUFBRSxHQUN6QyxHLGdCQ2hEQyxTQUFTSSxFQUFhQyxHQUV6QixNQUNNQyxJQURRLElBQUlDLE9BQVFDLE9BQVMsSUFDVkMsTUFBTSxNQUFNLElBQU0sR0FDM0MsTUFBTyxDQUNILElBQUFoTCxDQUFLaUwsRUFBVUMsR0FDWCxHQUFJTixJQUFXSyxFQUFVLENBQ3JCLE1BQU1FLEVBQWtDLG1CQUFaRCxFQUF5QkEsSUFBWUEsRUFDM0RFLEVBQWNELEdBRWQsWUFBWUUsS0FBS0MsVUFBVUwsY0FBcUJJLEtBQUtDLFVBQVVWLEtBQy9EVyxFQUFRLElBQUlULE1BQU1NLEdBRXhCLE1BREFHLEVBQU1SLE1BQVFLLEVBQWMsS0FBT1AsR0FBY1UsRUFBTVIsTUFBUSxLQUFPUSxFQUFNUixNQUFRLElBQzlFUSxDQUNWLENBQ0osRUFDQSxXQUFBN0ssR0FDSSxRQUFlOEssSUFBWFosRUFDQSxNQUFNLElBQUlFLE1BQU0saURBRXhCLEVBQ0EsYUFBQVcsR0FDSSxRQUFlRCxJQUFYWixFQUNBLE1BQU0sSUFBSUUsTUFBTSwwQ0FBMENPLEtBQUtDLFVBQVVWLEtBRWpGLEVBQ0EsZUFBQWMsQ0FBZ0JULEVBQVVDLEdBQ3RCLEdBQXNCLGlCQUFYTixLQUF5QkEsRUFBU0ssR0FDekMsTUFBTSxJQUFJSCxNQUFNLFlBQVlGLHdCQUE2QkssUUFBZUMsSUFFaEYsRUFDQSxZQUFBUyxDQUFhVixHQUNULE1BQU1XLEVBQW1CaEIsRUFDekIsS0FBTSxXQUFZZ0IsSUFBcUJBLEVBQWlCckssU0FBVzBKLEVBQy9ELE1BQU0sSUFBSUgsTUFBTSxtQkFBbUJHLGFBQW9CVyxFQUFpQnJLLFFBQVUsY0FFMUYsRUFDQXNLLElBQUssQ0FDRCxJQUFBN0wsQ0FBS2lMLEdBQ0QsR0FBSUwsSUFBV0ssRUFDWCxNQUFNLElBQUlILE1BQU0sWUFBWU8sS0FBS0MsVUFBVVYsZ0JBQXFCUyxLQUFLQyxVQUFVTCxLQUV2RixHQUdaLEMsaUJDM0NBLE1BQU1hLE9BQXdDLElBQXRCQyxXQUFXQyxPQUM3QkMsRUFBZUgsRUFBV0MsV0FBV0csT0FBUyxLQW1KN0MsTUFBTUEsRUFoSkxKLEdBQVlHLEVBRUwsU0FBZ0JyQixFQUFRTSxHQUMzQixRQUFnQk0sSUFBWk4sRUFBdUIsQ0FFdkIsTUFBTWlCLEVBQVdGLEVBQWFyQixHQUM5QixNQUFPLENBQ0gsSUFBQTVLLENBQUtpTCxHQUNELElBQ0lrQixFQUFTbk0sS0FBS2lMLEVBQ2xCLENBQ0EsTUFBT00sR0FFSCxNQUFNLElBQUlULE1BQU1JLEVBQ3BCLENBQ0osRUFDQSxXQUFBeEssR0FDSSxJQUNJeUwsRUFBU3pMLGFBQ2IsQ0FDQSxNQUFPNkssR0FDSCxNQUFNLElBQUlULE1BQU1JLEVBQ3BCLENBQ0osRUFDQSxhQUFBTyxHQUNJLElBQ0lVLEVBQVNWLGVBQ2IsQ0FDQSxNQUFPRixHQUNILE1BQU0sSUFBSVQsTUFBTUksRUFDcEIsQ0FDSixFQUNBLGVBQUFRLENBQWdCVCxHQUNaLElBQ0lrQixFQUFTVCxnQkFBZ0JULEVBQzdCLENBQ0EsTUFBT00sR0FDSCxNQUFNLElBQUlULE1BQU1JLEVBQ3BCLENBQ0osRUFDQSxZQUFBUyxDQUFhVixHQUNULElBQ0lrQixFQUFTUixhQUFhVixFQUMxQixDQUNBLE1BQU9NLEdBQ0gsTUFBTSxJQUFJVCxNQUFNSSxFQUNwQixDQUNKLEVBQ0FXLElBQUssQ0FDRCxJQUFBN0wsQ0FBS2lMLEdBQ0QsSUFDSWtCLEVBQVNOLElBQUk3TCxLQUFLaUwsRUFDdEIsQ0FDQSxNQUFPTSxHQUNILE1BQU0sSUFBSVQsTUFBTUksRUFDcEIsQ0FDSixHQUVKa0IsR0FBSSxDQUNBQyxHQUFJLENBQ0FDLFlBQWNyQixJQUNWLElBQ0lrQixFQUFTVCxnQkFBZ0JULEVBQzdCLENBQ0EsTUFBT00sR0FDSCxNQUFNLElBQUlULE1BQU1JLEVBQ3BCLEtBS3BCLENBRUEsTUFBTWlCLEVBQVdGLEVBQWFyQixHQUM5QixNQUFPLElBQ0F1QixFQUVIQyxHQUFJLENBQ0FDLEdBQUksQ0FDQUMsWUFBY3JCLEdBQ0hnQixFQUFhckIsR0FBUWMsZ0JBQWdCVCxLQUt4RGpMLEtBQU9pTCxHQUNJa0IsRUFBU25NLEtBQUtpTCxHQUdqQyxFQUlPLFNBQWdCTCxFQUFRTSxHQUMzQixRQUFnQk0sSUFBWk4sRUFBdUIsQ0FFdkIsTUFBTWlCLEVBQVd4QixFQUFhQyxHQUM5QixNQUFPLENBQ0gsSUFBQTVLLENBQUtpTCxHQUNEa0IsRUFBU25NLEtBQUtpTCxFQUFVQyxFQUM1QixFQUNBLFdBQUF4SyxHQUNJeUwsRUFBU3pMLGFBQ2IsRUFDQSxhQUFBK0ssR0FDSVUsRUFBU1YsZUFDYixFQU1BLFlBQUFFLENBQWFWLEdBQ1RrQixFQUFTUixhQUFhVixFQUMxQixFQUNBWSxJQUFLLENBQ0QsSUFBQTdMLENBQUtpTCxHQUNEa0IsRUFBU04sSUFBSTdMLEtBQUtpTCxFQUN0QixHQUVKbUIsR0FBSSxDQUNBQyxHQUFJLENBQ0FDLFlBQWNyQixJQUNWa0IsRUFBU1QsZ0JBQWdCVCxFQUFTLElBS3RELENBQ0EsTUFBTWtCLEVBQVd4QixFQUFhQyxHQUM5QixNQUFPLElBQ0F1QixFQUVIQyxHQUFJLENBQ0FDLEdBQUksQ0FDQUMsWUFBY3JCLElBQ1ZrQixFQUFTVCxnQkFBZ0JULEVBQVMsSUFLdEQsQyxtU0NwSkQsU0FBUzdKLEVBQU1tTCxHQUNsQixPQUFPNUwsU0FBU1csaUJBQWlCaUwsR0FBVWhMLE1BQy9DLENBQ08sTUFBTWlMLEVBQVdwTCxFQUNqQixTQUFTcUwsRUFBTUEsR0FDbEIsT0FBTzlMLFNBQVNXLGlCQUFpQm1MLEVBQ3JDLENBQ08sU0FBUyxFQUFNQyxHQUNsQixPQUFPRCxFQUFNQyxHQUFHeEYsU0FBUXhCLEdBQU9BLEVBQUlpSCxTQUN2QyxDQUVPLFNBQVN2TSxFQUFNc00sR0FDUixJQUFJRCxFQUFNQyxJQUdkeEYsU0FBUXhCLEdBQU9BLEVBQUl0RixTQUY3QixDQUlPLFNBQVN3TSxFQUFVOUwsR0FDdEJWLEVBQU0sSUFBTVUsRUFDaEIsQ0FDTyxTQUFTK0wsRUFBU0gsRUFBRzdHLEVBQVEsR0FDaEI0RyxFQUFNQyxHQUFHN0csR0FDakJ6RixPQUNaLENBQ08sU0FBUzBNLEVBQVVDLEVBQU9DLEdBQzdCLE1BQU1DLEVBQVcsSUFBSUMsY0FBYyxVQUFXLENBQzFDRixNQUNBL0QsU0FBUyxJQUViOEQsRUFBTWhFLGNBQWNrRSxFQUN4QixDQUNPLFNBQVNFLEVBQVFKLEVBQU9DLEdBQzNCLE1BQU1DLEVBQVcsSUFBSUMsY0FBYyxRQUFTLENBQ3hDRixNQUNBL0QsU0FBUyxJQUViOEQsRUFBTWhFLGNBQWNrRSxFQUN4QixDQVFPLFNBQVNHLEVBQVVWLEVBQUc3RyxFQUFRLEdBRWpDd0gsRUFEZVosRUFBTUMsR0FBRzdHLEdBRTVCLENBQ08sU0FBU3dILEVBQVU1QyxHQUV0QkEsRUFBTzFCLGNBQWMsSUFBSUMsTUFBTSxTQUFVLENBQUVDLFNBQVMsSUFDeEQsQ0FDTyxTQUFTaEYsRUFBS3lJLEdBQ2pCLElBQUl6SSxFQUFPLEdBRVgsT0FEQXdJLEVBQU1DLEdBQUd4RixTQUFReEIsR0FBT3pCLEdBQWN5QixFQUFJdkIsWUFDbkNGLENBQ1gsQ0FDTyxTQUFTcUYsRUFBWW9ELEdBQ3hCLElBQUl6SSxFQUFPLEdBRVgsT0FEQXdJLEVBQU1DLEdBQUd4RixTQUFReEIsR0FBT3pCLEdBQWN5QixFQUFJNEQsY0FDbkNyRixDQUNYLENBQ08sU0FBU3FKLEVBQUt4TSxHQUNqQixPQUFPSCxTQUFTcUQsZUFBZWxELEVBQ25DLENBRU8sU0FBU3lNLEVBQVN6TSxHQUNyQixNQUFNaUQsRUFBVXBELFNBQVNxRCxlQUFlbEQsR0FDeEMsT0FBT2lELEdBQVNJLFdBQWEsRUFDakMsQ0FZa0IsSUFBSTZFLE1BQU0sV0FBWSxDQUNwQ0MsU0FBUyxFQUNUdUUsWUFBWSxJQUtoQixNQUFNQyxFQUFjLElBQUl6RSxNQUFNLFNBQVUsQ0FDcENDLFNBQVMsRUFDVHVFLFlBQVksSUFFVCxTQUFTRSxFQUFpQmhJLEdBQzdCQSxFQUFJcUQsY0FBYzBFLEVBQ3RCLENDN0ZPLFNBQVNFLEVBQU1DLEdBQ2xCLE9BQU8sSUFBSXBPLFNBQVFxTyxHQUFXbk8sV0FBV21PLEVBQVNELElBQ3RELENBQ08sU0FBU0UsRUFBZXJCLEVBQU9yTCxFQUFPOEosR0FDekMsTUFBTTZDLEVBQVdwTixTQUFTVyxpQkFBaUJtTCxHQUNyQ3VCLEVBQVFELEVBQVN4TSxPQUd2QixPQUZBMkosRUFBVUEsR0FBVyxZQUFZOUosNkJBQWlDcUwsZUFBbUJ1QixLQUNyRixPQUFPQSxHQUFPaE8sS0FBS29CLEVBQU84SixHQUNuQjZDLENBQ1gsQ0FDTyxTQUFTRSxLQUFxQkMsR0FDakMsTUFBTUgsRUFBV0csRUFBUUMsUUFBTyxDQUFDQyxFQUFLM0IsS0FDbEMsTUFBTXNCLEVBQVdwTixTQUFTVyxpQkFBaUJtTCxHQUUzQyxPQURBMkIsRUFBSXpILFFBQVFvSCxHQUNMSyxDQUFHLEdBQ1gsSUFDSCxHQUF3QixJQUFwQkwsRUFBU3hNLE9BQ1QsTUFBTSxJQUFJdUosTUFBTSwrRUFFcEIsTUFDTXVELEVBRFVOLEVBQVNPLE1BQ0FuSyxVQUN6QjRKLEVBQVM3RyxTQUFReEIsSUFBTyxPQUFPQSxFQUFJdkIsV0FBV25FLEtBQUtxTyxJQUN2RCxDQUNPLFNBQVNFLEVBQVdoQyxFQUFVaUMsSUFDakMsT0FBT3ZLLEVBQUtzSSxJQUFXdk0sS0FBS3dPLEVBQ2hDLENBQ0EsU0FBU0MsRUFBNEJDLEVBQWdCQyxHQUFpQixxQkFBRUMsR0FBeUIsQ0FDN0ZBLHFCQUFzQixHQUN2QkMsRUFBcUJDLEVBQXNCQyxFQUFpQixJQUMzRCxPQUFPTCxFQUFlbk4sUUFBUXZCLEtBQUs0TyxHQUFzQixJQUFNLFlBQVlDLFdBQTZCRCw2QkFBZ0RGLEVBQWVuTixZQUN2SyxPQUFPb04sRUFBZ0JwTixRQUFRdkIsS0FBSzRPLEdBQXNCLElBQU0sWUFBWUUsV0FBOEJGLDZCQUFnREQsRUFBZ0JwTixXQUMxS21OLEVBQWV4SCxTQUFRLENBQUM4SCxFQUFpQm5KLEtBQ3JDLE1BQU12RixFQUFpQkssU0FBU1csaUJBQWlCd04sR0FBc0JqSixJQUN2RSxPQUFPbEYsU0FBU3NPLEtBQUtwRyxTQUFTdkksSUFBaUJOLE1BQUssRUFBTSx3QkFBd0I4TyxrRUFBcUZELEtBQ3ZLLElBQUl0TyxFQUFlVCxPQUFPUSxHQUFnQlAsWUFDMUMsY0FBY2lQLEVBQWdCNU8sT0FBT0osS0FBSyxZQUUxQ2dQLEVBQWdCNU8sU0FDaEIsT0FBT0UsR0FBZ0JJLGVBQ3ZCLE9BQU9DLFNBQVNzTyxLQUFLcEcsU0FBU3ZJLElBQWlCTixNQUFLLEVBQU0sd0JBQXdCOE8saUVBQW9GRCxLQUN0SyxJQUFJaE8sRUFBa0JOLEVBQWUsRUFDckNBLEVBQWVULE9BQU9RLEVBQWVQLFlBQ3JDLE9BQU9ZLFNBQVNzTyxLQUFLcEcsU0FBU3ZJLElBQWlCTixNQUFLLElBQ3BELE9BQU9hLEdBQWlCYixLQUFLTyxHQUFjLElBQU0sZUFBZXNPLG1CQUFxQ0UsRUFBaUIsUUFBUUEsRUFBaUIsY0FBY0QsaUJBQW9Dak8sZUFBNkJOLE1BRTlOeU8sRUFBZ0I1TyxRQUNoQkcsRUFBZVQsT0FBT1EsR0FBZ0JQLGFBQ3BDYyxHQUNGLE9BQU9BLEdBQWlCYixLQUFLTyxHQUFjLElBQU0sZ0JBQWdCd08sRUFBaUIsUUFBUUEsRUFBaUIsY0FBY0QsMEJBQTZDak8sZUFBNkJOLEtBQWUsR0FFMU4sQ0FFTyxTQUFTMk8sRUFBb0JMLEVBQXFCQyxHQUFzQixxQkFBRUYsR0FBeUIsQ0FDdEdBLHFCQUFzQixJQUl0QixPQUFPSCxFQUZrQjlOLFNBQVNXLGlCQUFpQnVOLEdBQzNCbE8sU0FBU1csaUJBQWlCd04sR0FDb0IsQ0FBRUYsd0JBQXdCQyxFQUFxQkMsRUFDekgsQ0FDTyxTQUFTSyxLQUEyQkMsR0FJdkMsTUFBT0MsRUFBU0MsR0FBWUYsRUFBS0csUUFDakMsSUFBSTlDLEVBQVFxQixFQUFld0IsRUFBVSxHQUNqQ0UsRUFBYzFCLEVBQWV1QixFQUFTLEdBQzFDLE1BQ01JLEVBRGtCaEQsRUFBTSxHQUNGMU0sVUFDNUIwTyxFQUE0QmUsRUFBYS9DLEVBQU8sQ0FBRW1DLHFCQUFzQixHQUFLUyxFQUFTQyxHQUN0RixJQUFJM0YsRUFBVyxFQUNmeUYsRUFBS2xJLFNBQVEsRUFBRXdJLEVBQVNDLEdBQVc5SixLQUMvQjRHLEVBQVFxQixFQUFlNkIsRUFBVSxHQUNqQ0gsRUFBYzFCLEVBQWU0QixFQUFTLEdBQ3RDLElBQUlFLEVBQWtCbkQsRUFBTSxHQUN4Qm9ELEVBQVdELEVBQWdCN1AsVUFDL0IsTUFBTWdCLEdBQVNqQixPQUFPMlAsR0FBTzlGLEdBQVU1SCxZQUN2QyxPQUFPOE4sR0FBVTdQLEtBQUtlLEdBQU8sSUFBTSxtQkFBbUI0TywwQ0FBaURGLGFBQWVJLE1BQ3RIcEIsRUFBNEJlLEVBQWEvQyxFQUFPLENBQUVtQyxxQkFBc0IsR0FBS1MsRUFBU0MsRUFBVXpKLEVBQVEsR0FDeEcrSixFQUFrQm5ELEVBQU0sR0FDeEJvRCxFQUFXRCxFQUFnQjdQLFVBQzNCLE1BQU0rUCxFQUFpQm5HLEVBQVcsR0FDbEMsT0FBT2tHLEdBQVU3UCxNQUFNRixPQUFPMlAsR0FBT0ssR0FBZ0IvTixZQUFZLElBQU0sWUFBWTROLHFCQUE0QjdQLE9BQU8yUCxHQUFPSyx1QkFBb0NELE1BQ2pLbEcsR0FBc0IsQ0FBQyxHQUUvQixDQ2pGQSxNQUFNbUMsT0FBd0MsSUFBdEJDLFdBQVdDLE9BQ3RCck0sRUFBS21NLEVBQ1pDLFdBQVdwTSxHQUNYLEtBQ09vUSxFQUFXakUsRUFDbEJDLFdBQVdnRSxTQUNYLEtBRU9DLEVBQWFsRSxFQUNwQkMsV0FBV2lFLFdBQ1gsS0FDT0MsRUFBWW5FLEVBQ25CQyxXQUFXa0UsVUFDWCxJLDhGQ2hCTixJQUFJQyxFQUFlLEtBQ2ZDLEVBQVMsSUFBSUMsSUFDYkMsRUFBWSxHQUNaQyxFQUFhLElBQUlGLElBRXJCLE1BQU10RSxPQUF3QyxJQUF0QkMsV0FBV0MsT0FFdEJyTSxFQUFLbU0sRUFDWkMsV0FBV3BNLEdBQ1gsQ0FBQzRRLEVBQU1DLEtBQ0wsTUFBTUMsRUFBTyxDQUFFRixPQUFNQyxLQUFJRSxNQUFPUixHQUNoQ0csRUFBVTFKLEtBQUs4SixHQUVmLE1BQU1FLEVBQWFSLEVBQU9TLElBQUlWLElBQWlCLEdBQy9DUyxFQUFXaEssS0FBSzhKLEdBQ2hCTixFQUFPVSxJQUFJWCxFQUFjUyxFQUFXLEVBRS9CWixFQUFXakUsRUFDbEJDLFdBQVdnRSxTQUNYLENBQUNRLEVBQU1DLEtBQ0wsTUFBTU0sRUFBZ0JaLEVBQ3RCQSxFQUFlSyxFQUNmSixFQUFPVSxJQUFJTixFQUFNLElBQ2pCRCxFQUFXTyxJQUFJTixFQUFNLENBQUVQLFdBQVksR0FBSUMsVUFBVyxLQUNsRE8sSUFDQU4sRUFBZVksQ0FBYSxFQUt2QmQsRUFBYWxFLEVBQ3BCQyxXQUFXaUUsV0FDVlEsSUFDQyxNQUFNTyxFQUFRVCxFQUFXTSxJQUFJVixJQUFpQixDQUFFRixXQUFZLEdBQUlDLFVBQVcsSUFDM0VjLEVBQU1mLFdBQVdySixLQUFLNkosR0FDdEJGLEVBQVdPLElBQUlYLEVBQWNhLEVBQU0sRUFFOUJkLEVBQVluRSxFQUNuQkMsV0FBV2tFLFVBQ1ZPLElBQ0MsTUFBTU8sRUFBUVQsRUFBV00sSUFBSVYsSUFBaUIsQ0FBRUYsV0FBWSxHQUFJQyxVQUFXLElBQzNFYyxFQUFNZCxVQUFVdEosS0FBSzZKLEdBQ3JCRixFQUFXTyxJQUFJWCxFQUFjYSxFQUFNLEVBR3BDN1EsZUFBZThRLElBQ2xCLElBQUlDLEVBQVMsRUFDVEMsRUFBUyxFQUNiLE1BQU1DLEVBQVcsR0FDakJ2TCxRQUFRVyxJQUFJLGNBQWM4SixFQUFVOU8scUJBRXBDLE1BQU02UCxFQUFlLElBQUloQixJQUN6QixJQUFLLE1BQU1LLEtBQVFKLEVBQVcsQ0FDMUIsTUFBTXJELEVBQU15RCxFQUFLQyxPQUFTLEtBQ3BCQyxFQUFhUyxFQUFhUixJQUFJNUQsSUFBUSxHQUM1QzJELEVBQVdoSyxLQUFLOEosR0FDaEJXLEVBQWFQLElBQUk3RCxFQUFLMkQsRUFDMUIsQ0FFQSxJQUFLLE1BQU9VLEVBQVdDLEtBQVVGLEVBQWMsQ0FDdkNDLEdBQ0F6TCxRQUFRVyxJQUFJLEdBQUc4SyxLQUVuQixJQUFLLE1BQU1aLEtBQVFhLEVBQU8sQ0FDdEIsTUFBTUMsRUFBU0YsRUFBWSxLQUFPLEdBQzVCTixFQUFRVCxFQUFXTSxJQUFJSCxFQUFLQyxPQUNsQyxJQUVJLEdBQUlLLEdBQU9mLFdBQ1AsSUFBSyxNQUFNd0IsS0FBUVQsRUFBTWYsaUJBQ2Z3QixJQVFkLFNBSk1mLEVBQUtELEtBQ1hTLElBQ0FyTCxRQUFRVyxJQUFJLEdBQUdnTCxNQUFXZCxFQUFLRixRQUUzQlEsR0FBT2QsVUFDUCxJQUFLLE1BQU11QixLQUFRVCxFQUFNZCxnQkFDZnVCLEdBR2xCLENBQ0EsTUFBT2pHLEdBTUgsR0FMQTJGLElBQ0FDLEVBQVN4SyxLQUFLLENBQUU4SixLQUFNQSxFQUFLRixLQUFNRyxNQUFPRCxFQUFLQyxNQUFPbkYsTUFBT0EsSUFDM0QzRixRQUFRMkYsTUFBTSxHQUFHZ0csTUFBV2QsRUFBS0YsUUFDakMzSyxRQUFRMkYsTUFBTUEsR0FFVndGLEdBQU9kLFVBQ1AsSUFBSyxNQUFNdUIsS0FBUVQsRUFBTWQsVUFDckIsVUFDVXVCLEdBQ1YsQ0FDQSxNQUFPQyxHQUNIN0wsUUFBUTJGLE1BQU0sMkJBQTRCa0csRUFDOUMsQ0FHWixDQUNKLENBQ0lKLEdBQ0F6TCxRQUFRVyxJQUFJLEdBRXBCLENBd0JBLE9BdkJBWCxRQUFRVyxJQUFJLHNCQUFzQjBLLGFBQWtCQyxZQUNoREMsRUFBUzVQLE9BQVMsSUFDbEJxRSxRQUFRMkYsTUFBTSxxQkFDZDRGLEVBQVNqSyxTQUFRLEVBQUd1SixPQUFNQyxRQUFPbkYsWUFDN0IsTUFBTW1HLEVBQVdoQixFQUFRLEdBQUdBLE9BQVdELElBQVNBLEVBR2hELEdBRkE3SyxRQUFRMkYsTUFBTSxLQUFLbUcsTUFDbkI5TCxRQUFRMkYsTUFBTUEsR0FDVkEsRUFBTVIsTUFBTyxDQUVNUSxFQUFNUixNQUFNQyxNQUFNLE1BQzFCOUQsU0FBUXlLLElBQ1hBLEVBQUtuUCxTQUFTLFVBQVltUCxFQUFLblAsU0FBUyxpQkFDeENvRCxRQUFRMkYsTUFBTW9HLEVBQUt0TixPQUN2QixHQUVSLE1BSVJnTSxFQUFZLEdBQ1pGLEVBQU95QixRQUNQdEIsRUFBV3NCLFFBQ1gxQixFQUFlLEtBQ0csSUFBWGdCLENBQ1gsQyxtQ0N2Q0EsU0FBU1csSUFFTGpNLFFBQVFyRyxLQUFLLHNCQUNicUcsUUFBUXJHLEtBQUsseUJBQ2IsTUFBTXVTLEVBQVVuUixTQUFTQyxjQUFjLGFBQ3ZDLElBQUssSUFBSVgsRUFBSSxFQUFHQSxFQUpXLElBSWFBLElBQ3BDNlIsRUFBUS9RLE1BQVEsU0FBV2QsR0FFM0IsUUFBVTZSLEVBQVMsU0FFdkJsTSxRQUFRRSxRQUFRLHlCQUNoQkYsUUFBUXJHLEtBQUssMEJBQ2IsTUFBTThILEVBQWExRyxTQUFTVyxpQkFBaUIsV0FDN0MsSUFBSyxJQUFJckIsRUFBSSxFQUFHQSxFQVpXLElBWWFBLElBQ3BDb0gsRUFBV3BILEdBQUdHLFFBQ2xCd0YsUUFBUUUsUUFBUSwwQkFDaEJGLFFBQVFyRyxLQUFLLDRCQUNiLE1BQU13UyxFQUFnQnBSLFNBQVNXLGlCQUFpQixZQUNoRCxJQUFLLElBQUlyQixFQUFJK1IsSUFBd0IvUixHQUFLLEVBQUdBLElBQ3pDOFIsRUFBYzlSLEdBQUdHLFFBQ3JCd0YsUUFBUUUsUUFBUSw0QkFDaEJGLFFBQVFFLFFBQVEscUJBQ3BCLEVBaEhBLFFBQVMsWUFBWSxXQUNqQixNQUFNbU0sR0FBWSxRQUFNLGFBQWEsSUFDckMsSUFBQXRTLElBQUcsNEJBQTRCTyxrQkFDM0IsU0FBTyxRQUFNLGtCQUFrQnFCLFFBQVF2QixLQUFLLElBQzVDLFFBQU0sNkJBQ0EsUUFBTSxJQUNaLFNBQU8sUUFBTSxrQkFBa0J1QixRQUFRdkIsS0FBSyxJQUM1QyxRQUFPaVMsR0FBV3ZSLGNBQ2xCdVIsRUFBVWxSLE1BQVEsT0FDbEIsUUFBVWtSLEVBQVcsVUFDckIsU0FBTyxRQUFNLGtCQUFrQjFRLFFBQVF2QixLQUFLLElBRTVDLFFBQU0sbUJBQ04sU0FBTyxRQUFNLGtCQUFrQnVCLFFBQVF2QixLQUFLLEVBQ2hELEtBQ0EsSUFBQUwsSUFBRyxlQUFlTyxpQkFFZHFJLE9BQU8ySixTQUFTQyxLQUFPLFdBQ2pCLFFBQU0sSUFDWixTQUFPLFFBQU0sa0JBQWtCNVEsUUFBUXZCLEtBQUssR0FDNUNpUyxFQUFVbFIsTUFBUSxPQUNsQixRQUFVa1IsRUFBVyxVQUVyQixRQUFNLGlCQUVOLFFBQU0sbUJBQ04sU0FBTyxRQUFNLGtCQUFrQjFRLFFBQVF2QixLQUFLLEdBQzVDaVMsRUFBVWxSLE1BQVEsT0FDbEIsUUFBVWtSLEVBQVcsU0FDckJBLEVBQVVsUixNQUFRLE9BQ2xCLFFBQVVrUixFQUFXLFNBQ3JCLE1BQU1HLEdBQWMsUUFBTSxnQkFBZ0IsR0FDMUNBLEVBQVloUyxTQUNaLFFBQU9nUyxFQUFZL08sU0FBU3JELE1BQUssR0FDakNpUyxFQUFVbFIsTUFBUSxTQUNsQixRQUFVa1IsRUFBVyxVQUNyQixTQUFPLFFBQU0sZ0JBQWdCMVEsUUFBUXZCLEtBQUssSUFDMUMsUUFBTSwyQkFDTixTQUFPLFFBQU0sZ0JBQWdCdUIsUUFBUXZCLEtBQUssSUFDMUMsUUFBT3VJLE9BQU8ySixTQUFTQyxNQUFNblMsS0FBSyxrQkFDNUIsUUFBTSxJQUNaLFNBQU8sUUFBTSxnQkFBZ0J1QixRQUFRdkIsS0FBSyxJQUMxQyxRQUFNLG1DQUNBLFFBQU0sSUFDWixTQUFPLFFBQU0sZ0JBQWdCdUIsUUFBUXZCLEtBQUssSUFDMUMsUUFBTSw2QkFDQSxRQUFNLElBQ1osU0FBTyxRQUFNLGdCQUFnQnVCLFFBQVF2QixLQUFLLElBRTFDLFFBQVMsbUJBQ1QsU0FBTyxRQUFNLGdCQUFnQnVCLFFBQVF2QixLQUFLLElBRTFDLFFBQVMsbUJBQ1QsU0FBTyxRQUFNLGdCQUFnQnVCLFFBQVF2QixLQUFLLElBRTFDLFFBQVMsbUJBQ1QsU0FBTyxRQUFNLGdCQUFnQnVCLFFBQVF2QixLQUFLLEVBQzlDLEtBQ0EsSUFBQUwsSUFBRyxpQkFBaUIsV0FFaEJzUyxFQUFVbFIsTUFBUSxPQUNsQixRQUFVa1IsRUFBVyxVQUNyQixTQUFPLFFBQU0seUJBQXlCMVEsUUFBUXZCLEtBQUssR0FFbkQsSUFBSXFTLEVBQVEsSUFBSUMsV0FBVyxXQUFZLENBQ25DckosU0FBUyxFQUNUdUUsWUFBWSxFQUNaK0UsS0FBTWhLLFVBR1YsUUFBTSx3Q0FBd0MsR0FBR1EsY0FBY3NKLElBRS9ELFNBQU8sUUFBTSxrQkFBa0I5USxRQUFRdkIsS0FBSyxJQUM1QyxTQUFPLFFBQU0seUJBQXlCdUIsUUFBUXZCLEtBQUssSUFDbkQsUUFBTSx5QkFDTixNQUFNd1MsR0FBWSxRQUFNLHlCQUF5QixHQUNqREEsRUFBVXpSLE1BQVEsT0FDbEIsUUFBVXlSLEVBQVcsVUFDckIsU0FBTyxRQUFNLGtCQUFrQmpSLFFBQVF2QixLQUFLLElBRTVDLFNBQU8sUUFBTSxrQkFBa0J1QixRQUFRdkIsS0FBSyxJQUM1QyxTQUFPLFFBQU0seUJBQXlCdUIsUUFBUXZCLEtBQUssSUFJbkQsUUFBUyxtQkFDVCxTQUFPLFFBQU0seUJBQXlCdUIsUUFBUXZCLEtBQUssRUFDdkQsS0FDQSxJQUFBTCxJQUFHLHVCQUF3QmtTLEVBQy9CLEcsb0NDekZBLFFBQVMsa0JBQWtCLEtBQ3ZCLE1BQU1ZLEdBQVksUUFBSyx1QkFFakJoTyxFQUF5QixNQUFkZ08sR0FDakIsSUFBQTlTLElBQUcsU0FBU08sVUFDUixNQUFNd1MsRUFBYTVTLFFBQU8sUUFBUywrQkFDbkMsUUFBa0IsNkJBQThCLHdCQUVoRCxTQUFPLFFBQUssb0JBQW9CRSxLQUFLLFNBQ2pDeUUsSUFDQSxTQUFPLFFBQUsseUJBQXlCekUsS0FBSyxLQUMxQyxTQUFPLFFBQUssbUJBQW1CQSxLQUFLLFVBQ3BDLFNBQU8sUUFBSyx3QkFBd0JBLEtBQUssT0FHekMsU0FBTyxRQUFLLHlCQUF5QkEsS0FBS3lTLElBQzFDLFFBQU8zUyxRQUFPLFFBQUssb0JBQW9CNEwsZ0JBQWdCNUwsT0FBTzJTLEtBQzlELFNBQU8sUUFBSyx3QkFBd0J6UyxNQUFLLFFBQUssOEJBRWxELFFBQU0sOEJBQ04sUUFBa0IsNkJBQThCLHdCQUNoRCxRQUFrQix1QkFBd0Isd0JBQzFDLFNBQU8sUUFBSyw4QkFBOEJBLE1BQU0wUyxFQUFhLEdBQUczUSxhQUNoRSxRQUFrQiw0QkFBNkIsOEJBQy9DLE1BQU00USxFQUFrQjdTLFFBQU8sUUFBSywwQkFDcEMsUUFBTSwwQkFDTixJQUFJTyxHQUFZc1MsRUFBa0IsR0FBRzVRLFlBRXJDLFNBQU8sUUFBSyxvQkFBb0IvQixLQUFLLFNBQ3JDLFNBQU8sUUFBSyxtQkFBbUJBLEtBQUtLLElBQ3BDLFNBQU8sUUFBSyx5QkFBeUJMLEtBQUtLLElBQzFDLFFBQU0sMEJBQ05BLEdBQVlzUyxFQUFrQixHQUFHNVEsWUFFakMsU0FBTyxRQUFLLG9CQUFvQi9CLEtBQUssVUFDckMsU0FBTyxRQUFLLG1CQUFtQkEsS0FBS0ssSUFDcEMsU0FBTyxRQUFLLHlCQUF5QkwsS0FBS0ssSUFDMUMsUUFBTSwwQkFFTkEsR0FBWXNTLEVBQWtCLEdBQUc1USxZQUNqQyxTQUFPLFFBQUssb0JBQW9CL0IsS0FBSyxTQUNyQyxTQUFPLFFBQUssbUJBQW1CQSxLQUFLSyxJQUNwQyxTQUFPLFFBQUsseUJBQXlCTCxLQUFLSyxJQUMxQyxRQUFNLDJCQUNOLFFBQU0sb0JBQ04sTUFBTXVTLEdBQVUsUUFBSyxrQkFDZmhJLEdBQVMsUUFBSyx3QkFDcEIsUUFBT0EsR0FBUTVLLEtBQUs0UyxFQUFRLEdBQzlCLEcsR0NsREZDLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnZILElBQWpCd0gsRUFDSCxPQUFPQSxFQUFhQyxRQUdyQixJQUFJQyxFQUFTTCxFQUF5QkUsR0FBWSxDQUdqREUsUUFBUyxDQUFDLEdBT1gsT0FIQUUsRUFBb0JKLEdBQVVHLEVBQVFBLEVBQU9ELFFBQVNILEdBRy9DSSxFQUFPRCxPQUNmLENDckJBSCxFQUFvQk0sRUFBSSxDQUFDSCxFQUFTSSxLQUNqQyxJQUFJLElBQUlyRyxLQUFPcUcsRUFDWFAsRUFBb0JRLEVBQUVELEVBQVlyRyxLQUFTOEYsRUFBb0JRLEVBQUVMLEVBQVNqRyxJQUM1RXVHLE9BQU9DLGVBQWVQLEVBQVNqRyxFQUFLLENBQUV5RyxZQUFZLEVBQU03QyxJQUFLeUMsRUFBV3JHLElBRTFFLEVDTkQ4RixFQUFvQlEsRUFBSSxDQUFDSSxFQUFLQyxJQUFVSixPQUFPSyxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHQ0NsRmIsRUFBb0JpQixFQUFLZCxJQUNILG9CQUFYZSxRQUEwQkEsT0FBT0MsYUFDMUNWLE9BQU9DLGVBQWVQLEVBQVNlLE9BQU9DLFlBQWEsQ0FBRWxULE1BQU8sV0FFN0R3UyxPQUFPQyxlQUFlUCxFQUFTLGFBQWMsQ0FBRWxTLE9BQU8sR0FBTyxFLG9GQ0p2RCxNQUFNbVQsRUFBaUIsVUFDakJDLEVBQWlCLElDRHZCLFNBQVNDLEVBQWNDLEdBQzFCLEdBQUlBLEVBQVNDLFdBQVcsVUFDcEIsTUFBTyxRQUVYLE1BQU1DLEVBU0gsU0FBeUJGLEdBQzVCLE9BQVFBLEdBQ0osSUFBSyxhQUNELE1BQU8sYUFDWCxJQUFLLFlBQ0QsTUFBTyxZQUVmLE9BQU8sQ0FDWCxDQWpCMEJHLENBQWdCSCxHQUN0QyxPQUFzQixJQUFsQkUsRUFDT0EsSUFFUEYsRUFBU0MsV0FBVyxXQUNiLE9BR2YsQ0NaTyxNQUFNRyxFQUFtQixJQUFJQyxPQUFPUixFQUFpQixTQUFXQyxFQUFnQixLQUNoRixTQUFTUSxFQUFlNVQsR0FDM0IsT0FBSUEsRUFBTTZULFFBQVU3VCxFQUFNdVQsV0FBV0osR0FDMUJuVCxFQUFNNlQsT0FBT0gsSUFFaEIsQ0FDWixDQ0hBLE1BQU1JLEVBQWMsZ0JBQ2RDLEVBQWdCLGdCQUNoQkMsRUFBWSxzREFDWkMsRUFBYywyR0FFYixTQUFTQyxFQUFVaFIsR0FDdEIsTUFBTWlSLEVBQWlCLEdBQ2pCbkgsRUFBVyxHQUNYaEQsRUFBUSxHQUNkLElBQUlvSyxFQUFpQixLQUNqQkMsR0FBYyxFQUNkQyxFQUFXLEVBQ2YsTUFBTUMsRUFBVyxJQUFJWixPQUFPTSxFQUFhLEtBRXpDLElBREEvUSxFQXFFSixTQUFrQ0EsR0FFOUIsT0FBT0EsRUFBS0csUUFBUW1SLEdBQW1CLFNBQVVDLEdBRTdDLE9BQU9BLEVBQU1wUixRQUFRLFdBQVksY0FBY0EsUUFBUSxXQUFZLGNBQWNBLFFBQVEsS0FBTSxTQUFTQSxRQUFRLEtBQU0sUUFDMUgsR0FDSixDQTNFV3FSLENBQXlCeFIsR0FDekJvUixFQUFXcFIsRUFBSzFDLFFBQVEsQ0FDM0IsTUFBTW1VLEVBQVdKLEVBQVNLLEtBQUsxUixHQUMvQixJQUFLeVIsRUFDRCxNQUVKLE1BQU9FLEVBQVdDLEVBQVNDLEdBQWNKLEVBQ25DSyxFQUFlSCxFQUFVdEIsV0FBVyxNQUNwQzBCLEVBQWdCSixFQUFVSyxTQUFTLE1BQ3pDLEdBQUlaLEVBQVdLLEVBQVM3UCxNQUFPLENBQzNCLE1BQU15RCxFQUFjckYsRUFBS2lTLE1BQU1iLEVBQVVLLEVBQVM3UCxPQUNsRCxHQUFJeUQsRUFBWWpGLE9BQVEsQ0FDcEIsTUFBTThSLEVBQWlCQyxFQUFjOU0sR0FDckMsSUFBSyxJQUFJQSxLQUFlNk0sRUFDaEI3TSxFQUFZZ0wsV0FBV0osSUFBbUI1SyxFQUFZc0wsT0FBT0MsSUFBZ0IsSUFFbEMsSUFBdkN2TCxFQUFZc0wsT0FBT3lCLEtBQ25CL00sRUFBYzRLLEtBQW9Ca0IsRUFBY2pCLEdBR3hEbUMsRUFBV25CLEVBQWdCcEgsRUFBVXpFLEVBRTdDLENBQ0osQ0FFQSxHQURBK0wsRUFBV0ssRUFBUzdQLE1BQVErUCxFQUFVclUsT0FDbEN3VSxFQUFjLENBQ2RaLEVBQWlCcEssRUFBTXVELE9BQVMsS0FDaEMsUUFDSixDQUNBLE1BQU1pSSxFQUFhLEdBQ25CLElBQUlDLEVBQ0osS0FBb0QsUUFBNUNBLEVBQVl6QixFQUFVWSxLQUFLRyxLQUMvQlYsRUFBYXFCLEVBQWdCRCxFQUFXcEIsRUFBWUYsRUFBZ0JxQixHQUV4RSxNQUFNeFMsRUFBVSxDQUNaMlMsR0FBSWIsR0FFSlUsRUFBV2hWLFNBQ1h3QyxFQUFRNFMsR0FBS0osR0FFYnBCLEdBQ0tBLEVBQWV5QixLQUNoQnpCLEVBQWV5QixHQUFLLElBRXhCekIsRUFBZXlCLEdBQUdqUSxLQUFLNUMsSUFHdkJnSyxFQUFTcEgsS0FBSzVDLEdBRWJpUyxJQUNEakwsRUFBTXBFLEtBQUt3TyxHQUNYQSxFQUFpQnBSLEVBRXpCLENBQ0EsR0FBSXNSLEVBQVdwUixFQUFLMUMsT0FBUSxDQUN4QixNQUFNK0gsRUFBY3JGLEVBQUtpUyxNQUFNYixHQUMvQixHQUFJL0wsRUFBWWpGLE9BQVEsQ0FDcEIsTUFBTThSLEVBQWlCQyxFQUFjOU0sR0FDckMsSUFBSyxNQUFNQSxLQUFlNk0sRUFDbEI3TSxFQUFZZ0wsV0FBV0osTUFDckJrQixFQUVOa0IsRUFBV25CLEVBQWdCcEgsRUFBVXpFLEVBRTdDLENBQ0osQ0FDQSxPQUFPeUUsQ0FDWCxDQUNBLE1BQU13SCxFQUFvQixJQUFJYixPQUFPLDRCQUF1QixLQWtCNUQsU0FBUzRCLEVBQVduQixFQUFnQnBILEVBQVV6RSxJQWU5QyxTQUFnQjZMLEVBQWdCcEgsRUFBVThJLEdBQ2xDMUIsR0FDS0EsRUFBZXlCLEtBQ2hCekIsRUFBZXlCLEdBQUssSUFFeEJ6QixFQUFleUIsR0FBR2pRLEtBQUtrUSxJQUd2QjlJLEVBQVNwSCxLQUFLa1EsRUFFdEIsQ0FwQklDLENBQU8zQixFQUFnQnBILEVBSk4sQ0FDYjJJLEdBQUksT0FDSkssR0FBSUMsRUFBMEIxTixJQUd0QyxDQUVBLFNBQVMwTixFQUEwQi9TLEdBRS9CLE9BQU9BLEVBQUtHLFFBQVEsa0NBQWtDLFNBQVVvUixHQUU1RCxPQUFPQSxFQUFNcFIsUUFBUSxXQUFZLEtBQUtBLFFBQVEsV0FBWSxLQUFLQSxRQUFRLGdCQUFpQixTQUFTQSxRQUFRLGdCQUFpQixRQUM5SCxHQUNKLENBWUEsU0FBU2dTLEVBQWNhLEdBS25CLE9BSGNBLEVBQVlqTSxNQUFNNkosR0FFSjlOLE9BQU9tUSxFQUV2QyxDQUNBLFNBQVNBLEVBQXFCQyxHQUMxQixNQUFnQixLQUFUQSxDQUNYLENBQ0EsU0FBU1YsRUFBZ0JELEVBQVdwQixFQUFZRixFQUFnQnFCLEdBQzVELE1BQU1sQyxFQUFXbUMsRUFBVSxJQUFNQSxFQUFVLElBQU1BLEVBQVUsR0FFM0QsSUFBSVksRUFEZVosRUFBVSxJQUFNQSxFQUFVLElBQU1BLEVBQVUsR0FFN0QsUUFBaUJoTCxJQUFiNkksRUFDQSxPQUFPZSxFQUVYLE1BQU1pQyxFQUE0QixLQUFqQmIsRUFBVSxHQUNyQmMsT0FBd0I5TCxJQUFkNEwsR0FBMkJDLEVBQ3JDRSxFQUFZbEQsRUFBU21ELGNBQ3JCQyxFQUFZRixFQUFVakQsV0FBVyxNQXhEM0MsU0FBd0JvRCxHQUNwQixHQUFJQSxFQUFVcEQsV0FBVyxNQUVyQixPQUR3Qm9ELEVBQVVuVyxTQUFXdVQsRUFBY3ZULFFBQVVtVyxJQUFjNUMsRUFFeEUsV0FFSjRDLEVBQVV4QixNQUFNLEVBQUd3QixFQUFVblcsUUFFeEMsT0FBT21XLENBQ1gsQ0ErQ21EQyxDQUFlSixHQUFhQSxFQUMzRSxHQUFJRCxFQUFTLENBRVQsR0FEc0JqRCxFQUFTNkIsTUFBTSxFQUFHaEMsRUFBZTNTLFVBQVkyUyxFQUNoRCxDQUNmLE1BQU0wRCxFQUFZMUQsS0FBb0JrQixFQUFjakIsRUFHcEQsT0FGQWUsRUFBZXZPLEtBQUssQ0FBQyxLQUFNaVIsSUFDM0JyQixFQUFXNVAsS0FBSyxDQUFDaVIsSUFDVnhDLENBQ1gsQ0FHQSxHQUZxQm9CLEVBQVUsR0FBR2xDLFdBQVdELElBQ05tQyxFQUFVLEdBQUdOLE1BQU03QixFQUFTOVMsT0FBUWlWLEVBQVUsR0FBR2pWLFFBQVFxVCxPQUFPLFNBQVcsRUFHOUcsT0FEQTJCLEVBQVc1UCxLQUFLLENBQUM4USxJQUNWckMsRUFFWCxNQUFNeUMsRUFBYXJCLEVBQVUsR0FFN0IsR0FEa0JxQixFQUFXakQsT0FBT3lCLElBQWtCLEVBQ3ZDLENBQ1hlLEVBQVlTLEVBRVosTUFBTUMsRUFBVSxDQUFDTCxFQUFXTCxHQUU1QixPQURBYixFQUFXNVAsS0FBS21SLEdBQ1QxQyxDQUNYLENBR0lnQyxFQURrQmxELEtBQW9Ca0IsRUFBY2pCLENBRzVELENBQ0trRCxJQUNERCxFQUFZWixFQUFVLElBRzFCLE1BQU11QixFQUFpQlgsRUFBVXBNLE1BQU1nTixHQUFtQmpSLFFBQVEvRSxHQUFNQSxFQUFFVCxPQUFTLElBQy9Fd1csRUFBZXhXLE9BQVMsSUFDeEI2VixFQUFZVyxFQUNaQSxFQUFlN1EsU0FBU25HLElBQ2hCQSxFQUFNNlQsT0FBT0gsSUFBcUIsS0FDaENXLENBQ04sS0FHUixNQUFNMEMsRUFBVSxDQUFDTCxFQUFXTCxHQUN0QmEsRUFBWTdELEVBQWNtRCxHQUtoQyxPQUpJVSxHQUNBSCxFQUFRblIsS0FBS3NSLEdBR0MsVUFBZFIsR0FDQWxCLEVBQVcyQixRQUFRSixHQUNaMUMsSUFFWG1CLEVBQVc1UCxLQUFLbVIsR0FDVDFDLEVBQ1gsQ0N6TU8sTUFBTStDLEVBQWdCLElBQUl6RCxPQUFPUixFQUFpQixTQUFXQyxFQUFnQixNQUN2RTZELEVBQW9CLElBQUl0RCxPQUFPLElBQU1SLEVBQWlCLE9BQVNDLEVBQWlCLElBQUssTUFFNUZpRSxFQUFhbEUsRUFBZWdDLE1BQU0sRUFBR2hDLEVBQWUzUyxPQUFTLEdBQ3REOFUsRUFBZ0IsSUFBSTNCLE9BQU8wRCxFQUFhLGVBQWlCakUsRUFBZ0IsTUFFaEZrRSxFQUFjRCxFQUFhLFdBQWFqRSxFQUV2QyxTQUFTbUUsRUFBMkJDLEVBQVNDLEdBRWhELE1BQU1DLEVBSUgsU0FBeUNGLEVBQVNDLEdBRXJELE1BQU1FLEVBQXFCSCxFQUczQixPQUVKLFNBQXlCQSxFQUFTQyxHQUM5QixNQUFNRyxFQUFVLEdBQ2hCLElBQUssSUFBSTlTLEVBQVEsRUFBR0EsRUFBUTBTLEVBQVFoWCxTQUFVc0UsRUFBTyxDQUNqRCxNQUNNK1MsRUFEV0wsRUFBUTFTLEdBQ0t6QixRQUFRK1QsRUFBZUUsR0FDakR4UyxFQUFRMlMsRUFBT2pYLE9BQ2ZvWCxFQUFRaFMsS0FBS2lTLEVBQWUxRSxFQUFpQnJPLEVBQVFzTyxHQUd6RHdFLEVBQVFoUyxLQUFLaVMsRUFDakIsQ0FFQSxPQUVHLFNBQThCRCxFQUFTSixFQUFTQyxHQUNuRCxNQUFNSyxFQUFPTCxFQUFPalgsT0FBU2dYLEVBQVFoWCxPQUNyQyxHQUFJc1gsRUFBTyxFQUNQLElBQUssSUFBSTdXLEVBQUk2VyxFQUFNN1csRUFBSSxJQUFLQSxFQUN4QjJXLEVBQVFoUyxLQUFLdU4sR0FBa0JxRSxFQUFRaFgsT0FBU1MsRUFBSSxHQUFLbVMsRUFHckUsQ0FWSTJFLENBQXFCSCxFQUFTSixFQUFTQyxHQUNoQ0csQ0FDWCxDQWZXSSxDQUFnQkwsRUFBb0JGLEVBQy9DLENBVnVCUSxDQUFnQ1QsRUFBU0MsR0FBUVMsS0FBSyxJQUV6RSxPQURnQmhFLEVBQVV3RCxFQUU5QixDQ2ZPLE1BQU1TLEVBQVEsR0FDZCxJQUFJLEVBT0FDLEdBTlgsU0FBV0MsR0FDUEEsRUFBdUIsT0FBSSxTQUMzQkEsRUFBdUIsT0FBSSxTQUMzQkEsRUFBd0IsUUFBSSxVQUM1QkEsT0FBZSxHQUFlLFdBQ2pDLENBTEQsQ0FLRyxJQUFtQixFQUFpQixDQUFDLElBRXhDLFNBQVdELEdBQ1BBLEVBQXFCLFNBQUksV0FDekJBLEVBQWlCLEtBQUksT0FDckJBLEVBQW9CLFFBQUksVUFDeEJBLEVBQW1CLE9BQUksUUFDMUIsQ0FMRCxDQUtHQSxJQUFlQSxFQUFhLENBQUMsSUFDaEMsTUFFYSxFQUFhLENBQ3RCRSxJQUFLLE9BQ0xDLElBQUssTUFDTEMsVUFBVyxZQUNYQyxhQUFjLGVBQ2RDLFNBQVUsV0FDVkMsS0FBTSxPQUNOQyxVQUFXLFlBQ1hDLE9BQVEsU0FDUkMsV0FBWSxhQUNaQyxZQUFhLGNBQ2JDLFFBYllDLEtBQUtDLE9DWGZyRCxFQUFLLEtBQ0osU0FBU3NELEVBQW9CWixFQUFLYSxFQUFZakYsRUFBaUIsR0FBSWtGLEVBQWMsSUFDcEYsTUFBTXJNLEVBQVd1TCxFQUNqQixJQUFLLElBQUlyWixFQUFJLEVBQUdBLEVBQUk4TixFQUFTeE0sT0FBUXRCLElBQUssQ0FDdEMsTUFBTW9hLEVBQVcsSUFBSUQsRUFBYW5hLEdBQzVCOEQsRUFBVWdLLEVBQVM5TixHQUN6QixHQUFJOEQsRUFBUTRTLEdBQUksQ0FDWixNQUFNMkQsRUFBUXZXLEVBQVE0UyxHQUN0QjVTLEVBQVE0UyxHQUFLNEQsRUFBa0JELEVBQU9ILEVBQzFDLENBQ0EsR0FBSXBXLEVBQVE2UyxHQUFJLENBQ1osTUFBTTRELEVBQVd6VyxFQUFRNlMsR0FDbkI2RCxFQUFnQixJQUFJSixFQUFVekQsR0FDcEM3UyxFQUFRNlMsR0FBS3NELEVBQW9CTSxFQUFVTCxFQUFZakYsRUFBZ0J1RixFQUMzRSxDQUNBeGEsRUFBSXlhLEVBQWEzVyxFQUFTb1csRUFBWXBNLEVBQVU5TixFQUNwRCxDQUNBLE9BQU84TixDQUNYLENBQ0EsU0FBUzJNLEVBQWFDLEVBQU9SLEVBQVlLLEVBQVUzVSxHQUMvQyxHQUFpQixTQUFiOFUsRUFBTWpFLEdBQ04sT0FBTzdRLEVBRVgsTUFBTStVLEVBQVlELEVBQ2xCLElBSUluRixFQUpBbE0sRUFBY3NSLEVBQVU3RCxHQUM1QixVQUFXek4sSUFBZ0IsRUFBZXVSLE9BQ3RDLE9BQU9oVixFQUdYLEtBQXdELFFBQWhEMlAsRUFBUWYsRUFBaUJrQixLQUFLck0sS0FBd0IsQ0FDMUQsTUFBTXdSLEVBQWN0RixFQUFNLEdBQ3BCdUYsRUFBU0MsU0FBU0YsRUFBYSxJQUVyQyxJQURpQnhRLE1BQU15USxJQUFXQSxFQUFTWixFQUM5QixDQUNULE1BQU1jLEVBQWEvRyxFQUFpQjZHLEVBQVM1RyxFQUN2QytHLEVBQVE1UixFQUFZNE0sTUFBTVYsRUFBTTNQLE1BQVFvVixFQUFXMVosUUFDekRpWixFQUFTVyxPQUFPdFYsRUFBTyxFQUFHLENBQ3RCNlEsR0FBSSxPQUNKMEUsRUFBR0wsSUFFUHpSLEVBQWM0UixFQUNkekcsRUFBaUI0RyxVQUFZLENBQ2pDLENBQ0osQ0FFQSxPQURBVCxFQUFVN0QsR0FBS3pOLEVBQ1J6RCxDQUNYLENBQ0EsU0FBUzBVLEVBQWtCaEUsRUFBWTRELEdBQ25DLE1BQU1tQixFQUFTLEdBQ2YsSUFBSyxNQUFNeEQsS0FBV3ZCLEVBQVksQ0FDOUIsTUFBT3ZKLEVBQUtqTSxFQUFPa1gsR0FBYUgsRUFDaEMsR0FBSTlLLEVBQUlzSCxXQUFXSixHQUFpQixDQUNoQyxNQUFNck8sRUFBUW1WLFNBQVNoTyxFQUFJNUksUUFBUThQLEVBQWdCLElBQUssSUFDeEQsSUFBSzVKLE1BQU16RSxJQUFVQSxFQUFRc1UsRUFBWSxDQUNyQ21CLEVBQU8zVSxLQUFLLENBQUMsQ0FBRTRVLFNBQVUxVixLQUN6QixRQUNKLENBQ0osQ0FDQSxVQUFXOUUsSUFBVSxFQUFlOFosUUFBVTlaLEVBQU11VCxXQUFXSixHQUFpQixDQUM1RSxNQUFNck8sRUFBUW1WLFNBQVNqYSxFQUFNcUQsUUFBUThQLEVBQWdCLElBQUssSUFDMUQsSUFBSzVKLE1BQU16RSxJQUFVQSxFQUFRc1UsRUFBWSxDQUNyQ21CLEVBQU8zVSxLQUFLLENBQUNxRyxFQUFLLENBQUV1TyxTQUFVMVYsR0FBU29TLElBQ3ZDLFFBQ0osQ0FDSixDQUNBcUQsRUFBTzNVLEtBQUttUixFQUNoQixDQUNBLE9BQU93RCxDQUNYLENDbkVBLFNBQVNFLEVBQWF4WixHQUNsQixPQUFPQSxFQUFFVCxNQUNiLENDRkEsTUFBTWthLEVBQVcsQ0FBQyxFQUVYLFNBQVNDLEVBQVduRCxFQUFTQyxHQUNoQyxNQUFNbUQsRURSSCxTQUFzQnBELEdBQ3pCLE1BQU1xRCxFQUFRckQsRUFBUTFSLElBQUkyVSxHQUUxQixPQURBSSxFQUFNalYsS0FBSzRSLEVBQVFoWCxRQUNaekIsT0FBTzhiLEVBQU0zQyxLQUFLLElBQzdCLENDSXFCNEMsQ0FBYXRELEdBQ3hCdUQsRUFBVUwsRUFBU0UsR0FDbkJJLEVBQVVELEdDVmIsU0FBMEJ2RCxFQUFTQyxFQUFRc0QsR0FDOUMsR0FBSUEsR0FDSUEsRUFBUXZELFFBQVFoWCxTQUFXZ1gsRUFBUWhYLFFBQ2R1YSxFQUFRdkQsUUFBUXlELE9BQU0sQ0FBQ25CLEVBQVFoVixJQUVwRGdWLElBQVd0QyxFQUFRMVMsTUFDQ2lXLEVBQVF0RCxPQUFPalgsU0FBV2lYLEVBQU9qWCxPQUNqRCxPQUFPLEVBSW5CLE9BQU8sQ0FDWCxDREYrQjBhLENBQWlCMUQsRUFBU0MsRUFBUXNELEdBQzdELEdBQUlDLEVBQ0EsT0FBT0QsRUFBUUksV0FFbkIsTUFDTXJWLEVBQU1xVCxFQURJNUIsRUFBMkJDLEVBQVNDLEdBQ1hBLEVBQU9qWCxRQUMxQzRhLEVBQVcsQ0FDYkMsbUJBQWU1USxFQUNmcVAsWUFBUXJQLEVBQ1IrTSxVQUNBQyxTQUNBMEQsV0FBWXJWLEdBR2hCLE9BREE0VSxFQUFTRSxHQUFZUSxFQUNkdFYsQ0FDWCxDRXpCTyxNQUFNLEVBQWUsV0FFNUIsRUNZTyxJQUFJd1YsRUFBZ0IsR0FFcEIsTUFBTUMsRUFBZSxHQUNyQixJQUFJLEVBQWUsR0FFZkMsRUFBZSxHQUNmQyxFQUFjLEdBQ2xCLE1BQU1DLEVBQVcsQ0FDcEJDLE1BQU8sRUFDUEMsWUFBYSxHQUVWLFNBQVNDLEVBQVdDLEVBQU1oRyxHQUM3QkEsRUFBU3ZOLFlBQWN1VCxDQUMzQixDQUNPLFNBQVNDLElBQ1osS0FBSUwsRUFBU0MsTUFBUSxHQUdyQixPQXFCSixXQUNJLE1BQU1LLEVBQVVULEVBQWEvYSxRQVBqQyxXQUVJLElBQUssTUFBTXliLEtBQVdWLEVBQ2xCVSxFQUFRLE1BQU1BLEVBQVEsR0FFOUIsRUFHSUMsR0FFQVgsRUFBYW5CLE9BQU8sRUFBRzRCLEdBRXZCLElBQUssTUFBTUMsS0FBVyxFQUNsQkEsRUFBUSxNQUFNQSxFQUFRLElBRzFCLElBQUssTUFBTUEsS0FBV1QsRUFDbEJTLEVBQVEsTUFBTUEsRUFBUSxJQUcxQixJQUFLLE1BQU1BLEtBQVdYLEVBQ2xCVyxFQUFRLE1BQU1BLEVBQVEsR0FFOUIsQ0FuQ0lFLFFBSUosV0FpQ0liLEVBQWdCLEdBQ2hCLEVBQWUsR0FDZkUsRUFBZSxHQWpDZixNQUFNWSxFQUFpQlgsRUFDdkJBLEVBQWMsR0FDZCxJQUFLLE1BQU1RLEtBQVdHLEVBQ2xCSCxFQUFRLE1BQU1BLEVBQVEsR0FFOUIsQ0FWSUksRUFISixDQTJDTyxTQUFTQyxFQUFnQnRaLEVBQVN1WixHQUNyQ2hCLEVBQWEzVixLQUFLLENBQUM0VyxFQUFjLENBQUN4WixFQUFTdVosSUFDL0MsQ0FFQSxTQUFTQyxFQUFheFosRUFBU3laLEdBQ3RCelosR0FDRDZCLFFBQVE2WCxLQUFLLGdCQUFpQkQsR0FFZnpaLEVBQVFHLFdBQ2hCd1osWUFBWTNaLEVBQzNCLENBQ08sU0FBUzRaLEVBQVlDLEVBQVU3WixFQUFTeVosR0FDeEJJLEVBQVMxWixXQUNqQjJaLGFBQWE5WixFQUFTNlosRUFDckMsQ0FDTyxTQUFTRSxFQUFZRixFQUFVN1osR0FDbEM2WixFQUFTRyxZQUFZaGEsRUFDekIsQ0FDQSxNQUFNaWEsRUFBc0MsaUJBQWJyZCxVQUF5QkEsU0FBU3NkLGNBQWMsT0FDL0UsU0FBU0MsRUFBZXJCLEdBSXBCLE9BRkFtQixFQUFlN1osVUFBWTBZLEVBRXBCbGMsU0FBU3dkLGVBQWVILEVBQWU3WixVQUNsRCxDQUNPLFNBQVNpYSxFQUFnQlIsRUFBVWYsRUFBTXdCLEVBQVcsRUFBY2IsR0FDckUsTUFBTWMsRUFBVUosRUFBZXJCLEdBQy9CYyxFQUFZQyxFQUFVVSxHQUN0QkQsRUFBU0MsRUFDYixDQU9PLFNBQVNDLEVBQXlCWCxFQUFVZixFQUFNd0IsRUFBVyxHQUNoRUwsRUFBZTdaLFVBQVkwWSxFQUMzQixNQUFNeUIsRUFBVTNkLFNBQVN3ZCxlQUFlSCxFQUFlMVUsYUFDdkRxVSxFQUFZQyxFQUFVVSxHQUN0QkQsRUFBU0MsRUFDYixDQUVPLFNBQVNFLEVBQXlCWixFQUFVZixFQUFNd0IsR0FDckRMLEVBQWU3WixVQUFZMFksRUFDM0IsTUFBTXlCLEVBQVUzZCxTQUFTd2QsZUFBZUgsRUFBZTFVLGFBQ3ZEd1UsRUFBWUYsRUFBVVUsR0FDdEJELEVBQVNDLEVBQ2IsQ0MzSE8sU0FBU0csRUFBd0JDLEVBQWFDLEtBQy9DRCxFQUFZRSxZQUNkLE1BQ00xYyxFQUFTMmMsR0FETUgsRUFBWUksV0FDYUgsR0FFOUMsY0FET0QsRUFBWUksV0FDWjVjLENBQ1gsQ0FDTyxTQUFTMmMsR0FBaUJDLEVBQVlILEdBQ3pDRyxFQUFXQyxTQUFVLEVBQ3JCLE1BQU1DLEVBQWVGLEVBQVdFLGFBTWhDLEdBTElBLElBQ0EzQixFQUFnQjJCLEVBQWMsMkJBQ3ZCRixFQUFXRSxlQUdqQkYsRUFBV0csV0FDWixPQUVKLE1BQU1DLEVBQWlCSixFQUFXSixZQUdsQyxPQUZvQlEsRUFBZTNELFNBQ3ZCNEQsUUFBUUQsRUFBZ0JQLEdBQzdCLEVBQ1gsQ0NaTyxTQUFTUyxHQUFZcmUsR0FDeEIsSUFBS0EsRUFDRCxPQUFPLEVBR1gsT0FEa0JBLEVBQU1zZSxXQUVwQixLQUFLLEVBQVcvRixJQUNoQixLQUFLLEVBQVdELElBQ2hCLEtBQUssRUFBV0UsVUFDWixPQUFPLEVBRWYsT0FBTyxDQUNYLENBRU8sU0FBUytGLEdBQWV2ZSxHQUMzQixNQUFNd2UsRUFBVXhlLEdBQU9zZSxVQUN2QixPQUFPRSxJQUFZLEVBQVcvRixjQUFnQitGLElBQVksRUFBV3pGLFdBQ3pFLENBRU8sU0FBUzBGLEdBQWtCQyxHQUM5QixPQUFPLEdBQVNBLFdBQW1CQSxFQUFROUYsWUFBY1IsRUFBV3VHLFFBQ3hFLENBQ08sU0FBU0MsR0FBVTVlLEdBQ3RCLE9BQU9BLEdBQVMsR0FBV0EsRUFBTTZlLEtBQ3JDLENBQ08sU0FBUyxHQUFXN2UsR0FDdkIsY0FBY0EsSUFBVW9ZLEVBQVd1RyxRQUd2QyxDQUNPLFNBQVMsR0FBUzNlLEdBQ3JCLGNBQWMsSUFBWW9ZLEVBQVcwRyxRQUFvQixPQUFWOWUsQ0FDbkQsQ0FDTyxTQUFTK2UsR0FBUS9lLEdBQ3BCLE9BQU91QixNQUFNd2QsUUFBUS9lLEVBQ3pCLENDN0NPLFNBQVNnZixHQUFhckIsR0FVekIsT0FSQUEsRUFBWTdaLFlBQWM2WixFQUFZN1osYUFBZSxFQUVyRDZaLEVBQVlzQixNQUFRLENBQ2hCQyxNQUFPLENBQ0hELE1BQU8sR0FDUEUsT0FBUSxLQUdUeEIsRUFBWXlCLE9BQVMsQ0FDeEJDLFFBQVMsR0FFakIsQ0NaTyxTQUFTQyxLQUNaLE9BQU9DLEdBQWFDLFlBQVlDLE9BQ3BDLENBQ08sU0FBU0MsR0FBa0JELEdBRTlCLE9BREFFLEdBQWtCRixFQUFRRyxTQUNuQkwsR0FBYUMsWUFBWUMsUUFBVUEsQ0FDOUMsQ0NQTyxTQUFTSSxHQUEwQkQsR0FDdEMsTUFBTUUsRUFBWUYsRUFBUVgsTUFDMUIsT0FBSWEsR0FBYUEsRUFBVUMsUUFBVUQsRUFBVUMsT0FDcENELEVBQVVDLE9BRWpCSCxFQUFRSSxjQUNESCxHQUEwQkQsRUFBUUksb0JBRDdDLENBR0osQ0FDTyxTQUFTQyxHQUFvQlIsR0FFaEMsSUFBSVMsRUFBWVQsRUFDaEIsS0FBT1MsRUFBVXRDLGVBQWlCVyxHQUFlMkIsRUFBVTFILFlBQ3ZEMEgsRUFBWUEsRUFBVXRDLGFBRTFCLE1BQ01rQyxFQURVSSxFQUFVTixRQUNBWCxNQUMxQixPQUFLYSxHQUdFQSxFQUFVQyxRQUZORyxDQUdmLENDcEJBLFNBQVNDLE1BQWNDLEdBQ25CLE9BQU9BLENBQ1gsQ0FDTyxTQUFTQyxHQUFtQkMsR0FDL0IsTUFBTUMsRUFBU2hCLEdBQWFDLFlBRzVCLE9BRkFlLEVBQU9wQixPQUFPb0IsRUFBT0MsYUFBZUYsSUFDbENDLEVBQU9DLFlBQ0ZGLEVBQU9ILEdBQ2xCLENBRU8sU0FBU00sR0FBZ0JILEdBQzVCLE1BQU1DLEVBQVNoQixHQUFhQyxZQUN0QmdCLEVBQWNELEVBQU9DLFlBUXJCRSxFQVBjVCxHQUFvQk0sRUFBT0ksYUFDZmYsUUFDRlgsTUFFRUMsTUFDQ0MsT0FFSnFCLEdBQzdCLElBQUlJLEVBQWEsR0FDakJGLEdBQVUsWUFBcUJOLEdBRTNCLE9BREFRLEVBQWFSLEVBQ05BLENBQ1gsSUFNQSxPQUZBRyxFQUFPcEIsT0FBT29CLEVBQU9DLGFBQWVGLElBQ2xDQyxFQUFPQyxZQUNGRixHQUxVLFlBQTBCTyxHQUN2QyxPQUFPRCxDQUNYLEdBSUosQ0M1Qk8sU0FBU0UsR0FBVWxCLEdBQ3RCRCxHQUFrQkMsR0FDbEIsTUFBTVcsRUFBU2hCLEdBQWFDLFlBQzVCZSxFQUFPUSxTQUFTQyxRQUFVQyxHQUMxQlYsRUFBT1EsU0FBU0csY0FBZ0JiLEdBQ2hDRSxFQUFPWSxRQUFVLEdBQ2pCLE1BQU1sQyxFQUFRc0IsRUFBT3RCLE1BQVEsR0FDdkJFLEVBQVNvQixFQUFPcEIsT0FBUyxHQUMvQm9CLEVBQU9DLFlBQWMsR0FDSFosRUFBUVgsTUFBUVcsRUFBUVgsT0FBUyxDQUFDLEdBQzFDQyxNQUFRLENBQUVELFFBQU9FLFNBQy9CLENBS08sU0FBU2lDLEdBQWNDLEdBQzFCLE1BQU1kLEVBQVNoQixHQUFhQyxZQVE1QixPQU5BZSxFQUFPWSxRQUFVRSxFQUNqQmQsRUFBT3RCLE1BQVEsR0FDZnNCLEVBQU9wQixPQUFTLEdBQ2hCb0IsRUFBT0MsWUFBYyxFQUNyQkQsRUFBT1EsU0FBU0MsUUFBVU0sR0FDMUJmLEVBQU9RLFNBQVNHLGNBQWdCVCxHQUN6QkYsQ0FDWCxDQUNPLFNBQVNnQixHQUFlQyxFQUFZYixFQUFhVSxHQUNwREQsR0FBY0MsR0FDQzlCLEdBQWFDLFlBQ3JCbUIsWUFBY0EsRUFDckJqQixHQUFrQjhCLEVBQ3RCLENBQ08sTUFBTUMsSUN0Q04sU0FBU0MsR0FBY3pDLEdBQzFCLE1BQU0zQixFQUFXMkIsRUFBTTNCLFNBQ3ZCLElBQUtBLEVBQ0QsT0FBTzJCLEVBQU0wQyxhQUVqQixNQUFPM2hCLEdEb0NKLFNBQTBCc2QsR0FDN0IsTUFBT3RkLEdBQVNzZCxFQUFTbUUsS0FDbEJHLEdBQWN0RSxFQUFTdGQsR0FDOUIsTUFBTyxDQUFDQSxFQUFPNGhCLEVBQ25CLENDeENvQkMsQ0FBaUJ2RSxHQUNqQyxPQUFPdGQsQ0FDWCxDQ0pPLFNBQVNzaEIsS0FDWixNQUFNZixFQUFTaEIsR0FBYUMsWUFFdEJzQyxFQURVdkIsRUFBT1ksUUFDQ1osRUFBT3RCLE1BQU16ZSxRQUVyQyxPQURBK2YsRUFBT3RCLE1BQU1yWixLQUFLa2MsR0FDWEEsRUFBUUgsWUFDbkIsQ0FDTyxTQUFTVixHQUFjVSxHQUMxQixNQUFNcEIsRUFBU2hCLEdBQWFDLFlBQ3RCSSxFQUFVbUMsS0FDaEIsSUFBS25DLElBQVlBLEVBQVFYLE1BQU8sQ0FDNUIsTUFBTStDLEVBQU0sd0VBRVosTUFEQW5kLFFBQVEyRixNQUFNd1gsRUFBSyxDQUFFekIsU0FBUVgsWUFDdkIsSUFBSTdWLE1BQU1pWSxFQUNwQixDQUNBLE1BQU05QyxFQUFRVSxFQUFRWCxNQUFNQyxNQUM1QnFCLEVBQU90QixNQUFRQyxFQUFNRCxNQUVyQixJQUFJZ0QsRUFBWU4sRUFLaEIsVUFKVyxJQUFtQnZKLEVBQVd1RyxXQUNyQ3NELEVBQVlOLFlBR0wsSUFBZ0J2SixFQUFXdUcsU0FBVSxDQUM1QyxNQUFNdUQsRUFBV0QsRUFDakJBLEVBQVksWUFBeUI3QixHQUVqQyxPQURlOEIsS0FBWTlCLEVBRS9CLEVBQ0E2QixFQUFVQyxTQUFXQSxDQUN6QixDQUNBLE1BQU10YyxFQUFPLENBQ1RpSyxJQUFLLFdBQ0QsT0FBTzZSLEdBQWM5YixFQUN6QixFQUNBK2IsYUFBY00sR0FHbEIsT0FEQTFCLEVBQU90QixNQUFNclosS0FBS0EsR0FDWHFjLENBQ1gsQ0MxQ08sU0FBU0UsR0FBY0MsR0FDMUIsTUFBTUMsRUFBUyxJQUFJQyxHQTZCbkIsT0FEQUQsRUFBT0UsY0EzQllqRixJQUNmLE1BQU1rRixFQUFhLEdBQ2IvSyxFQUFTLEdBQ1RnTCxFQUFXLENBQUN4aEIsRUFBRzZELEtBQ2pCMGQsRUFBVzFkLElBQVMsRUFDcEIyUyxFQUFPM1MsR0FBUzdELEVBRWhCLEdBRHFCdWhCLEVBQVdoaUIsU0FBVzRoQixFQUFTNWhCLE9BQ3BELENBR0EsSUFBSyxNQUFNbUYsS0FBUTZjLEVBQ2YsSUFBSzdjLEVBQ0QsT0FJUjJYLEVBQVM3RixFQUFRaUwsRUFQakIsQ0FPOEIsRUFFNUJDLEVBQVMsSUFBSVAsR0FFYk0sRUFEV0MsRUFBT25VLFFBQ01vSyxXQUFVM1gsR0FBS3doQixFQUFTeGhCLEVBQUcsS0FDbkQyaEIsRUFBZ0JELEVBQU83YyxLQUFJLENBQUM0WSxFQUFTNVosSUFDaEM0WixFQUFROUYsV0FBVTNYLEdBQUt3aEIsRUFBU3hoQixFQUFHNkQsRUFBUSxPQUd0RCxPQURBNGQsRUFBYUUsY0FBZ0JBLEVBQ3RCRixDQUFZLEVBR2hCTCxDQUNYLENDekJPLFNBQVNRLEdBQWdCbkUsRUFBU3BCLEVBQVV3RixHQUMvQyxNQUFNQyxFQUFlVCxHQUFRVSxnQkFDN0JWLEdBQVFVLGdCQUFnQkMsS0FBS0YsRUFBYS9pQixNQUFRLEdBQ2xELE1BQU0waUIsRUFBZSxXQUNqQkEsRUFBYVEsYUFDakIsRUFjQSxPQWJBUixFQUFhcEYsU0FBV0EsRUFDeEJvRixFQUFhRSxjQUFnQixHQUU3QkYsRUFBYVEsWUFBYyxXQUN2QixPQTBCUixTQUFxQlIsRUFBY0ksRUFBYXhGLElBMUNoRCxTQUE0QndGLEVBQWF4RixHQUNyQyxNQUFNeFksRUFBUWdlLEVBQVlLLFdBQVVDLEdBQU9BLEVBQUk5RixXQUFhQSxLQUM3QyxJQUFYeFksR0FDQWdlLEVBQVkxSSxPQUFPdFYsRUFBTyxFQUVsQyxDQXNDSXVlLENBQW1CUCxFQUFheEYsR0FDaEMsTUFBTWdHLEVBQVNoQixHQUFRVSxnQkFDdkJWLEdBQVFVLGdCQUFnQkMsS0FBS0ssRUFBT3RqQixNQUFRLEdBRTVDMGlCLEVBQWFRLFlBQWMsSUFBTVIsRUFFakMsTUFBTUUsRUFBZ0JGLEVBQWFFLGNBQ25DLElBQUssTUFBTVEsS0FBT1IsRUFDZFEsRUFBSUYsY0FFUixPQUFPUixDQUNYLENBdENlUSxDQUFZUixFQUFjSSxFQUFheEYsRUFDbEQsRUFDQW9GLEVBQWFhLElBQU9ILElBQ2hCVixFQUFhRSxjQUFjaGQsS0FBS3dkLEdBQ3pCVixHQUVYQSxFQUFhTyxLQUFRampCLElBQ2pCc2QsRUFBU3RkLEVBQU8waUIsRUFBYSxFQUUxQkEsQ0FDWCxDQUNPLFNBQVNjLEdBQWdCeGpCLEVBQU95akIsRUFBU0MsR0FDNUMsTUFBTUMsRUFBZSxJQUFJRixHQUNuQkcsRUFBY0QsRUFBYW5WLFFBQzNCeVUsRUFBUVksSUFDVixHQUFJRixFQUFhbmpCLE9BQ2IsT0FBT2dqQixHQUFnQkssRUFBVUYsRUFBY0QsR0FFbkRBLEVBQVdHLEVBQVMsRUFFeEIsSUFBSTdDLEVBQVVpQyxFQUNkLE1BRU1hLEVBQWlCRixFQUFZNWpCLEVBRGpCLENBQUUrakIsV0FEQTlpQixHQUFNK2YsRUFBVS9mLEVBQ0pnaUIsU0FFaENqQyxFQUFROEMsRUFDWixDQ3ZDTyxNQUFNeEIsR0FDVCxXQUFBMEIsQ0FBWWhrQixFQUVaaWtCLEdBQ0lDLEtBQUtELGVBQWlCQSxFQUV0QkMsS0FBS1QsUUFBVSxHQUNmUyxLQUFLQyxXQUFZLEVBRWpCRCxLQUFLcEIsWUFBYyxHQUNuQm9CLEtBQUtwVSxJQUFNb1UsS0FBS2pCLEtBQUttQixLQUFLRixNQUV0QkcsVUFBVTdqQixPQUFTLElBQ25CMGpCLEtBQUtsa0IsTUFBUUEsRUFFckIsQ0FDQSxTQUFBNFksQ0FBVTBFLEdBQ04sTUFBTW9GLEVBQWVHLEdBQWdCcUIsRUFBTTVHLEVBQVU0RyxLQUFLcEIsYUFFcERQLEVBQWdCMkIsS0FBSzNCLGNBQzNCLEdBQUlBLEVBQWUsQ0FFZixHQUFJMkIsS0FBS1QsUUFBUWpqQixPQUFRLENBQ3JCLE1BQU04akIsRUFBY2hILEVBQ3BCQSxFQUFZdGQsSUFDUndqQixHQUFnQnhqQixFQUFPa2tCLEtBQUtULFNBQVNjLEdBQWFELEVBQVlDLEVBQVc3QixJQUFjLENBRS9GLENBQ0EsT0FBT0gsRUFBY2pGLEVBQ3pCLENBS0EsT0FKQTRHLEtBQUtwQixZQUFZbGQsS0FBSzhjLEdBQ2xCd0IsS0FBS0QsZ0JBQ0xDLEtBQUtELGVBQWV2QixHQUVqQkEsQ0FDWCxDQUNBLElBQUFPLENBQUtqakIsR0FDRGtrQixLQUFLbGtCLE1BQVFBLEVBQ2Jra0IsS0FBS00sTUFDVCxDQUNBLElBQUFBLEdBQ0ksTUFBTXhrQixFQUFRa2tCLEtBQUtsa0IsTUFHYnlrQixFQUFPUCxLQUFLcEIsWUFFbEIsSUFBSyxNQUFNTSxLQUFPcUIsRUFDZHJCLEVBQUk5RixTQUFTdGQsRUFBT29qQixFQUU1QixDQUNBLFNBQUFzQixHQUNJLE9BQU8sSUFBSWptQixTQUFRQyxJQUNmd2xCLEtBQUt0TCxXQUFVLENBQUMzWCxFQUFHeWhCLEtBQ2ZBLEVBQWFRLGNBQ2J4a0IsRUFBSXVDLEVBQUUsR0FDUixHQUVWLENBRUEsVUFBQTBqQixDQUFXckgsR0FDUCxNQUFNb0YsRUFBZXdCLEtBQUt0TCxXQUFVLENBQUMzWCxFQUFHMmpCLEtBQ3BDLE1BQU1DLEVBQWFELEdBQVkxQixZQUMzQjJCLEVBQ0FBLElBR0FsbUIsWUFBVyxJQUFNK2pCLEVBQWFRLGVBQWUsR0FFakQ1RixFQUFTcmMsRUFBRSxJQUVmLE9BQU9pakIsSUFDWCxDQUNBLElBQUFZLElBQVFDLEdBQ0osTUFBTTNFLEVBQU8sR0FDVCxVQUFXOEQsTUFDWDlELEVBQUt4YSxLQUFLc2UsS0FBS2xrQixPQUVuQixNQUFNMGUsRUFBVSxJQUFJNEQsTUFBV2xDLEdBSS9CLE9BSEExQixFQUFRc0csV0FBV0QsR0FDbkJyRyxFQUFRNkQsY0FBaUJ0aEIsR0FBTWlqQixLQUFLdEwsVUFBVTNYLEdBQzlDeWQsRUFBUXVFLEtBQU9oaUIsR0FBS2lqQixLQUFLakIsS0FBS2hpQixHQUN2QnlkLENBQ1gsQ0FDQSxVQUFBc0csQ0FBV0QsR0FDUGIsS0FBS1QsUUFBVXNCLENBQ25CLENBQ0EsVUFBTzFYLENBQUkrUyxHQVdQLE9BQU8rQixHQVZVL0IsRUFBS3RhLEtBQUltZixJQUN0QixHQUFJeEcsR0FBa0J3RyxHQUNsQixPQUFPQSxFQU1YLE9BSlUsSUFBSTNDLEdBQVEyQyxHQUFLdkMsSUFDdkJBLEVBQWFPLEtBQUtnQyxHQUNYdkMsSUFFSCxJQUdoQixFQUVKSixHQUFRVSxnQkFBa0IsSUFBSVYsR0FBUSxHQXNCL0IsU0FBUzRDLEdBQWN4RyxHQUMxQmxNLE9BQU9DLGVBQWVpTSxFQUFTLFFBQVMsQ0FFcEMsR0FBQTVPLENBQUk5UCxHQUNBMGUsRUFBUXlHLE9BQVNubEIsRUFDakIwZSxFQUFROEYsTUFDWixFQUVBM1UsSUFBRyxJQUNRNk8sRUFBUXlHLFFBRzNCLENDdElPLE1BQU1DLEdBQWEsSUFBSTlDLFFBQVE3WCxHQUFXLFNBQW1CaVksR0FDM0RwRCxNQUNEb0QsRUFBYU8sTUFFckIsSUNKYTFELEdBQWUsQ0FDeEJDLFlBQWEsQ0FDVFAsTUFBTyxHQUNQakcsUUFBU0MsS0FBS0MsTUFDZDZILFNBQVUsQ0FDTkMsUUFBU0MsR0FDVEMsY0FBZWIsS0FHdkIrRSxXQUFVLElDVlAsU0FBU0MsR0FBeUIxSCxFQUFha0csRUFDdERqRyxHQUVJLE1BQ00wSCxFQURXM0gsRUFBWW5ELFNBQ00rSyxnQkFBZ0IxQixFQUFVbEcsRUFBYUMsR0FFMUUsT0FBMEIsSUFBdEIwSCxHQUdKRSxHQUFrQjNCLEVBQVVsRyxFQUFhQyxFQUFjMEgsR0FGNUNBLENBSWYsQ0NaTyxTQUFTRyxHQUFzQnpsQixFQUFPeWYsRUFBUzlCLEVBQWErSCxFQUFVNUksR0FDekUsTUFBTTRCLEVBQVVlLEVBQVFHLFFBQ3hCbEIsRUFBUWlILE9BQVMsRUFDakJoSSxFQUFZM2EsUUFBVTJhLEVBQVkzYSxTQUFXMGlCLEVBQzdDL0YsR0FBa0JoQyxHQUNsQkEsRUFBWW5ELFNBQVNvTCxZQUFZNWxCLEVBQU8yZCxFQUFhOEIsRUFBUzNDLEVBQWM0SSxHQUM1RUcsS0FDQWxJLEVBQVkzZCxNQUFRQSxTQUNiMGUsRUFBUWlILE1BQ25CLENDVE8sU0FBU0csR0FBYzlsQixHQUMxQixPQUFRQSxHQUNKLFVBQUt5SyxFQUNMLEtBQUssRUFDTCxLQUFLLEtBQ0QsT0FBTzBOLEVBRWYsT0FBT25ZLENBQ1gsQ0NQTyxTQUFTK2xCLEdBQWlCdlcsRUFBTXhQLEVBQU9nRCxFQUFTZ2pCLEdBQ25ELE9BQVFBLEdBQ0osSUFBSyxZQUVELFlBREEsRUFBYXBnQixLQUFLLENBQUNxZ0IsR0FBVyxDQUFDampCLEtBRW5DLElBQUssYUFFRCxZQURBLEVBQWE0QyxLQUFLLENBQUNzZ0IsR0FBWSxDQUFDbGpCLEtBRXBDLElBQUssUUFBUyxDQUNWLE1BQU1takIsRUFBUTNXLEVBQUt2RixNQUFNLEtBRXpCLFlBREEsRUFBYXJFLEtBQUssQ0FBQ3dnQixHQUFZLENBQUNwakIsRUFBU21qQixFQUFPbm1CLElBRXBELENBQ0EsSUFBSyxRQUVELFlBU1osU0FBNkJ3UCxFQUFNeFAsRUFBT2dELEdBQ3RDLE1BQU1takIsRUFBUTNXLEVBQUt2RixNQUFNLEtBR3pCLEdBRkFrYyxFQUFNM1gsUUFFRnhPLEVBQU8sQ0FDUCxJQUFLLE1BQU13UCxLQUFRMlcsRUFDZixFQUFhdmdCLEtBQUssQ0FBQ3lnQixHQUFjLENBQUNyakIsRUFBU3dNLEtBRS9DLE1BQ0osQ0FFQSxJQUFLLE1BQU1BLEtBQVEyVyxFQUNmLEVBQWF2Z0IsS0FBSyxDQUFDMGdCLEdBQWlCLENBQUN0akIsRUFBU3dNLElBRXRELENBeEJZK1csQ0FBb0IvVyxFQUFNeFAsRUFBT2dELEdBR3pDLE1BQU0sSUFBSStHLE1BQU0sZ0NBQWdDaWMsTUFBZ0J4VyxJQUNwRSxDQUNBLFNBQVM0VyxHQUFXcGpCLEVBQVNtakIsRUFBT25tQixHQUNoQyxNQUFNd21CLEVBQVlMLEVBQU0sR0FDeEJuakIsRUFBUTNCLE1BQU1tbEIsR0FBYXhtQixFQUMzQmdELEVBQVEzQixNQUFNb2xCLFlBQVlELEVBQVd4bUIsRUFDekMsQ0FnQkEsU0FBU3FtQixHQUFhcmpCLEVBQVN3TSxHQUMzQnhNLEVBQVF4QixVQUFVK2hCLElBQUkvVCxFQUMxQixDQUNBLFNBQVM4VyxHQUFnQnRqQixFQUFTd00sR0FDOUJ4TSxFQUFReEIsVUFBVWtsQixPQUFPbFgsRUFDN0IsQ0FDQSxTQUFTMFcsR0FBV2xqQixHQUNoQkEsRUFBUTJqQixRQUNaLENBQ0EsU0FBU1YsR0FBVWpqQixHQUNmQSxFQUFRNEksT0FDWixDQzNDQSxTQUFTZ2IsR0FBeUI1akIsRUFBU3dNLEVBQU14UCxHQUNoQixpQkFBbEJnRCxFQUFRd00sS0FDZnhNLEVBQVF3TSxHQUFRLENBQUMsR0FHckIsSUFBSyxNQUFNdkQsS0FBT2pNLEVBQU8sQ0FDckIsTUFBTStJLEVBQVcvSSxFQUFNaU0sR0FDdkIsRUFBYXJHLEtBQUssQ0FBQ2loQixHQUFnQixDQUFDN2pCLEVBQVN3TSxFQUFNdkQsRUFBS2xELElBQzVELENBQ0EsR0FBSS9GLEVBQVF3TSxHQUFNaVgsWUFDZCxJQUFLLE1BQU14YSxLQUFPak0sRUFBTyxDQUNyQixNQUFNK0ksRUFBVy9JLEVBQU1pTSxHQUN2QixFQUFhckcsS0FBSyxDQUFDa2hCLEdBQWtCLENBQUM5akIsRUFBU3dNLEVBQU12RCxFQUFLbEQsSUFDOUQsQ0FFUixDQUNPLFNBQVNnZSxHQUF1Qi9qQixFQUFTd00sRUFBTTJWLEdBQ2xEbmlCLEVBQVFna0IsYUFBYXhYLEVBQU0sR0FDL0IsQ0FDTyxTQUFTeVgsR0FBeUJqa0IsRUFBU3dNLEVBQU14UCxHQUNwRCxHQUFJLEdBQVNBLEdBQ1QsT0FBTzRtQixHQUF5QjVqQixFQUFTd00sRUFBTXhQLEdBRW5Ea25CLEdBQW1CbGtCLEVBQVN3TSxFQUFNeFAsRUFDdEMsQ0FFTyxTQUFTbW5CLEdBQW9CbmtCLEVBQVN3TSxFQUFNeFAsR0FFM0NnRCxFQUFRd00sS0FEUnhQLENBTVIsQ0FDTyxTQUFTa25CLEdBQW1CbGtCLEVBQVN3TSxFQUFNeFAsR0FHOUNnRCxFQUFRd00sR0FBUXhQLE9BQ0Z5SyxJQUFWekssSUFBaUMsSUFBVkEsR0FBNkIsT0FBVkEsRUFJOUNnRCxFQUFRZ2tCLGFBQWF4WCxFQUFNeFAsR0FIdkJnRCxFQUFRb2tCLGdCQUFnQjVYLEVBSWhDLENBQ0EsU0FBU3NYLEdBQWlCOWpCLEVBQVN3TSxFQUFNdkQsRUFBS2pNLEdBRTFDZ0QsRUFBUXdNLEdBQU1pWCxZQUFZeGEsRUFBS2pNLEVBQ25DLENBRUEsU0FBUzZtQixHQUFlN2pCLEVBQVN3TSxFQUFNdkQsRUFBS2pNLEdBRXhDZ0QsRUFBUXdNLEdBQU12RCxHQUFPak0sQ0FDekIsQ0M3RE8sU0FBU3FuQixHQUFzQkMsRUFBWUMsR0FDOUMsTUFBTUMsRUFJVixTQUE2Qi9ILEVBQVM4SCxFQUFVRSxFQUFTLElBQ3JELE1BQU0vSSxFQUFVZSxFQUFRRyxRQUN4QjZILEVBQU83aEIsS0FBSyxDQUNSNlosVUFDQTNiLFlBQWE0YSxFQUFRNWEsWUFDckJ5akIsYUFFSixNQUFNRyxFQUFZSCxFQUFTOU4sU0FDM0IsSUFBSyxJQUFJM1UsRUFBUTRpQixFQUFVbG5CLE9BQVMsRUFBR3NFLEdBQVMsSUFBS0EsRUFBTyxDQUN4RCxNQUFNOFUsRUFBUThOLEVBQVU1aUIsR0FDbEI2aUIsRUFBVy9OLEVBQU1nRyxRQUN2QjZILEVBQU83aEIsS0FBSyxDQUNSNlosUUFBUzdGLEVBQ1Q5VixZQUFhNmpCLEVBQVM3akIsWUFDdEJ5akIsWUFFUixDQUNBLE9BQU9FLENBQ1gsQ0F0QjZCRyxDQUFvQk4sRUFBWUMsR0FDekQsT0FBT0MsQ0FDWCxDQ2FBLFNBQVNLLEdBQWE1bUIsR0FDbEIsT0FBT0EsRUFBRXdlLE9BQ2IsQ0NoQk8sU0FBU3FJLEdBQVVuVixFQUFLb1YsR0FFM0IsT0FBT0MsR0FBY3JWLEVBQUtvVixFQUM5QixDQUNBLFNBQVNDLEdBQWNyVixFQUV2Qm9WLEdBRUksR0FBWSxPQUFScFYsVUFBdUJBLElBQVF5RixFQUFXMEcsT0FDMUMsT0FBT25NLEVBUVgsR0FBSW9WLEVBQVcsRUFDWCxPQUFPcFYsRUFHWCxHQUFJQSxhQUFlc0csS0FDZixPQUFPLElBQUlBLEtBQUt0RyxHQUVwQixHQUFJQSxhQUFlZ0IsT0FDZixPQUFPLElBQUlBLE9BQU9oQixHQUd0QixNQUFNc1YsRUFBUWxKLEdBQVFwTSxHQUFPLEdBQUtILE9BQU8wVixPQUFPMVYsT0FBTzJWLGVBQWV4VixJQUV0RSxHQUFJb00sR0FBUXBNLEdBQ1IsSUFBSyxJQUFJelQsRUFBSSxFQUFHQSxFQUFJeVQsRUFBSW5TLE9BQVF0QixJQUM1QitvQixFQUFNL29CLEdBQUs4b0IsR0FBY3JWLEVBQUl6VCxHQUFJNm9CLEVBQVcsUUFJaEQsSUFBSyxNQUFNOWIsS0FBTzBHLEVBQ1ZILE9BQU9LLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUsxRyxLQUMxQ2djLEVBQU1oYyxHQUFPK2IsR0FBY3JWLEVBQUkxRyxHQUFNOGIsRUFBVyxJQUk1RCxPQUFPRSxDQUNYLENBQ08sU0FBU0csR0FBVUMsRUFBTUMsRUFBTVAsR0FDbEMsT0FBT1EsR0FBWUYsRUFBTUMsRUFBTVAsRUFDbkMsQ0FDQSxTQUFTUSxHQUFZRixFQUFNQyxFQUUzQlAsR0FFSSxRQURvQk0sSUFBU0MsSUEyRFJFLEVBMURjSCxFQTBEVEksRUExRGVILEdBMkRwQixHQUFXRSxLQUFRLEdBQVdDLElBQzVCRCxFQUFJeG5CLGFBQWV5bkIsRUFBSXpuQixlQXZEMUMrbUIsRUFBVyxVQUdKTSxJQUFTalEsRUFBVzBHLGVBQWlCd0osSUFBU2xRLEVBQVcwRyxTQUU1RHVKLGFBQWdCcFAsTUFBUXFQLGFBQWdCclAsS0FDakNvUCxFQUFLSyxZQUFjSixFQUFLSSxVQUsvQjNKLEdBQVFzSixJQUFTdEosR0FBUXVKLEdBK0JyQyxTQUEwQkQsRUFBTUMsRUFBTVAsR0FDbEMsR0FBSU0sRUFBSzduQixTQUFXOG5CLEVBQUs5bkIsT0FDckIsT0FBTyxFQUVYLElBQUssSUFBSXRCLEVBQUksRUFBR0EsRUFBSW1wQixFQUFLN25CLE9BQVF0QixJQUM3QixJQUFLcXBCLEdBQVlGLEVBQUtucEIsR0FBSW9wQixFQUFLcHBCLEdBQUk2b0IsRUFBVyxHQUMxQyxPQUFPLEVBR2YsT0FBTyxDQUNYLENBeENtQlksQ0FBaUJOLEVBQU1DLEVBQU1QLEVBQVcsSUFFMUNoSixHQUFRc0osS0FBU3RKLEdBQVF1SixJQVMxQyxTQUEyQkQsRUFBTUMsRUFFakNQLEdBQ0ksTUFBTWEsRUFBUXBXLE9BQU9xVyxLQUFLUixHQUNwQlMsRUFBUXRXLE9BQU9xVyxLQUFLUCxHQUMxQixHQUFxQixJQUFqQk0sRUFBTXBvQixRQUFpQyxJQUFqQnNvQixFQUFNdG9CLE9BQzVCLE9BQU8sRUFFWCxHQUFJb29CLEVBQU1wb0IsU0FBV3NvQixFQUFNdG9CLE9BQ3ZCLE9BQU8sRUFFWCxJQUFLLE1BQU15TCxLQUFPMmMsRUFBTyxDQUVyQixJQURpQkUsRUFBTXJuQixTQUFTd0ssS0FDZHNjLEdBQVlGLEVBQUtwYyxHQUFNcWMsRUFBS3JjLEdBQU04YixFQUFXLEdBQzNELE9BQU8sQ0FFZixDQUNBLE9BQU8sQ0FDWCxDQXRCZWdCLENBQWtCVixFQUFNQyxFQUFNUCxFQUFXLEtBa0N4RCxJQUF5QlMsRUFBS0MsQ0EvQjlCLENDOUVPLFNBQVNPLEdBQWlCQyxFQUFPQyxHQUVwQyxNQUFNQyxFQUFNRixFQUFNem9CLE9BQ2xCLElBQUssSUFBSXNFLEVBQVEsRUFBR0EsRUFBUXFrQixJQUFPcmtCLEVBQU8sQ0FDdEMsTUFBTThOLEVBQU9xVyxFQUFNbmtCLEdBQ2Jza0IsRUFBV0YsRUFBZXBrQixHQUNoQyxHQUFJaWEsR0FBUW5NLElBQVNtTSxHQUFRcUssR0FBVyxDQUNwQyxHQUFJeFcsSUFBU3dXLEVBQ1QsU0FFSixPQUFPLENBQ1gsQ0FDQSxVQUFXLElBQVdoUixFQUFXdUcsaUJBQW1CLElBQWV2RyxFQUFXdUcsU0FHOUUsVUFBVyxJQUFXdkcsRUFBVzBHLFFBWWpDLEdBQUlsTSxJQUFTd1csRUFHYixPQUFPLFNBZEgsVUFBVyxJQUFxQmhSLEVBQVcwRyxPQUFRLENBQy9DLE1BQU11SyxFQUFZN1csT0FBTzhXLFFBQVExVyxHQUNqQyxJQUFLLE1BQU0yVyxLQUFXRixFQUFXLENBRTdCLElBRGVHLEdBQWtCRCxFQUFTSCxHQUV0QyxPQUFPLEdBRWYsQ0FDSixDQU9SLENBQ0EsT0FBTyxDQUNYLENBQ0EsU0FBU0ksSUFBbUJoYSxFQUFNeFAsR0FBUW9wQixHQUN0QyxNQUFNSyxFQUFZTCxFQUFTNVosR0FDM0IsY0FBVyxJQUFZNEksRUFBV3VHLGlCQUFtQixJQUFnQnZHLEVBQVd1RyxVQUd6RThLLElBQWN6cEIsQ0FDekIsQ0N2Q08sU0FBUzBwQixHQUFnQmpTLEdBQzVCLE9BQU9BLEVBQU8zUixJQUFJNmpCLEdBQ3RCLENBRU8sU0FBU0EsR0FBZ0IzcEIsRUFBTytuQixHQUNuQyxNQUFNelAsRUFBTXRZLEVBQ05zZSxFQUFZdGUsR0FBT3NlLFVBQ3pCLEdBQUlBLEVBQ0EsT0FBUUEsR0FDSixLQUFLLEVBQVd6RixPQUNoQixLQUFLLEVBQVdELFVBQ2hCLEtBQUssRUFBV0csWUFDWixPQUNKLEtBQUssRUFBV1IsSUFDaEIsS0FBSyxFQUFXRCxJQUNoQixLQUFLLEVBQVdFLFVBQ1osT0FBT2tSLEdBQWdCcFIsRUFBSWIsUUFHdkMsT0FBSXNILEdBQVEvZSxHQUNEMHBCLEdBQWdCcFIsR0FFcEJ3UCxHQUFVOW5CLEVBQU8rbkIsRUFDNUIsQ0NBQSxTQUFTNkIsR0FBYzNvQixHQUNuQixPQUFPMG9CLEdBQWdCMW9CLEVBQUc0b0IsR0FDOUIsQ0FDQSxTQUFTQyxHQUFXYixHQUNoQixPQUFPVSxHQUFnQlYsRUFBT2MsR0FDbEMsQ0M3Qk8sU0FBU0MsR0FBZXhSLEVBQVdvSCxFQUFTcUssR0FDL0MsTUFBTUMsRUFBYyxDQUNoQjFSLFlBQ0FvSCxVQUNBcUssY0FDQTNDLGdCQUFZN2MsR0FhaEIsT0FYZW1WLEVBQVFSLE9BQ2hCQyxRQUFVLEdBRVpPLEVBQVFYLFFBQ1RXLEVBQVFYLE1BQVEsQ0FDWkMsTUFBTyxDQUNIRCxNQUFPLEdBQ1BFLE9BQVEsTUFJYitLLENBQ1gsQ0FFTyxTQUFTQyxHQUFxQjNSLEVBQ3JDaUgsRUFBUzZILEVBQVkyQyxHQUNqQnhLLEVBQVE2SCxXQUFhQSxFQUNyQixNQUFNMkIsRUFBUXpRLEVBQVV5USxNQUl4QixPQUhJQSxJQUNBeEosRUFBUTJLLFlEeEJULFNBQXNCM0ssRUFBU3dKLEVBQU9vQixHQUN6QyxNQUFNN1IsRUFBWWlILEVBQVFqSCxVQUMxQixHQUFJQSxFQUFVOEYsWUFBYyxFQUFXdkYsWUFBdkMsQ0FHQSxPQUFRUCxFQUFVOFIsV0FDZCxLQUFLQyxHQUFZQyxVQUNiLE9BQU8vSyxFQUFRMkssWUFBYyxDQUN6QkssT0FBUXhCLEVBQ1JvQixhQUVSLEtBQUtFLEdBQVlHLFFBQ2IsT0FBT2pMLEVBQVEySyxZQUFjLENBQ3pCSyxPQUFReEIsRUFBTW5qQixJQUFJOGpCLElBQ2xCUyxhQUdaLE9BQU81SyxFQUFRMkssWUFBYyxDQUN6QkssT0FBUXhCLEVBQU1uakIsSUFBSWdrQixJQUNsQk8sWUFmSixDQWlCSixDQ0c4Qk0sQ0FBYWxMLEVBQVN3SixFQUFPZ0IsSUFFaER4SyxDQUNYLENDOUJPLFNBQVNtTCxHQUFpQm5MLEVBQVNMLEdBQ3RDLE1BQU15TCxFQUFZekwsRUFBT3lMLFVBQ3pCLEdBQUlBLEVBQ0EsSUFBSyxNQUFNdEQsS0FBWXNELEVBQ25CLElBQUssSUFBSS9sQixFQUFReWlCLEVBQVM5TixTQUFTalosT0FBUyxFQUFHc0UsR0FBUyxJQUFLQSxFQUFPLENBQ2xEeWlCLEVBQVM5TixTQUFTM1UsR0FDdEI4YSxRQUFRUixTQUFXQSxHQUN6Qm1JLEVBQVM5TixTQUFTVyxPQUFPdFYsRUFBTyxFQUV4QyxDQUlSMmEsRUFBUUcsUUFBUWtMLFNBQVM3SCxPQUN6QnhELEVBQVFHLFFBQVE5YixZQUFjLENBQ2xDLENDYk8sU0FBU2luQixHQUFnQnJELEVBQVc5SixHQUN2QyxJQUFLLE1BQU1oRSxLQUFTOE4sRUFBVyxDQUUzQixNQUFNc0QsRUFBWXBSLEVBQU1vUixVQUN4QixHQUFJQSxFQUFXLENBRVhELEdBQWdCQyxFQUFXcE4sR0FDM0IsUUFDSixDQUNBLE1BQU1xTixFQUFhclIsRUFBTTVaLE1BQ3pCLEdBQUlpckIsR0FBWTNNLFlBQWMsRUFBVzFGLFVBQVcsQ0FDaERxUyxFQUFXN00sUUFBUXhFLEVBQU9nRSxHQUMxQmhFLEVBQU1vRSxTQUFVLEVBQ2hCLFFBQ0osQ0FDQSxNQUFNb0IsRUFBU3hGLEVBQU13RixPQUNyQixJQUFLQSxFQUNELFNBRUosTUFBTUssRUFBVTdGLEVBQU1xRixNQUFNYyxPQUN0Qm1MLEVBQVE5TCxFQUFPd0QsY0FDakJzSSxHQUNBQSxFQUFNL2tCLFFBQVFnbEIsSUFFZDVNLEdBQWVrQixFQUFRakgsWUFDdkJvUyxHQUFpQm5MLEVBQVNMLEdBSTlCMkwsR0FGZ0JuUixFQUFNd1IsU0FFRzNMLEdBQ3pCTCxFQUFPcEIsU0FBVSxDQUNyQixDQUNKLENBQ08sU0FBU3FOLEdBQTBCM0QsRUFBVzRELEVBQU8sR0FBSTdHLEVBQU8sSUFDbkUsSUFBSyxNQUFNN0ssS0FBUzhOLEVBQVcsQ0FDM0IsTUFBTXRJLEVBQVN4RixFQUFNd0YsT0FDckIsSUFBS0EsRUFDRCxTQUVKLE1BQU1LLEVBQVU3RixFQUFNcUYsTUFBTWMsT0FDNUIsR0FBSU4sRUFBUyxDQUNUNkwsRUFBSzFsQixLQUFLNlosR0FDVixNQUFNeUwsRUFBUTlMLEVBQU93RCxjQUNqQnNJLEdBQ0F6RyxFQUFLN2UsUUFBUXNsQixFQUVyQixDQUNBLE1BQU1LLEVBQVUzUixFQUFNd1IsU0FDbEJHLEdBQ0FGLEdBQTBCRSxFQUFTRCxFQUFNN0csRUFFakQsQ0FDQSxNQUFPLENBQUU2RyxPQUFNN0csT0FDbkIsQ0FDTyxTQUFTMEcsR0FBZ0JLLEdBQzVCQSxFQUFLdEksYUFDVCxDQzFETyxTQUFTdUksR0FBa0J6ckIsRUFBTzhFLEVBQU9rbUIsRUFBV1UsR0FDdkQsTUFBTUMsRUFBWTNyQixFQUFNUSxPQUFTLEVBQzNCb1YsRUFBSzlRLEVBQVE0bUIsRUFDYkUsRUFBYWhXLEVBQUssR0FBSytWLEVBQVkvVixFQUNuQ2lXLEVBQWNiLEVBQVVsbUIsR0FDOUIsR0FBSThtQixFQUVBLE9BREFFLEdBQWlCRCxHQUNWLEVBRVgsTUFFTTFxQixFQUdWLFNBQTBCNHFCLEVBQVFDLEVBQWFILEVBQWFiLEVBQVdsbUIsR0FDbkUsTUFBTW1uQixFQUFTRCxHQUFlRCxJQUFXQyxFQUFZRSxXQUNyRCxHQUFJRCxFQUdBLE9BRkFILEdBQWlCRCxHQUNqQmIsRUFBVTVRLE9BQU90VixFQUFPLEdBQ2pCLEVBRVgsT0FBTyxDQUNYLENBWG1CcW5CLENBRkFOLEVBQVk3ckIsTUFBTWtzQixXQUNibHNCLEVBQU04RSxHQUMyQittQixFQUFhYixFQUFXbG1CLEdBQzdFLE9BQU8zRCxDQUNYLENBVU8sU0FBUzJxQixHQUFpQmxNLElBSWpDLFNBQWtDUixFQUFRUSxHQUN0QyxHQUFJUixHQUFVUSxFQUFRWCxPQUFPbU4sT0FBUSxDQUdqQyxZQURBQyxHQURnQnpNLEVBQVFYLE1BQU1tTixPQUNOaE4sRUFFNUIsQ0FDQVEsRUFBUXBGLFNBQVM0RCxRQUFRd0IsRUFBUyxDQUFDLEVBQ3ZDLENBVEkwTSxDQURlMU0sRUFBUVIsT0FDVVEsRUFDckMsQ0MxQk8sU0FBUzJNLEdBQW9CM00sS0FDOUJBLEVBQVEvQixZQUVWMk8sR0FBYTVNLEVBREtBLEVBQVFvTCxVQUU5QixDQUVPLFNBQVN3QixHQUFhOU4sRUFBU3NNLEdBQ2xDLElBQUssSUFBSWxtQixFQUFRLEVBQUdBLEVBQVFrbUIsRUFBVXhxQixTQUFVc0UsRUFDNUNnbkIsR0FBaUJkLEVBQVVsbUIsV0FFeEI0WixFQUFRc00sU0FDbkIsQ0NGQSxTQUFTeUIsR0FBYXhFLEdBQ2xCLE1BQU15RSxFQUFTekUsRUFBTXlFLE9BQ2pCQSxHQUNBcFEsRUFBZ0JvUSxFQUFRLGlCQUc1QnBRLEVBRFkyTCxFQUFNMEUsV0FDRyxlQUN6QixDQ1pPLFNBQVNDLEdBQWdCaE4sRUFBU2lOLElBUXpDLFNBQThCekIsRUFBVXlCLEdBQ3BDLElBQUssTUFBTWpOLEtBQVd3TCxFQUFVLENBQzVCLEdBQUl4TCxFQUFRa04sbUJBQW9CLENBQzVCLE1BQU10UyxFQUFXb0YsRUFBUXBGLFNBQ3pCLEdBQUlBLEdBQW1DLFNBQXZCQSxFQUFTOEQsVUFBc0IsQ0FDM0MsTUFBTXlCLEVBQVNILEVBQVFtTixhQUNqQkMsRUFBY3hTLEVBQVM0RCxRQUFRd0IsRUFBU0csR0FDMUNuQixHQUFVb08sSUFDVkgsRUFBWWpuQixLQUFLb25CLEVBRXpCLENBQ0EsUUFDSixDQUNBLE1BQU1oQyxFQUFZcEwsRUFBUW9MLFVBQzFCLEdBQUlBLEVBQVcsQ0FDWHdCLEdBQWE1TSxFQUFTb0wsR0FDdEIsUUFDSixDQUVBLE1BQU1ybUIsRUFBTWliLEVBQVFxTixlQUNwQixHQUFJdG9CLEVBQUssUUFDRWliLEVBQVFxTixlQUNmM1EsRUFBZ0IzWCxFQUFLLHdCQUNyQixRQUNKLENBQ0EsTUFBTXVvQixFQUFZdE4sRUFBUVIsT0FDMUIsUUFBa0IzVSxJQUFkeWlCLEVBQ0EsU0FFSkEsRUFBVWxQLFNBQVUsRUFDcEIsTUFBTW9PLEVBQVN4TSxFQUFRWCxPQUFPbU4sT0FDMUJBLEdBQ0FRLEdBQWdCaE4sRUFBU2lOLEVBR2pDLENBQ0osQ0ExQ0lNLENBRG9Cdk4sRUFBUXdMLFNBQ015QixHQUNsQ08sR0FBbUJ4TixFQUN2QixDQUNPLFNBQVN3TixHQUFtQnhOLElEUjVCLFNBQTRCeU4sR0FFL0IsSUFBSyxJQUFJdm9CLEVBQVF1b0IsRUFBWTdzQixPQUFTLEVBQUdzRSxHQUFTLElBQUtBLEVBRW5EMm5CLEdBRGNZLEVBQVl2b0IsSUFFMUJ1b0IsRUFBWWpULE9BQU90VixFQUFPLEVBRWxDLENDRUl3b0IsQ0FBbUIxTixFQUFReU4sWUFDL0IsQ0NUTyxTQUFTaEIsR0FBZTVNLEVBQVNMLEdBQ3BDLE1BQU1RLEVBQVVILEVBQVFHLFFBQ3hCUixFQUFPcEIsU0FBVSxFQUNqQjRCLEVBQVE5YixZQUFjLEVBQ3RCLE1BQU15cEIsRUFBVyxHQVdqQixPQVRBeEMsR0FEb0JuTCxFQUFRd0wsU0FDQzNMLEdBRXpCQSxFQUFRakgsVUFBVWdWLFNBQ2xCNUMsR0FBaUJuTCxFQUFTTCxHQUU5QndOLEdBQWdCaE4sRUFBUzJOLFVBQ2xCM04sRUFBUVgsYUFDUlcsRUFBUXdMLGdCQUNSeEwsRUFBUTZOLFlBQ1JGLENBQ1gsQ0NsQk8sU0FBU0csR0FBV2xNLEVBQzNCbU0sR0FDSSxNQUFNQyxFQUFTQyxHQUFlck0sRUFBWW1NLEdBRTFDLFFBQUtDLElBQVVELEVBQVduVixVQUFVRixLQUFLd1YsYUFDakNELEdBQWVyTSxFQUFXdU0sVUFBV0osS0FJdENDLENBQ1gsQ0FDQSxTQUFTQyxHQUFlck0sRUFDeEJtTSxHQUNJLE1BQU1LLEVBQWF4TSxFQUFXaEosVUFDeEJ5VixFQUFhTixFQUFXblYsVUFDeEIwVixFQUFTRixHQUFZMVYsS0FBT2tKLEVBQzVCMk0sRUFBU0YsRUFBVzNWLElBQzFCLEdBQUkwVixHQUFZMVAsWUFBYyxFQUFXdkYsWUFDckMsT0FBT2lWLEVBQVd6VixNQUFRMFYsRUFBVzFWLElBRXpDLE9BQVEyVixFQUFPNVAsV0FDWCxLQUFLLEVBQVcvRixJQUNaLE9BQUk0VixHQUFRN1AsWUFBYyxFQUFXL0YsS0FhMUMsU0FBdUIyVixFQUFRQyxHQUNsQyxNQUFNQyxFQUFXRixFQUFPM1YsSUFDbEI4VixFQUFXRixFQUFPNVYsSUFDeEIsT0FBTzZWLElBQWFDLENBQ3hCLENBZG1CQyxDQUFjSixFQUFRQyxHQUVqQyxLQUFLLEVBQVc3VixJQUFLLENBQ2pCLE1BQU1pVyxFQWFsQixTQUEwQkwsRUFBUUMsRUFBUTNNLEVBQzFDbU0sR0FDSSxNQUFNYSxFQUFXTixFQUFPMVcsUUFDbEJpWCxFQUFXTixFQUFPM1csUUFDeEIsR0FBSWdYLEVBQVNodUIsU0FBV2l1QixFQUFTanVCLE9BQzdCLE9BQU8sRUFJWCxJQUYyQmd1QixFQUFTdlQsT0FBTSxDQUFDbkIsRUFBUWhWLElBQVUycEIsRUFBUzNwQixHQUFPdEUsU0FBV3NaLEVBQU90WixTQUczRixPQUFPLEVBRVgsTUFBTWt1QixFQUFVbE4sRUFBV2hKLFVBQVVmLFFBQVV5VyxFQUFPelcsT0FDaERrWCxFQUFVaEIsRUFBV25WLFVBQVVmLFFBQVUwVyxFQUFPMVcsT0FDdEQsT0FFRyxTQUF5QmlYLEVBQVNDLEdBQ3JDLE1BQU1DLEVBQXFCRixFQUFRbHVCLFNBQVdtdUIsRUFBUW51QixPQUN0RCxJQUFLb3VCLEVBQ0QsT0FBTyxFQUVYLE1BQU1DLEVBQWVGLEVBQVExVCxPQUFNLFNBQTJCamIsRUFBTzhFLEdBQ2pFLE1BQU1ncUIsRUFBWUosRUFBUTVwQixHQUUxQixVQUQyQixJQUFZc1QsRUFBV3VHLGlCQUFtQixJQUFnQnZHLEVBQVd1RyxTQUMvRSxDQUViLFNBRG9CM2UsRUFBTWdCLGFBQWU4dEIsRUFBVTl0QixXQUt2RCxDQUNBLE9BQU8sQ0FDWCxJQUNBLEdBQUk2dEIsRUFDQSxPQUFPLEVBRVgsT0FBTyxDQUNYLENBdkJXRSxDQUFnQkwsRUFBU0MsRUFDcEMsQ0E1QnlCSyxDQUFpQmQsRUFBUUMsRUFBUTNNLEVBQVltTSxHQUMxRCxPQUFPWSxDQUNYLEVBRUosTUFBTSxJQUFJeGtCLE1BQU0sd0JBQXdCbWtCLEVBQU81UCxZQUNuRCxDQ2pDTyxTQUFTMlEsR0FBNEJyUCxLQUN0Q0EsRUFBUS9CLFlBQ1YsTUFBTXVCLEVBQVNRLEVBQVFSLE9BSXZCaU4sR0FIY3pNLEVBQVFYLE1BQ0ljLE9BRUVYLEdBR2hDLFNBQStCUSxHQUUzQkEsRUFBUXlOLFlBQWMsVUFDZnpOLEVBQVF3TCxnQkFDUnhMLEVBQVFYLGFBQ1JXLEVBQVFSLE9BQ2ZRLEVBQVE5YixZQUFjLENBQzFCLENBVElvckIsQ0FBc0J0UCxFQUMxQixDQzRFTyxTQUFTdVAsR0FBNkJ0TCxFQUFVbEcsR0FDbkQsTUFBTXlCLEVBQVN6QixFQUFZeUIsT0FDckJnUSxFQUFjelIsRUFBWXNCLE9BQU9jLE9BR3ZDLEdBRm1CMUIsR0FBWXdGLEdBRWYsQ0FHWixPQURpQjZKLEdBSE43SixFQUd5QnVMLElBT3BDQyxHQUFlMVIsRUFBYWtHLEVBQVV1TCxHQUMvQixJQU5IL0MsR0FBZStDLEVBQWFoUSxHQUM1QkosR0FBYXJCLEdBQ04sRUFLZixDQUNBLE1BQU0yUixFQUFRekwsR0FBVXZGLFVBQ3hCLEdBQUlnUixFQUFPLENBTVAsT0FEK0IsSUFEaEJELEdBQWUxUixFQUFha0csRUFIN0JsRyxFQUFZc0IsTUFDSmMsT0FDT25DLGNBSWxCLEVBRUosRUFDWCxDQUVBLE9BREFxUixHQUE0QnRSLEdBQ3JCLENBQ1gsQ0NsSE8sU0FBUzRSLEdBQWN2dkIsRUFBT29yQixFQUFVMEIsRUFBb0I5TSxHQUMvRCxNQUFNckMsRUFBYyxDQUNoQkUsWUFBYSxFQUNiN2QsUUFDQThxQixTQUFVLElBQUl4SSxHQUNkOUgsU0FBVWdWLEdBQWdCeHZCLEdBQzFCOHNCLHFCQUNBOU0sZ0JBQ0EzTCxXQUFZK1csRUFBUzVxQixRQUd6QixPQURBNHFCLEVBQVN4bEIsS0FBSytYLEdBQ1BBLENBQ1gsQ0NUTyxTQUFTOFIsR0FBaUJ6dkIsRUFBT29yQixFQUFVM0wsRUFDbERPLEVBQWUwUCxFQUNmaEssRUFBVTVJLEdBQ04sTUFBTTRQLEVBQVM5c0IsU0FBU3dkLGVBQWVqRixHQUVqQ3dGLEVBQWM0UixHQUFjdnZCLEVBQU9vckIsRUFEWnNFLEVBQVEsRUFDb0MxUCxHQVl6RSxPQVhBckMsRUFBWWdTLFlBQWNqRCxFQUMxQi9PLEVBQVkzYSxRQUFVMGlCLEVBQ2xCQSxFQUNBbEssRUFBYTVWLEtBQUssQ0FBQ21YLEVBQWEsQ0FBQzJJLEVBQVVnSCxLQUczQ3BSLEVBQWMxVixLQUFLLENBQ2ZnWCxFQUFhLENBQUNFLEVBQWM0UCxFQUFRLHVDQUc1Q2pILEdBQXNCemxCLEVBQU95ZixFQUFTOUIsRUFBYStILEVBQVU1SSxHQUN0RGEsQ0FDWCxDQ3JCTyxTQUFTaVMsR0FBc0JyVyxFQUFPOUIsRUFBUWtWLEVBQVlsTixFQUVqRU8sRUFBZTZQLEdBQ1gsSUFBSyxNQUFNQyxLQUFRdlcsRUFBTyxDQUN0QixNQUFNL0osRUFBT3NnQixFQUFLLEdBQ1o5dkIsRUFBUTh2QixFQUFLLEdBQ2I1WSxFQUFZNFksRUFBSyxLQUFNLEVBQzdCLElBQUlDLEVBQVdELEVBQUt0dkIsT0FBUyxFQUFJeW1CLEdBQTJCRixHQUN4RCtJLEVBQUssS0FDTEMsRUFBV0QsRUFBSyxJQUVwQixNQUFNRSxFQUFhQyxHQUFpQnpnQixFQUFNeFAsRUFBT3lYLEVBQVFrVixFQUFZbE4sRUFBU3NRLEVBQVV0USxFQUFRRyxRQUFRd0wsU0FBVXBMLEVBQWU5SSxHQUN2RyxpQkFBZjhZLEdBQ1BILEVBQWtCanFCLEtBQUtvcUIsRUFFL0IsQ0FDSixDQ2hCTyxTQUFTRSxHQUFpQnZELEVBQVl3RCxFQUFNMVksRUFBUWdJLEVBQVNPLEVBQWUwRixFQUFVNUksR0FDekYsTUFBTStTLEVBQW9CLEdBYTFCLE9BWElNLEVBQUt2YSxJQUNMZ2EsR0FBc0JPLEVBQUt2YSxHQUFJNkIsRUFBUWtWLEVBQVlsTixFQUVuRE8sRUFBZTZQLEdBRWZuSyxFQUNBbEssRUFBYTVWLEtBQUssQ0FBQ21YLEVBQWEsQ0FBQzJJLEVBQVVpSCxFQUFZLDhCQUd2RHJSLEVBQWMxVixLQUFLLENBQUNnWCxFQUFhLENBQUNFLEVBQWM2UCxFQUFZLGtDQUV6RGtELENBQ1gsQ0NYTyxTQUFTTyxHQUFrQkMsRUFBTzVZLEVBQVFnSSxFQUFTTyxFQUFlMFAsRUFDekVoSyxFQUFVNUksR0FDTixNQUFNc08sRUFBVzNMLEVBQVFHLFFBQVF3TCxTQUMzQjdTLEVBQU0sR0FDUm1OLFFBQTZCamIsSUFBakJxUyxJQUNaQSxFQUFlbGQsU0FBU3dkLGVBQWVqRixHQUN2Q3FELEVBQWE1VixLQUFLLENBQUNtWCxFQUFhLENBQUMySSxFQUFVNUksS0FDM0M0SSxPQUFXamIsR0FHZixJQUFLLElBQUkzRixFQUFRLEVBQUdBLEVBQVF1ckIsRUFBTTd2QixTQUFVc0UsRUFBTyxDQUMvQyxNQUFNcXJCLEVBQU9FLEVBQU12ckIsR0FDYjlFLEVBQVFtd0IsRUFBSzlWLEVBRW5CLElBRGU5USxNQUFNdkosR0FDVixDQUdQeXZCLEdBRGNoWSxFQURLMlQsRUFBUzVxQixRQUVKNHFCLEVBQVUzTCxFQUFTTyxFQUFlMFAsRUFBT2hLLEVBQVU1SSxHQUMzRSxRQUNKLENBQ0EsTUFBTXdULEVBQVUsQ0FBQyxFQUVqQixHQURBL1gsRUFBSTNTLEtBQUswcUIsR0FDTyxTQUFaSCxFQUFLeGEsR0FBZSxDQUNwQjRhLEdBQWNELEVBQVNILEVBQU16SyxFQUFVNUksR0FDdkMsUUFDSixDQUNBLE1BQU02UCxFQUFhMkQsRUFBUTNELFdBQWEvc0IsU0FBU3NkLGNBQWNpVCxFQUFLeGEsSUFFOUQ2YSxFQUFtQixDQUNyQjNTLFlBQWEsRUFDYjRTLFNBQVMsRUFDVHp0QixRQUFTMnBCLEVBQ1QzTSxnQkFDQW9MLFNBQVUsR0FDVk4sU0FBVSxJQUFJeEksR0FDZDlILFNBQVUsQ0FDTjhELFVBQVcsc0JBRWZqSyxZQUFhLEVBQ2J5WSxvQkFBb0IsR0FHbEIrQyxFQUFvQkssR0FBaUJ2RCxFQUFZd0QsRUFBTTFZLEVBQVFnSSxFQUFTK1EsRUFBa0I5SyxFQUFVNUksR0FFMUcwVCxFQUFpQnh0QixRQUFVMnBCLEVBQzNCNkQsRUFBaUJwRixTQUFXeUUsRUFDeEJNLEVBQUt0YSxLQUNMeWEsRUFBUXphLEdBQUt1YSxHQUFrQkQsRUFBS3RhLEdBQUk0QixFQUFRZ0ksRUFBUytRLEVBRXpEZCxFQUFRLEVBQUcvQyxFQUFZN1AsR0FBY3ZFLElBRTdDLENBQ0EsTUFBTyxDQUFFQSxNQUFLNlMsV0FDbEIsQ0FDQSxTQUFTbUYsR0FBY0QsRUFBU0gsRUFBTU8sRUFBTzVULEdBQ3pDLE1BQU1oSCxFQUFXd2EsRUFDWHhXLEVBQVNoRSxFQUFTRSxHQUFLbWEsRUFBS25hLEdBQzlCMGEsRUFDQWxWLEVBQWE1VixLQUFLLENBQUM2WCxFQUEwQixDQUFDaVQsRUFBTzVXLEVBQVEsU0FBMkJuVixHQUM1RW1SLEVBQVM2VyxXQUFhaG9CLENBQzFCLEtBR1oyVyxFQUFjMVYsS0FBSyxDQUFDNFgsRUFBMEIsQ0FBQ1YsRUFBY2hELEVBQVEsU0FBNEJuVixHQUNyRm1SLEVBQVM2VyxXQUFhaG9CLENBQzFCLElBQ1osQ0NuRU8sU0FBU2dzQixHQUFtQmxSLEVBQVNpRyxFQUFVNUksR0FDbEQsTUFBTTRCLEVBQVVlLEVBQVFHLFFBRXhCbEIsRUFBUU8sTUFBUVAsRUFBUU8sT0FBUyxDQUFDLEVBQ2xDLE1BQU1hLEVBQVlwQixFQUFRTyxNQUMxQmEsRUFBVXNNLE9BQVMzTSxFQUNuQkssRUFBVUMsT0FBU04sRUFDbkJmLEVBQVFPLE1BQU0yUixNQUFRbFMsRUFBUU8sTUFBTUMsUUFDbEN4RCxFQUFTQyxNQUNYLE1BQU14YSxFQU1WLFNBQTJCc2UsRUFBU08sRUFBZTBGLEVBQVU1SSxHQUN6RCxNQUFNK1QsRUFZVixTQUFxQnBSLEdBQ2pCLE1BQU1qSCxFQUFZaUgsRUFBUWpILFVBQ3BCc1ksRUFBVXRZLEVBQVVGLElBQzFCLEdBQUl3WSxFQUFReFMsWUFBYyxFQUFXL0YsSUFDakMsT0FBT3VZLEVBQVF2WSxJQUVuQixNQUFNZixFQUFVc1osRUFBUXRaLFFBQ3hCLE9BQU9tRCxFQUFXbkQsRUFBU3NaLEVBQVFyWixPQUN2QyxDQXBCb0JzWixDQUFZdFIsR0FDdEJxUixFQUFVclIsRUFBUWpILFVBQVVGLElBQzVCYixFQUFTcVosRUFBUXJaLE9BQ2pCMlQsRUFBVyxHQUNqQjNMLEVBQVFHLFFBQVF3TCxTQUFXQSxFQUMzQixNQUFNanFCLEVBQVNpdkIsR0FBa0JTLEVBQVNwWixFQUFRZ0ksRUFBU08sRUFFM0QsRUFDQTBGLEVBQVU1SSxHQUNWLE9BQU8zYixDQUNYLENBakJtQjZ2QixDQUFrQnZSLEVBQVNBLEVBQVFHLFFBQVM4RixFQUFVNUksR0FJckUsT0FIQTRCLEVBQVEyTyxZQUFjbHNCLEVBQU9vWCxNQUMzQm1ELEVBQVNDLE1BRUp4YSxDQUNYLENDVE8sU0FBUzh2QixHQUFXclQsRUFDM0JELEdBQ0ksTUFBTThCLEVBQVU5QixFQUFZc0IsTUFBTWMsT0FDNUJtUixFQUFLdlQsRUFBWWdTLFlBR3ZCLE9BRkFsUSxFQUFRN0IsYUFBZUEsRUFDdkIrUyxHQUFtQmxSLE9BQVNoVixFQUFXeW1CLEdBQ2hDelIsQ0FDWCxDQUNPLFNBQVMwUixHQUFpQjdZLEdBQzdCLE1BQU1FLEVBTU8sQ0FDVDhGLFVBQVcsRUFBVzlGLFVBQ3RCNFkscUJBQXNCLEVBQ3RCeEwsWUFBYXlMLEdBQ2JDLGNBQWUsRUFDZi9MLGdCQUFpQjRKLEdBQ2pCL1EsUUFBUyxFQUNUa00sVUFBVyxVQUNYcmUsSUFBSyxHQVhULE9BRkF1TSxFQUFVRixJQUFNQSxFQUNoQkEsRUFBSUUsVUFBWUEsRUFDVEEsQ0FDWCxDQWVPLFNBQVMrWSxHQUFzQi9ZLEVBQVdvRixFQUFjYyxHQUMzRCxNQUFNZSxFakJQSCxTQUEyQmpILEVBQ2xDb0YsRUFBYzBKLEVBQVkxSCxFQUFTcUssR0FDL0IsTUFBTXhLLEVBQVUsQ0FDWmpILFlBQ0FvSCxVQUNBcUssY0FDQTNDLGdCQUFZN2MsR0FJaEIsT0FGQWdWLEVBQVE3QixhQUFlQSxFQUN2QjZCLEVBQVE2SCxXQUFhQSxFQUNkN0gsQ0FDWCxDaUJKb0IrUixDQUFrQmhaLEVBQVdvRixFQUFjQSxFQUFhMEosV0FBWTVJLEdBRXBGLE9BREFBLEVBQVEwTSxTQUFXLEdBQ1ozTCxDQUNYLENDdkNPLFNBQVNnUyxHQUFxQmpaLEVBQVdrRyxFQUNoRGQsRUFDQThILEVBQVU1SSxHQUNOLE1BQU0yQyxFQUFVOFIsR0FBc0IvWSxFQUFXb0YsRUFBY2MsR0FDL0RlLEVBQVE3QixhQUFlQSxFQUN2QixNQUFNemMsRUFBU3d2QixHQUFtQmxSLEVBQVNpRyxFQUFVQSxPQUFXamIsRUFBWXFTLEdBQzVFLElBQUssTUFBTXZFLEtBQU9wWCxFQUFPb1gsSUFDakJBLEVBQUltVSxTQUNBaEgsRUFDQWxLLEVBQWE1VixLQUFLLENBQUNtWCxFQUFhLENBQUMySSxFQUFVbk4sRUFBSW1VLFVBRy9DcFIsRUFBYzFWLEtBQUssQ0FBQ2dYLEVBQWEsQ0FBQ0UsRUFBY3ZFLEVBQUltVSxPQUFRLGdCQUdoRW5VLEVBQUlvVSxhQUNBakgsRUFDQWxLLEVBQWE1VixLQUFLLENBQUNtWCxFQUFhLENBQUMySSxFQUFVbk4sRUFBSW9VLFdBQVksaUJBRzNEclIsRUFBYzFWLEtBQUssQ0FBQ2dYLEVBQWEsQ0FBQ0UsRUFBY3ZFLEVBQUlvVSxXQUFZLHNCQUk1RSxPQUFPbE4sQ0FDWCxDQzFCTyxTQUFTNFIsR0FBZXJ4QixFQUFPMmQsRUFBYUMsRUFBY2QsRUFBYzRJLEdBRTNFLE9BREEvSCxFQUFZc0IsTUFBUSxDQUFDLEVBQ2pCeUcsRUFDTytMLEdBQXFCenhCLEVBQU8yZCxFQUFhQyxFQUFjOEgsRUFBVTVJLEdBRXJFbVUsR0FBV3JULEVBQWNELEVBQ3BDLENDTk8sU0FBUytULEdBQXNCN04sRUFDdENsRyxFQUFhQyxLQUNQRCxFQUFZRSxZQUVkLE1BQU1TLEVBQVlYLEVBQVluRCxTQUFTOEQsVUFDdkMsT0FBSUEsR0FBYSxDQUFDLGlCQUFrQixXQUFXN2MsU0FBUzZjLElBRXBEWCxFQUFZbkQsU0FBUzhXLGNBQWN6TixFQUFVbEcsRUFBYUMsRUFBYyxJQUN4RUQsRUFBWTNkLE1BQVE2akIsRUFDYixHQUdQQSxJQUFhbEcsRUFBWTNkLE1BQ2xCLEVBRUpxbEIsR0FBeUIxSCxFQUFha0csRUFBVWpHLEVBQzNELENDWk8sU0FBUytULEdBQW1CckgsRUFBV3JCLEdBQzFDLE1BQU16USxFQUFZLENBQ2Q4RixVQUFXLEVBQVc5RixVQUN0Qm9OLFlBQWF5TCxHQUNiRCxxQkFBc0IsRUFDdEJFLGNBQWVJLEdBQ2ZuTSxnQkFBaUI0SixHQUNqQi9RLFFBQVM2USxHQUNUM0UsWUFDQXJCLFFBQ0FoZCxJQUFLLFNBQXFCaWdCLEdBRXRCLE9BREExVCxFQUFVMFQsV0FBYUEsRUFDaEIxVCxDQUNYLEVBQ0FvWixpQkFBaUJDLEdBRU5yWixFQUFVZ1YsVUFBWXFFLEdBQVVyWixFQUFVZ1YsU0FBU3RMLFdBQWEyUCxHQUFRM1AsVUFHdkYsT0FBTzFKLENBQ1gsQ0MxQk8sTUFBTThTLEdBQU8sR0NFYixTQUFTd0csR0FBa0IvUixHQUM5QixNQUFNckIsRUFBVXFCLEVBQU9ILFFBRXZCLE9BRGlCbVMsR0FBYWhTLEVBQU92SCxXQUUxQndaLEdBQWlCalMsR0FFckJrUyxHQUFzQmxTLEVBQVFBLEVBQVFyQixFQUNqRCxDQ0hPLFNBQVMyTCxHQUFVcEIsRUFBT3pILEVBQVlrTyxHQUN6QyxPQUFPekcsRUFBTW5qQixLQUFJLFNBQXNCOE0sR0FDbkMsT0FJUixTQUFtQkEsRUFBTWdMLEVBQWM0RCxFQUFZa08sR0FDL0MsR0FBSXJSLEdBQVl6TCxLQUFVQSxFQUN0QixPQUFPQSxFQUVYLElBQUtnTCxFQUNELE9BQU9oTCxFQUVYLE9BQU9zZixHQUFVdGYsRUFBTWdMLEVBQWM0RCxFQUFZa08sRUFDckQsQ0FaZXlDLENBQVV2ZixFQUFNNE8sRUFBVzVELGFBQWM0RCxFQUFZa08sRUFDaEUsR0FDSixDQVdPLFNBQVN3QyxHQUFVbHlCLEVBQU80ZCxFQUFjNEQsRUFBWWtPLEVBQU9nQixHQUM5RCxJQUFLMXdCLEVBQ0QsT0FBT0EsRUFFWCxHQUFJQSxFQUFNc2UsVUFDTixPQUFPdGUsRUFFWCxVQUFXLElBQVlvWSxFQUFXdUcsU0FDOUIsT0FBSStRLEdBQVMsRUErRGQsU0FBcUIxdkIsRUFBTzB3QixFQUFPOVMsR0FDdEMsTUFBTXdVLEVBQVVweUIsRUFBTXF5QixJQUV0QixHQUFJRCxFQUNBLE9BQU9weUIsRUFFWCxNQUFNc3lCLEVBQU8sWUFBdUJsUyxHQUNoQyxPQVNELFNBQTJCbVMsRUFDbEM3QixFQUFPOEIsRUFBVTVVLEdBQ2IsTUFBTTZVLEVBQWU3VSxFQUFhZ0MsUUFDNUJHLEVBQVMwUyxFQUFheFQsT0FBT2MsUUFBVW5DLEVBRXZDOFUsT0FBNkJqb0IsSUFEWjZVLEtBR2pCcVQsRUFBaUJKLEVBQU9LLE1BQU1sQyxFQUFPOEIsR0FDckNLLEVBQU0sV0FDUixNQUFNalQsRUFBVUcsRUFBT0gsUUFDakJSLEVBQVNRLEVBQVFSLE9BQ3ZCLE9BQUlRLEVBQVErRixPQUNEZ04sRUFFTnZULEdBWUwwUyxHQUFrQi9SLEdBQ1g0UyxJQUpIRixFQUFhalksU0FBUzhXLGNBQWNtQixFQUFhenlCLE1BQU95eUIsRUFBYzdVLEVBQWMsSUFDN0UrVSxFQUlmLEVBQ0EsR0FBSUQsRUFDQSxPQUFPRyxJQUdYLE9BREF0VCxHQUFhNkYsV0FBV1QsV0FBV2tPLEdBQzVCRixDQUNYLENBM0NlRyxDQUFrQlIsRUFBS0QsSUFBSzNCLEVBQU90USxFQUFNeEMsRUFDcEQsRUFLQSxPQUpBMFUsRUFBS3BRLFNBQVdsaUIsRUFDaEJzeUIsRUFBS0QsSUFBTXJ5QixFQUVYd1MsT0FBT3VnQixPQUFPVCxFQUFNdHlCLEdBQ2JzeUIsQ0FDWCxDQTNFbUJVLENBQVloekIsRUFBTzB3QixFQUFPOVMsR0FFOUI1ZCxFQUVYLEdBQUkwdkIsSUFBVTNGLEdBQ1YsT0FBTy9wQixFQUdYLE9BRGFpekIsR0FBZ0JqekIsR0FFbEJBLEVBRVArZSxHQUFRL2UsR0FLaEIsU0FBd0JBLEVBQU93aEIsRUFBWTVELEVBQWM4UixHQUNyRCxJQUFLLElBQUk1cUIsRUFBUTlFLEVBQU1RLE9BQVMsRUFBR3NFLEdBQVMsSUFBS0EsRUFBTyxDQUNwRCxNQUFNaUUsRUFBVy9JLEVBQU04RSxHQUV2QixHQURBOUUsRUFBTThFLEdBQVNvdEIsR0FBVW5wQixFQUFVNlUsRUFBYzRELEVBQVlrTyxFQUFRLEVBQUcxdkIsVUFDN0QsSUFBZW9ZLEVBQVd1RyxTQUFVLENBQzNDLEdBQUk1VixFQUFTc3BCLElBQ1QsU0FFSmEsR0FBZXhELEVBQVEsRUFBRzVxQixFQUFPaUUsRUFBVS9JLEVBQU93aEIsRUFDdEQsQ0FDSixDQUNBLE9BQU94aEIsQ0FDWCxDQWhCZW16QixDQUFlbnpCLEVBQU93aEIsRUFBWTVELEVBQWM4UixHQWlCL0QsU0FBeUIxdkIsRUFBT3doQixFQUFZNUQsRUFBYzhSLEdBQ3RELE1BQU03RyxFQUFPclcsT0FBT3FXLEtBQUs3b0IsR0FDekIsSUFBSyxNQUFNd1AsS0FBUXFaLEVBQU0sQ0FDckIsTUFBTTlmLEVBQVcvSSxFQUFNd1AsR0FDakJyTyxFQUFTK3dCLEdBQVVucEIsRUFBVTZVLEVBQWM0RCxFQUFZa08sRUFBUSxFQUFHMXZCLEdBRXhFLEdBRG9CQSxFQUFNd1AsS0FDTnJPLEVBQ2hCLFNBRUosTUFBTWl5QixFQUFTNWdCLE9BQU82Z0IseUJBQXlCcnpCLEVBQU93UCxHQUV0RCxLQURrQjRqQixHQUFRdmpCLEtBQU91akIsR0FBUXRqQixPQUl6QzlQLEVBQU13UCxHQUFRck8sU0FDSCxJQUFhaVgsRUFBV3VHLFVBQVUsQ0FDekMsR0FBSTVWLEVBQVNzcEIsSUFDVCxTQUVKYSxHQUFleEQsRUFBUSxFQUFHbGdCLEVBQU16RyxFQUFVL0ksRUFBT3doQixFQUNyRCxDQUNKLENBQ0EsT0FBT3hoQixDQUNYLENBdENXc3pCLENBQWdCdHpCLEVBQU93aEIsRUFBWTVELEVBQWM4UixFQUM1RCxDQXNDQSxTQUFTd0QsR0FBZXhELEVBQU81cUIsRUFBT3l1QixFQUFlQyxFQUFTaFMsR0FFdERrTyxFQUFRLElBQ1I4RCxFQUFRMXVCLEdBQU80ZCxhQUFlbEIsRUFBVzVCLFFBQVFrTCxTQUFTbkcsWUFBVyxXQUNqRTZPLEVBQVExdUIsR0FBU3l1QixDQUNyQixJQUVSLENBb0RPLFNBQVNOLEdBQWdCanpCLEdBQzVCLGNBQWMsSUFBWW9ZLEVBQVcwRyxTQUFXOWUsR0FBU0EsRUFBTXNlLFNBQ25FLENDOUlPLFNBQVNtVixHQUFZamIsRUFBV3JYLEVBQVF1eUIsRUFBWXpKLEdBQ3ZELE1BQU0wSixFQUFtQnh5QixFQUFPK2dCLFNBQzFCMFIsRUFBWXBiLEVBQVU4RixZQUFjLEVBQVd2RixZQUMvQ3dILEVBQVNoQixHQUFhQyxZQUU1QixJQUFJbEgsRUFlSixPQWhCQW9ILEdBQWtCZ1UsR0FFZEUsRUFDQXRiLEVBQU1FLEtBR05GLEVBQU1xYixLQUFvQjFKLFVBRWYsSUFBVTdSLEVBQVd1RyxlQUE4QmxVLElBQWxCNk4sRUFBSWdHLFlBQzVDaEcsRUFBTUEsTUFHZG9iLEVBQVc5VCxRQUFRNk4sWUFBY25WLEVBQ2pDQSxFQUFJRSxVQUFZQSxFQUNoQkEsRUFBVUYsSUFBTUEsRUFDaEJvYixFQUFXOVQsUUFBUVgsTUFBTUMsTUFBUSxJQUFLcUIsR0FDL0JtVCxDQUNYLENDdkJPLFNBQVNHLEdBQWNyYixFQUM5Qm9GLEVBQWMwSixFQUFZNUksRUFBU3VMLEdBQy9CLE1BQU14SyxFQUFVdUssR0FBZXhSLEVBQVdrRyxFQUFTdUwsR0FFbkQsT0FEQXhLLEVBQVE3QixhQUFlQSxFQUNoQnVNLEdBQXFCM1IsRUFBV2lILEVBQVM2SCxFQUFZMkMsRUFDaEUsQ0NnQk8sU0FBUzZKLEdBQWV0YixFQUFXZ0osRUFBWTROLEdBQ2xELE1BQU1ySCxFQUFXdlAsRUFBVThSLFlBQWNDLEdBQVl3SixLQUFPaEssR0FBbUJGLEdBQ3pFWixFQUFRelEsRUFBVXlRLE1BQ2xCbUIsRUFBYzVJLEVBQVc0SSxZQUUvQixJQUFJNEosRUFBaUI1SixFQUFZQyxVQUNqQyxNQUFNNEosRUFBa0I3RSxHQUFhaEYsWUFDL0I4SixFQUFnQkQsR0FBaUI1SixVQUNuQzZKLElBQ0E5SixFQUFZQyxVQUFZNkosRUFDeEJGLEVBQWlCRyxHQUFrQjNTLEVBQVk0TixFQUFhQSxFQUFZeFIsYUFBY3FMLEVBQU9sQixJQUdqRyxPQURvQmlNLEdBQWtCM0osR0FBVXBCLEVBQU96SCxFQUFZLEVBRXZFLENDOUJPLFNBQVM0UyxHQUFzQjNVLEVBQVM3QixLQUMzQjZCLEVBQVFHLFFBQ2Q5YixZQUNWdXdCLEtBQ0E5VSxHQUFhNkYsV0FBV25DLEtBQUtyRixFQUNqQyxDQUVPLFNBQVN5VyxHQUFlelUsSUFPL0IsU0FBbUJBLEdBQ2YsTUFBTVcsRUFBU2hCLEdBQWFDLFlBQ3RCZCxFQUFVa0IsR0FBV1csRUFBT1gsUUFDbENsQixFQUFRTyxNQUFRUCxFQUFRTyxPQUFTLENBQUMsRUFDbENQLEVBQVFPLE1BQU1DLE1BQVEsSUFBS3FCLEdBQzNCLE1BQU1kLEVBQVVjLEVBQU9kLFFBQ3ZCZixFQUFRTyxNQUFNYyxPQUFTTixDQUMzQixDQWJJNlUsQ0FBVTFVLEdBY1AsV0FDSCxNQUFNVyxFQUFTaEIsR0FBYUMsbUJBQ3JCZSxFQUFPSSxtQkFDUEosRUFBT2QsZUFDUGMsRUFBT3RCLGFBQ1BzQixFQUFPcEIsT0FDZDBHLElBQ0osQ0FsQkkwTyxFQUVKLENDZk8sU0FBU0MsR0FBUWhULEVBQVliLEVBQ3BDZixFQUFTaEMsR0FDTCxJQUFJNlcsRUFDSixNQUFNamMsRUFBWWdKLEVBQVdoSixVQUU3QixHQUFJQSxFQUFVOEYsWUFBYyxFQUFXdkYsWUFBYSxDQUNoRCxNQUFNNVgsRUFBU3FYLEVBQ2ZpYyxFQUFZWixHQUFjcmIsRUFBV29GLEVBQWM0RCxFQUFXOEYsV0FDOUQxSCxHQUNBNlQsR0FBWWpiLEVBQVdyWCxFQUFRc3pCLEVBQ25DLEtBQ0ssQ0FJREEsR0FBWWpILEVBRkloVixFQUFVZ1YsU0FFTmhNLEVBQVk1QixFQUFTZSxFQUM3QyxDQUdBLE9BRkF5VCxHQUFzQkssRUFBVzdXLEdBQ2pDNlcsRUFBVTdXLGFBQWU0RCxFQUFXNUQsYUFDN0I2VyxDQUNYLENDckJPLFNBQVNDLEdBQVlsVCxFQUFZYixFQUN4Q2YsRUFBU2hDLEdBSUwsT0FEQTJELEdBQWVDLEVBQVliLEVBRlRmLEVBQVFYLE1BQ0UyUixNQUFNM1IsT0FFM0J1VixHQUFRaFQsRUFBWWIsRUFBYWYsRUFBU2hDLEVBQ3JELENBRU8sU0FBUytXLEdBQWVuVCxFQUFZYixFQUMzQ2YsRUFBU2hDLEdBR0wsT0FGQWtELEdBQVVVLEVBQVc1QixTQUNyQkYsR0FBa0I4QixHQUNYZ1QsR0FBUWhULEVBQVliLEVBQWFmLEVBQVNoQyxFQUNyRCxDQ1pPLFNBQVNnWCxHQUFzQjUwQixFQUFPMmQsRUFDN0NDLEVBQ0FkLEVBQWM0SSxHQUNWMUcsR0FBYXJCLEdBQ2IsTUFBTThCLEVDTEgsU0FBNEIrTixFQUFTOU8sRUFBU2QsR0FDakQsTUFBTXBGLEVBQVltWixHQUFtQnBILEdBQVl3SixNQUNqRHZiLEVBQVU4RixVQUFZa1AsRUFBUWxQLFVBQzlCLE1BQU1tQixFQUFVOFIsR0FBc0IvWSxFQUFXb0YsRUFBY2MsR0FFL0QsU0FBUzRULElBRUwsT0FEQTlaLEVBQVVGLElBQWFrVixJQUNoQi9OLENBQ1gsQ0FJQSxPQUhBakgsRUFBVWdWLFFBQVU4RSxFQUNwQkEsRUFBS2hVLFVBQVlrUCxFQUFRbFAsVUFDekJnVSxFQUFLcFEsU0FBV3NMLEVBQVF0TCxVQUFZc0wsRUFDN0IvTixDQUNYLENEUm9Cb1YsQ0FBbUI3MEIsRUFBTzJkLEVBQWFDLEdBRXZELE9BREErVyxHQUFlbFYsT0FBU2hWLEVBQVdrVCxHQUM1QjhULEdBQXFCaFMsRUFBUWpILFVBQVdtRixFQUFhQyxFQUFjOEgsRUFBVTVJLEVBQ3hGLENFQUEsU0FBU2dZLEdBQXVCdGMsRUFBV2tHLEVBQVNkLEdBQ2hELE1BQU00RCxFQUFhcVMsR0FBY3JiLEVBQVdvRixFQUFjQSxFQUFhMEosV0FBWTVJLEdBQzdFcVcsRUFBaUJ2VCxFQUFXNEksWUFDbEMsR0FBSTJLLEVBQWdCLENBQ2hCLE1BQU05SyxFQUFjelIsRUFBVThGLFlBQWMsRUFBVzdGLGFBQWUsR0FBS3FiLEdBQWV0YixFQUFXZ0osR0FDckd1VCxFQUFlMUssVUFBWUosQ0FDL0IsQ0FHQSxPQUZnQjBLLEdBQWVuVCxFQUFZOUMsRUFBUU8sTUFBTWMsT0FDekRyQixFQUVKLENBV0EsU0FBU3NXLEdBQTJCdlYsRUFBUzdCLEVBQWNjLEdBQ3ZELE1BQU1rQixFQUFVSCxFQUFRRyxRQUNsQmlFLEVBQVdqRSxFQUFRcVYsVUFBWXJWLEVBQVE2TixZQU92Q2pULEVBQVdnVixHQUFnQjNMLFVBQzFCakUsRUFBUVIsT0FDZixNQUFNNFEsRUFBYSxDQUNmblMsWUFBYSxFQUNiN2QsTUFBTzZqQixFQUNQckosV0FDQXNRLFNBQVUsSUFBSXhJLEdBQ2RxTixZQUFhL1AsRUFBUStQLFlBRXJCdGIsWUFBYSxFQUNieVksb0JBQW9CLEVBQ3BCOU0sY0FBZUosR0FFYnNWLEVBT1YsU0FBMkJ0VixFQUFTb1EsRUFBWXZRLEVBQVNmLEdBQ3JELE1BQU13VyxFQUFpQixDQUNuQjVXLFVBQVcsaUJBRVg4UyxxQkFBc0IsRUFDdEJ4TCxZQUFhLENBQUNULEVBQVFnUSxFQUFjQyxLQUNoQyxNQUFNQyxFQUFnQnpWLEVBQVFxVixVQUFZclYsRUFBUTZOLFlBQ2xELE9BQU91QyxFQUFXeFYsU0FBU29MLFlBQVl5UCxFQUFlckYsRUFBWXZRLEVBQVNmLEVBQVFpUixZQUFZLEVBRW5HMkIsY0FBZSxDQUFDdHhCLEVBQU8yZCxFQUFhQyxPQUM5QmdDLEVBQVEvQixjQUNSRixFQUFZRSxZQUNkLE1BQU15WCxFQUFlMVYsRUFBUXFWLFVBQVlyVixFQUFRNk4sWUFFM0M4SCxFQURXM1YsRUFBUTVmLE1BQ0FzZSxVQUNuQmtYLEVBQVV4MUIsR0FBT3NlLFVBQ2pCbVgsRUFBaUJELElBQVlELEVBQzdCRyxFdkJ4RVgsU0FBNkI3UixFQUFVbEcsR0FDMUMsTUFBTXlSLEVBQWN6UixFQUFZc0IsT0FBT2MsT0FHdkMsR0FGbUIxQixHQUFZd0YsR0FLM0IsT0FEaUI2SixHQUhON0osRUFHeUJ1TCxHQUk3QixFQUZJLEVBSWYsTUFBTUUsRUFBUXpMLEdBQVV2RixVQUN4QixPQUFJZ1IsRUFDSXpMLEVBQVMySixTQUFTdEwsV0FBYXZFLEVBQVkzZCxNQUFNd3RCLFNBQVN0TCxTQUNuRCxFQUVKLEdBR0osQ0FDWCxDdUJtRCtCeVQsQ0FBb0IzMUIsRUFBTzRmLEdBRzlDLEdBRmdCOFYsR0FBY0QsR0FBa0JQLEVBQWUzUCxnQkFBZ0IrUCxFQUFjMVYsRUFDN0ZILEdBS0ksT0FIQXlWLEVBQWU5VyxRQUFRd0IsRUFBU0gsUUFDaEMrRixHQUFrQnhsQixFQUFPNGYsRUFDekJoQyxFQUFjLEtBS2xCLEdBRkFvUyxFQUFXaHdCLE1BQU1pcEIsTUFBUW9CLEdBQVVycUIsRUFBTWlwQixNQUFPckwsRUFBYyxHQUM5RG9TLEVBQVc0RixlQUFpQmhXLEVBQVFnVyxlQUNoQ2hXLEVBQVFnVyxlQUFnQixFQUV4QkEsRUFEdUJoVyxFQUFRZ1csZ0JBQ2hCNUYsRUFBV2h3QixNQUFNaXBCLE1BQ3BDLENBQ0ErRyxFQUFXeFYsU0FBUzhXLGNBQWNnRSxFQUFjdEYsRUFBWXZRLEVBQVMsSUFDckV1USxFQUFXaHdCLE1BQVFzMUIsQ0FBWSxFQUVuQy9QLGdCQUFpQixDQUFDSixFQUFRZ1EsS0FDdEIsTUFBTXRSLEVBQVdqRSxFQUFRcVYsVUFBWXJWLEVBQVE2TixZQUU3QyxPQURvQnVDLEVBQVd4VixTQUFTK0ssZ0JBQWdCMUIsRUFBVW1NLEVBQVl2USxFQUM1RCxFQUV0QnJCLFFBQVMsQ0FBQ1QsRUFBYUMsT0FDakJnQyxFQUFRL0IsWUFDVixNQUFNMWMsRUFBUzZ1QixFQUFXeFYsU0FBUzRELFFBQVE0UixFQUFZdlEsR0FDdkQsT0FBSWIsR0FBVXpkLEdBQ0hBLEVBQU8wZCxNQUFLLEtBQ2YsTUFBTTFkLEVBQVMwMEIsR0FBYWpXLEVBQVNoQyxHQUVyQyxPQURBN0IsSUFDTzVhLENBQU0sSUFHZDAwQixHQUFhalcsRUFBU2hDLEVBQWEsR0FHbEQsT0FBT3NYLENBQ1gsQ0E3RDJCWSxDQUFrQmxXLEVBQVNvUSxFQUFZdlEsRUFBU2YsR0FJdkUsT0FIQWtCLEVBQVFwRixTQUFXMGEsRUFFbkIxYSxFQUFTb0wsWUFBWS9CLEVBQVVtTSxFQUFZdlEsRUFBU2YsRUFBUWlSLGFBQ3JEbFEsQ0FDWCxDQXlEQSxTQUFTb1csR0FBYWpXLEVBQVNoQyxVQUNwQmdDLEVBQVE2TixtQkFDUjdOLEVBQVFxVixnQkFDUnJWLEVBQVFSLE9BRWZRLEVBQVF3TCxTQUFXLEdBRW5CeEwsRUFBUXlOLFlBQWMsVUFDZnpOLEVBQVFnVyxjQUVuQixDQUNPLFNBQVNHLEdBQTZCdmQsRUFBV2tHLEVBQVNkLEVBQWM4SCxHQUMzRSxNQUFNakcsRUFBVXFWLEdBQXVCdGMsRUFBV2tHLEVBQVNkLEdBRXJEdEYsRUFBTW1ILEVBQVFqSCxVQUFVRixJQUM5QixNQUFLLENBQUMsTUFBTyxRQUFRN1csU0FBUzZXLEVBQUlnRyxXQ2pJL0IsU0FBK0JtQixFQUFTaUcsR0FDM0MsTUFBTXZrQixFQUFTd3ZCLEdBQW1CbFIsRUFBU2lHLE9BQVVqYixHQUNyRCxJQUFLLE1BQU04TixLQUFPcFgsRUFBT29YLElBQ2pCQSxFQUFJb1UsWUFDSm5SLEVBQWE1VixLQUFLLENBQUNtWCxFQUFhLENBQUMySSxFQUFVbk4sRUFBSW9VLGNBRS9DcFUsRUFBSW1VLFFBQ0psUixFQUFhNVYsS0FBSyxDQUFDbVgsRUFBYSxDQUFDMkksRUFBVW5OLEVBQUltVSxVQUd2RCxPQUFPak4sQ0FDWCxDRHlIV3VXLENBQXNCdlcsRUFBU2lHLEdBRjNCc1AsR0FBMkJ2VixFQUFTN0IsRUFBY2MsRUFHakUsQ0VySU8sU0FBU3VYLEdBQXdCajJCLEVBQU8yZCxFQUMvQ0MsRUFDQXNZLEVBQWV4USxHQUVYLE9BREExRyxHQUFhckIsR0FDVCtILEVBQ09xUSxHQUE2Qi8xQixFQUFPMmQsRUFBYUMsRUFBYzhILEdGZXZFLFNBQXFDbE4sRUFBV2tHLEVBQVNkLEdBQzVELE1BQU02QixFQUFVcVYsR0FBdUJ0YyxFQUFXa0csRUFBU2QsR0FDckR0RixFQUFNbUgsRUFBUWpILFVBQVVGLElBQzlCLE1BQUssQ0FBQyxNQUFPLFFBQVE3VyxTQUFTNlcsRUFBSWdHLFlBR2xDcVMsR0FBbUJsUixPQUFTaFYsRUFDNUJpVSxFQUFRaVIsYUFDRGxRLEdBSkl1VixHQUEyQnZWLEVBQVM3QixFQUFjYyxFQUtqRSxDRXRCV3lYLENBQTRCbjJCLEVBQU8yZCxFQUFhQyxFQUMzRCxDQ1JPLFNBQVN3WSxHQUFxQkMsS0FDL0IzYSxFQUFTQyxNQUNYMGEsRUFBU2x3QixRQUFRbXdCLE1BQ2Y1YSxFQUFTQyxNQUNYSSxHQUNKLENBQ0EsU0FBU3VhLEdBQWE3VyxHQUNsQixNQUFNRyxFQUFVSCxFQUFRRyxRQUV4QixJQURlQSxFQUFRUixPQUduQixZQURBUSxFQUFRcEYsU0FBUzhXLGNBQWMxUixFQUFRNWYsTUFBTzRmLEVBQVNILEVBQVE3QixhQUFjLElBSWpGMlksR0FEa0IzVyxFQUFRWCxNQUNGYyxPQUM1QixDQ0hPLFNBQVN5VyxHQUFnQmhMLEVBQU1pTCxHQUNsQyxJQUFLLElBQUkzeEIsRUFBUSxFQUFHQSxFQUFRMG1CLEVBQUtockIsU0FBVXNFLEVBQU8sQ0FHOUM0eEIsR0FGZWxMLEVBQUsxbUIsR0FDTDJ4QixFQUFLM3hCLEdBRXhCLENBQ0osQ0FDQSxJQUFJNnhCLEdBQ0osU0FBU0MsTUFBaUIzMUIsR0FFdEIsT0FEQTAxQixHQUFNMTFCLEVBQ0NBLENBQ1gsQ0FDQSxTQUFTNDFCLEtBQ0wsT0FBT0YsRUFDWCxDQUNPLFNBQVNELEdBQVdsTCxFQUFNaUwsR0FDN0JqTCxFQUFLb0wsR0FBZSxHQUNwQkgsRUFBS0ksR0FBZSxFQUN4QixDQUVPLFNBQVNDLEdBQWNDLEVBQVdDLEVBQVNDLEVBQVlDLEdBQzFELElBQUssSUFBSXB5QixFQUFRaXlCLEVBQVV2MkIsT0FBUyxFQUFHc0UsR0FBUyxJQUFLQSxFQUFPLENBQ3hELE1BQ01xeUIsRUFEa0JKLEVBQVVqeUIsR0FDQStLLE1BRzVCeU4sRUFEZ0IwWixFQUFRbHlCLEdBQ0N3WSxTQUMxQkEsR0FHTEEsRUFBUzZaLEVBQ2IsQ0FFQSxJQUFLLElBQUlyeUIsRUFBUW95QixFQUFXMTJCLE9BQVMsRUFBR3NFLEdBQVMsSUFBS0EsRUFBTyxDQUN6RHN5QixHQUFVNTJCLE9BQVMsRUFDbkI2MkIsR0FBVyxHQUdYQyxFQUZ3QkosRUFBV3B5QixJQUVuQnl5QixJQUVoQk4sRUFBV255QixHQUFPMHlCLEdBQ3RCLENBQ0osQ0FDQSxJQUFJSCxHQUFXLEVBQ2YsTUFBTUQsR0FBWSxHQUNsQixTQUFTRyxNQUFrQm5YLEdBRXZCLE9BREFnWCxHQUFVeHhCLEtBQUt3YSxHQUNSQSxDQUNYLENBRUEsU0FBU29YLE1BQWtCQyxHQUN2QixPQUFPTCxHQUFVQyxLQUNyQixDQzdETyxTQUFTSyxHQUFzQi9FLEVBQWdCZ0YsR0FBTSxlQUFFQyxFQUFjLGFBQUVDLElBRTFFLEdBRGVqWixHQUFVK1QsR0FDYixDQUdSLE9BRmdCZ0YsRUFBSy9YLFFBQ2IrRixPQUFTLEVBQ1ZnTixFQUFlOVQsS0FJdkIsU0FBdUI4WSxFQUFNQyxHQUNoQyxPQUFRMzJCLElBQ0osTUFBTW1lLEVBQVN1WSxFQUFLL1gsUUFBUVIsT0FFdEJWLEVBQVVpWixFQUFLL1gsUUFFckIsVUFET2xCLEVBQVFpSCxRQUNRLElBQW5CdkcsRUFBT3BCLFFBQ1AsT0FBTzRaLEVBQWUzMkIsSURmM0IsU0FBc0J3ZSxFQUM3QnFZLEdBQ0ksTUFBTWhZLEVBQVlMLEVBQVFHLFFBQVFYLE1BQzVCOFksRUFBa0JELEVBQWNsWSxRQUFRWCxNQUd2Q3VYLEdBRlkxVyxFQUFVWixNQUFNQyxPQUNsQjRZLEVBQWdCN1ksTUFBTUMsT0FFM0MsQ0NXUTZZLENBQWFMLEVBQU1qWixFQUFRTyxNQUFNYyxRQUdqQyxPQURBcVcsR0FEcUI2QixHQUFVTixJQUV4QkMsRUFBZTMyQixFQUFFLENBRWhDLENBbkJtQ2kzQixDQUFjUCxFQUFNQyxHQUNuRCxDQUNBLE9BQU9DLEVBQWFsRixFQUN4QixDQ1hPLFNBQVMxVCxHQUFNMEMsR0FDbEIsT0FBT3BDLEdBQWFDLFlBQVl1QixTQUFTQyxRQUFRVyxFQUNyRCxDQ0VPLFNBQVN3VyxHQUFPN2EsR0FTbkIsT0FSQTJCLElBQU0sS0FDRixNQUFNOWQsRUFBU21jLElBRWYsR0FEZ0J5RSxLQUNKM0MsT0FBUSxDQUVoQixPQUFPc1ksR0FBc0J2MkIsRUFEVm1lLEtBQzhCLENBQUVzWSxrQkFBZ0JDLGlCQUN2RSxLQUVHdmYsRUFDWCxDQUNBLFNBQVNzZixHQUFlMzJCLEdBQ3BCLE9BQU9BLENBQ1gsQ0FDQSxTQUFTNDJCLEdBQWE1MkIsR0FDbEIsT0FBT0EsQ0FDWCxDQ25CTyxTQUFTbTNCLEdBQVU5YSxHQUt0QixPQUpBMkIsSUFBTSxXQUNjOEMsS0FDUitJLFNBQVNuRyxXQUFXckgsRUFDaEMsSUFDT2hGLEVBQ1gsQ0NNQSxJQUFJK2YsR0FBVyxFQUNmLE1BQU1DLEdBQVVDLEdBQWtCLFNBQzVCQyxHQUFjRCxHQUFrQixhQUN0QyxTQUFTQSxHQUFrQkUsR0FDdkIsT0FBTyxTQUF1QkMsR0FDMUIsTUFBTUMsRUFBVXJiLEdBQVNvYixHQU16QixPQUpBelosSUFBTSxLQUNjLEtBQ1IyWixpQkFBaUJILEVBQU1FLEVBQVEsSUFFcENBLENBQ1gsQ0FDSixDQUNBLE1BQU1FLEdBQWEsQ0FDZmhwQixJQUFLLEdBQ0xpcEIsUUFBU1IsR0FDVGo1QixNQUFPaTVCLEdBQ1BBLFdBQ0FTLFVBQVdQLEdBQ1hRLFlBQWFSLEdBQ2JBLFlBQWFBLElBT2pCLFNBQVNTLEdBQWF6cEIsRUFBTTBwQixHQUN4QjFtQixPQUFPQyxlQUFlNkYsR0FBSzlJLEVBQU0sQ0FDN0JLLElBQUcsSUFDUXFwQixFQUVYcHBCLElBQUlMLEdBQ095cEIsRUFBUXpwQixJQUczQixDQUVPLElBQUk4YSxHQVdKLFNBQVNqUyxHQUFJRyxFQUFjNlIsRUFBWUMsR0FBWUcsU0FFdEQsTUFBTXlPLEVBQWEsWUFBdUJsUSxHQUN0QyxNQUFNelEsRUFBWW1aLEdBQW1CckgsRUFBV3JCLEdBQ2hEelEsRUFBVThGLFVBQVksRUFBVzdGLGFBQ2pDRCxFQUFVb04sWUFBY3FRLEdBQ3hCemQsRUFBVStNLGdCQUFrQjRKLEdBRTVCLE1BQU1pSyxFZmhFUCxTQUFvQjVnQixFQUFXclgsR0FXbEMsT0FUZ0IsU0FBb0JxZ0IsRUFBWTlDLEVBQVMwUSxHQUdyRCxNQUFNbkYsRUFBYzZKLEdBQWV0YixFQUFXZ0osRUFBWTROLEdBQ3BEeFIsRUFBZTRELEVBQVc1RCxhQUMxQjhWLEVBQWFHLEdBQWNyYixFQUFXb0YsRUFBYzRELEVBQVc4RixXQUNyRTVJLEVBQVN1TCxHQUNULE9BQU93SixHQUFZamIsRUFBV3JYLEVBQVF1eUIsRUFBWXpKLEVBQ3RELENBRUosQ2VvRDZCb1AsQ0FBVzdnQixFQUFXMmdCLEdBRzNDLE9BRkFDLEVBQWFsWCxTQUFXekosRUFDeEJELEVBQVVnVixRQUFVNEwsRUFDYjVnQixDQUNYLEVBQ01GLEVBQU1HLEVBQ1owZ0IsRUFBV2pYLFNBQVd6SixFQUV0QkgsRUFBSWdULEtBQU9BLEdBQ1hoVCxFQUFJZ2hCLE9BQVMvWixHQUNiakgsRUFBSWloQixXQUFhLEVBQ2pCamhCLEVBQUlraEIsU0FBV25CLEtBQ2YvTSxHQUFLMWxCLEtBQUt1ekIsR0FDVixNQUFNTSxFQUFhTixFQU9uQixPQUxBTSxFQUFXQyxRQUFVRCxFQUFXRSxPQUFVM1ksSUFDdEJlLEtBQ1I2VCxlQUFpQjVVLEdBQ2xCLEdBRUp5WSxDQUNYLENDMUZPLFNBQVNHLEdBQWNwaEIsRUFBV2lILEdBQ3JDLE1BQU1MLEVBQVNLLEVBQVFHLFFBQVFSLE9BQy9CLEdBQUlBLEdBQVVBLEVBQU9wQixRQUNqQixPQUFPLEVBRVgsTUFBTTZiLEVBUVYsU0FBZ0NyaEIsRUFBV2lILEdBQ3ZDLE1BQU1xYSxFQUFXdGhCLEVBQVV5USxNQUNyQm1CLEVBQWMzSyxFQUFRMkssWUFDdEIyUCxFQUFjM1AsRUFBWUssT0FFaEMsR0FEbUJ1UCxHQUFzQkYsRUFBVUMsR0FFL0MsT0FBTyxFQUVYLE9BQVF2aEIsRUFBVThSLFdBQ2QsS0FBS0MsR0FBWUMsVUFDYixPQUFPeVAsR0FBbUJILEVBQVVDLEdBQ3hDLEtBQUt4UCxHQUFZRyxRQUNiLE9BQU8xQixHQUFpQjhRLEVBQVVDLEdBRTFDLE9BQVEzUixHQUFVMFIsRUFBVUMsRUFBYWhRLEdBQzdDLENBdkIyQm1RLENBQXVCMWhCLEVBQVdpSCxHQUV6RCxRQUFJb2EsQ0FJUixDQWtCTyxTQUFTRyxHQUFzQkYsRUFBVUMsR0FHNUMsT0FGZUQsRUFBU3Q1QixTQUNOdTVCLEVBQVl2NUIsTUFFbEMsQ0N6Qk8sU0FBUzI1QixHQUFlbFIsRUFDL0JDLEVBQ0FvQixHQUVJLEdBRHNCMFAsR0FBc0IvUSxFQUFPQyxHQUUvQyxPQUFPLEdBRVgsT0FBUW9CLEdBQ0osS0FBS0MsR0FBWTZQLEtBQ2IsT0FBTyxFQUNYLEtBQUs3UCxHQUFZRyxRQUNiLE9BQU8xQixHQUFpQkMsRUFBT0MsR0FDbkMsS0FBS3FCLEdBQVlDLFVBQ2IsT0FBT3lQLEdBQW1CaFIsRUFBT0MsR0FFekMsT0FFSixTQUErQkQsRUFBT0MsR0FFbEMsSUFBSWUsRUFBY2hCLEVBQ2RvUixFQUFrQm5SLEVBQ3RCZSxFQUFjLElBQUloQixHQUNsQm9SLEVBQWtCLElBQUtuUixHQUFrQixJQUV6QyxJQUQwQmUsRUFBWWhQLE9BQU0sQ0FBQ2piLEVBQU84RSxJQU14RCxTQUF3QjlFLEVBQU84RSxFQUFPbWxCLEVBQWFvUSxHQUMvQyxNQUFNQyxFQUFVRCxFQUFnQnYxQixHQUNoQyxVQUFXLElBQVlzVCxFQUFXMEcsT0FBUSxDQUN0QyxNQUFNeWIsRUFBaUIsSUFBS3Y2QixHQUN0Qnc2QixFQUFrQixJQUFLRixHQUFXLENBQUMsR0FDbkNHLEVBQVVqb0IsT0FBTzhXLFFBQVFpUixHQUFnQnRmLE9BQU0sRUFBRWhQLEVBQUtqTSxLQUFXMDZCLEdBQWExNkIsRUFBT3c2QixFQUFnQnZ1QixJQUFNLFlBQ3RHc3VCLEVBQWV0dUIsVUFDZnV1QixFQUFnQnZ1QixFQUFJLE1BRS9CLE9BQU93dUIsQ0FDWCxDQUNBLE9BQU9DLEdBQWExNkIsRUFBT3M2QixHQUFTLFdBQ2hDclEsRUFBWTdQLE9BQU90VixFQUFPLEdBQzFCdTFCLEVBQWdCamdCLE9BQU90VixFQUFPLEVBQ2xDLEdBQ0osQ0FyQmtFNjFCLENBQWUzNkIsRUFBTzhFLEVBQU9tbEIsRUFBYW9RLEtBRXBHLE9BQU8sRUFFWCxPQUFPLENBQ1gsQ0FiV08sQ0FBc0IzUixFQUFPQyxFQUN4QyxDQThCQSxTQUFTd1IsR0FBYTE2QixFQUFPczZCLEVBQVNPLEdBQ2xDLFVBQWEsSUFBWXppQixFQUFXdUcsU0FDaEMsUUFBT3lKLEdBQVVwb0IsRUFBT3M2QixFQUFTdlEsS0FBb0IsRUFHekQsVUFEa0J1USxJQUNXbGlCLEVBQVd1RyxTQUNwQyxPQUFPLEVBR1gsTUFBTW1jLEVBQWtCUixHQUFTcFksU0FDN0I0WSxJQUNBUixFQUFVUSxHQUVHOTZCLEVBQU1raUIsV0FFbkJsaUIsRUFBUUEsRUFBTWtpQixVQUlsQixPQUZvQmxpQixFQUFNZ0IsYUFDSnM1QixFQUFRdDVCLFlBRTFCNjVCLElBQ08sSUFFWEEsSUFDTyxFQUNYLENDMUVPLFNBQVNaLEdBQW1CaFIsRUFBT0MsR0FFdEMsTUFBTUMsRUFBTUYsRUFBTXpvQixPQUNsQixJQUFLLElBQUlzRSxFQUFRLEVBQUdBLEVBQVFxa0IsSUFBT3JrQixFQUFPLENBR3RDLEdBRmFta0IsRUFBTW5rQixLQUNGb2tCLEVBQWVwa0IsR0FFNUIsT0FBTyxDQUVmLENBQ0EsT0FBTyxDQUNYLENIa0JBbTBCLEdBQWEsVUFBV1gsSUFDeEJXLEdBQWEsUUFBU1gsSUFDdEJXLEdBQWEsY0FBZVQsSUFDNUJTLEdBQWEsY0FBZVQsSUFDNUJTLEdBQWEsWUFBYVQsSUFhMUIsU0FBV2pPLEdBQ1BBLEVBQWtCLEtBQUksT0FFdEJBLEVBQXFCLFFBQUksVUFDekJBLEVBQWtCLEtBQUksT0FDdEJBLEVBQXVCLFVBQUksV0FDOUIsQ0FORCxDQU1HQSxLQUFnQkEsR0FBYyxDQUFDLElBaURsQ2pTLEdBQUl0VixRQUFVNjFCLEdBQ2R2Z0IsR0FBSVEsV0FWSixXQUNJLE1BQU0sSUFBSS9PLE1BQU0sOEdBQ3BCLEVBU0F1TyxHQUFJeWlCLElBUEosV0FDSSxNQUFNLElBQUloeEIsTUFBTSxtR0FDcEIsRUFNQXVPLEdBQUkwaUIsY0FBZ0IxaUIsR0FDcEJBLEdBQUkyaUIsTUFoQkosU0FBaUJDLEdBQ2IsTUFBTSxJQUFJbnhCLE1BQU0sMEhBQ3BCLEVBZUF1TyxHQUFJdVosT0k5R0csU0FBbUJzSixHQUN0QixNQUFNdmIsRUFBVW1DLEtBQ2hCLElBQUtuQyxFQUNELE1BQU0sSUFBSTdWLE1BQU0sOERBR3BCLElBQUlxeEIsRUFBaUJ4YixFQUFRSSxjQUM3QixLQUFPb2IsR0FBZ0IsQ0FFbkIsTUFBTWhRLEVBQVdnUSxFQUFlaFEsU0FDaEMsR0FBSUEsRUFFQSxJQUFLLE1BQU1pUSxLQUFlalEsRUFDdEIsR0FBSWlRLEVBQVlDLFFBQVVELEVBQVk3Z0IsVUFBVW9YLGtCQUV4Q3lKLEVBQVk3Z0IsU0FBU29YLGlCQUFpQnVKLEdBRXRDLE9BQU9FLEVBQVk1TixZQU1uQyxHQUFJMk4sRUFBZTVnQixVQUFVb1gsa0JBQ3JCd0osRUFBZTVnQixTQUFTb1gsaUJBQWlCdUosR0FFekMsT0FBT0MsRUFBZTNOLFlBSTlCMk4sRUFBaUJBLEVBQWVwYixhQUNwQyxDQUNBLE1BQU03VixFQUFVLGdEQUFnRGd4QixJQUVoRSxNQURBdDJCLFFBQVEyRixNQUFNTCxFQUFTLENBQUVneEIsYUFBWXZiLFlBQy9CLElBQUk3VixNQUFNSSxFQUNwQixFSjRFQW1PLEdBQUk2ZixPQUFTLEdBQ2I3ZixHQUFJOGYsVUFBWSxHQUNoQjlmLEdBQUlpakIsSUFBTSxTQUFVQyxHQUNoQixNQUFNLElBQUl6eEIsTUFBTSwwSEFDcEIsRUFDQXVPLEdBQUltakIsZUFBaUIsU0FBd0JoakIsR0FDekMsT0FBT0gsR0FBSUcsRUFBYzhSLEdBQVlDLFVBQ3pDLEVBQ0FsUyxHQUFJb2pCLFdBQWEsU0FBb0JqakIsR0FDakMsT0FBT0gsR0FBSUcsRUFBYzhSLEdBQVlHLFFBQ3pDLEVBRUFsWSxPQUFPQyxlQUFlNkYsR0FBSyxhQUFjLENBQ3JDLEdBQUF4SSxDQUFJNnJCLEdBQ0FBLEVBQWtCcmQsVUFBWSxFQUFXeEYsV0FDekM2aUIsRUFBa0IvVixZQUFjZ1AsR0FDaEMrRyxFQUFrQnJLLGNBQWdCSSxHQUNsQ2lLLEVBQWtCdmQsUUFBVTZRLEdBQzVCME0sRUFBa0JwVyxnQkFBa0IsV0FDaEMsT0FBTyxDQUNYLENBQ0osSUFFSi9TLE9BQU9DLGVBQWU2RixHQUFLLE1BQU8sQ0FDOUIsR0FBQXhJLENBQUk4ckIsR0FDQUEsRUFBZTFaLFNBQVcsQ0FDdEJvWCxPQUFRL1osR0FDUitMLEtBQUksSUFFUnNRLEVBQWV0ZCxVQUFZLEVBQVd2RixZQUN0QzZpQixFQUFlaFcsWUFBY3FRLEdBQzdCMkYsRUFBZXRLLGNBQWdCSSxHQUMvQmtLLEVBQWVyVyxnQkFBa0I0SixHQUNqQ3lNLEVBQWV4ZCxRQUFVNlEsRUFDN0IsSUdqSUcsTUFBTXBGLEdBQXNCLEVBQ3RCRSxHQUFtQixHRWpCekIsU0FBUzhSLEdBQXNCQyxFQUFXbHBCLEVBQU00TyxFQUFZNUQsRUFBY21LLEVBQVUySCxHQUN2RixPQUFJb00sU0FJQXBNLEVBQVEzSCxFQUhEblYsU0FNQSxJQUFnQndGLEVBQVd1RyxTQUU5Qi9MLEVBQUt5ZixLQUNMeUosRUFBVXpKLElBQU16ZixFQUFLeWYsSUFDZHpmLElBRVhrcEIsRUFBVXpKLElBQU16ZixFQUNUa3BCLEdBRVA3SSxHQUFnQnJnQixHQUNUQSxFQUVQbU0sR0FBUW5NLEdDeEJULFNBQTZCQSxFQUFNa3BCLEVBQVd0YSxFQUFZNUQsRUFBYzhSLEVBQU8zSCxHQUNsRixJQUFLLElBQUlqakIsRUFBUThOLEVBQUtwUyxPQUFTLEVBQUdzRSxHQUFTLElBQUtBLEVBQU8sQ0FDbkQsTUFBTTdELEVBQUkyUixFQUFLOU4sR0FDVGkzQixFQUFVRCxFQUFVaDNCLEdBQzFCOE4sRUFBSzlOLEdBQVMrMkIsR0FBc0JFLEVBQVM5NkIsRUFBR3VnQixFQUFZNUQsRUFBY21LLEVBQVUySCxFQUFRLEVBQ2hHLENBQ0EsT0FBTzljLENBQ1gsQ0RrQmVvcEIsQ0FBb0JwcEIsRUFBTWtwQixFQUFXdGEsRUFBWTVELEVBQWM4UixFQUFPM0gsR0V6QjlFLFNBQThCblYsRUFBTWtwQixFQUFXdGEsRUFBWTVELEVBQWM4UixFQUFPM0gsR0FDbkYsTUFBTWMsRUFBT3JXLE9BQU9xVyxLQUFLalcsR0FDekIsSUFBSyxNQUFNcEQsS0FBUXFaLEVBQU0sQ0FDckIsTUFBTTlmLEVBQVc2SixFQUFLcEQsR0FFaEJyTyxFQUFTMDZCLEdBRENDLEVBQVV0c0IsR0FDb0J6RyxFQUFVeVksRUFBWTVELEVBQWNtSyxFQUFVMkgsRUFBUSxHQUNwRyxHQUFJM21CLElBQWE1SCxFQUNiLFNBRUosTUFBTTg2QixFQUFZenBCLE9BQU82Z0IseUJBQXlCemdCLEVBQU1wRCxJQUFPTSxJQUMzRG1zQixJQUdKcnBCLEVBQUtwRCxHQUFRck8sRUFDakIsQ0FDQSxPQUFPeVIsQ0FDWCxDRldXc3BCLENBQXFCdHBCLEVBQU1rcEIsRUFBV3RhLEVBQVk1RCxFQUFjOFIsRUFBTzNILEVBQ2xGLENHcEJPLFNBQVNvVSxHQUEyQnZlLEVBQWM0RCxFQUN6RDlDLEdBQ0ksTUFBTVUsRUFBU1YsRUFBUVUsT0FDakJ1TyxFQUFhalAsRUFBUU8sTUFBTWMsT0FDM0JxYyxFQUFhek8sRUFBV25WLFVBQVVnVixRQUN4QyxJQUFJNk8sRUFBYTdhLEVBQVdoSixVQUFVZ1YsUUFDbEM4TyxHQUFZLEVBQ2hCLE1BQU1oZSxFQUFZa0QsRUFBV2hKLFVBQVU4RixVQUNqQ2llLEVBQWdCLEVBQVd4akIsY0FBZ0J1RixHQUFhLEVBQVd4RixhQUFld0YsRUFDeEYsR0FBSWllLEVBQ0FELEVBQVk5YSxFQUFXaEosVUFBVThGLFlBQWMsRUFBV3hGLFlBQWM0VSxHQUFXQyxFQUFZbk0sUUFFOUYsR0FBSTRhLEdBQWNDLEVBQVksQ0FFL0IsTUFBTWo1QixFQUFZdXFCLEVBQVduVixVQUFVRixLQUFLd1YsV0FDeEMxcUIsSUFFQWk1QixFQUFhN2EsRUFBV3VNLFdBSzVCdU8sRUFIb0JGLEVBQVdsYSxXQUNYbWEsRUFBV25hLFFBR25DLENBQ0EsTUFBTTFKLEVBQVlnSixFQUFXaEosVUFDN0IsSUFBSzhqQixFQUVELFlBNkVSLFNBQWtCM2UsRUFBYW5GLEVBQy9Cb0YsR0FDSSxNQUFNd0IsRUFBU3pCLEVBQVl5QixPQUUzQmlOLEdBRHNCMU8sRUFBWXNCLE1BQU1tTixPQUNWaE4sR0FDOUJKLEdBQWFyQixHQUNibkYsRUFBVW9OLFlBQVlwTixFQUFXbUYsRUFBYUMsRUFBY0QsRUFBWWdTLFlBQzVFLENBckZRNk0sQ0FBUzlkLEVBQVNsRyxFQUFXb0YsR0FHakMsTUFBTThYLEVBQWE2RyxHTHBDaEIsU0FBMkI1TyxFQUFZOE8sR0FLMUMsT0FEcUJ0QyxHQUhEc0MsRUFBYXhULE1BQ2IwRSxFQUFXdkQsWUFDSUssT0FDOEJrRCxFQUFXblYsVUFBVThSLFVBRTFGLENLOEJ3Q29TLENBQWtCL08sRUFBWW5WLEdBRWxFLEdBQUtrZCxFQUtEaFgsRUFBUWlILE9BQ1J2RyxFQUFPQyxRQUFRelosS0FBSzRiLElBR3hCK1UsR0FBYy9VLEtBQ1o5QyxFQUFRNWEsaUJBVlYsRUE0REosU0FBc0IwVSxFQUFXaUgsRUFBU2tPLEVBQVkvUCxFQUFjbUssR0FFaEUsTUFBTTRVLEVBQVdua0IsRUFBVXlRLE1BQ3JCZ0IsRUFBY2tLLEdBQWtCMVUsRUFBU2tPLEVBQVkvUCxFQUFjK2UsRUFBVTVVLEdBQzdFcUMsRUFBYzNLLEVBQVEySyxZQUU1QkEsRUFBWUMsVUFBWUosRUFDeEIsTUFBTWdLLEVBQWtCdEcsRUFBV3ZELFlBRW5DNkosRUFBZ0J4SixPQUFTTCxFQUFZSyxNQUV6QyxDQXJFUSxDQUFhalMsRUFBV2dKLEVBQVltTSxFQUFZL1AsRUFEL0JwRixFQUFVOFIsWUFBY0MsR0FBWXdKLEtBQU9oSyxHQUFtQkYsR0FHbkYsQ0FRSixDQUNPLFNBQVNzSyxHQUFrQjNTLEVBQVltTSxFQUFZL1AsRUFBY2dmLEVBQ3hFN1UsRUFBVTJILEdBQVEsR0FDZCxNQUFNaFIsRUFBVWlQLEVBQVcvTixRQUUzQixJQURlbEIsRUFBUVUsU0FDUFYsRUFBUU8sTUFBTWMsT0FBUSxDQUNsQyxNQUFNa0ssRUFBY0ksR0FBVXVTLEVBQWVwYixFQUFZa08sR0FDekRrTixFQUFjaDNCLFFBQVFxa0IsR0FHdEIsT0FGb0J6SSxFQUFXNEksWUFDbkJDLFVBQVlKLEVBQ2pCMlMsQ0FDWCxDQUNBLE1BR01DLEdBRk5sUCxFQURlalAsRUFBUU8sTUFBTWMsUUFDTjROLEdBQ1l2RCxZQUNLQyxVQUNsQ3lTLEVBQVcsR0FDakIsSUFBSyxJQUFJaDRCLEVBQVEsRUFBR0EsRUFBUTgzQixFQUFjcDhCLFNBQVVzRSxFQUFPLENBQ3ZELE1BQU04TixFQUFPZ3FCLEVBQWM5M0IsR0FFckIrZSxFQUFXZ1ksR0FEQ2dCLEVBQWdCLzNCLEdBQ2dCOE4sRUFBTTRPLEVBQVk1RCxFQUFjbUssRUFBVTJILEVBQVEsR0FDcEdvTixFQUFTbDNCLEtBQUtpZSxFQUNsQixDQUdBLE9BRnVCckMsRUFBVzRJLFlBQ25CQyxVQUFZeVMsRUFDcEJBLENBQ1gsQ0MxRU8sU0FBU0MsR0FBbUIzTixHQUMvQixNQUFNeFAsRUFBVXdQLEVBQVl4UCxRQUN0QlIsRUFBU1EsRUFBUVIsUUFDakIsS0FBRXFGLEVBQUksS0FBRTZHLEdBQVNELEdBQTBCekwsRUFBUXdMLFVBQ3pENFIsR0FBZXBkLEdBQ2YsSUFBSyxNQUFNaEcsS0FBUzBSLEVBQU0sQ0FFdEIsSUFBd0IsSUFEUjFSLEVBQU1nRyxRQUFRUixPQUNsQnBCLFFBQ1IsT0FFSmdmLEdBQWVwakIsRUFBTWdHLFFBQ3pCLENBQ2VSLEVBQU93RCxlQUVsQjZCLEVBQUt0ZSxRQUFRZ2xCLElBRWpCbk0sR0FBYVksRUFDakIsQ0FDQSxTQUFTb2QsR0FBZXBkLEdBQ3BCQSxFQUFRUixPQUFPcEIsU0FBVSxFQUN6QjRPLEdBQWdCaE4sRUFBUyxHQUM3QixDQ25CTyxTQUFTcWQsR0FBa0J6YixFQUFZNE4sRUFDOUMxUSxHQUNJLElBQUkrVixTQUNHL1YsRUFBUXVXLFNBS1hSLEV0QkdELFNBQThCaFYsR0FDakMsTUFBTUcsRUFBVUgsR0FBU0csUUFDbkJFLEVBQVlGLEdBQVNYLE1BQzNCLE9BQU9hLEdBQVc4USxPQUFPM1IsS0FDN0IsQ3NCWFFpZSxDQUFxQjlOLEdBQ1RzRixHQUFZbFQsRUFBWTROLEVBQWExUSxHQUdyQ2lXLEdBQWVuVCxFQUFZNE4sRUFBYTFRLEdBRXhELE1BQU15ZSxHQUFhL04sR0FBZTFCLEdBQVcwQixFQUFhcUYsR0FDMUQsR0FBSzBJLEdBUUEsR0FBSS9OLEVBQWEsQ0FDbEIsTUFBTTlXLEVBQU04VyxFQUFZNVcsVUFBVUYsSUFDbEMsR0FBSUEsR0FBT29HLEVBQVE1YSxZQUFjLEVBQUcsQ0FDaEMsTUFBTXM1QixFQUFnQmhPLEdBQWE1VyxVQUM3QjZrQixFQUFVRCxHQUFlOWtCLEtBVTNDLFNBQTZCQSxFQUFLOFcsRUFBYWlPLEdBQzNDLEdBQUkva0IsRUFBSWdHLFlBQWMsRUFBVy9GLElBQUssQ0FDbEMsTUFBTStrQixFQUFVRCxHQUFTOWtCLElBS3pCLFlBSEkra0IsSUFEV2hsQixFQUFJQyxLQUVmd2tCLEdBQW1CM04sR0FHM0IsQ0FDQSxHQUFJaU8sRUFBUyxDQUNULE1BQU1FLEVBQWNGLEVBQVE3bEIsUUFDNUIsR0FBSStsQixFQUFhLENBQ2IsTUFBTUMsRUFBWUQsR0FBYS84QixPQUUzQmc5QixJQURjbGxCLEVBQUlkLFFBQVFoWCxRQUUxQnU4QixHQUFtQjNOLEVBRTNCLENBQ0osQ0FDSixDQTVCWXFPLENBQW9CbmxCLEVBQUs4VyxFQUFhaU8sRUFDMUMsQ0FDSixNQWZnQixFRjhEYixTQUF1QjFQLEVBQVluTSxHQUN0QyxNQUFNcEMsRUFBU3VPLEVBQVcvTixRQUFRUixPQUNsQyxJQUFJc2UsR0FBVSxFQUNkLE1BQU03UyxFQUFZekwsRUFBT3lMLFVBQVl6TCxFQUFPeUwsV0FBYSxHQUNuRDhTLEVBQU85UyxFQUFVcnFCLE9BQVMsRUFDaEMsS0FBT2s5QixJQUFXQyxHQUFNLENBQ3BCLE1BQU1wVyxFQUFXc0QsRUFBVTZTLEdBQzNCLElBQUk1NEIsR0FBUyxFQUNiLE1BQU04NEIsRUFBUXJXLEVBQVM5TixTQUFTalosT0FBUyxFQUN6QyxLQUFPc0UsSUFBVTg0QixHQUdiLEdBRHVCeGUsSUFEVG1JLEVBQVM5TixTQUFTM1UsR0FDUThhLFFBQVFSLE9BSTVDLE9BRkFtSSxFQUFTOU4sU0FBU1csT0FBT3RWLEVBQU8sUUFDaEN5aUIsRUFBUzlOLFNBQVM3VCxLQUFLNGIsRUFJbkMsQ0FDSixDRWhGUXFjLENBQWN6TyxFQUFhcUYsR0FDM0JzSSxHQUFtQjNOLEdBQ25CLE1BQU0xUSxFQUFVK1YsRUFBVTdVLFFBQzFCbEIsRUFBUU8sTUFBTW1OLE9BQVNxSSxFQUN2Qi9WLEVBQVFPLE1BQU1jLE9BQVMwVSxFQUN2Qi9WLEVBQVFPLE1BQU0yUixNQUFRbFMsRUFBUU8sTUFBTUMsS0FDeEMsQ0FVQSxPQURBdVYsRUFBVTdXLGFBQWU0RCxFQUFXNUQsYUFDN0IsQ0FDSDZCLFFBQVNnVixFQUNUcUosWUFBYVgsRUFFckIsQ0NuQ08sU0FBU2xMLEdBQXNCN0MsRUFDdEM1TixFQUNBOUMsR0FDSSxNQUFNdmQsRUFBUzg3QixHQUFrQnpiLEVBQVk0TixFQUFhMVEsR0FDMUQsR0FBSXZkLEVBQU8yOEIsWUFBYSxDQUdwQixPQURBQyxHQURlcmYsRUFBUU8sTUFBTW1OLE9BQ0xqckIsRUFBT3NlLFNBQ3hCdGUsRUFBT3NlLE9BQ2xCLENBQ0EsT0FBT3dSLEdBQVd6UCxFQUFZOUMsRUFDbEMsQ0NWTyxTQUFTcVQsR0FBYXZaLEdBQ3pCLE9BQU8sRUFBV0EsWUFBY0EsRUFBVThGLFNBQzlDLENBRU8sU0FBU2lZLEdBQWM5VyxHQUMxQixNQUFNZixFQUFVZSxFQUFRRyxRQUNsQlIsRUFBU1YsRUFBUVUsT0FFakI0ZSxFQUFhak0sR0FERHRTLEVBQVFqSCxXQUUxQixHQUFJa0csRUFBUWlILE9BRVIsT0FEQXZHLEVBQU9DLFFBQVF6WixLQUFLNlosR0FDYkEsRUFHWCxHQUFJdWUsRUFBWSxDQUVaLE9BRGVoTSxHQUFpQnZTLEVBRXBDLENBQ0FmLEVBQVFpSCxPQUFTLEVBQ2J2RyxFQUFPQyxRQUFRN2UsU0FDZmlmLEVBQVVMLEVBQU9DLFFBQVE5UixNQUN6QjZSLEVBQU9DLFFBQVUsSUFFckIsTUFBTS9HLEVBQU0yWixHQUFzQnZULEVBQVFPLE1BQU1jLE9BQVFOLEVBQVNmLEdBRWpFLGNBRE9BLEVBQVFpSCxPQUNSck4sQ0FDWCxDQUVPLFNBQVMwWixHQUFpQnZTLEdBTTdCLE9BRGU4VyxHQUpNdFcsR0FBb0JSLEdBQ1RHLFFBQ05YLE1BQU1jLE9BSXBDLENDakNPLFNBQVNrWSxHQUFVeFksRUFBUzRXLEVBQVcsSUFDMUMsTUFBTTNYLEVBQVVlLEVBQVFHLFFBR2xCb2UsRUFBYWpNLEdBRER0UyxFQUFRakgsV0FFcEJvRixFQUFlNkIsRUFBUTdCLGFBQzdCLEdBQUljLEVBQVFpSCxPQUVSLE9BREEwUSxFQUFTendCLEtBQUs2WixHQUNQNFcsRUFHWCxHQUFJMkgsRUFDQSxPQUFPL0YsR0FBVXJhLEVBQWN5WSxHQUVuQyxNQUFNalgsRUFBU0ssRUFBUUcsUUFBUVIsT0FDL0IsR0FBSUEsSUFBNkIsSUFBbkJBLEVBQU9wQixRQUNqQixPQUFPcVksRUFFWCxNQUFNN1UsRUFBYS9CLEVBQ2J3ZSxFQUFjMWYsR0FBZWlELEVBQVdoSixXQUN4QzhGLEVBQVltQixFQUFRakgsVUFBVThGLFVBRTlCNGYsRUFEZ0J0Z0IsR0FBZ0JVLElBQWMsRUFBV3ZGLGVBQ3pCa2xCLEdBQWVyRSxHQUFjcFksRUFBV2hKLFVBQVdnSixJQUN6RixHQUFJQSxFQUFXNUIsUUFBUVIsT0FBUSxDQUMzQixNQUFNK2UsRTVENUJQLFNBQThCMWUsR0FDakMsTUFDTW9MLEVBRFNwTCxFQUFRRyxRQUFRUixPQUNOeUwsVUFDekIsSUFBS0EsRUFDRCxNQUFPLEdBRVgsTUFBTXVULEVBQWtCLEdBRXhCLElBQUssTUFBTTdXLEtBQVlzRCxFQUFXLENBQzlCLE1BQ013VCxFQUFZaFgsR0FESkUsRUFBU21KLE1BQ3dCbkosR0FDL0M2VyxFQUFnQng0QixRQUFReTRCLEVBQVV2NEIsSUFBSStoQixJQUMxQyxDQUNBLE9BQU91VyxDQUNYLEM0RGM0QkUsQ0FBcUI5YyxHQUN6QzZVLEVBQVN6d0IsUUFBUXU0QixFQUNyQixDQUNBLE9BQUlELEdBQ0FqRyxHQUFVcmEsRUFBY3lZLEdBQ3BCNEgsR0FDQTVILEVBQVN6d0IsS0FBSzRiLEdBRVg2VSxJQUVYQSxFQUFTendCLEtBQUs0YixHQUNQNlUsRUFDWCxDQ25DTyxTQUFTa0ksR0FBb0J2K0IsRUFBT3lmLEdBQ3ZDLE1BQU1MLEVBQVNLLEVBQVFHLFFBQVFSLE9BRXpCb2YsRUFBa0IsU0FBNkJ4N0IsRUFBU29kLEdBQzFELElBQXVCLElBQW5CaEIsRUFBT3BCLFFBSVgsT0FhRCxTQUF3QmhlLEVBQU95ZixFQUV0Q2dmLEVBQVFyZSxHQUVKLE1BQU1GLEVBQVlELEdBQW9CUixHQUNoQ2YsRUFBVXdCLEVBQVVOLFFBRTFCbEIsRUFBUWlILE9BQVMsRUFJakIsTUFBTWdOLEVBQWlCM3lCLEVBQU00eUIsTUFBTTZMLEVBQVFyZSxVQUdwQzFCLEVBQVFpSCxPQUVmLE9BRUcsU0FBMEJnTixFQUFnQmdGLEdBQzdDLE1BQU12WSxFQUFTdVksRUFBSy9YLFFBQVFSLE9BQzVCLEdBQUlBLEdBQVFwQixRQUNSLE9BRUosTUFBTTBnQixFQUFlekcsR0FBVU4sR0FFL0IsT0FEQXZCLEdBQXFCc0ksR0FDZGhILEdBQXNCL0UsRUFBZ0JnRixFQUFNLENBQUVDLGVBQWMsZ0JBQWMsSUFDckYsQ0FYbUIrRyxDQUFpQmhNLEVBQWdCelMsRUFFcEQsQ0E5QmUwZSxDQUFlSixFQUFnQkssWUFBYUwsRUFBZ0IvZSxRQUVuRXpjLEVBQVNvZCxFQUNiLEVBUUEsT0FOQW9lLEVBQWdCSyxZQUFjNytCLEVBRTlCdytCLEVBQWdCL2UsUUFBVUEsRUFJbkIrZSxDQUNYLENBNEJBLE1BQU1NLEdBQVMsZUFDVEMsR0FBZ0IsdUJBQ3RCLFNBQVMsS0FDTCxPQUFPQSxFQUNYLENBQ0EsU0FBUyxLQUNMLE9BQU9ELEVBQ1gsQ0M3RE8sU0FBU0UsR0FBWTF0QixFQUFPMnRCLEVBQWtCdjFCLEdBQ2pELE1BQU00VCxFQUFXNVQsRUFBT3UxQixHQUN4QixHQUFJM2hCLEVBQVUsQ0FDVixJQUFJNGhCLEdBQVUsRUFTZCxHQVJBNXRCLEVBQU02dEIsd0JBQTBCN3RCLEVBQU04dEIsZ0JBQ3RDOXRCLEVBQU04dEIsZ0JBQWtCLFdBQ3BCRixHQUFVLEVBQ1Y1dEIsRUFBTTZ0Qix3QkFBd0Jwc0IsS0FBS3pCLEdBQ25DQSxFQUFNOHRCLGdCQUFrQjl0QixFQUFNNnRCLCtCQUN2Qjd0QixFQUFNNnRCLHVCQUNqQixFQUNBN2hCLEVBQVNoTSxHQUNMQSxFQUFNK3RCLGtCQUFvQkgsRUFDMUIsTUFFUixDQUNBLE1BQU0vN0IsRUFBYXVHLEVBQU92RyxXQUN0QkEsR0FDQTY3QixHQUFZMXRCLEVBQU8ydEIsRUFBa0I5N0IsRUFFN0MsQ0NuQk8sU0FBU204QixHQUF3QjdmLEVBQVM5SSxFQUFXM1QsRUFBU3NhLEdBQ2pFLE1BQU0zWSxFQUFNOGEsRUFBUThmLFdBQ2ROLEVBa0JILFNBQStCdG9CLEdBRWhCLFNBQWRBLElBQ0FBLEVBQVksWUFFaEIsTUFBTyxJQUFNQSxDQUNqQixDQXhCNkI2b0IsQ0FBc0I3b0IsR0FDN0IsU0FBZEEsSUFDQUEsRUFBWSxZQUVoQixNQUNNOG9CLEVBRFNoZ0IsRUFBUUcsUUFBUVIsT0FDUHNnQixPQUN4QixJQUFLRCxFQUFTOW9CLEdBQVksQ0FDdEIsTUFBTWdwQixFQUFXLFNBQXVCcnVCLEdBQ3BDMHRCLEdBQVkxdEIsRUFBTzJ0QixFQUFrQjN0QixFQUFNNUgsT0FDL0MsRUFDQSsxQixFQUFTOW9CLEdBQWFncEIsRUFDdEJoN0IsRUFBSWkwQixpQkFBaUJqaUIsRUFBV2dwQixFQUNwQyxDQUdBMzhCLEVBQVFpOEIsR0FBb0IzaEIsRUFDNUJ0YSxFQUFRMlQsR0FBYTJHLENBQ3pCLENDbkJPLFNBQVNzaUIsR0FBeUI1OEIsRUFBUzY4QixFQUFjcGdCLEVBQVNuTSxHQUNyRSxNQUFNd3NCLEVBQU0sWUFBYTFmLEdBQ3JCLE9BQU8wZixFQUFJakIsWUFBWTc3QixFQUFTb2QsRUFDcEMsRUFFQTBmLEVBQUlqQixZQUFjZ0IsRUFDbEJDLEVBQUlyZ0IsUUFBVUEsRUFDZDZmLEdBQXdCN2YsRUFBUTZILFdBQVloVSxFQUFVdFEsRUFDdEQ4OEIsRUFDSixDQ1ZPLFNBQVNDLEdBQWlCMXBCLEdBQzdCLE9BQU81TCxNQUFjNEwsSUFBbUMsSUFBVUEsQ0FDdEUsQ0NLTyxTQUFTMnBCLEdBQTJCdm9CLEVBQVFwQixFQUFXclQsRUFBUzRhLEVBQWNtUyxFQUFVblEsRUFBU0ksR0FDcEcsSUFBSStmLEdBQWlCMXBCLEdBSXJCLFVBQVdBLElBQWMrQixFQUFXMEcsT0FVWCxJQUFyQnpJLEVBQVU3VixRQUdkdXZCLEVBQVMvc0IsRUFBU3FULEVBQVc4QixRQVp6QixJQUFLLE1BQU0zSSxLQUFRNkcsRUFBVyxDQUMxQixNQUFNYSxFQUFZN0QsRUFBYzdELEdBR2hDeWdCLEdBQWlCemdCLEVBRkg2RyxFQUFVN0csR0FFTWlJLEVBQVF6VSxFQUFTNGEsRUFEOUJxSixHQUNzRHJILEVBQVNJLEVBQWU5SSxFQUNuRyxDQVFSLENDTUEsU0FBU2tRLEdBQWdCcGtCLEVBQVN3TSxHQUM5QnhNLEVBQVFva0IsZ0JBQWdCNVgsRUFDNUIsQ0M3Qk8sU0FBU3l3QixHQUF5QmpnQyxFQUFPMmQsRUFBYUMsRUFBY25HLEdBQ3ZFLE1BQU15b0IsRUFBa0J2aUIsRUFDbEJ3aUIsRUFBV25nQyxFQUNqQixHQUFJbWdDLEdBQVU3aEIsVUFBVyxDQUNyQixNQUFNOGhCLEVBQVd6aUIsRUFBWTNkLE1BRTdCLE9BQUtvZ0MsR0FBVTloQixlQVFmOGhCLEVBQVM3YSxnQkFBZ0I0YSxFQUFVeGlCLEVBQ25DQyxJQVJJdWlCLEVBQVM3RSxRQUFTLEVBQ2xCM2IsR0FBa0JoQyxHQUNsQndpQixFQUFTL08scUJBQXFCOE8sRUFBZ0I1c0IsU0FBVXRULEVBQU9rZ0MsRUFBZ0JsOUIsUUFBU205QixFQUFVRCxFQUFpQnRpQixFQUFjcUosSUFDaklwQixVQUNBcWEsRUFBZ0IxbEIsU0FBVzJsQixHQU1uQyxDQUNBLEdBQUlELEVBQWdCRyxXQUtoQixPRHZCRCxTQUFpQzVvQixFQUFRcEIsRUFBV2tPLEVBQVd2aEIsRUFBUzRhLEVBQWNtUyxFQUFVM0UsRUFBVXBMLEdBRTdHLEdBQUl1RSxFQUFXLENBQ1gsR0FBSXdiLEdBQWlCMXBCLElBQTRCLEtBQWRBLEVBRS9CLFlBREFyVCxFQUFRb2tCLGdCQUFnQjdDLEdBRzVCLFVBQVcsSUFBZ0JuTSxFQUFXMEcsT0FFbEMsVUFEeUIsSUFBZ0IxRyxFQUFXMEcsT0FFaEQsSUFBSyxNQUFNdFAsS0FBUStVLEVBRVgvVSxLQUFRNkcsR0FHWixFQUFhelEsS0FBSyxDQUFDd2hCLEdBQWlCLENBQUNwa0IsRUFBU3dNLFVBSWxELElBQUssTUFBTUEsS0FBUStVLEVBQ2YsRUFBYTNlLEtBQUssQ0FBQ3doQixHQUFpQixDQUFDcGtCLEVBQVN3TSxJQUk5RCxDQUNBd3dCLEdBQTJCdm9CLEVBQVFwQixFQUFXclQsRUFBUzRhLEVBQWNtUyxFQUFVM0UsRUFBVXBMLEVBQzdGLENDUFFzZ0IsQ0FBd0I3b0IsRUFBUXpYLEVBQU9rZ0MsRUFBZ0JsZ0MsTUFBT2tnQyxFQUFnQmw5QixRQUM5RTRhLEVBQWNzaUIsRUFBZ0JuUSxTQUFVLEdBQ3hDbVEsRUFBZ0JsZ0Isb0JBQ2hCa2dCLEVBQWdCbGdDLE1BQVFBLEdBRzVCLE1BQU1nRCxFQUFVazlCLEVBQWdCbDlCLFNDaUM3QixTQUE4QjY4QixFQUFjdnNCLEVBQVVvTCxFQUFTMWIsRUFBU3ljLEVBQVNzUSxFQUFVN1ksR0FFOUYsR0FBSSxHQUFXMm9CLEdBQ1gsT0F3QlIsU0FBcUJwZ0IsRUFBU29nQixFQUFjNzhCLEVBQVNzUSxFQUFVNEQsRUFBVzZZLEVBQVVyUixHQUNoRixNQUFNOE8sRUFBVS9OLEVBQVFqSCxVQUFVZ1YsUUFFNUIrUyxHQURZL1MsR0FBU2xQLFdBQWFrUCxHQUFTdEwsVUFBVTVELGFBQzNCLEVBQVd4RixXQUMzQyxJQUFLeW5CLEVBQ0QsT0FBT0MsR0FBc0I5aEIsRUFBU21oQixFQUFjcGdCLEVBQVNuTSxFQUFVdFEsR0FFM0UsT0FBT3k5QixHQUE2QlosRUFBYzc4QixFQUFTc1EsRUFBVTRELEVBQVc2WSxFQUFVdFEsRUFDOUYsQ0FoQ2VpaEIsQ0FBWWpoQixFQUFTb2dCLEVBQWM3OEIsRUFBU3NRLEVBQVU0RCxFQUFXNlksRUFBVXJSLEdBRS9FK2hCLEdBQTZCWixFQUFjNzhCLEVBQVNzUSxFQUFVNEQsRUFBVzZZLEVBQVV0USxFQUM5RixDRHRDSWtoQixDQUFxQjNnQyxFQUFPa2dDLEVBQWdCNXNCLFNBQVU0c0IsRUFBaUJsOUIsRUFBUzRhLEVBQWNzaUIsRUFBZ0JuUSxTQUFVbVEsRUFBZ0JocEIsV0FDeEl5RyxFQUFZM2QsTUFBUUEsQ0FFeEIsQ0UzQk8sU0FBUzRnQyxHQUE0QnR0QixFQUFVdUgsRUFBTzdYLEVBQVNvb0IsRUFBVTJFLEVBQ2hGdFksRUFBUXVJLEdBQ0osTUFBTTZnQixFQUFhelYsRUFBUzVxQixPQTRCNUIsU0FBU3NnQyxFQUFNcnBCLEdBQ1gsTUFBTXNwQixFQU1kLFNBQWdDbG1CLEVBQU9wRCxFQUFRb3BCLEdBQzNDLE9BQU9obUIsRUFBTXpOLFFBQU8sQ0FBQ0MsRUFBS3JOLEtBRXRCLEdBRGlCNFQsRUFBZTVULElBQ2hCLEVBQUcsQ0FDZixNQUFNZ2hDLEVBQVVILElBQ1ZJLEVBQVl4cEIsRUFBT3VwQixHQUV6QixPQURBM3pCLEVBQUl6SCxLQUFLcTdCLEdBQ0Y1ekIsQ0FDWCxDQUVBLE9BREFBLEVBQUl6SCxLQUFLNUYsR0FDRnFOLENBQUcsR0FDWCxHQUNQLENBbEI0QjZ6QixDQUF1QnJtQixFQUFPcEQsRUFBUW9wQixHQUFZM29CLEtBQUssSUFDM0U2WCxFQUFTL3NCLEVBQVNzUSxFQUFVeXRCLEVBQ2hDLENBRUEsT0EvQkFsbUIsRUFBTTFVLFNBQVNuRyxJQUVYLEdBRGlCNFQsRUFBZTVULElBQ2hCLEVBQUcsQ0FDZixNQUFNZ2hDLEVBQVU1VixFQUFTNXFCLE9BQ25CZ2EsRUFBV2dWLEdBQWdCeHZCLEdBQzNCMmQsRUFBYyxDQUNoQkUsWUFBYSxFQUNieWQsUUFBUSxFQUNSdDRCLFVBQ0FzUSxTQUFVQSxFQUNWd1osb0JBQW9CLEVBQ3BCdFMsV0FDQW5HLFdBQVkrVyxFQUFTNXFCLE9BQ3JCd2YsZ0JBQ0E4SyxTQUFVLElBQUl4SSxJQUdsQjlILEVBQVM4VyxjQUFnQixTQUEwQnR4QixFQUFPMmQsRUFBYTZELEVBQVkyZixLQUM3RXhqQixFQUFZRSxZQUNkaWpCLEVBQU1LLEVBQ1YsRUFDQSxNQUFNRixFQUFZeHBCLEVBQU91cEIsR0FDekJyakIsRUFBWTNkLE1BQVFpaEMsRUFDcEI3VixFQUFTeGxCLEtBQUsrWCxFQUNsQixLQU1KbWpCLEVBQU1ycEIsR0FDQzJULENBQ1gsQ0FjTyxTQUFTZ1csR0FBdUI5dEIsRUFBVXRULEVBQU9nRCxFQUFTNGMsRUFBU0ksRUFBZStQLEVBQ3pGdFEsRUFBU3ZJLEVBQVdtcUIsRUFBVWpXLEdBQzFCLE1BQU01USxFQUFXZ1YsR0FBZ0J4dkIsR0FDM0IyZCxFQUFjLENBQ2hCRSxZQUFhLEVBQ2J5ZCxRQUFRLEVBQ1J0NEIsVUFDQXNRLFdBQ0F5YyxXQUNBL3ZCLFFBQ0E4c0Isb0JBQW9CLEVBQ3BCdFMsV0FDQXNRLFNBQVUsSUFBSXhJLEdBQ2RqTyxXQUFZZ3RCLEVBQ1pyaEIsaUJBTUosT0FKQUosRUFBUWhhLEtBQUsrWCxHQUNibkQsRUFBUzhXLGNBQWdCMk8sR0NyRXRCLFNBQTBDM3NCLEVBQVV0VCxFQUFPMmQsRUFBYTNhLEVBQVMrc0IsRUFBVXRRLEVBQVN2SSxFQUFXb3FCLEdBR2xILEdBRkEzakIsRUFBWTNhLFFBQVVBLEVBQ3RCMmEsRUFBWW9TLFNBQVdBLFNBQ1osSUFBWTNYLEVBQVd1RyxTQUM5QixPQUFPNmhCLEdBQXNCN2lCLEVBQWEzZCxFQUFPeWYsRUFBU25NLEVBQVV0USxHQUl4RSxHQUZBMmEsRUFBWXJLLFNBQVdBLEVBQ3ZCcUssRUFBWXpHLFVBQVlBLEVBQ3BCbFgsR0FBT3NlLFVBQ1AsT0FJUixTQUErQjlPLEVBQU14UCxFQUFPMmQsRUFBYUMsRUFBYzVhLEdBQ25FaEQsRUFBTW94QixxQkFBcUI1aEIsRUFBTXhQLEVBQU9nRCxFQUFTaEQsRUFBTzJkLEVBQWFDLEVBQWNxSixJQUNuRnRKLEVBQVluRCxTQUFXeGEsQ0FDM0IsQ0FQZXVoQyxDQUFzQmp1QixFQUFVdFQsRUFBTzJkLEVBQWE4QixFQUFTemMsR0FFakV3K0IsR0FBc0JsdUIsRUFBVXRULEVBQU9nRCxFQUFTK3NCLEVBQVU3WSxFQUFXeUcsRUFDaEYsQ0QwREk4akIsQ0FBaUNudUIsRUFBVXRULEVBQU8yZCxFQUFhM2EsRUFBUytzQixFQUFVdFEsRUFBU3ZJLEdBQzNGeUcsRUFBWTNkLE1BQVFBLEVBQ2IyZCxDQUNYLENFNUVPLFNBQVMrakIsR0FBWUMsR0FDeEIsT0FBSSxHQUFTQSxJQUFhLGFBQWNBLEVBQzdCQSxFQUFTbm5CLFVBQ1osQ0FFWixDSFFPLFNBQVN5VixHQUFpQjNjLEVBQVV0VCxFQUFPeVgsRUFDbER6VSxFQUFTeWMsRUFBU3NRLEVBQ2xCM0UsRUFBVXBMLEVBQWU5SSxHQUNyQixNQUFNbXFCLEVBQVdLLEdBQVlwdUIsR0FDN0IsSUFBSXN1QixFQUFZUCxHQUFZLFFBQWdCNTJCLElBQVZ6SyxHQUE2QyxpQkFBZixFQUM1RDZoQyxFQUFnQnBxQixFQUFPNHBCLEdBRXZCcmhDLEdBQU9zZSxVQUNQdWpCLEVBQWdCN2hDLEVBRVhzVCxHQUFVZ0wsWUFDZnNqQixHQUFZLEVBQ1pDLEVBQWdCdnVCLEVBQ2hCdFQsRUFBUXNULEdBRVosTUFBTWtILEVBQVdxbkIsRUFDakIsR0FBSXJuQixHQUFVOEQsVUFDVixPSTNCRCxTQUFrQ3RlLEVBQU9vckIsRUFBVXBMLEVBQWV4RixFQUFVNm1CLEVBQVU1aEIsRUFBU25NLEVBQVV0USxFQUFTNCtCLEdBQ3JILE1BQU1qa0IsRUFBYzRSLEdBQWN2dkIsRUFBT29yQixHQUFZLElBQUksRUFBTXBMLEdBYS9ELE9BWkFyQyxFQUFZM2EsUUFBVUEsRUFDdEIyYSxFQUFZdEosV0FBYWd0QixFQUN6QjFqQixFQUFZMmQsUUFBUyxFQUNyQjNkLEVBQVkwaUIsV0FBYXVCLEVBQ3pCamtCLEVBQVlta0IsV0FBYTdoQixHQUFvQlIsR0FDN0M5QixFQUFZb1AsYUFBZXROLEVBQzNCRSxHQUFrQmhDLEdBQ2xCbkQsRUFBUzRXLHFCQUFxQjlkLEVBQVV0VCxFQUN4Q2dELEVBQVN3WCxFQUFVbUQsRUFBYThCLEVBQVN3SCxJQUN6Q3BCLEtBQ0FsSSxFQUFZb2tCLFlBQWNwa0IsRUFBWW5ELFNBQ3RDbUQsRUFBWW5ELFNBQVdBLEVBQ2hCbUQsQ0FDWCxDSlllcWtCLENBQXlCaGlDLEVBQU9vckIsRUFBVXBMLEVBQWV4RixFQUFVNm1CLEVBQVU1aEIsRUFBU25NLEVBQVV0USxFQUFTNCtCLEdBRXBILEdBQUlBLEVBQVcsRUFFTyxJQUFkUCxHQUFtQk8sSUFDbkJDLEVBQWdCdnVCLEdBRXBCLE1BQU1xSyxFQUFjNFIsR0FBY3NTLEVBQWV6VyxHQUFVLEVBQU1wTCxHQUNqRXJDLEVBQVl0SixXQUFhZ3RCLEVBQ3pCMWpCLEVBQVkyZCxRQUFTLEVBQ3JCM2QsRUFBWTNhLFFBQVVBLEVBQ3RCMmEsRUFBWTBpQixZQUFhLEVBQ3pCMWlCLEVBQVlvUyxTQUFXQSxFQUt2QixPQUppQnBTLEVBQVluRCxTQUNwQjhXLGNBQWdCMk8sR0FFekJELEdBQTJCdm9CLEVBQVFvcUIsRUFBZTcrQixFQUFTeWMsRUFBU3NRLEVBQVUzRSxFQUFVcEwsR0FDakZyQyxDQUNYLENBQ0EsR0FBSXBjLE1BQU13ZCxRQUFRL2UsR0FDZCxPQUFPNGdDLEdBQTRCdHRCLEVBQVV0VCxFQUFPZ0QsRUFBU29vQixFQUFVMkUsRUFBVXRZLEVBQVFnSSxFQUFRRyxTQUVyRyxNQUFNcWlCLEVBQVdQLEdBQVkxaEMsR0FDN0IsR0FBSWlpQyxHQUFZLEVBQUcsQ0FFZixPQUFPYixHQUF1Qjl0QixFQURoQm1FLEVBQU93cUIsR0FDMEJqL0IsRUFBU29vQixFQUFVcEwsRUFBZStQLEVBQVV0USxFQUFTdkksRUFBVytxQixFQUNuSCxDQUVBLE9BQU9ULEdBQXNCbHVCLEVBQVV0VCxFQUFPZ0QsRUFBUytzQixFQUFVN1ksRUFBVzhJLEVBQ2hGLENBVU8sU0FBU3lnQixHQUE2QlosRUFBYzc4QixFQUFTc1EsRUFBVTR1QixFQUFTblMsRUFBVXRRLEdBRTdGLElBQWdCLElBQVp5aUIsRUFBSixDQUlBLE9BQVFyQyxHQUNKLFVBQUtwMUIsRUFDTCxLQUFLLEVBQ0wsS0FBSyxLQUVELFlBREEsRUFBYTdFLEtBQUssQ0FBQ3U4QixHQUFrQixDQUFDbi9CLEVBQVNzUSxLQUd2RCxHQUFJLEdBQVd1c0IsR0FDWCxPQUFPRCxHQUF5QjU4QixFQUFTNjhCLEVBQWNwZ0IsRUFBU25NLEdBR3BFeWMsRUFBUy9zQixFQUFTc1EsRUFBVXVzQixFQVo1QixNQUZJOVosR0FBaUJ6UyxFQUFVdXNCLEVBQWM3OEIsRUFBU2svQixFQWUxRCxDQVVPLFNBQVMxQixHQUFzQjloQixFQUFTbWhCLEVBQWNwZ0IsRUFBU25NLEVBQVV0USxHQUU1RTY4QixFQUFldEIsR0FBb0JzQixFQUFjcGdCLEdBR2pELE9BRmlCZixFQUFRbEUsU0FDaEI4VyxjQUFnQjJPLEdBQ2xCTCxHQUF5QjU4QixFQUFTNjhCLEVBQWNwZ0IsRUFBU25NLEVBQ3BFLENBQ0EsU0FBUzZ1QixHQUFpQm4vQixFQUFTc1EsR0FDL0J0USxFQUFRb2tCLGdCQUFnQjlULEVBQzVCLENFdEZPLFNBQVNrdUIsR0FBc0JsdUIsRUFBVXRULEVBQU9nRCxFQUFTK3NCLEVBQVU3WSxFQUFXMEksR0FDakYsT0FBSTFJLEVBQ082TyxHQUFpQnpTLEVBQVV0VCxFQUFPZ0QsRUFBU2tVLEdBRWpDLG1CQUFWbFgsRUd2QlIsU0FBNkJBLEVBQU9nZ0IsRUFDM0MxTSxFQUFVdFEsRUFBUytzQixHQUNmLE1BQU1xUyxFQUFhcGlDLElBQ2JxaUMsRUFBbUIsQ0FDckIvakIsVUFBVyxlQUNYaUgsZ0JBQWlCLENBQUNKLEVBQVFnUSxFQUFjdlgsS0FDcEMsTUFBTWlHLEVBQVc3akIsSUFDakIsT0FBTytkLEVBQVd2RCxTQUFTK0ssZ0JBQWdCMUIsRUFBVTlGLEVBQVlILEVBQWEsRUFFbEZnSSxZQUFhLEVBQ2J3TCxxQkFBc0IsRUFDdEJoVCxRQUFTLENBQUMrVyxFQUFjdlgsS0FDcEJHLEVBQVd2RCxTQUFTNEQsUUFBUUwsRUFBWUgsRUFBYSxFQUV6RDBULGNBQWUsQ0FBQ3R4QixFQUFPMmQsRUFBYUMsRUFBY25HLE9BQzVDa0csRUFBWUUsWUFDZCxNQUFNZ0csRUFBVzdqQixJQUdqQitkLEVBQVd2RCxTQUFTOFcsY0FBY3pOLEVBQ2xDOUYsRUFBWUgsRUFBY25HLEdBQzFCc0csRUFBVy9kLE1BQVE2akIsQ0FBUSxHQUc3QjlGLEVBQWEsQ0FDZkYsWUFBYSxFQUNieWQsUUFBUSxFQUNSdDRCLFVBQ0FnZCxnQkFDQWhnQixNQUFPb2lDLEVBQ1A1bkIsU0FBVWdWLEdBQWdCNFMsR0FFMUIvdEIsWUFBYSxFQUNieVksb0JBQW9CLEVBQ3BCaEMsU0FBVSxJQUFJeEksSUFFWjNFLEVBQWMsQ0FDaEJFLFlBQWEsRUFDYnlkLFFBQVEsRUFDUmxRLFNBQVUsQ0FBQ3JOLEdBQ1gvYSxVQUNBZ2QsZ0JBQ0FoZ0IsUUFDQXdhLFNBQVU2bkIsRUFFVmh1QixZQUFhLEVBQ2J5WSxvQkFBb0IsRUFDcEJoQyxTQUFVLElBQUl4SSxJQUdsQixPQURBdkUsRUFBV3ZELFNBQVM0VyxxQkFBcUI5ZCxFQUFVOHVCLEVBQVlwL0IsRUFBUythLEVBQVd2RCxTQUFVdUQsRUFBWSxDQUFDLEVBQUdnUyxHQUN0R3BTLENBQ1gsQ0gzQmUya0IsQ0FBb0J0aUMsRUFBTzRmLEVBQVN0TSxFQUFVdFEsRUFBUytzQixRQUVsRUEsRUFBUy9zQixFQUFTc1EsRUFBVXRULEVBQ2hDLENJN0JPLFNBQVN1aUMsR0FBdUJ2aUMsRUFBTzJkLEVBQWFDLEVBQWM1YSxFQUFTd00sRUFBTXVnQixHQUNwRixNQUFNNUIsRUFBU3hRLEVBQVluRCxTQUNyQjJsQixFQUFXbmdDLEVBR2pCLEdBRm9CbXVCLEVBQU81SSxnQkFBZ0I0YSxFQUFVeGlCLEVBQ3JEQyxHQUNrQixFQUFHLENBQ2pCdVEsRUFBTy9QLFFBQVFULEVBQWFDLEdBQzVCNWEsRUFBUW9rQixnQkFBZ0I1WCxHQUN4QixNQUFNZ3pCLEVBQVloVCxHQUFnQnh2QixHQUlsQyxPQUhBd2lDLEVBQVVsSCxRQUFTLEVBQ25Ca0gsRUFBVXBSLHFCQUFxQjVoQixFQUFNeFAsRUFBT2dELEVBQVN3L0IsRUFBVzdrQixFQUFhQyxFQUFjbVMsUUFDM0ZwUyxFQUFZbkQsU0FBV2dvQixFQUUzQixDQUNKLENDVk8sU0FBU0MsR0FBdUJqekIsRUFBTXhQLEVBQzdDZ0QsRUFBU3dYLEVBQVVtRCxFQUFheVgsRUFBZXJGLEdBRTNDdlYsRUFBUzRELFFBQVVza0IsR0FDbkJsb0IsRUFBUytLLGdCQUFrQm9kLEdBQzNCbm9CLEVBQVM4VyxjQUFnQixDQUFDdHhCLEVBQU8yZCxFQUFhQyxJQUNuQzJrQixHQUF1QnZpQyxFQUFPMmQsRUFBYUMsRUFBYzVhLEVBQVN3TSxFQUFNdWdCLEdBRW5GLE1BQU03WSxFQUFZN0QsRUFBYzdELEdBQ2hDZ3lCLEdBQXNCaHlCLEVBQU14UCxFQUFPZ0QsRUFBUytzQixFQUFVN1ksRUFBV3lHLEdBQ2pFQSxFQUFZbkQsU0FBV0EsQ0FDM0IsQ0NUTyxTQUFTa29CLEdBQXNCL2tCLEdBQ2xDLE1BQU0zYSxFQUFVMmEsRUFBWTNhLFFBQ3RCd00sRUFBT21PLEVBQVlySyxTQUN6QnRRLEVBQVFva0IsZ0JBQWdCNVgsRUFDNUIsQ0FDTyxTQUFTb3pCLEdBQWdCNWlDLEdBQzVCLE1BQU8sQ0FDSHNlLFVBQVcsU0FDWHRlLFFBQ0FveEIscUJBQXNCcVIsR0FDdEI3YyxZQUFhaWQsR0FDYnprQixRQUFTMGtCLEdBRVR2ZCxnQkFBaUJ3ZCxHQUNqQnpSLGNBQWUwUixHQUd2QixDQUNBLFNBQVNBLEdBQW9CbmYsRUFDN0JsRyxFQUFhQyxHQUNULE9BQUlpRyxJQUFhbEcsRUFBWTNkLE1BQ2xCLEVBRUpxbEIsR0FBeUIxSCxFQUFha0csRUFBVWpHLEVBQzNELENBQ0EsU0FBU2lsQixHQUF1QjdpQyxFQUNoQzJkLEVBQWFDLEVBQWNkLEVBQWM0SSxHQUNyQyxNQUFNdWQsRUFBY25kLEdBQWM5bEIsR0FDbEM4YyxFQUFlYSxFQUFZZ1MsWUFFM0IsTUFBTTVULEVBQVE0QixFQUFZNUIsTUFBUSxDQUFDc0IsRUFBaUIsQ0FBQ1AsRUFBY21tQixFQUFhLFNBQTBCaGlDLEdBQzlGMGMsRUFBWXNQLGVBQWlCaHNCLFNBQ3RCMGMsRUFBWTVCLEtBQ3ZCLEVBQUcsMkJBQ1hULEVBQWMxVixLQUFLbVcsRUFDdkIsQ0FDTyxTQUFTK21CLEdBQWtCbGpCLEdBQzlCLElBQUtBLEVBQVFxTixnQkFBa0JyTixFQUFRN0QsTUFFbkMsWUFEQTZELEVBQVE3RCxNQUFNLEdBQUssR0FHdkIsTUFBTXBYLEVBQU1pYixFQUFRcU4sc0JBQ2JyTixFQUFRcU4sZUFDZjNRLEVBQWdCM1gsRUFBSyxvQkFDekIsQ0FDTyxTQUFTZytCLEdBQXVCOWUsRUFBVWxHLEdBRzdDLE9BRm1Ca0csU0FDbUJBLElBQWFsRyxFQUFZM2QsTUFFcEQsRUFFSixDQUNYLENBQ08sU0FBUytpQyxHQUFtQ2xmLEVBQVVsRyxHQUd6RCxPQUZtQmtHLGdCQUM0QixJQUFlekwsRUFBVzBHLFFBTXpFZ2tCLEdBQWtCbmxCLEdBQ1gsSUNsRUosU0FBbUMzZCxFQUFPMmQsR0FDN0MsTUFBTXNsQixFQUFjbmQsR0FBYzlsQixHQUNsQyxHQUFJMmQsRUFBWTVCLE1BR1osWUFEQTRCLEVBQVk1QixNQUFNLEdBQUcsR0FBS2tuQixHQUc5QixNQUFNQyxFQUFXdmxCLEVBQVlzUCxlQUM3QixFQUFhcm5CLEtBQUssQ0FBQ2lXLEVBQVksQ0FBQ29uQixFQUFhQyxJQUNqRCxDRHFEUUMsQ0FBMEJ0ZixFQUFVbEcsR0FDN0IsRUFJZixDRXBFTyxTQUFTeWxCLEdBQXNCdmYsRUFBVW5GLEdBRTVDLE9BQUtLLEdBQVE4RSxHQUlOLEdBSEgwSSxHQUFvQjdOLEdBQ2IsRUFHZixDQ0xPLFNBQVMya0IsR0FBZ0IxbEIsRUFBYTNkLEVBQzdDNGQsRUFBYzhILEdBQ1YsTUFBTTRkLE9BQW1DNzRCLElBQTFCa1QsRUFBWXFOLFVBQ3ZCc1ksSUFDQTNsQixFQUFZcU4sVUFBWSxJQUU1QixNQUFNQSxFQUFZck4sRUFBWXFOLFVBQzlCLElBQUl1WSxFQUFzQjVsQixFQUFZZ1MsWUFDbENqRSxFQUFVLEVBRWQsTUFBTThYLEVBQWUsR0FFckIsSUFBS0YsRUFBUSxDQUVULElBQUssSUFBSXgrQixFQUFRLEVBQUdBLEVBQVFrbUIsRUFBVXhxQixTQUFVc0UsRUFBTyxDQUNuRCxNQUFNYSxFQUFPcWxCLEVBQVVsbUIsR0FFakIyK0IsRUFBYWhZLEdBQWtCenJCLEVBQU84RSxFQUFPa21CLEVBQVdVLEdBQzNDLElBQWYrWCxFQUtlLElBQWZBLEVBSUovWCxHQUFvQitYLEVBSGhCMytCLEdBQWdCLEVBTGhCMCtCLEVBQWE1OUIsS0FBS0QsRUFTMUIsQ0FDQWdZLEVBQVlxTixVQUFZd1ksQ0FDNUIsQ0FDQSxNQUFNaGpDLEVBQVNSLEVBQU1RLE9BQ3JCLElBQUssSUFBSXNFLEVBQVEsRUFBR0EsRUFBUXRFLElBQVVzRSxFQUFPLENBRXpDeStCLEVBRG1CRyxHQUFnQjFqQyxFQUFPOEUsRUFBTzZZLEVBQVlxTixVQUFXcE4sRUFBYzJsQixFQUFxQjdkLEdBQzFFaUssV0FDckMsQ0FDSixDQUNBLFNBQVMrVCxHQUFnQjdvQixFQUFPL1YsRUFBT2ttQixFQUFXcE4sRUFBYzJsQixFQUNoRTdkLEdBQ0ksTUFBTS9mLEVBQU9rVixFQUFNL1YsR0FDYjYrQixFQUFXM1ksRUFBVWxtQixHQUMzQixHQUFJNitCLEVBQ0EsT0FPUixTQUFpQzNqQyxFQUFPNGpDLEVBQWE1WSxFQUFXcE4sRUFBYzlZLEVBQU95K0IsRUFDckY3ZCxHQUNJLE1BQU1tZSxFQUFjN1ksRUFBVXhxQixPQUFTc0UsRUFDdkMsR0FBSSsrQixFQUVBLE9BREFuUyxHQUFzQjF4QixFQUFPNGpDLEVBQWFobUIsR0FDbkNnbUIsRUFFWCxNQUFNam1CLEVBQWNtbUIsR0FBNEI5akMsRUFBTzRkLEVBQWNvTixFQUFXdVksRUFBcUI3ZCxHQUdyRyxPQURBc0YsRUFBVXBsQixLQUFLK1gsR0FDUkEsQ0FDWCxDQWxCZW9tQixDQUF3QnArQixFQUFNZytCLEVBQVUzWSxFQUFXcE4sRUFBYzlZLEVBQU95K0IsRUFBcUI3ZCxHQUV4RyxNQUFNL0gsRUFBY21tQixHQUE0Qm4rQixFQUFNaVksRUFBY29OLEVBQVd1WSxFQUFxQjdkLEdBR3BHLE9BREFzRixFQUFVcGxCLEtBQUsrWCxHQUNSQSxDQUNYLENDOUNPLFNBQVNxbUIsR0FBZWhrQyxHQUMzQixNQUFPLENBQ0hzZSxVQUFXLFFBQ1h0ZSxRQUNBb3hCLHFCQUFzQixFQUN0QnhMLFlBQWFxZSxHQUNiM1MsY0FBZTRTLEdBQ2YzZSxnQkFBaUI2ZCxHQUNqQmhsQixRQUFTbU8sR0FFakIsQ0FDQSxTQUFTMlgsR0FBb0JyZ0IsRUFBVWxHLEVBQWFDLEtBQzlDRCxFQUFZRSxZQUVZLElBREE2VCxHQUFzQjdOLEVBQVVsRyxFQUFhQyxJQUVuRXlsQixHQUFnQjFsQixFQUFha0csRUFBVWpHLEVBRS9DLENBQ0EsU0FBU3FtQixHQUFpQmprQyxFQUMxQjJkLEVBQWFDLEVBQWNzWSxFQUFleFEsR0FFdEMyZCxHQUFnQjFsQixFQURDM2QsRUFDc0I0ZCxFQUFjOEgsRUFDekQsQ0N6Qk8sU0FBUzhKLEdBQWdCeHZCLEdBQzVCLE1BQU1zZSxFQUFZdGUsR0FBT3NlLFVBQ3pCLE9BQUlBLEVBQ090ZSxFQUlmLFNBQXdCQSxHQUNwQixHQUFJK2UsR0FBUS9lLEdBQ1IsT0FBT2drQyxHQUFlaGtDLEdBRTFCLE9BQU80aUMsR0FBZ0I1aUMsRUFDM0IsQ0FQV21rQyxDQUFlbmtDLEVBQzFCLENDRk8sU0FBUzhqQyxHQUE0QjlqQyxFQUFPNGQsRUFBY3dOLEVBQVV0TyxFQUMzRTRJLEdBQ0ksTUFBTTFpQixFQUFVcEQsU0FBU3dkLGVBQWVqRixHQUNsQ3dGLEVBQWMsQ0FDaEJFLFlBQWEsRUFDYjdkLFFBQ0F3YSxTQUFVZ1YsR0FBZ0J4dkIsR0FDMUI4c0Isb0JBQW9CLEVBQ3BCNkMsWUFBYTNzQixFQUNiOG5CLFNBQVUsSUFBSXhJLEdBRWR0QyxjQUFlcEMsRUFBYWdDLFFBQzVCdkwsV0FBWStXLEVBQVM1cUIsUUFTekIsT0FQS2tsQixJQUNEL0gsRUFBWWdTLFlBQWM3UyxHQUU5QjJJLEdBQXNCemxCLEVBQU80ZCxFQUFjRCxFQUFhK0gsRUFBVTVJLEdBQzlENEksR0FDQWxLLEVBQWE1VixLQUFLLENBQUNtWCxFQUFhLENBQUMySSxFQUFVMWlCLEtBRXhDMmEsQ0FDWCxDQzVCTyxTQUFTeW1CLEdBQWtCcGtDLEVBQU8rZCxFQUFZSCxFQUNyRGQsR0FFSSxPQURBaUIsRUFBV0csWUFBYSxFQUNqQkgsRUFBV0osWUFBY21tQixHQUE0QjlqQyxFQUFPNGQsRUFBYyxHQUFJZCxFQUN6RixDQ0hPLFNBQVN1bkIsR0FBc0IzZSxFQUFVNUksR0FDNUMsSUFBSW1CLEVBTUosT0FKSXlILElBQ0F6SCxFQUFlbkIsRUFBZWxkLFNBQVN3ZCxlQUFlakYsR0FDdERxRCxFQUFhNVYsS0FBSyxDQUFDbVgsRUFBYSxDQUFDMkksRUFBVTVJLE1BRXhDLENBQ0htQixlQUNBbkIsYUFBY0EsRUFFdEIsQ0NaTyxTQUFTd25CLEdBQXFCdGtDLEVBQU8yZCxFQUFhQyxFQUFjZCxFQUFjNEksR0FDakYsTUFBTTNILEVBQWEsR0FBZS9kLEVBQU8yZCxFQUFhQyxFQUFjZCxFQUFjNEksR0FJbEYsT0FISzNILEVBQVdHLFlBQ1pxbUIsR0FBZXZrQyxFQUFPK2QsR0FFbkJBLENBQ1gsQ0FDTyxTQUFTd21CLEdBQWV2a0MsRUFBTytkLEdBQ2xDLE1BQ015bUIsRUFEY3hrQyxFQUFNeWtDLFlBQ0ssR0FDL0IsSUFBSzFtQixFQUFXRyxXQUNaLE1BQUksZ0JBQWlCbGUsT0FDakIrZCxFQUFXMm1CLGdCQUFnQjFrQyxFQUFNMmtDLFlBQWEsR0FHOUMsVUFBV0gsT0FDWHptQixFQUFXMm1CLGdCQUFnQkYsRUFBV3hrQyxNQUFPLFFBR2pELEVBRUosTUFBTTRrQyxFQUFZN21CLEVBQVc2QyxXQUFXLEdBQUc1Z0IsTUFDM0MrZCxFQUFXMm1CLGdCQUFnQkUsRUFBVyxFQUMxQyxDQ3RCTyxTQUFTQyxHQUF1QmhoQixFQUFVbEcsRUFBYUMsR0FDMUQsTUFBTWtuQixFQUFZQyxHQUF1QmxoQixFQUN6Q2xHLEVBQWFDLEdBQ2IsSUFBK0IsSUFBM0JELEVBQVlPLFdBQXFCLENBQ2pDLE1BQU11bUIsRUFBYzltQixFQUFZM2QsTUFBTXlrQyxZQUN0QyxJQUFLQSxFQUNELE9BSUosS0FBTSxVQUZhQSxFQUFZLElBRzNCLE1BRVIsQ0FDQSxHQUFrQixJQUFkSyxHQUFtQmpoQixFQUFTdkcsU0FBVSxDQUV0Q2luQixHQUFlMWdCLEVBRElsRyxFQUFZSSxXQUVuQyxDQUNKLENDWE8sU0FBUyxHQUFlL2QsRUFBTzJkLEVBQWFDLEVBQWNvbkIsRUFDakV0ZixHQUNJLE1BQU11ZixFQUFjamxDLEVBQU15a0MsYUFDcEIsYUFBRXhtQixFQUFZLGFBQUVuQixHQUFpQnVuQixHQUFzQjNlLEVBQVVzZixHQUN2RSxJQUFJRSxFQUFXLFNBQW9CbGxDLEVBQU9tbEMsRUFBU3BuQixHQUMvQ3FtQixHQUFrQnBrQyxFQUFPK2QsRUFBWUgsRUFBY2QsR0FDbkRzb0IsR0FBYUQsR0FFYkQsRUFBV25uQixFQUFXdkQsU0FBUzBxQixTQUFXLFNBQTRCRyxFQUFhRixFQUFTcG5CLEdBQ3hGLE1BQU11bkIsRUFBV3ZuQixFQUFXSixZQUM1QjBILEdBQXlCaWdCLEVBQVVELEVBQWF6bkIsR0FDaEQwbkIsRUFBUzlxQixTQUFTOFcsY0FBYytULEVBQWFDLEVBQVUxbkIsRUFBYyxDQUFDeW5CLElBRXRFQyxFQUFTdGxDLE1BQVFxbEMsRUFDakJELEdBQWFELEVBQ2pCLENBQ0osRUFDQSxNQUFNcG5CLEVBQWF3bkIsR0FBZ0NOLEVBQWFybkIsR0FBYyxDQUFDNWQsRUFBT21sQyxFQUFTcG5CLElBQWVtbkIsRUFBU2xsQyxFQUFPbWxDLEVBQVNwbkIsSUFBYS9kLEVBQU8yZCxHQUszSixPQUpBSSxFQUFXRSxhQUFlQSxFQUMxQk4sRUFBWUksV0FBYUEsRUFDekIvZCxFQUFNc3hCLGNBQWdCdVQsR0FDdEI3a0MsRUFBTWtsQyxTQUFXQSxFQUNWbm5CLENBQ1gsQ0FFTyxTQUFTd25CLEdBQWdDTixFQUFhcm5CLEVBQzdEc25CLEVBQVUxcUIsRUFBVW1ELEdBR2hCLFNBQVMrbUIsRUFBZ0Ixa0MsRUFBTzhFLEdBQzVCaVosRUFBVzZDLFdBQVc5YixHQUFTLENBQzNCOUUsUUFDQXdhLFNBQVVnVixHQUFnQnh2QixHQUMxQitoQyxZQUFhaGtCLEVBQVc2QyxXQUFXOWIsSUFBUTBWLFVBRS9DZ3JCLEVBQWN6bkIsRUFBVzZDLFdBQVk5YixFQUN6QyxDQUNBLFNBQVMwZ0MsRUFBY3JFLEVBQVdyOEIsR0FDOUIsTUFBTTJnQyxFQUF1QjFuQixFQUFXdkQsU0FDbEM4QyxFQUFXbW9CLEdBQXNCbm9CLFNBQ3ZDLEdBQUlBLEVBQVUsQ0FDVnFDLEdBQWtCaEMsR0FDbEIsTUFBTStuQixFQUFnQkQsRUFBcUJub0IsWUFBWTZqQixFQUFVcjdCLEtBQUk3RSxHQUFLQSxFQUFFakIsU0FHNUUsT0FGQWtsQyxFQUFTUSxFQUFlUCxFQUFTcG5CLFFBQ2pDOEgsSUFFSixDQUNBcWYsRUFBUy9ELEVBQVVyOEIsR0FBTzlFLE1BQU9tbEMsRUFBU3BuQixFQUM5QyxDQUNBLElBQUlvbkIsR0FBVSxFQUNkLE1BQU1wbkIsRUFBYSxDQUNmNkMsV0FBWSxHQUNaOGpCLGtCQUNBYyxnQkFDQWhyQixXQUNBb0ksY0FBZSxJQVNuQixPQU5BcWlCLEVBQVk5K0IsU0FBUSxDQUFDcStCLEVBQVkxL0IsS0FDN0JxZ0MsR0FBVSxFQUNWcG5CLEVBQVc2RSxjQUFjaGQsS0FBSzQrQixFQUFXNXJCLFdBQVU1WSxHQUFTMGtDLEVBQWdCMWtDLEVBQU84RSxNQUNuRnFnQyxHQUFVLENBQUssSUFFbkIzcUIsRUFBUzBxQixTQUFXQSxFQUNibm5CLENBQ1gsQ0FDTyxTQUFTNG5CLEdBQW1CaG9CLEdBQy9CLE1BQU0rRSxFQUFlL0UsRUFBWUksV0FDakMsSUFBSzJFLEVBQ0QsT0FFa0JBLEVBQWFFLGNBQ3JCemMsU0FBUWlkLEdBQU9BLEVBQUlGLHVCQUMxQnZGLEVBQVlJLFVBQ3ZCLENBQ08sU0FBUyxHQUFxQkosRUFBYUMsS0FDNUNELEVBQVlFLFlBQ2QsTUFBTUUsRUFBYUosRUFBWUksV0FFL0IsT0FEQTRuQixHQUFtQmhvQixHQUNaRyxHQUFpQkMsRUFBWUgsRUFDeEMsQ0FDTyxTQUFTd25CLEdBQWFELEdBQ3BCQSxHQUFZNWxCLEdBQWFDLFlBQVlDLFNBQ3RDMUQsR0FFUixDQzVGTyxTQUFTNnBCLEdBQWM1bEMsRUFBTzJkLEVBQWFDLEVBQWNzWSxFQUFleFEsR0FNM0UsR0FMaUIsQ0FDYnBILFVBQVcsRUFBVzFGLFVBQ3RCdUcsT0FBUSxHQUNSc2xCLFlBQWEsQ0FBQ3prQyxJQUVPMmQsRUFBYUMsRUFBY3NZLEVBQWV4USxFQUN2RSxDQ0pPLFNBQVNtZ0IsR0FBMEJyMkIsRUFBTXhQLEVBQ2hEZ0QsRUFBUzhpQyxFQUNUbm9CLEVBQWFDLEdBRVQ1ZCxFQUFNb2UsUUFBVXVuQixHQUNoQixNQUFNenVCLEVBQVk3RCxFQUFjN0QsR0FDMUIwMUIsRUFBVyxTQUFvQmEsRUFBZVosR0FDaEQzRCxHQUFzQmh5QixFQUFNdTJCLEVBQWUvaUMsRUFBU2lrQixHQUEwQi9QLEVBQVd5RyxHQUN6RnluQixHQUFhRCxFQUNqQixFQUNNcG5CLEVBQWF3bkIsR0FBZ0N2bEMsRUFBTXlrQyxZQUFhN21CLEVBQWNzbkIsRUFBVWxsQyxFQUFPMmQsR0FPckcsT0FOQUEsRUFBWUksV0FBYUEsRUFDekJKLEVBQVkzZCxNQUFRQSxFQUNwQjJkLEVBQVluRCxTQUFXeGEsRUFDdkJBLEVBQU1zeEIsY0FBZ0IsU0FBb0N0eEIsRUFBT2dtQyxFQUFjcG9CLEdBQzNFLE9BQU8ya0IsR0FBdUJ2aUMsRUFBTzJkLEVBQWFDLEVBQWM1YSxFQUFTd00sRUFBTXlYLEdBQ25GLEVBQ08sQ0FBRWxKLGFBQVltbkIsV0FDekIsQ0N0Qk8sU0FBU2UsR0FBOEJ6MkIsRUFBTXhQLEVBQ3BEZ0QsRUFBUzhpQyxFQUNUbm9CLEVBQWFDLEdBQ1QsTUFBTSxXQUFFRyxHQUFlOG5CLEdBQTBCcjJCLEVBQU14UCxFQUN2RGdELEVBQVNoRCxFQUFPMmQsR0FDWEksRUFBV0csWUFJYixTQUE4QmxlLEVBQU8rZCxHQUN4QyxNQUFNdkQsRUFBV3VELEVBQVd2RCxTQUN0QjBxQixFQUFXMXFCLEVBQVMwcUIsU0FDcEJELEVBQWNqbEMsRUFBTXlrQyxZQUMxQixJQUFJeUIsRUFBVWpCLEVBQVksSUFBSWpsQyxPQUFTQSxFQUFNMmtDLFlBR3pDM2tDLEVBQU1zZCxXQUNONG9CLEVBQVVsbUMsRUFBTXNkLFNBQVM0b0IsSUFFN0JoQixFQUFTZ0IsR0FBUyxFQUFNbm9CLEVBQzVCLENBZFFvb0IsQ0FBcUJubUMsRUFBTytkLEVBRXBDLENDSE8sU0FBU3dFLEdBQWM2akIsRUFBWXpCLEVBQWFybkIsR0FRbkQsTUFBTyxDQUNING5CLFNBQVUsRUFDVjVtQixVQUFXLEVBQVcxRixVQUN0QndZLHFCQUFzQjZVLEdBQ3RCcmdCLFlBQWEwZSxHQUNiL2UsZ0JBQWlCLEdBRWpCK0wsY0FBZSxFQUNmbFQsUUFBUyxHQUNUZCxXQUNBcW5CLGNBRUFGLFlBQWEsQ0FBQzJCLEdBRXRCLENBRU8sU0FBUyxHQUEyQnBtQyxFQUFPMmQsR0FDOUMsSUFBSzNkLEdBQU9zZSxVQUNSLE9BQU8sRUFFWCxNQUFNK25CLEVBQWNybUMsRUFBTXlrQyxZQUMxQixJQUFLNEIsRUFDRCxPQUFPLEVBRVgsTUFDTUMsRUFEVzNvQixFQUFZM2QsTUFDQXlrQyxZQUM3QixJQUFLNkIsR0FBZUEsRUFBWTlsQyxTQUFXNmxDLEVBQVk3bEMsT0FDbkQsT0FBTyxFQUdYLE9BRGlCNmxDLEVBQVlwckIsT0FBTSxDQUFDc3JCLEVBQUl6aEMsSUFBVXloQyxJQUFPRCxFQUFZeGhDLEtBSTlELEVBRkksQ0FHZixDQ3ZDTyxTQUFTK1QsR0FBTzJ0QixHQUVuQixPQURnQmxuQixLQUVMTCxJQUFNLElBQU13bkIsR0FBT0QsS0FFdkJDLEdBQU9ELEVBQ2xCLENBRU8sU0FBU0MsR0FBT0QsR0FDbkIsSUFBSXhtQyxFQUFRd21DLEVBQ1osTUFBTTFqQixFQUFjLElBQUk0akIsSUFDbEJsaUIsRUFBUVgsSUFFVmYsRUFBWTNjLFNBQVFtWCxHQUFZQSxFQUFTdUcsSUFBVSxFQUV2RCxNQUFPLENBQ0h2RixVQUFXLEVBQVd6RixPQUN0QjBNLGdCQUFpQixHQUNqQjZMLHFCQUFzQixFQUN0QnhMLFlBQWFnZ0IsR0FDYnRVLGNBQWV1VCxHQUNmLFNBQUk3a0MsR0FDQSxPQUFPQSxDQUNYLEVBQ0EsU0FBSUEsQ0FBTTZqQixHQUNGN2pCLElBQVU2akIsSUFDVjdqQixFQUFRNmpCLEVBQ1JXLEVBQUtYLEdBRWIsRUFDQXpGLFFBQVMsR0FDVG9HLE9BQ0EsU0FBQTVMLENBQVUwRSxHQUNOQSxFQUFTdGQsR0FDVDhpQixFQUFZUyxJQUFJakcsR0FFaEIsTUFBTXFwQixFQUFRLElBQU03akIsRUFBWThqQixPQUFPdHBCLEdBR3ZDLE9BREFxcEIsRUFBTXpqQixZQUFjeWpCLEVBQ2JBLENBQ1gsRUFFUixDQ2xETyxNQUFNRSxXQUFxQnZrQixHQUM5QixXQUFBMEIsQ0FBWWhrQixHQUNSOG1DLE1BQU05bUMsR0FDTmtrQixLQUFLbGtCLE1BQVFBLENBQ2pCLENBQ0EsU0FBQTRZLENBQVUwRSxHQUNOLE1BQU1vRixFQUFlb2tCLE1BQU1sdUIsVUFBVTBFLEdBR3JDLE9BREFBLEVBQVM0RyxLQUFLbGtCLE1BQU8waUIsR0FDZEEsQ0FDWCxFQUVHLE1BQU1xa0IsV0FBd0J6a0IsR0FDakMsV0FBQTBCLENBQVloa0IsR0FDUjhtQyxNQUFNOW1DLEdBQ05ra0IsS0FBS2xrQixNQUFRQSxFQUNia2tCLEtBQUtpQixPQUFTbmxCLEVBQ2RrbEIsR0FBY2hCLEtBQ2xCLENBQ0EsU0FBQXRMLENBQVUwRSxHQUNOLE1BQU1vRixFQUFlb2tCLE1BQU1sdUIsVUFBVTBFLEdBR3JDLE9BREFBLEVBQVM0RyxLQUFLaUIsT0FBUXpDLEdBQ2ZBLENBQ1gsRUNORyxNQ1BNc2tCLEdBQVEsQ0FBRUMsRUFBZTNwQixJQUMzQjRwQixHQUFXRCxFQUFlM3BCLEdBRS9CNnBCLEdBQWtCbG1DLEdBQU1BLEVBZ0I5QixNQUFNaW1DLEdBQWEsQ0FBQ0QsRUFBZTNwQixHQUFZOHBCLE9BQU1DLFNBQVFDLFFBQVFILElBQW9CLENBQUMsS0FDdEYsTUFBTXhELEVBQVcxa0IsR0FBTSxDQUNuQnNvQixnQkFBWTk4QixFQUNaZ04sWUFBUWhOLElBRU4rOEIsRUFBaUI3RCxFQUFTbHNCLE9BRWhDLFFBQXVCaE4sSUFBbkIrOEIsRUFBOEIsQ0FDOUIsR0FBSUgsSUFBV0EsRUFBT0osR0FFbEIsT0FEQXRELEVBQVNsc0IsT0FBU3d2QixFQUNYdEQsRUFBUzRELFdBRXBCLE1BQ01wbUMsR0FEYWltQyxHQUFROXBCLEdBQ0QycEIsRUFBZU8sR0FHekMsT0FGQTdELEVBQVM0RCxXQUFhRCxFQUFNbm1DLEdBQzVCd2lDLEVBQVNsc0IsT0FBU3d2QixFQUNYdEQsRUFBUzRELFVBQ3BCLENBRUEsR0FEaUJOLEVBQWNoc0IsT0FBTSxDQUFDdFYsRUFBTWIsSUFBVWEsSUFBUzZoQyxFQUFlMWlDLEtBRTFFLE9BQU82K0IsRUFBUzRELFdBRXBCLEdBQUlGLElBQVdBLEVBQU9KLEdBRWxCLE9BREF0RCxFQUFTbHNCLE9BQVN3dkIsRUFDWHRELEVBQVM0RCxXQUVwQixNQUFNcG1DLEVBQVNtYyxFQUFTMnBCLEVBQWVPLEdBSXZDLE9BSEE3RCxFQUFTNEQsV0FBYUQsRUFBTW5tQyxHQUM1QnFtQyxFQUFlaG5DLE9BQVMsRUFDeEJnbkMsRUFBZTVoQyxRQUFRcWhDLEdBQ2hCdEQsRUFBUzRELFVBQVUsRUFFOUIsU0FBU0UsR0FBZUMsRUFBVUMsR0ErQzlCLE9BOUNBbjFCLE9BQU9DLGVBQWVrMUIsRUFBVSxTQUFVLENBQ3RDLEdBQUE5M0IsR0FDSSxNQUFNbTNCLEVBQVFVLElBRWQsT0FEQVYsRUFBTVksTUFBTVIsS0FBTyxLQUFlLEVBQzNCSixDQUNYLElBRUp4MEIsT0FBT0MsZUFBZWsxQixFQUFVLFlBQWEsQ0FDekMsR0FBQTkzQixHQUNJLE1BQU1nNEIsRUFBV0gsSUFDWEksRUFBZTdvQixJQUFNLElBQU1LLE9BQzNCWixFQUFVTyxJQUFNLElBQU0sSUFBSTRuQixRQUFhcDhCLEtBQ3ZDczlCLEVBQVc5b0IsSUFBTSxLQUFNLENBQ3pCQSxNQUFPTSxHQUFhQyxZQUFZUCxNQUNoQ0UsT0FBUUksR0FBYUMsWUFBWUwsV0FFL0I2b0IsRUFBUyxDQUFDZixFQUFlM3BCLEtBQzNCNHBCLEdBQVdELEdBQWUsQ0FBQ0EsRUFBZU8sS0FDdEMsTUFBTVMsRUFBYTNvQixLQUNiNG9CLEVBQVE1cUIsRUFBUzJwQixFQUFlTyxHQUN0QyxHQUFJUyxJQUFlSCxFQUFjLENBQzdCLE1BQU1LLEVBQWNKLEVBQVM5b0IsTUFHdkJtcEIsRUFGVU4sRUFBYWxvQixRQUNIWCxNQUNXMlIsTUFJckNrRyxHQUFjcVIsRUFITUMsRUFBbUJucEIsTUFDckI4b0IsRUFBUzVvQixPQUNUaXBCLEVBQW1CanBCLE9BRXpDLENBQ0FULEVBQVF1RSxLQUFLaWxCLEVBQU0sR0FDcEJMLEVBQVNELE9BQ0xscEIsR0FJWCxPQUZBc3BCLEVBQU9KLE1BQVFDLEVBQVNELE1BQ3hCSCxJQUFlLElBQU1PLEdBQVFBLEdBQ3RCQSxDQUNYLElBRUp4MUIsT0FBT0MsZUFBZWsxQixFQUFVLFNBQVUsQ0FDdEMsR0FBQTkzQixHQUNJLE1BQU1tM0IsRUFBUVUsSUFFZCxPQURBVixFQUFNWSxNQUFNUCxPQUFVSixHQUFrQkEsRUFBY2hzQixPQUFNaGEsR0FBS0EsSUFDMUQrbEMsQ0FDWCxJQUVHVyxDQUNYLENDekdPLFNBQVNqcEIsR0FBUThuQixHQUVwQixPQURnQmxuQixLQUVMTCxJQUFNLElBQU0sSUFBSXFELEdBQVFra0IsS0FFNUIsSUFBSWxrQixHQUFRa2tCLEVBQ3ZCLENDVk8sU0FBU3JuQixHQUFPbUIsR0FFbkIsT0FEZWYsR0FBYUMsWUFDZHVCLFNBQVNHLGNBQWNaLEVBQ3pDLENDR08sU0FBUytuQixHQUFRL25CLEdBQ3BCLE1BQU1nb0IsRUFBY3p2QixHQUFPLElBQ3JCMHZCLEVBQVMxdkIsR0FBTyxHQUNoQjJ2QixFQUFXM3ZCLEdBQU8sR0FDeEIsSUFBSTR2QixFQUFZLEdBQ1p2NEIsRUFBUyxFQWdDYixPQS9CQXM0QixFQUFTeG9DLE1BQVF1b0MsRUFBT3ZvQyxNQUN4QnNnQixHQUFPLElBQUk3SSxLQUNQZ3hCLEVBQVloeEIsRUFDTDZ3QixFQUFZdG9DLFNBR3ZCZ25DLEdBQU15QixHQUFXLE9BQ1h2NEIsRUFDRm80QixFQUFZdG9DLE1BQVF5b0MsRUFDcEJub0IsR0FBTyxJQUFNbW9CLEdBQVUsSUFHM0J0cEIsSUFBTyxDQUFDdXBCLEVBQUlDLEtBRVIsR0FBSXo0QixFQVNBLE9BUkFvUSxHQUFPLElBQUk3SSxLQUNGa3hCLEdBQTJCLElBQWRBLElBQ2RMLEVBQVl0b0MsTUFBUXlYLEdBRWpCNndCLEVBQVl0b0MsU0FFdkJ3b0MsRUFBU3hvQyxNQUFRdW9DLEVBQU92b0MsWUFDdEJ1b0MsRUFBT3ZvQyxNQUlic2dCLEdBQU8sSUFDSWdvQixFQUFZdG9DLE9BQ3JCLE1BRUprUSxFQUNLbzRCLEVBQVl0b0MsS0FDdkIsQ0MzQ0EsU0FBUzRvQyxLQUNMLE1BQU8sQ0FBRUMsVUFBVyxFQUFHdGhCLGNBQVU5YyxFQUNyQyxDSjJHQWc5QixJQUFlLElBaEdmLFNBQWtCRyxHQUNkLE1BQU1JLEVBQVMsQ0FBQ2YsRUFBZTNwQixJQUNwQjRwQixHQUFXRCxFQUFlM3BCLEVBQVVzcUIsR0FJL0MsT0FGQUksRUFBT0osTUFBUUEsRUFDZkgsSUFBZSxJQUFNTyxHQUFRQSxHQUN0QkEsQ0FDWCxDQXlGcUJjLENBQVMsQ0FBQyxJQUFJOUIsSUNuR25DdG9CLEdBQVF5RyxPQUFVbmxCLElBQ2QsTUFBTStvQyxFQUFjOXBCLElBQU0sV0FDdEIsTUFBTyxDQUNIQSxNQUFPTSxHQUFhQyxZQUFZUCxNQUNoQ0UsT0FBUUksR0FBYUMsWUFBWUwsT0FFekMsSUFDTThvQixFQUFhM29CLEtBQ25CLE9BQU9MLElBQU0sV0FRVCxPQVBnQixJQUFJNG5CLEdBQWE3bUMsR0FBTzhrQixNQUFLN2pCLElBQ3pDLE1BRU1pZSxFQUZVK29CLEVBQVdyb0IsUUFDRFgsTUFDRkMsTUFFeEIsT0FEQTRYLEdBQWM1WCxFQUFNRCxNQUFPOHBCLEVBQVk5cEIsTUFBT0MsRUFBTUMsT0FBUTRwQixFQUFZNXBCLFFBQ2pFbGUsQ0FBQyxHQUdoQixHQUFFLEVBa0JOeWQsR0FBUXJSLElBaEJSLFNBQWErUyxHQUNULE1BQU0yb0IsRUFBYzlwQixJQUFNLEtBQU0sQ0FDNUJBLE1BQU9NLEdBQWFDLFlBQVlQLE1BQ2hDRSxPQUFRSSxHQUFhQyxZQUFZTCxXQUUvQjhvQixFQUFhM29CLEtBQ25CLE9BQU9nRCxHQUFRalYsSUFBSStTLEdBQU0wRSxNQUFLN2pCLElBQzFCLE1BRU1pZSxFQUZVK29CLEVBQVdyb0IsUUFDRFgsTUFDRkMsTUFJeEIsT0FISUEsR0FDQTRYLEdBQWM1WCxFQUFNRCxNQUFPOHBCLEVBQVk5cEIsTUFBT0MsRUFBTUMsT0FBUTRwQixFQUFZNXBCLFFBRXJFbGUsQ0FBQyxHQUVoQixFR3pDTyxNQUFNNHBCLEdBQVksQ0FDckIzQyxPQUFTOGdCLElBQ0wsTUFBTUMsRUFBa0JocUIsR0FBTTJwQixJQUU5QixHQUFJSyxFQUFnQkosVUFBVyxDQUMzQixJQUFJNW5DLEVBQUlnb0MsRUFBZ0JKLFVBQ3hCLEtBQU81bkMsS0FDSGdlLFFBQU14VSxHQUdWLE9BRGV3VSxRQUFNeFUsRUFFekIsQ0FDQSxNQUFNdEosRUFBUzhkLElBQU0sS0FDakIsTUFBTU8sRUFBY0QsR0FBYUMsWUFDM0IwcEIsRUFBZ0IxcEIsRUFBWVAsTUFBTXplLE9BRWxDMm9DLEVBQVdILEVBQWdCbjJCLFVBQVksSUFBSW0yQixFQUFvQkEsSUFDL0R2cEIsRUFBVUQsRUFBWUMsUUFDdEJvcEIsRUFBWXJwQixFQUFZUCxNQUFNemUsT0FBUzBvQyxFQUN2QzNoQixFQUFXLENBQ2J5aEIsa0JBQ0FHLFdBQ0FOLFlBQ0FuWSxNQUFPalIsRUFDUGhHLFNBQVUsSUFFZHd2QixFQUFnQjFoQixTQUFXQSxFQUMzQixNQUFNbkksRUFBU0ssRUFBUUcsUUFBUVIsT0FJL0IsT0FIa0JBLEVBQU95TCxVQUFZekwsRUFBT3lMLFdBQWEsSUFDL0NqbEIsS0FBSzJoQixHQUNmMGhCLEVBQWdCSixVQUFZQSxFQUNyQk0sQ0FBUSxJQUViQyxFQUFLSixFQUNMbGEsRUFBWXNhLEVBQUd0YSxVQUFZc2EsRUFBR3BvQyxXQUVwQyxPQURBaW9DLEVBQWdCMWhCLFNBQVN5aEIsZ0JBQWdCbGEsVUFBWUEsRUFDOUMzdEIsQ0FBTSxFQU9qQjB3QixPQUVKLFNBQXdCN04sR0FFcEIsT0FBTy9FLElBQU0sV0FFVCxNQUFNbXFCLEVBQUtwbEIsRUFDTDhLLEVBQVlzYSxFQUFHdGEsVUFBWXNhLEVBQUd0YSxXQUFhOUssRUFBWWhqQixXQUN2RHllLEVBQVVILEtBQ1Z1TCxFQUFZLEdBQ2xCLElBQUk2RixFQUFRLENBQ1I5UyxhQUFjNkIsRUFBUTdCLGNBRTFCLEtBQU84UyxFQUFNOVMsY0FBYyxDQUN2QixNQUNNeXJCLEVBRFkzWSxFQUFNOVMsYUFBYWdDLFFBQVFSLE9BQ1p5TCxVQUNqQyxJQUFLd2UsRUFBZ0IsQ0FDakIzWSxFQUFRQSxFQUFNOVMsYUFDZCxRQUNKLENBQ0EsTUFBTTJKLEVBQVc4aEIsRUFBZUMsTUFBSy9oQixJQUNqQ3NELEVBQVVqbEIsS0FBSzJoQixHQUVmLEdBRHlCQSxFQUFTeWhCLGdCQUFnQmxhLFlBQWNBLEVBRTVELE9BQU8sQ0FDWCxJQUVKLEdBQUl2SCxFQUFVLENBQ1YsTUFBTW5JLEVBQVNLLEVBQVFHLFFBQVFSLE9BSS9CLE9BSGtCQSxFQUFPeUwsVUFBWXpMLEVBQU95TCxXQUFhLElBQy9DamxCLEtBQUsyaEIsR0FDZkEsRUFBUzlOLFNBQVM3VCxLQUFLNlosR0FDaEI4SCxFQUFTNGhCLFFBQ3BCLENBQ0F6WSxFQUFRQSxFQUFNOVMsWUFDbEIsQ0FDQSxNQUFNb0UsRUFBTSw4QkFBOEJnQyxFQUFZeFUsUUFBUXdVLElBRTlELE1BREFuZixRQUFRMGtDLEtBQUssR0FBR3ZuQix5QkFBNEI2SSxHQUN0QyxJQUFJOWdCLE1BQU1pWSxFQUNwQixHQUNKLEdDekZPLE1BQU13bkIsV0FBaUJ6L0IsTUFDMUIsV0FBQWlhLENBQVk3WixFQUFTcy9CLEVBQVdDLEVBQVUsQ0FBQyxHQUN2QzVDLE1BQU0zOEIsR0FDTitaLEtBQUsxVSxLQUFPZzZCLEdBQVNoNkIsS0FDckIwVSxLQUFLd2xCLFFBQVUsSUFBS0EsRUFBU0QsWUFDakMsRUFjRyxNQUFNRSxXQUEwQkgsR0FDbkMsV0FBQXhsQixDQUFZN1osRUFBU3UvQixHQUNqQjVDLE1BQU0zOEIsRUFBUyxzQkFBdUJ1L0IsR0FDdEN4bEIsS0FBSzFVLEtBQU9tNkIsR0FBa0JuNkIsSUFDbEMsRUNwQlcsU0FBU282QixHQUFvQmhxQixFQUFTaXFCLEVBQVl2c0IsS0FBYThDLEdBSTFFLE1BQU0wcEIsRUFBZXhzQixLQUFZOEMsR0FDM0IwWCxFQUFnQmpZLEdBQTBCRCxHQXNCaEQsT0FwQklrWSxJQUNJbFksRUFBUVIsT0FDUm1YLEdBQWN1QixHQUdkbFksRUFBUXBGLFNBQVM4VyxjQUFjMVIsRUFBUTVmLE1BQU80ZixFQUFTa1ksRUFDdkQsSUFFQWxaLEdBQVVrckIsSUFDVkEsRUFBYUMsU0FBUSxLQUNibnFCLEVBQVFSLE9BQ1JtWCxHQUFjdUIsR0FHZGxZLEVBQVFwRixTQUFTOFcsY0FBYzFSLEVBQVE1ZixNQUFPNGYsRUFBU2tZLEVBQ3ZELEdBQ0osS0FJTGdTLENBQ1gsQ0MxQk8sU0FBU3hzQixHQUFTQSxHQUNyQixNQUFNc0MsRUFBVW1DLEtBQ1Zpb0IsRUFBZ0IvcUIsR0FBTSxDQUN4QjNCLGFBR0Uyc0IsRUFBa0JockIsSUFBTSxJQUFNaXJCLEdBQWN0cUIsRUFBU0wsR0FBYUMsWUFDeEV3cUIsS0FHQSxPQURBQSxFQUFjMXNCLFNBQVdBLEVBQ2xCMnNCLENBQ1gsQ0FDTyxTQUFTQyxHQUFjdHFCLEVBQVNtb0IsRUFBVWlDLEdBQzdDLE1BQU10cEIsRUFBWXFuQixFQUFTNW9CLE9BQzNCLE9BQU8sWUFBb0JpQixHQUN2QixPQUFPd3BCLEdBQW9CaHFCLEVBQVNjLEVBQVdzcEIsRUFBYzFzQixZQUFhOEMsRUFDOUUsQ0FDSixDQ2xCTyxNQUFNK3BCLEdBQWdCLEtBQ3pCLE1BQU12cUIsRUFBVW1DLEtBR2hCLElBQUtuQyxFQUNELE1BQU13cUIsR0FFVixNQUFNckMsRUFBV3hvQixHQUFhQyxZQUM5QixPQUFPLFNBQXNCbEMsR0FDekIsT0FBTzRzQixHQUFjdHFCLEVBQVNtb0IsRUFBVSxDQUFFenFCLFlBQzlDLENBQUMsRUFFUThzQixHQUFZLElBQUlULEdBQWtCLGlLQ0wvQyxTQUFTVSxHQUFZQyxHQUNqQixNQUFNQyxFQUFVLENBQUMsT0FBUSxNQUFPLFNBQVUsUUFBUyxXQUM3Q0MsRUFBVSxDQUFDLE1BQU8sU0FBVSxVQUFXLFNBUXZDQyxFQUFXLElBQUlDLE1BQU1KLEVBQUssQ0FDNUIsR0FBQXo2QixDQUFJbkcsRUFBUWtKLEdBRVIsT0FBS3JKLE1BQU1xSixHQUdFLFdBQVRBLEVBQ08wM0IsRUFBSXRxQyxNQUFNUSxPQUVqQitwQyxFQUFROW9DLFNBQVNtUixHQWZsQjYzQixFQURlRSxFQWlCVS8zQixHQWhCTixJQUFJd04sS0FDMUIsTUFBTWpmLEVBQVNtcEMsRUFBSXRxQyxNQUFNMnFDLE1BQVd2cUIsR0FFcEMsT0FEQWtxQixFQUFJOWxCLEtBQUs4bEIsRUFBSXRxQyxPQUNObUIsQ0FBTSxFQWdCVHFwQyxFQUFRL29DLFNBQVNtUixHQUNWMDNCLEVBQUl0cUMsTUFBTTRTLEdBQU13UixLQUFLa21CLEVBQUl0cUMsT0FFN0JzcUMsRUFBSTEzQixHQVpBMDNCLEVBQUl0cUMsTUFBTTRTLEdBWEosSUFBQyszQixDQXdCdEIsRUFDQTc2QixJQUFHLENBQUNwRyxFQUFRa0osRUFBTTVTLElBQ1R1SixNQUFNcUosR0FLRSxXQUFUQSxHQUNBMDNCLEVBQUl0cUMsTUFBTVEsT0FBU1IsRUFDbkJzcUMsRUFBSTlsQixLQUFLOGxCLEVBQUl0cUMsUUFDTixJQUlYc3FDLEVBQUkxM0IsR0FBUTVTLEdBQ0wsSUFaSHNxQyxFQUFJdHFDLE1BQU00UyxHQUFRNVMsRUFDbEJzcUMsRUFBSTlsQixLQUFLOGxCLEVBQUl0cUMsUUFDTixLQWFuQixPQUFPeXFDLENBQ1gsQ0N4RE8sU0FBUzFvQixLQUNaLE9BQU94QyxHQUFhQyxZQUFZSSxPQUNwQyxDQUVPLFNBQVNnckIsS0FFWixPQURnQjdvQixLQUNEL2UsT0FDbkIsQ0FDTyxTQUFTMmMsR0FBa0JDLEdBQzlCLE9BQU9MLEdBQWFDLFlBQVlJLFFBQVVBLENBQzlDLENBQ08sU0FBU2lHLFlBQ0x0RyxHQUFhQyxZQUFZSSxPQUNwQyxDQ0RBLFNBQVNpckIsR0FBd0JwekIsRUFDakMzUyxFQUFPc21CLEVBQVV4TixHQUNiLE1BQU1ELEVBQWN5TixFQUFTdG1CLEdBQzdCLEdBQUk2WSxFQUFZSyxRQUNaLE9BR0osTUFDTTZGLEVBQVdwTSxFQURFa0csRUFBWXRKLFlBU3pCbUcsRUFBV21ELEVBQVluRCxTQUM3Qm1GLEdBQWtCaEMsR0FDbEJuRCxFQUFTOFcsY0FBY3pOLEVBQVVsRyxFQUFhQyxFQUFjbkcsR0FDNURvTyxLQUNBbEksRUFBWTNkLE1BQVE2akIsQ0FDeEIsQ0NoQ08sU0FBU2thLEdBQWdCK00sRUFBY0MsR0FDMUMsTUFBTTNmLEVBQVcwZixFQUFhbHJCLFFBQVF3TCxVQU9uQyxTQUErQjBmLEVBQWNDLEdBQ2hELE1BQU1DLEVBQWNELEVBQWF2eUIsVUFDM0J5eUIsRUFBVUYsRUFBYXZ5QixVQUFVRixJQUNqQ2IsRUFBU3V6QixFQUFZdnpCLFFBQVV3ekIsRUFBUXh6QixPQUN2Q2EsRUFBTXd5QixFQUFhdHlCLFVBQVVGLElBQ25DQSxFQUFJYixPQUFTQSxDQUNqQixDQVpJeXpCLENBQXNCSixFQUFjQyxLQUNsQ3J2QixFQUFTQyxNREpSLFNBQThCOEQsRUFBUzJMLEdBQzFDLE1BQ00zVCxFQURVZ0ksRUFBUWpILFVBQVVGLElBQ1hiLE9BQ3ZCLElBQUkzUyxFQUFRLEVBQ1osTUFBTXFrQixFQUFNMVIsRUFBT2pYLE9BQ25CLEtBQU9zRSxFQUFRcWtCLEdBQ1gwaEIsR0FBd0JwekIsRUFBUTNTLEVBQU9zbUIsRUFBVTNMLEtBQy9DM2EsQ0FHVixDQ0xJcW1DLENBQXFCTCxFQUFjMWYsS0FDakMxUCxFQUFTQyxNQUNYSSxHQUNKLENDRk8sU0FBU3NULEdBQWUxUixFQUFha0csRUFDNUNqRyxHQUVJLEdBRGVXLEdBQWVzRixHQVExQixZQU4yQnBaLElBQXZCa1QsRUFBWXlCLFFBQ1pKLEdBQWFyQixHQUVqQkEsRUFBWW9rQixZQUFjcGtCLEVBQVluRCxTQUN0Q21ELEVBQVluRCxTQUFXcUosRUF5Qi9CLFNBQWtDckwsRUFBV21GLEVBQWFDLEdBRXRELElBQUtELEVBQVlzQixNQUFNYyxPQUduQixZQURBdkgsRUFBVW9OLFlBQVlwTixFQUFXbUYsRUFBYUMsRUFBY0QsRUFBWWdTLGFBRzVFLE1BQU1sUSxFQUFVb1UsR0FBY3JiLEVBQVdvRixFQUFjQSxFQUFhMEosV0FBWTNKLEdBQ2hGd2UsR0FBMkJ2ZSxFQUFjNkIsRUFDekM5QixFQUNKLENBbENReXRCLENBQXlCdm5CLEVBQVVsRyxFQUFhQyxJQUN6QyxFQUlYLEdBRGVELEVBQVl5QixPQUNmLENBQ1J6QixFQUFZb2tCLFlBQWNwa0IsRUFBWW5ELFNBQ3RDbUQsRUFBWW5ELFNBQVdxSixFQUV2QixNQUFNcEUsRUFBVTlCLEVBQVlzQixNQUFNYyxPQUNsQyxHQUFJTixFQUNBLGNBQVcsSUFBZXJILEVBQVd1RyxVQ3pCMUMsU0FBd0JnUCxFQUFZalAsRUFBUzFlLEVBQU80ZCxHQUV2RCxJQUFJcEYsRUFBWXhZLEVBQU13WSxXQUFheFksRUFDbkMsTUFBTXFyQyxFQUFVMWQsRUFBV25WLFVBQVVGLElBQ2pDK3lCLEdBQ2tCQSxFQUFRdmQsYUFHdEJ0VixFQUFZeFksRUFBTSt0QixXQUFhL3RCLEVBQU04dEIsV0FBV0MsV0FHeEQsTUFBTXVkLEVBQWV6WCxHQUFjcmIsRUFBV29GLEVBQWNBLEVBQWEwSixXQUFZNUksR0FHckZxZixHQUZvQnBRLEVBQVcvTixRQUNKWCxNQUFNbU4sT0FDVGtmLEVBQzVCLENEYVlDLENBQWU5ckIsRUFBUzlCLEVBQWFrRyxFQUFVakcsSUFGcEMsQ0FLbkIsQ0FLQSxPQUhBaUcsRUFBUytCLFlBQVkvQixFQUFVbEcsRUFBYUMsRUFBY0QsRUFBWWdTLGFBQ3RFaFMsRUFBWW9rQixZQUFjcGtCLEVBQVluRCxTQUN0Q21ELEVBQVluRCxTQUFXcUosR0FDaEIsQ0FDWCxDRWpDTyxTQUFTMkIsR0FBa0IzQixFQUFVbEcsRUFBYUMsRUFBYzBILEdBRW5FLE1BQU1oSCxFQUFZdUYsR0FBWUEsRUFBU3ZGLFVBQ3ZDLEdBQUlBLEVBQUosQ0FDSSxHQUFJQSxJQUFjLEVBQVd4RixXQUN6QixPQUVKdVcsR0FBZTFSLEVBQWFrRyxFQUFVakcsRUFFMUMsS0FOQSxDQU9BLEdBQUltQixHQUFROEUsR0FJUixPQUhBd2YsR0FBZ0IxbEIsRUFBYWtHLEVBQVVqRyxHQUN2Q0QsRUFBWW9rQixZQUFjcGtCLEVBQVluRCxjQUN0Q21ELEVBQVluRCxTQUFXd3BCLEdBQWVuZ0IsV0FHL0IsSUFBZXpMLEVBQVd1RyxTQUlqQzJHLEdqQ1pELFNBQWdDdGxCLEVBQU8yZCxHQUMxQ0EsRUFBWTNkLE1BQVFBLEVBQ3BCMmQsRUFBWW9rQixZQUFjcGtCLEVBQVluRCxTQUN0Q21ELEVBQVluRCxTQUFXb29CLEdBQWdCNWlDLEdBQ3ZDLE1BQU1xbkMsRUFBUzFwQixFQUFZZ1MsWUFDckJzVCxFQUFjbmQsR0FBYzlsQixHQUM1QitiLEVBQVE0QixFQUFZNUIsTUFBUSxDQUFDc0IsRUFBaUIsQ0FBQ2dxQixFQUFRcEUsRUFBYSxTQUEyQmhpQyxHQUN6RjBjLEVBQVlzUCxlQUFpQmhzQixTQUN0QjBjLEVBQVk1QixLQUN2QixFQUFHLDJCQUNYVCxFQUFjMVYsS0FBS21XLEVBQ3ZCLENpQ0VReXZCLENBQXVCM25CLEVBQVVsRyxHQUpqQ0EsRUFBWTNkLE1BQVE2akIsQ0FSeEIsQ0FjSixDQzNCTyxTQUFTNG5CLEdBQXdCQyxFQUFjN25CLEVBQVVqRyxFQUFjRCxHQUUxRSxJQURxQmtHLElBQWFBLEVBQVN2RixXQUFhdUYsRUFBU3ZGLFlBQWNvdEIsRUFDOUQsQ0FLYixPQUpvQi90QixFQUFZbkQsU0FDcEI0RCxRQUFRVCxFQUFhQyxHQUNqQzRILEdBQWtCM0IsRUFBVWxHLEVBQzVCQyxFQUFjLElBQ1AsRUFDWCxDQUNKLENDVE8sU0FBU21uQixHQUF1QmxoQixFQUFVbEcsRUFBYUMsR0FDMUQsTUFBTUcsRUFBYUosRUFBWUksV0FDekIyWCxFQUFhK1YsR0FBd0IsRUFBVzd5QixVQUFXaUwsRUFBVWpHLEVBQWNELEdBQ3pGLE9BQUkrWCxJQUdDM1gsR0FBZUEsRUFBV0csWUFHL0JILEVBQVd2RCxTQUFXcUosRUFDdEI5RixFQUFXeW5CLGNBQWN6bkIsRUFBVzZDLFdBQVksR0FDekMsR0FKSSxFQUtmLENDWE8sU0FBUytxQixHQUFrQjNyQyxFQUNsQzJkLEVBQ0FDLEVBQ0FkLEVBQWM0SSxHQUNWLE1BQU1wTixFQUFNdFksRUFDWixJQUFJd1ksRUFBWUYsRUFBSUUsVUFLcEIsR0FKS0EsSUFDREEsRUFBWTJZLEdBQWlCN1ksSUFFakMwRyxHQUFhckIsR0FDVCtILEVBQ0EsT0FBTytMLEdBQXFCalosRUFBV21GLEVBQWFDLEVBQWM4SCxFQUFVNUksR0FJaEYsT0FGa0JhLEVBQVlzQixNQUFRdEIsRUFBWXNCLE9BQVMsQ0FBQyxHQUNsRGMsT0FBU3dSLEdBQXNCL1ksRUFBV29GLEVBQWNELEdBQzNEc1QsR0FBV3JULEVBQWNELEVBQ3BDLENDVE8sU0FBU2l1QixHQUF1QjVyQyxFQUFPMmQsRUFDOUNDLEVBQ0FkLEVBQWM0SSxHQUVWaW1CLEdBRGtCM3JDLEVBQU0rdEIsVUFDS3BRLEVBQzdCQyxFQUNBZCxFQUFjNEksR0FFRy9ILEVBQVluRCxTQUNwQjhXLGNBQWdCLFNBQTBCdHhCLEVBQU9nbUMsRUFBY3hrQixHQUNwRTZELEdBQXlCMmdCLEVBQWNobUMsR0FBTyt0QixXQUFhL3RCLEVBQU93aEIsRUFDdEUsRUFFQXhoQixFQUFNdWxCLGdCQUFrQnNtQixFQUM1QixDQUNBLFNBQVNBLEdBQXlCaG9CLEVBQVVsRyxHQUN4QyxPQUFPd1IsR0FBNkJ0TCxFQUNwQ2xHLEVBQ0osQ0FFTyxTQUFTbXVCLEdBQWF0MEIsRUFBU0MsR0FDbEMsTUFBTWEsRUFBTSxDQUNSYixTQUNBbUcsYUFBYzBCLEtBQ2RoQixVQUFXLEVBQVdoRyxJQUN0QjhZLHFCQUFzQixFQUN0QnhMLFlBQWErbEIsR0FDYnJhLGNBQWVJLEdBQ2ZuTSxnQkFBaUI0SixHQUNqQi9RLFFBQVM2USxHQUNUelgsVUFFQXZMLElBQUlpZ0IsR0FDTzZmLEdBQU83ZixFQUFZNVQsR0FHOUIwekIsUUFBUyxTQUFpQjVvQyxHQU10QixPQUxBQSxFQUFVMnFCLFVBQVl6VixFQUN0QkEsRUFBSXdWLFdBQWExcUIsRUFDakJBLEVBQVU2b0MsZUFBaUI3b0MsRUFBVXdpQixZQUVyQ3hpQixFQUFVd2lCLFlBQWNnbUIsR0FDakJ0ekIsQ0FDWCxFQUVBNHpCLGdCQUFpQixTQUF5QkMsR0FHdEMsT0FEQUEsRUFBVXpiLE1BQVFwWSxFQUNYQSxDQUNYLEVBQ0FwVixLQUFNLFNBQWNzVSxFQUFTQyxHQUV6QixPQURBYSxFQUFJbUIsU0FBVyxDQUFFakMsVUFBU0MsVUFDbkJhLENBQ1gsR0FPSixPQUxBOUYsT0FBT0MsZUFBZTZGLEVBQUssWUFBYSxDQUNwQ3hJLElBQUkxTSxHQUNPa1YsRUFBSTB6QixRQUFRNW9DLEtBR3BCa1YsQ0FDWCxDQUNPLFNBQVN5ekIsR0FBTzdmLEVBQVk1VCxHQUcvQixPQUZBeXpCLEdBQU83ZixFQUFZNVQsR0FDbkJBLEVBQUk0VCxXQUFhQSxFQUNWNVQsQ0FDWCxDQ3ZFTyxTQUFTLEdBQUtkLEtBQVlDLEdBQzdCLE1BQU0yMEIsRUFBWU4sR0FBYXQwQixFQUFTQyxHQUNsQ2UsRUFBWW1aLEdBQW1CcEgsR0FBWTZQLE1BR2pELE9BRkE1aEIsRUFBVUYsSUFBTTh6QixFQUNoQkEsRUFBVTV6QixVQUFZQSxFQUNmNHpCLENBQ1gsQ0FDQSxHQUFLN3pCLElBQU0sU0FBVUEsS0FBUWQsR0FDekIsT0NIRyxTQUFtQmMsRUFBS2QsR0FDM0IsTUFBTWEsRUFBTSxDQUNSYixTQUNBbUcsYUFBYzBCLEtBQ2QvRyxNQUNBK0YsVUFBVyxFQUFXL0YsSUFDdEI2WSxxQkFBc0IsRUFDdEJ4TCxZQUFhK2xCLEdBQ2JyYSxjQUFlSSxHQUNmbk0sZ0JBQWlCNEosR0FDakIvUSxRQUFTNlEsR0FDVGhqQixJQUFLLFNBQWdCaWdCLEdBRWpCLE9BREE1VCxFQUFJNFQsV0FBYUEsRUFDVjVULENBQ1gsRUFDQTB6QixRQUFTLFNBQWlCNW9DLEdBTXRCLE9BTEFBLEVBQVUycUIsVUFBWXpWLEVBQ3RCQSxFQUFJd1YsV0FBYTFxQixFQUNqQkEsRUFBVTZvQyxlQUFpQjdvQyxFQUFVd2lCLFlBRXJDeGlCLEVBQVV3aUIsWUFBY2dtQixHQUNqQnR6QixDQUNYLEVBRUE0ekIsZ0JBQWlCLFNBQXlCQyxHQUd0QyxPQURBQSxFQUFVemIsTUFBUXBZLEVBQ1hBLENBQ1gsRUFDQXBWLEtBQU0sQ0FDRnFWLElBQUssU0FBYUEsRUFDbEJkLEdBRUksT0FEQWEsRUFBSW1CLFNBQVcsQ0FBRWxCLElBQUtBLEVBQUtkLFVBQ3BCYSxDQUNYLElBUVIsT0FMQTlGLE9BQU9DLGVBQWU2RixFQUFLLFlBQWEsQ0FDcEN4SSxJQUFJMU0sR0FDT2tWLEVBQUkwekIsUUFBUTVvQyxLQUdwQmtWLENBQ1gsQ0R4Q1crekIsQ0FBVTl6QixFQUFLZCxFQUMxQixFRWVBLFNBQVM2MEIsR0FBYy96QixFQUFLZzBCLEdBQ3BCaDBCLEVBQUlvVSxZQUNKNGYsRUFBWXZ2QixZQUFZekUsRUFBSW9VLFlBRTVCcFUsRUFBSW1VLFFBQ0o2ZixFQUFZdnZCLFlBQVl6RSxFQUFJbVUsT0FFcEMsQ0NuQ08sU0FBUzhmLEdBQW1CaDBCLEVBQVdrRyxFQUFTNmdCLEdBQ25ELE1BQU0vZCxFQUFhd0ksR0FBZXhSLEVBQVdrRyxHQVM3QyxPQVJBeUwsR0FBcUIzUixFQUFXZ0osRUFBWUEsR0FDNUNBLEVBQVcrZCxXQUFhQSxFQUVuQjdnQixFQUFRTyxNQUFNbU4sU0FDZjFOLEVBQVFPLE1BQU1tTixPQUFTNUssRUFDdkI5QyxFQUFRTyxNQUFNMlIsTUFBUWxTLEVBQVFPLE1BQU1DLE9BRXhDUixFQUFRTyxNQUFNYyxPQUFTeUIsRUFDaEJBLENBQ1gsQ0NGTyxTQUFTaXJCLEdBQWlCbFIsRUFBS25jLEVBQVE1RyxFQUFXazBCLEVBQVkxcEMsRUFBUzBiLEVBQVNpdUIsR0FDbkYsTUFBTWhkLEVBQWMvdkIsU0FBU3dkLGVBQWVqRixHQUM1Q21ULEdBQUsxbEIsS0FBTTRTLEVBQVVnVixTQUFXLENBQUV0TCxTQUFVMUosSUFDNUMsTUFBTWlILEVBa0NILFNBQW9CakgsRUFBV21YLEVBQWE0UCxFQUFZN2dCLEVBQVNpdUIsR0FDcEVqdUIsRUFBUWlSLFlBQWNBLEVBQ3RCLE1BQU12RCxFQUFTMU4sRUFBUU8sTUFBTW1OLE9BQ3ZCck0sRUFBU3JCLEVBQVFPLE1BQU1jLE9BQ3ZCNnNCLEVBQWdCN3NCLElBQVdxTSxFQUMzQjVLLEVBQWFxUyxHQUFjcmIsRUFBV3VILEVBQVFBLEVBQU91SCxXQUMzRDVJLEdBQ0EsSUFBS2t1QixFQUFlLENBRWhCcnJCLEdBQWVDLEVBQVl6QixFQUREckIsRUFBUU8sTUFBTTJSLE1BQ2EzUixNQUN6RCxDQUNBLEdBQUl6RyxFQUFVOEYsWUFBYyxFQUFXdkYsWUFDbkMsT0FRUixTQUEwQlAsRUFBV20wQixFQUFlbnJCLEVBQVk5QyxFQUFTNmdCLEdBQ3JFLE1BQU1wK0IsRUFBVXFYLEVBQVVnVixTQUFXLENBQUV0TCxTQUFVMUosR0FDakQsSUFBS20wQixFQUFlLENBQ2hCLE1BQU1uckIsRUFBYWdyQixHQUFtQmgwQixFQUFXa0csRUFBUzZnQixHQUUxRCxPQURBbkwsR0FBc0I1UyxHQUNmQSxDQUNYLENBR0EsT0FGQWlTLEdBQVlqYixFQUFXclgsRUFBUXFnQixHQUMvQjRTLEdBQXNCNVMsR0FDZkEsQ0FDWCxDQWxCZXFyQixDQUFpQnIwQixFQUFXbTBCLEVBQWVuckIsRUFBWTlDLEVBQVM2Z0IsR0FHM0UsTUFBTS9SLEVBQVVoVixFQUFVZ1YsUUFDcEJ5YSxFQUFhemEsRUFBUWhNLEVBQVk5QyxHQUV2QyxPQURBMFYsR0FBc0I1UyxHQUNmeW1CLENBQ1gsQ0FyRG9CNkUsQ0FBV3QwQixFQUFXbVgsRUFBYTNzQixFQUFTMGIsRUFBU2l1QixHQUtyRSxHQUpBdnRCLEVBQU8ydEIsT0FBUSxFQUNYSixJQUNBRCxFQUFXcDBCLElBQU1tSCxFQUFRakgsVUFBVUYsTUFFbEN0VixFQUNELE1BQU0sSUFBSStHLE1BQU0sc0RBQXNEL0csMEJBSTFFQSxFQUFRb2IsUUFBVSxXQUNkLE1BQU1zaEIsRUFBU3RnQixFQUFPc2dCLE9BQ3RCLElBQUssTUFBTS9vQixLQUFhK29CLEVBQVEsQ0FDNUIsTUFBTXBpQixFQUFXb2lCLEVBQU8vb0IsR0FDeEIzVCxFQUFRZ3FDLG9CQUFvQnIyQixFQUFXMkcsRUFDM0MsQ0FDQThCLEVBQU9zZ0IsT0FBUyxDQUFDLElBQ2Zoa0IsRUFBU0MsTUFDWCxNQUFNc3hCLEVBQVU1Z0IsR0FBZTVNLEVBQVNMLEdBR3hDLFFBRkUxRCxFQUFTQyxNQUNYSSxJQUNPa3hCLENBQ1gsSUFDRXZ4QixFQUFTQyxNQUNYLE1BQU00d0IsRUZuQ0gsU0FBNEI5c0IsRUFBU3pjLEVBQVNvYyxFQUFRNUcsRUFBVytpQixFQUFLNUwsR0FFekUsTUFBTXh1QixFQUFTd3ZCLEdBQW1CbFIsRUFBU3pjLE9BQVN5SCxHQUM5Q2lVLEVBQVVlLEVBQVFHLFFBQ3hCbEIsRUFBUU8sTUFBTW1OLE9BQVMzTSxFQUN2QmYsRUFBUU8sTUFBTWMsT0FBU04sRUFFdkJmLEVBQVFPLE1BQU0yUixNQUFRbFMsRUFBUU8sTUFBTUMsTUFDcEMsSUFBSW9hLEVBQVM5Z0IsRUFBVThnQixPQUN2QixHQUFJOWdCLEVBQVU4RixZQUFjLEVBQVd2RixZQUFhLENBQ2hELE1BQ01tSixFQURPcVosRUFDU3JaLFNBQ3RCb1gsRUFBU3BYLEVBQVNvWCxPQUNsQnBYLEVBQVM2cUIsT0FBUSxDQUNyQixDQUVBL3BDLEVBQVFzMkIsT0FBU0EsRUFDakJ0MkIsRUFBUXUyQixXQUFhLEVBQ3JCMlQsR0FBWXRuQyxLQUFLLENBQUU1QyxVQUFTeWMsWUFDNUIsTUFBTThzQixFQUFjM3NDLFNBQVN1dEMseUJBQzdCWixFQUFZdnZCLFlBQVkyUyxHQUN4QixJQUFLLE1BQU15ZCxLQUFXanNDLEVBQU9vWCxJQUN6Qit6QixHQUFjYyxFQUFTYixHQUczQixPQUFPQSxDQUNYLENFU3dCYyxDQUFtQjV0QixFQUFTemMsRUFBU29jLEVBQVE1RyxFQUFXK2lCLEVBQUs1TCxHQUlqRixRQUhFalUsRUFBU0MsTUFDWEksSUFDQS9ZLEVBQVFnYSxZQUFZdXZCLEdBQ2IsQ0FDSDlzQixVQUNBNkwsS0FBSSxHQUNKaU8sV0FBVSxFQUVsQixDQ2hDMEIsaUJBQWYsV0FDSDM1QixTQUFTMHRDLFVBQ1R6b0MsUUFBUTBrQyxLQUFLLHNFQUVqQjNwQyxTQUFTMHRDLFVBQVcsR0FFakIsTUFBTUosR0FBYyxHQVFwQixTQUFTLEdBQVczUixFQUFLdjRCLEVBQVNpbUIsR0FDckMsTUFBTXNrQixFQUFjTCxHQUFZL3BCLFdBQVVxcUIsR0FBVUEsRUFBT3hxQyxVQUFZQSxJQUN2RSxHQUFJdXFDLEdBQWUsRUFBRyxDQUNsQixNQUFNOXRCLEVBQVV5dEIsR0FBWUssR0FBYTl0QixRQUN6QzRNLEdBQWU1TSxFQUFTQSxFQUFRRyxRQUFRUixRQUN4Qzh0QixHQUFZOXlCLE9BQU9tekIsRUFBYSxHQUVoQzFvQyxRQUFRMGtDLEtBQUssOERBQStELENBQUV2bUMsV0FDbEYsQ0FFQSxJQUFJd1YsRUFBWSxJQUFPazBCLEVBQVd6akIsR0FDbEN6USxFQUFVOFIsVUFBWUMsR0FBWTZQLEtBQ2xDNWhCLEVBQVU4RixVQUFZLEVBQVd2RixZQUNqQ1AsRUFBVThZLGNBQWdCSSxHQUUxQmxaLEVBQVV5USxNQUFRLENBQUNBLEdBQ25CelEsRUFBVXUwQixPQUFRLEVBRWxCLE1BQU1ydUIsRUF5QlYsU0FBdUJsRyxFQUFXK21CLEdBQzlCLE1BQU0va0IsRUFBVyxDQUNiOEQsVUFBVyxZQUNYaUgsZ0JBQWlCNEosR0FDakIvUSxRQUFTNlEsR0FDVG1DLHFCQUFzQixFQUN0QnhMLFlBQWEsV0FDVC9nQixRQUFRNG9DLE1BQU0sMEJBQ2xCLEVBQ0FuYyxjQUFlSSxJQUViaFQsRUFBVSxDQUNaYixZQUFhLEVBQ2I3ZCxNQUFPd1ksRUFDUG5FLFdBQVksRUFDWnlXLFNBQVUsSUFBSXhJLEdBQ2R3SyxvQkFBb0IsRUFDcEJocEIsWUFBYSxFQUNic2IsWUFBUTNVLEVBQ1J3VSxNQUFPLENBQUMsRUFFUnpFLFlBRUU0RSxFQUFTSixHQUFhTixHQUs1QixPQUZBVSxFQUFPc2dCLE9BQVMsQ0FBQyxFQUNqQjhNLEdBQW1CaDBCLEVBQVdrRyxFQUFTNmdCLEdBQ2hDN2dCLENBQ1gsQ0F0RG9CZ3ZCLENBQWNsMUIsRUFBV3hWLEdBQ25Db2MsRUFBU1YsRUFBUVUsT0FDakJXLEVBQVNyQixFQUFRTyxNQUFNYyxPQUM3QmUsR0FBVWYsRUFBT0gsU0FDakJGLEdBQWtCSyxHQUNsQixJQUFJMnNCLEVBQWFuUixFQUFJdFMsR0FDckIsTUFBTTBqQixTQUF1QkQsR0FBY3QwQixFQUFXdUcsU0FpQnRELE9BaEJLZ3VCLElBQ0lwdUIsR0FBZW11QixJQUtoQmh1QixFQUFRTyxNQUFNYyxPQUFPcUssWUFBYyxDQUMvQkssT0FBUSxDQUFDeEIsR0FDVG9CLFVBQVcsQ0FBQ3BCLElBRWhCelEsRUFBVThSLFVBQVlvaUIsRUFBV3BpQixVQUNqQzlSLEVBQVU4RixVQUFZb3VCLEVBQVdwdUIsVUFDakM5RixFQUFVZ1YsUUFBVWtmLEVBQVdsZixRQUMvQmhWLEVBQVlrMEIsSUFYWmwwQixFQUFVRixJQUFNbzBCLEVBQ2hCQSxFQUFhblIsSUFhZGtSLEdBQWlCbFIsRUFBS25jLEVBQVE1RyxFQUFXazBCLEVBQVkxcEMsRUFBUzBiLEVBQVNpdUIsRUFDbEYsQ0NsRE8sU0FBU2dCLEdBQWlCdnRCLEVBQU05QyxFQUFVc0MsR0FDN0MsTUFBTUUsRUFBWUYsRUFBUVgsTUFDcEIydUIsRUFBYzl0QixFQUFVWixNQUFNQyxPQUM5QjB1QixFQUFjL3RCLEVBQVU4USxNQUFROVEsRUFBVThRLE1BQU16UixPQUFTeXVCLEVBQ3pERSxFQUFjaHVCLEVBQVVDLE9BRTlCeVcsR0FBZ0JvWCxFQUFhQyxHQUM3QixNQUFNRSxFQUFJendCLEtBQVk4QyxHQWV0QixPQWJBb1csR0FBZ0JxWCxFQUFhRCxHQUU3Qm55QixFQUFZN1YsS0FBSyxDQUFDLEtBQ1YsTUFBTW9vQyxFQUFZRixFQUFZbHVCLFFBQVFSLFlBQ1QzVSxJQUFkdWpDLElBQWlELElBQXRCQSxFQUFVaHdCLFlBSWxEdEMsRUFBU0MsTUFDWG1XLEdBQWtCZ2MsS0FDaEJweUIsRUFBU0MsTUFDWEksSUFBTyxFQUNSLEtBQ0FneUIsQ0FDWCxDQ25DTyxTQUFTbjFCLEdBQVV3dEIsRUFBWTlvQixHQUNsQyxNQUFPLENBQ0g0bkIsU0FBVSxFQUNWNW1CLFVBQVcsRUFBVzFGLFVBQ3RCd1kscUJBQXNCeVUsR0FDdEJqZ0IsWUFBYSxHQUNiTCxnQkFBaUIsR0FDakIrTCxjQUFleVQsR0FFZjNtQixRQUFTLEdBQ1RkLFdBRUFtbkIsWUFBYSxDQUFDMkIsR0FFdEIsQ0NuQkEsU0FBUzZILEdBQWdCanVDLEVBQU8yZCxFQUFhNkQsS0FDdkM3RCxFQUFZRSxZQUNkLE1BQ01xd0IsRUFEUWx1QyxFQUFNMHdCLE1BQ0k1QyxXQUN4Qm9nQixFQUFVdG9CLFlBQWNzb0IsRUFBVWpDLGVBQ2xDLE1BQU1yc0IsRUFBVWpDLEVBQVlJLFlBQVlKLFlBQ3hDMEgsR0FBeUJ6RixFQUFTc3VCLEVBQVcxc0IsRUFDakQsQ0FDQSxTQUFTMnNCLEdBQWlCbnVDLEVBQU8yZCxFQUFhQyxFQUFjZCxFQUFjNEksR0FDdEUvSCxFQUFZSSxXQUFhLENBQUMsRUFFMUIvZCxFQUFNc3hCLGNBQWdCMmMsR0FHMUIsU0FBd0JqdUMsRUFBTzRkLEVBQWNELEVBQWFxbkIsRUFBc0J0ZixHQUM1RSxNQUFNLGFBQUV6SCxFQUFZLGFBQUVuQixHQUFpQnVuQixHQUFzQjNlLEVBQVVzZixHQUNqRWpuQixFQUFhSixFQUFZSSxXQUMvQkEsRUFBV0UsYUFBZUEsRUFDMUIsTUFBTXlTLEVBQVExd0IsRUFBTTB3QixNQUNkd2QsRUFBWXhkLEVBQU01QyxXQUN4Qm9nQixFQUFVdG9CLFlBQWNzb0IsRUFBVWpDLGVBRWxDN0gsR0FBa0I4SixFQUFXbndCLEVBQVlILEVBQWNkLEVBQzNELENBWElzeEIsQ0FBZXB1QyxFQUFPNGQsRUFBY0QsRUFBYWIsRUFBYzRJLEVBQ25FLENBV08sU0FBUyxLQUNaLE1BQU8sQ0FDSHBILFVBQVcsWUFDWGlILGdCQUFpQixJQUFNLEVBQ3ZCNkwscUJBQXNCLEVBQ3RCeEwsWUFBYXVvQixHQUNiN2MsY0FBZTJjLEdBQ2Y3dkIsUUFBU1YsRUFFakIsQ0MzQk8sU0FBUy9FLEdBQUsyRSxFQUFVK3dCLEVBQVUsQ0FBQyxHQUN0QyxNQUFNQyxFQUFXLENBQ2Jod0IsVUFBVyxFQUFXM0YsS0FDdEJ5WSxxQkFBc0JtZCxHQUV0QmhwQixnQkFBaUIsSUFBTSxFQUN2QkssWUFBYTRvQixHQUNibGQsY0FBZW1kLEdBQ2Zyd0IsUUFBU3N3QixHQUNUTCxRQUFTLENBQUUvd0IsY0FBYSt3QixHQUN4QixnQkFBQXpjLENBQWlCQyxHQUNiLE1BQU04YyxFQUFpQjljLEdBQVF3YyxTQUFTL3dCLFNBRXhDLE9BQU9xeEIsSUFBbUJyeEIsQ0FDOUIsR0FFRXN4QixFQUFpQixJQUFJeHVCLEtBQ0wsSUFDWHd1QixFQUNIUCxRQUFTLENBQUVocUIsVUFBV2pFLEtBQVNpdUIsRUFBUy93QixjQU1oRCxPQUZBOUssT0FBT3VnQixPQUFPNmIsRUFBZ0JOLEdBRXZCTSxDQUNYLENBU0EsU0FBU0gsR0FBa0I1cUIsRUFBVWxHLEVBQWFDLEdBQzlDLE1BQU04WCxFQUFhK1YsR0FBd0IsRUFBVzl5QixLQUFNa0wsRUFFNURqRyxFQUFjRCxHQUNkLEdBQUkrWCxFQUNBLE9BQU9BLEVBRVgsTUFDTW1aLEVBRGNseEIsRUFBWW5ELFNBQ0Q2ekIsUUFFekJTLEVBQVVqckIsRzNJcENiLFNBQWlCakUsR0FFYndCLEdBRFd4QixFQUFRWCxNQUNLQyxNQUFNRCxNQUN6QyxDMklrQ0k4dkIsQ0FBUXB4QixHQUNSLE1BQU15QyxFQUFRMHVCLEVBQVFULFFBQVFocUIsV0FBYXdxQixFQUFXeHFCLFdBQWEsR0FDbkUxRyxFQUFZOFAsWUFBY3FoQixFQUFRVCxRQUFRL3dCLFlBQVk4QyxHQUN0RGlVLEdBQWUxVyxFQUNuQixDQUNBLFNBQVM0d0IsR0FBcUIvK0IsRUFBTXhQLEVBQ3BDZ0QsRUFBU3dYLEVBQ1RtRCxHQUNJLE9BQU82d0IsR0FBWWgwQixFQUFVbUQsRUFDakMsQ0FFQSxTQUFTNndCLEdBQVloMEIsRUFBVW1ELEdBQzNCLE1BQU0zYSxFQUFVMmEsRUFBWTNhLFFBQ3RCaWMsRUFBUXRCLEVBQVlzQixNQUFRLENBQUMsRUFDbkM2QixHQUFVbkQsR0FLZCxTQUE2QjNhLEVBQVN3WCxFQUFVbUQsRUFBYXNCLEdBQ3pELE1BQU1tQixFQUFPNUYsRUFBUzZ6QixRQUFRaHFCLFdBQWEsR0FDckNvSixFQUFjalQsRUFBUzZ6QixRQUFRL3dCLFlBQVk4QyxHQUVqRHpDLEVBQVk4UCxZQUFjQSxFQUUxQixNQUFNNGdCLEVBQVU3ekIsRUFBUzZ6QixRQUNyQkEsRUFBUWxXLFFBRVJrVyxFQUFRbFcsT0FBT24xQixFQUFTd1gsRUFBVW1ELEVBQWFzQixFQUd2RCxDQWhCSSt2QixDQUFvQmhzQyxFQUFTd1gsRUFBVW1ELEVBQWFzQixHQUNwRG9WLElBQ0osQ0FlQSxTQUFTcWEsR0FBVy93QixLQUNkQSxFQUFZRSxZQUNkLE1BQU13ZCxFQUFjMWQsRUFDZG5ELEVBQVc2Z0IsRUFBWTdnQixTQUN2QjZ6QixFQUFVN3pCLEVBQVM2ekIsUUFVekIsR0FUSWhULEVBQVl2USxTQUFTaEksWUFBWXRpQixTQUVqQ21mLEdBQWtCaEMsR0FDbEJnd0IsR0FBaUIsR0FBSXRTLEVBQVl2USxTQUFTN0gsS0FBS21CLEtBQUtpWCxFQUFZdlEsVUFBV25OLEdBRTNFa0ksTUFJQXdvQixFQUFRalcsVUFBVyxDQUNuQixNQUFNcDFCLEVBQVVxNEIsRUFBWXI0QixRQVE1QixPQUFPMnFDLEdBQWlCLElBUEosV0FDaEJodUIsR0FBa0JoQyxHQUNsQixNQUFNeGMsRUFBU2t0QyxFQUFRalcsVUFBVXAxQixFQUFTd1gsRUFBVTZnQixFQUFhQSxFQUFZcGMsT0FFN0UsT0FEQTRHLEtBQ08xa0IsQ0FDWCxHQUNtQndjLEVBQVlta0IsV0FDcUJsaUIsUUFDeEQsQ0FDSixDQ3pHQSxTQUFTcXZCLEdBQWlCdHBDLEVBQU1nUixFQUFXMkcsR0FDdkMsU0FBUzR4QixFQUFhQyxHQUNsQixPQUFPRCxFQUFhdnFCLFdBQVd3cUIsRUFDbkMsQ0FJQSxPQUhBRCxFQUFhdnFCLFdBQWFySCxFQUMxQjNYLEVBQUt5cEMsVUFBVXhwQyxLQUFLLENBQUMrUSxFQUFXdTRCLElBQ2hDdnBDLEVBQUswcEMsYUFBYXpwQyxLQUFLLENBQUMrUSxFQUFXdTRCLElBQzVCdnBDLENBQ1gsQ0FZQSxTQUFTMnBDLEdBQU0zcEMsRUFBTXlhLEdBVWpCLE9BUEF6YSxFQUFLNlAsV0FBVzVQLEtBQUt3YSxHQUNqQm12QixHQUFrQm52QixFQUFLLElBQ3ZCb3ZCLEdBQXdCcHZCLEVBQUssR0FBSXphLEdBRTVCNHBDLEdBQWtCbnZCLEVBQUssS0FDNUJvdkIsR0FBd0JwdkIsRUFBSyxHQUFJemEsR0FFOUJBLENBQ1gsQ0FDTyxTQUFTOHBDLEdBQWlCOXBDLEdBRTdCLFNBQVMrcEMsRUFBYS80QixHQUNsQixPQUFPLFNBQVUyRyxHQUNiLE9BeENaLFNBQXlCM1gsRUFBTWdSLEVBQVcyRyxHQUV0QyxPQUFPMnhCLEdBRE9VLEdBQVdocUMsRUFBTUEsRUFBSzhwQyxrQkFDTDk0QixFQUFXMkcsRUFDOUMsQ0FxQ21Cc3lCLENBQWdCanFDLEVBQU1nUixFQUFXMkcsRUFDNUMsQ0FDSixDQVdBLE1BQU11eUIsRUFBWSxDQUNkdlgsUUFBU29YLEVBQWEsU0FHdEJJLFNBQVVKLEVBQWEsWUFHdkJLLFFBQVNMLEVBQWEsV0FJdEI1ZixLQUFNLElBQUkxUCxJQW5EbEIsU0FBY3phLEVBQU15YSxHQUNoQixNQUFNNkgsRUFBUTBuQixHQUFXaHFDLEVBQU1BLEVBQUs4cEMsa0JBUXBDLE9BUEF4bkIsRUFBTXpTLFdBQVc1UCxLQUFLd2EsR0FDbEJtdkIsR0FBa0JudkIsRUFBSyxJQUN2Qm92QixHQUF3QnB2QixFQUFLLEdBQUk2SCxHQUU1QnNuQixHQUFrQm52QixFQUFLLEtBQzVCb3ZCLEdBQXdCcHZCLEVBQUssR0FBSTZILEdBRTlCQSxDQUNYLENBeUMyQjZILENBQUtucUIsRUFBTXlhLEdBRTlCblUsSUFBSyxTQUFVaWdCLEdBR1gsT0FEQWhJLEtBQUtnSSxXQUFhQSxFQUNYaEksSUFDWCxHQUVKLE9BQU8yckIsQ0FDWCxDQWdCTyxTQUFTTCxHQUF3Qnh2QyxFQUFPZ3dDLEdBQ3RDQSxFQUFRNWtCLFdBQ1Q0a0IsRUFBUTVrQixTQUFXLElBRXZCNGtCLEVBQVE1a0IsU0FBU3hsQixLQUFLNUYsRUFDMUIsQ0FRTyxTQUFTdXZDLEdBQWtCdnZDLEdBQzlCLE9BQU91QixNQUFNd2QsUUFBUS9lLElBQVUsR0FBV0EsSUFBVUEsR0FBT3NlLFNBQy9ELENBQ0EsU0FBUzJ4QixHQUFVMzhCLEVBQVV5YyxHQUN6QixNQUFPLENBQUNwcUIsRUFBTTNGLElBQVVzdkMsR0FBTTNwQyxFQUFNLENBQUMyTixFQUFVdFQsR0FBTyxFQUFPK3ZCLEdBQ2pFLENBQ0EsU0FBUzJmLEdBQWEvNEIsR0FDbEIsTUFBTyxDQUFDaFIsRUFBTTJYLElBQ0gyeEIsR0FBaUJ0cEMsRUFBTWdSLEVBQVcyRyxFQUVqRCxDSDVGQTFFLEdBQVV2TCxJQUNWLFNBQXNCK1UsRUFBVTlFLEdBQzVCLE9BQU8xRSxHQUFVMEosR0FBUWpWLElBQUkrVSxHQUFXOUUsRUFDNUMsRUVZQTNFLEdBQUt3ZixPQUFVN2EsR0FDSjNFLElBQUssUUFBVyxDQUFFd2YsT0FBUTdhLElBRXJDM0UsR0FBS3lmLFVBQWE5YSxHQUNQM0UsSUFBSyxRQUFXLENBQUV5ZixVQUFXOWEsSUMwRXhDLE1BQU11eUIsR0FBWSxDQUNkdnRDLFFBQVMydEMsR0FBVSxVQUFXOW9CLElBQzlCK29CLFNBQVVELEdBQVUsV0FBWTlvQixJQUVoQ2dwQixNQUFPRixHQUFVLFNBM0NyQixTQUF1Qmp0QyxFQUFTd00sRUFBTXhQLEdBQzlCLEdBQVNBLEdBQ1R3UyxPQUFPOFcsUUFBUXRwQixHQUFPbUcsU0FBUSxFQUFFcUosRUFBTXhQLE1BQzlCQSxFQUNBZ0QsRUFBUXhCLFVBQVUraEIsSUFBSS9ULEdBR3RCeE0sRUFBUXhCLFVBQVVrbEIsT0FBT2xYLEVBQzdCLElBSVIwWCxHQUFtQmxrQixFQUFTd00sRUFBTXhQLEVBQ3RDLElBK0JJczRCLFFBQVNvWCxHQUFhLFNBQ3RCSSxTQUFVSixHQUFhLFlBQ3ZCSyxRQUFTTCxHQUFhLFlDdEhuQixTQUFTVSxHQUFnQmh0QyxFQUFXd2MsRUFBU2hDLEVBQWN5eUIsRUFBZXJ0QyxFQUNqRnN0QyxHQUNJbHRDLEVBQVUrQyxTQUFRUixJQUNkLEdBQXVCLFlBQW5CQSxFQUFLMlksVUFBeUIsQ0FDOUIsTUFBTWl5QixFQUFhQyxHQUFrQjdxQyxFQUFNaWEsRUFBU2hDLEVBQWN5eUIsR0FFbEUsWUFEQS8wQixFQUFjMVYsS0FBSyxDQUFDMHFDLEVBQVMsQ0FBQ3R0QyxFQUFTdXRDLElBRTNDLENBRUEsY0FEb0I1cUMsR0FFaEIsSUFBSyxTQUNMLElBQUssU0FDRCxPQTBCVCxTQUFnQzNGLEVBQU9nRCxFQUFTc3RDLEdBQ25ELE1BQU14MEIsRUFBT2xjLFNBQVN3ZCxlQUFlcGQsR0FFckMsT0FEQXNiLEVBQWMxVixLQUFLLENBQUMwcUMsRUFBUyxDQUFDdHRDLEVBQVM4WSxLQUNoQ0EsQ0FDWCxDQTlCdUIyMEIsQ0FBdUI5cUMsRUFBTTNDLEVBQVNzdEMsR0FDakQsSUFBSyxXQUNELE9DaEJULFNBQW1DM3FDLEVBQU0zQyxFQUFTNGMsRUFBU2hDLEVBQWN5eUIsRUFBZUMsR0FDM0YsTUFBTUksRUFBYyxHQUNkM3lCLEVBQWEsQ0FDZkYsWUFBYSxFQUNibUMsY0FBZUosRUFDZndMLFNBQVVzbEIsRUFDVjF3QyxNQUFPMkYsRUFDUDBuQixZQUFhLEdBQ2I3UyxTQUFVLENBQ044RCxVQUFXLGVBQ1hpSCxnQkFBaUIsSUFBTSxFQUN2QkssWUFBYSxFQUNid0wscUJBQXNCLEVBQ3RCaFQsUUFBUyxDQUFDdXlCLEVBQUkveUIsT0FDUkcsRUFBV0YsWUFDYjZ5QixFQUFZdnFDLFNBQVF5cUMsR0FBVUEsRUFBT3AyQixTQUFTNEQsUUFBUXd5QixFQUFRaHpCLElBQWMsRUFFaEYwVCxjQUFlLENBQUN0eEIsRUFBTzJkLEVBQWFDLEVBQWNuRyxPQUM1Q3NHLEVBQVdGLFlBQ2IsTUFBTWdHLEVBQVc3akIsRUFBTTZ3QyxHQUNqQjF2QyxFQUFTMHZDLEVBQVlyMkIsU0FBUzhXLGNBQWN6TixFQUFVZ3RCLEVBQWFqekIsRUFBY25HLEdBR3ZGLE9BRkFvNUIsRUFBWTd3QyxNQUFRNmpCLEVBQ3BCbEcsRUFBWTNkLE1BQVFBLEVBQ2JtQixDQUFNLEdBSXJCa1QsWUFBYSxFQUNieVksb0JBQW9CLEVBQ3BCaEMsU0FBVSxJQUFJeEksSUFFbEIrdEIsRUFBY3pxQyxLQUFLbVksR0FDbkIsTUFBTTh5QixFQUFjQyxHQUFrQm5yQyxJQUFRaWEsRUFBUzdCLEVBQVdxTixTQUFVcG9CLEVBQVM0YSxFQUFjMHlCLEdBQ25HLE9BQU9PLENBQ1gsQ0RsQnVCRSxDQUEwQnByQyxFQUFNM0MsRUFBUzRjLEVBQVNoQyxFQUFjeXlCLEVBQWVDLEdBRTlGLE9BQU9RLEdBQWtCbnJDLEVBQU1pYSxFQUFTeXdCLEVBQWVydEMsRUFBUzRhLEVBQWMweUIsRUFBUSxHQUU5RixDQUNPLFNBQVNRLEdBQWtCbnJDLEVBQU1pYSxFQUFTeXdCLEVBQWVydEMsRUFBUzRhLEVBQWMweUIsR0FDbkYsTUFBTTkxQixFQUFXZ1YsR0FBZ0I3cEIsR0FDM0JxcUIsRUFBYSxDQUNmblMsWUFBYSxFQUNiN2QsTUFBTzJGLEVBQ1BxYSxjQUFlSixFQUNmcEYsV0FFQW5HLFlBQWEsRUFDYnlZLG9CQUFvQixFQUNwQmhDLFNBQVUsSUFBSXhJLElBT2xCLE9BTEErdEIsRUFBY3pxQyxLQUFLb3FCLEdBQ25CQSxFQUFXTCxZQUFjL3ZCLFNBQVN3ZCxlQUFlLElBQ2pEOUIsRUFBYzFWLEtBQUssQ0FBQzBxQyxFQUFTLENBQUN0dEMsRUFBU2d0QixFQUFXTCxlQUNsRG5WLEVBQVNvTCxZQUFZamdCLEVBQU1xcUIsRUFDM0JwUyxFQUFjb1MsRUFBV0wsYUFDbEJLLENBQ1gsQ0VuQ08sU0FBU3dnQixHQUFrQnh3QyxFQUFPNGYsRUFBU2hDLEVBQWN5eUIsR0FDNUQsTUFBTXJ0QyxFQUFVcEQsU0FBU3NkLGNBQWNsZCxFQUFNOFUsU0EyQjdDLE9BMUJBOEssRUFBUTVjLFFBQVVBLEVBQ2xCNHNCLEdBQXNCNXZCLEVBQU13VixXQUFZLEdBQ3hDeFMsRUFBUzRhLEVBQWNnQyxFQUN2Qnl3QixHQUNBRCxHQUFnQnB3QyxFQUFNb0QsVUFBV3djLEVBQVNoQyxFQUFjeXlCLEVBQWVydEMsRUFBUytaLEdBQ2hGL2MsRUFBTW92QyxVQUFVanBDLFNBQVEsQ0FBQ3c1QixFQUFVNzZCLEtBa0IvQnc2QixHQUF3QjFoQixFQUFhMEosV0FBWXFZLEVBQVMsR0FDMUQzOEIsR0FsQmEsSUFBSW9kLEtBQ2IsTUFDTW1TLEVBRGN2eUIsRUFBTW92QyxVQUFVdHFDLEdBQ1QsR0FDckJrc0MsRUFBZS93QixHQUFvQnJDLEdBQ25DQyxFQUFjbXpCLEVBQWFweEIsUUFBUS9CLFlBQ25DMWMsRUFBU294QixLQUFVblMsR0FJekIsT0FISXZDLElBQWdCbXpCLEVBQWFweEIsUUFBUS9CLGFBQ3JDdVksR0FBcUIsQ0FBQzRhLElBRXRCcHlCLEdBQVV6ZCxHQUNIQSxFQUFPMGQsTUFBSyxLQUNmdVgsR0FBcUIsQ0FBQzRhLEVBQWFweEIsUUFBUVgsTUFBTWMsU0FDMUMsMEJBR1IsY0FBYyxHQUdYLElBRVgvYyxDQUNYLENDakNPLFNBQVNpdUMsR0FBcUJyeEIsRUFBU2hDLEtBQ3hDZ0MsRUFBUS9CLFlBQ1YsTUFBTXVOLEVBQVd4TCxFQUFRd0wsU0FDbkJtQyxFQUFXLEdBQ2pCLEdBQUluQyxFQUFTNXFCLFNBQ1Qwd0MsR0FBd0I5bEIsRUFBVXhOLEVBQWMyUCxHQUM1Q0EsRUFBUy9zQixRQUNULE9BQU8vQixRQUFRNE8sSUFBSWtnQixHQUFVMU8sTUFBSyxPQUM1Qm5ELEVBQVNDLE1BQ1h5UixHQUFtQnhOLEdBRW5CQSxFQUFReU4sWUFBYyxLQUNwQjNSLEVBQVNDLE1BQ1hJLEdBQU8sSUFJbkJxUixHQUFtQnhOLEdBRW5CQSxFQUFReU4sWUFBYyxFQUMxQixDQUNBLFNBQVM2akIsR0FBd0I5bEIsRUFBVXhOLEVBQWMyUCxHQUNyRCxNQUFNM04sRUFBVXdMLEVBQVMsR0FDbkJqcUIsRUFBU3llLEVBQVFwRixTQUFTNEQsUUFBUXdCLEVBQVNoQyxHQUNqRCxPQUFJZ0IsR0FBVXpkLElBQ1Zvc0IsRUFBUzNuQixLQUFLekUsR0FDUEEsRUFBTzBkLE1BQUssS0FDZixHQUFJdU0sRUFBUzVxQixPQUFTLEVBQ2xCLE9BQU8wd0MsR0FBd0I5bEIsRUFBU2pXLE1BQU0sRUFBR2lXLEVBQVM1cUIsUUFBU29kLEVBQWMyUCxFQUNyRixNQUdKM04sRUFBUXlOLGNBQ1JELEdBQW1CeE4sVUFDWkEsRUFBUXlOLGFBRWZqQyxFQUFTNXFCLE9BQVMsRUFDWDB3QyxHQUF3QjlsQixFQUFTalcsTUFBTSxFQUFHaVcsRUFBUzVxQixRQUFTb2QsRUFBYzJQLFFBRHJGLEVBR0osQ0N4Q08sU0FBUzRqQixHQUEyQm54QyxFQUFPNGYsRUFBU2hDLEtBQ3JEZ0MsRUFBUS9CLFlBRVYsR0FEbUJ1ekIsR0FBMkJweEMsRUFBTzRmLEdBSWpELE9BRkFxeEIsR0FBcUJyeEIsRUFBU2hDLFFBQzlCNEgsR0FBa0J4bEIsRUFBTzRmLEVBQVNoQyxFQUFjLEtBSXBELEdBQUlnQyxFQUFRZ1csZUFBZ0IsRUFFeEJBLEVBRHVCaFcsRUFBUWdXLGdCQUNoQjUxQixFQUFNaXBCLE1BQ3pCLENBQ0EsTUFBTW1DLEVBQVd4TCxFQUFRd0wsU0FDbkJpbUIsRUFBWXJ4QyxFQUFNb3JCLFVBQVksR0FDOUJrbUIsRUFBYzF4QixFQUFRcEYsU0FBUzYwQixhQUNoQnJ2QyxFQUFNcXZDLGFBQ2RscEMsU0FBUSxDQUFDb3JDLEVBQWF6c0MsS0FFVndzQyxFQUFZeHNDLEdBQU8sR0FDM0I2ZixXQUFhNHNCLEVBQVksR0FBRzVzQixVQUFVLElBRXZEeUcsRUFBU2psQixTQUFRLENBQUN5WixFQUFTOWEsS0FDdkI4YSxFQUFRcEYsU0FBUzhXLGNBQWMrZixFQUFVdnNDLEdBQ3pDOGEsRUFBU2hDLEVBQWEsR0FFOUIsQ0FDTyxTQUFTd3pCLEdBQTJCcHhDLEVBQU80ZixHQUU5QyxHQURpQkEsRUFBUTVmLFFBQ1JBLEVBQ2IsT0FBTyxFQUlYLE9BRG9CQSxHQUE2QixZQUFwQkEsRUFBTXNlLFVBQ2YsRUFBSSxDQUM1QixDQy9CTyxTQUFTa3pCLEdBQWMxOEIsR0FDMUIsTUFjTTI4QixFQUFVOUIsR0FkQSxDQUNacnhCLFVBQVcsVUFDWDhTLHFCQUFzQixFQUN0QnhMLGVBQ0F4SCxRQUFTNnlCLEdBQ1QzZixjQUFlNmYsR0FDZjVyQixnQkFBaUI2ckIsR0FDakJ0OEIsVUFDQTFSLFVBQVcsR0FDWG9TLFdBQVksR0FDWjQ1QixVQUFXLEdBQ1hDLGFBQWMsR0FDZEksaUJBQWdCLElBRWdCQSxJQUVwQyxPQURBZ0MsRUFBUTM4QixRQUFVQSxFQUNYMjhCLENBQ1gsQ0FDTyxTQUFTOUIsR0FBVzNzQyxFQUFTMHVDLEdBQ2hDLE1BQU1ELEVBQVUsSUFBSXJ4QixLQUNoQixNQUFNbXdCLEVBQWEsSUFBS2tCLEdOa0d6QixJQUE4QjlyQyxFQUFNbVosRU1sRW5DLE9BL0JBeXhCLEVBQVcvNkIsV0FBYSxJQUFJaThCLEVBQVFqOEIsWUFDcEMrNkIsRUFBV25CLFVBQVksSUFBSXFDLEVBQVFyQyxXQUNuQ21CLEVBQVdsQixhQUFlLElBQUlvQyxFQUFRcEMsY0FDbENqdkIsRUFBSzVmLE9BQVMsR0FDSyxpQkFBWjRmLEVBQUssS0FDWDdlLE1BQU13ZCxRQUFRcUIsRUFBSyxNQUNuQkEsRUFBSyxHQUFHOUIsWU4yRmdCM1ksRU16Rko0cUMsRU55RlV6eEIsRU16RkVzQixFQUFLLEdOMEYvQjVOLE9BQU84VyxRQUFReEssR0FBUTFSLFFBQU8sQ0FBQ0MsR0FBTW1DLEVBQU14UCxLQUNsRHdQLEtBQVFxZ0MsR0FDREEsR0FBVXJnQyxHQUFNN0osRUFBTTNGLEdBSTFCc3ZDLEdBQU0zcEMsRUFBTSxDQUFDNkosRUFBTXhQLEdBQU8sRUFBT2luQixNQUN6Q3RoQixHTWhHS3lhLEVBQUtoRyxPQUFPLEVBQUcsSUFFbkJtMkIsRUFBV250QyxVQUFZZ2QsRUFFdkJBLEVBQUtqYSxTQUFROGUsSUFDVCxHQUFJc3FCLEdBQWtCdHFCLEdBQU0sQ0FDeEIsR0FBc0IsWUFBbEJBLEVBQUkzRyxVQVdKLE9BVkFpeUIsRUFBV2xCLGFBQWF6cEMsUUFBUXFmLEVBQUlvcUIsbUJBQ2hDcHFCLEVBQUltRyxXQUVDbWxCLEVBQVdubEIsU0FJWm1sQixFQUFXbmxCLFNBQVN4bEIsUUFBUXFmLEVBQUltRyxVQUhoQ21sQixFQUFXbmxCLFNBQVduRyxFQUFJbUcsV05tRGJwckIsRU0zQ0FpbEIsR04yQ08rcUIsRU0zQ0ZPLEdONEM3Qm5sQixXQUNUNGtCLEVBQVE1a0IsU0FBVyxJQUV2QjRrQixFQUFRNWtCLFNBQVN4bEIsS0FBSzVGLEVNOUNkLENOMENMLElBQWtDQSxFQUFPZ3dDLENNMUNwQyxJQUVHTyxDQUFVLEVBT3JCLE9BTEEvOUIsT0FBT3VnQixPQUFPMGUsRUFBU3p1QyxHQUN2QndQLE9BQU91Z0IsT0FBTzBlLEVBQVNoQyxHQUFpQmdDLElBQ3hDQSxFQUFRajhCLFdBQWEsSUFBSXhTLEVBQVF3UyxZQUNqQ2k4QixFQUFRckMsVUFBWSxJQUFJcHNDLEVBQVFvc0MsV0FDaENxQyxFQUFRcEMsYUFBZSxJQUFJcnNDLEVBQVFxc0MsY0FDNUJvQyxDQUNYLENBQ0EsU0FBUzdyQixHQUFZNWxCLEVBQU80ZixFQUFTaEMsRUFBY2QsR0FDL0M4QyxFQUFRd0wsU0FBVyxHQUNuQixNQUFNcG9CLEVBQVV3dEMsR0FBa0J4d0MsRUFBTzRmLEVBQVNoQyxFQUFjZ0MsRUFBUXdMLFVBQ3hFOVAsRUFBYzFWLEtBQUssQ0FBQ2dYLEVBQWEsQ0FBQ0UsRUFBYzlaLEVBQVMsK0JBQ3pELE1BQU11VixFQUFNLENBQ1I1QyxHQUFJM1YsRUFBTThVLFFBQ1Y2WCxXQUFZM3BCLEVBRVo0UyxHQUFJNVYsRUFBTXdWLFlBR2QsT0FEQW9LLEVBQVF5TixZQUFjLENBQUM5VSxHQUNoQnZWLENBQ1gsQ0N4RU8sTUFBTTJ1QyxHQUNOLFdBQ0gsTUFjTUYsRUFBVTlCLEdBZEEsQ0FDWnJ4QixVQUFXLFVBQ1g4UyxxQkFBc0IsRUFDdEJ4TCxZQUFhZ3NCLEdBQ2J4ekIsUUFBUzZ5QixHQUNUM2YsY0FBZTZmLEdBQ2Y1ckIsZ0JBQWlCNnJCLEdBQ2pCdDhCLFFBQVMsYUFDVDFSLFVBQVcsR0FDWG9TLFdBQVksR0FDWjQ1QixVQUFXLEdBQ1hDLGFBQWMsR0FDZEksaUJBQWdCLEtBSXBCLE9BREFnQyxFQUFRMzhCLFFBQVUsYUFDWDI4QixDQUNYLENBbkJ5QkksR0FvQnpCLFNBQVNELEdBQWlCNXhDLEVBQU80ZixFQUFTaEMsRUFBY2QsR0FDcEQ4QyxFQUFRd0wsU0FBVyxHQUNuQmdsQixHQUFnQnB3QyxFQUFNb0QsVUFBV3djLEVBQVNoQyxFQUFjZ0MsRUFBUXdMLFNBQVV0TyxFQUFjRixFQUM1RixDQzdCTyxNQUFNLEdBQVM0MEIsR0FBYyxVQUN2QixHQUFTQSxHQUFjLFVBQ3ZCLEdBQVNBLEdBQWMsVUFDdkJ4bEMsR0FBUXdsQyxHQUFjLFNBRXRCTSxHQUFLTixHQUFjLE1BRW5CTyxJQURLUCxHQUFjLE1BQ2RBLEdBQWMsT0FDbkJRLEdBQUtSLEdBQWMsTUFJbkJTLElBSEtULEdBQWMsTUFDZEEsR0FBYyxNQUNkQSxHQUFjLE1BQ2RBLEdBQWMsT0FDbkJVLEdBQUtWLEdBQWMsTUFDbkJXLEdBQU1YLEdBQWMsT0FDcEJZLEdBQVdaLEdBQWMsWUFDekJhLEdBQVNiLEdBQWMsVUFFdkJjLEdBQUlkLEdBQWMsS0FDbEJlLEdBQUlmLEdBQWMsS0FDbEJnQixHQUFPaEIsR0FBYyxRQUNyQmlCLEdBQVNqQixHQUFjLFVBQ3ZCa0IsR0FBUWxCLEdBQWMsU0FDdEJtQixHQUFRbkIsR0FBYyxTQUN0Qm9CLEdBQU1wQixHQUFjLE9DUHBCcUIsR0FBTSxDQUNmaGEsV0FBVSxxQkFBbUIsaUJBQWUsR0FDNUNsRSxlQUFjLGVBQWEsU0FBTyxHQ3BCekJtZSxHQUFpQng2QixJQUFJLEVBQUd4VSxjQUFhMEwsV0FDOUNzakMsR0FBZXBaLFNBQVF6NEIsS0FBUTZDLGNBQWEwTCxTQUFVdk8sSUFDL0NreEMsR0FBSU8sR0FBTSxJQUFJbGpDLGlCQUFxQmdqQyxHQUFLLENBQUV6eUMsR0FBSSxHQUFHeVAsbUJBQXVCaW9CLEdBQUszekIsSUFBYyxTQ01oR2l2QyxHQUFvQno2QixJQUFJLElBQU0sQ0FBQzA2QixFQUFXdDBCLEdBQVEsR0FBSXUwQixFQUFpQnA2QixHQUFPLEdBQUluUyxFQUFVLEVBQUc1QyxFQUFjLEVBQ25IMnpCLEVBQUl0WSxJQUFPdFAsS0FBVS9MLGNBQWE0QyxZQUFhbUosRUFBSSxDQUFFL0wsY0FBYTRDLG1CQUM1RDVDLEVBQ0ssR0FBS3lVLElBQUksR0FBVzI2QixrQkFBa0IsR0FBSXQ2QixHQUFVbzZCLEdBQVdDLEVBQWdCdnNDLEdBQVMsT0FDekZBLEVBQ0Zzc0MsRUFBUy92QixLQUFLdmMsR0FDZHVzQyxFQUFlanpDLE1BQVEwRyxDQUFPLEdBQy9Cb3NDLEdBQWUsQ0FBRWh2QyxjQUFhMEwsS0FBTSwwQkFHckMsR0FBYSxDQUFFMGpDLGtCQUFtQixDQUFDLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxVQUFZLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLHVCQUF3QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLE9BQVEsVUFBVyxDQUFDLEtBQU0scUJBQXNCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWdCLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sdUJBQTBCLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHFDQUF1QyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLGlDQUFrQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHdCQUEwQixDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDhCQUErQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9CQUFzQixDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLHlCQUEwQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLE9BQVEsVUFBVyxDQUFDLEtBQU0sdUJBQXdCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWUsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sUyxjQ2pCMTBDLElBQUlDLEdBQWMsS0FDWCxTQUFTQyxHQUFXQyxHQUFTLEVBQU05aUMsRUFBTytpQyxHQUN6QixPQUFoQkgsS0FDQUksYUFBYUosSUFDYnR1QyxRQUFRNG9DLE1BQU0sa0RBR2xCMEYsR0FBY3gwQyxZQUFXUSxVQUNyQm9SLEVBQVFBLEdBQVNpakMsR0FBUUMsTUFDekI1dUMsUUFBUTRvQyxNQUFNLDZCQUNkLE1BQU10c0MsUUNWUGhDLGVBQWdDczBDLEVBQU9ILEdBQW1CLEdBQzdEenVDLFFBQVFXLElBQUksZ0RBQWlEaXVDLEdBQzdELElBQUlDLEVBQVksRUFDWkosVUFDTSx3Q0FDSkksR0FFRkQsRUFBTWh5QyxTQUFTa3lDLEdBQVVDLGlCQUNuQiw0Q0FDQSx3Q0FDSkYsR0FFRkQsRUFBTWh5QyxTQUFTa3lDLEdBQVVFLHVCQUNuQix3Q0FDSkgsR0FFRkQsRUFBTWh5QyxTQUFTa3lDLEdBQVVHLGtCQUNuQix3Q0FDSkosR0FFRkQsRUFBTWh5QyxTQUFTa3lDLEdBQVVJLGVBQ25CLHdDQUNKTCxHQUVGRCxFQUFNaHlDLFNBQVNreUMsR0FBVUssdUJBQ25CLDRDQUNBLHdDQUNKTixHQUVGRCxFQUFNaHlDLFNBQVNreUMsR0FBVU0sd0JBQ25CLHdDQUNKUCxHQUVGRCxFQUFNaHlDLFNBQVNreUMsR0FBVU8sZUFDbkIsd0NBQ0pSLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVUSxnQkFDbkIsd0NBQ0pULEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVUyxtQkFDbkIsd0NBQ0pWLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVVSxzQkFDbkIsd0NBQ0pYLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVVyx1QkFDbkIsd0NBQ0paLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVWSx3QkFDbkIsd0NBQ0piLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVYSxtQkFDbkIsd0NBQ0pkLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVYyxjQUNuQix3Q0FDSmYsR0FFRkQsRUFBTWh5QyxTQUFTa3lDLEdBQVVlLGtCQUNuQix3Q0FDSmhCLEdBRUZELEVBQU1oeUMsU0FBU2t5QyxHQUFVZ0IsZUFDbkIsd0NBQ0pqQixHQUVON3VDLFFBQVE0b0MsTUFBTSxjQUFjaUcsb0JBQzVCLElBQ0ksTUFBTWtCLEVBQVEzN0IsS0FBS0MsTUFDYi9YLFFBQWUsS0FBQThPLHVCQUNmelIsRUFBT3lhLEtBQUtDLE1BQVEwN0IsRUFFMUIsT0FEQS92QyxRQUFRNlgsS0FBSyx3QkFBd0JsZSxPQUM5QjJDLENBQ1gsQ0FDQSxNQUFPcUosR0FFSCxPQURBM0YsUUFBUTJGLE1BQU0sa0JBQW1CQSxJQUMxQixDQUNYLENBQ0osQ0QzRTZCcXFDLENBQWlCdGtDLEVBQU8raUMsR0FDeENELElBR0RseUMsRUFDQTJ6QyxNQUFNLDBCQUdWQSxNQUFNLGdEQUErQyxHQVp6QyxJQWNwQixDRWpCTyxJQUFJbkIsSUFDWCxTQUFXQSxHQUNQQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUF5QixjQUFJLGdCQUM3QkEsRUFBcUIsVUFBSSxZQUN6QkEsRUFBd0IsYUFBSSxlQUM1QkEsRUFBcUIsVUFBSSxZQUN6QkEsRUFBbUIsUUFBSSxVQUN2QkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBb0IsU0FBSSxXQUN4QkEsRUFBc0IsV0FBSSxhQUMxQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBMEIsZUFBSSxpQkFDOUJBLEVBQXlCLGNBQUksZ0JBQzdCQSxFQUEwQixlQUFJLGlCQUM5QkEsRUFBeUIsY0FBSSxlQUNoQyxDQWxCRCxDQWtCR0EsS0FBY0EsR0FBWSxDQUFDLElBQ3ZCLE1BQU1ILEdBQ2IsV0FDSSxNQUFNMTVCLEVBQVNpN0IsYUFBYUMsVUFBWTFxQyxLQUFLQyxVQUFVLENBQUUwcUMsVUFBVSxFQUFNeEIsTUFBT2poQyxPQUFPaUYsT0FBT2s4QixNQUM5RixPQUFPcnBDLEtBQUs0cUMsTUFBTXA3QixFQUN0QixDQUp1QnE3QixHQUtoQixTQUFTQyxLQUNaTCxhQUFhQyxTQUFXMXFDLEtBQUtDLFVBQVVpcEMsR0FDM0MsQ0FDQSxNQUFNNkIsR0FBbUI3aUMsT0FBT2lGLE9BQU9rOEIsSUFDMUIyQixHQUFrQixDQUFDQyxFQUFZRixNQUV4QyxNQUFNRyxFQUFrQixJQUFJRCxHQUN2QkUsTUFBSyxDQUFDbEQsRUFBR21ELElBQU1uRCxFQUFFb0QsY0FBY0QsS0FDL0I1dkMsS0FBSTJ5QixJQUFRLENBQ2JBLE9BQ0FtZCxLQUFNQyxHQUFldk0sTUFBS3dNLEdBQUtBLEVBQUV0a0MsT0FBU2luQixRQUU5QyxPQUFPMFosR0FBSUgsR0FBRyxjQUFlRyxHQUFJLENBQUU5d0MsTUFBTyxvREFBcURvMkIsR0FBSytkLEVBQWdCMXZDLEtBQUksRUFBRzh2QyxPQUFNbmQsVUFBVzBaLEdBQUksQ0FBRTl3QyxNQUFPLHFEQUF1RDJLLEdBQU0sQ0FDbE53RCxLQUFNaW9CLEdBQUssYUFBZWdCLEVBQzFCQSxLQUFNLFdBQ04xNEIsR0FBSTAzQixHQUFLLGFBQWVnQixFQUN4Qm4yQixRQUFTbTFCLEdBQUsrYixHQUFRQyxNQUFNaHlDLFNBQVNnM0IsR0FDckNILFFBQVMsSUF3QmpCLFNBQXdCRyxFQUFNc2QsR0FBZSxHQUNyQ3ZDLEdBQVFDLE1BQU1oeUMsU0FBU2czQixHQUN2QnVkLEdBQVd2ZCxHQUdYd2QsR0FBWWh6QixLQUFLLENBQUV3VixPQUFNc2QsaUJBRTdCWCxJQUNKLENBaEN1QmMsQ0FBZXpkLE1BQzlCaEIsR0FBS21lLEdBQU1PLE1BQVFQLEVBQUtPLE1BQVEsSUFBTSxNQUFNeEQsR0FBTSxDQUFFeUQsSUFBSzNlLEdBQUssYUFBZWdCLEdBQVEsS0FBS2hCLEdBQUtnQixJQUFPLElBQUs4WixHQUFFLENBQzdHOEQsS0FBTTVlLEdBQUssaUJBQWlCZ0IsSUFDNUJwM0IsTUFBTyx3Q0FDUixNQUFPLElBQUtreEMsR0FBRSxDQUNiOEQsS0FBTTVlLEdBQUssSUFBSWdCLElBQ2ZwM0IsTUFBTyxtQkFDUixPQUFPNEssSUFBSXdzQixPQUFRaEIsR0FBSzhkLEVBQVUvMEMsT0FBUyxHQUFLLENBQy9DMnhDLEdBQUlRLEdBQU0sQ0FDTnJhLFFBQVMsSUFBTWlkLEVBQVVwdkMsU0FBUW13QyxJQUU3QkMsR0FBU0QsR0FBVSxHQUNuQmxCLElBQW1CLEtBRXhCLFNBQ0hqRCxHQUFJUSxHQUFNLENBQ05yYSxRQUFTLElBQU1pZCxFQUFVcHZDLFNBQVFtd0MsSUFDN0JOLEdBQVdNLEdBQ1hsQixJQUFtQixLQUV4QixhQUNKLEVBRVBFLEdBQWdCa0IsU0FBVyxXQVVwQixNQUFNUCxHQUFjLElBQUkzekIsR0FDL0IsU0FBUzB6QixHQUFXdmQsR0FDZithLEdBQVFDLE1BQVFELEdBQVFDLE1BQU16dEMsUUFBTy9FLEdBQUtBLElBQU13M0IsR0FDckQsQ0FDTyxTQUFTOGQsR0FBUzlkLEVBQU1zZCxHQUFlLEdBQzFDdkMsR0FBUUMsTUFBTTd0QyxLQUFLNnlCLEdBQ2ZzZCxHQUFnQnZDLEdBQVF5QixVQUN4QjdCLElBRVIsQ0N4Rk8sTUFBTXFELEdBQWNuK0IsSUFBSSxDQUFDM1MsRUFBTSt3QyxJQUFlLEdBQUtuK0IsSUFBSSxHQUFXbytCLGdCQUFnQixHQUFJaHhDLEdBQU0sSUFBTSt3QyxFQUFXL3dDLE9BRTlHLEdBQWEsQ0FBRWd4QyxnQkFBaUIsQ0FBQyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsNEJBQTZCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsT0FBUSxVQUFXLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGlCQ0N4T0MsR0FBa0J0K0IsSUFBSSxDQUFDdStCLEVBQU1DLEVBQVVDLElBQWdCLENBQUNDLEVBQVEsUUFBU3R3QyxFQUFVLEVBQUc1QyxFQUFjLEVBQUdtekMsRUFBSzkzQixJQUFPdFAsS0FBVW1uQyxRQUFPdHdDLFVBQVM1QyxnQkFBaUIrTCxFQUFJLENBQUVtbkMsUUFBT3R3QyxVQUFTNUMsa0JBQWlCMnpCLElBQU0zekIsR0FBZW96QyxlQUFjQyxhQUFZVCxhQUFZOThCLFFBQU9pQixTQUFVZzhCLElBQVMsR0FBS3QrQixJQUFJLEdBQVc2K0IsaUJBQWlCLEdBQUlOLEVBQVNuNEIsU0FBU3VELFNBQVcsb0JBQXNCLFNBQVU0MEIsRUFBU3oyQyxNQUFPdVosRUFBTXk5QixnQkFBZ0JuMUIsU0FBVyxvQkFBc0IsU0FBVWkxQixFQUFXajFCLFNBQVcsb0JBQXNCLFNBQVVpMUIsRXBCRzdnQixTQUFnQjc1QixHQUNuQixJQUFLQSxFQUNELE9BQU8sRUFFWCxNQUFNbUMsRUFBVUgsS0FDaEIsSUFBS0csRUFDRCxNQUFNLElBQUkxVixNQUFNLDhDQUVwQixNQUFPLElBQUlxVyxLQUNQLE1BQU14QyxFQUFlNkIsRUFBUTdCLGFBQzdCLE9BQU8rdkIsR0FBaUJ2dEIsRUFBTTlDLEVBQVVNLEVBQWFnQyxRQUFRLENBRXJFLENvQmZnaUJ5QyxDQUFPekksRUFBTXk5QixpQkFBa0JOLEVBQWFPLEdBQUszNEIsVUFBVSxNQUFRalksR0FBU21VLEVBQU1yYSxPQUFRcWEsRUFBTS9VLEtBQUlILEdBQVE4d0MsR0FBWTl3QyxFQUFNK3dDLEdBQVl6cUMsSUFBSXRHLEtBQVF1eEMsRUFBY3h3QyxFQUFTb3NDLEdBQWUsQ0FBRWh2QyxjQUFhMEwsS0FBTSw0QkFFM3VCLEdBQWEsQ0FBRTRuQyxpQkFBa0IsQ0FBQyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxtQkFBc0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sS0FBTyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxPQUFXLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxvQkFBdUIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxpQkFBb0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sZ0JBQWlCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDBCQUE2QixDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLGdCQUFpQixDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxnQ0FBbUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxnQkFBaUIsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUJBQXNCLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxlQUFrQixDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBYSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSx3QkFBMEIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sVUFBWSxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxDQUFFLFNBQVksSUFBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9CQUF3QixDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFFBQVksQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sU0NKNWdERyxHQUFvQmovQixJQUFLNCtCLEdBQWlCLENBQUNwekMsRUFBYyxFQUFHbXpDLElBQU9uekMsRUFBYTB6QyxFQUFjLENBQUNySSxJQUV4RyxHQURBdHFDLFFBQVFXLElBQUksSUFBSzJwQyxHQUNILFVBQVZBLEVBQUVsakMsSUFBaUIsQ0FDbkIsTUFBTWpNLEVBQVFtdkMsRUFBRXpsQyxPQUFPMUosTUFBTXNELE9BQzdCNHpDLEVBQWFsM0MsR0FDYm12QyxFQUFFemxDLE9BQU8xSixNQUFRLEVBQ3JCLE1BRVUsQ0FDTmdNLEdBQU0sQ0FDRnlzQixLQUFNLE9BQ05zWCxRQUFTeUgsRUFDVDFILFNBQVdYLElBQVErSCxFQUFhL0gsRUFBRXpsQyxPQUFPMUosT0FBUW12QyxFQUFFemxDLE9BQU8xSixNQUFRLEVBQUUsSUFFeEUsR0FBTyxDQUFFeTRCLEtBQU0sU0FBVUgsUUFBUzRlLEdBQWdCLGtCQUNsRHpmLEdBQUtxYixHQUFlLENBQUVodkMsY0FBYTBMLEtBQU0seUJDYnBDOG5DLEdBQU8sQ0FDaEIzNEIsU0FBVSxNQUFRMjRCLEdBQUtqM0MsTUFDdkJBLE1BQU8sR0FFWCxHQUFlaVksSUFBSSxJQUFNLENBQUN1QyxFQUFRLEdBQUluVSxFQUFVLEVBQUc1QyxFQUFjLEVBQUcyekMsR0FBWSxFQUFNQyxFQUFnQixJQUFLUCxFQUFhLE9BQVF6d0MsR0FBUyt3QixJQUFNM3pCLEVBQWFvekMsRUFBZSxDQUFDajJDLElBQ3hLNFosRUFBUUEsRUFBTS9VLEtBQUk3RSxHQUFLQSxJQUN2QjRaLEVBQU1qVixLQUFvQixpQkFBUixFQUFtQjNFLEVBQUksT0FBUzRaLEVBQU1yYSxPQUFPLEdBQ2hFazJDLEVBQWEsQ0FBQy93QyxHQUFTa1YsRUFBUUEsRUFBTTdVLFFBQU8vRSxHQUFLQSxJQUFNMEUsT0FBVXdzQyxHQUFJLEdBQU8sQ0FBRXB5QyxHQUFJLG9CQUFxQnU0QixRQUFTNmUsR0FBYyxlQUFnQjNFLEdBQUssQ0FBRXp5QyxHQUFJLHdCQUF5QjAzQixHQUFLL3dCLEtBQVUrd0IsR0FBS3FiLEdBQWUsQ0FBRWh2QyxjQUFhMEwsS0FBTSwyQkFBNEIyaUMsR0FBSU0sR0FBTyxZQUFhRCxHQUFLLENBQUV6eUMsR0FBSSxvQkFBcUIwM0IsR0FBSzZmLEdBQUszNEIsU0FBU3VELFNBQVcsb0JBQXNCLFdBQVcsS0FBS3VWLEdBQUs2ZixHQUFLajNDLFFBQVEsR0FBTyxDQUMxWk4sR0FBSSxzQkFDSjA0QixLQUFNLFNBQ05ILFFBQVMsSUFBTW1mLEdBQWFBLEdBQzdCLGdCQUFpQixpQkFBa0I1OEIsRUFBTXJhLE9BQVEsR0FBTyxDQUFFODNCLFFBQVM0ZSxHQUFnQixhQUFjcEYsTUFBTXJhLEdBQUtnZ0IsR0FBYWIsR0FBZ0IsQ0FDeElPLGFBQVl0OEIsUUFBT3E4QixlQUFjUixhQUNqQzk4QixNQUFPLENBQUV5OUIsZ0JBQWlCRixJQUMzQkcsR0FBTUgsS0FBYTFmLEdBQUs4ZixHQUFrQkwsT0NqQmhDUyxHQUFPci9CLEdBQUltakIsZ0JBQWUsQ0FBQ21jLEVBQU1DLEVBQVUveUMsSUFBVSxDQUFDZ3pDLEdBQVUsRUFBT3JnQixFQUFJdFksSUFBT3RQLElBQVFpb0MsR0FBV2pvQyxFQUFJaW9DLE9BQzNHLEdBQUt2L0IsSUFBSSxHQUFXdy9CLGlCQUFpQixHQUFJSCxFQUFLSSxVQUFXRixFQUFVQSxFQUF5USxHQUFLdi9CLElBQUksR0FBV3cvQixpQkFBaUIsR0FBSUgsRUFBS0ssT0FBTyxJQUFNSCxHQUFVLElBQVEzSSxHQUFNK0ksR0FBVS9JLEdBQUc4SSxLQUt2YixTQUFzQkEsRUFBT0wsRUFBTTl5QyxFQUFPK3lDLEdBQ3RDLEdBQXFCLElBQWpCSSxFQUFNejNDLE9BRU4sWUFEQXEzQyxFQUFTTSxXQUFXUCxFQUFLNzNDLElBRzdCODNDLEVBQVNPLGdCQUFnQlIsRUFBTSxDQUFFSyxTQUFTbnpDLEVBQzlDLENBVlF1ekMsQ0FBYUosRUFBT0wsRUFBTTl5QyxFQUFPK3lDLEdBQ2pDQyxHQUFVLENBQUssTUFGaUUsR0FBS3YvQixJQUFJLEdBQVd3L0IsaUJBQWlCLEdBQUlILEVBQUtJLFdBQWEsS0FBTTdJLEdBQU0wSSxFQUFTUyxXQUFXVixFQUFNOXlDLElBQVE4eUMsRUFBS0ksV0FBYSxXQUFXLElBQU1ILEVBQVNTLFdBQVdWLEVBQU05eUMsS0FBUSxJQUFNZ3pDLEdBQVdBLEdBQVNGLEVBQUtLLE9BQU8sSUFBTUosRUFBU1Usa0JBQWtCenpDLFFBWXRVLFNBQVNvekMsR0FBVS9JLEVBQUdxSixHQUN6QixHQUFjLFVBQVZySixFQUFFbGpDLElBQWlCLENBR25CLE9BREF1c0MsRUFEY3JKLEVBQUV6bEMsT0FBTzFKLE1BQU1zRCxTQUV0QixDQUNYLENBQ0osQ0FHQSxNQUFNLEdBQWEsQ0FBRXkwQyxpQkFBa0IsQ0FBQyxDQUFDLENBQUUsR0FBTSxLQUFNLEdBQU0sQ0FBQyxDQUFDLGtCQUFtQixDQUFFLFNBQVksR0FBSyxTQUFVLENBQUMsZ0JBQWlCLENBQUUsU0FBWSxHQUFLLFVBQVcsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLFFBQVMsU0FBVSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFDLE9BQVEsVUFBVyxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssTUFBTyxDQUFDLFFBQVMsWUFBYyxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBQyxRQUFTLFVBQVcsQ0FBQyxPQUFRLFlBQWEsQ0FBQyxDQUFFLFNBQVksSUFBTSxDQUFDLFNBQVUsQ0FBRSxTQUFZLEdBQUssUUFBVSxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBQyxjQUFlLG1CQUFvQixDQUFDLFdBQVksQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsV0FBWSxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxvQkFBd0IsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLG9CQUFxQixHQUFNLENBQUMsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsS0FBTSxtQkFBb0IsQ0FBQyxPQUFRLFFBQVMsQ0FBQyxhQUFjLENBQUMsUUFBUyxRQUFTLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxNQUFPLENBQUMsT0FBUSxDQUFFLFNBQVksR0FBSyxNQUFPLENBQUMsVUFBVyxDQUFFLFNBQVksR0FBSyxRQUFVLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFDLFFBQVMsbUJBQW9CLENBQUMsVUFBVyxlQUFnQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSwwQkNkdG9DLEdBQWEsQ0FBRVUsZ0JBQWlCLENBQUMsQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLFVBQVcsQ0FBQyxjQUFlLFdBQVksR0FBTSxDQUFDLENBQUUsR0FBTSxLQUFNLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWMsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsYUFBYyxDQUFDLFFBQVMsWUFBYSxDQUFDLGNBQWUsMEJBQTJCLENBQUMsVUFBVyxDQUFFLFNBQVksR0FBSyxhQ1I3U0MsR0FBU3BnQyxHQUFJbWpCLGdCQUFlLENBQUNrZCxFQUFZQyxFQUFpQjNkLEVBQU80ZCxJQUFvQixHQUFLdGdDLElBQUksR0FBV3VnQyxnQkFBZ0IsR0FBSUQsRUFBaUJBLEVBQWtCLEdBQUssSUFBZSxNQUFWNWQsRUFBeUIsWUFBVkEsRUFBK0IsZUFBVkEsRUFBeUIwZCxFQUFhRSxFQUFtQixHQUFLLEdBQUt0Z0MsSUFBSSxHQUFXdWdDLGdCQUFnQixJQUFJLElBQU1GLFNBRWpVLEdBQWEsQ0FBRUUsZ0JBQWlCLENBQUMsQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLFVBQVcsQ0FBQyxjQUFlLFdBQVksR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLFFBQVMsZUFBZ0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBZSxDQUFFLEdBQU0sS0FBTSxHQUFNLENBQUMsQ0FBQyxRQUFTLFlBQWEsR0FBTSxDQUFDLENBQUUsR0FBTSxLQUFNLEdBQU0sQ0FBQyxDQUFFLEdBQU0sSUFBSyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixDQUFDLGlCQUFrQixDQUFFLFNBQVksR0FBSyxTQUFVLENBQUMsT0FBUSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWUsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxJQUFLLEdBQU0sQ0FBQyxDQUFDLEtBQU0seUJBQTBCLENBQUMsaUJBQWtCLENBQUUsU0FBWSxHQUFLLFNBQVUsQ0FBQyxPQUFRLGFBQWMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sY0FBa0IsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxJQUFLLEdBQU0sQ0FBQyxDQUFDLEtBQU0sNEJBQTZCLENBQUMsaUJBQWtCLENBQUUsU0FBWSxHQUFLLFNBQVUsQ0FBQyxPQUFRLGdCQUFpQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxtQkFBd0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsUUFBUyxtQkFBb0IsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sd0JDRnRqQyxNQUFNQyxHQUFVLElBQU12eEMsT0FBTzJKLFNBQVNDLEtBQUs0bkMsVUFBVSxJQUFNLElBUTlDQyxHQUFnQixLQUN6QixNQUFNeHhCLEVBQVN4SSxJQUFNLEtBQU0sQ0FDdkJnYyxNQUFPOGQsS0FDUDVuQyxTQUFVM0osT0FBTzJKLGFBR2YrbkMsRUFBZTU3QixJQUFVMmQsR0FBVXhULEVBQU93VCxNQUFROGQsT0FFbERwWixFQUFXMWdCLElBQU0sSUFkUixDQUFDaTZCLElBQ2hCLE1BQU12WixFQUFXLElBQU11WixFQUFhSCxNQUVwQyxPQURBdnhDLE9BQU9veEIsaUJBQWlCLGFBQWMrRyxHQUMvQkEsQ0FBUSxFQVlKd1osQ0FBV0QsS0FHdEIsT0FEQTlnQixJQUFVLElBQU01d0IsT0FBT3dsQyxvQkFBb0IsYUFBY3JOLEtBQ2xEbFksQ0FBTSxFQ2ZKMnhCLEdBQVEsR0FDZnZCLEdDREMsU0FBcUJ1QixHQW9DeEIsU0FBU2hCLEVBQWdCUixFQUFNeUIsRUFBU3YwQyxHQUVwQyxPQURBczBDLEVBQU10MEMsR0FBUyxJQUFLOHlDLEtBQVN5QixHQUN0QkQsQ0FDWCxDQUNBLE1BQU8sQ0FDSEUsUUF4Q0osU0FBaUJyQixHQUViLE9BREFtQixFQUFNeHpDLEtBQUssQ0FBRTdGLEdBUFYsdUNBQXVDc0QsUUFBUSxTQUFTLFNBQVUwcUMsR0FDckUsSUFBSS82QixFQUFxQixHQUFoQnVtQyxLQUFLQyxTQUFpQixFQUMvQixPQUQ0QyxNQUFOekwsRUFBWS82QixFQUFTLEVBQUpBLEVBQVcsR0FDekRoUyxTQUFTLEdBQ3RCLElBSTZCaTNDLFFBQU9ELFdBQVcsSUFDcENvQixDQUNYLEVBc0NJakIsV0FyQ0osU0FBb0JwNEMsR0FDaEIsT0FBT3E1QyxFQUFNcHpDLFFBQVF5ekMsR0FBTUEsRUFBRTE1QyxLQUFPQSxHQUN4QyxFQW9DSXU0QyxXQS9CSixTQUFvQlYsRUFBTTl5QyxHQUN0QixPQUFPc3pDLEVBQWdCUixFQUFNLENBQUVJLFdBQVlKLEVBQUtJLFdBQWFsekMsRUFDakUsRUE4Qkk0MEMsVUE3QkosV0FFSSxPQURBTixFQUFRLEVBRVosRUEyQklPLFVBMUJKLFNBQW1CM0IsR0FDZixJQUFLLElBQUlsekMsRUFBUXMwQyxFQUFNNTRDLE9BQVMsRUFBR3NFLEdBQVMsSUFBS0EsRUFDN0NzMEMsRUFBTXQwQyxHQUFTLElBQ1JzMEMsRUFBTXQwQyxHQUNUa3pDLGFBR1IsT0FBT29CLENBQ1gsRUFtQklSLGdCQWxCSixXQUNJLElBQUssSUFBSTl6QyxFQUFRczBDLEVBQU01NEMsT0FBUyxFQUFHc0UsR0FBUyxJQUFLQSxFQUN6Q3MwQyxFQUFNdDBDLEdBQU9rekMsV0FDYm9CLEVBQU1oL0IsT0FBT3RWLEVBQU8sR0FHNUIsT0FBT3MwQyxDQUNYLEVBWUliLGtCQXZDSixTQUEyQnp6QyxHQUV2QixPQURBczBDLEVBQU1oL0IsT0FBT3RWLEVBQU8sR0FDYnMwQyxDQUNYLEVBcUNJUSxhQUFjLFNBQXNCaEMsRUFBTTl5QyxHQUN0QyxPQUFPc3pDLEVBQWdCUixFQUFNLENBQUVJLFdBQVcsR0FBUWx6QyxFQUN0RCxFQUNBKzBDLGtCQUFtQixTQUEyQmpDLEVBQU05eUMsR0FFaEQsT0FEQXMwQyxFQUFNdDBDLEdBQVMsSUFBSzh5QyxHQUNid0IsQ0FDWCxFQUNBaEIsa0JBRVIsQ0R4RGlCMEIsQ0FBWVYsSUFDaEJXLEdBQVUsS0FDbkIsTUFBTTllLEVBQVFnZSxLQUFnQmhlLE1BQ3hCNGQsRUFBa0JPLEdBQU1wekMsUUFBUTR4QyxJQUFVQSxFQUFLSSxZQUFXeDNDLE9BRTFEdzVDLEVBQTZCLGVBQVYvZSxFQUNuQmdmLEVBRjBCLFlBQVZoZixHQUVnQm1lLEdBQU1wekMsUUFBTzR4QyxJQUFTQSxFQUFLSSxhQUM3RGdDLEdBQW9CWixHQUFNcHpDLFFBQU80eEMsR0FBUUEsRUFBS0ksYUFBY29CLEdBQzFEYyxFQUFZZCxHQUFNNTRDLE9BQ2xCMjVDLEVBQVNGLEVBQWFuMEMsS0FBSSxDQUFDOHhDLEVBQU05eUMsSUFDNUI2eUMsR0FBS0MsRUFBTUMsR0FBVS95QyxHQUFPbUgsSUFBSTJyQyxFQUFLNzNDLE1BRWhELE9BQU8sR0FBS3dZLElBQUksR0FBVzZoQyxpQkFBaUIsSUFBcUQsRUhqQi9FLENBQUN2QyxHQUFhdi9CLEdBQUlRLFdBQWEsSUFBTSxHQUFLUCxJQUFJLEdBQVdrZ0MsZ0JBQWdCLElBQUt0SixJQUNsRitJLEdBQVUvSSxHQUFHOEksR0FBU0osRUFBU3lCLFFBQVFyQixPQUVqRDlJLEVBQUV6bEMsT0FBTzFKLE1BQVEsR0FDckIsSUdhd0dxNkMsQ0FBT3hDLElBQVdxQyxFQUFZLEdBQUssR0FBSzNoQyxJQUFJLEdBQVc2aEMsaUJBQWlCLEdBQUl2QixFQUFrQixFQUFJLEVBQUksR0FBSTFKLEdBQU0wSSxHQUFTOEIsVUFBVXhLLEVBQUV6bEMsT0FBT3BILFVBQVU2M0MsRUFBUXpCLEdBQU93QixFQUFXckMsR0FBU2UsZ0JBQWlCM2QsRUFBTzRkLElBQWtCLEVBR3pVLEdBQWEsQ0FBRXVCLGlCQUFrQixDQUFDLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxjQUFnQixDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxjQUFnQixDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxjQUFnQixDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxXQUFhLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsUUFBUyxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLHlCQUEwQixHQUFNLENBQUMsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsS0FBTSxjQUFlLENBQUMsUUFBUyxjQUFlLENBQUMsT0FBUSxZQUFhLENBQUMsVUFBVyxDQUFFLFNBQVksR0FBSyxNQUFPLENBQUMsU0FBVSxDQUFFLFNBQVksR0FBSyxRQUFVLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFDLFFBQVMsb0JBQXFCLENBQUMsTUFBTyxlQUFnQixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSx3QkFBNEIsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUMsUUFBUyw0QkFBNkIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssT0FBVyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxpQkVwQnp6QkUsR0FBZ0JoaUMsSUFBSSxDQUFDaWlDLEVBQVE3RSxFQUMxQ2o4QixLQUNJLElBQUkvUyxFQUFVLEVBSWQsT0FGQTR6QyxHQUFjNWdCLFNBQVF6NEIsSUFBTXM1QyxFQUFRN0UsRUFBR2o4QixHQUFZeFksSUFFNUNteEMsR0FBUyxDQUFFcnlDLEdBQUksb0JBQXNCc3lDLEdBQU8saUJBQWtCRixHQUFJLENBQUU5d0MsTUFBTyw2QkFBOEJvMkIsR0FBS2hlLElBQVcwNEIsSUFBSTFhLEdBQUsscUJBQXFCaFosR0FBa0JoRixPQUFjMDRCLElBQUkxYSxHQUFLLHFCQUFxQmhlLGFBQW9CbFksVUFBVSxHQUFPLENBQzdQeEIsR0FBSSwrQkFDSnU0QixRQUFTLE1BQVE1eEIsSUFDbEIrd0IsR0FBSywwQkFBMEIvd0IsTUFBWThyQyxHQUFLLENBQUV6eUMsR0FBSSxrQ0FBbUMwM0IsR0FBSy93QixLQUFVK3dCLEdBQUtxYixHQUFlLENBQUVodkMsWUFKakksRUFJOEkwTCxLQUFNLG1CQUFtQixJQUU5SmdyQyxHQUFxQmxpQyxJQUFJLENBQUNyWCxFQUFHd1ksSUFBYSxDQUFDL1MsRUFBVSxFQUFHNUMsRUFBYyxFQUFHMnpCLEVBQUl0WSxJQUFPdFAsS0FBVW5KLFVBQVM1QyxnQkFBaUIrTCxFQUFJLENBQUVuSixVQUFTNUMsa0JBQWlCbXpDLElBQU9uekMsSUFBZ0IsR0FBS3lVLElBQUksR0FBV2tpQyxpQkFBaUIsR0FBSXg1QyxFQUFHd1ksR0FBVSxNQUFRL1MsR0FBU0EsRUFBU0EsR0FBeUMsS0FFL1MsR0FBYSxDQUFFK3pDLGlCQUFrQixDQUFDLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxrQ0FBOEIsQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHFCQUF1QixDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sNkJBQThCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGdDQUFrQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSwrQkFBZ0MsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLFFDWnprQkMsR0FBU3BpQyxJQUFJLENBQUNpNkIsRUFBR21ELEVBQUdqOEIsS0FDdEJpaEMsR0FBT2hoQixTQUFRejRCLElBQU1zeEMsRUFBR21ELEVBQUdqOEIsR0FBWXhZLElBQ2hDbXhDLEdBQVNDLEdBQU8sU0FBVUYsR0FBSSxxQkFBcUIxYSxHQUFLOGEsR0FBRyxPQUFPOWEsR0FBS2llLElBQUl2RCxHQUFJLENBQUU5d0MsTUFBTyx5QkFBMkIsT0FBT28yQixHQUFLaGUsR0FBVSxXQU12SUcsR0FBUXRCLElBQUksQ0FBQ21mLEVBQUksZUFBaUIsQ0FBQzN6QixFQUFjLEVBQUc0QyxFQUFVLEVBQUcrd0IsRUFBSXRZLElBQU90UCxLQUFVL0wsY0FBYTRDLFlBQWFtSixFQUFJLENBQUUvTCxjQUFhNEMsY0FBYXV3QyxJQUFPbnpDLElBQWdCLEdBQUt5VSxJQUFJLEdBQVdvaUMsaUJBQWlCLEdBQUlELEdBQU8sRUFBRyxFQUFHLEdBQUtuaUMsSUFBSSxHQUFXb2lDLGlCQUFpQixHQUFJMWhDLEtBQUtDLFFBQVNvaEMsR0FBYyxDQUFDLEVBQUcsRUFBRyxHQUFLL2hDLElBQUksR0FBV29pQyxpQkFBaUIsSUFBSSxNQUFRajBDLEdBQVNBLEVBQVM1QyxFQUFhNEMsRUFBU29zQyxHQUFlLENBQUVodkMsY0FBYTBMLEtBQU0sK0JBSmphLE1BQ2QsTUFBTXBNLEVBQVksS0FDbEIsT0FBTyxHQUFLbVYsSUFBSSxHQUFXb2lDLGlCQUFpQixHQUFJLEdBQUl2M0MsRUFBVyxJQUFJOG9DLGdCQUFnQjlvQyxFQUFVLEVBRW1YdzNDLEdBQVl4M0MsVUFBWSxHQUFLbVYsSUFBSSxHQUFXb2lDLGlCQUFpQixJQUFJLE1BQVFqMEMsR0FBU0EsRUFBUzVDLEVBQWE0QyxFQUFTb3NDLEdBQWUsQ0FBRWh2QyxjQUFhMEwsS0FBTSxnQ0FBa0NnckMsR0FBbUIsR0FBSSxHQUFLamlDLElBQUksR0FBV29pQyxpQkFBaUIsSUFBSSxNQUFRajBDLEdBQVNBLEVBQVNBLEVBQVNvc0MsR0FBZSxDQUFFaHZDLGNBQWEwTCxLQUFNLCtCQUFpQ3FyQyxHQUFnQixDQUFFamhDLE1BQU8sR0FBS3JCLElBQUksR0FBV29pQyxpQkFBaUIsSUFBSSxNQUFRajBDLEdBQVNBLEVBQVNBLE1BQWEsTUFBUUEsR0FBU0EsRUFBUzVDLEVBQWE0QyxFQUFTb3NDLEdBQWUsQ0FBRWh2QyxjQUFhMEwsS0FBTSxrQkFDMStCcXJDLEdBQWtCdmlDLElBQUksRUFBR3NCLFlBQzNCaWhDLEdBQWdCbmhCLFNBQVF6NEIsS0FBUTJZLFVBQVczWSxJQUNwQ214QyxHQUFTQyxHQUFPLGtCQUFrQjVhLEdBQUs3ZCxPQUc1QyxHQUFhLENBQUUrZ0MsaUJBQWtCLENBQUMsQ0FBQyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZUFBa0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFDLFFBQVMsaUJBQWtCLENBQUMsS0FBTSxrQkFBbUIsR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGdCQUFtQixDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sZ0JBQWtCLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxxQkFBc0IsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUNBQXFDLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sdUJBQXdCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLFNBQVksQ0FBQyxDQUFFLEdBQU0sSUFBSyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQkFBeUIsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxtQ0FBb0MsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sc0NBQXdDLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLEtBQU8sQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0scUNBQXNDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsRUFB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QUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxnQkFBbUIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLElBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxpQkFBcUIsQ0FBRSxHQUFNLFdBQVksR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGVBQWtCLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBVyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsT0FBUSxRQUFTLENBQUMsUUFBUyxDQUFFLFNBQVksSUFBTSxNQUFPLENBQUMsU0FBVSxDQUFFLFNBQVksSUFBTSxRQUFVLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssT0FBVSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sdUJBQXlCLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxTQUFXLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sbUNBQStCLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDRCQUE4QixDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLDRCQUE2QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMEJBQTJCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLGFBQWlCLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0s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QUUsR0FBTSxPQUFRLEVBQUssVUFBZSxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUJBQXVCLENBQUUsR0FBTSxPQUFRLEVBQUssUUFBWSxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxRQUFTLHdDQUF5QyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sc0JBQXdCLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLE9BQVEsdUJBQXdCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE1BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLE9BQVEsR0FBTSxZQUFjLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUNBQXVDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMENBQTJDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFNBQWMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sV0FBYSxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUNBQXVDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMENBQTJDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFVBQWUsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUNBQXVDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMENBQTJDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFVBQWUsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHVDQUFtQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxpQ0FBa0MsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sOEJBQWdDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sbUNBQW9DLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFNBQWMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sdUNBQXdDLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9DQUFzQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLHlDQUEwQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxTQUFjLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sU0FBVSxHQUFNLENBQUMsQ0FBQyxLQUFNLHVDQUF3QyxDQUFDLFFBQVMsQ0FBRSxTQUFZLEdBQUssT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxvQ0FBc0MsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSx5Q0FBMEMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssU0FBYyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSw0QkFBNkIsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sMEJBQTZCLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSw0QkFBNkIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssVUFBZSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxpQ0FBa0MsQ0FBQyxRQUFTLENBQUUsU0FBWSxJQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sK0JBQWlDLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sbUNBQW9DLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFVBQWUsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sNkJBQThCLENBQUMsUUFBUyxDQUFFLFNBQVksSUFBTSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDhCQUFnQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE1BQVMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLCtCQUFnQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxVQUFlLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLElBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxxQkFBdUIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLElBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sd0JBQTJCLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQkFBd0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVUsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sdUJBQTBCLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scURBQWlELENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFDLFFBQVMsOEJBQStCLENBQUMsT0FBUSxPQUFRLENBQUMsT0FBUSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE1BQVMsQ0FBQyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBQyxLQUFNLDJCQUE0QixHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBQyxPQUFRLFlBQWEsQ0FBQyxVQUFXLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxTQUFVLENBQUUsU0FBWSxHQUFLLFFBQVUsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQ0FBMEMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxzQkFBdUIsQ0FBQyxLQUFNLHVCQUF3QixHQUFNLENBQUMsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sa0JBQW9CLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sdUJBQXdCLENBQUMsU0FBVSxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVcsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsUUFBUyxxQkFBc0IsR0FBTSxDQUFDLENB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TSxPQUFRLEdBQU0saUJBQW9CLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMkJBQTRCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHVCQUF5QixDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sZUFBaUIsQ0FBRSxHQUFNLE9BQVEsR0FBTSxDQUFDLENBQUMsS0FBTSxpQ0FBa0MsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEVBQUssT0FBVyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBZSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWUsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWUsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxzQkFBdUIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxXQUFlLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0sc0JBQXVCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBWSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxP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RUFBV213RCxFQUFjLElBQUk3cUQsY0FDbkMsR0FBSXRGLEdBQVksQ0FBQyxnQkFBaUIscUJBQXFCMVAsU0FBUzBQLEdBQVcsQ0FDdkUsTUFBTXlqQyxFQUFRMzdCLEtBQUtDLE1BQ25CLEdBQVcsR0FBYWxXLEVBQVMsQ0FBRTBNLEtBQU0sSUFDekMsTUFBTTZ4RCxFQUFNdG9ELEtBQUtDLE1BQVEwN0IsRUFFekIsWUFEQS92QyxRQUFRNlgsS0FBSyx5QkFBeUI2a0QsTUFFMUMsQ0FDQSxNQUFNM3NCLEVBQVEzN0IsS0FBS0MsTUFDbkIsR0FBV21uRCxHQUFLcjlELEVBQVMsQ0FBRTBNLEtBQU0sSUFDakMsTUFBTTZ4RCxFQUFNdG9ELEtBQUtDLE1BQVEwN0IsRUFDekIvdkMsUUFBUTZYLEtBQUssa0JBQWtCNmtELE1BQ25DLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXJyYXlzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F0dHJpYnV0ZXMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzaWMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2hpbGQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGVudC50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb3VudGVycy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9kZXN0cm95cy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wQ29udGVudC50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9mdW5JblByb3BzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luamVjdGlvblRlc3RpbmcudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWlycm9yLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL29uZVJlbmRlci50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9wcm9wcy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9wcm92aWRlcnMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhcnQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3Vic2NyaXB0aW9ucy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy90YWdTd2l0Y2gudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy9leHBlY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Rlc3RpbmcvZXhwZWN0LXdyYXBwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Rlc3RpbmcvZWxtU2VsZWN0b3JzLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL2V4cGVjdC5odG1sLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL3Rlc3RSdW5uZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG9zLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dhdGNoLnRlc3QudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL0RvbVRhZy50eXBlLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaXNTcGVjaWFsQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2dldFRhZ1ZhckluZGV4LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvcGFyc2VIVE1MLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL1ZhbHVlVHlwZXMuZW51bS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL3JlcGxhY2VQbGFjZWhvbGRlcnMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2dldFN0cmluZ3NJZC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvZG9tTWV0YUNvbGxlY3Rvci50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvaXNMYXN0UnVuTWF0Y2hlZC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvcGFpbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9kZWxldGVDb250ZXh0U3ViQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pc0luc3RhbmNlLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3N0YXRlcy51dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZS51dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9nZXRTdGF0ZVZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3N0YXRlSGFuZGxlcnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3ViamVjdC9jb21iaW5lTGF0ZXN0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3Qvc3ViamVjdC51dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdWJqZWN0L1N1YmplY3QuY2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvdGFnQ2xvc2VkJC5zdWJqZWN0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3NldFVzZU1lbW9yeS5vYmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9mb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9kb21Qcm9jZXNzQ29udGV4dEl0ZW0uZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvY2FzdFRleHRWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3NwZWNpYWxBdHRyaWJ1dGUudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvaGFuZGxlUHJvdmlkZXJDaGFuZ2VzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3Byb3ZpZGVyc0NoYW5nZUNoZWNrLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2RlZXBGdW5jdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3NoYWxsb3dQcm9wTWF0Y2guZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2Nsb25lVmFsdWVBcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvcHJvcHMvY2xvbmVQcm9wc0J5LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9jcmVhdGVIdG1sU3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdGFnUnVubmVyLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9kZXN0cm95Q29udGV4dHMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9hcnJheXMvY29tcGFyZUFycmF5SXRlbXMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2Rlc3Ryb3lBcnJheUNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2Rlc3Ryb3lIdG1sRG9tTWV0YS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvc21hcnRSZW1vdmVLaWRzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvaXNMaWtlVGFncy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9jaGVja1RhZ1ZhbHVlQ2hhbmdlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hZGRPbmVDb250ZXh0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvYXR0YWNoRHluYW1pY0RvbS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZG9tL3Byb2Nlc3NBdHRyaWJ1dGVBcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZG9tL2F0dGFjaERvbUVsZW1lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2RvbS9hdHRhY2hEb21FbGVtZW50cy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYnVpbGRCZWZvcmVFbGVtZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci91cGRhdGUvcHJvY2Vzc1RhZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NOZXdTdWJqZWN0VGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0luaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2dldFRlbXBsYXRlclJlc3VsdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdGFnLnV0aWxzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9wcm9wcy9zYWZlUmVuZGVyU3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvcHJvcHMvYWx0ZXJQcm9wLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9leGVjdXRlV3JhcC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3JlYXRlU3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvZ2V0VGFnV3JhcC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvcnVuQWZ0ZXJSZW5kZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2NhbGxUYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlbmRlclRhZ09ubHkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3VwZGF0ZS9wcm9jZXNzUmVuZGVyT25jZUluaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9vbmVSZW5kZXJUb1N1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9wcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ1Jlc3VsdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NUYWdDb21wb25lbnRJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcmVuZGVyVGFnQXJyYXkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc3luY1N0YXRlcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2NoZWNrVG9SZXNvbHZlUHJvbWlzZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9vbkluaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvb25EZXN0cm95LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy90YWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2NoZWNrUmVuZGVyVXAuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2hhc1Byb3BDaGFuZ2VzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvdGFnSW5qZWN0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvc3luY1ByaW9yUHJvcEZ1bmN0aW9uLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvdXBkYXRlRXhpc3RpbmdBcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nT2JqZWN0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci91cGRhdGUvdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3NvZnREZXN0cm95U3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvcmVuZGVyV2l0aFN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0VXBUYWdzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYmluZFN1YmplY3RDYWxsYmFjay5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2J1YmJsZUV2ZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlQ2FsbGJhY2suZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2F0dHJpYnV0ZXMvaXNOb0Rpc3BsYXlWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3VwZGF0ZU5hbWVPbmx5QXR0clZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NVcGRhdGVBdHRyQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2NyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2dldFRhZ0pzVmFyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NUYWdKc0F0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NGdW5jdGlvbkF0dHIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NBdHRyaWJ1dGVVcGRhdGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NTaW1wbGVBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL2dldFNpbXBsZVRhZ1Zhci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NSZWd1bGFyVmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2NoZWNrRGVzdHJveVByZXZpb3VzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvYXJyYXlzL3Byb2Nlc3NUYWdBcnJheS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvZ2V0QXJyYXlUYWdKc1Zhci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvb25GaXJzdFN1YkNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2d1YXJhbnRlZUluc2VydEJlZm9yZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NTdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3NldHVwU3Vic2NyaWJlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1NpZ25hbC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvcHJvY2Vzc1N1YnNjcmliZVdpdGhBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3N1YnNjcmliZVdpdGguZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc2lnbmFsLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3QvVmFsdWVTdWJqZWN0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3Qvd2lsbC5mdW5jdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvd2F0Y2guZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc3ViamVjdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZXMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvbGV0UHJvcC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9wcm92aWRlcnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZXJyb3JzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL2NhbGxiYWNrU3RhdGVVcGRhdGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvY2FsbGJhY2suZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvY2FsbGJhY2tNYWtlci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9hcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9wcm9jZXNzVXBkYXRlQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvdXBkYXRlL3VwZGF0ZVN1cHBvcnRCeS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3RyeVVwZGF0ZVRvVGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvaGFuZGxlU3RpbGxUYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS91cGRhdGVUb0RpZmZWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL2hhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvY2hlY2tTdGlsbFN1YnNjcmlwdGlvbi5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NEb21UYWdJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9wcm9jZXNzT3V0ZXJEb21UYWdJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9odG1sLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9nZXREb21UYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlZ2lzdGVyTmV3VGFnRWxlbWVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvbG9hZE5ld0Jhc2VTdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJUYWdFbGVtZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy90YWdFbGVtZW50LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9vdXRwdXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3N1YnNjcmliZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvZ2V0SW5uZXJIVE1MLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9ob3N0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2VsZW1lbnRzL2VsZW1lbnRGdW5jdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvcHJvY2Vzc0NoaWxkcmVuLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2VsZW1lbnRzL3Byb2Nlc3NFbGVtZW50VmFyRnVuY3Rpb24uZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvcHJvY2Vzc0VsZW1lbnRWYXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvZGVzdHJveURlc2lnbkVsZW1lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvcHJvY2Vzc0Rlc2lnbkVsZW1lbnRVcGRhdGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvZGVzaWduRWxlbWVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9lbGVtZW50cy9ub0VsZW1lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlckNvdW50LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb25lUmVuZGVyLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcnVuVGVzdGluZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaXNvbGF0ZWRBcHAudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvblNlbGVjdG9yLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXJyYXlGdW4udGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9mdW5JblByb3BzQ2hpbGQudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9hZGRBcnJheUNvbXBvbmVudC50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Z1bkluUHJvcHMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy90b2RvL2NvbXBvbmVudHMvaXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby9jb21wb25lbnRzL2hlYWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby9jb21wb25lbnRzL2Zvb3Rlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby9IYXNoUm91dGVyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy90b2RvL3RvZG9zLmFwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby9yZWR1Y2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbm5lckh0bWxUZXN0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2hpbGRUZXN0cy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Rlc3Ryb3lzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFnZ2VkanMtYW5pbWF0ZS1jc3MvanMvY3JlYXRlRnguZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RhZ2dlZGpzLWFuaW1hdGUtY3NzL2pzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcnJheVNjb3JlRGF0YS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhZ1N3aXRjaERlYnVnLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWlycm9yaW5nLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGVQcm9wRGVidWcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9Qcm9wc0RlYnVnLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdmlkZXJEaWFsb2cudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9ob3N0VGVzdHMvaW5qZWN0aW9uV3JhcC5ob3N0LnRzIiwid2VicGFjazovLy8uL3NyYy9ob3N0VGVzdHMvaW5qZWN0aW9uVGFyZ2V0Lmhvc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luamVjdGlvblRlc3RpbmcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9wcm92aWRlcnMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9tb3VzZW92ZXIudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9jb3VudGVyc0RlYnVnLnRzIiwid2VicGFjazovLy8uL3NyYy90YWJsZURlYnVnLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb2x1bW5FZGl0b3IuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2FycmF5VGFibGUuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2FycmF5RGlzcGxheS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R1bXAvYXJyYXlzRGlzcGxheS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R1bXAvZHVtcEFycmF5LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb3B5VGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9kdW1wU2ltcGxlLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9kdW1wT2JqZWN0LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb250cm9sUGFuZWwudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2R1bXAudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wQ29udGVudC50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy93YXRjaFRlc3RpbmcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9zdWJzY3JpYmVBdHRyaWJ1dGVzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXR0cmlidXRlRGVidWcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9iYXNpYy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2xpZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9leGVjdXRlU2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlSW50ZXJuYWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3Vic2NyaXB0aW9ucy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlcmVkU2VjdGlvbnMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9pbnRlcnZhbERlYnVnLnRzIiwid2VicGFjazovLy8uL3NyYy90YWdKc0RlYnVnLnRzIiwid2VicGFjazovLy8uL3NyYy9tZW51LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F1dG9UZXN0aW5nQ29udHJvbHMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9pc29sYXRlZEFwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcnVuLmZ1bmN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ5SWQsIGVsbUNvdW50LCBjbGljaywgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZXhwb3J0IGNvbnN0IGZ4VGltZSA9IDE2MDtcbmRlc2NyaWJlKCfioIcgYXJyYXkgdGVzdGluZycsICgpID0+IHtcbiAgICBpdCgnc2lnbmFsIGFycmF5IGNvdW50IGFuZCBpdGVtcycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmFsQXJyYXlDb3VudCA9IGJ5SWQoJ3NpZ25hbC1hcnJheS1jb3VudCcpO1xuICAgICAgICBjb25zdCBpbml0aWFsQ291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoaW5pdGlhbENvdW50KS50b0JlKDMpO1xuICAgICAgICAvLyBDaGVjayBpbml0aWFsIGFycmF5IGl0ZW1zIG1hdGNoIGNvdW50XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5pdGlhbENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGV4cGVjdChlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aX1gKSkudG9CZSgxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBubyBleHRyYSBpdGVtcyBleGlzdFxuICAgICAgICBleHBlY3QoZWxtQ291bnQoYCNzaWduYWwtYXJyYXktaXRlbS0ke2luaXRpYWxDb3VudH1gKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgncHVzaCBzaWduYWwgYXJyYXkgYnV0dG9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWxBcnJheUNvdW50ID0gYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50Jyk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGNvbnN0IHB1c2hCdG4gPSBieUlkKCdwdXNoLXNpZ25hbC1hcnJheS1idG4nKTtcbiAgICAgICAgZXhwZWN0KGluaXRpYWxDb3VudCkudG9CZSgzKTtcbiAgICAgICAgLy8gQ2xpY2sgcHVzaCBidXR0b25cbiAgICAgICAgcHVzaEJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBjb3VudCBpbmNyZWFzZWRcbiAgICAgICAgY29uc3QgbmV3Q291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QobmV3Q291bnQpLnRvQmUoaW5pdGlhbENvdW50ICsgMSk7XG4gICAgICAgIC8vIENoZWNrIG5ldyBpdGVtIGV4aXN0c1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoYCNzaWduYWwtYXJyYXktaXRlbS0ke2luaXRpYWxDb3VudH1gKSkudG9CZSgxKTtcbiAgICAgICAgLy8gQ2xpY2sgYWdhaW5cbiAgICAgICAgcHVzaEJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBjb3VudCBpbmNyZWFzZWQgYWdhaW5cbiAgICAgICAgZXhwZWN0KE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCkpLnRvQmUoaW5pdGlhbENvdW50ICsgMik7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aW5pdGlhbENvdW50ICsgMX1gKSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KE51bWJlcihieUlkKCdzaWduYWwtYXJyYXktY291bnQnKS5pbm5lclRleHQpKS50b0JlKDUpO1xuICAgICAgICBjbGljayhgI3NpZ25hbC1hcnJheS1pdGVtLWRlbGV0ZS1idG4tM2ApO1xuICAgICAgICBjbGljayhgI3NpZ25hbC1hcnJheS1pdGVtLWRlbGV0ZS1idG4tNGApO1xuICAgICAgICAvLyBXYWl0IGZvciBhbmltYXRpb24gdG8gY29tcGxldGVcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lICogMik7XG4gICAgICAgIGV4cGVjdChOdW1iZXIoYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50JykuaW5uZXJUZXh0KSkudG9CZSgzKTtcbiAgICB9KTtcbiAgICBpdCgnYXJyYXlzIGNvdW50ZXIgZGlzcGxheSBtYXRjaGVzIGl0ZW0gY291bnRlciBkaXNwbGF5cycsICgpID0+IHtcbiAgICAgICAgY29uc3QgY291bnRlckRpc3BsYXkgPSBieUlkKCdhcnJheXMtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgICAgIGNvbnN0IGNvdW50ZXJWYWx1ZSA9IE51bWJlcihjb3VudGVyRGlzcGxheS5pbm5lclRleHQpO1xuICAgICAgICAvLyBDaGVjayB0aGF0IGVhY2ggc2lnbmFsIGFycmF5IGl0ZW0gY291bnRlciBkaXNwbGF5IG1hdGNoZXMgdGhlIG1haW4gY291bnRlclxuICAgICAgICBjb25zdCBzaWduYWxBcnJheUNvdW50ID0gYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50Jyk7XG4gICAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtQ291bnRlciA9IGJ5SWQoYHNpZ25hbC1hcnJheS1pdGVtLWNvdW50ZXItZGlzcGxheS0ke2l9YCk7XG4gICAgICAgICAgICBleHBlY3QoaXRlbUNvdW50ZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoTnVtYmVyKGl0ZW1Db3VudGVyLmlubmVyVGV4dCkpLnRvQmUoY291bnRlclZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGljayBhIGNvdW50ZXIgYnV0dG9uIHRvIGluY3JlbWVudFxuICAgICAgICBjb25zdCBjb3VudGVyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NpZ25hbC1hcnJheS1pbmNyZWFzZS1jb3VudGVyJyk7XG4gICAgICAgIGNvdW50ZXJCdXR0b24uY2xpY2soKTtcbiAgICAgICAgLy8gVmVyaWZ5IGFsbCBjb3VudGVycyB1cGRhdGVkXG4gICAgICAgIGNvbnN0IG5ld0NvdW50ZXJWYWx1ZSA9IE51bWJlcihjb3VudGVyRGlzcGxheS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QobmV3Q291bnRlclZhbHVlKS50b0JlKGNvdW50ZXJWYWx1ZSArIDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYHNpZ25hbC1hcnJheS1pdGVtLWNvdW50ZXItZGlzcGxheS0ke2l9YDtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db3VudGVyID0gYnlJZChpZCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IE51bWJlcihpdGVtQ291bnRlci5pbm5lclRleHQpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlKS50b0JlKG5ld0NvdW50ZXJWYWx1ZSwgYEluZGV4ICR7aX0gSUQgJHtpZH0gaGFzICR7dmFsdWV9IGJ1dCBuZWVkIHRvQmUgJHtuZXdDb3VudGVyVmFsdWV9IGxpa2UgI3NpZ25hbC1hcnJheS1pbmNyZWFzZS1jb3VudGVyYCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpdCgnc2lnbmFsIGFycmF5IGl0ZW0gZGVsZXRlIGJ1dHRvbiB3aXRoIGFuaW1hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmFsQXJyYXlDb3VudCA9IGJ5SWQoJ3NpZ25hbC1hcnJheS1jb3VudCcpO1xuICAgICAgICBjb25zdCBpbml0aWFsQ291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoaW5pdGlhbENvdW50KS50b0JlKDMpO1xuICAgICAgICBpZiAoaW5pdGlhbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgaXRlbSB0byBkZWxldGVcbiAgICAgICAgICAgIGJ5SWQoJ3B1c2gtc2lnbmFsLWFycmF5LWJ0bicpLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ID0gTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgY29uc3QgaW5kZXhUb0RlbGV0ZSA9IDA7XG4gICAgICAgIC8vIFZlcmlmeSBpdGVtIGV4aXN0cyBiZWZvcmUgZGVsZXRpb25cbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpbmRleFRvRGVsZXRlfWApKS50b0JlKDEpO1xuICAgICAgICAvLyBDbGljayBkZWxldGUgYnV0dG9uXG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ0biA9IGJ5SWQoYHNpZ25hbC1hcnJheS1pdGVtLWRlbGV0ZS1idG4tJHtpbmRleFRvRGVsZXRlfWApO1xuICAgICAgICBkZWxldGVCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gV2FpdCBmb3IgYW5pbWF0aW9uIHRvIGNvbXBsZXRlXG4gICAgICAgIGF3YWl0IGRlbGF5KGZ4VGltZSk7XG4gICAgICAgIGV4cGVjdChOdW1iZXIoYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50JykuaW5uZXJUZXh0KSkudG9CZSgyKTtcbiAgICAgICAgLy8gQ2hlY2sgY291bnQgZGVjcmVhc2VkXG4gICAgICAgIGNvbnN0IHNpZ0NvdW50ID0gTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgY29uc3QgbmV3Q291bnQxID0gY3VycmVudENvdW50IC0gMTtcbiAgICAgICAgZXhwZWN0KHNpZ0NvdW50KS50b0JlKG5ld0NvdW50MSwgYCNzaWduYWwtYXJyYXktY291bnQgaGFzICR7c2lnQ291bnR9IGJ1dCBleHBlY3RlZCAke25ld0NvdW50MX1gKTtcbiAgICAgICAgLy8gQ2hlY2sgaXRlbSBubyBsb25nZXIgZXhpc3RzXG4gICAgICAgIGNvbnN0IGl0ZW1Db3VudDIgPSBlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLTJgKTsgLy8gcG9zIDIgaXMgbm93IDFcbiAgICAgICAgZXhwZWN0KGl0ZW1Db3VudDIpLnRvQmUoMCwgYEV4cGVjdGVkIHNpZ25hbCBhcnJheSBpdGVtIDIgYnV0IGdvdCAke2l0ZW1Db3VudDJ9YCk7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSByZW1haW5pbmcgaXRlbXMsIGNoZWNrIHRoZXkndmUgYmVlbiByZS1pbmRleGVkXG4gICAgICAgIGNvbnN0IG5ld0NvdW50ID0gTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpfWApO1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50KS50b0JlKDEsIGBFeHBlY3RlZCBvbmx5IG9uZSAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpfSBidXQgZ290ICR7Y291bnR9YCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpdCgnYXJyYXkgYmFzaWNzJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNhcnJheS10ZXN0LXB1c2gtaXRlbScpKS50b0JlKDEpO1xuICAgICAgICBjb25zdCBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3Njb3JlLWRhdGEtMC0xLW91dHNpZGUtYnV0dG9uJyk7XG4gICAgICAgIGV4cGVjdChidXR0b25zLmxlbmd0aCkudG9CZSgwKTsgLy8gRGlkIG5vdCBleHBlY3Qgc2NvcmluZyBidXR0b24gMC0xIHRvIGJlIHByZXNlbnRcbiAgICAgICAgY29uc3QgaW5zaWRlQ291bnQgPSBlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKTtcbiAgICAgICAgZXhwZWN0KGluc2lkZUNvdW50KS50b0JlKDApO1xuICAgICAgICAvLyBhZGQgcGxheWVyIDBcbiAgICAgICAgYnlJZCgnYXJyYXktdGVzdC1wdXNoLWl0ZW0nKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1pbnNpZGUtYnV0dG9uJykpLnRvQmUoMSwgJ3Njb3JlIGRhdGEgaW5zaWRlIGJ1dHRvbiBiYWQnKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKSkudG9CZSgxLCAnc2NvcmUgZGF0YSBvdXRzaWRlIGJ1dHRvbiBiYWQnKTtcbiAgICAgICAgY29uc3QgaW5zaWRlRWxtID0gYnlJZCgnc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpO1xuICAgICAgICBjb25zdCBpbnNpZGVEaXNwbGF5ID0gYnlJZCgnc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWRpc3BsYXknKTtcbiAgICAgICAgbGV0IGluZGV4VmFsdWUgPSBpbnNpZGVEaXNwbGF5LmlubmVyVGV4dDtcbiAgICAgICAgY29uc3Qgb3V0c2lkZUVsbSA9IGJ5SWQoJ3Njb3JlLWRhdGEtMC0xLW91dHNpZGUtYnV0dG9uJyk7XG4gICAgICAgIGNvbnN0IG91dHNpZGVEaXNwbGF5ID0gYnlJZCgnc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1kaXNwbGF5Jyk7XG4gICAgICAgIGNvbnN0IG91dHNpZGVWYWx1ZSA9IG91dHNpZGVEaXNwbGF5LmlubmVyVGV4dDtcbiAgICAgICAgZXhwZWN0KGluZGV4VmFsdWUpLnRvQmUob3V0c2lkZVZhbHVlKTtcbiAgICAgICAgLy8gc2NvcmUgZm9yIHBsYXllciAwXG4gICAgICAgIGluc2lkZUVsbS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5zaWRlRGlzcGxheS5pbm5lclRleHQpLnRvQmUob3V0c2lkZURpc3BsYXkuaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KGluc2lkZURpc3BsYXkpLnRvQmUoYnlJZCgnc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWRpc3BsYXknKSk7IC8vIHRlc3QgZWxlbWVudCAjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWRpc3BsYXkgd2FzIG5vdCByZWRyYXduXG4gICAgICAgIGV4cGVjdChpbmRleFZhbHVlKS50b0JlKChOdW1iZXIoaW5zaWRlRGlzcGxheS5pbm5lclRleHQpIC0gMSkudG9TdHJpbmcoKSk7XG4gICAgICAgIGV4cGVjdChpbmRleFZhbHVlKS50b0JlKChOdW1iZXIob3V0c2lkZURpc3BsYXkuaW5uZXJUZXh0KSAtIDEpLnRvU3RyaW5nKCkpO1xuICAgICAgICAvLyBzY29yZSBmb3IgcGxheWVyIDBcbiAgICAgICAgb3V0c2lkZUVsbS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5zaWRlRGlzcGxheS5pbm5lclRleHQpLnRvQmUob3V0c2lkZURpc3BsYXkuaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KGluZGV4VmFsdWUpLnRvQmUoKE51bWJlcihpbnNpZGVEaXNwbGF5LmlubmVyVGV4dCkgLSAyKS50b1N0cmluZygpKTtcbiAgICAgICAgZXhwZWN0KGluZGV4VmFsdWUpLnRvQmUoKE51bWJlcihvdXRzaWRlRGlzcGxheS5pbm5lclRleHQpIC0gMikudG9TdHJpbmcoKSk7XG4gICAgfSk7XG4gICAgaXQoJ/Cfl5HvuI8gZGVsZXRlcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjcGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3BsYXllci1lZGl0LWJ0bi0wJykpLnRvQmUoMSk7XG4gICAgICAgIC8vIHN0YXJ0IGVkaXQgbW92ZVxuICAgICAgICBjb25zdCB4ID0gYnlJZCgncGxheWVyLWVkaXQtYnRuLTAnKS5fY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHgpLnRvQmUoJ25vLWRhdGEtZXZlcicpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLTAnKSkudG9CZSgxKTtcbiAgICAgICAgLy8gcmVtb3ZlIHBsYXllciAxXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJ5SWQoJ3BsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tMCcpLl9jbGljaygpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlKCdwcm9taXNlLW5vLWRhdGEtZXZlcicpO1xuICAgICAgICBhd2FpdCBkZWxheShmeFRpbWUpOyAvLyBhbmltYXRpb25cbiAgICAgICAgYXdhaXQgcmVzdWx0O1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLTAnKSkudG9CZSgwLCAnRXhwZWN0ZWQgZWxlbWVudCBub3QgdG8gZXhpc3QgI3BsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tMCcpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNwbGF5ZXItZWRpdC1idG4tMCcpKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCdhZGQgdGhlbiBkZWxldGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBhZGQgcGxheWVyIDFcbiAgICAgICAgYnlJZCgnYXJyYXktdGVzdC1wdXNoLWl0ZW0nKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1pbnNpZGUtYnV0dG9uJykpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLW91dHNpZGUtYnV0dG9uJykpLnRvQmUoMSk7XG4gICAgICAgIC8vIGFkZCBwbGF5ZXIgMlxuICAgICAgICBieUlkKCdhcnJheS10ZXN0LXB1c2gtaXRlbScpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKSkudG9CZSgyKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKSkudG9CZSgyKTtcbiAgICAgICAgLy8gZWRpdCBwbGF5ZXIgMVxuICAgICAgICBieUlkKCdwbGF5ZXItZWRpdC1idG4tMCcpLmNsaWNrKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJ5SWQoJ3BsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tMCcpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3Byb21pc2Utbm8tZGF0YS1ldmVyJyk7XG4gICAgICAgIGF3YWl0IGRlbGF5KGZ4VGltZSAtIDEwKTsgLy8gYW5pbWF0aW9uXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKSkudG9CZSgxKTtcbiAgICAgICAgLy8gZWRpdCB3aG8gaXMgbm93IHBsYXllciAxIHdobyB3YXMgcGxheWVyIDJcbiAgICAgICAgYnlJZCgncGxheWVyLWVkaXQtYnRuLTAnKS5jbGljaygpO1xuICAgICAgICBjb25zdCByZXN1bHQyID0gYXdhaXQgYnlJZCgncGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdDIpLnRvQmUoJ3Byb21pc2Utbm8tZGF0YS1ldmVyJyk7XG4gICAgICAgIGF3YWl0IGRlbGF5KGZ4VGltZSArIDI1KTsgLy8gYW5pbWF0aW9uXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKSkudG9CZSgwKTtcbiAgICB9KTtcbn0pO1xuZnVuY3Rpb24gZGVsYXkodGltZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiBzZXRUaW1lb3V0KHJlcywgdGltZSkpO1xufVxuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgY2xpY2ssIGNvdW50IH0gZnJvbSAnLi90ZXN0aW5nJztcbmRlc2NyaWJlKCfwn4+5IHNwZWNpYWwgYXR0cmlidXRlcycsICgpID0+IHtcbiAgICBpdCgnc3R5bGUgYW5kIGNsYXNzIHRlc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY291bnQoJyNhdHRyLWlucHV0LWFiYycpKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoY291bnQoJyN0b2dnbGUtYmFja2dyb3VuZHMnKSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2F0dHItc3R5bGUtc3RyaW5ncycpLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1jbGFzcy1ib29sZWFucycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1pbmxpbmUtY2xhc3MnKS5jbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKHRydWUpO1xuICAgICAgICBjb25zdCBkeW5hbWljRWxlbWVudCA9IGJ5SWQoJ2F0dHItZHluYW1pYy1pbmxpbmUtY2xhc3MnKTtcbiAgICAgICAgY29uc3QgZHluYW1pY0NsYXNzTGlzdCA9IGR5bmFtaWNFbGVtZW50LmNsYXNzTGlzdDtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5keW5hbWljQ2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgY2xpY2soJyN0b2dnbGUtYmFja2dyb3VuZHMnKTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2F0dHItc3R5bGUtc3RyaW5ncycpLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnJyk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1jbGFzcy1ib29sZWFucycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmJ5SWQoJ2F0dHItaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1keW5hbWljLWlubGluZS1jbGFzcycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUoZmFsc2UpO1xuICAgICAgICAvLyBwdXQgYmFja1xuICAgICAgICBjbGljaygnI3RvZ2dsZS1iYWNrZ3JvdW5kcycpO1xuICAgICAgICBleHBlY3QoYnlJZCgnYXR0ci1zdHlsZS1zdHJpbmdzJykuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWNsYXNzLWJvb2xlYW5zJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWlubGluZS1jbGFzcycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1keW5hbWljLWlubGluZS1jbGFzcycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gICAgaXQoJ3N1YnNjcmliZSBhdHRyaWJ1dGVzIGNvbG9ycycsICgpID0+IHtcbiAgICAgICAgLy8gVGVzdCBpbml0aWFsIGJhY2tncm91bmQgY29sb3JzXG4gICAgICAgIGNvbnN0IGJnQ29sb3JDaGFuZ2VyID0gYnlJZCgnc3Vic2NyaWJlLXN0eWxlLWRvdC1iZy1jb2xvci1jaGFuZ2VyJyk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZUJnQ29sb3IgPSBieUlkKCdzdWJzY3JpYmUtc3R5bGUtYmctY29sb3InKTtcbiAgICAgICAgY29uc3QgbXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yID0gYnlJZCgnbXVsdGlwbGUtc3Vic2NyaWJlLWJnLWNvbG9yJyk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUNvbG9yQnRuID0gYnlJZCgndG9nZ2xlLWNvbG9yLWJ0bicpO1xuICAgICAgICBjb25zdCBjbGVhckNvbG9yQnRuID0gYnlJZCgnY2xlYXItY29sb3ItYnRuJyk7XG4gICAgICAgIC8vIEluaXRpYWwgc3RhdGUgLSBhbGwgc2hvdWxkIGJlIHJlZC9waW5rXG4gICAgICAgIGV4cGVjdChiZ0NvbG9yQ2hhbmdlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3JlZCcsICdiZ0NvbG9yQ2hhbmdlciBzaG91bGQgc3RhcnQgcmVkJyk7XG4gICAgICAgIGV4cGVjdChzdWJzY3JpYmVCZ0NvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncmVkJyk7XG4gICAgICAgIGV4cGVjdChtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdwaW5rJyk7XG4gICAgICAgIC8vIFRvZ2dsZSBDb2xvciBidXR0b24gc2hvdWxkIHNob3cgZW1wdHkgaW5pdGlhbGx5XG4gICAgICAgIGV4cGVjdCh0b2dnbGVDb2xvckJ0bi5pbm5lclRleHQpLnRvQmUoJ1RvZ2dsZSBDb2xvciAoKScpO1xuICAgICAgICAvLyBDbGljayBUb2dnbGUgQ29sb3IgLSBzaG91bGQgY2hhbmdlIHRvIHJlZFxuICAgICAgICB0b2dnbGVDb2xvckJ0bi5jbGljaygpO1xuICAgICAgICBleHBlY3QodG9nZ2xlQ29sb3JCdG4uaW5uZXJUZXh0KS50b0JlKCdUb2dnbGUgQ29sb3IgKHJlZCknKTtcbiAgICAgICAgLy8gQ29sb3JzIHNob3VsZCBiZSByZWQvcmVkL2dyZWVuIGFmdGVyIGZpcnN0IHRvZ2dsZVxuICAgICAgICBleHBlY3QoYmdDb2xvckNoYW5nZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICAgICAgZXhwZWN0KHN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICAgICAgZXhwZWN0KG11bHRpcGxlU3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2dyZWVuJyk7XG4gICAgICAgIC8vIENsaWNrIFRvZ2dsZSBDb2xvciBhZ2FpbiAtIHNob3VsZCBjaGFuZ2UgdG8gYmx1ZVxuICAgICAgICB0b2dnbGVDb2xvckJ0bi5jbGljaygpO1xuICAgICAgICBleHBlY3QodG9nZ2xlQ29sb3JCdG4uaW5uZXJUZXh0KS50b0JlKCdUb2dnbGUgQ29sb3IgKGJsdWUpJyk7XG4gICAgICAgIC8vIENvbG9ycyBzaG91bGQgYmUgYmx1ZS9ibHVlL3B1cnBsZSBhZnRlciBzZWNvbmQgdG9nZ2xlXG4gICAgICAgIGV4cGVjdChiZ0NvbG9yQ2hhbmdlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2JsdWUnKTtcbiAgICAgICAgZXhwZWN0KHN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdibHVlJyk7XG4gICAgICAgIGV4cGVjdChtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdwdXJwbGUnKTtcbiAgICAgICAgLy8gQ2xpY2sgQ2xlYXIgQ29sb3IgYnV0dG9uXG4gICAgICAgIGNsZWFyQ29sb3JCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ29sb3JzIHNob3VsZCBiZSBlbXB0eS9lbXB0eS9waW5rIGFmdGVyIGNsZWFyXG4gICAgICAgIGV4cGVjdChiZ0NvbG9yQ2hhbmdlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJycsICdleHBlY3RlZCBubyBiYWNrZ3JvdW5kIGluIGJnQ29sb3JDaGFuZ2VyJyk7XG4gICAgICAgIGV4cGVjdChzdWJzY3JpYmVCZ0NvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnJywgJ2V4cGVjdGVkIG5vIGJhY2tncm91bmQgaW4gc3Vic2NyaWJlQmdDb2xvcicpO1xuICAgICAgICBleHBlY3QobXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncGluaycpO1xuICAgIH0pO1xuICAgIGl0KCdoaWRlL3Nob3cgYXR0cmlidXRlcyBhZmZlY3RzIHN1YnNjcmlwdGlvbiBjb3VudCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9nZ2xlQXR0cmlidXRlc0J0biA9IGJ5SWQoJ3RvZ2dsZS1hdHRyaWJ1dGVzLWJ0bicpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zQ291bnQgPSBieUlkKCdzdWJzY3JpcHRpb25zLWNvdW50Jyk7XG4gICAgICAgIC8vIEdldCBpbml0aWFsIHN1YnNjcmlwdGlvbiBjb3VudFxuICAgICAgICBjb25zdCBpbml0aWFsQ291bnQgPSBOdW1iZXIoc3Vic2NyaXB0aW9uc0NvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIC8vIENoZWNrIGJ1dHRvbiBpbml0aWFsbHkgc2F5cyBcIkhpZGUgQXR0cmlidXRlc1wiXG4gICAgICAgIGV4cGVjdCh0b2dnbGVBdHRyaWJ1dGVzQnRuLmlubmVyVGV4dCkudG9CZSgnSGlkZSBBdHRyaWJ1dGVzJyk7XG4gICAgICAgIC8vIENsaWNrIEhpZGUgQXR0cmlidXRlc1xuICAgICAgICB0b2dnbGVBdHRyaWJ1dGVzQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGJ1dHRvbiBub3cgc2F5cyBcIlNob3cgQXR0cmlidXRlc1wiXG4gICAgICAgIGV4cGVjdCh0b2dnbGVBdHRyaWJ1dGVzQnRuLmlubmVyVGV4dCkudG9CZSgnU2hvdyBBdHRyaWJ1dGVzJyk7XG4gICAgICAgIC8vIENoZWNrIHN1YnNjcmlwdGlvbnMgZGVjcmVhc2VkIGJ5IDJcbiAgICAgICAgY29uc3QgYWZ0ZXJIaWRlQ291bnQgPSBOdW1iZXIoc3Vic2NyaXB0aW9uc0NvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGNvbnN0IGlubmVyU3ViQ291bnQgPSAyO1xuICAgICAgICBjb25zdCB0b0JlID0gaW5pdGlhbENvdW50IC0gaW5uZXJTdWJDb3VudDtcbiAgICAgICAgZXhwZWN0KGFmdGVySGlkZUNvdW50KS50b0JlKHRvQmUsIGBhZnRlckhpZGVDb3VudCBleHBlY3RlZCgke2FmdGVySGlkZUNvdW50fSkgdG9CZSgke3RvQmV9KWApO1xuICAgICAgICAvLyBDbGljayBTaG93IEF0dHJpYnV0ZXNcbiAgICAgICAgdG9nZ2xlQXR0cmlidXRlc0J0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBidXR0b24gbm93IHNheXMgXCJIaWRlIEF0dHJpYnV0ZXNcIiBhZ2FpblxuICAgICAgICBleHBlY3QodG9nZ2xlQXR0cmlidXRlc0J0bi5pbm5lclRleHQpLnRvQmUoJ0hpZGUgQXR0cmlidXRlcycpO1xuICAgICAgICAvLyBDaGVjayBzdWJzY3JpcHRpb25zIGluY3JlYXNlZCBieSAyIChiYWNrIHRvIG9yaWdpbmFsKVxuICAgICAgICBjb25zdCBhZnRlclNob3dDb3VudCA9IE51bWJlcihzdWJzY3JpcHRpb25zQ291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KGFmdGVyU2hvd0NvdW50KS50b0JlKGluaXRpYWxDb3VudCk7XG4gICAgfSk7XG4gICAgaXQoJ3N0eWxlIG9iamVjdCBjb252ZXJ0cyB0byBpbmRpdmlkdWFsIENTUyBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHlsZU9iamVjdFRlc3QgPSBieUlkKCdzdHlsZS1vYmplY3QtdGVzdCcpO1xuICAgICAgICBjb25zdCB0b2dnbGVCdG4gPSBieUlkKCd0b2dnbGUtYmFja2dyb3VuZHMnKTtcbiAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZSAtIGNoZWNrYm94IGlzIGNoZWNrZWQgKGlzT3JhbmdlID0gdHJ1ZSlcbiAgICAgICAgZXhwZWN0KHRvZ2dsZUJ0bi5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICAvLyBDaGVjayB0aGF0IHN0eWxlIG9iamVjdCBpcyBjb252ZXJ0ZWQgdG8gaW5kaXZpZHVhbCBpbmxpbmUgc3R5bGUgcHJvcGVydGllc1xuICAgICAgICAvLyBUaGUga2V5IHRlc3QgaXMgdGhhdCB0aGUgb2JqZWN0IHN5bnRheCB3YXMgY29udmVydGVkIHRvIGluZGl2aWR1YWwgQ1NTIHByb3BlcnRpZXNcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ29yYW5nZScpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLnBhZGRpbmcpLnRvQmUoJzEwcHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3JkZXIpLnRvQmUoJzJweCBzb2xpZCBibGFjaycpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJvcmRlclJhZGl1cykudG9CZSgnOHB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm94U2hhZG93KS50b0JlKCdyZ2JhKDAsIDAsIDAsIDAuMykgMnB4IDJweCA0cHgnKTtcbiAgICAgICAgLy8gVG9nZ2xlIGNoZWNrYm94IG9mZlxuICAgICAgICB0b2dnbGVCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgc3R5bGVzIGNoYW5nZWRcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2xpZ2h0Z3JleScpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLnBhZGRpbmcpLnRvQmUoJzEwcHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3JkZXIpLnRvQmUoJzJweCBzb2xpZCBibGFjaycpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJvcmRlclJhZGl1cykudG9CZSgnNHB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm94U2hhZG93KS50b0JlKCdub25lJyk7XG4gICAgICAgIC8vIFRvZ2dsZSBiYWNrIG9uXG4gICAgICAgIHRvZ2dsZUJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBzdHlsZXMgcmV2ZXJ0ZWRcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ29yYW5nZScpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJvcmRlclJhZGl1cykudG9CZSgnOHB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm94U2hhZG93KS50b0JlKCdyZ2JhKDAsIDAsIDAsIDAuMykgMnB4IDJweCA0cHgnKTtcbiAgICB9KTtcbiAgICBpdCgnc3R5bGUgb2JqZWN0IHdpdGgga2ViYWItY2FzZSBwcm9wZXJ0aWVzIHVzZXMgc2V0UHJvcGVydHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0eWxlUHJvcGVydHlUZXN0ID0gYnlJZCgnc3R5bGUtc2V0LXByb3BlcnR5LXRlc3QnKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlQnRuID0gYnlJZCgndG9nZ2xlLWJhY2tncm91bmRzJyk7XG4gICAgICAgIC8vIEluaXRpYWwgc3RhdGUgLSBjaGVja2JveCBpcyBjaGVja2VkIChpc09yYW5nZSA9IHRydWUpXG4gICAgICAgIGV4cGVjdCh0b2dnbGVCdG4uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCBrZWJhYi1jYXNlIHByb3BlcnRpZXMgYXJlIHNldCBjb3JyZWN0bHkgdXNpbmcgc2V0UHJvcGVydHlcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncmVkJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5jb2xvcikudG9CZSgnd2hpdGUnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLnBhZGRpbmcpLnRvQmUoJzVweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUubWFyZ2luVG9wKS50b0JlKCcxMHB4Jyk7XG4gICAgICAgIC8vIFRvZ2dsZSBjaGVja2JveCBvZmZcbiAgICAgICAgdG9nZ2xlQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIHN0eWxlcyBjaGFuZ2VkXG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2JsdWUnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLmNvbG9yKS50b0JlKCd3aGl0ZScpO1xuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUucGFkZGluZykudG9CZSgnNXB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5tYXJnaW5Ub3ApLnRvQmUoJzEwcHgnKTtcbiAgICAgICAgLy8gVG9nZ2xlIGJhY2sgb25cbiAgICAgICAgdG9nZ2xlQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIHN0eWxlcyByZXZlcnRlZFxuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICB9KTtcbn0pO1xuIiwiaW1wb3J0IHsgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkIH0gZnJvbSAnLi90ZXN0aW5nJztcbml0KCdlbGVtZW50cyBleGlzdHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGJ5SWQoJ2gxLWFwcCcpKS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IHRvZ2dsZVRlc3QgPSBieUlkKCd0b2dnbGUtdGVzdCcpO1xuICAgIGV4cGVjdCh0b2dnbGVUZXN0KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh0b2dnbGVUZXN0LmlubmVyVGV4dCkudG9CZSgndG9nZ2xlIHRlc3QnKTtcbn0pO1xuaXQoJ3RvZ2dsZSB0ZXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHRvZ2dsZVRlc3QgPSBieUlkKCd0b2dnbGUtdGVzdCcpO1xuICAgIGV4cGVjdCh0b2dnbGVUZXN0LmlubmVyVGV4dCkudG9CZSgndG9nZ2xlIHRlc3QnKTtcbiAgICB0b2dnbGVUZXN0LmNsaWNrKCk7XG4gICAgLy8gYWZ0ZXIgY2xpY2sgbm93IHRydWVcbiAgICBleHBlY3QodG9nZ2xlVGVzdC5pbm5lclRleHQpLnRvQmUoJ3RvZ2dsZSB0ZXN0IHRydWUnKTtcbiAgICB0b2dnbGVUZXN0LmNsaWNrKCk7XG4gICAgLy8gYWZ0ZXIgY2xpY2sgbm93IGZhbHNlXG4gICAgZXhwZWN0KHRvZ2dsZVRlc3QuaW5uZXJUZXh0KS50b0JlKCd0b2dnbGUgdGVzdCcpO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgdGVzdENvdW50ZXJFbGVtZW50cywgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/CfkbYg8J+Rp2NoaWxkIHRlc3RzJywgKCkgPT4ge1xuICAgIGl0KCdjaGlsZCB0ZXN0cycsICgpID0+IHtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2lubmVySHRtbFByb3BzVGVzdC1idXR0b24nLCAnI2lubmVySHRtbFByb3BzVGVzdC1kaXNwbGF5Jyk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNpbm5lckh0bWxUZXN0LWNvdW50ZXItYnV0dG9uJywgJyNpbm5lckh0bWxUZXN0LWNvdW50ZXItZGlzcGxheScpO1xuICAgIH0pO1xuICAgIGl0KCdhJywgKCkgPT4ge1xuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNjaGlsZFRlc3RzLWJ1dHRvbicsICcjY2hpbGRUZXN0cy1kaXNwbGF5J10sIFsnI2lubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1idXR0b24nLCAnI2lubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1kaXNwbGF5J10pO1xuICAgIH0pO1xuICAgIGl0KCdiJywgKCkgPT4ge1xuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNjaGlsZFRlc3RzLWJ1dHRvbicsICcjY2hpbGRUZXN0cy1kaXNwbGF5J10sIFsnI2NoaWxkLWFzLXByb3AtdGVzdC1idXR0b24nLCAnI2NoaWxkLWFzLXByb3AtdGVzdC1kaXNwbGF5J10pO1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjaW5uZXJIdG1sUHJvcHNUZXN0LWNoaWxkVGVzdHMtYnV0dG9uJywgJyNpbm5lckh0bWxQcm9wc1Rlc3QtY2hpbGRUZXN0cy1kaXNwbGF5Jyk7XG4gICAgfSk7XG4gICAgaXQoJ2MnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2NoaWxkVGVzdHMtYnV0dG9uJywgJyNjaGlsZFRlc3RzLWRpc3BsYXknXSwgWycjaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWJ1dHRvbi1jJywgJyNpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtZGlzcGxheS1jJ10pO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBjbGljaywgaHRtbCwgcXVlcnksIGNoYW5nZU9uZSwgY291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL3Rlc3RpbmcnO1xuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHdhaXQgZm9yIGFuaW1hdGlvbnMgdG8gY29tcGxldGVcbmFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JBbmltYXRpb25zVG9Db21wbGV0ZShzZWxlY3RvciwgZXhwZWN0ZWRDb3VudCwgbWF4V2FpdCA9IDUwMDApIHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgbWF4V2FpdCkge1xuICAgICAgICBjb25zdCBhbmltYXRpbmdDb3VudCA9IGNvdW50KGAuYW5pbWF0ZV9fYW5pbWF0ZWQke3NlbGVjdG9yfWApO1xuICAgICAgICBpZiAoYW5pbWF0aW5nQ291bnQgPT09IGV4cGVjdGVkQ291bnQpIHtcbiAgICAgICAgICAgIC8vIFdhaXQgYSBiaXQgbW9yZSB0byBlbnN1cmUgdGhlIGFuaW1hdGlvbiBzdGF0ZSBoYXMgc3RhYmlsaXplZFxuICAgICAgICAgICAgYXdhaXQgc2xlZXAoNTApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc2xlZXAoMTApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRpbWVvdXQgd2FpdGluZyBmb3IgYW5pbWF0aW9ucyB0byBjb21wbGV0ZS4gRXhwZWN0ZWQgJHtleHBlY3RlZENvdW50fSBhbmltYXRpbmcgZWxlbWVudHMgbWF0Y2hpbmcgJy5hbmltYXRlX19hbmltYXRlZCR7c2VsZWN0b3J9JywgYnV0IGZvdW5kICR7Y291bnQoYC5hbmltYXRlX19hbmltYXRlZCR7c2VsZWN0b3J9YCl9YCk7XG59XG4vLyBIZWxwZXIgdG8gd2FpdCBmb3IgZWxlbWVudHMgdG8gYXBwZWFyL2Rpc2FwcGVhclxuYXN5bmMgZnVuY3Rpb24gd2FpdEZvckVsZW1lbnRDb3VudChzZWxlY3RvciwgZXhwZWN0ZWRDb3VudCwgbWF4V2FpdCA9IDUwMDApIHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgbWF4V2FpdCkge1xuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBjb3VudChzZWxlY3Rvcik7XG4gICAgICAgIGlmIChjdXJyZW50Q291bnQgPT09IGV4cGVjdGVkQ291bnQpIHtcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDUwKTsgLy8gU21hbGwgZGVsYXkgdG8gZW5zdXJlIHN0YWJpbGl0eVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgc2xlZXAoMTApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRpbWVvdXQgd2FpdGluZyBmb3IgZWxlbWVudCBjb3VudC4gRXhwZWN0ZWQgJHtleHBlY3RlZENvdW50fSBlbGVtZW50cyBtYXRjaGluZyAnJHtzZWxlY3Rvcn0nLCBidXQgZm91bmQgJHtjb3VudChzZWxlY3Rvcil9YCk7XG59XG5kZXNjcmliZSgn8J+TsCBjb250ZW50JywgKCkgPT4ge1xuICAgIGl0KCdzcGFjaW5nJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoaHRtbCgnI2hlbGxvLWJpZy1kb20td29ybGQnKSkudG9CZSgnaGVsbG8gPGI+YmlnPC9iPiB3b3JsZCcpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI2hlbGxvLWJpZy1zdHJpbmctd29ybGQnKSkudG9CZSgnaGVsbG8gPGI+YmlnPC9iPiB3b3JsZCcpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI2hlbGxvLXNwYWNpbmctZG9tLXdvcmxkJykpLnRvQmUoJzU0IGhlbGxvIHdvcmxkcycpO1xuICAgIH0pO1xuICAgIGl0KCdzdHlsZS4nLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXNpbXBsZS1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXZhci1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXRvZ2dsZS1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKVswXS5zdHlsZS5ib3JkZXIpLnRvQmUoJzNweCBzb2xpZCBncmVlbicpO1xuICAgICAgICBjbGljaygnI3RvZ2dsZS1ib3JkZXItb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXRvZ2dsZS1ib3JkZXItb3JhbmdlJylbMF0uc3R5bGUuYm9yZGVyKS50b0JlKCczcHggc29saWQgb3JhbmdlJyk7XG4gICAgfSk7XG4gICAgaXQoJ3N0eWxlIHNldCBhcyBvYmplY3QnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnI3N0eWxlLXRvZ2dsZS1ib2xkJylbMF0uc3R5bGUuZm9udFdlaWdodCkudG9CZSgnJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvbGQnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvbGQnKVswXS5zdHlsZS5mb250V2VpZ2h0KS50b0JlKCdib2xkJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvbGQnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvbGQnKVswXS5zdHlsZS5mb250V2VpZ2h0KS50b0JlKCcnKTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnbm8gcGFyZW50IGVsZW1lbnQgdGVzdHMnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdubyBpbW1lZGlhdGUgcGFyZW50JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub1BhcmVudFRhZ0ZpZWxkc2V0Jyk7XG4gICAgICAgICAgICBleHBlY3QoZWxlbWVudD8uaW5uZXJUZXh0KS50b0JlKCdObyBQYXJlbnQgVGVzdFxcbmNvbnRlbnQxXFxudGVzdDBcXG5jb250ZW50MlxcbnRlc3QxXFxuY29udGVudDNcXG50ZXN0M1xcbmNvbnRlbnQ0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnbXVsdGlwbGUgbm8gcGFyZW50IC0gZW5zdXJlIGR5bmFtaWMgY29udGVudCByZW5kZXJlZCBpbiBvcmRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm9QYXJlbnRUYWdGaWVsZHNldCcpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9IHBhcmVudC5pbm5lckhUTUwucmVwbGFjZSgvKF4oLnxcXG4pKzxociBpZD1cIm5vUGFyZW50c1Rlc3QyLXN0YXJ0XCI+fCkvZywgJycpLnJlcGxhY2UoLzxociBpZD1cIm5vUGFyZW50c1Rlc3QyLWVuZFwiPigufFxcbikqL2csICcnKS50cmltKCk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCkudG9CZSgnPGhyPmNvbnRlbnQxPGhyPnRlc3QwPGhyPmNvbnRlbnQyPGhyPnRlc3QxPGhyPmNvbnRlbnQzPGhyPnRlc3QzPGhyPmNvbnRlbnQ0PGhyPicpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnY29uY2F0IHN0eWxlJywgKCkgPT4ge1xuICAgICAgICBieUlkKCdkeW5hbWljLWJvcmRlci13aWR0aCcpLnZhbHVlID0gMjtcbiAgICAgICAgYnlJZCgnZHluYW1pYy1ib3JkZXItY29sb3InKS52YWx1ZSA9ICd3aGl0ZSc7XG4gICAgICAgIGNoYW5nZU9uZSgnI2R5bmFtaWMtYm9yZGVyLXdpZHRoJyk7XG4gICAgICAgIGNoYW5nZU9uZSgnI2R5bmFtaWMtYm9yZGVyLWNvbG9yJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdkeW5hbWljLWJvcmRlci1lbGVtZW50Jykuc3R5bGUuYm9yZGVyQ29sb3IpLnRvQmUoJ3doaXRlJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdkeW5hbWljLWJvcmRlci1lbGVtZW50Jykuc3R5bGUuYm9yZGVyV2lkdGgpLnRvQmUoJzJweCcpO1xuICAgICAgICBieUlkKCdkeW5hbWljLWJvcmRlci13aWR0aCcpLnZhbHVlID0gMTtcbiAgICAgICAgYnlJZCgnZHluYW1pYy1ib3JkZXItY29sb3InKS52YWx1ZSA9ICdibHVlJztcbiAgICAgICAgY2hhbmdlT25lKCcjZHluYW1pYy1ib3JkZXItd2lkdGgnKTtcbiAgICAgICAgY2hhbmdlT25lKCcjZHluYW1pYy1ib3JkZXItY29sb3InKTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2R5bmFtaWMtYm9yZGVyLWVsZW1lbnQnKS5zdHlsZS5ib3JkZXJDb2xvcikudG9CZSgnYmx1ZScpO1xuICAgICAgICBleHBlY3QoYnlJZCgnZHluYW1pYy1ib3JkZXItZWxlbWVudCcpLnN0eWxlLmJvcmRlcldpZHRoKS50b0JlKCcxcHgnKTtcbiAgICB9KTtcbiAgICBpdCgndGFndmFyIGluamVjdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChieUlkKCdpbmplY3QtdGFndmFyLTAnKS5pbm5lclRleHQpLnRvQmUoYnlJZCgnaW5qZWN0LXJlYWQtdGFndmFyLTAnKS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoYnlJZCgnaW5qZWN0LXRhZ3Zhci0xJykuaW5uZXJUZXh0KS50b0JlKGJ5SWQoJ2luamVjdC1yZWFkLXRhZ3Zhci0xJykuaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2luamVjdC10YWd2YXItMicpLmlubmVyVGV4dCkudG9CZShieUlkKCdpbmplY3QtcmVhZC10YWd2YXItMicpLmlubmVyVGV4dCk7XG4gICAgfSk7XG4gICAgLypcbiAgICAgIGl0KCdhbmltYXRlcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gU2tpcCBpZiBydW5uaW5nIGluIGFuIGVudmlyb25tZW50IHdoZXJlIGNvbnRlbnQgdmlldyBpc24ndCBwcm9wZXJseSBsb2FkZWRcbiAgICAgICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQtdG9nZ2xlLWZ4Jyk7XG4gICAgICAgIGlmICghdG9nZ2xlQnV0dG9uKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gU2tpcHBpbmcgYW5pbWF0aW9uIHRlc3QgLSBDb250ZW50IHZpZXcgbm90IGxvYWRlZCBwcm9wZXJseSBpbiB0ZXN0IGVudmlyb25tZW50Jyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBleHBlY3QoY291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSwgJ0luaXRpYWwgc3RhdGU6IHNob3VsZCBoYXZlIDAgdGVzdCBlbGVtZW50cycpLnRvQmUoMClcbiAgICAgICAgXG4gICAgICAgIC8vc2hvd1xuICAgICAgICBjbGljaygnI2NvbnRlbnQtdG9nZ2xlLWZ4JylcbiAgICBcbiAgICAgICAgLy8gV2FpdCBmb3IgZWxlbWVudHMgdG8gYXBwZWFyXG4gICAgICAgIGF3YWl0IHdhaXRGb3JFbGVtZW50Q291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nLCAzKTtcbiAgICAgICAgZXhwZWN0KGNvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJykpLnRvQmUoMywgJ0FmdGVyIHNob3cgY2xpY2s6IHNob3VsZCBoYXZlIDMgdGVzdCBlbGVtZW50cycpXG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBhbnkgZWxlbWVudHMgYXJlIGFuaW1hdGluZyBpbml0aWFsbHkgKGNvdWxkIGJlIDEsIDIsIG9yIDMgZGVwZW5kaW5nIG9uIHRpbWluZylcbiAgICAgICAgY29uc3QgYW5pbWF0aW5nQ291bnQgPSBjb3VudCgnLmFuaW1hdGVfX2FuaW1hdGVkW25hbWU9dGVzdC10aGUtdGVzdGVyXScpO1xuICAgICAgICBleHBlY3QoYW5pbWF0aW5nQ291bnQpLnRvQmVHcmVhdGVyVGhhbigwLCAnQWZ0ZXIgc2hvdyBjbGljazogc2hvdWxkIGhhdmUgYXQgbGVhc3QgMSBhbmltYXRpbmcgZWxlbWVudCcpXG4gICAgICAgICAgICBcbiAgICAgICAgLy8gV2FpdCBhIGJpdCB0byBlbnN1cmUgd2UncmUgc3RpbGwgbWlkLWFuaW1hdGlvblxuICAgICAgICBhd2FpdCBzbGVlcCh0ZXN0U3RhZ2dlckJ5IC8gMik7XG4gICAgICAgIFxuICAgICAgICAvLyBhbG1vc3Qgc2hvd24gLSB0aGVyZSBtaWdodCBiZSBtb3JlIGFuaW1hdGluZyBlbGVtZW50cyBkdWUgdG8gc3RhZ2dlclxuICAgICAgICBleHBlY3QoY291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSwgJ0R1cmluZyBhbmltYXRpb246IHNob3VsZCBzdGlsbCBoYXZlIDMgdGVzdCBlbGVtZW50cycpLnRvQmUoMylcbiAgICAgICAgLy8gRG9uJ3QgY2hlY2sgZXhhY3QgYW5pbWF0aW9uIGNvdW50IGhlcmUgYXMgaXQgZGVwZW5kcyBvbiBzdGFnZ2VyIHRpbWluZ1xuICAgICAgICBleHBlY3QodGV4dENvbnRlbnQoJyNvdXRlci1odG1sLWZ4LXRlc3QnKSwgJ0R1cmluZyBhbmltYXRpb246IGlubmVyIGh0bWwgc2hvdWxkIGJlIHJlbmRlcmVkJykudG9CZSgnaW5uZXIgaHRtbCB0YWcnKVxuICAgIFxuICAgICAgICAvLyBXYWl0IGZvciBhbGwgYW5pbWF0aW9ucyB0byBjb21wbGV0ZVxuICAgICAgICBhd2FpdCB3YWl0Rm9yQW5pbWF0aW9uc1RvQ29tcGxldGUoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nLCAwKTtcbiAgICAgICBcbiAgICAgICAgLy8gY29tcGxldGVkIHNob3dpbmdcbiAgICAgICAgZXhwZWN0KGNvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJyksICdBZnRlciBhbmltYXRpb24gY29tcGxldGU6IHNob3VsZCBoYXZlIDMgdGVzdCBlbGVtZW50cycpLnRvQmUoMylcbiAgICAgICAgZXhwZWN0KGNvdW50KCcuYW5pbWF0ZV9fYW5pbWF0ZWRbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJyksICdBZnRlciBhbmltYXRpb24gY29tcGxldGU6IHNob3VsZCBoYXZlIDAgYW5pbWF0aW5nIGVsZW1lbnRzJykudG9CZSgwKVxuICAgICAgICBcbiAgICAgICAgLy8gaGlkZVxuICAgICAgICBjbGljaygnI2NvbnRlbnQtdG9nZ2xlLWZ4JylcbiAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGVsZW1lbnRzIGFyZSBhbmltYXRpbmcgKGNvdWxkIGJlIDEsIDIsIG9yIDMgZGVwZW5kaW5nIG9uIHRpbWluZylcbiAgICAgICAgY29uc3QgaGlkZUFuaW1hdGluZ0NvdW50ID0gY291bnQoJy5hbmltYXRlX19hbmltYXRlZFtuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKTtcbiAgICAgICAgZXhwZWN0KGhpZGVBbmltYXRpbmdDb3VudCkudG9CZUdyZWF0ZXJUaGFuKDAsICdBZnRlciBoaWRlIGNsaWNrOiBzaG91bGQgaGF2ZSBhdCBsZWFzdCAxIGFuaW1hdGluZyBlbGVtZW50JylcbiAgICAgICAgXG4gICAgICAgIC8vIG5vIGNoYW5nZXMgdG8gcmVtb3ZlIHlldFxuICAgICAgICBleHBlY3QoY291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSkudG9CZSgzLCAnQWZ0ZXIgaGlkZSBjbGljazogc2hvdWxkIHN0aWxsIGhhdmUgMyB0ZXN0IGVsZW1lbnRzJylcbiAgICAgICAgXG4gICAgICAgIC8vIFdhaXQgZm9yIGFsbCBlbGVtZW50cyB0byBkaXNhcHBlYXJcbiAgICAgICAgYXdhaXQgd2FpdEZvckVsZW1lbnRDb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScsIDApO1xuICAgICAgICBcbiAgICAgICAgLy8gc2hvdWxkIGJlIGRvbmUgZGlzYXBwZWFyaW5nXG4gICAgICAgIGV4cGVjdChjb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScpKS50b0JlKDAsICdBZnRlciBoaWRlIGFuaW1hdGlvbjogc2hvdWxkIGhhdmUgMCB0ZXN0IGVsZW1lbnRzJylcbiAgICAgICAgZXhwZWN0KGNvdW50KCcuYW5pbWF0ZV9fYW5pbWF0ZWRbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJykpLnRvQmUoMCwgJ0FmdGVyIGhpZGUgYW5pbWF0aW9uOiBzaG91bGQgaGF2ZSAwIGFuaW1hdGluZyBlbGVtZW50cycpXG4gICAgICB9KVxuICAgICovXG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGJ5SWQsIGNsaWNrLCBodG1sLCBodG1sQnlJZCwga2V5dXBPbiB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBleHBlY3RFbG1Db3VudCwgdGVzdENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5sZXQgcnVucyA9IDA7XG5kZXNjcmliZSgn8J+SryBjb3VudGVycycsICgpID0+IHtcbiAgICAvLyB0ZXN0cyBjYW4gYmUgcnVuIG11bHRpcGxlIHRpbWVzLiBPbmx5IHRoZSBmaXJzdCB0aW1lIHdpbGwgdGhpcyBleHBlY3QgYmVsb3cgd29ya1xuICAgIGNvbnN0IGZpcnN0UnVuID0gcnVucyA9PT0gMDtcbiAgICArK3J1bnM7XG4gICAgaXQoJ2Jhc2ljcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgY291bnRlcklucHV0ID0gYnlJZCgnc2V0LW1haW4tY291bnRlci1pbnB1dCcpO1xuICAgICAgICBleHBlY3QoY291bnRlcklucHV0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBjb3VudGVySW5wdXQudmFsdWUgPSAnMCc7XG4gICAgICAgIGtleXVwT24oY291bnRlcklucHV0KTtcbiAgICAgICAgY29uc3QgYmVmb3JlUmVuZGVyQ291bnQgPSBOdW1iZXIoaHRtbCgnI2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpKTtcbiAgICAgICAgY29uc3QgYmVmb3JlSW5uZXJSZW5kZXJDb3VudCA9IE51bWJlcihodG1sKCcjaW5uZXJfY291bnRlcnNfcmVuZGVyX2NvdW50JykpO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI2NvbmRpdGlvbmFsLWNvdW50ZXInLCAwKTtcbiAgICAgICAgY29uc3QgY3VycmVudFN1YnMgPSBodG1sQnlJZCgn8J+RiS1jb3VudGVyLXN1Yi1jb3VudCcpO1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcj4p2k77iPLWluY3JlYXNlLWNvdW50ZXInLCAnI+KdpO+4jy1jb3VudGVyLWRpc3BsYXknKTtcbiAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCfwn5GJLWNvdW50ZXItc3ViLWNvdW50JykpLnRvQmUoY3VycmVudFN1YnMpO1xuICAgICAgICBjb25zdCBleHBlY3RlZFJlbmRlckNvdW50ID0gaHRtbCgnI2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpO1xuICAgICAgICAvLyBjb25zdCByZW5kZXJUb0JlID0gKGJlZm9yZVJlbmRlckNvdW50ICsgMikudG9TdHJpbmcoKVxuICAgICAgICBjb25zdCByZW5kZXJUb0JlID0gXCIxXCI7XG4gICAgICAgIGV4cGVjdChleHBlY3RlZFJlbmRlckNvdW50KS50b0JlKHJlbmRlclRvQmUsIGBleHBlY3RlZCByZW5kZXIgY291bnQgJHtleHBlY3RlZFJlbmRlckNvdW50fSB0byBiZSAke3JlbmRlclRvQmV9YCk7XG4gICAgICAgIC8vIHRoZSBwYXJlbnQgY2hhbmdlZCBhIHZhbHVlIHBhc3NlZCB0byBjaGlsZCBhcyBhIHByb3BcbiAgICAgICAgLy8gbGV0IHRvQmUgPSAoYmVmb3JlSW5uZXJSZW5kZXJDb3VudCArIDIpLnRvU3RyaW5nKClcbiAgICAgICAgbGV0IHRvQmUgPSBcIjFcIjtcbiAgICAgICAgbGV0IHJlbmRlckNvdW50ID0gaHRtbCgnI2lubmVyX2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpO1xuICAgICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUodG9CZSwgYEV4cGVjdGVkIHJlbmRlckNvdW50ICR7cmVuZGVyQ291bnR9IHRvIGJlICR7dG9CZX1gKTsgLy8gZXhwZWN0ZWQgbnVtYmVyIG9mIHJlbmRlcnMgdG8gYmUgJHt0b0JlfSBub3QgJHtyZW5kZXJDb3VudH1cbiAgICAgICAgY29uc3QgcHJlSW5pdENvdW50ZXIgPSBodG1sKCcj8J+UpS1pbml0LWNvdW50ZXInKTtcbiAgICAgICAgZXhwZWN0KHByZUluaXRDb3VudGVyKS50b0JlKCcxJywgYCPwn5SlLWluaXQtY291bnRlciB0byBiZSAxIGJ1dCBpdCdzICR7cHJlSW5pdENvdW50ZXJ9YCk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPinaTvuI8taW5uZXItY291bnRlcicsICcj4p2k77iPLWlubmVyLWRpc3BsYXknKTtcbiAgICAgICAgLy8gdG9CZSA9IChiZWZvcmVSZW5kZXJDb3VudCArIDQpLnRvU3RyaW5nKClcbiAgICAgICAgcmVuZGVyQ291bnQgPSBodG1sKCcjY291bnRlcnNfcmVuZGVyX2NvdW50Jyk7XG4gICAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSh0b0JlLCAnI2NvdW50ZXJzX3JlbmRlcl9jb3VudCBmYWlsJyk7IC8vIGV4cGVjdGVkIG51bWJlciBvZiByZW5kZXJzIHRvIGJlICR7dG9CZX0gbm90ICR7cmVuZGVyQ291bnR9XG4gICAgICAgIC8vIHRoZSBjaGlsZCBjaGFuZ2VkIGEgdmFsdWUgcGFzc2VkIGZyb20gcGFyZW50IGFzIGEgcHJvcFxuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWwoJyNpbm5lcl9jb3VudGVyc19yZW5kZXJfY291bnQnKTtcbiAgICAgICAgLy8gdG9CZSA9IChiZWZvcmVJbm5lclJlbmRlckNvdW50ICsgNCkudG9TdHJpbmcoKVxuICAgICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUodG9CZSk7IC8vIGV4cGVjdGVkIG51bWJlciBvZiByZW5kZXJzIHRvIGJlICR7dG9CZX0gbm90ICR7cmVuZGVyQ291bnR9XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn6WmLXN0YW5kYWxvbmUtY291bnRlcicsICcj8J+lpi1zdGFuZGFsb25lLWRpc3BsYXknKTtcbiAgICAgICAgLy8gdG9CZSA9IChiZWZvcmVSZW5kZXJDb3VudCArIChmaXJzdFJ1biA/IDYgOiA2KSkudG9TdHJpbmcoKVxuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWwoJyNjb3VudGVyc19yZW5kZXJfY291bnQnKTtcbiAgICAgICAgZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKHRvQmUsICcjY291bnRlcnNfcmVuZGVyX2NvdW50IGZhaWxlZCcpOyAvLyByZW5kZXIgY291bnQgY2hlY2sgZmFpbGVkXG4gICAgICAgIC8vIHRoZSBjaGlsZCB3YXMgbm90IHJlbmRlcmVkIGFnYWluIGJlY2F1c2UgcHJvcHMgZGlkIG5vdCBjaGFuZ2Ugc28gdmFsdWUgc2hvdWxkIGJlIGxlc3NcbiAgICAgICAgcmVuZGVyQ291bnQgPSBodG1sKCcjaW5uZXJfY291bnRlcnNfcmVuZGVyX2NvdW50Jyk7XG4gICAgICAgIC8vIHRvQmUgPSAoYmVmb3JlSW5uZXJSZW5kZXJDb3VudCArIDQpLnRvU3RyaW5nKClcbiAgICAgICAgZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKHRvQmUsICcjaW5uZXJfY291bnRlcnNfcmVuZGVyX2NvdW50IGZhaWxlZCcpOyAvLyBleHBlY3RlZCBudW1iZXIgb2YgcmVuZGVycyB0byBiZSAke3RvQmV9IG5vdCAke3JlbmRlckNvdW50fVxuICAgICAgICBleHBlY3RFbG1Db3VudCgnI2NvbmRpdGlvbmFsLWNvdW50ZXInLCAxKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyNjb25kaXRpb25hbC1kaXNwbGF5JywgMSk7XG4gICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZXhwZWN0KGh0bWwoJyNjb25kaXRpb25hbC1kaXNwbGF5JykpLnRvQmUoJzInKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWxCeUlkKCfinaTvuI/wn5KnLXNoYWxsb3ctZGlzcGxheScpO1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjY29uZGl0aW9uYWwtY291bnRlcicsICcjY29uZGl0aW9uYWwtZGlzcGxheScpO1xuICAgICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUoaHRtbEJ5SWQoJ+KdpO+4j/Cfkqctc2hhbGxvdy1kaXNwbGF5JykpOyAvLyBleHBlY3Qgc2hhbGxvdyByZW5kZXIgbm90IHRvIGhhdmUgY2hhbmdlZFxuICAgICAgICAvLyB0ZXN0IGFnYWluIGFmdGVyIGhpZ2hlciBlbGVtZW50cyBoYXZlIGhhZCByZXJ1bnNcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI+KdpO+4jy1pbm5lci1jb3VudGVyJywgJyPinaTvuI8taW5uZXItZGlzcGxheScpO1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcj4p2k77iP8J+Spy1zaGFsbG93LWNvdW50ZXInLCAnI+KdpO+4j/Cfkqctc2hhbGxvdy1kaXNwbGF5Jyk7XG4gICAgICAgIHNwZWVkQ2xpY2tDb3VudFRlc3QoJ/CfpL8tZGVlcC1jb3VudGVyJywgJ/CfpL8tZGVlcC1kaXNwbGF5JywgJ+KdpO+4jy1pbm5lci1jb3VudGVyJyk7XG4gICAgICAgIHNwZWVkQ2xpY2tDb3VudFRlc3QoJ/Cfkqctc2hhbGxvdy1jb3VudGVyJywgJ/Cfkqctc2hhbGxvdy1kaXNwbGF5JywgJ+KdpO+4j/Cfkqctc2hhbGxvdy1kaXNwbGF5Jyk7XG4gICAgICAgIHNwZWVkQ2xpY2tDb3VudFRlc3QoJ/CfqqgtaW1tdXRhYmxlLWNvdW50ZXInLCAn8J+qqC1pbW11dGFibGUtZGlzcGxheScsICfinaTvuI/wn6qoLWltbXV0YWJsZS1jb3VudGVyJyk7XG4gICAgICAgIHNwZWVkQ2xpY2tDb3VudFRlc3QoJ/Cfmqstbm93YXRjaC1jb3VudGVyJywgJ/Cfmqstbm93YXRjaC1kaXNwbGF5JywgJ+KdpO+4j/Cfmqstbm93YXRjaC1jb3VudGVyJyk7XG4gICAgICAgIC8vIHJlbmRlckNvdW50ID0gaHRtbCgnI3NoYWxsb3dfY291bnRlcnNfcmVuZGVyX2NvdW50JylcbiAgICAgICAgLy8gdG9CZSA9IChiZWZvcmVJbm5lclJlbmRlckNvdW50ICsgNCkudG9TdHJpbmcoKVxuICAgICAgICAvLyBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUodG9CZSkgLy8gZXhwZWN0ZWQgbnVtYmVyIG9mIHJlbmRlcnMgdG8gYmUgJHt0b0JlfSBub3QgJHtyZW5kZXJDb3VudH1cbiAgICB9KTtcbiAgICBpdCgnY291bnRlcnMudGVzdCBwaXBlZCBzdWJqZWN0JywgKCkgPT4ge1xuICAgICAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ZXIgPSBodG1sKCcj8J+lpi1zdGFuZGFsb25lLWRpc3BsYXknKTtcbiAgICAgICAgICAgIGNvbnN0IHBpcGUwID0gaHRtbCgnI/CfqogtcGlwZWRTdWJqZWN0Jyk7XG4gICAgICAgICAgICAvLyBleHBlY3QocGlwZTApLnRvQmUoY291bnRlciwgYGZpcnN0UnVuIGZhaWx1cmUgcGlwZTAuIEV4cGVjdGVkIFwiJHtwaXBlMH1cIiB0b0JlIGVtcHR5LXN0cmluZyBha2EgJHtjb3VudGVyfWApXG4gICAgICAgICAgICBleHBlY3QocGlwZTApLnRvQmUoXCJcIiwgYGZpcnN0UnVuIGZhaWx1cmUgcGlwZTAuIEV4cGVjdGVkIFwiJHtwaXBlMH1cIiB0b0JlIGVtcHR5LXN0cmluZ2ApO1xuICAgICAgICAgICAgY29uc3QgcGlwZTIgPSBodG1sKCcj8J+qiC1waXBlZFN1YmplY3QtMicpO1xuICAgICAgICAgICAgLy8gZXhwZWN0KHBpcGUyKS50b0JlKGNvdW50ZXIsIGBmaXJzdFJ1biBmYWlsdXJlIHBpcGUyIGV4cGVjdGVkICR7cGlwZTJ9IHRvIGJlICR7Y291bnRlcn1gKVxuICAgICAgICAgICAgZXhwZWN0KHBpcGUyKS50b0JlKFwiXCIsIGBmaXJzdFJ1biBmYWlsdXJlIHBpcGUyIGV4cGVjdGVkIHRvQmUgZW1wdHktc3RyaW5nYCk7XG4gICAgICAgICAgICBjb25zdCBwaXBlMyA9IGh0bWwoJyPwn6qILXBpcGVkU3ViamVjdC0zJyk7XG4gICAgICAgICAgICBleHBlY3QocGlwZTMpLnRvQmUoXCJcIiwgYGZpcnN0UnVuIGZhaWx1cmUgcGlwZTMgZXhwZWN0ZWQgdG9CZSBlbXB0eS1zdHJpbmdgKTtcbiAgICAgICAgfVxuICAgICAgICBjbGljaygnI/CfpaYtc3ViamVjdC1pbmNyZWFzZS1jb3VudGVyJyk7XG4gICAgICAgIGNvbnN0IHBpcGVkU3ViRGlzcGxheSA9IGh0bWwoJyPwn6qILXBpcGVkU3ViamVjdCcpO1xuICAgICAgICBjb25zdCBzdWJqZWN0Q291bnREaXNwbGF5ID0gaHRtbCgnI/CfpaYtc3RhbmRhbG9uZS1kaXNwbGF5Jyk7XG4gICAgICAgIGV4cGVjdChwaXBlZFN1YkRpc3BsYXkpLnRvQmUoc3ViamVjdENvdW50RGlzcGxheSk7IC8vIEV4cGVjdGVkICPwn6qILXBpcGVkU3ViamVjdCB2YWx1ZSgke3BpcGVkU3ViRGlzcGxheX0pIHRvIG1hdGNoICPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheSB2YWx1ZSgke3N1YmplY3RDb3VudERpc3BsYXl9KVxuICAgICAgICBleHBlY3QoaHRtbCgnI/CfqogtcGlwZWRTdWJqZWN0LTInKSkudG9CZShodG1sKCcj8J+lpi1zdGFuZGFsb25lLWRpc3BsYXknKSk7XG4gICAgfSk7XG59KTtcbmV4cG9ydCBjb25zdCBjbGlja1NwZWVkQW1vdW50ID0gNjAwO1xuZnVuY3Rpb24gc3BlZWRDbGlja0NvdW50VGVzdChjb3VudGVyUXVlcnksIGRpc3BsYXlRdWVyeSwgaW5jcmVhc2VPdXRlckNvdW50ZXJRdWVyeSkge1xuICAgIGNvbnN0IGNsaWNrQ291bnQgPSBodG1sQnlJZChkaXNwbGF5UXVlcnkpO1xuICAgIGNvbnN0IGVsbSA9IGJ5SWQoY291bnRlclF1ZXJ5KTtcbiAgICBjb25zdCBwcm9wQ291bnRlckJ0bkVsbSA9IGJ5SWQoaW5jcmVhc2VPdXRlckNvdW50ZXJRdWVyeSk7XG4gICAgY29uc29sZS50aW1lKGDijJrvuI8gJHtjb3VudGVyUXVlcnl9YCk7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDYwMDsgaW5kZXgrKykge1xuICAgICAgICBlbG0uY2xpY2soKTtcbiAgICB9XG4gICAgY29uc29sZS50aW1lRW5kKGDijJrvuI8gJHtjb3VudGVyUXVlcnl9YCk7XG4gICAgY29uc29sZS50aW1lKGDijJrvuI8gb3V0ZXIgJHtjb3VudGVyUXVlcnl9YCk7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDYwMDsgaW5kZXgrKykge1xuICAgICAgICBwcm9wQ291bnRlckJ0bkVsbS5jbGljaygpO1xuICAgIH1cbiAgICBjb25zb2xlLnRpbWVFbmQoYOKMmu+4jyBvdXRlciAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBjb25zdCBkaXNwbGF5UXVlcnlUaW1lID0gKE51bWJlcihjbGlja0NvdW50KSArIGNsaWNrU3BlZWRBbW91bnQpLnRvU3RyaW5nKCk7XG4gICAgZXhwZWN0KGh0bWxCeUlkKGRpc3BsYXlRdWVyeSkpLnRvQmUoZGlzcGxheVF1ZXJ5VGltZSk7IC8vICR7ZGlzcGxheVF1ZXJ5fVxufVxuIiwiaW1wb3J0IHsgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBodG1sLCBjbGljaywgY291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaXQoJ2Rlc3Ryb3lzJywgYXN5bmMgKCkgPT4ge1xuICAgIGV4cGVjdChjb3VudCgnI2Rlc3Ryb3lDb3VudCcpKS50b0JlKDEpO1xuICAgIGV4cGVjdChjb3VudCgnI3RvZ2dsZS1kZXN0cm95cycpKS50b0JlKDEpO1xuICAgIGNvbnN0IGRlc0NvdW50MCA9IGNvdW50KCcjZGVzdHJveWFibGUtY29udGVudCcpO1xuICAgIGV4cGVjdChkZXNDb3VudDApLnRvQmUoMSwgYEV4cGVjdGVkICNkZXN0cm95YWJsZS1jb250ZW50IHRvIGJlIGRlZmluZWRgKTtcbiAgICBsZXQgb2xkRGVzdHJveUNvdW50ID0gTnVtYmVyKGh0bWwoJyNkZXN0cm95Q291bnQnKSk7XG4gICAgLy8gY2F1c2UgZGVzdHJveVxuICAgIGNsaWNrKCcjdG9nZ2xlLWRlc3Ryb3lzJyk7XG4gICAgbGV0IGRlc3Ryb3lDb3VudCA9IE51bWJlcihodG1sKCcjZGVzdHJveUNvdW50JykpO1xuICAgIGNvbnN0IHVwZGF0ZWRDb3VudCA9IG9sZERlc3Ryb3lDb3VudCArIDE7XG4gICAgZXhwZWN0KGRlc3Ryb3lDb3VudCkudG9CZSh1cGRhdGVkQ291bnQsIGBFeHBlY3RlZCAjZGVzdHJveUNvdW50LmlubmVySFRNTCB0byBiZSAke3VwZGF0ZWRDb3VudH0gYnV0IGl0IGlzICR7ZGVzdHJveUNvdW50fWApO1xuICAgIC8vIGF3YWl0IHNsZWVwKDApIC8vIFNIT1VMRCBOT1QgTkVFRCFcbiAgICBjb25zdCBkQ29udGVudENvdW50ID0gY291bnQoJyNkZXN0cm95YWJsZS1jb250ZW50Jyk7XG4gICAgZXhwZWN0KGRDb250ZW50Q291bnQpLnRvQmUoMCwgYEV4cGVjdGVkICNkZXN0cm95YWJsZS1jb250ZW50IHRvIG5vdCBleGlzdGApO1xuICAgIG9sZERlc3Ryb3lDb3VudCA9IGRlc3Ryb3lDb3VudDtcbiAgICAvLyBjYXVzZSByZXN0b3JlXG4gICAgY2xpY2soJyN0b2dnbGUtZGVzdHJveXMnKTtcbiAgICBkZXN0cm95Q291bnQgPSBOdW1iZXIoaHRtbCgnI2Rlc3Ryb3lDb3VudCcpKTtcbiAgICBleHBlY3QoZGVzdHJveUNvdW50KS50b0JlKG9sZERlc3Ryb3lDb3VudCk7XG4gICAgZXhwZWN0KGNvdW50KCcjZGVzdHJveWFibGUtY29udGVudCcpKS50b0JlKDEpO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG4vLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBieUlkLCB0cmlnZ2VyQ2hhbmdlRWxtLCBxdWVyeSB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgndGFnZ2VkanMtZHVtcCcsICgpID0+IHtcbiAgICBpdCgnc3RhcnRzIHdpdGggbm90aGluZyBUSEVOIGJlY29tZXMgb2JqZWN0IFRIRU4gb2JqZWN0IHdpdGggYXJyYXknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsbSA9IGJ5SWQoJ3RhZ2dlZGpzLWR1bXAtdXNlci10ZXh0YXJlYScpO1xuICAgICAgICBleHBlY3QoZWxtLnZhbHVlKS50b0JlKCcnKTtcbiAgICAgICAgZWxtLnZhbHVlID0gJ3t0ZXN0OjIyfSc7XG4gICAgICAgIHRyaWdnZXJDaGFuZ2VFbG0oZWxtKTtcbiAgICAgICAgZXhwZWN0KGVsbS52YWx1ZSkudG9CZSgne3Rlc3Q6MjJ9Jyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdEVsbXMgPSBxdWVyeSgnI3RhZ2dlZGpzLWR1bXAtdXNlci1yZXN1bHQgLnRhZ2dlZGpzLXNpbXBsZS1sYWJlbCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0RWxtcy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRFbG1zWzBdLmlubmVyVGV4dCkudG9CZSgndGVzdCcpO1xuICAgICAgICBlbG0udmFsdWUgPSAne3Rlc3Q6MjIsIGFjZTpbMjIsIHt0ZXN0YjozM30sIDU1XX0nO1xuICAgICAgICB0cmlnZ2VyQ2hhbmdlRWxtKGVsbSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdEVsbXMyID0gcXVlcnkoJyN0YWdnZWRqcy1kdW1wLXVzZXItcmVzdWx0IC50YWdnZWRqcy1zaW1wbGUtbGFiZWwnKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEVsbXMyLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEVsbXMyWzBdLmlubmVyVGV4dCkudG9CZSgndGVzdCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0RWxtczJbMV0uaW5uZXJUZXh0KS50b0JlKCd0ZXN0YicpO1xuICAgICAgICBlbG0udmFsdWUgPSAnJztcbiAgICAgICAgdHJpZ2dlckNoYW5nZUVsbShlbG0pO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGNsaWNrLCBodG1sIH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IHRlc3RDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaXQoJ2Z1bmN0aW9uIGluIHByb3BzJywgYXN5bmMgKCkgPT4ge1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNmdW5faW5fcHJvcDEnLCAnI2Z1bl9pbl9wcm9wX2Rpc3BsYXknKTtcbiAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjZnVuX2luX3Byb3AyJywgJyNmdW5faW5fcHJvcF9kaXNwbGF5Jyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2Z1bl9pbl9wcm9wMycsICcjZnVuX2luX3Byb3BfZGlzcGxheScpO1xuICAgIGV4cGVjdChodG1sKCcjbWFpbl93cmFwX3N0YXRlJykpLnRvQmUoJ3RhZ2dqZWRqcy13cmFwcGVkJyk7XG4gICAgY2xpY2soJyN0b2dnbGUtZnVuLWluLWNoaWxkJyk7XG4gICAgY2xpY2soJyNmdW4tcGFyZW50LWJ1dHRvbicpO1xuICAgIC8vIGV4cGVjdChodG1sKCcjbWFpbl93cmFwX3N0YXRlJykpLnRvQmUoJ25vd3JhcCcpXG4gICAgY2xpY2soJyN0b2dnbGUtZnVuLWluLWNoaWxkJyk7XG4gICAgY2xpY2soJyNmdW4tcGFyZW50LWJ1dHRvbicpO1xuICAgIGV4cGVjdChodG1sKCcjbWFpbl93cmFwX3N0YXRlJykpLnRvQmUoJ3RhZ2dqZWRqcy13cmFwcGVkJyk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QsIGRlc2NyaWJlLCBhZnRlckVhY2gsIGJlZm9yZUVhY2ggfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCB9IGZyb20gJy4vdGVzdGluZyc7XG5jb25zb2xlLmxvZygnSU5DTFVERUQhISEnKTtcbmRlc2NyaWJlKCdJbmplY3Rpb24gVGVzdCcsICgpID0+IHtcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGFsbCBpdGVtc1xuICAgIGNvbnN0IGdldEl0ZW1zID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBieUlkKGBpbmplY3Rpb24tdGVzdC1pdGVtLSR7aX1gKTtcbiAgICAgICAgICAgIGlmIChpdGVtKVxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH07XG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBhbGwgY2hlY2tib3hlc1xuICAgIGNvbnN0IGdldENoZWNrYm94ZXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykpO1xuICAgIH07XG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjaGVja2VkIGl0ZW1zIGNvdW50XG4gICAgY29uc3QgZ2V0Q2hlY2tlZENvdW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICByZXR1cm4gY2hlY2tib3hlcy5maWx0ZXIoY2IgPT4gY2I/LmNoZWNrZWQpLmxlbmd0aDtcbiAgICB9O1xuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byByZXNldCBhbGwgY2hlY2tib3hlcyB0byB1bmNoZWNrZWQgc3RhdGVcbiAgICBjb25zdCByZXNldENoZWNrYm94ZXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGdldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gQ2xpY2sgb24gaXRlbXMgdGhhdCBhcmUgY2hlY2tlZCB0byB1bmNoZWNrIHRoZW1cbiAgICAgICAgY2hlY2tib3hlcy5mb3JFYWNoKChjaGVja2JveCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGVja2JveD8uY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4XS5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIEVuc3VyZSBjbGVhbiBzdGF0ZSBiZWZvcmUgYW5kIGFmdGVyIGVhY2ggdGVzdFxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZXNldENoZWNrYm94ZXMoKTtcbiAgICB9KTtcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICByZXNldENoZWNrYm94ZXMoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGhhdmUgaW5qZWN0aW9uIHRlc3Rpbmcgc2VjdGlvbiB3aXRoIGFsbCBpdGVtcyB1bmNoZWNrZWQgaW5pdGlhbGx5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBpbmplY3Rpb25UZXN0aW5nV3JhcCA9IGJ5SWQoJ2luamVjdGlvbi10ZXN0aW5nLXdyYXAtaG9zdCcpO1xuICAgICAgICBleHBlY3QoaW5qZWN0aW9uVGVzdGluZ1dyYXApLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgd2UgaGF2ZSAxMCBpdGVtc1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIGV4cGVjdChpdGVtcy5sZW5ndGgpLnRvQmUoMTApO1xuICAgICAgICAvLyBDaGVjayBhbGwgY2hlY2tib3hlcyBhcmUgdW5jaGVja2VkIGluaXRpYWxseVxuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICBjaGVja2JveGVzLmZvckVhY2goY2hlY2tib3ggPT4ge1xuICAgICAgICAgICAgZXhwZWN0KGNoZWNrYm94Py5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzZWxlY3QgaW5kaXZpZHVhbCBpdGVtcyB3aGVuIGNsaWNrZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGdldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gSW5pdGlhbGx5IG5vIGl0ZW1zIHNlbGVjdGVkXG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgwKTtcbiAgICAgICAgLy8gQ2xpY2sgZmlyc3QgaXRlbVxuICAgICAgICBpdGVtc1swXS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1swXS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMSk7XG4gICAgICAgIC8vIENsaWNrIHRoaXJkIGl0ZW1cbiAgICAgICAgaXRlbXNbMl0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMl0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDIpO1xuICAgICAgICAvLyBDbGljayBmaWZ0aCBpdGVtXG4gICAgICAgIGl0ZW1zWzRdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzRdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgzKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGRlc2VsZWN0IGl0ZW1zIHdoZW4gY2xpY2tlZCBhZ2FpbicsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDApO1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIC8vIFNlbGVjdCBhIGZldyBpdGVtcyBmaXJzdFxuICAgICAgICBpdGVtc1sxXS5jbGljaygpO1xuICAgICAgICBpdGVtc1szXS5jbGljaygpO1xuICAgICAgICBpdGVtc1s1XS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMyk7XG4gICAgICAgIC8vIERlc2VsZWN0IGl0ZW0gM1xuICAgICAgICBpdGVtc1szXS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1szXS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDIpO1xuICAgICAgICAvLyBEZXNlbGVjdCBpdGVtIDFcbiAgICAgICAgaXRlbXNbMV0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMV0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgxKTtcbiAgICAgICAgLy8gRGVzZWxlY3QgaXRlbSA1XG4gICAgICAgIGl0ZW1zWzVdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzVdLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzZWxlY3QgbXVsdGlwbGUgaXRlbXMgd2hlbiBjbGlja2luZyBvbiBkaWZmZXJlbnQgaXRlbXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGdldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gU2VsZWN0IGl0ZW1zIDAsIDIsIDQsIDYsIDhcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbMl0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbNF0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbNl0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbOF0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMF0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMV0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzJdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzNdLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1s0XS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1s1XS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbNl0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbN10uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzhdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzldLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoNSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0b2dnbGUgc2VsZWN0aW9uIHN0YXRlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBnZXRJdGVtcygpO1xuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICAvLyBDbGljayBpdGVtIDAgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMF0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMF0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGl0ZW1zWzBdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzBdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGl0ZW1zWzBdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzBdLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbWFpbnRhaW4gc2VsZWN0aW9uIHN0YXRlIGFjcm9zcyBtdWx0aXBsZSBvcGVyYXRpb25zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIC8vIFNlbGVjdCBzb21lIGl0ZW1zXG4gICAgICAgIGl0ZW1zWzFdLmNsaWNrKCk7XG4gICAgICAgIGl0ZW1zWzJdLmNsaWNrKCk7XG4gICAgICAgIGl0ZW1zWzNdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgzKTtcbiAgICAgICAgLy8gQWRkIG1vcmUgc2VsZWN0aW9uc1xuICAgICAgICBpdGVtc1s3XS5jbGljaygpO1xuICAgICAgICBpdGVtc1s5XS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoNSk7XG4gICAgICAgIC8vIFJlbW92ZSBzb21lIHNlbGVjdGlvbnNcbiAgICAgICAgaXRlbXNbMl0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbN10uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDMpO1xuICAgICAgICAvLyBWZXJpZnkgY29ycmVjdCBpdGVtcyBhcmUgc3RpbGwgc2VsZWN0ZWRcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMV0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMl0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzNdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzddLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1s5XS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0byBvcmlnaW5hbCB1bmNoZWNrZWQgc3RhdGUgYWZ0ZXIgdGVzdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBnZXRJdGVtcygpO1xuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICAvLyBTZWxlY3QgYWxsIGl0ZW1zXG4gICAgICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsaWNrKCkpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICAvLyBSZXNldFxuICAgICAgICByZXNldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gVmVyaWZ5IGFsbCBhcmUgdW5jaGVja2VkXG4gICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XG4gICAgICAgICAgICBleHBlY3QoY2hlY2tib3g/LmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJhcGlkIGNsaWNraW5nIHdpdGhvdXQgaXNzdWVzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIC8vIFJhcGlkbHkgY2xpY2sgdGhlIHNhbWUgaXRlbVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIGl0ZW1zWzBdLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hvdWxkIGJlIHVuY2hlY2tlZCAoZXZlbiBudW1iZXIgb2YgY2xpY2tzKVxuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1swXS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgLy8gT25lIG1vcmUgY2xpY2tcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgLy8gU2hvdWxkIGJlIGNoZWNrZWQgKG9kZCBudW1iZXIgb2YgY2xpY2tzKVxuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1swXS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdXBkYXRlIHZpc3VhbCBpbmRpY2F0b3JzIHdoZW4gaXRlbXMgYXJlIHNlbGVjdGVkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIC8vIENsaWNrIHRvIHNlbGVjdCBpdGVtIDBcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgc3R5bGUgaGFzIGNoYW5nZWQgKGdyZWVuIGJhY2tncm91bmQgZm9yIHNlbGVjdGVkKVxuICAgICAgICBjb25zdCBpdGVtMFN0eWxlID0gaXRlbXNbMF0uZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8ICcnO1xuICAgICAgICBleHBlY3QoaXRlbTBTdHlsZS5pbmNsdWRlcygnYmFja2dyb3VuZDogcmdiKDc2LCAxNzUsIDgwKScpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXRlbTBTdHlsZS5pbmNsdWRlcygnYm9yZGVyOiAzcHggc29saWQgcmdiKDUxLCA1MSwgNTEpJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIC8vIENoZWNrIHVuc2VsZWN0ZWQgaXRlbSBoYXMgYmx1ZSBiYWNrZ3JvdW5kXG4gICAgICAgIGNvbnN0IGl0ZW0xU3R5bGUgPSBpdGVtc1sxXS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgICAgIGV4cGVjdChpdGVtMVN0eWxlLmluY2x1ZGVzKCdiYWNrZ3JvdW5kOiByZ2IoMzMsIDE1MCwgMjQzKScpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXRlbTFTdHlsZS5pbmNsdWRlcygnYm9yZGVyOiAxcHggc29saWQgcmdiKDE1MywgMTUzLCAxNTMpJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgaHRtbEJ5SWQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgZXhwZWN0RWxtQ291bnQsIGV4cGVjdE1hdGNoZWRIdG1sIH0gZnJvbSAnLi90ZXN0aW5nJztcbml0KCfwn6qeIG1pcnJvciB0ZXN0aW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdEVsbUNvdW50KCcjbWlycm9yLWNvdW50ZXItZGlzcGxheScsIDIpO1xuICAgIGV4cGVjdEVsbUNvdW50KCcjbWlycm9yLWNvdW50ZXItYnV0dG9uJywgMik7XG4gICAgY29uc3QgY291bnRlciA9IE51bWJlcihodG1sQnlJZCgnbWlycm9yLWNvdW50ZXItZGlzcGxheScpKTtcbiAgICBieUlkKCdtaXJyb3ItY291bnRlci1idXR0b24nKS5jbGljaygpO1xuICAgIGV4cGVjdChjb3VudGVyICsgMSkudG9CZShOdW1iZXIoaHRtbEJ5SWQoJ21pcnJvci1jb3VudGVyLWRpc3BsYXknKSkpO1xuICAgIGV4cGVjdEVsbUNvdW50KCcjbWlycm9yLWNvdW50ZXItZGlzcGxheScsIDIpO1xuICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjbWlycm9yLWNvdW50ZXItZGlzcGxheScpO1xufSk7XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGh0bWwgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgdGVzdENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5pdCgnb25lUmVuZGVyJywgKCkgPT4ge1xuICAgIGV4cGVjdChodG1sKCcjb25lUmVuZGVyX3RhZ190c19yZW5kZXJfY291bnQnKSkudG9CZSgnMScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn5GNLWNvdW50ZXItYnV0dG9uJywgJyPwn5GNLWNvdW50ZXItZGlzcGxheScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn5GN8J+UqC1jb3VudGVyLWJ1dHRvbicsICcj8J+RjfCflKgtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfkY3wn5SoLWNvdW50ZXItYnV0dG9uJywgJyPwn5GN8J+UqC1jb3VudGVyLXN1YmplY3QtZGlzcGxheScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPwn5GN8J+UqC1jb3VudGVyLWJ1dHRvbicsICcj8J+ToS1zaWduYWwtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgZXhwZWN0KGh0bWwoJyNvbmVSZW5kZXJfdGFnX3RzX3JlbmRlcl9jb3VudCcpKS50b0JlKCcxJyk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGJ5SWQsIGh0bWwsIGh0bWxCeUlkLCBxdWVyeSB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBleHBlY3RIVE1MLCBleHBlY3RNYXRjaGVkSHRtbCwgdGVzdENvdW50ZXJFbGVtZW50cywgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/Cfp7MgcHJvcHMnLCAoKSA9PiB7XG4gICAgaXQoJ2pzb24nLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BzVGV4dGFyZWEgPSBieUlkKCdwcm9wcy1kZWJ1Zy10ZXh0YXJlYScpO1xuICAgICAgICBleHBlY3QocHJvcHNUZXh0YXJlYS52YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpKS50b0JlKGB7XCJ0ZXN0XCI6MzMsXCJ4XCI6XCJ5XCJ9YCk7XG4gICAgfSk7XG4gICAgaXQoJ3Rlc3QgZHVlbHMnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI3Byb3BzRGVidWct8J+lqS0wLWJ1dHRvbicsICcjcHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheSddLCBbJyNwcm9wc0RlYnVnLfCfpaktMS1idXR0b24nLCAnI3Byb3BzRGVidWct8J+lqS0xLWRpc3BsYXknXSk7XG4gICAgfSk7XG4gICAgaXQoJ2NoaWxkIHByb3AgY29tbXVuaWNhdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI3Byb3BzRGVidWct8J+lqS0xLWJ1dHRvbicsICcjcHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheSddLCBbJyNwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktYnV0dG9uJywgJyNwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktZGlzcGxheSddKTtcbiAgICB9KTtcbiAgICBpdCgnYmFzaWNzJywgKCkgPT4ge1xuICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSB3YXRjaCBjb3VudGVkIGEgY2hhbmdlIGhhcHBlbnMgdG8gbWF0Y2ggdGhhdCBpbmNyZWFzZSBjb3VudGVyXG4gICAgICAgIGNvbnN0IGZ1blVwZGF0ZVZhbHVlID0gaHRtbCgnI3Byb3BzT25lTGV2ZWxGdW5VcGRhdGUt8J+lqS1kaXNwbGF5Jyk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSBodG1sKCcjcHJvcHNEZWJ1Zy3wn6WpLWNoYW5nZS1jb3VudC1kaXNwbGF5Jyk7XG4gICAgICAgIC8vIHRlc3QgdGhhdCB3YXRjaCBydW5zIG9uSW5pdFxuICAgICAgICBleHBlY3QoY2hhbmdlZCkudG9CZSgoTnVtYmVyKGZ1blVwZGF0ZVZhbHVlKSArIDEpLnRvU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCBvd25lckhUTUwgPSBieUlkKCdwcm9wc0RlYnVnLfCfpaktMC1kaXNwbGF5JykuaW5uZXJIVE1MO1xuICAgICAgICBjb25zdCBwYXJlbnRIVE1MID0gYnlJZCgncHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheScpLmlubmVySFRNTDtcbiAgICAgICAgY29uc3QgY2hpbGRIVE1MID0gYnlJZCgncHJvcHNPbmVMZXZlbEZ1blVwZGF0ZS3wn6WpLWRpc3BsYXknKS5pbm5lckhUTUw7XG4gICAgICAgIGNvbnN0IG93bmVyTnVtID0gTnVtYmVyKG93bmVySFRNTCk7XG4gICAgICAgIGNvbnN0IHBhcmVudE51bSA9IE51bWJlcihwYXJlbnRIVE1MKTtcbiAgICAgICAgY29uc3QgY2hpbGROdW0gPSBOdW1iZXIoY2hpbGRIVE1MKTtcbiAgICAgICAgZXhwZWN0KHBhcmVudE51bSkudG9CZShjaGlsZE51bSk7XG4gICAgICAgIGV4cGVjdChvd25lck51bSArIDIpLnRvQmUocGFyZW50TnVtKTsgLy8gdGVzdGluZyBvZiBzZXRQcm9wKCkgZG9lc24ndCBjaGFuZ2Ugb3duZXJcbiAgICB9KTtcbiAgICBpdCgnbGV0UHJvcCcsICgpID0+IHtcbiAgICAgICAgLy8gbG9jYWwgYW5kIG91dHNpZGUgY3VycmVudGx5IG1hdGNoXG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjcHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheScsICcjcHJvcHNEZWJ1Zy3wn6WpLWxldC1wcm9wLWRpc3BsYXknKTtcbiAgICAgICAgY29uc3QgcHJvcENvdW50ZXIgPSBOdW1iZXIoaHRtbCgnI3Byb3BzRGVidWct8J+lqS0wLWRpc3BsYXknKSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHF1ZXJ5KCcjcHJvcHNEZWJ1Zy3wn6WpLTItYnV0dG9uJylbMF0uX2NsaWNrKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ25vLWRhdGEtZXZlcicpO1xuICAgICAgICAvLyBvdXRlciBzaG91bGQgbm90IGhhdmUgY2hhbmdlZFxuICAgICAgICBleHBlY3QoaHRtbCgnI3Byb3BzRGVidWct8J+lqS0wLWRpc3BsYXknKSkudG9CZShwcm9wQ291bnRlci50b1N0cmluZygpKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyNwcm9wc0RlYnVnLfCfpaktbGV0LXByb3AtZGlzcGxheScpKS50b0JlKChwcm9wQ291bnRlciArIDEpLnRvU3RyaW5nKCkpO1xuICAgICAgICAvLyBlbmQgb2YgdGVzdCBwdXQgYWxsIGluIHN5bmNcbiAgICAgICAgYnlJZCgncHJvcHNEZWJ1Zy3wn6WpLTEtYnV0dG9uJykuY2xpY2soKTtcbiAgICB9KTtcbiAgICBpdCgncHJvcHMgYXMgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzeW5jQ291bnRlciA9IE51bWJlcihodG1sQnlJZCgnc3luYy1wcm9wLW51bWJlci1kaXNwbGF5JykpO1xuICAgICAgICAvLyBjb25zdCBzeW5jQ291bnRlciA9IE51bWJlciggaHRtbEJ5SWQoJ3N5bmMtcHJvcC1jaGlsZC1kaXNwbGF5JykgKVxuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI3N5bmMtcHJvcC1udW1iZXItZGlzcGxheScsICcjc3luYy1wcm9wLWNoaWxkLWRpc3BsYXknKTtcbiAgICAgICAgYnlJZCgnc3luYy1wcm9wLWNoaWxkLWJ1dHRvbicpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdEhUTUwoJyNzeW5jLXByb3AtbnVtYmVyLWRpc3BsYXknLCAoc3luY0NvdW50ZXIgKyAyKS50b1N0cmluZygpKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI25vdGhpbmctcHJvcC1jb3VudGVyLWJ1dHRvbicsICcjbm90aGluZy1wcm9wLWNvdW50ZXItZGlzcGxheScpO1xuICAgICAgICBleHBlY3RIVE1MKCcjc3luYy1wcm9wLW51bWJlci1kaXNwbGF5JywgKHN5bmNDb3VudGVyICsgMikudG9TdHJpbmcoKSk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjc3luYy1wcm9wLWNvdW50ZXItZGlzcGxheScsICcjbm90aGluZy1wcm9wLWNvdW50ZXItZGlzcGxheScpO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgY2hhbmdlRWxtIH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IHRlc3REdWVsQ291bnRlckVsZW1lbnRzIH0gZnJvbSAnLi90ZXN0aW5nJztcbmRlc2NyaWJlKCfwn6u0IHByb3ZpZGVycycsICgpID0+IHtcbiAgICBpdCgnYmFzaWNzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNpbmNyZWFzZS1wcm92aWRlci3wn42MLTAtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci3wn42MLTAtZGlzcGxheSddLCBbJyNpbmNyZWFzZS1wcm92aWRlci3wn42MLTEtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci3wn42MLTEtZGlzcGxheSddKTtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0wLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0wLWRpc3BsYXknXSwgWycjaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0xLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0xLWRpc3BsYXknXSk7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMC1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMC1kaXNwbGF5J10sIFsnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1kaXNwbGF5J10pO1xuICAgIH0pO1xuICAgIGl0KCdpbm5lciBvdXRlciBkZWJ1ZycsICgpID0+IHtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjaW5jcmVhc2UtcHJvcC3wn5C3LTAtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm9wLfCfkLctMC1kaXNwbGF5J10sIFsnI2luY3JlYXNlLXByb3At8J+Qty0xLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvcC3wn5C3LTEtZGlzcGxheSddKTtcbiAgICAgICAgLy8gY2hhbmdlIGEgY291bnRlciBpbiB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0wLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0wLWRpc3BsYXknXSwgWycjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0xLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0xLWRpc3BsYXknXSk7XG4gICAgICAgIC8vIG5vdyBlbnN1cmUgdGhhdCB0aGlzIGlubmVyIHRhZyBzdGlsbCBvcGVyYXRlcyBjb3JyZWN0bHkgZXZlbiB0aG91Z2ggcGFyZW50IGp1c3QgcmVuZGVyZWQgYnV0IGkgZGlkIG5vdCBmcm9tIHRoYXQgY2hhbmdlXG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2luY3JlYXNlLXByb3At8J+Qty0wLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvcC3wn5C3LTAtZGlzcGxheSddLCBbJyNpbmNyZWFzZS1wcm9wLfCfkLctMS1idXR0b24nLCAnI2luY3JlYXNlLXByb3At8J+Qty0xLWRpc3BsYXknXSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ2hvc3QgYXR0cmlidXRlcycsICgpID0+IHtcbiAgICAgICAgaXQoJ3BhcmVudCBoYXMgcmVkIGJvcmRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtcGFyZW50Jyk7XG4gICAgICAgICAgICBleHBlY3QocGFyZW50RWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZCBpbiBSR0IgZm9ybWF0IChicm93c2VycyB0eXBpY2FsbHkgcmV0dXJuIHJnYi9yZ2JhKVxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc1JlZCA9IHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDI1NSwgMCwgMCknKSB8fFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3JlZCcpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChoYXNSZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHN0eWxlcy5ib3JkZXJXaWR0aCkudG9CZSgnMnB4Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHN0eWxlcy5ib3JkZXJTdHlsZSkudG9CZSgnc29saWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjaGlsZCBoYXMgZ3JlZW4gYm9yZGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luLWN5Y2xlLWNoaWxkJyk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNoaWxkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGdyZWVuIGluIFJHQiBmb3JtYXRcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNHcmVlbiA9IHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDAsIDEyOCwgMCknKSB8fFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ2dyZWVuJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGhhc0dyZWVuKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzdHlsZXMuYm9yZGVyV2lkdGgpLnRvQmUoJzJweCcpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzdHlsZXMuYm9yZGVyU3R5bGUpLnRvQmUoJ3NvbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY2hpbGQgaGFzIGNvcnJlY3QgaW5uZXJIVE1MJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luLWN5Y2xlLWNoaWxkJyk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGV4cGVjdChjaGlsZEVsZW1lbnQuaW5uZXJIVE1MLnRyaW0oKSkudG9CZSgnd29uZGVyZnVsIC0gcGFyZW50KHJlZCknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdwYXJlbnQgY29udGFpbnMgY2hpbGQgZWxlbWVudCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtcGFyZW50Jyk7XG4gICAgICAgICAgICBjb25zdCBjaGlsZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtY2hpbGQnKTtcbiAgICAgICAgICAgIGV4cGVjdChwYXJlbnRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRFbGVtZW50ICYmIGNoaWxkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGV4cGVjdChwYXJlbnRFbGVtZW50LmNvbnRhaW5zKGNoaWxkRWxlbWVudCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgncGFyZW50IGNvbG9yIGNoYW5nZXMgd2hlbiBzZWxlY3QgaXMgY2hhbmdlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudENvbG9yU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhcmVudC1jb2xvci1zZWxlY3QnKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtcGFyZW50Jyk7XG4gICAgICAgICAgICBleHBlY3QocGFyZW50Q29sb3JTZWxlY3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QocGFyZW50RWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRDb2xvclNlbGVjdCAmJiBwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHRvIGJsdWVcbiAgICAgICAgICAgICAgICBwYXJlbnRDb2xvclNlbGVjdC52YWx1ZSA9ICdibHVlJztcbiAgICAgICAgICAgICAgICBwYXJlbnRDb2xvclNlbGVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VFbG0ocGFyZW50Q29sb3JTZWxlY3QpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0JsdWUgPSBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ2JsdWUnKSB8fFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3JnYigwLCAwLCAyNTUpJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGhhc0JsdWUpLnRvQmUodHJ1ZSwgYGluLWN5Y2xlLXBhcmVudCBzaG91bGQgYmUgYmx1ZSBub3QgJHtzdHlsZXMuYm9yZGVyQ29sb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY2hpbGQgY29sb3IgY2hhbmdlcyB3aGVuIHNlbGVjdCBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRDb2xvclNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGlsZC1jb2xvci1zZWxlY3QnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1jaGlsZCcpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkQ29sb3JTZWxlY3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkQ29sb3JTZWxlY3QgJiYgY2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHRvIHB1cnBsZVxuICAgICAgICAgICAgICAgIGNoaWxkQ29sb3JTZWxlY3QudmFsdWUgPSAncHVycGxlJztcbiAgICAgICAgICAgICAgICBjaGlsZENvbG9yU2VsZWN0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNoaWxkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzUHVycGxlID0gc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdwdXJwbGUnKSB8fFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3JnYigxMjgsIDAsIDEyOCknKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoaGFzUHVycGxlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NoaWxkMiBoYXMgY29ycmVjdCBpbm5lckhUTUwgYW5kIGdyZWVuIGJvcmRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkMkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtY2hpbGQtMicpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkMkVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAoY2hpbGQyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGV4cGVjdChjaGlsZDJFbGVtZW50LnRleHRDb250ZW50LnRyaW0oKS5yZXBsYWNlKC9cXG4oXFxzKykvZywgJyAnKSkudG9CZSgnd29uZGVyZnVsIHRvbyBwYXJ0IDInKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjaGlsZDJFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNHcmVlbiA9IHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDAsIDEyOCwgMCknKSB8fFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ2dyZWVuJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGhhc0dyZWVuKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzdHlsZXMuYm9yZGVyV2lkdGgpLnRvQmUoJzJweCcpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChzdHlsZXMuYm9yZGVyU3R5bGUpLnRvQmUoJ3NvbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY2hpbGQyIGNvbG9yIGNoYW5nZXMgd2hlbiBzZWxlY3QgaXMgY2hhbmdlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkMkNvbG9yU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoaWxkLWNvbG9yLXNlbGVjdC0yJyk7XG4gICAgICAgICAgICBjb25zdCBjaGlsZDJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luLWN5Y2xlLWNoaWxkLTInKTtcbiAgICAgICAgICAgIGV4cGVjdChjaGlsZDJDb2xvclNlbGVjdCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjaGlsZDJFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkMkNvbG9yU2VsZWN0ICYmIGNoaWxkMkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgdG8gb3JhbmdlXG4gICAgICAgICAgICAgICAgY2hpbGQyQ29sb3JTZWxlY3QudmFsdWUgPSAnb3JhbmdlJztcbiAgICAgICAgICAgICAgICBjaGlsZDJDb2xvclNlbGVjdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjaGlsZDJFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNPcmFuZ2UgPSBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ29yYW5nZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDI1NSwgMTY1LCAwKScpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChoYXNPcmFuZ2UpLnRvQmUodHJ1ZSwgYGluLWN5Y2xlLWNoaWxkLTIgc2hvdWxkIGJlIG9yYW5nZSBub3QgJHtzdHlsZXMuYm9yZGVyQ29sb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGNsaWNrLCB0ZXh0Q29udGVudCB9IGZyb20gJy4vdGVzdGluZyc7XG4vKlxuaXQoJ25vIHRlbXBsYXRlIHRhZ3MnLCAoKSA9PiB7XG4gIGNvbnN0IHRlbXBsYXRlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZW1wbGF0ZScpXG4gIGV4cGVjdCh0ZW1wbGF0ZVRhZ3MubGVuZ3RoKS50b0JlKDApIC8vIEV4cGVjdGVkIG5vIHRlbXBsYXRlcyB0byBiZSBvbiBkb2N1bWVudFxufSlcbiovXG5pdCgnYmFzaWMgYXBwIHN1YmplY3QnLCAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudCA9IHRleHRDb250ZW50KCcjYXBwLWNvdW50ZXItc3ViamVjdC12YWx1ZS1kaXNwbGF5Jyk7XG4gICAgY2xpY2soJyNhcHAtY291bnRlci1zdWJqZWN0LWJ1dHRvbicpO1xuICAgIGNvbnN0IGFmdGVyQ2xpY2sgPSB0ZXh0Q29udGVudCgnI2FwcC1jb3VudGVyLXN1YmplY3QtdmFsdWUtZGlzcGxheScpO1xuICAgIGV4cGVjdChOdW1iZXIoY3VycmVudCkpLnRvQmUoTnVtYmVyKGFmdGVyQ2xpY2spIC0gMSk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IGJ5SWQsIGh0bWwsIGh0bWxCeUlkLCBleHBlY3RNYXRjaGVkSHRtbCwgY2xpY2tCeUlkIH0gZnJvbSAnLi90ZXN0aW5nJztcbmRlc2NyaWJlKCfwn5OwIHN1YnNjcmlwdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ2Jhc2ljJywgKCkgPT4ge1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI2NvbnRlbnQtc3ViamVjdC1waXBlLWRpc3BsYXkwJywgJyNjb250ZW50LXN1YmplY3QtcGlwZS1kaXNwbGF5MScpO1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlLWRpc3BsYXkwJywgJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZS1kaXNwbGF5MScpO1xuICAgIH0pO1xuICAgIGl0KCdodG1sJywgKCkgPT4ge1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlSHRtbC1kaXNwbGF5MCcsICcjY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGVIdG1sLWRpc3BsYXkxJyk7XG4gICAgfSk7XG4gICAgaXQoJ3N1YnNjcmliZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdjb250ZW50LXN1YnNjcmliZS1zdWIwJykpLnRvQmUoJycpO1xuICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ2NvbnRlbnQtc3Vic2NyaWJlLXN1YjAtd2l0aCcpKS50b0JlKCctMScpO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdwYXNzZWQgaW4gc3Vic2NyaXB0aW9uJywgKCkgPT4ge1xuICAgICAgICBpdCgnaW5jcmVhc2Ugc3Vic2NyaXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5jcmVhc2UgPSBieUlkKCdwYXNzZWQtaW4tc3ViLWluY3JlYXNlJyk7XG4gICAgICAgICAgICBjb25zdCBoaWRlU2hvdyA9IGJ5SWQoJ3Bhc3NlZC1pbi1zdWItaGlkZS1zaG93Jyk7XG4gICAgICAgICAgICBjb25zdCBoaWRlU2hvd1ZhbHVlID0gYnlJZCgncGFzc2VkLWluLXN1Yi1oaWRlU2hvdy12YWx1ZScpO1xuICAgICAgICAgICAgZXhwZWN0KGhpZGVTaG93VmFsdWUudGV4dENvbnRlbnQpLnRvQmUoJycpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKCcwfHx8fDAnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKSkudG9CZSgnMXx8fHwxJywgJ2ZhaWxlZCBiZWZvcmUgaW5jcmVhc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDInKSkudG9CZSgnMnx8fHwyJyk7XG4gICAgICAgICAgICBpbmNyZWFzZS5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKGAwfHx8fDBgKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKSkudG9CZSgnMXx8fHwxJywgJ2ZhaWxlZCBmaXJzdCBpbmNyZWFzZScpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MicpKS50b0JlKCcyfHx8fDInKTtcbiAgICAgICAgICAgIGhpZGVTaG93LmNsaWNrKCk7IC8vIGhpZGVcbiAgICAgICAgICAgIGxldCBzdWJWYWx1ZSA9IGh0bWxCeUlkKCdwYXNzZWQtaW4tb3V0cHV0Jyk7XG4gICAgICAgICAgICBleHBlY3QoaGlkZVNob3dWYWx1ZS50ZXh0Q29udGVudCkudG9CZSgndHJ1ZScpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKGAwfHx8fDBgKTtcbiAgICAgICAgICAgIGNvbnN0IHplcm9zID0gJzB8fHx8MCc7XG4gICAgICAgICAgICBjb25zdCBvbmVzID0gJzF8fHx8MSc7XG4gICAgICAgICAgICBjb25zdCBfZXgxSHRtbCA9IGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MScpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRFeDFIdG1sID0gYDF8fHlvdXIgZnVuIG51bWJlciAke3N1YlZhbHVlfXx8MWA7XG4gICAgICAgICAgICBleHBlY3QoX2V4MUh0bWwpLnRvQmUoZXhwZWN0ZWRFeDFIdG1sLCBgZmFpbGVkIGFmdGVyIGhpZGUgZXhwZWN0ZWQgI3Bhc3NlZC1pbi1zdWItZXgxIHRvIGJlICR7ZXhwZWN0ZWRFeDFIdG1sfSBidXQgaXRzICR7X2V4MUh0bWx9YCk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgyJykpLnRvQmUoYDJ8fHlvdXIgdGFnIG51bWJlciAke3N1YlZhbHVlfXx8MmApO1xuICAgICAgICAgICAgaW5jcmVhc2UuY2xpY2soKTsgLy8gc2hvd1xuICAgICAgICAgICAgc3ViVmFsdWUgPSBodG1sQnlJZCgncGFzc2VkLWluLW91dHB1dCcpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MCcpKS50b0JlKGAwfHwke3N1YlZhbHVlfXx8MGApO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MScpKS50b0JlKGAxfHx5b3VyIGZ1biBudW1iZXIgJHtzdWJWYWx1ZX18fDFgLCAnZmFpbGVkIHRoaXJkIGluY3JlYXNlJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgyJykpLnRvQmUoYDJ8fHlvdXIgdGFnIG51bWJlciAke3N1YlZhbHVlfXx8MmApO1xuICAgICAgICAgICAgaGlkZVNob3cuY2xpY2soKTtcbiAgICAgICAgICAgIGNvbnN0IGV4MEh0bWwgPSBodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDAnKTtcbiAgICAgICAgICAgIGV4cGVjdChleDBIdG1sKS50b0JlKHplcm9zLCBgTGVzdCBjbGljayBjaGVjayBleHBlY3RlZCAjcGFzc2VkLWluLXN1Yi1leDAgdG8gYmUgJHt6ZXJvc30gYnV0IGl0IGlzICR7ZXgwSHRtbH1gKTtcbiAgICAgICAgICAgIGNvbnN0IGV4MUh0bWwgPSBodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKTtcbiAgICAgICAgICAgIGV4cGVjdChleDFIdG1sKS50b0JlKG9uZXMsIGBGYWlsZWQgY2xvc2luZyBleHBlY3RlZCAjcGFzc2VkLWluLXN1Yi1leDEgJHtleDFIdG1sfSB0byBiZSAke29uZXN9IGJ1dCBpdCBpcyAke2V4MUh0bWx9YCk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgyJykpLnRvQmUoJzJ8fHx8MicpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnaG9zdCcsICgpID0+IHtcbiAgICAgICAgbGV0IGhvc3REZXN0cm95Q291bnQgPSBOdW1iZXIoaHRtbEJ5SWQoJ2hvc3REZXN0cm95Q291bnQnKSk7XG4gICAgICAgIC8vIHNob3VsZCBiZSBhIG51bWJlclxuICAgICAgICBleHBlY3QoaXNOYU4oTnVtYmVyKGh0bWxCeUlkKCdob3N0ZWRDb250ZW50JykpKSkudG9CZShmYWxzZSwgJ2hvc3RlZENvbnRlbnQgaHRtbCBub3QgYXMgZXhwZWN0ZWQnKTtcbiAgICAgICAgY2xpY2tCeUlkKCdob3N0SGlkZVNob3cnKTtcbiAgICAgICAgZXhwZWN0KE51bWJlcihodG1sQnlJZCgnaG9zdERlc3Ryb3lDb3VudCcpKSkudG9CZShob3N0RGVzdHJveUNvdW50ICsgMSwgJ2hvc3QgZGVzdHJveSBtaXNtYXRjaCcpO1xuICAgICAgICAvLyBzaG91bGQgTk9UIGJlIGEgbnVtYmVyXG4gICAgICAgIGV4cGVjdChodG1sQnlJZCgnaG9zdGVkQ29udGVudCcpKS50b0JlKCcnKTtcbiAgICAgICAgY2xpY2tCeUlkKCdob3N0SGlkZVNob3cnKTtcbiAgICAgICAgLy8gc2hvdWxkIGJlIGEgbnVtYmVyXG4gICAgICAgIGV4cGVjdChpc05hTihOdW1iZXIoaHRtbEJ5SWQoJ2hvc3RlZENvbnRlbnQnKSkpKS50b0JlKGZhbHNlLCAnaG9zdGVkQ29udGVudCBjaGVjayAyIG5vdCByaWdodCcpO1xuICAgICAgICAvLyBzdGlsbCBzYW1lIG51bWJlclxuICAgICAgICBleHBlY3QoTnVtYmVyKGh0bWxCeUlkKCdob3N0RGVzdHJveUNvdW50JykpKS50b0JlKGhvc3REZXN0cm95Q291bnQgKyAxLCAnaG9zdCBkZXN0cm95IG1pc21hdGNoIDInKTtcbiAgICB9KTtcbiAgICBpdCgnYmFzaWMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjY29udGVudC1zdWJqZWN0LXBpcGUtZGlzcGxheTAnLCAnI2NvbnRlbnQtc3ViamVjdC1waXBlLWRpc3BsYXkxJyk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGUtZGlzcGxheTAnLCAnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlLWRpc3BsYXkxJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcjY29udGVudC1kb20tcGFyc2UtMC0wJykpLnRvQmUoaHRtbCgnI2NvbnRlbnQtZG9tLXBhcnNlLTAtMScpKTtcbiAgICB9KTtcbiAgICBpdCgnaHRtbCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZUh0bWwtZGlzcGxheTAnLCAnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlSHRtbC1kaXNwbGF5MScpO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBlbG1Db3VudCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBleHBlY3RFbG1Db3VudCB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn8J+UgCB0YWdTd2l0Y2hpbmcnLCAoKSA9PiB7XG4gICAgaXQoJzAnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3NlbGVjdC10YWctYWJvdmUnKSkudG9CZSgxKTsgLy8gRXhwZWN0ZWQgc2VsZWN0LXRhZy1hYm92ZSBlbGVtZW50IHRvIGJlIGRlZmluZWRcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnLXN3aXRjaC1kcm9wZG93bicpKS50b0JlKDEpOyAvLyBFeHBlY3RlZCBvbmUgI3RhZy1zd2l0Y2gtZHJvcGRvd25cbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTEtaGVsbG8nKSkudG9CZSgyKTsgLy8gRXhwZWN0ZWQgdHdvICN0YWdTd2l0Y2gtMS1oZWxsbyBlbGVtZW50c1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyN0YWdTd2l0Y2gtMi1oZWxsbycpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyN0YWdTd2l0Y2gtMy1oZWxsbycpKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCcxJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkcm9wZG93biA9IGJ5SWQoJ3RhZy1zd2l0Y2gtZHJvcGRvd24nKTtcbiAgICAgICAgZHJvcGRvd24udmFsdWUgPSBcIjFcIjtcbiAgICAgICAgZHJvcGRvd24ub25jaGFuZ2UoeyB0YXJnZXQ6IGRyb3Bkb3duIH0pO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyN0YWdTd2l0Y2gtMi1oZWxsbycpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyN0YWdTd2l0Y2gtMy1oZWxsbycpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzZWxlY3QtdGFnLWFib3ZlJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnU3dpdGNoLTEtaGVsbG8nLCA1KTtcbiAgICB9KTtcbiAgICBpdCgnMicsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gXCIyXCI7XG4gICAgICAgIGRyb3Bkb3duLm9uY2hhbmdlKHsgdGFyZ2V0OiBkcm9wZG93biB9KTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWdTd2l0Y2gtMS1oZWxsbycsIDIpO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0yLWhlbGxvJywgNCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0zLWhlbGxvJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3NlbGVjdC10YWctYWJvdmUnKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnMycsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gJzMnO1xuICAgICAgICBkcm9wZG93bi5vbmNoYW5nZSh7IHRhcmdldDogZHJvcGRvd24gfSk7XG4gICAgICAgIGV4cGVjdChieUlkKCdzZWxlY3RUYWctZGlzcGxheScpLnRleHRDb250ZW50KS50b0JlKCczJyk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJykpLnRvQmUoMCk7IC8vIEV4cGVjdGVkIG5vIGhlbGxvIDFzXG4gICAgICAgIGNvbnN0IHR3b0NvdW50ID0gZWxtQ291bnQoJyN0YWdTd2l0Y2gtMi1oZWxsbycpO1xuICAgICAgICBleHBlY3QodHdvQ291bnQpLnRvQmUoMCwgYEV4cGVjdGVkIG5vICN0YWdTd2l0Y2gtMi1oZWxsbyBidXQgZ290ICR7dHdvQ291bnR9YCk7IC8vIEV4cGVjdGVkIG5vICN0YWdTd2l0Y2gtMi1oZWxsbyBlbGVtZW50c1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0zLWhlbGxvJywgNyk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3NlbGVjdC10YWctYWJvdmUnKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnNCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gXCJcIjtcbiAgICAgICAgZHJvcGRvd24ub25jaGFuZ2UoeyB0YXJnZXQ6IGRyb3Bkb3duIH0pO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3NlbGVjdC10YWctYWJvdmUnLCAxKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWctc3dpdGNoLWRyb3Bkb3duJywgMSk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnU3dpdGNoLTEtaGVsbG8nLCAyKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWdTd2l0Y2gtMi1oZWxsbycsIDApO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0zLWhlbGxvJywgMCk7XG4gICAgfSk7XG59KTtcbiIsIi8vIEJyb3dzZXItY29tcGF0aWJsZSBleHBlY3QgaW1wbGVtZW50YXRpb25cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHBlY3QoYWN0dWFsKSB7XG4gICAgLy8gQ2FwdHVyZSB0aGUgc3RhY2sgdHJhY2UgYXQgdGhlIHBvaW50IG9mIGV4cGVjdCgpIGNhbGxcbiAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrIHx8ICcnO1xuICAgIGNvbnN0IGNhbGxlckxpbmUgPSBzdGFjay5zcGxpdCgnXFxuJylbM10gfHwgJyc7IC8vIEdldCB0aGUgbGluZSB0aGF0IGNhbGxlZCBleHBlY3QoKVxuICAgIHJldHVybiB7XG4gICAgICAgIHRvQmUoZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gdHlwZW9mIG1lc3NhZ2UgPT09ICdmdW5jdGlvbicgPyBtZXNzYWdlKCkgOiBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxNZXNzYWdlID0gZXJyb3JNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgID8gZXJyb3JNZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIDogYEV4cGVjdGVkICR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWQpfSBidXQgZ290ICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsKX1gO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGZ1bGxNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBlcnJvci5zdGFjayA9IGZ1bGxNZXNzYWdlICsgJ1xcbicgKyBjYWxsZXJMaW5lICsgKGVycm9yLnN0YWNrID8gJ1xcbicgKyBlcnJvci5zdGFjayA6ICcnKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9CZURlZmluZWQoKSB7XG4gICAgICAgICAgICBpZiAoYWN0dWFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHZhbHVlIHRvIGJlIGRlZmluZWQgYnV0IGdvdCB1bmRlZmluZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9CZVVuZGVmaW5lZCgpIHtcbiAgICAgICAgICAgIGlmIChhY3R1YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsdWUgdG8gYmUgdW5kZWZpbmVkIGJ1dCBnb3QgJHtKU09OLnN0cmluZ2lmeShhY3R1YWwpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0dWFsICE9PSAnbnVtYmVyJyB8fCAhKGFjdHVhbCA+IGV4cGVjdGVkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJHthY3R1YWx9IHRvIGJlIGdyZWF0ZXIgdGhhbiAke2V4cGVjdGVkfVxcblxcbiR7bWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9IYXZlTGVuZ3RoKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICBjb25zdCBhY3R1YWxXaXRoTGVuZ3RoID0gYWN0dWFsO1xuICAgICAgICAgICAgaWYgKCEoJ2xlbmd0aCcgaW4gYWN0dWFsV2l0aExlbmd0aCkgfHwgYWN0dWFsV2l0aExlbmd0aC5sZW5ndGggIT09IGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBsZW5ndGggJHtleHBlY3RlZH0gYnV0IGdvdCAke2FjdHVhbFdpdGhMZW5ndGgubGVuZ3RoIHx8ICd1bmRlZmluZWQnfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBub3Q6IHtcbiAgICAgICAgICAgIHRvQmUoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsKX0gbm90IHRvIGJlICR7SlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWQpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4iLCIvLyBXcmFwcGVyIHRvIHByb3ZpZGUgdW5pZmllZCBleHBlY3QgaW50ZXJmYWNlIGZvciBib3RoIFZpdGVzdCBhbmQgYnJvd3NlciBlbnZpcm9ubWVudHNcbmltcG9ydCB7IGNyZWF0ZUV4cGVjdCB9IGZyb20gJy4vZXhwZWN0Jztcbi8vIENoZWNrIGlmIHdlJ3JlIGluIFZpdGVzdCBlbnZpcm9ubWVudFxuY29uc3QgaXNWaXRlc3QgPSB0eXBlb2YgZ2xvYmFsVGhpcy52aXRlc3QgIT09ICd1bmRlZmluZWQnO1xuY29uc3Qgdml0ZXN0RXhwZWN0ID0gaXNWaXRlc3QgPyBnbG9iYWxUaGlzLmV4cGVjdCA6IG51bGw7XG4vLyBDcmVhdGUgYSB1bmlmaWVkIGV4cGVjdCBmdW5jdGlvbiB0aGF0IHN1cHBvcnRzIGJvdGggc3ludGF4ZXNcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmlmaWVkRXhwZWN0KCkge1xuICAgIGlmIChpc1ZpdGVzdCAmJiB2aXRlc3RFeHBlY3QpIHtcbiAgICAgICAgLy8gSW4gVml0ZXN0LCBjcmVhdGUgYSB3cmFwcGVyIHRoYXQgc3VwcG9ydHMgY3VzdG9tIG1lc3NhZ2VzXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBleHBlY3QoYWN0dWFsLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGFuIG9iamVjdCB0aGF0IGNhcHR1cmVzIHRoZSBtZXNzYWdlIGFuZCBwcm92aWRlcyBtYXRjaGVyc1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXJzID0gdml0ZXN0RXhwZWN0KGFjdHVhbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdG9CZShleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRlc3QgZmFpbHMsIHRocm93IGVycm9yIHdpdGggY3VzdG9tIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQmVEZWZpbmVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlVW5kZWZpbmVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0hhdmVMZW5ndGgoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9IYXZlTGVuZ3RoKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbm90OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0JlKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMubm90LnRvQmUoZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlYXRlclRoYW46IChleHBlY3RlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGFuZGFyZCBWaXRlc3QgZXhwZWN0IHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVycyA9IHZpdGVzdEV4cGVjdChhY3R1YWwpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5tYXRjaGVycyxcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0IGNoYWktc3R5bGUgc3ludGF4XG4gICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgYmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0ZXJUaGFuOiAoZXhwZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdml0ZXN0RXhwZWN0KGFjdHVhbCkudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBjdXN0b20gbWVzc2FnZSBpbiB0b0JlXG4gICAgICAgICAgICAgICAgdG9CZTogKGV4cGVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVycy50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSW4gYnJvd3NlciwgdXNlIG91ciBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBleHRlbmRlZCBzeW50YXhcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGV4cGVjdChhY3R1YWwsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gYW4gb2JqZWN0IHRoYXQgY2FwdHVyZXMgdGhlIG1lc3NhZ2UgYW5kIHByb3ZpZGVzIGFsbCBtYXRjaGVyc1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXJzID0gY3JlYXRlRXhwZWN0KGFjdHVhbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdG9CZShleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZShleHBlY3RlZCwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQmVEZWZpbmVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9CZVVuZGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgdG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkOiBudW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHRvSGF2ZUxlbmd0aChleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9IYXZlTGVuZ3RoKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbm90OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0JlKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMubm90LnRvQmUoZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVyVGhhbjogKGV4cGVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXJzID0gY3JlYXRlRXhwZWN0KGFjdHVhbCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLm1hdGNoZXJzLFxuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgY2hhaS1zdHlsZSBzeW50YXhcbiAgICAgICAgICAgICAgICB0bzoge1xuICAgICAgICAgICAgICAgICAgICBiZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JlYXRlclRoYW46IChleHBlY3RlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBleHBlY3QgPSBjcmVhdGVVbmlmaWVkRXhwZWN0KCk7XG4iLCJleHBvcnQgZnVuY3Rpb24gY291bnQoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikubGVuZ3RoO1xufVxuZXhwb3J0IGNvbnN0IGVsbUNvdW50ID0gY291bnQ7XG5leHBvcnQgZnVuY3Rpb24gcXVlcnkocXVlcnkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSk7IC8vIGFsbG93IC5zdHlsZSB0byBqdXN0IHdvcmtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb2N1cyhxKSB7XG4gICAgcmV0dXJuIHF1ZXJ5KHEpLmZvckVhY2goZWxtID0+IGVsbS5mb2N1cygpKTtcbn1cbi8qKiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKC4uLikuZm9yRWFjaChpID0+IGkuY2xpY2soKSkgKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGljayhxKSB7XG4gICAgY2xpY2tFYWNoKFsuLi5xdWVyeShxKV0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrRWFjaChpdGVtcykge1xuICAgIGl0ZW1zLmZvckVhY2goZWxtID0+IGVsbS5jbGljaygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGlja0J5SWQoaWQpIHtcbiAgICBjbGljaygnIycgKyBpZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xpY2tPbmUocSwgaW5kZXggPSAwKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHF1ZXJ5KHEpW2luZGV4XTtcbiAgICBlbGVtZW50LmNsaWNrKCk7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5ZG93bk9uKGlucHV0LCBrZXkpIHtcbiAgICBjb25zdCBrZXlFdmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXlkb3duJywge1xuICAgICAgICBrZXksXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsIC8vIEVuc3VyZSB0aGUgZXZlbnQgYnViYmxlc1xuICAgIH0pO1xuICAgIGlucHV0LmRpc3BhdGNoRXZlbnQoa2V5RXZlbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGtleXVwT24oaW5wdXQsIGtleSkge1xuICAgIGNvbnN0IGtleUV2ZW50ID0gbmV3IEtleWJvYXJkRXZlbnQoJ2tleXVwJywge1xuICAgICAgICBrZXksXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsIC8vIEVuc3VyZSB0aGUgZXZlbnQgYnViYmxlc1xuICAgIH0pO1xuICAgIGlucHV0LmRpc3BhdGNoRXZlbnQoa2V5RXZlbnQpO1xufVxuLyoqIGRpc3BhdGNoIHRoZSBjaGFuZ2UgZXZlbnQgb24gYW4gZWxlbWVudCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZWQocSkge1xuICAgIGNoYW5nZUVhY2goWy4uLnF1ZXJ5KHEpXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlRWFjaChpdGVtcykge1xuICAgIGl0ZW1zLmZvckVhY2goY2hhbmdlRWxtKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VPbmUocSwgaW5kZXggPSAwKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gcXVlcnkocSlbaW5kZXhdO1xuICAgIGNoYW5nZUVsbSh0YXJnZXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUVsbSh0YXJnZXQpIHtcbiAgICAvLyA7KHRhcmdldCBhcyBhbnkpLmNoYW5nZSh7IHRhcmdldCB9KVxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBodG1sKHEpIHtcbiAgICBsZXQgaHRtbCA9ICcnO1xuICAgIHF1ZXJ5KHEpLmZvckVhY2goZWxtID0+IGh0bWwgPSBodG1sICsgZWxtLmlubmVySFRNTCk7XG4gICAgcmV0dXJuIGh0bWw7XG59XG5leHBvcnQgZnVuY3Rpb24gdGV4dENvbnRlbnQocSkge1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgcXVlcnkocSkuZm9yRWFjaChlbG0gPT4gaHRtbCA9IGh0bWwgKyBlbG0udGV4dENvbnRlbnQpO1xuICAgIHJldHVybiBodG1sO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJ5SWQoaWQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xufVxuLyoqIFJldHVybnMgZW1wdHkgc3RyaW5nIGFsc28gd2hlbiBlbGVtZW50IG5vdCBmb3VuZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxCeUlkKGlkKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICByZXR1cm4gZWxlbWVudD8uaW5uZXJIVE1MIHx8ICcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxhc3RCeUlkKGlkKSB7XG4gICAgY29uc3QgZWxtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICsgaWQpO1xuICAgIHJldHVybiBlbG1zW2VsbXMubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gYmx1cihxKSB7XG4gICAgcmV0dXJuIHF1ZXJ5KHEpLmZvckVhY2goZWxtID0+IHRyaWdnZXJCbHVyRWxtKGVsbSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZShxKSB7XG4gICAgLy8gcmV0dXJuIHF1ZXJ5KHEpLmZvckVhY2goZWxtID0+IHRyaWdnZXJDaGFuZ2VFbG0oKGVsbSBhcyBIVE1MRWxlbWVudCkpKVxuICAgIHJldHVybiBxdWVyeShxKS5mb3JFYWNoKGVsbSA9PiBjaGFuZ2VFbG0oZWxtKSk7XG59XG5jb25zdCBibHVyRXZlbnQgPSBuZXcgRXZlbnQoJ2ZvY3Vzb3V0Jywge1xuICAgIGJ1YmJsZXM6IHRydWUsIC8vIEJsdXIgZXZlbnRzIHR5cGljYWxseSBkbyBub3QgYnViYmxlLCBidXQgdGhpcyBjYW4gYmUgc2V0IHRvIHRydWUgaWYgbmVlZGVkXG4gICAgY2FuY2VsYWJsZTogZmFsc2UgLy8gQmx1ciBldmVudHMgYXJlIG5vdCBjYW5jZWxhYmxlXG59KTtcbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyQmx1ckVsbShlbG0pIHtcbiAgICBlbG0uZGlzcGF0Y2hFdmVudChibHVyRXZlbnQpO1xufVxuY29uc3QgY2hhbmdlRXZlbnQgPSBuZXcgRXZlbnQoJ2NoYW5nZScsIHtcbiAgICBidWJibGVzOiB0cnVlLCAvLyBCbHVyIGV2ZW50cyB0eXBpY2FsbHkgZG8gbm90IGJ1YmJsZSwgYnV0IHRoaXMgY2FuIGJlIHNldCB0byB0cnVlIGlmIG5lZWRlZFxuICAgIGNhbmNlbGFibGU6IGZhbHNlIC8vIEJsdXIgZXZlbnRzIGFyZSBub3QgY2FuY2VsYWJsZVxufSk7XG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckNoYW5nZUVsbShlbG0pIHtcbiAgICBlbG0uZGlzcGF0Y2hFdmVudChjaGFuZ2VFdmVudCk7XG59XG4iLCJpbXBvcnQgeyBleHBlY3QgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IGh0bWwgfSBmcm9tIFwiLi9lbG1TZWxlY3RvcnNcIjtcbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3RFbG1Db3VudChxdWVyeSwgY291bnQsIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpO1xuICAgIGNvbnN0IGZvdW5kID0gZWxlbWVudHMubGVuZ3RoO1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8IGBFeHBlY3RlZCAke2NvdW50fSBlbGVtZW50cyB0byBtYXRjaCBxdWVyeSAke3F1ZXJ5fSBidXQgZm91bmQgJHtmb3VuZH1gO1xuICAgIGV4cGVjdChmb3VuZCkudG9CZShjb3VudCwgbWVzc2FnZSk7XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdE1hdGNoZWRIdG1sKC4uLnF1ZXJpZXMpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IHF1ZXJpZXMucmVkdWNlKChhbGwsIHF1ZXJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSk7XG4gICAgICAgIGFsbC5wdXNoKC4uLmVsZW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCBbXSk7XG4gICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGVsZW1lbnRzIHRvIGJlIHByZXNlbnQgaW4gZXhwZWN0TWF0Y2hlZEh0bWwoKSBxdWVyeSBidXQgZm91bmQgbm9uZWApO1xuICAgIH1cbiAgICBjb25zdCBsYXN0RWxtID0gZWxlbWVudHMucG9wKCk7XG4gICAgY29uc3QgbGFzdEh0bWwgPSBsYXN0RWxtLmlubmVySFRNTDtcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsbSA9PiBleHBlY3QoZWxtLmlubmVySFRNTCkudG9CZShsYXN0SHRtbCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdEhUTUwoc2VsZWN0b3IsIGV4cGVjdGVkSHRtbCkge1xuICAgIGV4cGVjdChodG1sKHNlbGVjdG9yKSkudG9CZShleHBlY3RlZEh0bWwpO1xufVxuZnVuY3Rpb24gdGVzdENvdW50ZXJTZWxlY3RlZEVsZW1lbnRzKGNvdW50ZXJCdXR0b25zLCBjb3VudGVyRGlzcGxheXMsIHsgZWxlbWVudENvdW50RXhwZWN0ZWQgfSA9IHtcbiAgICBlbGVtZW50Q291bnRFeHBlY3RlZDogMVxufSwgY291bnRlckJ1dHRvblNlbGVjdCwgY291bnRlckRpc3BsYXlTZWxlY3QsIHRlc3RRdWFudGlmaWVyID0gMCkge1xuICAgIGV4cGVjdChjb3VudGVyQnV0dG9ucy5sZW5ndGgpLnRvQmUoZWxlbWVudENvdW50RXhwZWN0ZWQsICgpID0+IGBFeHBlY3RlZCAke2NvdW50ZXJCdXR0b25TZWxlY3R9IHRvIGJlICR7ZWxlbWVudENvdW50RXhwZWN0ZWR9IGVsZW1lbnRzIGJ1dCBpcyBpbnN0ZWFkICR7Y291bnRlckJ1dHRvbnMubGVuZ3RofWApO1xuICAgIGV4cGVjdChjb3VudGVyRGlzcGxheXMubGVuZ3RoKS50b0JlKGVsZW1lbnRDb3VudEV4cGVjdGVkLCAoKSA9PiBgRXhwZWN0ZWQgJHtjb3VudGVyRGlzcGxheVNlbGVjdH0gdG8gYmUgJHtlbGVtZW50Q291bnRFeHBlY3RlZH0gZWxlbWVudHMgYnV0IGlzIGluc3RlYWQgJHtjb3VudGVyRGlzcGxheXMubGVuZ3RofWApO1xuICAgIGNvdW50ZXJCdXR0b25zLmZvckVhY2goKGluY3JlYXNlQ291bnRlciwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY291bnRlckRpc3BsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvdW50ZXJEaXNwbGF5U2VsZWN0KVtpbmRleF07IC8vIGNvdW50ZXJEaXNwbGF5c1tpbmRleF1cbiAgICAgICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuY29udGFpbnMoY291bnRlckRpc3BsYXkpKS50b0JlKHRydWUsIGBUaGUgc2VsZWN0ZWQgZWxlbWVudCAke2NvdW50ZXJEaXNwbGF5U2VsZWN0fSBpcyBubyBsb25nZXIgYW4gZWxlbWVudCBvbiB0aGUgZG9jdW1lbnQgYm9keSBCRUZPUkUgY2xpY2tpbmcgJHtjb3VudGVyQnV0dG9uU2VsZWN0fWApO1xuICAgICAgICBsZXQgY291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5Py5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QodHlwZW9mIGluY3JlYXNlQ291bnRlci5jbGljaykudG9CZSgnZnVuY3Rpb24nKTtcbiAgICAgICAgLy8gd2lsbCBpbmNyZWFzZSBieSBvbmVcbiAgICAgICAgaW5jcmVhc2VDb3VudGVyLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjb3VudGVyRGlzcGxheSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuY29udGFpbnMoY291bnRlckRpc3BsYXkpKS50b0JlKHRydWUsIGBUaGUgc2VsZWN0ZWQgZWxlbWVudCAke2NvdW50ZXJEaXNwbGF5U2VsZWN0fSBpcyBubyBsb25nZXIgYW4gZWxlbWVudCBvbiB0aGUgZG9jdW1lbnQgYm9keSBBRlRFUiBjbGlja2luZyAke2NvdW50ZXJCdXR0b25TZWxlY3R9YCk7XG4gICAgICAgIGxldCBuZXdDb3VudGVyVmFsdWUgPSBjb3VudGVyVmFsdWUgKyAxO1xuICAgICAgICBjb3VudGVyVmFsdWUgPSBOdW1iZXIoY291bnRlckRpc3BsYXkuaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuY29udGFpbnMoY291bnRlckRpc3BsYXkpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QobmV3Q291bnRlclZhbHVlKS50b0JlKGNvdW50ZXJWYWx1ZSwgKCkgPT4gYEFmdGVyIGNsaWNrICR7Y291bnRlckJ1dHRvblNlbGVjdH0sIGNvdW50ZXIgdGVzdCAke3Rlc3RRdWFudGlmaWVyICsgMX0gb2YgJHt0ZXN0UXVhbnRpZmllciArIDJ9IGV4cGVjdGVkICR7Y291bnRlckRpc3BsYXlTZWxlY3R9IHRvIGJlIHZhbHVlICR7bmV3Q291bnRlclZhbHVlfSBidXQgaXQgaXMgJHtjb3VudGVyVmFsdWV9YCk7XG4gICAgICAgIC8vIHdpbGwgaW5jcmVhc2UgYnkgb25lXG4gICAgICAgIGluY3JlYXNlQ291bnRlci5jbGljaygpO1xuICAgICAgICBjb3VudGVyVmFsdWUgPSBOdW1iZXIoY291bnRlckRpc3BsYXk/LmlubmVyVGV4dCk7XG4gICAgICAgICsrbmV3Q291bnRlclZhbHVlO1xuICAgICAgICBleHBlY3QobmV3Q291bnRlclZhbHVlKS50b0JlKGNvdW50ZXJWYWx1ZSwgKCkgPT4gYENvdW50ZXIgdGVzdCAke3Rlc3RRdWFudGlmaWVyICsgMn0gb2YgJHt0ZXN0UXVhbnRpZmllciArIDJ9IGV4cGVjdGVkICR7Y291bnRlckRpc3BsYXlTZWxlY3R9IHRvIGluY3JlYXNlIHZhbHVlIHRvICR7bmV3Q291bnRlclZhbHVlfSBidXQgaXQgaXMgJHtjb3VudGVyVmFsdWV9YCk7XG4gICAgfSk7XG59XG4vKiogaW5jcmVhc2VzIGNvdW50ZXIgYnkgdHdvICovXG5leHBvcnQgZnVuY3Rpb24gdGVzdENvdW50ZXJFbGVtZW50cyhjb3VudGVyQnV0dG9uU2VsZWN0LCBjb3VudGVyRGlzcGxheVNlbGVjdCwgeyBlbGVtZW50Q291bnRFeHBlY3RlZCB9ID0ge1xuICAgIGVsZW1lbnRDb3VudEV4cGVjdGVkOiAxXG59KSB7XG4gICAgY29uc3QgaW5jcmVhc2VDb3VudGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY291bnRlckJ1dHRvblNlbGVjdCk7XG4gICAgY29uc3QgY291bnRlckRpc3BsYXlzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb3VudGVyRGlzcGxheVNlbGVjdCk7XG4gICAgcmV0dXJuIHRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyhpbmNyZWFzZUNvdW50ZXJzLCBjb3VudGVyRGlzcGxheXMsIHsgZWxlbWVudENvdW50RXhwZWN0ZWQgfSwgY291bnRlckJ1dHRvblNlbGVjdCwgY291bnRlckRpc3BsYXlTZWxlY3QpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKC4uLnNldHNcbi8vIFtidXR0b24wLCBkaXNwbGF5MF06IFtzdHJpbmcsIHN0cmluZ10sIC8vIGJ1dHRvbiwgZGlzcGxheVxuLy8gW2J1dHRvbjEsIGRpc3BsYXkxXTogW3N0cmluZywgc3RyaW5nXSwgLy8gYnV0dG9uLCBkaXNwbGF5XG4pIHtcbiAgICBjb25zdCBbYnV0dG9uMCwgZGlzcGxheTBdID0gc2V0cy5zaGlmdCgpO1xuICAgIGxldCBxdWVyeSA9IGV4cGVjdEVsbUNvdW50KGRpc3BsYXkwLCAxKTtcbiAgICBsZXQgYnV0dG9uUXVlcnkgPSBleHBlY3RFbG1Db3VudChidXR0b24wLCAxKTtcbiAgICBjb25zdCBkaXNwbGF5MEVsZW1lbnQgPSBxdWVyeVswXTtcbiAgICBjb25zdCBpcDAgPSBkaXNwbGF5MEVsZW1lbnQuaW5uZXJUZXh0O1xuICAgIHRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyhidXR0b25RdWVyeSwgcXVlcnksIHsgZWxlbWVudENvdW50RXhwZWN0ZWQ6IDEgfSwgYnV0dG9uMCwgZGlzcGxheTApO1xuICAgIGxldCBpbmNyZWFzZSA9IDI7XG4gICAgc2V0cy5mb3JFYWNoKChbYnV0dG9uMSwgZGlzcGxheTFdLCBpbmRleCkgPT4ge1xuICAgICAgICBxdWVyeSA9IGV4cGVjdEVsbUNvdW50KGRpc3BsYXkxLCAxKTtcbiAgICAgICAgYnV0dG9uUXVlcnkgPSBleHBlY3RFbG1Db3VudChidXR0b24xLCAxKTtcbiAgICAgICAgbGV0IGRpc3BsYXkxRWxlbWVudCA9IHF1ZXJ5WzBdO1xuICAgICAgICBsZXQgaXAxQ2hlY2sgPSBkaXNwbGF5MUVsZW1lbnQuaW5uZXJUZXh0O1xuICAgICAgICBjb25zdCB2YWx1ZSA9IChOdW1iZXIoaXAwKSArIGluY3JlYXNlKS50b1N0cmluZygpO1xuICAgICAgICBleHBlY3QoaXAxQ2hlY2spLnRvQmUodmFsdWUsICgpID0+IGBFeHBlY3RlZCBzZWNvbmQgJHtkaXNwbGF5MX0gaW5jcmVhc2UgcHJvdmlkZXIgdG8gYmUgaW5jcmVhc2VkIHRvICR7aXAwfSBidXQgZ290ICR7aXAxQ2hlY2t9YCk7XG4gICAgICAgIHRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyhidXR0b25RdWVyeSwgcXVlcnksIHsgZWxlbWVudENvdW50RXhwZWN0ZWQ6IDEgfSwgYnV0dG9uMCwgZGlzcGxheTAsIGluZGV4ICsgMik7XG4gICAgICAgIGRpc3BsYXkxRWxlbWVudCA9IHF1ZXJ5WzBdO1xuICAgICAgICBpcDFDaGVjayA9IGRpc3BsYXkxRWxlbWVudC5pbm5lclRleHQ7XG4gICAgICAgIGNvbnN0IHNlY29uZEluY3JlYXNlID0gaW5jcmVhc2UgKyAyO1xuICAgICAgICBleHBlY3QoaXAxQ2hlY2spLnRvQmUoKE51bWJlcihpcDApICsgc2Vjb25kSW5jcmVhc2UpLnRvU3RyaW5nKCksICgpID0+IGBFeHBlY3RlZCAke2Rpc3BsYXkxfSBpbm5lclRleHQgdG8gYmUgJHtOdW1iZXIoaXAwKSArIHNlY29uZEluY3JlYXNlfSBidXQgaW5zdGVhZCBpdCBpcyAke2lwMUNoZWNrfWApO1xuICAgICAgICBpbmNyZWFzZSA9IGluY3JlYXNlICsgMjtcbiAgICB9KTtcbn1cbiIsIi8vIFJlLWV4cG9ydCB0ZXN0IGZ1bmN0aW9ucyB0aGF0IHdvcmsgaW4gYm90aCBlbnZpcm9ubWVudHNcbi8vIFRoaXMgYWxsb3dzIHRlc3RzIHRvIHdvcmsgaW4gYm90aCBWaXRlc3QgYW5kIGJyb3dzZXIgZW52aXJvbm1lbnRzXG4vLyBJbXBvcnQgYnJvd3NlciB0ZXN0IHJ1bm5lclxuaW1wb3J0ICogYXMgYnJvd3NlclJ1bm5lciBmcm9tICcuL3Rlc3RSdW5uZXInO1xuLy8gQ3JlYXRlIGVudmlyb25tZW50LWF3YXJlIGV4cG9ydHNcbmNvbnN0IGlzVml0ZXN0ID0gdHlwZW9mIGdsb2JhbFRoaXMudml0ZXN0ICE9PSAndW5kZWZpbmVkJztcbmV4cG9ydCBjb25zdCBpdCA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLml0XG4gICAgOiBicm93c2VyUnVubmVyLml0O1xuZXhwb3J0IGNvbnN0IGRlc2NyaWJlID0gaXNWaXRlc3RcbiAgICA/IGdsb2JhbFRoaXMuZGVzY3JpYmVcbiAgICA6IGJyb3dzZXJSdW5uZXIuZGVzY3JpYmU7XG5leHBvcnQgeyBleHBlY3QgfSBmcm9tICcuL2V4cGVjdC13cmFwcGVyJztcbmV4cG9ydCBjb25zdCBiZWZvcmVFYWNoID0gaXNWaXRlc3RcbiAgICA/IGdsb2JhbFRoaXMuYmVmb3JlRWFjaFxuICAgIDogYnJvd3NlclJ1bm5lci5iZWZvcmVFYWNoO1xuZXhwb3J0IGNvbnN0IGFmdGVyRWFjaCA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLmFmdGVyRWFjaFxuICAgIDogYnJvd3NlclJ1bm5lci5hZnRlckVhY2g7XG4vLyBSZS1leHBvcnQgYWxsIERPTSB1dGlsaXRpZXNcbmV4cG9ydCAqIGZyb20gJy4vZWxtU2VsZWN0b3JzJztcbmV4cG9ydCAqIGZyb20gJy4vZXhwZWN0Lmh0bWwnO1xuIiwiLy8gVGVzdCBydW5uZXIgdGhhdCB3b3JrcyBpbiBib3RoIGJyb3dzZXIgYW5kIFZpdGVzdCBlbnZpcm9ubWVudHNcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJy4vZXhwZWN0LXdyYXBwZXInO1xubGV0IGN1cnJlbnRTdWl0ZSA9IG51bGw7XG5sZXQgc3VpdGVzID0gbmV3IE1hcCgpO1xubGV0IHRlc3RRdWV1ZSA9IFtdO1xubGV0IHN1aXRlSG9va3MgPSBuZXcgTWFwKCk7XG4vLyBDaGVjayBpZiB3ZSdyZSBpbiBWaXRlc3QgZW52aXJvbm1lbnRcbmNvbnN0IGlzVml0ZXN0ID0gdHlwZW9mIGdsb2JhbFRoaXMudml0ZXN0ICE9PSAndW5kZWZpbmVkJztcbi8vIEV4cG9ydCBmdW5jdGlvbnMgdGhhdCB3b3JrIGluIGJvdGggZW52aXJvbm1lbnRzXG5leHBvcnQgY29uc3QgaXQgPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5pdFxuICAgIDogKG5hbWUsIGZuKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlc3QgPSB7IG5hbWUsIGZuLCBzdWl0ZTogY3VycmVudFN1aXRlIH07XG4gICAgICAgIHRlc3RRdWV1ZS5wdXNoKHRlc3QpO1xuICAgICAgICAvLyBBZGQgdG8gc3VpdGUgbWFwXG4gICAgICAgIGNvbnN0IHN1aXRlVGVzdHMgPSBzdWl0ZXMuZ2V0KGN1cnJlbnRTdWl0ZSkgfHwgW107XG4gICAgICAgIHN1aXRlVGVzdHMucHVzaCh0ZXN0KTtcbiAgICAgICAgc3VpdGVzLnNldChjdXJyZW50U3VpdGUsIHN1aXRlVGVzdHMpO1xuICAgIH07XG5leHBvcnQgY29uc3QgZGVzY3JpYmUgPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5kZXNjcmliZVxuICAgIDogKG5hbWUsIGZuKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU3VpdGUgPSBjdXJyZW50U3VpdGU7XG4gICAgICAgIGN1cnJlbnRTdWl0ZSA9IG5hbWU7XG4gICAgICAgIHN1aXRlcy5zZXQobmFtZSwgW10pO1xuICAgICAgICBzdWl0ZUhvb2tzLnNldChuYW1lLCB7IGJlZm9yZUVhY2g6IFtdLCBhZnRlckVhY2g6IFtdIH0pO1xuICAgICAgICBmbigpOyAvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IHRvIGNvbGxlY3QgdGVzdHNcbiAgICAgICAgY3VycmVudFN1aXRlID0gcHJldmlvdXNTdWl0ZTtcbiAgICB9O1xuLy8gUmUtZXhwb3J0IGV4cGVjdCBmcm9tIHdyYXBwZXJcbmV4cG9ydCB7IGV4cGVjdCB9O1xuLy8gQWRkIGJlZm9yZUVhY2ggYW5kIGFmdGVyRWFjaCBzdXBwb3J0IGZvciBicm93c2VyIGVudmlyb25tZW50XG5leHBvcnQgY29uc3QgYmVmb3JlRWFjaCA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLmJlZm9yZUVhY2hcbiAgICA6IChmbikgPT4ge1xuICAgICAgICBjb25zdCBob29rcyA9IHN1aXRlSG9va3MuZ2V0KGN1cnJlbnRTdWl0ZSkgfHwgeyBiZWZvcmVFYWNoOiBbXSwgYWZ0ZXJFYWNoOiBbXSB9O1xuICAgICAgICBob29rcy5iZWZvcmVFYWNoLnB1c2goZm4pO1xuICAgICAgICBzdWl0ZUhvb2tzLnNldChjdXJyZW50U3VpdGUsIGhvb2tzKTtcbiAgICB9O1xuZXhwb3J0IGNvbnN0IGFmdGVyRWFjaCA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLmFmdGVyRWFjaFxuICAgIDogKGZuKSA9PiB7XG4gICAgICAgIGNvbnN0IGhvb2tzID0gc3VpdGVIb29rcy5nZXQoY3VycmVudFN1aXRlKSB8fCB7IGJlZm9yZUVhY2g6IFtdLCBhZnRlckVhY2g6IFtdIH07XG4gICAgICAgIGhvb2tzLmFmdGVyRWFjaC5wdXNoKGZuKTtcbiAgICAgICAgc3VpdGVIb29rcy5zZXQoY3VycmVudFN1aXRlLCBob29rcyk7XG4gICAgfTtcbi8vIEV4ZWN1dGUgdGVzdHMgaW4gYnJvd3NlciBlbnZpcm9ubWVudFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVCcm93c2VyVGVzdHMoKSB7XG4gICAgbGV0IHBhc3NlZCA9IDA7XG4gICAgbGV0IGZhaWxlZCA9IDA7XG4gICAgY29uc3QgZmFpbHVyZXMgPSBbXTtcbiAgICBjb25zb2xlLmxvZyhg8J+nqiBSdW5uaW5nICR7dGVzdFF1ZXVlLmxlbmd0aH0gdGVzdHMuLi5cXG5gKTtcbiAgICAvLyBHcm91cCB0ZXN0cyBieSBzdWl0ZSBmb3IgYmV0dGVyIG91dHB1dFxuICAgIGNvbnN0IHRlc3RzQnlTdWl0ZSA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHRlc3Qgb2YgdGVzdFF1ZXVlKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRlc3Quc3VpdGUgfHwgbnVsbDtcbiAgICAgICAgY29uc3Qgc3VpdGVUZXN0cyA9IHRlc3RzQnlTdWl0ZS5nZXQoa2V5KSB8fCBbXTtcbiAgICAgICAgc3VpdGVUZXN0cy5wdXNoKHRlc3QpO1xuICAgICAgICB0ZXN0c0J5U3VpdGUuc2V0KGtleSwgc3VpdGVUZXN0cyk7XG4gICAgfVxuICAgIC8vIFJ1biB0ZXN0cyBncm91cGVkIGJ5IHN1aXRlXG4gICAgZm9yIChjb25zdCBbc3VpdGVOYW1lLCB0ZXN0c10gb2YgdGVzdHNCeVN1aXRlKSB7XG4gICAgICAgIGlmIChzdWl0ZU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3N1aXRlTmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHRlc3Qgb2YgdGVzdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGVudCA9IHN1aXRlTmFtZSA/ICcgICcgOiAnJztcbiAgICAgICAgICAgIGNvbnN0IGhvb2tzID0gc3VpdGVIb29rcy5nZXQodGVzdC5zdWl0ZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFJ1biBiZWZvcmVFYWNoIGhvb2tzXG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzPy5iZWZvcmVFYWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9vayBvZiBob29rcy5iZWZvcmVFYWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUnVuIHRoZSB0ZXN0XG4gICAgICAgICAgICAgICAgYXdhaXQgdGVzdC5mbigpO1xuICAgICAgICAgICAgICAgIHBhc3NlZCsrO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2luZGVudH3inIUgJHt0ZXN0Lm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgLy8gUnVuIGFmdGVyRWFjaCBob29rcyBldmVuIG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICBpZiAoaG9va3M/LmFmdGVyRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgaG9va3MuYWZ0ZXJFYWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBmYWlsZWQrKztcbiAgICAgICAgICAgICAgICBmYWlsdXJlcy5wdXNoKHsgdGVzdDogdGVzdC5uYW1lLCBzdWl0ZTogdGVzdC5zdWl0ZSwgZXJyb3I6IGVycm9yIH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7aW5kZW50feKdjCAke3Rlc3QubmFtZX1gKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gcnVuIGFmdGVyRWFjaCBob29rcyBldmVuIG9uIGZhaWx1cmVcbiAgICAgICAgICAgICAgICBpZiAoaG9va3M/LmFmdGVyRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgaG9va3MuYWZ0ZXJFYWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGhvb2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChhZnRlckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gYWZ0ZXJFYWNoIGhvb2s6JywgYWZ0ZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1aXRlTmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJycpOyAvLyBFbXB0eSBsaW5lIGFmdGVyIHN1aXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coYFxcbvCfk4ogVGVzdCBSZXN1bHRzOiAke3Bhc3NlZH0gcGFzc2VkLCAke2ZhaWxlZH0gZmFpbGVkYCk7XG4gICAgaWYgKGZhaWx1cmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignXFxu4p2MIEZhaWxlZCBUZXN0czonKTtcbiAgICAgICAgZmFpbHVyZXMuZm9yRWFjaCgoeyB0ZXN0LCBzdWl0ZSwgZXJyb3IgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVsbE5hbWUgPSBzdWl0ZSA/IGAke3N1aXRlfSA+ICR7dGVzdH1gIDogdGVzdDtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFxcbiR7ZnVsbE5hbWV9OmApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZXh0cmFjdCBUeXBlU2NyaXB0IGZpbGUgcmVmZXJlbmNlcyBmcm9tIHN0YWNrXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhY2tMaW5lcyA9IGVycm9yLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICBzdGFja0xpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCcudHM6JykgJiYgIWxpbmUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGxpbmUudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2xlYXIgcXVldWVzIGZvciBuZXh0IHJ1blxuICAgIHRlc3RRdWV1ZSA9IFtdO1xuICAgIHN1aXRlcy5jbGVhcigpO1xuICAgIHN1aXRlSG9va3MuY2xlYXIoKTtcbiAgICBjdXJyZW50U3VpdGUgPSBudWxsO1xuICAgIHJldHVybiBmYWlsZWQgPT09IDA7XG59XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBjbGljaywgY2xpY2tPbmUsIGZvY3VzLCBrZXlkb3duT24sIHF1ZXJ5IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi90ZXN0aW5nJztcbmRlc2NyaWJlKCfimJHvuI8gdG9kb3MnLCBmdW5jdGlvbiB0b2RvcygpIHtcbiAgICBjb25zdCB0b2RvSW5wdXQgPSBxdWVyeSgnLm5ldy10b2RvJylbMF07XG4gICAgaXQoJ3RvZG9zIGFkZCBvbmUgcmVtb3ZlIG9uZScsIGFzeW5jIGZ1bmN0aW9uIGFkZE9uZVJlbW92ZU9uZSgpIHtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgICAgY2xpY2soJyN0b2RvLXZpZXctYWxsLWxpbmsnKTtcbiAgICAgICAgYXdhaXQgc2xlZXAoMSk7IC8vIHdpbmRvdyByb3V0ZSBjaGFuZ2UgdGFrZXMgYSB0aWNrXG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdCh0b2RvSW5wdXQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIHRvZG9JbnB1dC52YWx1ZSA9ICdvbmUnO1xuICAgICAgICBrZXlkb3duT24odG9kb0lucHV0LCAnRW50ZXInKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgxKTsgLy8gZXhwZWN0ZWQgb25lIG5ldyB0b2RvXG4gICAgICAgIC8vIGRlbGV0ZSBpdFxuICAgICAgICBjbGljaygnYnV0dG9uLmRlc3Ryb3knKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgndG9kb3MgYmFzaWMnLCBhc3luYyBmdW5jdGlvbiBiYXNpYygpIHtcbiAgICAgICAgLy8gY2xpY2soJyN0b2RvLXZpZXctYWxsLWxpbmsnKVxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjLyc7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEpOyAvLyB3aW5kb3cgcm91dGUgY2hhbmdlIHRha2VzIGEgdGlja1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICB0b2RvSW5wdXQudmFsdWUgPSAnb25lJztcbiAgICAgICAga2V5ZG93bk9uKHRvZG9JbnB1dCwgJ0VudGVyJyk7XG4gICAgICAgIC8vIGNoZWNrYm94IHRvZ2dsZVxuICAgICAgICBjbGljaygnaW5wdXQudG9nZ2xlJyk7XG4gICAgICAgIC8vIGRlbGV0ZSBpdFxuICAgICAgICBjbGljaygnYnV0dG9uLmRlc3Ryb3knKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgwKTsgLy8gZXhwZWN0ZWQgdG9kbyAwIGRlbGV0ZWRcbiAgICAgICAgdG9kb0lucHV0LnZhbHVlID0gJ29uZSc7XG4gICAgICAgIGtleWRvd25Pbih0b2RvSW5wdXQsICdFbnRlcicpO1xuICAgICAgICB0b2RvSW5wdXQudmFsdWUgPSAndHdvJztcbiAgICAgICAga2V5ZG93bk9uKHRvZG9JbnB1dCwgJ0VudGVyJyk7XG4gICAgICAgIGNvbnN0IHRvZG9Ub2dnbGUyID0gcXVlcnkoJ2lucHV0LnRvZ2dsZScpWzFdO1xuICAgICAgICB0b2RvVG9nZ2xlMi5jbGljaygpO1xuICAgICAgICBleHBlY3QodG9kb1RvZ2dsZTIuY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgdG9kb0lucHV0LnZhbHVlID0gJ3RocmVlJztcbiAgICAgICAga2V5ZG93bk9uKHRvZG9JbnB1dCwgJ0VudGVyJyk7IC8vIEVudGVyXG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDMpO1xuICAgICAgICBjbGljaygnI3RvZG8tdmlldy1hY3RpdmUtbGluaycpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgzKTsgLy8gYWN0aXZlIHRvZG8gY291bnQgYmVmb3JlIHBhZ2UgY2hhbmdlXG4gICAgICAgIGV4cGVjdCh3aW5kb3cubG9jYXRpb24uaGFzaCkudG9CZSgnIy9hY3RpdmUnKTtcbiAgICAgICAgYXdhaXQgc2xlZXAoMSk7IC8vIHdpbmRvdyByb3V0ZSBjaGFuZ2UgdGFrZXMgYSB0aWNrXG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDIpOyAvLyBhY3RpdmUgdG9kbyBjb3VudCBhZnRlciBwYWdlIGNoYW5nZVxuICAgICAgICBjbGljaygnI3RvZG8tdmlldy1jb21wbGV0ZWQtbGluaycpO1xuICAgICAgICBhd2FpdCBzbGVlcCgxKTsgLy8gd2luZG93IHJvdXRlIGNoYW5nZSB0YWtlcyBhIHRpY2tcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMSk7IC8vIGNvbXBsZXRlZCB0b2RvIGNvdW50XG4gICAgICAgIGNsaWNrKCcjdG9kby12aWV3LWFsbC1saW5rJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEpOyAvLyB3aW5kb3cgcm91dGUgY2hhbmdlIHRha2VzIGEgdGlja1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgzKTsgLy8gdmlldyBhbGwgdG9kbyBjb3VudFxuICAgICAgICAvLyBkZWxldGUgMFxuICAgICAgICBjbGlja09uZSgnYnV0dG9uLmRlc3Ryb3knKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMik7XG4gICAgICAgIC8vIGRlbGV0ZSAwXG4gICAgICAgIGNsaWNrT25lKCdidXR0b24uZGVzdHJveScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgLy8gZGVsZXRlIDBcbiAgICAgICAgY2xpY2tPbmUoJ2J1dHRvbi5kZXN0cm95Jyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCd0b2RvcyBlZGl0aW5nJywgZnVuY3Rpb24gZWRpdGluZygpIHtcbiAgICAgICAgLy8gY3JlYXRlIHRvZG9cbiAgICAgICAgdG9kb0lucHV0LnZhbHVlID0gJ29uZSc7XG4gICAgICAgIGtleWRvd25Pbih0b2RvSW5wdXQsICdFbnRlcicpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgICAgLy8gcHJlcGFyZSB0byBtYWtlIG5ldyB0b2RvIGJlY29tZSBlZGl0YWJsZVxuICAgICAgICBsZXQgZXZlbnQgPSBuZXcgTW91c2VFdmVudCgnZGJsY2xpY2snLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLCAvLyBFdmVudCB3aWxsIGJ1YmJsZSB1cCB0aHJvdWdoIHRoZSBET01cbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsIC8vIEV2ZW50IGNhbiBiZSBjYW5jZWxsZWRcbiAgICAgICAgICAgIHZpZXc6IHdpbmRvdyAvLyBEZWZhdWx0IHZpZXcgKHdpbmRvdylcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBldmVudCBvbiB0aGUgc3BlY2lmaWVkIGVsZW1lbnRcbiAgICAgICAgcXVlcnkoJ2xhYmVsW2RhdGEtdGVzdGlkPVwidG9kby1pdGVtLWxhYmVsXCJdJylbMF0uZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIC8vIHNob3VsZCBoYXZlIHR3byBpbnB1dHMsIHRoZSBtYWluIGFuZCB0aGUgZWRpdFxuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0Lm5ldy10b2RvJykubGVuZ3RoKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgZm9jdXMoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpO1xuICAgICAgICBjb25zdCBlZGl0SW5wdXQgPSBxdWVyeSgnaW5wdXQjZWRpdC10b2RvLWlucHV0JylbMF07XG4gICAgICAgIGVkaXRJbnB1dC52YWx1ZSA9ICd0d28nO1xuICAgICAgICBrZXlkb3duT24oZWRpdElucHV0LCAnRW50ZXInKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgxKTsgLy8gZXhwZWN0ZWQgb25seSBvbmUgZGVsZXRlIGJ1dHRvblxuICAgICAgICAvLyBtYWluIGlucHV0ICsgYXJyYXkgaW5wdXRcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC5uZXctdG9kbycpLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKS5sZW5ndGgpLnRvQmUoMCk7IC8vIGVudGVyIGtleSBhbHJlYWR5IGhpZCBpdFxuICAgICAgICAvLyBibHVyKCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKVxuICAgICAgICAvLyBleHBlY3QocXVlcnkoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpLmxlbmd0aCkudG9CZSgwKVxuICAgICAgICAvLyBkZWxldGUgMFxuICAgICAgICBjbGlja09uZSgnYnV0dG9uLmRlc3Ryb3knKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ+KMmu+4jyB0b2RvcyBzcGVlZG9tZXRlcicsIHJ1blRvZG9TcGVlZG9tZXRlcik7XG59KTtcbmZ1bmN0aW9uIHJ1blRvZG9TcGVlZG9tZXRlcigpIHtcbiAgICBjb25zdCBudW1iZXJPZkl0ZW1zVG9BZGQgPSA1MDA7XG4gICAgY29uc29sZS50aW1lKCfimIDvuI8tc3BlZWRvbWV0ZXItYWxsJyk7XG4gICAgY29uc29sZS50aW1lKCfwn4aVIHNwZWVkb21ldGVyLWFkZGluZycpO1xuICAgIGNvbnN0IG5ld1RvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ldy10b2RvXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZJdGVtc1RvQWRkOyBpKyspIHtcbiAgICAgICAgbmV3VG9kby52YWx1ZSA9ICdhYWEgLSAnICsgaTtcbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV2ZW50IG9uIHRoZSBjaGlsZCBlbGVtZW50XG4gICAgICAgIGtleWRvd25PbihuZXdUb2RvLCAnRW50ZXInKTtcbiAgICB9XG4gICAgY29uc29sZS50aW1lRW5kKCfwn4aVIHNwZWVkb21ldGVyLWFkZGluZycpO1xuICAgIGNvbnNvbGUudGltZSgn4pyP77iPIHNwZWVkb21ldGVyLWVkaXRpbmcnKTtcbiAgICBjb25zdCBjaGVja2JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50b2dnbGVcIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkl0ZW1zVG9BZGQ7IGkrKylcbiAgICAgICAgY2hlY2tib3hlc1tpXS5jbGljaygpO1xuICAgIGNvbnNvbGUudGltZUVuZCgn4pyP77iPIHNwZWVkb21ldGVyLWVkaXRpbmcnKTtcbiAgICBjb25zb2xlLnRpbWUoJ/Cfl5HvuI8gc3BlZWRvbWV0ZXItZGVsZXRpbmcnKTtcbiAgICBjb25zdCBkZWxldGVCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kZXN0cm95XCIpO1xuICAgIGZvciAobGV0IGkgPSBudW1iZXJPZkl0ZW1zVG9BZGQgLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgZGVsZXRlQnV0dG9uc1tpXS5jbGljaygpO1xuICAgIGNvbnNvbGUudGltZUVuZCgn8J+Xke+4jyBzcGVlZG9tZXRlci1kZWxldGluZycpO1xuICAgIGNvbnNvbGUudGltZUVuZCgn4piA77iPLXNwZWVkb21ldGVyLWFsbCcpO1xufVxuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgY2xpY2ssIGh0bWwsIGh0bWxCeUlkIH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGV4cGVjdE1hdGNoZWRIdG1sIH0gZnJvbSAnLi90ZXN0aW5nJztcbmRlc2NyaWJlKCfijJrvuI8gd2F0Y2ggdGVzdHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2xvd0NvdW50ID0gaHRtbCgnI/CfjYQtc2xvd0NoYW5nZUNvdW50Jyk7XG4gICAgLy8gdGVzdHMgY2FuIGJlIHJ1biBtdWx0aXBsZSB0aW1lcy4gT25seSB0aGUgZmlyc3QgdGltZSB3aWxsIHRoaXMgZXhwZWN0IGJlbG93IHdvcmtcbiAgICBjb25zdCBmaXJzdFJ1biA9IHNsb3dDb3VudCA9PT0gJzAnO1xuICAgIGl0KCdiYXNpYycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRDb3VudCA9IE51bWJlcihodG1sQnlJZCgnd2F0Y2gtdGVzdGluZy1udW0tZGlzcGxheScpKTtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyN3YXRjaC10ZXN0aW5nLW51bS1kaXNwbGF5JywgJyPwn42ELXNsb3dDaGFuZ2VDb3VudCcpO1xuICAgICAgICAvLyBhbHdheXMgc3RhcnRzIGF0IFwiZmFsc2VcIlxuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2UnKSkudG9CZSgnZmFsc2UnKTtcbiAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI/CfjYQtd2F0Y2hQcm9wTnVtU2xvdycpKS50b0JlKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKCcj8J+mty13YXRjaFRydXRoJykpLnRvQmUoJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aEFzU3ViJykpLnRvQmUoJycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwZWN0KGh0bWwoJyPwn42ELXdhdGNoUHJvcE51bVNsb3cnKSkudG9CZShzbG93Q291bnQpO1xuICAgICAgICAgICAgZXhwZWN0KE51bWJlcihodG1sKCcj8J+mty13YXRjaFRydXRoJykpKS50b0JlR3JlYXRlclRoYW4oTnVtYmVyKHNsb3dDb3VudCkpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGhBc1N1YicpKS50b0JlKGh0bWwoJyPwn6a3LXRydXRoU3ViQ2hhbmdlQ291bnQnKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpY2soJyN3YXRjaC10ZXN0aW5nLW51bS1idXR0b24nKTtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyN3YXRjaC10ZXN0aW5nLW51bS1kaXNwbGF5JywgJyPwn42ELXNsb3dDaGFuZ2VDb3VudCcpO1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI/CfjYQtd2F0Y2hQcm9wTnVtU2xvdycsICcj8J+NhC1zbG93Q2hhbmdlQ291bnQnKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn42E4oCN8J+fqy1zdWJqZWN0Q2hhbmdlQ291bnQnKSkudG9CZSgoc3RhcnRDb3VudCArIDIpLnRvU3RyaW5nKCkpO1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI/CfjYTigI3wn5+rLXN1YmplY3RDaGFuZ2VDb3VudCcsICcj8J+NhOKAjfCfn6std2F0Y2hQcm9wTnVtU3ViamVjdCcpO1xuICAgICAgICBjb25zdCB0cnV0aFN0YXJ0Q291bnQgPSBOdW1iZXIoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2VDb3VudCcpKTtcbiAgICAgICAgY2xpY2soJyPwn6a3LXRydXRoQ2hhbmdlLWJ1dHRvbicpO1xuICAgICAgICBsZXQgbmV3Q291bnQgPSAodHJ1dGhTdGFydENvdW50ICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gaXRzIGJlZW4gY2hhbmdlZCB0byBcInRydWVcIiwgdGhhdCBjYXVzZXMgYSBjaGFuZ2Ugd2F0Y2ggY291bnQgaW5jcmVhc2VcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlJykpLnRvQmUoJ3RydWUnKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGgnKSkudG9CZShuZXdDb3VudCk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZUNvdW50JykpLnRvQmUobmV3Q291bnQpO1xuICAgICAgICBjbGljaygnI/CfprctdHJ1dGhDaGFuZ2UtYnV0dG9uJyk7XG4gICAgICAgIG5ld0NvdW50ID0gKHRydXRoU3RhcnRDb3VudCArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vIGl0cyBiZWVuIGNoYW5nZWQgdG8gYmFjayB0byBcImZhbHNlXCIsIHRoYXQgZG9lcyBOT1QgY2F1c2UgYSBjaGFuZ2Ugd2F0Y2ggY291bnQgaW5jcmVhc2VcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlJykpLnRvQmUoJ2ZhbHNlJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty13YXRjaFRydXRoJykpLnRvQmUobmV3Q291bnQpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2VDb3VudCcpKS50b0JlKG5ld0NvdW50KTtcbiAgICAgICAgY2xpY2soJyPwn6a3LXRydXRoQ2hhbmdlLWJ1dHRvbicpO1xuICAgICAgICAvLyBpdHMgYmVlbiBjaGFuZ2VkIHRvIFwidHJ1ZVwiLCB0aGF0IGNhdXNlcyBhIGNoYW5nZSB3YXRjaCBjb3VudCBpbmNyZWFzZVxuICAgICAgICBuZXdDb3VudCA9ICh0cnV0aFN0YXJ0Q291bnQgKyAyKS50b1N0cmluZygpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2UnKSkudG9CZSgndHJ1ZScpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aCcpKS50b0JlKG5ld0NvdW50KTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlQ291bnQnKSkudG9CZShuZXdDb3VudCk7XG4gICAgICAgIGNsaWNrKCcj8J+mty10cnV0aENoYW5nZS1idXR0b24nKTsgLy8gcmVzZXQgc28gdGVzdHMgY2FuIHBhc3MgZXZlcnkgdGltZVxuICAgICAgICBjbGljaygnI/CfprctcmVzZXQtYnV0dG9uJyk7IC8vIHJlc2V0IHNvIHRlc3RzIGNhbiBwYXNzIGV2ZXJ5IHRpbWVcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGgnKTtcbiAgICAgICAgY29uc3QgYWN0dWFsID0gaHRtbCgnI/Cfprctd2F0Y2hUcnV0aEFzU3ViJyk7XG4gICAgICAgIGV4cGVjdChhY3R1YWwpLnRvQmUoZGlzcGxheSk7IC8vIExhc3QgdGVzdCBleHBlY3RlZCAj8J+mty13YXRjaFRydXRoQXNTdWIgJHtkaXNwbGF5fSBidXQgaXQgd2FzICR7YWN0dWFsfVxuICAgIH0pO1xufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmV4cG9ydCBjb25zdCB2YXJpYWJsZVByZWZpeCA9ICc6dGFndmFyJztcbmV4cG9ydCBjb25zdCB2YXJpYWJsZVN1ZmZpeCA9ICc6JztcbiIsIi8qKiBMb29raW5nIGZvciAoY2xhc3MgfCBzdHlsZSkgZm9sbG93ZWQgYnkgYSBwZXJpb2QgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpYWxBdHRyKGF0dHJOYW1lKSB7XG4gICAgaWYgKGF0dHJOYW1lLnN0YXJ0c1dpdGgoJ2NsYXNzLicpKSB7XG4gICAgICAgIHJldHVybiAnY2xhc3MnO1xuICAgIH1cbiAgICBjb25zdCBzcGVjaWFsQWN0aW9uID0gaXNTcGVjaWFsQWN0aW9uKGF0dHJOYW1lKTtcbiAgICBpZiAoc3BlY2lhbEFjdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpYWxBY3Rpb247XG4gICAgfVxuICAgIGlmIChhdHRyTmFtZS5zdGFydHNXaXRoKCdzdHlsZS4nKSkge1xuICAgICAgICByZXR1cm4gJ3N0eWxlJztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3BlY2lhbEFjdGlvbihhdHRyTmFtZSkge1xuICAgIHN3aXRjaCAoYXR0ck5hbWUpIHtcbiAgICAgICAgY2FzZSAnYXV0b3NlbGVjdCc6XG4gICAgICAgICAgICByZXR1cm4gJ2F1dG9zZWxlY3QnO1xuICAgICAgICBjYXNlICdhdXRvZm9jdXMnOlxuICAgICAgICAgICAgcmV0dXJuICdhdXRvZm9jdXMnO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyB2YXJpYWJsZVN1ZmZpeCwgdmFyaWFibGVQcmVmaXggfSBmcm9tIFwiLi4vLi4vdGFnL0RvbVRhZy50eXBlLmpzXCI7XG5leHBvcnQgY29uc3QgcGxhY2Vob2xkZXJSZWdleCA9IG5ldyBSZWdFeHAodmFyaWFibGVQcmVmaXggKyAnKFxcXFxkKyknICsgdmFyaWFibGVTdWZmaXgsICdnJyk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFnVmFySW5kZXgodmFsdWUpIHtcbiAgICBpZiAodmFsdWUuc2VhcmNoICYmIHZhbHVlLnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5zZWFyY2gocGxhY2Vob2xkZXJSZWdleCk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbiIsImltcG9ydCB7IHZhcmlhYmxlUHJlZml4LCB2YXJpYWJsZVN1ZmZpeCB9IGZyb20gXCIuLi8uLi90YWcvRG9tVGFnLnR5cGUuanNcIjtcbmltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tIFwiLi4vYXR0cmlidXRlcy9pc1NwZWNpYWxBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGZha2VUYWdzUmVnRXgsIGZpbmRSZWFsVGFnc1JlZ0V4IH0gZnJvbSBcIi4vaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHBsYWNlaG9sZGVyUmVnZXggfSBmcm9tIFwiLi4vLi4vcmVuZGVyL2F0dHJpYnV0ZXMvZ2V0VGFnVmFySW5kZXguZnVuY3Rpb24uanNcIjtcbmNvbnN0IGZyYWdGaW5kQW55ID0gLyg6dGFndmFyXFxkKzopLztcbmNvbnN0IG9uZG91YmxlY2xpY2sgPSAnb25kb3VibGVjbGljayc7XG5jb25zdCByZWdleEF0dHIgPSAvKFs6X2EtekEtWjAtOVxcLS5dKylcXHMqKD86PVxccypcIihbXlwiXSopXCJ8PVxccyooXFxTKykpPy9nO1xuY29uc3QgcmVnZXhUYWdPcmcgPSAvPFxcLz8oW2EtekEtWjAtOS1dKykoKD86XFxzK1thLXpBLVpfOipdW1xcdzouLV0qKD86XFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzXCInPTw+YF0rKSk/KStcXHMqfFxccyopXFwvPz4vZztcbi8qKiBNYWluIHN0YXJ0IG9mIHN0cmluZyBwYXJzaW5nICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIVE1MKGh0bWwpIHtcbiAgICBjb25zdCB2YWx1ZVBvc2l0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICBsZXQgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAgIGxldCB2YWx1ZUluZGV4ID0gLTE7XG4gICAgbGV0IHBvc2l0aW9uID0gMDtcbiAgICBjb25zdCByZWdleFRhZyA9IG5ldyBSZWdFeHAocmVnZXhUYWdPcmcsICdnJyk7XG4gICAgaHRtbCA9IHByZXByb2Nlc3NUYWdzSW5Db21tZW50cyhodG1sKTtcbiAgICB3aGlsZSAocG9zaXRpb24gPCBodG1sLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB0YWdNYXRjaCA9IHJlZ2V4VGFnLmV4ZWMoaHRtbCk7XG4gICAgICAgIGlmICghdGFnTWF0Y2gpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtmdWxsTWF0Y2gsIHRhZ05hbWUsIGF0dHJTdHJpbmddID0gdGFnTWF0Y2g7XG4gICAgICAgIGNvbnN0IGlzQ2xvc2luZ1RhZyA9IGZ1bGxNYXRjaC5zdGFydHNXaXRoKCc8LycpO1xuICAgICAgICBjb25zdCBpc1NlbGZDbG9zaW5nID0gZnVsbE1hdGNoLmVuZHNXaXRoKCcvPicpO1xuICAgICAgICBpZiAocG9zaXRpb24gPCB0YWdNYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBodG1sLnNsaWNlKHBvc2l0aW9uLCB0YWdNYXRjaC5pbmRleCk7XG4gICAgICAgICAgICBpZiAodGV4dENvbnRlbnQudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dFZhck1hdGNoZXMgPSBzcGxpdEJ5VGFnVmFyKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ZXh0Q29udGVudCBvZiB0ZXh0VmFyTWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dENvbnRlbnQuc3RhcnRzV2l0aCh2YXJpYWJsZVByZWZpeCkgJiYgdGV4dENvbnRlbnQuc2VhcmNoKGZyYWdGaW5kQW55KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBpdHMgbm90IGZha2UgdGhlbiBsZXRzIG5vdyBjb25zaWRlciB0aGlzIGEgcmVhbCB2YXJpYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRDb250ZW50LnNlYXJjaChmYWtlVGFnc1JlZ0V4KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudCA9IHZhcmlhYmxlUHJlZml4ICsgKCsrdmFsdWVJbmRleCkgKyB2YXJpYWJsZVN1ZmZpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwdXNoVGV4dFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbiA9IHRhZ01hdGNoLmluZGV4ICsgZnVsbE1hdGNoLmxlbmd0aDtcbiAgICAgICAgaWYgKGlzQ2xvc2luZ1RhZykge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBzdGFjay5wb3AoKSB8fCBudWxsO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IFtdO1xuICAgICAgICBsZXQgYXR0ck1hdGNoO1xuICAgICAgICB3aGlsZSAoKGF0dHJNYXRjaCA9IHJlZ2V4QXR0ci5leGVjKGF0dHJTdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVJbmRleCA9IHBhcnNlQXR0clN0cmluZyhhdHRyTWF0Y2gsIHZhbHVlSW5kZXgsIHZhbHVlUG9zaXRpb25zLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGVtZW50ID0ge1xuICAgICAgICAgICAgbm46IHRhZ05hbWUsIC8vIG5vZGVOYW1lXG4gICAgICAgIH07XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZWxlbWVudC5hdCA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRFbGVtZW50LmNoKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQuY2ggPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LmNoLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNTZWxmQ2xvc2luZykge1xuICAgICAgICAgICAgc3RhY2sucHVzaChjdXJyZW50RWxlbWVudCk7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uIDwgaHRtbC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBodG1sLnNsaWNlKHBvc2l0aW9uKTtcbiAgICAgICAgaWYgKHRleHRDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgY29uc3QgdGV4dFZhck1hdGNoZXMgPSBzcGxpdEJ5VGFnVmFyKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGV4dENvbnRlbnQgb2YgdGV4dFZhck1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGV4dENvbnRlbnQuc3RhcnRzV2l0aCh2YXJpYWJsZVByZWZpeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgKyt2YWx1ZUluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwdXNoVGV4dFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cztcbn1cbmNvbnN0IHJlbW92ZUNvbW1lbnRSZWdYID0gbmV3IFJlZ0V4cCgnKDwhLS1bXFxcXHNcXFxcU10qPy0tPiknLCAnZycpO1xuZnVuY3Rpb24gcHJlcHJvY2Vzc1RhZ3NJbkNvbW1lbnRzKGh0bWwpIHtcbiAgICAvLyBVc2UgYSByZWdleCB0byBmaW5kIGFsbCBIVE1MIGNvbW1lbnRzXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZShyZW1vdmVDb21tZW50UmVnWCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIC8vIEZvciBlYWNoIGNvbW1lbnQgZm91bmQsIHJlcGxhY2UgPCBhbmQgPiBpbnNpZGUgaXRcbiAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoL1xcW2wgdFxcXS9nLCAnW2wmbmJzcDt0XScpLnJlcGxhY2UoL1xcW2cgdFxcXS9nLCAnW2cmbmJzcDt0XScpLnJlcGxhY2UoLzwvZywgJ1tsIHRdJykucmVwbGFjZSgvPi9nLCAnW2cgdF0nKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFuRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICAgIGlmIChldmVudE5hbWUuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBjb25zdCBjb3VsZEJ5RGJsQ2xpY2sgPSBldmVudE5hbWUubGVuZ3RoID09PSBvbmRvdWJsZWNsaWNrLmxlbmd0aCAmJiBldmVudE5hbWUgPT09IG9uZG91YmxlY2xpY2s7XG4gICAgICAgIGlmIChjb3VsZEJ5RGJsQ2xpY2spIHtcbiAgICAgICAgICAgIHJldHVybiAnZGJsY2xpY2snO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudE5hbWUuc2xpY2UoMiwgZXZlbnROYW1lLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBldmVudE5hbWU7XG59XG5mdW5jdGlvbiBwdXNoVGV4dFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dENvbnRlbnQpIHtcbiAgICBjb25zdCB0ZXh0Tm9kZSA9IHtcbiAgICAgICAgbm46ICd0ZXh0JywgLy8gbm9kZU5hbWVcbiAgICAgICAgdGM6IHBvc3RQcm9jZXNzVGFnc0luQ29tbWVudHModGV4dENvbnRlbnQpLCAvLyB0ZXh0Q29udGVudFxuICAgIH07XG4gICAgcHVzaFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dE5vZGUpO1xufVxuLyoqIFRPRE86IFRoaXMgaGFzIGdvdCB0byBiZSB0b28gZXhwZW5zaXZlICovXG5mdW5jdGlvbiBwb3N0UHJvY2Vzc1RhZ3NJbkNvbW1lbnRzKGh0bWwpIHtcbiAgICAvLyBVc2UgYSByZWdleCB0byBmaW5kIGFsbCBzZWdtZW50cyB0aGF0IGxvb2sgbGlrZSBwcm9jZXNzZWQgY29tbWVudHNcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC8oXFxbbCB0XFxdIS0tW1xcc1xcU10qPy0tXFxbZyB0XFxdKS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgLy8gRm9yIGVhY2ggcHJvY2Vzc2VkIGNvbW1lbnQgZm91bmQsIHJlcGxhY2UgKmx0KiBhbmQgKmd0KiBiYWNrIHRvIDwgYW5kID5cbiAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoL1xcW2wgdFxcXS9nLCAnPCcpLnJlcGxhY2UoL1xcW2cgdFxcXS9nLCAnPicpLnJlcGxhY2UoL1xcW2wmbmJzcDt0XFxdL2csICdbbCB0XScpLnJlcGxhY2UoL1xcW2cmbmJzcDt0XFxdL2csICdbZyB0XScpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcHVzaFRvKGN1cnJlbnRFbGVtZW50LCBlbGVtZW50cywgdGV4dE5vZGUpIHtcbiAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFjdXJyZW50RWxlbWVudC5jaCkge1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQuY2ggPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50RWxlbWVudC5jaC5wdXNoKHRleHROb2RlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnRzLnB1c2godGV4dE5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNwbGl0QnlUYWdWYXIoaW5wdXRTdHJpbmcpIHtcbiAgICAvLyBTcGxpdCB0aGUgc3RyaW5nIHVzaW5nIHRoZSByZWd1bGFyIGV4cHJlc3Npb24sIGtlZXAgZGVsaW1pdGVycyBpbiB0aGUgb3V0cHV0XG4gICAgY29uc3QgcGFydHMgPSBpbnB1dFN0cmluZy5zcGxpdChmcmFnRmluZEFueSk7XG4gICAgLy8gRmlsdGVyIG91dCBhbnkgZW1wdHkgc3RyaW5ncyBmcm9tIHRoZSByZXN1bHRzXG4gICAgY29uc3QgZmlsdGVyZWRQYXJ0cyA9IHBhcnRzLmZpbHRlcihub3RFbXB0eVN0cmluZ01hcHBlcik7XG4gICAgcmV0dXJuIGZpbHRlcmVkUGFydHM7XG59XG5mdW5jdGlvbiBub3RFbXB0eVN0cmluZ01hcHBlcihwYXJ0KSB7XG4gICAgcmV0dXJuIHBhcnQgIT09ICcnO1xufVxuZnVuY3Rpb24gcGFyc2VBdHRyU3RyaW5nKGF0dHJNYXRjaCwgdmFsdWVJbmRleCwgdmFsdWVQb3NpdGlvbnMsIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyTmFtZSA9IGF0dHJNYXRjaFsxXSB8fCBhdHRyTWF0Y2hbM10gfHwgYXR0ck1hdGNoWzVdO1xuICAgIGNvbnN0IGF0dHJDaG9pY2UgPSBhdHRyTWF0Y2hbMl0gfHwgYXR0ck1hdGNoWzRdIHx8IGF0dHJNYXRjaFs2XTtcbiAgICBsZXQgYXR0clZhbHVlID0gYXR0ckNob2ljZTtcbiAgICBpZiAoYXR0ck5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICB9XG4gICAgY29uc3Qgbm90RW1wdHkgPSBhdHRyTWF0Y2hbMl0gIT09ICcnO1xuICAgIGNvbnN0IG5vVmFsdWUgPSBhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBub3RFbXB0eTtcbiAgICBjb25zdCBsb3dlck5hbWUgPSBhdHRyTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGZpeGVkTmFtZSA9IGxvd2VyTmFtZS5zdGFydHNXaXRoKCdvbicpID8gY2xlYW5FdmVudE5hbWUobG93ZXJOYW1lKSA6IGxvd2VyTmFtZTtcbiAgICBpZiAobm9WYWx1ZSkge1xuICAgICAgICBjb25zdCBzdGFuZEFsb25lVmFyID0gYXR0ck5hbWUuc2xpY2UoMCwgdmFyaWFibGVQcmVmaXgubGVuZ3RoKSA9PT0gdmFyaWFibGVQcmVmaXg7XG4gICAgICAgIGlmIChzdGFuZEFsb25lVmFyKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5hbWUgPSB2YXJpYWJsZVByZWZpeCArICgrK3ZhbHVlSW5kZXgpICsgdmFyaWFibGVTdWZmaXg7XG4gICAgICAgICAgICB2YWx1ZVBvc2l0aW9ucy5wdXNoKFsnYXQnLCB2YWx1ZU5hbWVdKTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChbdmFsdWVOYW1lXSk7IC8vIHRoZSBuYW1lIGl0c2VsZiBpcyBkeW5hbWljXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydE1hdGNoZWQgPSBhdHRyTWF0Y2hbMF0uc3RhcnRzV2l0aChhdHRyTmFtZSk7XG4gICAgICAgIGNvbnN0IHN0YW5kQWxvbmVBdHRyID0gc3RhcnRNYXRjaGVkICYmIGF0dHJNYXRjaFswXS5zbGljZShhdHRyTmFtZS5sZW5ndGgsIGF0dHJNYXRjaFswXS5sZW5ndGgpLnNlYXJjaCgvXFxzKyQvKSA+PSAwO1xuICAgICAgICBpZiAoc3RhbmRBbG9uZUF0dHIpIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChbZml4ZWROYW1lXSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3aG9sZVZhbHVlID0gYXR0ck1hdGNoWzNdO1xuICAgICAgICBjb25zdCBpc0Zha2VUYWcgPSB3aG9sZVZhbHVlLnNlYXJjaChmYWtlVGFnc1JlZ0V4KSA+PSAwO1xuICAgICAgICBpZiAoaXNGYWtlVGFnKSB7XG4gICAgICAgICAgICBhdHRyVmFsdWUgPSB3aG9sZVZhbHVlO1xuICAgICAgICAgICAgLy8gdG8gcmVzdG9yZTogd2hvbGVWYWx1ZS5yZXBsYWNlKGZha2VUYWdzUmVnRXgsdmFyaWFibGVQcmVmaXgrJyQxJDMkNCcrdmFyaWFibGVTdWZmaXgpXG4gICAgICAgICAgICBjb25zdCBhdHRyU2V0ID0gW2ZpeGVkTmFtZSwgYXR0clZhbHVlXTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyU2V0KTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVOYW1lID0gdmFyaWFibGVQcmVmaXggKyAoKyt2YWx1ZUluZGV4KSArIHZhcmlhYmxlU3VmZml4O1xuICAgICAgICAgICAgYXR0clZhbHVlID0gdmFsdWVOYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbm90RW1wdHkpIHtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ck1hdGNoWzJdO1xuICAgIH1cbiAgICAvLyBjb25jYXQgYXR0cmlidXRlcyBhcyBhcnJheVxuICAgIGNvbnN0IGF0dHJWYWx1ZVNwbGl0ID0gYXR0clZhbHVlLnNwbGl0KGZpbmRSZWFsVGFnc1JlZ0V4KS5maWx0ZXIoKHgpID0+IHgubGVuZ3RoID4gMCk7XG4gICAgaWYgKGF0dHJWYWx1ZVNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0clZhbHVlU3BsaXQ7XG4gICAgICAgIGF0dHJWYWx1ZVNwbGl0LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2VhcmNoKHBsYWNlaG9sZGVyUmVnZXgpID49IDApIHtcbiAgICAgICAgICAgICAgICArK3ZhbHVlSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBhdHRyU2V0ID0gW2ZpeGVkTmFtZSwgYXR0clZhbHVlXTtcbiAgICBjb25zdCBpc1NwZWNpYWwgPSBpc1NwZWNpYWxBdHRyKGxvd2VyTmFtZSk7IC8vIGNoZWNrIG9yaWdpbmFsIG5hbWUgZm9yIFwib25pbml0XCIgb3IgXCJhdXRvZm9jdXNcIlxuICAgIGlmIChpc1NwZWNpYWwpIHtcbiAgICAgICAgYXR0clNldC5wdXNoKGlzU3BlY2lhbCk7XG4gICAgfVxuICAgIC8vIGZvcmNlIHN0eWxlIHRvIGJlIGZpcnN0IHNvIG90aGVyIHN0eWxlIG1hbmlwdWxhdGluZyBhdHRyaWJ1dGVzIGRvIG5vdCBnZXQgb3ZlcndyaXR0ZW5cbiAgICBpZiAoZml4ZWROYW1lID09PSAnc3R5bGUnKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMudW5zaGlmdChhdHRyU2V0KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlSW5kZXg7XG4gICAgfVxuICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyU2V0KTtcbiAgICByZXR1cm4gdmFsdWVJbmRleDtcbn1cbiIsImltcG9ydCB7IHZhcmlhYmxlUHJlZml4LCB2YXJpYWJsZVN1ZmZpeCB9IGZyb20gXCIuLi8uLi90YWcvRG9tVGFnLnR5cGUuanNcIjtcbmltcG9ydCB7IHBhcnNlSFRNTCB9IGZyb20gXCIuL3BhcnNlSFRNTC5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGNvbnN0IHJlYWxUYWdzUmVnRXggPSBuZXcgUmVnRXhwKHZhcmlhYmxlUHJlZml4ICsgJyhcXFxcZCspJyArIHZhcmlhYmxlU3VmZml4LCAnZ2knKTtcbmV4cG9ydCBjb25zdCBmaW5kUmVhbFRhZ3NSZWdFeCA9IG5ldyBSZWdFeHAoJygnICsgdmFyaWFibGVQcmVmaXggKyAnXFxcXGQrJyArIHZhcmlhYmxlU3VmZml4ICsgJyknLCAnZ2knKTtcbi8vIHdpdGhvdXQgbGFzdCBsZXR0ZXJcbmNvbnN0IHNob3J0RnJvbnQgPSB2YXJpYWJsZVByZWZpeC5zbGljZSgwLCB2YXJpYWJsZVByZWZpeC5sZW5ndGggLSAxKTtcbmV4cG9ydCBjb25zdCBmYWtlVGFnc1JlZ0V4ID0gbmV3IFJlZ0V4cChzaG9ydEZyb250ICsgJyYjeDcyOyhcXFxcZCspJyArIHZhcmlhYmxlU3VmZml4LCAnZ2knKTtcbi8vIHZhcmlhYmxlIHByZWZpeCBtaW51cyBvbmUgbGV0dGVyIGFuZCB0aGVuIHRoZSBsZXR0ZXIgXCJyXCIgYXMgaGV4XG5jb25zdCByZXBsYWNlbWVudCA9IHNob3J0RnJvbnQgKyAnJiN4NzI7JDEnICsgdmFyaWFibGVTdWZmaXg7XG4vKiogUnVuIG9ubHkgZHVyaW5nIGNvbXBpbGUgc3RlcCBPUiB3aGVuIG5vIGNvbXBpbGUgc3RlcCBvY2N1cnJlZCBhdCBydW50aW1lICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEoc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgLy8gUGFyc2UgdGhlIG1vZGlmaWVkIGZyYWdtZW50c1xuICAgIGNvbnN0IGh0bWxTdHJpbmcgPSBodG1sSW50ZXJwb2xhdGlvblRvUGxhY2Vob2xkZXJzKHN0cmluZ3MsIHZhbHVlcykuam9pbignJyk7XG4gICAgY29uc3QgZG9tTWV0YSA9IHBhcnNlSFRNTChodG1sU3RyaW5nKTtcbiAgICByZXR1cm4gZG9tTWV0YTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBodG1sSW50ZXJwb2xhdGlvblRvUGxhY2Vob2xkZXJzKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIC8vIFNhbml0aXplIHBsYWNlaG9sZGVycyBpbiB0aGUgZnJhZ21lbnRzXG4gICAgY29uc3Qgc2FuaXRpemVkRnJhZ21lbnRzID0gc3RyaW5ncztcbiAgICAvLyBjb25zdCBzYW5pdGl6ZWRGcmFnbWVudHMgPSBzYW5pdGl6ZVBsYWNlaG9sZGVycyhzdHJpbmdzKVxuICAgIC8vIEFkZCBwbGFjZWhvbGRlcnMgdG8gdGhlIGZyYWdtZW50c1xuICAgIHJldHVybiBhZGRQbGFjZWhvbGRlcnMoc2FuaXRpemVkRnJhZ21lbnRzLCB2YWx1ZXMpO1xufVxuZnVuY3Rpb24gYWRkUGxhY2Vob2xkZXJzKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3RyaW5ncy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBzdHJpbmdzW2luZGV4XTtcbiAgICAgICAgY29uc3Qgc2FmZUZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZShyZWFsVGFnc1JlZ0V4LCByZXBsYWNlbWVudCk7XG4gICAgICAgIGlmIChpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzYWZlRnJhZ21lbnQgKyB2YXJpYWJsZVByZWZpeCArIGluZGV4ICsgdmFyaWFibGVTdWZmaXgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cy5wdXNoKHNhZmVGcmFnbWVudCk7XG4gICAgfVxuICAgIGJhbGFuY2VBcnJheUJ5QXJyYXlzKHJlc3VsdHMsIHN0cmluZ3MsIHZhbHVlcyk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5leHBvcnQgZnVuY3Rpb24gYmFsYW5jZUFycmF5QnlBcnJheXMocmVzdWx0cywgc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgY29uc3QgZGlmZiA9IHZhbHVlcy5sZW5ndGggLSBzdHJpbmdzLmxlbmd0aDtcbiAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IGRpZmY7IHggPiAwOyAtLXgpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2YXJpYWJsZVByZWZpeCArIChzdHJpbmdzLmxlbmd0aCArIHggLSAxKSArIHZhcmlhYmxlU3VmZml4KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBlbXB0eSA9ICcnO1xuZXhwb3J0IHZhciBJbW11dGFibGVUeXBlcztcbihmdW5jdGlvbiAoSW1tdXRhYmxlVHlwZXMpIHtcbiAgICBJbW11dGFibGVUeXBlc1tcInN0cmluZ1wiXSA9IFwic3RyaW5nXCI7XG4gICAgSW1tdXRhYmxlVHlwZXNbXCJudW1iZXJcIl0gPSBcIm51bWJlclwiO1xuICAgIEltbXV0YWJsZVR5cGVzW1wiYm9vbGVhblwiXSA9IFwiYm9vbGVhblwiO1xuICAgIEltbXV0YWJsZVR5cGVzW1widW5kZWZpbmVkXCJdID0gXCJ1bmRlZmluZWRcIjtcbn0pKEltbXV0YWJsZVR5cGVzIHx8IChJbW11dGFibGVUeXBlcyA9IHt9KSk7XG5leHBvcnQgdmFyIEJhc2ljVHlwZXM7XG4oZnVuY3Rpb24gKEJhc2ljVHlwZXMpIHtcbiAgICBCYXNpY1R5cGVzW1wiZnVuY3Rpb25cIl0gPSBcImZ1bmN0aW9uXCI7XG4gICAgQmFzaWNUeXBlc1tcImRhdGVcIl0gPSBcImRhdGVcIjtcbiAgICBCYXNpY1R5cGVzW1widW5rbm93blwiXSA9IFwidW5rbm93blwiO1xuICAgIEJhc2ljVHlwZXNbXCJvYmplY3RcIl0gPSBcIm9iamVjdFwiO1xufSkoQmFzaWNUeXBlcyB8fCAoQmFzaWNUeXBlcyA9IHt9KSk7XG5jb25zdCB2ZXJzaW9uID0gRGF0ZS5ub3coKTtcbi8qKiBVc2VkIGFzIGRpcmVjdCBtZW1vcnkgY29tcGFyaXNvbnMsIHRoZSBzdHJpbmdzIGFyZSBuZXZlciBjb21wYXJlZCwganVzdCB0aGUgYXJyYXkgKi9cbmV4cG9ydCBjb25zdCBWYWx1ZVR5cGVzID0ge1xuICAgIHRhZzogJ2h0bWwnLCAvLyBodG1sJycgYWthIFN0cmluZ1RhZyB8IERvbVRhZ1xuICAgIGRvbTogJ2RvbScsIC8vIGNvbXBpbGVkIHZlcnNpb24gb2YgaHRtbCcnXG4gICAgdGVtcGxhdGVyOiAndGVtcGxhdGVyJyxcbiAgICB0YWdDb21wb25lbnQ6ICd0YWdDb21wb25lbnQnLFxuICAgIHRhZ0FycmF5OiAndGFnQXJyYXknLFxuICAgIGhvc3Q6ICdob3N0JyxcbiAgICBzdWJzY3JpYmU6ICdzdWJzY3JpYmUnLFxuICAgIHNpZ25hbDogJ3NpZ25hbCcsXG4gICAgcmVuZGVyT25jZTogJ3JlbmRlck9uY2UnLFxuICAgIHN0YXRlUmVuZGVyOiAnc3RhdGVSZW5kZXInLFxuICAgIHZlcnNpb24sXG59O1xuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgSW1tdXRhYmxlVHlwZXMgfSBmcm9tIFwiLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qc1wiO1xuaW1wb3J0IHsgdmFyaWFibGVQcmVmaXgsIHZhcmlhYmxlU3VmZml4IH0gZnJvbSBcIi4uLy4uL3RhZy9Eb21UYWcudHlwZS5qc1wiO1xuaW1wb3J0IHsgcGxhY2Vob2xkZXJSZWdleCB9IGZyb20gXCIuLi8uLi9yZW5kZXIvYXR0cmlidXRlcy9nZXRUYWdWYXJJbmRleC5mdW5jdGlvbi5qc1wiO1xuY29uc3QgY2ggPSAnY2gnOyAvLyBzaG9ydCBmb3IgY2hpbGRyZW5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlUGxhY2Vob2xkZXJzKGRvbSwgdmFsdWVDb3VudCwgdmFsdWVQb3NpdGlvbnMgPSBbXSwgY3VycmVudFRhaWwgPSBbXSkge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gZG9tO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbG9vcFRhaWwgPSBbLi4uY3VycmVudFRhaWwsIGldO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgIGlmIChlbGVtZW50LmF0KSB7XG4gICAgICAgICAgICBjb25zdCBhdHRycyA9IGVsZW1lbnQuYXQ7XG4gICAgICAgICAgICBlbGVtZW50LmF0ID0gcHJvY2Vzc0F0dHJpYnV0ZXMoYXR0cnMsIHZhbHVlQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50LmNoKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGVsZW1lbnQuY2g7XG4gICAgICAgICAgICBjb25zdCBpbm5lckxvb3BUYWlsID0gWy4uLmxvb3BUYWlsLCBjaF07XG4gICAgICAgICAgICBlbGVtZW50LmNoID0gcmVwbGFjZVBsYWNlaG9sZGVycyhjaGlsZHJlbiwgdmFsdWVDb3VudCwgdmFsdWVQb3NpdGlvbnMsIGlubmVyTG9vcFRhaWwpO1xuICAgICAgICB9XG4gICAgICAgIGkgPSBleGFtaW5lQ2hpbGQoZWxlbWVudCwgdmFsdWVDb3VudCwgZWxlbWVudHMsIGkpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudHM7XG59XG5mdW5jdGlvbiBleGFtaW5lQ2hpbGQoY2hpbGQsIHZhbHVlQ291bnQsIGNoaWxkcmVuLCBpbmRleCkge1xuICAgIGlmIChjaGlsZC5ubiAhPT0gJ3RleHQnKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgY29uc3QgdGV4dENoaWxkID0gY2hpbGQ7XG4gICAgbGV0IHRleHRDb250ZW50ID0gdGV4dENoaWxkLnRjO1xuICAgIGlmICh0eXBlb2YgdGV4dENvbnRlbnQgIT09IEltbXV0YWJsZVR5cGVzLnN0cmluZykge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gcGxhY2Vob2xkZXJSZWdleC5leGVjKHRleHRDb250ZW50KSkgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc2Vjb25kTWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgICAgY29uc3Qgd0luZGV4ID0gcGFyc2VJbnQoc2Vjb25kTWF0Y2gsIDEwKTtcbiAgICAgICAgY29uc3QgZXhhbWluZSA9ICFpc05hTih3SW5kZXgpICYmIHdJbmRleCA8IHZhbHVlQ291bnQ7XG4gICAgICAgIGlmIChleGFtaW5lKSB7XG4gICAgICAgICAgICBjb25zdCB2YXJDb250ZW50ID0gdmFyaWFibGVQcmVmaXggKyB3SW5kZXggKyB2YXJpYWJsZVN1ZmZpeDtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gdGV4dENvbnRlbnQuc2xpY2UobWF0Y2guaW5kZXggKyB2YXJDb250ZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgICAgICAgICBubjogJ3RleHQnLFxuICAgICAgICAgICAgICAgIHY6IHdJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZXh0Q29udGVudCA9IGFmdGVyO1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJSZWdleC5sYXN0SW5kZXggPSAwOyAvLyBSZXNldCByZWdleCBpbmRleCBkdWUgdG8gc3BsaXRcbiAgICAgICAgfVxuICAgIH1cbiAgICB0ZXh0Q2hpbGQudGMgPSB0ZXh0Q29udGVudDtcbiAgICByZXR1cm4gaW5kZXg7XG59XG5mdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCB2YWx1ZUNvdW50KSB7XG4gICAgY29uc3QgbWFwcGVkID0gW107XG4gICAgZm9yIChjb25zdCBhdHRyU2V0IG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgY29uc3QgW2tleSwgdmFsdWUsIGlzU3BlY2lhbF0gPSBhdHRyU2V0O1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGtleS5yZXBsYWNlKHZhcmlhYmxlUHJlZml4LCAnJyksIDEwKTtcbiAgICAgICAgICAgIGlmICghaXNOYU4oaW5kZXgpICYmIGluZGV4IDwgdmFsdWVDb3VudCkge1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKFt7IHRhZ0pzVmFyOiBpbmRleCB9XSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gSW1tdXRhYmxlVHlwZXMuc3RyaW5nICYmIHZhbHVlLnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHZhbHVlLnJlcGxhY2UodmFyaWFibGVQcmVmaXgsICcnKSwgMTApO1xuICAgICAgICAgICAgaWYgKCFpc05hTihpbmRleCkgJiYgaW5kZXggPCB2YWx1ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgbWFwcGVkLnB1c2goW2tleSwgeyB0YWdKc1ZhcjogaW5kZXggfSwgaXNTcGVjaWFsXSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFwcGVkLnB1c2goYXR0clNldCk7XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3RyaW5nc0lkKHN0cmluZ3MpIHtcbiAgICBjb25zdCBhcnJheSA9IHN0cmluZ3MubWFwKGxlbmd0aE1hcHBlcik7XG4gICAgYXJyYXkucHVzaChzdHJpbmdzLmxlbmd0aCk7XG4gICAgcmV0dXJuIE51bWJlcihhcnJheS5qb2luKCcnKSk7XG59XG5mdW5jdGlvbiBsZW5ndGhNYXBwZXIoeCkge1xuICAgIHJldHVybiB4Lmxlbmd0aDtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IGh0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9odG1sSW50ZXJwb2xhdGlvblRvRG9tTWV0YS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZXBsYWNlUGxhY2Vob2xkZXJzIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9yZXBsYWNlUGxhY2Vob2xkZXJzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTGFzdFJ1bk1hdGNoZWQgfSBmcm9tICcuL2lzTGFzdFJ1bk1hdGNoZWQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3RyaW5nc0lkIH0gZnJvbSAnLi9nZXRTdHJpbmdzSWQuZnVuY3Rpb24uanMnO1xuY29uc3QgbGFzdFJ1bnMgPSB7fTtcbi8qKiBNZXJnZXMgc3RyaW5ncyAmIHZhbHVlcyB3aXRoIGRvbSBtZXRhIGludG8gYSBodG1sIGFycmF5IHRyZWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21NZXRhKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIGNvbnN0IHN0cmluZ0lkID0gZ2V0U3RyaW5nc0lkKHN0cmluZ3MpO1xuICAgIGNvbnN0IGxhc3RSdW4gPSBsYXN0UnVuc1tzdHJpbmdJZF07XG4gICAgY29uc3QgbWF0Y2hlcyA9IGxhc3RSdW4gJiYgaXNMYXN0UnVuTWF0Y2hlZChzdHJpbmdzLCB2YWx1ZXMsIGxhc3RSdW4pO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBsYXN0UnVuLmRvbU1ldGFNYXA7XG4gICAgfVxuICAgIGNvbnN0IGRvbU1ldGEgPSBodG1sSW50ZXJwb2xhdGlvblRvRG9tTWV0YShzdHJpbmdzLCB2YWx1ZXMpO1xuICAgIGNvbnN0IG1hcCA9IHJlcGxhY2VQbGFjZWhvbGRlcnMoZG9tTWV0YSwgdmFsdWVzLmxlbmd0aCk7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICAgIGludGVycG9sYXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgc3RyaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIHN0cmluZ3MsXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgZG9tTWV0YU1hcDogbWFwLFxuICAgIH07XG4gICAgbGFzdFJ1bnNbc3RyaW5nSWRdID0gdGVtcGxhdGU7XG4gICAgcmV0dXJuIG1hcDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc0xhc3RSdW5NYXRjaGVkKHN0cmluZ3MsIHZhbHVlcywgbGFzdFJ1bikge1xuICAgIGlmIChsYXN0UnVuKSB7XG4gICAgICAgIGlmIChsYXN0UnVuLnN0cmluZ3MubGVuZ3RoID09PSBzdHJpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nc01hdGNoID0gbGFzdFJ1bi5zdHJpbmdzLmV2ZXJ5KChzdHJpbmcsIGluZGV4KSA9PiBcbiAgICAgICAgICAgIC8vIHN0cmluZy5sZW5ndGggPT09IHN0cmluZ3NbaW5kZXhdLmxlbmd0aFxuICAgICAgICAgICAgc3RyaW5nID09PSBzdHJpbmdzW2luZGV4XSk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nc01hdGNoICYmIGxhc3RSdW4udmFsdWVzLmxlbmd0aCA9PT0gdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBwZXJmb3JtYW5jZSBzYXZpbmdzIHVzaW5nIHRoZSBsYXN0IHRpbWUgdGhpcyBjb21wb25lbnQgd2FzIHJlbmRlcmVkXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiZXhwb3J0IGNvbnN0IGJsYW5rSGFuZGxlciA9IGZ1bmN0aW9uIGJsYW5rSGFuZGxlcigpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiIsImltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbi8qKiBUeXBpY2FsbHkgdXNlZCBmb3IgYW5pbWF0aW9ucyB0byBydW4gYmVmb3JlIGNsZWFyaW5nIGVsZW1lbnRzICovXG5leHBvcnQgZnVuY3Rpb24gYWRkUGFpbnRSZW1vdmVBd2FpdChwcm9taXNlKSB7XG4gICAgLypcbiAgICBpZihwYWludFJlbW92ZUF3YWl0cy5sZW5ndGgpIHtcbiAgICAgIHBhaW50UmVtb3ZlQXdhaXRzW3BhaW50UmVtb3ZlQXdhaXRzLmxlbmd0aCAtIDFdLnBhaW50UmVtb3Zlcy5wdXNoKCAuLi5wYWludFJlbW92ZXMgKVxuICAgICAgcGFpbnRSZW1vdmVzID0gW11cbiAgICB9XG4gIFxuICAgIHBhaW50UmVtb3ZlQXdhaXRzLnB1c2goe3Byb21pc2UsIHBhaW50UmVtb3Zlc30pXG4gICAgcGFpbnRSZW1vdmVzID0gW11cbiAgICAqL1xufVxuLy8gbGV0IHBhaW50UmVtb3ZlQXdhaXRzOiB7cHJvbWlzZTogUHJvbWlzZTxhbnk+LCBwYWludFJlbW92ZXM6IFBhaW50Q29tbWFuZFtdfVtdID0gW11cbmV4cG9ydCBsZXQgcGFpbnRDb21tYW5kcyA9IFtdO1xuLy8gZXhwb3J0IGxldCBwYWludFJlbW92ZXM6IFBhaW50Q29tbWFuZFtdID0gW11cbmV4cG9ydCBjb25zdCBwYWludFJlbW92ZXMgPSBbXTtcbmV4cG9ydCBsZXQgcGFpbnRDb250ZW50ID0gW107XG4vLyBUT0RPOiBUaGlzIHRoaXMgaXMgZHVwbGljYXRlIG9mIHBhaW50Q29tbWFuZHMgKGhvd2V2ZXIgdGltaW5nIGlzIGN1cnJlbnRseSBhbmQgaXNzdWUgYW5kIGNhbnQgYmUgcmVtb3ZlZClcbmV4cG9ydCBsZXQgcGFpbnRBcHBlbmRzID0gW107XG5leHBvcnQgbGV0IHBhaW50QWZ0ZXJzID0gW107IC8vIGNhbGxiYWNrcyBhZnRlciBhbGwgcGFpbnRlZFxuZXhwb3J0IGNvbnN0IHBhaW50aW5nID0ge1xuICAgIGxvY2tzOiAwLFxuICAgIHJlbW92ZUxvY2tzOiAwLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZW50KHRleHQsIHRleHROb2RlKSB7XG4gICAgdGV4dE5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhaW50KCkge1xuICAgIGlmIChwYWludGluZy5sb2NrcyA+IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gcnVuQ3ljbGVzKCk7XG59XG5mdW5jdGlvbiBydW5DeWNsZXMoKSB7XG4gICAgcnVuUGFpbnRDeWNsZXMoKTtcbiAgICBydW5BZnRlckN5Y2xlKCk7XG59XG4vKiogRGVsZXRlcyBoYXBwZW4gbGFzdCAqL1xuZnVuY3Rpb24gcnVuQWZ0ZXJDeWNsZSgpIHtcbiAgICBwYWludFJlc2V0KCk7XG4gICAgY29uc3Qgbm93UGFpbnRBZnRlcnMgPSBwYWludEFmdGVycztcbiAgICBwYWludEFmdGVycyA9IFtdOyAvLyBwcmV2ZW50IHBhaW50QWZ0ZXJzIGNhbGxzIGZyb20gZW5kbGVzcyByZWN1cnNpb25cbiAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2Ygbm93UGFpbnRBZnRlcnMpIHtcbiAgICAgICAgY29udGVudFswXSguLi5jb250ZW50WzFdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBydW5QYWludFJlbW92ZXMoKSB7XG4gICAgLy8gZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkXG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIHBhaW50UmVtb3Zlcykge1xuICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJ1blBhaW50Q3ljbGVzKCkge1xuICAgIGNvbnN0IHJlbW92ZXMgPSBwYWludFJlbW92ZXMubGVuZ3RoO1xuICAgIHJ1blBhaW50UmVtb3ZlcygpO1xuICAgIC8vIHBhaW50UmVtb3ZlcyA9IFtdXG4gICAgcGFpbnRSZW1vdmVzLnNwbGljZSgwLCByZW1vdmVzKTtcbiAgICAvLyBzdHlsZXMvYXR0cmlidXRlcyBhbmQgdGV4dEVsZW1lbnQudGV4dENvbnRlbnRcbiAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2YgcGFpbnRDb250ZW50KSB7XG4gICAgICAgIGNvbnRlbnRbMF0oLi4uY29udGVudFsxXSk7XG4gICAgfVxuICAgIC8vIC5hcHBlbmRDaGlsZFxuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBwYWludEFwcGVuZHMpIHtcbiAgICAgICAgY29udGVudFswXSguLi5jb250ZW50WzFdKTtcbiAgICB9XG4gICAgLy8gZWxlbWVudC5pbnNlcnRCZWZvcmVcbiAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2YgcGFpbnRDb21tYW5kcykge1xuICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhaW50UmVzZXQoKSB7XG4gICAgcGFpbnRDb21tYW5kcyA9IFtdO1xuICAgIHBhaW50Q29udGVudCA9IFtdO1xuICAgIHBhaW50QXBwZW5kcyA9IFtdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZFBhaW50UmVtb3ZlcihlbGVtZW50LCBjYWxsZXIpIHtcbiAgICBwYWludFJlbW92ZXMucHVzaChbcGFpbnRSZW1vdmVyLCBbZWxlbWVudCwgY2FsbGVyXV0pO1xufVxuLyoqIG11c3QgYmUgdXNlZCB3aXRoIHBhaW50UmVtb3ZlcyAqL1xuZnVuY3Rpb24gcGFpbnRSZW1vdmVyKGVsZW1lbnQsIF9jYWxsZXIpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdubyBlbGVtZW50IGJ5JywgX2NhbGxlcik7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEJlZm9yZShyZWxhdGl2ZSwgZWxlbWVudCwgX2NhbGxlcikge1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSByZWxhdGl2ZS5wYXJlbnROb2RlO1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHJlbGF0aXZlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEFwcGVuZChyZWxhdGl2ZSwgZWxlbWVudCkge1xuICAgIHJlbGF0aXZlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xufVxuY29uc3QgY29udGVudENsZWFuZXIgPSAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7IC8vIHVzZWQgZm9yIGNvbnRlbnQgY2xlYW5pbmdcbmZ1bmN0aW9uIHRvUGxhaW5UZXh0RWxtKHRleHQpIHtcbiAgICAvLyBzd2FwICZndDsgZm9yID5cbiAgICBjb250ZW50Q2xlYW5lci5pbm5lckhUTUwgPSB0ZXh0OyAvLyBzY3JpcHQgdGFncyBzaG91bGQgaGF2ZSBhbHJlYWR5IGJlZW4gc2FuaXRpemVkIGJlZm9yZSB0aGlzIHN0ZXBcbiAgICAvLyBkZWxldGUgPCEtLSAtLT5cbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudENsZWFuZXIuaW5uZXJIVE1MKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEJlZm9yZVRleHQocmVsYXRpdmUsIHRleHQsIGNhbGxiYWNrID0gYmxhbmtIYW5kbGVyLCBfY2FsbGVyKSB7XG4gICAgY29uc3QgdGV4dEVsbSA9IHRvUGxhaW5UZXh0RWxtKHRleHQpO1xuICAgIHBhaW50QmVmb3JlKHJlbGF0aXZlLCB0ZXh0RWxtLCBfY2FsbGVyKTtcbiAgICBjYWxsYmFjayh0ZXh0RWxtKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludEFwcGVuZFRleHQocmVsYXRpdmUsIHRleHQsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgdGV4dEVsbSA9IHRvUGxhaW5UZXh0RWxtKHRleHQpO1xuICAgIHBhaW50QXBwZW5kKHJlbGF0aXZlLCB0ZXh0RWxtKTtcbiAgICBjYWxsYmFjayh0ZXh0RWxtKTtcbn1cbi8qKiBVc2VkIHdoZW4gSFRNTCBjb250ZW50IGlzIHNhZmUgYW5kIGV4cGVjdGVkICovXG5leHBvcnQgZnVuY3Rpb24gcGFpbnRCZWZvcmVFbGVtZW50U3RyaW5nKHJlbGF0aXZlLCB0ZXh0LCBjYWxsYmFjayA9IGJsYW5rSGFuZGxlcikge1xuICAgIGNvbnRlbnRDbGVhbmVyLmlubmVySFRNTCA9IHRleHQ7XG4gICAgY29uc3QgdGV4dEVsbSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbnRlbnRDbGVhbmVyLnRleHRDb250ZW50KTsgLy8gdG9QbGFpblRleHRFbG0odGV4dClcbiAgICBwYWludEJlZm9yZShyZWxhdGl2ZSwgdGV4dEVsbSwgJ3BhaW50QmVmb3JlRWxlbWVudFN0cmluZycpO1xuICAgIGNhbGxiYWNrKHRleHRFbG0pO1xufVxuLyoqIFVzZWQgd2hlbiBIVE1MIGNvbnRlbnQgaXMgc2FmZSBhbmQgZXhwZWN0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWludEFwcGVuZEVsZW1lbnRTdHJpbmcocmVsYXRpdmUsIHRleHQsIGNhbGxiYWNrKSB7XG4gICAgY29udGVudENsZWFuZXIuaW5uZXJIVE1MID0gdGV4dDtcbiAgICBjb25zdCB0ZXh0RWxtID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudENsZWFuZXIudGV4dENvbnRlbnQpOyAvLyB0b1BsYWluVGV4dEVsbSh0ZXh0KVxuICAgIHBhaW50QXBwZW5kKHJlbGF0aXZlLCB0ZXh0RWxtKTtcbiAgICBjYWxsYmFjayh0ZXh0RWxtKTtcbn1cbiIsImltcG9ydCB7IGFkZFBhaW50UmVtb3ZlciB9IGZyb20gJy4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQ29udGV4dFN1YkNvbnRleHQoY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICBjb25zdCByZXN1bHQgPSBkZWxldGVTdWJDb250ZXh0KHN1YnNjcmlwdGlvbiwgb3duZXJTdXBwb3J0KTtcbiAgICBkZWxldGUgY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVN1YkNvbnRleHQoc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgc3ViQ29udGV4dC5kZWxldGVkID0gdHJ1ZTtcbiAgICBjb25zdCBhcHBlbmRNYXJrZXIgPSBzdWJDb250ZXh0LmFwcGVuZE1hcmtlcjtcbiAgICBpZiAoYXBwZW5kTWFya2VyKSB7XG4gICAgICAgIGFkZFBhaW50UmVtb3ZlcihhcHBlbmRNYXJrZXIsICdkZWxldGVTdWJDb250ZXh0Jyk7XG4gICAgICAgIGRlbGV0ZSBzdWJDb250ZXh0LmFwcGVuZE1hcmtlcjtcbiAgICB9XG4gICAgLy8gZGVsZXRlIChjb250ZXh0SXRlbSBhcyBhbnkpLmRlc3Ryb3lcbiAgICBpZiAoIXN1YkNvbnRleHQuaGFzRW1pdHRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN1YkNvbnRleHRJdGVtID0gc3ViQ29udGV4dC5jb250ZXh0SXRlbTtcbiAgICBjb25zdCBzdWJUYWdKc1ZhciA9IHN1YkNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgIHN1YlRhZ0pzVmFyLmRlc3Ryb3koc3ViQ29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgcmV0dXJuIDc2O1xufVxuIiwiaW1wb3J0IHsgQmFzaWNUeXBlcywgSW1tdXRhYmxlVHlwZXMsIFZhbHVlVHlwZXMgfSBmcm9tICcuL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2ltcGxlVHlwZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSBJbW11dGFibGVUeXBlcy5zdHJpbmc6XG4gICAgICAgIGNhc2UgSW1tdXRhYmxlVHlwZXMubnVtYmVyOlxuICAgICAgICBjYXNlIEltbXV0YWJsZVR5cGVzLmJvb2xlYW46XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqIEluZGljYXRlcyBpZiB0YWcoKSB3YXMgdXNlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3RhdGljVGFnKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IHZhbHVlLnRhZ0pzVHlwZTtcbiAgICBzd2l0Y2ggKHRhZ0pzVHlwZSkge1xuICAgICAgICBjYXNlIFZhbHVlVHlwZXMuZG9tOlxuICAgICAgICBjYXNlIFZhbHVlVHlwZXMudGFnOlxuICAgICAgICBjYXNlIFZhbHVlVHlwZXMudGVtcGxhdGVyOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKiBwYXNzZWQgaW4gaXMgZXhwZWN0ZWQgdG8gYmUgYSBUZW1wbGF0ZXJSZXN1bHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RhZ0NvbXBvbmVudCh2YWx1ZSkge1xuICAgIGNvbnN0IHRhZ1R5cGUgPSB2YWx1ZT8udGFnSnNUeXBlO1xuICAgIHJldHVybiB0YWdUeXBlID09PSBWYWx1ZVR5cGVzLnRhZ0NvbXBvbmVudCB8fCB0YWdUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyO1xufVxuLy8gaXNTdWJqZWN0TGlrZVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3ViamVjdEluc3RhbmNlKHN1YmplY3QpIHtcbiAgICByZXR1cm4gaXNPYmplY3Qoc3ViamVjdCkgJiYgdHlwZW9mIHN1YmplY3Quc3Vic2NyaWJlID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uO1xuICAgIC8vIFRPRE86IFN0YXJ0IHVzaW5nIHRoaXMgaW5zdGVhZFxuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLm9iamVjdCAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuIiwiLyoqIE9ubHkgdXNlZCBpbiBUYWdTdXBwb3J0ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKSB7XG4gICAgLy8gVE9ETzogTm90IG5lZWQgZm9yIGJhc2ljIHN1cHBvcnRzLCBvbmx5IHRhZygpXG4gICAgY29udGV4dEl0ZW0ucmVuZGVyQ291bnQgPSBjb250ZXh0SXRlbS5yZW5kZXJDb3VudCB8fCAwO1xuICAgIC8vIFRPRE86IE5vdCBuZWVkIGZvciBiYXNpYyBzdXBwb3J0cywgb25seSB0YWcoKVxuICAgIGNvbnRleHRJdGVtLnN0YXRlID0ge1xuICAgICAgICBuZXdlcjoge1xuICAgICAgICAgICAgc3RhdGU6IFtdLFxuICAgICAgICAgICAgc3RhdGVzOiBbXSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBjb250ZXh0SXRlbS5nbG9iYWwgPSB7XG4gICAgICAgIGJsb2NrZWQ6IFtdLFxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuLi8uLi9zdGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBzZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4vc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRJbkN5Y2xlKCkge1xuICAgIHJldHVybiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3VwcG9ydDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdXBwb3J0SW5DeWNsZShzdXBwb3J0KSB7XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoc3VwcG9ydC5jb250ZXh0KTtcbiAgICByZXR1cm4gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN1cHBvcnQgPSBzdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBmaW5kU3RhdGVTdXBwb3J0VXBDb250ZXh0KGNvbnRleHQpIHtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlO1xuICAgIGlmIChzdGF0ZU1ldGEgJiYgc3RhdGVNZXRhLm5ld2VzdCAmJiBzdGF0ZU1ldGEubmV3ZXN0KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZU1ldGEubmV3ZXN0O1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5wYXJlbnRDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBmaW5kU3RhdGVTdXBwb3J0VXBDb250ZXh0KGNvbnRleHQucGFyZW50Q29udGV4dCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRXaXRoU3RhdGUoc3VwcG9ydCkge1xuICAgIC8vIGdldCBhY3R1YWwgY29tcG9uZW50IG93bmVyIG5vdCBqdXN0IHRoZSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3NjMyN1swXSkgc3VwcG9ydFxuICAgIGxldCBjb21wb25lbnQgPSBzdXBwb3J0O1xuICAgIHdoaWxlIChjb21wb25lbnQub3duZXJTdXBwb3J0ICYmICFpc1RhZ0NvbXBvbmVudChjb21wb25lbnQudGVtcGxhdGVyKSkge1xuICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnQub3duZXJTdXBwb3J0O1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gY29tcG9uZW50LmNvbnRleHQ7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICBpZiAoIXN0YXRlTWV0YSkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGVNZXRhLm5ld2VzdCB8fCBjb21wb25lbnQ7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNzYzMjc6IFtbXV0gfTtcbiIsImltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0V2l0aFN0YXRlIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbmZ1bmN0aW9uIHJldHVybkFyZ3MoLi4uYXJncykge1xuICAgIHJldHVybiBhcmdzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0U3RhdGVzSGFuZGxlcihzZXR0ZXIpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgY29uZmlnLnN0YXRlc1tjb25maWcuc3RhdGVzSW5kZXhdID0gc2V0dGVyO1xuICAgICsrY29uZmlnLnN0YXRlc0luZGV4O1xuICAgIHJldHVybiBzZXR0ZXIocmV0dXJuQXJncyk7XG59XG4vKiogYWthIHN0YXRlc0hhbmRsZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiByZVN0YXRlc0hhbmRsZXIoc2V0dGVyKSB7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbnN0IHN0YXRlc0luZGV4ID0gY29uZmlnLnN0YXRlc0luZGV4O1xuICAgIGNvbnN0IHByZXZTdXBwb3J0ID0gZ2V0U3VwcG9ydFdpdGhTdGF0ZShjb25maWcucHJldlN1cHBvcnQpO1xuICAgIGNvbnN0IHByZXZDb250ZXh0ID0gcHJldlN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBwcmV2Q29udGV4dC5zdGF0ZTtcbiAgICAvLyBjb25zdCBwcmV2U3RhdGVNZXRhID0gc3RhdGVNZXRhLm9sZGVyIGFzIENvbnRleHRTdGF0ZVN1cHBvcnRcbiAgICBjb25zdCBwcmV2U3RhdGVNZXRhID0gc3RhdGVNZXRhLm5ld2VyO1xuICAgIGNvbnN0IHByZXZTdGF0ZXMgPSBwcmV2U3RhdGVNZXRhLnN0YXRlcztcbiAgICAvLyBjb25zdCBwcmV2U3RhdGVzID0gY29uZmlnLnN0YXRlc1xuICAgIGNvbnN0IG9sZFN0YXRlcyA9IHByZXZTdGF0ZXNbc3RhdGVzSW5kZXhdO1xuICAgIGxldCBsYXN0VmFsdWVzID0gW107XG4gICAgb2xkU3RhdGVzKGZ1bmN0aW9uIHJlZ2V0dGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgbGFzdFZhbHVlcyA9IGFyZ3M7XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc2V0dGVyID0gZnVuY3Rpb24gc3RhdGVSZXNldHRlciguLi5fYXJncykge1xuICAgICAgICByZXR1cm4gbGFzdFZhbHVlcztcbiAgICB9O1xuICAgIGNvbmZpZy5zdGF0ZXNbY29uZmlnLnN0YXRlc0luZGV4XSA9IHNldHRlcjtcbiAgICArK2NvbmZpZy5zdGF0ZXNJbmRleDtcbiAgICByZXR1cm4gc2V0dGVyKHJlc2V0dGVyKTtcbn1cbiIsImltcG9ydCB7IHJ1bkZpcnN0U3RhdGUsIHJ1blJlc3RhdGUgfSBmcm9tICcuL3N0YXRlSGFuZGxlcnMuanMnO1xuaW1wb3J0IHsgZmlyc3RTdGF0ZXNIYW5kbGVyLCByZVN0YXRlc0hhbmRsZXIgfSBmcm9tICcuL3N0YXRlcy51dGlscy5qcyc7XG5pbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG4vKiogVG8gYmUgY2FsbGVkIGJlZm9yZSByZW5kZXJpbmcgYW55dGhpbmcgd2l0aCBhIHN0YXRlICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFN0YXRlKGNvbnRleHQpIHtcbiAgICBzZXRDb250ZXh0SW5DeWNsZShjb250ZXh0KTtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgY29uZmlnLmhhbmRsZXJzLmhhbmRsZXIgPSBydW5GaXJzdFN0YXRlO1xuICAgIGNvbmZpZy5oYW5kbGVycy5zdGF0ZXNIYW5kbGVyID0gZmlyc3RTdGF0ZXNIYW5kbGVyO1xuICAgIGNvbmZpZy5yZWFycmF5ID0gW107XG4gICAgY29uc3Qgc3RhdGUgPSBjb25maWcuc3RhdGUgPSBbXTtcbiAgICBjb25zdCBzdGF0ZXMgPSBjb25maWcuc3RhdGVzID0gW107XG4gICAgY29uZmlnLnN0YXRlc0luZGV4ID0gMDtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlID0gY29udGV4dC5zdGF0ZSB8fCB7fTtcbiAgICBzdGF0ZU1ldGEubmV3ZXIgPSB7IHN0YXRlLCBzdGF0ZXMgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZVN0YXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlO1xuICAgIHJldHVybiByZVN0YXRlQnlQcmV2KHN0YXRlTWV0YS5uZXdlci5zdGF0ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVTdGF0ZUJ5UHJldihwcmV2U3RhdGUpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgLy8gc2V0IHByZXZpb3VzIHN0YXRlIG1lbW9yeVxuICAgIGNvbmZpZy5yZWFycmF5ID0gcHJldlN0YXRlO1xuICAgIGNvbmZpZy5zdGF0ZSA9IFtdO1xuICAgIGNvbmZpZy5zdGF0ZXMgPSBbXTtcbiAgICBjb25maWcuc3RhdGVzSW5kZXggPSAwO1xuICAgIGNvbmZpZy5oYW5kbGVycy5oYW5kbGVyID0gcnVuUmVzdGF0ZTtcbiAgICBjb25maWcuaGFuZGxlcnMuc3RhdGVzSGFuZGxlciA9IHJlU3RhdGVzSGFuZGxlcjtcbiAgICByZXR1cm4gY29uZmlnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlU3RhdGVTdXBwb3J0KG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCBwcmV2U3RhdGUpIHtcbiAgICByZVN0YXRlQnlQcmV2KHByZXZTdGF0ZSk7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbmZpZy5wcmV2U3VwcG9ydCA9IHByZXZTdXBwb3J0O1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKG5ld1N1cHBvcnQpO1xufVxuZXhwb3J0IGNsYXNzIFN0YXRlRWNob0JhY2sge1xufVxuLyoqIHNlbmRzIGEgZmFrZSB2YWx1ZSBhbmQgdGhlbiBzZXRzIGJhY2sgdG8gcmVjZWl2ZWQgdmFsdWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWxsYmFja1ZhbHVlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgW3ZhbHVlXSA9IGNhbGxiYWNrKFN0YXRlRWNob0JhY2spOyAvLyBnZXQgdmFsdWUgYW5kIHNldCB0byB1bmRlZmluZWRcbiAgICBjb25zdCBbY2hlY2tWYWx1ZV0gPSBjYWxsYmFjayh2YWx1ZSk7IC8vIHNldCBiYWNrIHRvIG9yaWdpbmFsIHZhbHVlXG4gICAgcmV0dXJuIFt2YWx1ZSwgY2hlY2tWYWx1ZV07XG59XG4iLCJpbXBvcnQgeyBnZXRDYWxsYmFja1ZhbHVlIH0gZnJvbSAnLi9zdGF0ZS51dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGVWYWx1ZShzdGF0ZSkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gc3RhdGUuY2FsbGJhY2s7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gc3RhdGUuZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBbdmFsdWVdID0gZ2V0Q2FsbGJhY2tWYWx1ZShjYWxsYmFjayk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IGdldFN0YXRlVmFsdWUgfSBmcm9tICcuL2dldFN0YXRlVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBydW5SZXN0YXRlKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBjb25zdCByZWFycmF5ID0gY29uZmlnLnJlYXJyYXk7XG4gICAgY29uc3QgcmVzdGF0ZSA9IHJlYXJyYXlbY29uZmlnLnN0YXRlLmxlbmd0aF07XG4gICAgY29uZmlnLnN0YXRlLnB1c2gocmVzdGF0ZSk7XG4gICAgcmV0dXJuIHJlc3RhdGUuZGVmYXVsdFZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkZpcnN0U3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgIGlmICghY29udGV4dCB8fCAhY29udGV4dC5zdGF0ZSkge1xuICAgICAgICBjb25zdCBtc2cgPSAnU3RhdGUgcmVxdWVzdGVkIGJ1dCBUYWdnZWRKcyBpcyBub3QgY3VycmVudGx5IHJlbmRlcmluZyBhIHRhZyBvciBob3N0JztcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2csIHsgY29uZmlnLCBjb250ZXh0IH0pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgY29uc3QgbmV3ZXIgPSBjb250ZXh0LnN0YXRlLm5ld2VyO1xuICAgIGNvbmZpZy5zdGF0ZSA9IG5ld2VyLnN0YXRlO1xuICAgIC8vIFN0YXRlIGZpcnN0IHRpbWUgcnVuXG4gICAgbGV0IGluaXRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICBpZiAodHlwZW9mIChkZWZhdWx0VmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIGluaXRWYWx1ZSA9IGRlZmF1bHRWYWx1ZSgpO1xuICAgIH1cbiAgICAvLyB0aGUgc3RhdGUgaXMgYWN0dWFsbHkgaW50ZW5kZWQgdG8gYmUgYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgKGluaXRWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBpbml0VmFsdWU7XG4gICAgICAgIGluaXRWYWx1ZSA9IGZ1bmN0aW9uIGluaXRWYWx1ZUZ1biguLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcmlnaW5hbCguLi5hcmdzKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIGluaXRWYWx1ZS5vcmlnaW5hbCA9IG9yaWdpbmFsO1xuICAgIH1cbiAgICBjb25zdCBwdXNoID0ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIHB1c2hTdGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZVZhbHVlKHB1c2gpO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGluaXRWYWx1ZSxcbiAgICB9O1xuICAgIGNvbmZpZy5zdGF0ZS5wdXNoKHB1c2gpO1xuICAgIHJldHVybiBpbml0VmFsdWU7XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0LmNsYXNzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KHN1YmplY3RzKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0gbmV3IFN1YmplY3QoKTtcbiAgICBjb25zdCBzdWJzY3JpYmUgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzU2VlbiA9IFtdO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3Qgc2V0VmFsdWUgPSAoeCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1NlZW5baW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB4O1xuICAgICAgICAgICAgY29uc3QgY291bnRNYXRjaGVkID0gdmFsdWVzU2Vlbi5sZW5ndGggPT09IHN1YmplY3RzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICghY291bnRNYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlc1NlZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGV2ZXJ5b25lIGhhcyByZXBvcnRlZCB2YWx1ZXNcbiAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlcywgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xvbmVzID0gWy4uLnN1YmplY3RzXTtcbiAgICAgICAgY29uc3QgZmlyc3RTdWIgPSBjbG9uZXMuc2hpZnQoKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gZmlyc3RTdWIuc3Vic2NyaWJlKHggPT4gc2V0VmFsdWUoeCwgMCkpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gY2xvbmVzLm1hcCgoc3ViamVjdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzdWJqZWN0LnN1YnNjcmliZSh4ID0+IHNldFZhbHVlKHgsIGluZGV4ICsgMSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgb3V0cHV0LnN1YnNjcmliZVdpdGggPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbiIsImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QuY2xhc3MuanMnO1xuZnVuY3Rpb24gcmVtb3ZlU3ViRnJvbUFycmF5KHN1YnNjcmliZXJzLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gc3Vic2NyaWJlcnMuZmluZEluZGV4KHN1YiA9PiBzdWIuY2FsbGJhY2sgPT09IGNhbGxiYWNrKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHN1YnNjcmliZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbihzdWJqZWN0LCBjYWxsYmFjaywgc3Vic2NyaWJlcnMpIHtcbiAgICBjb25zdCBjb3VudFN1YmplY3QgPSBTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JDtcbiAgICBTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JC5uZXh0KGNvdW50U3ViamVjdC52YWx1ZSArIDEpO1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBzdWJzY3JpcHRpb24uY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICBzdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIC8vIFJldHVybiBhIGZ1bmN0aW9uIHRvIHVuc3Vic2NyaWJlIGZyb20gdGhlIEJlaGF2aW9yU3ViamVjdFxuICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbiwgc3Vic2NyaWJlcnMsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIHN1YnNjcmlwdGlvbi5hZGQgPSAoc3ViKSA9PiB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25zLnB1c2goc3ViKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHN1YnNjcmlwdGlvbi5uZXh0ID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKHZhbHVlLCBzdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBydW5QaXBlZE1ldGhvZHModmFsdWUsIG1ldGhvZHMsIG9uQ29tcGxldGUpIHtcbiAgICBjb25zdCBjbG9uZU1ldGhvZHMgPSBbLi4ubWV0aG9kc107XG4gICAgY29uc3QgZmlyc3RNZXRob2QgPSBjbG9uZU1ldGhvZHMuc2hpZnQoKTtcbiAgICBjb25zdCBuZXh0ID0gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChjbG9uZU1ldGhvZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcnVuUGlwZWRNZXRob2RzKG5ld1ZhbHVlLCBjbG9uZU1ldGhvZHMsIG9uQ29tcGxldGUpO1xuICAgICAgICB9XG4gICAgICAgIG9uQ29tcGxldGUobmV3VmFsdWUpO1xuICAgIH07XG4gICAgbGV0IGhhbmRsZXIgPSBuZXh0O1xuICAgIGNvbnN0IHNldEhhbmRsZXIgPSAoeCkgPT4gaGFuZGxlciA9IHg7XG4gICAgY29uc3QgcGlwZVV0aWxzID0geyBzZXRIYW5kbGVyLCBuZXh0IH07XG4gICAgY29uc3QgbWV0aG9kUmVzcG9uc2UgPSBmaXJzdE1ldGhvZCh2YWx1ZSwgcGlwZVV0aWxzKTtcbiAgICBoYW5kbGVyKG1ldGhvZFJlc3BvbnNlKTtcbn1cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbiwgc3Vic2NyaWJlcnMsIGNhbGxiYWNrKSB7XG4gICAgcmVtb3ZlU3ViRnJvbUFycmF5KHN1YnNjcmliZXJzLCBjYWxsYmFjayk7IC8vIGVhY2ggd2lsbCBiZSBjYWxsZWQgd2hlbiB1cGRhdGUgY29tZXMgaW5cbiAgICBjb25zdCB2YWxTdWIgPSBTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JDtcbiAgICBTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JC5uZXh0KHZhbFN1Yi52YWx1ZSAtIDEpO1xuICAgIC8vIGFueSBkb3VibGUgdW5zdWJzY3JpYmVzIHdpbGwgYmUgaWdub3JlZFxuICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSA9ICgpID0+IHN1YnNjcmlwdGlvbjtcbiAgICAvLyB1bnN1YnNjcmliZSBmcm9tIGFueSBjb21iaW5lZCBzdWJqZWN0c1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9ucztcbiAgICBmb3IgKGNvbnN0IHN1YiBvZiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufVxuIiwiaW1wb3J0IHsgaXNTdWJqZWN0SW5zdGFuY2UgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICcuL2NvbWJpbmVMYXRlc3QuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3Vic2NyaXB0aW9uLCBydW5QaXBlZE1ldGhvZHMgfSBmcm9tICcuL3N1YmplY3QudXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIFN1YmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBcbiAgICAvLyBwcml2YXRlPyAtIG9ubHkgdXNlZCBieSBleHRlbmRpbmcgY2xhc3Nlc1xuICAgIG9uU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMub25TdWJzY3JpcHRpb24gPSBvblN1YnNjcmlwdGlvbjtcbiAgICAgICAgLy8gcHJpdmF0ZT9cbiAgICAgICAgdGhpcy5tZXRob2RzID0gW107XG4gICAgICAgIHRoaXMuaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgICAgLy8gcHJpdmF0ZT9cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICAgICAgICB0aGlzLnNldCA9IHRoaXMubmV4dC5iaW5kKHRoaXMpO1xuICAgICAgICAvLyBkZWZpbmVWYWx1ZU9uKHRoaXMpXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBnZXRTdWJzY3JpcHRpb24odGhpcywgY2FsbGJhY2ssIHRoaXMuc3Vic2NyaWJlcnMpO1xuICAgICAgICAvLyBhcmUgd2Ugd2l0aGluIGEgcGlwZT9cbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlV2l0aCA9IHRoaXMuc3Vic2NyaWJlV2l0aDtcbiAgICAgICAgaWYgKHN1YnNjcmliZVdpdGgpIHtcbiAgICAgICAgICAgIC8vIGFyZSB3ZSBpbiBhIHBpcGU/XG4gICAgICAgICAgICBpZiAodGhpcy5tZXRob2RzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yZ0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuUGlwZWRNZXRob2RzKHZhbHVlLCB0aGlzLm1ldGhvZHMsIGxhc3RWYWx1ZSA9PiBvcmdDYWxsYmFjayhsYXN0VmFsdWUsIHN1YnNjcmlwdGlvbikpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlV2l0aChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGlmICh0aGlzLm9uU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm9uU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9XG4gICAgbmV4dCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdCgpO1xuICAgIH1cbiAgICBlbWl0KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIC8vIE5vdGlmeSBhbGwgc3Vic2NyaWJlcnMgd2l0aCB0aGUgbmV3IHZhbHVlXG4gICAgICAgIC8vIGNvbnN0IHN1YnMgPSBbLi4udGhpcy5zdWJzY3JpYmVyc10gLy8gc3VicyBtYXkgY2hhbmdlIGFzIHdlIGNhbGwgY2FsbGJhY2tzXG4gICAgICAgIGNvbnN0IHN1YnMgPSB0aGlzLnN1YnNjcmliZXJzOyAvLyBzdWJzIG1heSBjaGFuZ2UgYXMgd2UgY2FsbCBjYWxsYmFja3NcbiAgICAgICAgLy8gY29uc3QgbGVuZ3RoID0gc3Vicy5sZW5ndGhcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vicykge1xuICAgICAgICAgICAgc3ViLmNhbGxiYWNrKHZhbHVlLCBzdWIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZSgoeCwgc3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgcmVzKHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogbGlrZSB0b1Byb21pc2UgYnV0IGZhc3Rlci4gT25seSBnZXQgY2FsbGVkIG9uY2UuIE5vIHN1YnNjcmlwdGlvbiB0byBtYW5hZ2UgKi9cbiAgICB0b0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlKCh4LCBydW50aW1lU3ViKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YWdKc1Vuc3ViID0gcnVudGltZVN1Yj8udW5zdWJzY3JpYmU7XG4gICAgICAgICAgICBpZiAodGFnSnNVbnN1Yikge1xuICAgICAgICAgICAgICAgIHRhZ0pzVW5zdWIoKTsgLy8gaXRzIGZyb20gdGFnZ2VkanNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCksIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soeCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcGlwZSguLi5vcGVyYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICAgICAgaWYgKCd2YWx1ZScgaW4gdGhpcykge1xuICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdCguLi5hcmdzKTtcbiAgICAgICAgc3ViamVjdC5zZXRNZXRob2RzKG9wZXJhdGlvbnMpO1xuICAgICAgICBzdWJqZWN0LnN1YnNjcmliZVdpdGggPSAoeCkgPT4gdGhpcy5zdWJzY3JpYmUoeCk7XG4gICAgICAgIHN1YmplY3QubmV4dCA9IHggPT4gdGhpcy5uZXh0KHgpO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9XG4gICAgc2V0TWV0aG9kcyhvcGVyYXRpb25zKSB7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IG9wZXJhdGlvbnM7XG4gICAgfVxuICAgIHN0YXRpYyBhbGwoYXJncykge1xuICAgICAgICBjb25zdCBzd2l0Y2hlZCA9IGFyZ3MubWFwKGFyZyA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTdWJqZWN0SW5zdGFuY2UoYXJnKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICAgICAgLy8gQ2FsbCB0aGUgY2FsbGJhY2sgaW1tZWRpYXRlbHkgd2l0aCB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgY29uc3QgeCA9IG5ldyBTdWJqZWN0KGFyZywgc3Vic2NyaXB0aW9uID0+IHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ubmV4dChhcmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3Qoc3dpdGNoZWQpO1xuICAgIH1cbn1cblN1YmplY3QuZ2xvYmFsU3ViQ291bnQkID0gbmV3IFN1YmplY3QoMCk7IC8vIGZvciBlYXNlIG9mIGRlYnVnZ2luZ31cbmV4cG9ydCBjbGFzcyBTdWJqZWN0aXZlIGV4dGVuZHMgU3ViamVjdCB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBhcmdzWzBdO1xuICAgICAgICBkZWZpbmVWYWx1ZU9uKHRoaXMpO1xuICAgIH1cbiAgICBuZXh0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZW1pdCgpO1xuICAgIH1cbiAgICBlbWl0KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX3ZhbHVlO1xuICAgICAgICAvLyBOb3RpZnkgYWxsIHN1YnNjcmliZXJzIHdpdGggdGhlIG5ldyB2YWx1ZVxuICAgICAgICAvLyBjb25zdCBzdWJzID0gWy4uLnRoaXMuc3Vic2NyaWJlcnNdIC8vIHN1YnMgbWF5IGNoYW5nZSBhcyB3ZSBjYWxsIGNhbGxiYWNrc1xuICAgICAgICBjb25zdCBzdWJzID0gdGhpcy5zdWJzY3JpYmVyczsgLy8gc3VicyBtYXkgY2hhbmdlIGFzIHdlIGNhbGwgY2FsbGJhY2tzXG4gICAgICAgIC8vIGNvbnN0IGxlbmd0aCA9IHN1YnMubGVuZ3RoXG4gICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHN1YnMpIHtcbiAgICAgICAgICAgIHN1Yi5jYWxsYmFjayh2YWx1ZSwgc3ViKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVWYWx1ZU9uKHN1YmplY3QpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViamVjdCwgJ3ZhbHVlJywge1xuICAgICAgICAvLyBzdXBwb3J0cyBzdWJqZWN0LnZhbHVlID0geFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHN1YmplY3QuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBzdWJqZWN0LmVtaXQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc3VwcG9ydHMgc3ViamVjdC52YWx1ZVxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdC5fdmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vc3ViamVjdC9TdWJqZWN0LmNsYXNzLmpzJztcbi8qKiBFbWl0cyBldmVudCBhdCB0aGUgZW5kIG9mIGEgdGFnIGJlaW5nIHJlbmRlcmVkLiBVc2UgdGFnQ2xvc2VkJC50b1Byb21pc2UoKSB0byByZW5kZXIgYSB0YWcgYWZ0ZXIgYSBjdXJyZW50IHRhZyBpcyBkb25lIHJlbmRlcmluZyAgKi9cbmV4cG9ydCBjb25zdCB0YWdDbG9zZWQkID0gbmV3IFN1YmplY3QodW5kZWZpbmVkLCBmdW5jdGlvbiB0YWdDbG9zZXIoc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKCFnZXRTdXBwb3J0SW5DeWNsZSgpKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5uZXh0KCk7IC8vIHdlIGFyZSBub3QgY3VycmVudGx5IHByb2Nlc3Npbmcgc28gcHJvY2VzcyBub3dcbiAgICB9XG59KTtcbiIsImltcG9ydCB7IGZpcnN0U3RhdGVzSGFuZGxlciB9IGZyb20gJy4vc3RhdGVzLnV0aWxzLmpzJztcbmltcG9ydCB7IHJ1bkZpcnN0U3RhdGUgfSBmcm9tICcuL3N0YXRlSGFuZGxlcnMuanMnO1xuaW1wb3J0IHsgdGFnQ2xvc2VkJCB9IGZyb20gJy4vdGFnQ2xvc2VkJC5zdWJqZWN0LmpzJztcbmV4cG9ydCBjb25zdCBzZXRVc2VNZW1vcnkgPSB7XG4gICAgc3RhdGVDb25maWc6IHtcbiAgICAgICAgc3RhdGU6IFtdLCAvLyBzdGF0ZSBtZW1vcnkgb24gdGhlIGZpcnN0IHJlbmRlclxuICAgICAgICB2ZXJzaW9uOiBEYXRlLm5vdygpLFxuICAgICAgICBoYW5kbGVyczoge1xuICAgICAgICAgICAgaGFuZGxlcjogcnVuRmlyc3RTdGF0ZSxcbiAgICAgICAgICAgIHN0YXRlc0hhbmRsZXI6IGZpcnN0U3RhdGVzSGFuZGxlcixcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdGFnQ2xvc2VkJCxcbn07XG4iLCJpbXBvcnQgeyB1cGRhdGVUb0RpZmZWYWx1ZSB9IGZyb20gJy4vdXBkYXRlVG9EaWZmVmFsdWUuZnVuY3Rpb24uanMnO1xuLyoqIFVzZWQgZm9yIGFsbCB0YWcgdmFsdWUgdXBkYXRlcy4gRGV0ZXJtaW5lcyBpZiB2YWx1ZSBjaGFuZ2VkIHNpbmNlIGxhc3QgcmVuZGVyICovXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgLy8gbmV3VmFsdWVcbm93bmVyU3VwcG9ydCkge1xuICAgIC8vIEhhdmUgdGhlIGNvbnRleHQgY2hlY2sgaXRzZWxmIChhdm9pZCBoYXZpbmcgdG8gZGV0ZWN0IG9sZCB2YWx1ZSlcbiAgICBjb25zdCB0YWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgIGNvbnN0IGlnbm9yZU9yRGVzdHJveWVkID0gdGFnSnNWYXIuaGFzVmFsdWVDaGFuZ2VkKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICAvLyBpZ25vcmVcbiAgICBpZiAoaWdub3JlT3JEZXN0cm95ZWQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlnbm9yZU9yRGVzdHJveWVkOyAvLyBkbyBub3RoaW5nXG4gICAgfVxuICAgIHVwZGF0ZVRvRGlmZlZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpZ25vcmVPckRlc3Ryb3llZCk7XG4gICAgcmV0dXJuIGlnbm9yZU9yRGVzdHJveWVkO1xufVxuIiwiaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSBcIi4uLy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkb21Qcm9jZXNzQ29udGV4dEl0ZW0odmFsdWUsIHN1cHBvcnQsIGNvbnRleHRJdGVtLCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBzdWJqZWN0LmxvY2tlZCA9IDM7XG4gICAgY29udGV4dEl0ZW0uZWxlbWVudCA9IGNvbnRleHRJdGVtLmVsZW1lbnQgfHwgYXBwZW5kVG87XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyLnByb2Nlc3NJbml0KHZhbHVlLCBjb250ZXh0SXRlbSwgc3VwcG9ydCwgaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG4gICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgIGRlbGV0ZSBzdWJqZWN0LmxvY2tlZDtcbn1cbiIsImltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjYXN0VGV4dFZhbHVlKHZhbHVlKSB7XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJpbXBvcnQgeyBwYWludENvbnRlbnQgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG4vKiogaGFuZGxlcyBhdXRvZm9jdXMsIGF1dG9zZWxlY3QsIHN0eWxlLiwgY2xhc3MuICovXG5leHBvcnQgZnVuY3Rpb24gc3BlY2lhbEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgZWxlbWVudCwgc3BlY2lhbE5hbWUpIHtcbiAgICBzd2l0Y2ggKHNwZWNpYWxOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2F1dG9mb2N1cyc6XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbYXV0b2ZvY3VzLCBbZWxlbWVudF1dKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSAnYXV0b3NlbGVjdCc6XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbYXV0b3NlbGVjdCwgW2VsZW1lbnRdXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgJ3N0eWxlJzoge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbcGFpbnRTdHlsZSwgW2VsZW1lbnQsIG5hbWVzLCB2YWx1ZV1dKTsgLy8gYXR0cmlidXRlIGNoYW5nZXMgc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdjbGFzcyc6XG4gICAgICAgICAgICBwcm9jZXNzU3BlY2lhbENsYXNzKG5hbWUsIHZhbHVlLCBlbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNwZWNpYWwgYXR0cmlidXRlIG9mICR7c3BlY2lhbE5hbWV9LiAke25hbWV9YCk7XG59XG5mdW5jdGlvbiBwYWludFN0eWxlKGVsZW1lbnQsIG5hbWVzLCB2YWx1ZSkge1xuICAgIGNvbnN0IHNtYWxsTmFtZSA9IG5hbWVzWzFdO1xuICAgIGVsZW1lbnQuc3R5bGVbc21hbGxOYW1lXSA9IHZhbHVlOyAvLyBzdHlsZS5iYWNrZ3JvdW5kR3JvdW5kXG4gICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShzbWFsbE5hbWUsIHZhbHVlKTsgLy8gc3R5bGUuYmFja2dyb3VuZC1ncm91bmRcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTcGVjaWFsQ2xhc3MobmFtZSwgdmFsdWUsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBuYW1lcyA9IG5hbWUuc3BsaXQoJy4nKTtcbiAgICBuYW1lcy5zaGlmdCgpOyAvLyByZW1vdmUgY2xhc3NcbiAgICAvLyB0cnV0aHlcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbY2xhc3NMaXN0QWRkLCBbZWxlbWVudCwgbmFtZV1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZhbHN5XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtjbGFzc0xpc3RSZW1vdmUsIFtlbGVtZW50LCBuYW1lXV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsYXNzTGlzdEFkZChlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKG5hbWUpO1xufVxuZnVuY3Rpb24gY2xhc3NMaXN0UmVtb3ZlKGVsZW1lbnQsIG5hbWUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG59XG5mdW5jdGlvbiBhdXRvc2VsZWN0KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnNlbGVjdCgpO1xufVxuZnVuY3Rpb24gYXV0b2ZvY3VzKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmZvY3VzKCk7XG59XG4iLCJpbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuLi8uLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcGFpbnRDb250ZW50IH0gZnJvbSBcIi4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qc1wiO1xuLy8gTWF5YmUgbW9yZSBwZXJmb3JtYW50IGZvciB1cGRhdGVzIGJ1dCBzZWVtaW5nbHkgc2xvd2VyIGZvciBmaXJzdCByZW5kZXJzXG5leHBvcnQgZnVuY3Rpb24gaG93VG9TZXRJbnB1dFZhbHVlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaG93VG9TZXRJbnB1dE9iamVjdFZhbHVlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcGFpbnRDb250ZW50LnB1c2goW3NldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSwgW2VsZW1lbnQsIG5hbWUsIHZhbHVlXV0pO1xufVxuZnVuY3Rpb24gaG93VG9TZXRJbnB1dE9iamVjdFZhbHVlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50W25hbWVdICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlbGVtZW50W25hbWVdID0ge307XG4gICAgfVxuICAgIC8vIEhhbmRsZSBvYmplY3QgdmFsdWVzIGJ5IHNldHRpbmcgcHJvcGVydGllcyBkaXJlY3RseVxuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW3NldE9iamVjdFZhbHVlLCBbZWxlbWVudCwgbmFtZSwga2V5LCBzdWJWYWx1ZV1dKTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnRbbmFtZV0uc2V0UHJvcGVydHkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtzZXRQcm9wZXJ0eVZhbHVlLCBbZWxlbWVudCwgbmFtZSwga2V5LCBzdWJWYWx1ZV1dKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBob3dUb1NldFN0YW5kQWxvbmVBdHRyKGVsZW1lbnQsIG5hbWUsIF92YWx1ZSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXROb25GdW5jdGlvbklucHV0VmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBob3dUb1NldElucHV0T2JqZWN0VmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBzZXRTaW1wbGVBdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xufVxuLyoqIHVzZWQgZm9yIGNoZWNrZWQsIHNlbGVjdGVkLCBhbmQgc28gb24gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRCb29sZWFuQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudFtuYW1lXSA9IGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRTaW1wbGVBdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAvLyBmb3IgY2hlY2tlZD10cnVlXG4gICAgO1xuICAgIGVsZW1lbnRbbmFtZV0gPSB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBuYW1lLCBrZXksIHZhbHVlKSB7XG4gICAgO1xuICAgIGVsZW1lbnRbbmFtZV0uc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSk7XG59XG4vKiogbWFpbiBwcm9jZXNzb3IgZm9yIHRoaW5ncyBsaWtlIDxkaXYgc3R5bGU9JHt7IG1heFdpZHRoOiAnMTAwdncnIH19PiAqL1xuZnVuY3Rpb24gc2V0T2JqZWN0VmFsdWUoZWxlbWVudCwgbmFtZSwga2V5LCB2YWx1ZSkge1xuICAgIDtcbiAgICBlbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQcm92aWRlckNoYW5nZXMoYXBwU3VwcG9ydCwgcHJvdmlkZXIpIHtcbiAgICBjb25zdCB0YWdzV2l0aFByb3ZpZGVyID0gZ2V0VGFnc1dpdGhQcm92aWRlcihhcHBTdXBwb3J0LCBwcm92aWRlcik7XG4gICAgcmV0dXJuIHRhZ3NXaXRoUHJvdmlkZXI7XG59XG4vKiogVXBkYXRlcyBhbmQgcmV0dXJucyBtZW1vcnkgb2YgdGFnIHByb3ZpZGVycyAqL1xuZnVuY3Rpb24gZ2V0VGFnc1dpdGhQcm92aWRlcihzdXBwb3J0LCBwcm92aWRlciwgbWVtb3J5ID0gW10pIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIG1lbW9yeS5wdXNoKHtcbiAgICAgICAgc3VwcG9ydCxcbiAgICAgICAgcmVuZGVyQ291bnQ6IHN1YmplY3QucmVuZGVyQ291bnQsXG4gICAgICAgIHByb3ZpZGVyLFxuICAgIH0pO1xuICAgIGNvbnN0IGNoaWxkVGFncyA9IHByb3ZpZGVyLmNoaWxkcmVuO1xuICAgIGZvciAobGV0IGluZGV4ID0gY2hpbGRUYWdzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZFRhZ3NbaW5kZXhdO1xuICAgICAgICBjb25zdCBjU3ViamVjdCA9IGNoaWxkLmNvbnRleHQ7XG4gICAgICAgIG1lbW9yeS5wdXNoKHtcbiAgICAgICAgICAgIHN1cHBvcnQ6IGNoaWxkLFxuICAgICAgICAgICAgcmVuZGVyQ291bnQ6IGNTdWJqZWN0LnJlbmRlckNvdW50LFxuICAgICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtb3J5O1xufVxuIiwiaW1wb3J0IHsgaGFuZGxlUHJvdmlkZXJDaGFuZ2VzIH0gZnJvbSAnLi9oYW5kbGVQcm92aWRlckNoYW5nZXMuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVyc0NoYW5nZUNoZWNrKHN1cHBvcnQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBzdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnM7XG4gICAgaWYgKCFwcm92aWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCBwcm9zV2l0aENoYW5nZXMgPSBbXTtcbiAgICAvLyByZXNldCBjbG9uZXNcbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHByb3ZpZGVycykge1xuICAgICAgICBjb25zdCBvd25lciA9IHByb3ZpZGVyLm93bmVyO1xuICAgICAgICBjb25zdCBoYXNDaGFuZ2UgPSBoYW5kbGVQcm92aWRlckNoYW5nZXMob3duZXIsIHByb3ZpZGVyKTtcbiAgICAgICAgcHJvc1dpdGhDaGFuZ2VzLnB1c2goLi4uaGFzQ2hhbmdlLm1hcChtYXBUb1N1cHBvcnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3NXaXRoQ2hhbmdlcztcbn1cbmZ1bmN0aW9uIG1hcFRvU3VwcG9ydCh4KSB7XG4gICAgcmV0dXJuIHguc3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IGlzQXJyYXksIGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gJy4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lKG9iaiwgbWF4RGVwdGgpIHtcbiAgICAvLyByZXR1cm4gbWFrZURlZXBDbG9uZShvYmosIG5ldyBXZWFrTWFwKCkpXG4gICAgcmV0dXJuIG1ha2VEZWVwQ2xvbmUob2JqLCBtYXhEZXB0aCk7XG59XG5mdW5jdGlvbiBtYWtlRGVlcENsb25lKG9iaiwgXG4vLyB2aXNpdGVkOiBXZWFrTWFwPGFueSwgYW55PlxubWF4RGVwdGgpIHtcbiAgICAvLyBJZiBvYmogaXMgYSBwcmltaXRpdmUgdHlwZSBvciBudWxsLCByZXR1cm4gaXQgZGlyZWN0bHlcbiAgICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIC8vIElmIG9iaiBpcyBhbHJlYWR5IHZpc2l0ZWQsIHJldHVybiB0aGUgY2xvbmVkIHJlZmVyZW5jZVxuICAgIC8qXG4gICAgaWYgKHZpc2l0ZWQuaGFzKG9iaikpIHtcbiAgICAgIHJldHVybiB2aXNpdGVkLmdldChvYmopXG4gICAgfVxuICAgICovXG4gICAgaWYgKG1heERlcHRoIDwgMCkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlcyBsaWtlIERhdGUgYW5kIFJlZ0V4cFxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShvYmopO1xuICAgIH1cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG9iaik7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhbiBlbXB0eSBvYmplY3Qgb3IgYXJyYXkgd2l0aCB0aGUgc2FtZSBwcm90b3R5cGVcbiAgICBjb25zdCBjbG9uZSA9IGlzQXJyYXkob2JqKSA/IFtdIDogT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSk7XG4gICAgLy8gQ2xvbmUgZWFjaCBwcm9wZXJ0eSBvciBlbGVtZW50IG9mIHRoZSBvYmplY3Qgb3IgYXJyYXlcbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjbG9uZVtpXSA9IG1ha2VEZWVwQ2xvbmUob2JqW2ldLCBtYXhEZXB0aCAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVba2V5XSA9IG1ha2VEZWVwQ2xvbmUob2JqW2tleV0sIG1heERlcHRoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsb25lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChvYmoxLCBvYmoyLCBtYXhEZXB0aCkge1xuICAgIHJldHVybiBpc0RlZXBFcXVhbChvYmoxLCBvYmoyLCBtYXhEZXB0aCk7XG59XG5mdW5jdGlvbiBpc0RlZXBFcXVhbChvYmoxLCBvYmoyLCBcbi8vIHZpc2l0ZWQ6IFdlYWtNYXA8YW55LCBhbnk+LFxubWF4RGVwdGgpIHtcbiAgICBjb25zdCBkaXJlY3RFcXVhbCA9IG9iajEgPT09IG9iajI7XG4gICAgaWYgKGRpcmVjdEVxdWFsIHx8IGlzU2FtZUZ1bmN0aW9ucyhvYmoxLCBvYmoyKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gSWYgb2JqIGlzIGFscmVhZHkgdmlzaXRlZCwgcmV0dXJuIHRoZSBjbG9uZWQgcmVmZXJlbmNlXG4gICAgLy8gaWYgKHZpc2l0ZWQuaGFzKG9iajEpKSB7XG4gICAgaWYgKG1heERlcHRoIDwgMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmoxID09PSBCYXNpY1R5cGVzLm9iamVjdCAmJiB0eXBlb2Ygb2JqMiA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgLy8gYm90aCBhcmUgZGF0ZXMgYW5kIHdlcmUgYWxyZWFkeSBkZXRlcm1pbmVkIG5vdCB0aGUgc2FtZVxuICAgICAgICBpZiAob2JqMSBpbnN0YW5jZW9mIERhdGUgJiYgb2JqMiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmoxLmdldFRpbWUoKSA9PT0gb2JqMi5nZXRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIGNsb25lZCBvYmplY3QgdG8gYXZvaWQgY3ljbGljIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gdmlzaXRlZC5zZXQob2JqMSwgMClcbiAgICAgICAgLy8gQ2hlY2sgaWYgb2JqMSBhbmQgb2JqMiBhcmUgYm90aCBhcnJheXNcbiAgICAgICAgaWYgKGlzQXJyYXkob2JqMSkgJiYgaXNBcnJheShvYmoyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXlEZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0FycmF5KG9iajEpIHx8IGlzQXJyYXkob2JqMikpIHtcbiAgICAgICAgICAgIC8vIE9uZSBpcyBhbiBhcnJheSwgYW5kIHRoZSBvdGhlciBpcyBub3RcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gaXNPYmplY3REZWVwRXF1YWwob2JqMSwgb2JqMiwgdmlzaXRlZClcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0RGVlcEVxdWFsKG9iajEsIG9iajIsIG1heERlcHRoIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0RGVlcEVxdWFsKG9iajEsIG9iajIsIFxuLy8gdmlzaXRlZDogV2Vha01hcDxhbnksIGFueT4sXG5tYXhEZXB0aCkge1xuICAgIGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob2JqMSk7XG4gICAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyhvYmoyKTtcbiAgICBpZiAoa2V5czEubGVuZ3RoID09PSAwICYmIGtleXMyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5czEpIHtcbiAgICAgICAgY29uc3Qga2V5Rm91bmQgPSBrZXlzMi5pbmNsdWRlcyhrZXkpO1xuICAgICAgICBpZiAoIWtleUZvdW5kIHx8ICFpc0RlZXBFcXVhbChvYmoxW2tleV0sIG9iajJba2V5XSwgbWF4RGVwdGggLSAxKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNBcnJheURlZXBFcXVhbChvYmoxLCBvYmoyLCBtYXhEZXB0aCkge1xuICAgIGlmIChvYmoxLmxlbmd0aCAhPT0gb2JqMi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iajEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFpc0RlZXBFcXVhbChvYmoxW2ldLCBvYmoyW2ldLCBtYXhEZXB0aCAtIDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBpc1NhbWVGdW5jdGlvbnMoZm4wLCBmbjEpIHtcbiAgICBjb25zdCBib3RoRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKGZuMCkgJiYgaXNGdW5jdGlvbihmbjEpO1xuICAgIHJldHVybiBib3RoRnVuY3Rpb24gJiYgZm4wLnRvU3RyaW5nKCkgPT09IGZuMS50b1N0cmluZygpO1xufVxuIiwiaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93UHJvcE1hdGNoKHByb3BzLCBwYXN0Q2xvbmVQcm9wcykge1xuICAgIC8vIGlmIGV2ZXJ5IHByb3AgdGhlIHNhbWUsIHRoZW4gbm8gY2hhbmdlc1xuICAgIGNvbnN0IGxlbiA9IHByb3BzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGNvbnN0IHBhc3RQcm9wID0gcGFzdENsb25lUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoaXNBcnJheShwcm9wKSAmJiBpc0FycmF5KHBhc3RQcm9wKSkge1xuICAgICAgICAgICAgaWYgKHByb3AgPT09IHBhc3RQcm9wKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMy4wOyAvLyBub3QgZXF1YWwgYXJyYXlcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChwcm9wKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbiAmJiB0eXBlb2YgKHBhc3RQcm9wKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICAgICAgY29udGludWU7IC8vIGNvbnNpZGVyZWQgZ29vZFxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKHByb3ApID09PSBCYXNpY1R5cGVzLm9iamVjdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAocGFzdENsb25lUHJvcHMpID09PSBCYXNpY1R5cGVzLm9iamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHByb3ApO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViSXRlbSBvZiBvYkVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb2JqZWN0SXRlbU1hdGNoZXMoc3ViSXRlbSwgcGFzdFByb3ApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDMuMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBhbGwgc3ViIG9iamVjdHMgbWF0Y2hlZFxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wID09PSBwYXN0UHJvcCkge1xuICAgICAgICAgICAgY29udGludWU7IC8vIG1hdGNoZWQgZ29vZFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAzLjM7IC8vIG5vdCBlcXVhbFxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7IC8vIGZhbHNlIG1lYW5zIGhhcyBub3QgY2hhbmdlZFxufVxuZnVuY3Rpb24gb2JqZWN0SXRlbU1hdGNoZXMoW25hbWUsIHZhbHVlXSwgcGFzdFByb3ApIHtcbiAgICBjb25zdCBwYXN0VmFsdWUgPSBwYXN0UHJvcFtuYW1lXTtcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24gJiYgdHlwZW9mIChwYXN0VmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcGFzdFZhbHVlID09PSB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IGRlZXBDbG9uZSB9IGZyb20gJy4uL2RlZXBGdW5jdGlvbnMuanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVZhbHVlQXJyYXkodmFsdWVzKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5tYXAoY2xvbmVUYWdKc1ZhbHVlKTtcbn1cbi8qKiBjbG9uZXMgb25seSB3aGF0IGlzIG5lZWRlZCB0byBjb21wYXJlIGRpZmZlcmVuY2VzIGxhdGVyICovXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVUYWdKc1ZhbHVlKHZhbHVlLCBtYXhEZXB0aCkge1xuICAgIGNvbnN0IHRhZyA9IHZhbHVlO1xuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IHZhbHVlPy50YWdKc1R5cGU7XG4gICAgaWYgKHRhZ0pzVHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHRhZ0pzVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnNpZ25hbDpcbiAgICAgICAgICAgIGNhc2UgVmFsdWVUeXBlcy5zdWJzY3JpYmU6XG4gICAgICAgICAgICBjYXNlIFZhbHVlVHlwZXMuc3RhdGVSZW5kZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhc2UgVmFsdWVUeXBlcy5kb206XG4gICAgICAgICAgICBjYXNlIFZhbHVlVHlwZXMudGFnOlxuICAgICAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRlbXBsYXRlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVWYWx1ZUFycmF5KHRhZy52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gY2xvbmVWYWx1ZUFycmF5KHRhZyk7XG4gICAgfVxuICAgIHJldHVybiBkZWVwQ2xvbmUodmFsdWUsIG1heERlcHRoKTtcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgY2xvbmVUYWdKc1ZhbHVlIH0gZnJvbSAnLi4vY2xvbmVWYWx1ZUFycmF5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlZXBDb21wYXJlRGVwdGgsIHNoYWxsb3dDb21wYXJlRGVwdGggfSBmcm9tICcuLi9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBQcm9wV2F0Y2hlcyB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy90YWcuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lUHJvcHNCeShzdXBwb3J0LCBwcm9wcywgY2FzdFByb3BzKSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0gc3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgaWYgKHRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRlbXBsYXRlci5wcm9wV2F0Y2gpIHtcbiAgICAgICAgY2FzZSBQcm9wV2F0Y2hlcy5JTU1VVEFCTEU6XG4gICAgICAgICAgICByZXR1cm4gc3VwcG9ydC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBsYXRlc3Q6IHByb3BzLFxuICAgICAgICAgICAgICAgIGNhc3RQcm9wcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuU0hBTExPVzpcbiAgICAgICAgICAgIHJldHVybiBzdXBwb3J0LnByb3BzQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGxhdGVzdDogcHJvcHMubWFwKHNoYWxsb3dNYXBwZXIpLFxuICAgICAgICAgICAgICAgIGNhc3RQcm9wcyxcbiAgICAgICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0LnByb3BzQ29uZmlnID0ge1xuICAgICAgICBsYXRlc3Q6IHByb3BzLm1hcChkZWVwTWFwcGVyKSxcbiAgICAgICAgY2FzdFByb3BzLFxuICAgIH07XG59XG5mdW5jdGlvbiBzaGFsbG93TWFwcGVyKHgpIHtcbiAgICByZXR1cm4gY2xvbmVUYWdKc1ZhbHVlKHgsIHNoYWxsb3dDb21wYXJlRGVwdGgpO1xufVxuZnVuY3Rpb24gZGVlcE1hcHBlcihwcm9wcykge1xuICAgIHJldHVybiBjbG9uZVRhZ0pzVmFsdWUocHJvcHMsIGRlZXBDb21wYXJlRGVwdGgpO1xufVxuIiwiaW1wb3J0IHsgY2xvbmVQcm9wc0J5IH0gZnJvbSAnLi9wcm9wcy9jbG9uZVByb3BzQnkuZnVuY3Rpb24uanMnO1xuLyoqIHVzZWQgb25seSBmb3IgYXBwcywgb3RoZXJ3aXNlIHVzZSBTdXBwb3J0ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBjb250ZXh0LCBjYXN0ZWRQcm9wcykge1xuICAgIGNvbnN0IGJhc2VTdXBwb3J0ID0ge1xuICAgICAgICB0ZW1wbGF0ZXIsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNhc3RlZFByb3BzLFxuICAgICAgICBhcHBTdXBwb3J0OiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0Lmdsb2JhbDtcbiAgICBnbG9iYWwuYmxvY2tlZCA9IFtdO1xuICAgIC8vIGNvbnRleHQuc3RhdGUubmV3ZXIgPSBjb250ZXh0LnN0YXRlLm5ld2VyIHx8IHsgLi4uc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnIH1cbiAgICBpZiAoIWNvbnRleHQuc3RhdGUpIHtcbiAgICAgICAgY29udGV4dC5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG5ld2VyOiB7XG4gICAgICAgICAgICAgICAgc3RhdGU6IFtdLFxuICAgICAgICAgICAgICAgIHN0YXRlczogW10sXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBiYXNlU3VwcG9ydDtcbn1cbi8qKiBTZXRzIHN1cHBvcnQgc3RhdGVzIHRvIGVtcHR5IGFycmF5IGFuZCBjbG9uZXMgcHJvcHMgKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGdyYWRlQmFzZVRvU3VwcG9ydCh0ZW1wbGF0ZXIsIC8vIGF0IHJ1bnRpbWUgcmVuZGVyaW5nIG9mIGEgdGFnLCBpdCBuZWVkcyB0byBiZSBtYXJyaWVkIHRvIGEgbmV3IFN1cHBvcnQoKVxuc3VwcG9ydCwgYXBwU3VwcG9ydCwgY2FzdGVkUHJvcHMpIHtcbiAgICBzdXBwb3J0LmFwcFN1cHBvcnQgPSBhcHBTdXBwb3J0O1xuICAgIGNvbnN0IHByb3BzID0gdGVtcGxhdGVyLnByb3BzOyAvLyBuYXR1cmFsIHByb3BzXG4gICAgaWYgKHByb3BzKSB7XG4gICAgICAgIHN1cHBvcnQucHJvcHNDb25maWcgPSBjbG9uZVByb3BzQnkoc3VwcG9ydCwgcHJvcHMsIGNhc3RlZFByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSHRtbFN1cHBvcnQodGVtcGxhdGVyLCAvLyBhdCBydW50aW1lIHJlbmRlcmluZyBvZiBhIHRhZywgaXQgbmVlZHMgdG8gYmUgbWFycmllZCB0byBhIG5ldyBTdXBwb3J0KClcbm93bmVyU3VwcG9ydCwgYXBwU3VwcG9ydCwgY29udGV4dCwgY2FzdGVkUHJvcHMpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0ge1xuICAgICAgICB0ZW1wbGF0ZXIsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNhc3RlZFByb3BzLFxuICAgICAgICBhcHBTdXBwb3J0OiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICBzdXBwb3J0LmFwcFN1cHBvcnQgPSBhcHBTdXBwb3J0O1xuICAgIHJldHVybiBzdXBwb3J0O1xufVxuIiwiLy8gTGlmZSBjeWNsZSA0IC0gZW5kIG9mIGxpZmVcbmV4cG9ydCBmdW5jdGlvbiBydW5CZWZvcmVEZXN0cm95KHN1cHBvcnQsIGdsb2JhbCkge1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnM7XG4gICAgaWYgKHByb3ZpZGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHByb3ZpZGVycykge1xuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSBwcm92aWRlci5jaGlsZHJlbi5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwcm92aWRlci5jaGlsZHJlbltpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmNvbnRleHQuZ2xvYmFsID09PSBnbG9iYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZ2xvYmFsLmRlbGV0ZWQgPSB0cnVlXG4gICAgc3VwcG9ydC5jb250ZXh0LmRlc3Ryb3kkLm5leHQoKTtcbiAgICBzdXBwb3J0LmNvbnRleHQucmVuZGVyQ291bnQgPSAwOyAvLyBpZiBpdCBjb21lcyBiYWNrLCB3b250IGJlIGNvbnNpZGVyZWQgYW4gdXBkYXRlXG59XG4iLCJpbXBvcnQgeyBpc1RhZ0NvbXBvbmVudCB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgcnVuQmVmb3JlRGVzdHJveSB9IGZyb20gJy4vdGFnUnVubmVyLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUNvbnRleHRzKGNoaWxkVGFncywgb3duZXJTdXBwb3J0KSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZFRhZ3MpIHtcbiAgICAgICAgLy8gZGVsZXRpbmcgYXJyYXlzXG4gICAgICAgIGNvbnN0IGxhc3RBcnJheSA9IGNoaWxkLmxhc3RBcnJheTtcbiAgICAgICAgaWYgKGxhc3RBcnJheSkge1xuICAgICAgICAgICAgLy8gcmVjdXJzZVxuICAgICAgICAgICAgZGVzdHJveUNvbnRleHRzKGxhc3RBcnJheSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaWxkVmFsdWUgPSBjaGlsZC52YWx1ZTtcbiAgICAgICAgaWYgKGNoaWxkVmFsdWU/LnRhZ0pzVHlwZSA9PT0gVmFsdWVUeXBlcy5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIGNoaWxkVmFsdWUuZGVzdHJveShjaGlsZCwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgICAgIGNoaWxkLmRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ2xvYmFsID0gY2hpbGQuZ2xvYmFsO1xuICAgICAgICBpZiAoIWdsb2JhbCkge1xuICAgICAgICAgICAgY29udGludWU7IC8vIG5vdCBhIHN1cHBvcnQgY29udGV4dEl0ZW1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdXBwb3J0ID0gY2hpbGQuc3RhdGUubmV3ZXN0O1xuICAgICAgICBjb25zdCBpU3VicyA9IGdsb2JhbC5zdWJzY3JpcHRpb25zO1xuICAgICAgICBpZiAoaVN1YnMpIHtcbiAgICAgICAgICAgIGlTdWJzLmZvckVhY2godW5zdWJzY3JpYmVGcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUYWdDb21wb25lbnQoc3VwcG9ydC50ZW1wbGF0ZXIpKSB7XG4gICAgICAgICAgICBydW5CZWZvcmVEZXN0cm95KHN1cHBvcnQsIGdsb2JhbCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViVGFncyA9IGNoaWxkLmNvbnRleHRzO1xuICAgICAgICAvLyByZWN1cnNlXG4gICAgICAgIGRlc3Ryb3lDb250ZXh0cyhzdWJUYWdzLCBzdXBwb3J0KTtcbiAgICAgICAgZ2xvYmFsLmRlbGV0ZWQgPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZFRhZ3NUb1NvZnREZXN0cm95KGNoaWxkVGFncywgdGFncyA9IFtdLCBzdWJzID0gW10pIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkVGFncykge1xuICAgICAgICBjb25zdCBnbG9iYWwgPSBjaGlsZC5nbG9iYWw7XG4gICAgICAgIGlmICghZ2xvYmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdXBwb3J0ID0gY2hpbGQuc3RhdGUubmV3ZXN0O1xuICAgICAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICAgICAgdGFncy5wdXNoKHN1cHBvcnQpO1xuICAgICAgICAgICAgY29uc3QgaVN1YnMgPSBnbG9iYWwuc3Vic2NyaXB0aW9ucztcbiAgICAgICAgICAgIGlmIChpU3Vicykge1xuICAgICAgICAgICAgICAgIHN1YnMucHVzaCguLi5pU3Vicyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViVGFncyA9IGNoaWxkLmNvbnRleHRzO1xuICAgICAgICBpZiAoc3ViVGFncykge1xuICAgICAgICAgICAgZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveShzdWJUYWdzLCB0YWdzLCBzdWJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB0YWdzLCBzdWJzIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zdWJzY3JpYmVGcm9tKGZyb20pIHtcbiAgICBmcm9tLnVuc3Vic2NyaWJlKCk7XG59XG4iLCJpbXBvcnQgeyBkZXN0cm95U3VwcG9ydCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlci9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZUFycmF5SXRlbXModmFsdWUsIGluZGV4LCBsYXN0QXJyYXksIHJlbW92ZWQpIHtcbiAgICBjb25zdCBuZXdMZW5ndGggPSB2YWx1ZS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGF0ID0gaW5kZXggLSByZW1vdmVkO1xuICAgIGNvbnN0IGxlc3NMZW5ndGggPSBhdCA8IDAgfHwgbmV3TGVuZ3RoIDwgYXQ7XG4gICAgY29uc3QgcHJldkNvbnRleHQgPSBsYXN0QXJyYXlbaW5kZXhdO1xuICAgIGlmIChsZXNzTGVuZ3RoKSB7XG4gICAgICAgIGRlc3Ryb3lBcnJheUl0ZW0ocHJldkNvbnRleHQpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgY29uc3Qgb2xkS2V5ID0gcHJldkNvbnRleHQudmFsdWUuYXJyYXlWYWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZVRhZyA9IHZhbHVlW2luZGV4XTtcbiAgICBjb25zdCByZXN1bHQgPSBydW5BcnJheUl0ZW1EaWZmKG9sZEtleSwgbmV3VmFsdWVUYWcsIHByZXZDb250ZXh0LCBsYXN0QXJyYXksIGluZGV4KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcnVuQXJyYXlJdGVtRGlmZihvbGRLZXksIG5ld1ZhbHVlVGFnLCBwcmV2Q29udGV4dCwgbGFzdEFycmF5LCBpbmRleCkge1xuICAgIGNvbnN0IGlzRGlmZiA9IG5ld1ZhbHVlVGFnICYmIG9sZEtleSAhPT0gbmV3VmFsdWVUYWcuYXJyYXlWYWx1ZTtcbiAgICBpZiAoaXNEaWZmKSB7XG4gICAgICAgIGRlc3Ryb3lBcnJheUl0ZW0ocHJldkNvbnRleHQpO1xuICAgICAgICBsYXN0QXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lBcnJheUl0ZW0oY29udGV4dCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgIGRlc3Ryb3lBcnJheUl0ZW1CeUdsb2JhbChnbG9iYWwsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gZGVzdHJveUFycmF5SXRlbUJ5R2xvYmFsKGdsb2JhbCwgY29udGV4dCkge1xuICAgIGlmIChnbG9iYWwgJiYgY29udGV4dC5zdGF0ZT8ub2xkZXN0KSB7XG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBjb250ZXh0LnN0YXRlLm9sZGVzdDtcbiAgICAgICAgZGVzdHJveVN1cHBvcnQoc3VwcG9ydCwgZ2xvYmFsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb250ZXh0LnRhZ0pzVmFyLmRlc3Ryb3koY29udGV4dCwge30pO1xufVxuIiwiaW1wb3J0IHsgZGVzdHJveUFycmF5SXRlbSB9IGZyb20gJy4vdXBkYXRlL2FycmF5cy9jb21wYXJlQXJyYXlJdGVtcy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUFycmF5Q29udGV4dChjb250ZXh0KSB7XG4gICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IGxhc3RBcnJheSA9IGNvbnRleHQubGFzdEFycmF5O1xuICAgIGRlc3Ryb3lBcnJheShjb250ZXh0LCBsYXN0QXJyYXkpO1xufVxuLyoqIERlbGV0ZXMgZW50aXJlIGFycmF5IGNvbnRleHQgbm90IGp1c3Qgb25lICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUFycmF5KHN1YmplY3QsIGxhc3RBcnJheSkge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXN0QXJyYXkubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGRlc3Ryb3lBcnJheUl0ZW0obGFzdEFycmF5W2luZGV4XSk7XG4gICAgfVxuICAgIGRlbGV0ZSBzdWJqZWN0Lmxhc3RBcnJheTtcbn1cbiIsImltcG9ydCB7IGFkZFBhaW50UmVtb3ZlciB9IGZyb20gJy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG4vKiogRGVzdHJveSBkb20gZWxlbWVudHMgYW5kIGRvbSBzcGFjZSBtYXJrZXJzICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUh0bWxEb21NZXRhKGh0bWxEb21NZXRhKSB7XG4gICAgLy8gY2hlY2sgc3ViamVjdHMgdGhhdCBtYXkgaGF2ZSBjbG9uZXMgYXR0YWNoZWQgdG8gdGhlbVxuICAgIGZvciAobGV0IGluZGV4ID0gaHRtbERvbU1ldGEubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBjb25zdCBjbG9uZSA9IGh0bWxEb21NZXRhW2luZGV4XTtcbiAgICAgICAgZGVzdHJveUNsb25lKGNsb25lKTtcbiAgICAgICAgaHRtbERvbU1ldGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXN0cm95Q2xvbmUoY2xvbmUpIHtcbiAgICBjb25zdCBtYXJrZXIgPSBjbG9uZS5tYXJrZXI7XG4gICAgaWYgKG1hcmtlcikge1xuICAgICAgICBhZGRQYWludFJlbW92ZXIobWFya2VyLCAnZGVzdHJveU1hcmtlcicpO1xuICAgIH1cbiAgICBjb25zdCBkb20gPSBjbG9uZS5kb21FbGVtZW50O1xuICAgIGFkZFBhaW50UmVtb3Zlcihkb20sICdkZXN0cm95Q2xvbmUnKTtcbn1cbiIsImltcG9ydCB7IGRlc3Ryb3lBcnJheSB9IGZyb20gJy4vZGVzdHJveUFycmF5Q29udGV4dC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBhZGRQYWludFJlbW92ZXIgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveUh0bWxEb21NZXRhIH0gZnJvbSAnLi9kZXN0cm95SHRtbERvbU1ldGEuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuLyoqIHNldHMgZ2xvYmFsLmRlbGV0ZWQgb24gc3VwcG9ydCBhbmQgYWxsIGNoaWxkcmVuICovXG5leHBvcnQgZnVuY3Rpb24gc21hcnRSZW1vdmVLaWRzKGNvbnRleHQsIGFsbFByb21pc2VzKSB7XG4gICAgY29uc3Qgc3ViQ29udGV4dHMgPSBjb250ZXh0LmNvbnRleHRzO1xuICAgIHNtYXJ0UmVtb3ZlQnlDb250ZXh0KHN1YkNvbnRleHRzLCBhbGxQcm9taXNlcyk7XG4gICAgZGVzdHJveUNvbnRleHRIdG1sKGNvbnRleHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lDb250ZXh0SHRtbChjb250ZXh0KSB7XG4gICAgZGVzdHJveUh0bWxEb21NZXRhKGNvbnRleHQuaHRtbERvbU1ldGEpO1xufVxuZnVuY3Rpb24gc21hcnRSZW1vdmVCeUNvbnRleHQoY29udGV4dHMsIGFsbFByb21pc2VzKSB7XG4gICAgZm9yIChjb25zdCBjb250ZXh0IG9mIGNvbnRleHRzKSB7XG4gICAgICAgIGlmIChjb250ZXh0LndpdGhpbk93bmVyRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgdGFnSnNWYXIgPSBjb250ZXh0LnRhZ0pzVmFyO1xuICAgICAgICAgICAgaWYgKHRhZ0pzVmFyICYmIHRhZ0pzVmFyLnRhZ0pzVHlwZSA9PT0gJ2hvc3QnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3ZXN0ID0gY29udGV4dC5zdXBwb3J0T3duZXI7XG4gICAgICAgICAgICAgICAgY29uc3QgaG9zdERlc3Ryb3kgPSB0YWdKc1Zhci5kZXN0cm95KGNvbnRleHQsIG5ld2VzdCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShob3N0RGVzdHJveSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvbWlzZXMucHVzaChob3N0RGVzdHJveSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7IC8vIGkgbGl2ZSB3aXRoaW4gbXkgb3duZXIgdmFyaWFibGUuIEkgd2lsbCBiZSBkZWxldGVkIHdpdGggb3duZXJcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0QXJyYXkgPSBjb250ZXh0Lmxhc3RBcnJheTtcbiAgICAgICAgaWYgKGxhc3RBcnJheSkge1xuICAgICAgICAgICAgZGVzdHJveUFycmF5KGNvbnRleHQsIGxhc3RBcnJheSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWd1bGFyIHZhbHVlcywgbm8gcGxhY2Vob2xkZXJzXG4gICAgICAgIGNvbnN0IGVsbSA9IGNvbnRleHQuc2ltcGxlVmFsdWVFbG07XG4gICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb250ZXh0LnNpbXBsZVZhbHVlRWxtO1xuICAgICAgICAgICAgYWRkUGFpbnRSZW1vdmVyKGVsbSwgJ3NtYXJ0UmVtb3ZlQnlDb250ZXh0Jyk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJHbG9iYWwgPSBjb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgaWYgKHN1Ykdsb2JhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gY29udGV4dFxuICAgICAgICB9XG4gICAgICAgIHN1Ykdsb2JhbC5kZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgb2xkZXN0ID0gY29udGV4dC5zdGF0ZT8ub2xkZXN0O1xuICAgICAgICBpZiAob2xkZXN0KSB7XG4gICAgICAgICAgICBzbWFydFJlbW92ZUtpZHMoY29udGV4dCwgYWxsUHJvbWlzZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBkZXN0cm95Q29udGV4dHMgfSBmcm9tICcuLi90YWcvZGVzdHJveUNvbnRleHRzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNtYXJ0UmVtb3ZlS2lkcyB9IGZyb20gJy4uL3RhZy9zbWFydFJlbW92ZUtpZHMuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcnVuQmVmb3JlRGVzdHJveSB9IGZyb20gJy4uL3RhZy90YWdSdW5uZXIuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lTdXBwb3J0KHN1cHBvcnQsIGdsb2JhbCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBzdXBwb3J0LmNvbnRleHQ7XG4gICAgZ2xvYmFsLmRlbGV0ZWQgPSB0cnVlO1xuICAgIGNvbnRleHQucmVuZGVyQ291bnQgPSAwOyAvLyBpZiBpdCBjb21lcyBiYWNrLCB3b250IGJlIGNvbnNpZGVyZWQgYW4gdXBkYXRlXG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICBjb25zdCBzdWJDb250ZXh0cyA9IGNvbnRleHQuY29udGV4dHM7XG4gICAgZGVzdHJveUNvbnRleHRzKHN1YkNvbnRleHRzLCBzdXBwb3J0KTtcbiAgICAvLyB0YWcoKSBvbmx5IGRlc3Ryb3lcbiAgICBpZiAoc3VwcG9ydC50ZW1wbGF0ZXIud3JhcHBlcikge1xuICAgICAgICBydW5CZWZvcmVEZXN0cm95KHN1cHBvcnQsIGdsb2JhbCk7XG4gICAgfVxuICAgIHNtYXJ0UmVtb3ZlS2lkcyhjb250ZXh0LCBwcm9taXNlcyk7XG4gICAgZGVsZXRlIGNvbnRleHQuc3RhdGU7XG4gICAgZGVsZXRlIGNvbnRleHQuY29udGV4dHM7XG4gICAgZGVsZXRlIGNvbnRleHQucmV0dXJuVmFsdWU7XG4gICAgcmV0dXJuIHByb21pc2VzO1xufVxuIiwiaW1wb3J0IHsgQmFzaWNUeXBlcywgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0xpa2VUYWdzKG5ld1N1cHBvcnQsIC8vIG5ld1xub2xkU3VwcG9ydCkge1xuICAgIGNvbnN0IGlzTGlrZSA9IGlzTGlrZUJhc2VUYWdzKG5ld1N1cHBvcnQsIG9sZFN1cHBvcnQpO1xuICAgIC8vIGlzIHRoaXMgcGVyaGFwcyBhbiBvdXRlckhUTUwgY29tcGFyZT8gICAgICBcbiAgICBpZiAoIWlzTGlrZSAmJiBvbGRTdXBwb3J0LnRlbXBsYXRlci50YWc/Ll9pbm5lckhUTUwpIHtcbiAgICAgICAgaWYgKGlzTGlrZUJhc2VUYWdzKG5ld1N1cHBvcnQub3V0ZXJIVE1MLCBvbGRTdXBwb3J0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzTGlrZTtcbn1cbmZ1bmN0aW9uIGlzTGlrZUJhc2VUYWdzKG5ld1N1cHBvcnQsIC8vIG5ld1xub2xkU3VwcG9ydCkge1xuICAgIGNvbnN0IHRlbXBsYXRlcjAgPSBuZXdTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCB0ZW1wbGF0ZXIxID0gb2xkU3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgY29uc3QgbmV3VGFnID0gdGVtcGxhdGVyMD8udGFnIHx8IG5ld1N1cHBvcnQ7XG4gICAgY29uc3Qgb2xkVGFnID0gdGVtcGxhdGVyMS50YWc7IC8vIHx8IChvbGRTdXBwb3J0IGFzIGFueSlcbiAgICBpZiAodGVtcGxhdGVyMD8udGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZXIwLmRvbSA9PT0gdGVtcGxhdGVyMS5kb207XG4gICAgfVxuICAgIHN3aXRjaCAobmV3VGFnLnRhZ0pzVHlwZSkge1xuICAgICAgICBjYXNlIFZhbHVlVHlwZXMuZG9tOiB7XG4gICAgICAgICAgICBpZiAob2xkVGFnPy50YWdKc1R5cGUgIT09IFZhbHVlVHlwZXMuZG9tKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBuZXdUYWcgaXMgbm90IGV2ZW4gc2FtZSB0eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNMaWtlRG9tVGFncyhuZXdUYWcsIG9sZFRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRhZzoge1xuICAgICAgICAgICAgY29uc3QgbGlrZSA9IGlzTGlrZVN0cmluZ1RhZ3MobmV3VGFnLCBvbGRUYWcsIG5ld1N1cHBvcnQsIG9sZFN1cHBvcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGxpa2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHRhZ0pzVHlwZSBvZiAke25ld1RhZy50YWdKc1R5cGV9YCk7XG59XG4vLyB1c2VkIHdoZW4gY29tcGlsZXIgd2FzIHVzZWRcbmV4cG9ydCBmdW5jdGlvbiBpc0xpa2VEb21UYWdzKG5ld1RhZywgb2xkVGFnKSB7XG4gICAgY29uc3QgZG9tTWV0YTAgPSBuZXdUYWcuZG9tO1xuICAgIGNvbnN0IGRvbU1ldGExID0gb2xkVGFnLmRvbTtcbiAgICByZXR1cm4gZG9tTWV0YTAgPT09IGRvbU1ldGExO1xufVxuLy8gdXNlZCBmb3Igbm8gY29tcGlsaW5nXG5mdW5jdGlvbiBpc0xpa2VTdHJpbmdUYWdzKG5ld1RhZywgb2xkVGFnLCBuZXdTdXBwb3J0LCAvLyBuZXdcbm9sZFN1cHBvcnQpIHtcbiAgICBjb25zdCBzdHJpbmdzMCA9IG5ld1RhZy5zdHJpbmdzO1xuICAgIGNvbnN0IHN0cmluZ3MxID0gb2xkVGFnLnN0cmluZ3M7XG4gICAgaWYgKHN0cmluZ3MwLmxlbmd0aCAhPT0gc3RyaW5nczEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZXZlcnlTdHJpbmdNYXRjaGVkID0gc3RyaW5nczAuZXZlcnkoKHN0cmluZywgaW5kZXgpID0+IHN0cmluZ3MxW2luZGV4XS5sZW5ndGggPT09IHN0cmluZy5sZW5ndGggLy8gcGVyZm9ybWFuY2UsIGp1c3QgY29tcGFyZSBsZW5ndGggb2Ygc3RyaW5ncyAvLyBUT0RPOiBEb2N1bWVudCB0aGlzXG4gICAgKTtcbiAgICBpZiAoIWV2ZXJ5U3RyaW5nTWF0Y2hlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlczAgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci52YWx1ZXMgfHwgbmV3VGFnLnZhbHVlcztcbiAgICBjb25zdCB2YWx1ZXMxID0gb2xkU3VwcG9ydC50ZW1wbGF0ZXIudmFsdWVzIHx8IG9sZFRhZy52YWx1ZXM7XG4gICAgcmV0dXJuIGlzTGlrZVZhbHVlU2V0cyh2YWx1ZXMwLCB2YWx1ZXMxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xpa2VWYWx1ZVNldHModmFsdWVzMCwgdmFsdWVzMSkge1xuICAgIGNvbnN0IHZhbHVlc0xlbmd0aHNNYXRjaCA9IHZhbHVlczAubGVuZ3RoID09PSB2YWx1ZXMxLmxlbmd0aDtcbiAgICBpZiAoIXZhbHVlc0xlbmd0aHNNYXRjaCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGFsbFZhcnNNYXRjaCA9IHZhbHVlczEuZXZlcnkoZnVuY3Rpb24gaXNFdmVyeVZhbHVlQWxpa2UodmFsdWUsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVUbyA9IHZhbHVlczBbaW5kZXhdO1xuICAgICAgICBjb25zdCBpc0Z1bmN0aW9ucyA9IHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uICYmIHR5cGVvZiAoY29tcGFyZVRvKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdNYXRjaCA9IHZhbHVlLnRvU3RyaW5nKCkgPT09IGNvbXBhcmVUby50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHN0cmluZ01hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgaWYgKGFsbFZhcnNNYXRjaCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuLi9yZW5kZXIvZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbShjb250ZXh0KSB7XG4gICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IHN0YXRlID0gY29udGV4dC5zdGF0ZTtcbiAgICBjb25zdCBsYXN0U3VwcG9ydCA9IHN0YXRlLm5ld2VzdDtcbiAgICAvLyBkZXN0cm95IG9sZCBjb21wb25lbnQsIHZhbHVlIGlzIG5vdCBhIGNvbXBvbmVudFxuICAgIGRlc3Ryb3lTdXBwb3J0KGxhc3RTdXBwb3J0LCBnbG9iYWwpO1xuICAgIGRlc3Ryb3lTdXBwb3J0Q29udGV4dChjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lTdXBwb3J0Q29udGV4dChjb250ZXh0KSB7XG4gICAgLy8gZGVsZXRlIGNvbnRleHQuaHRtbERvbU1ldGFcbiAgICBjb250ZXh0Lmh0bWxEb21NZXRhID0gW107XG4gICAgZGVsZXRlIGNvbnRleHQuY29udGV4dHM7XG4gICAgZGVsZXRlIGNvbnRleHQuc3RhdGU7XG4gICAgZGVsZXRlIGNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnRleHQucmVuZGVyQ291bnQgPSAwO1xufVxuIiwiaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi91cGRhdGUvZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0IH0gZnJvbSAnLi4vcmVuZGVyL2Rlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzU3RhdGljVGFnIH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBpc0xpa2VUYWdzIH0gZnJvbSAnLi9pc0xpa2VUYWdzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRyeVVwZGF0ZVRvVGFnIH0gZnJvbSAnLi91cGRhdGUvdHJ5VXBkYXRlVG9UYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIH0gZnJvbSAnLi9kZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVGFnVmFsdWVDaGFuZ2UobmV3VmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgbGFzdFN1cHBvcnQgPSBjb250ZXh0SXRlbS5zdGF0ZT8ubmV3ZXN0O1xuICAgIGNvbnN0IGlzVmFsdWVUYWcgPSBpc1N0YXRpY1RhZyhuZXdWYWx1ZSk7XG4gICAgY29uc3QgbmV3VGFnID0gbmV3VmFsdWU7XG4gICAgaWYgKGlzVmFsdWVUYWcpIHtcbiAgICAgICAgLy8gaXRzIGEgZGlmZmVyZW50IHRhZyBub3dcbiAgICAgICAgY29uc3QgbGlrZVRhZ3MgPSBpc0xpa2VUYWdzKG5ld1RhZywgbGFzdFN1cHBvcnQpO1xuICAgICAgICBpZiAoIWxpa2VUYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gNzsgLy8gJ3RhZy1zd2FwJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBpc1RhZyA9IG5ld1ZhbHVlPy50YWdKc1R5cGU7XG4gICAgaWYgKGlzVGFnKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZS53cmFwcGVyPy5vcmlnaW5hbCA9PT0gY29udGV4dEl0ZW0udmFsdWUud3JhcHBlcj8ub3JpZ2luYWwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA4ODsgLy8gaXRzIHNhbWUgdGFnIHdpdGggbmV3IHZhbHVlc1xuICAgIH1cbiAgICAvLyBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dEl0ZW0pXG4gICAgcmV0dXJuIDg7IC8vICduby1sb25nZXItdGFnJ1xufVxuLypcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlKFxuICBuZXdWYWx1ZTogdW5rbm93bixcbiAgY29udGV4dEl0ZW06IENvbnRleHRJdGVtLFxuKSB7XG4gIGNvbnN0IGNoZWNrVmFsdWUgPSBjaGVja1RhZ1ZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSlcblxuICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWwgYXMgU3VwcG9ydFRhZ0dsb2JhbFxuICBjb25zdCBsYXN0U3VwcG9ydCA9IGNvbnRleHRJdGVtLnN0YXRlPy5uZXdlc3QgYXMgQW55U3VwcG9ydFxuICBcbiAgaWYoY2hlY2tWYWx1ZSA9PT0gNykge1xuICAgIGRlc3Ryb3lTdXBwb3J0KGxhc3RTdXBwb3J0LCBnbG9iYWwpXG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtIGFzIFN1cHBvcnRDb250ZXh0SXRlbSlcbiAgICByZXR1cm4gNyAvLyAndGFnLXN3YXAnXG4gIH1cbiAgXG4gIGlmKGNoZWNrVmFsdWUgPT09IDgpIHtcbiAgICBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dEl0ZW0pXG4gICAgcmV0dXJuIDhcbiAgfVxuXG4gIGNvbnN0IGlzVmFsdWVUYWcgPSBpc1N0YXRpY1RhZyhuZXdWYWx1ZSlcbiAgaWYoaXNWYWx1ZVRhZykge1xuICAgIC8vIGFsd2F5cyBjYXVzZSBhIHJlZHJhdyBvZiBzdGF0aWMgdGFncyAod2FzIGZhbHNlKVxuICAgIHRyeVVwZGF0ZVRvVGFnKFxuICAgICAgY29udGV4dEl0ZW0sXG4gICAgICBuZXdWYWx1ZSBhcyBUZW1wbGF0ZXJSZXN1bHQsXG4gICAgICBsYXN0U3VwcG9ydCBhcyBBbnlTdXBwb3J0LFxuICAgIClcblxuICAgIHJldHVybiAwXG4gIH1cblxuICBjb25zdCBpc1RhZyA9IChuZXdWYWx1ZSBhcyBhbnkpPy50YWdKc1R5cGVcbiAgaWYoaXNUYWcpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGNvbnRleHRJdGVtLnN0YXRlIGFzIENvbnRleHRTdGF0ZU1ldGFcbiAgICBjb25zdCBzdXBwb3J0ID0gc3RhdGUubmV3ZXN0IGFzIEFueVN1cHBvcnRcbiAgICBjb25zdCBvd25lclN1cHBvcnQgPSBzdXBwb3J0Lm93bmVyU3VwcG9ydCBhcyBBbnlTdXBwb3J0XG4gICAgY29uc3QgcmVzdWx0ID0gdHJ5VXBkYXRlVG9UYWcoXG4gICAgICBjb250ZXh0SXRlbSxcbiAgICAgIG5ld1ZhbHVlIGFzIFRlbXBsYXRlclJlc3VsdCxcbiAgICAgIG93bmVyU3VwcG9ydCxcbiAgICApXG5cbiAgICBjb25zdCBkb05vdFJlZHJhdyA9IHJlc3VsdCA9PT0gdHJ1ZVxuXG4gICAgaWYoZG9Ob3RSZWRyYXcpIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuXG4gICAgcmV0dXJuIDg4IC8vIGl0cyBzYW1lIHRhZyB3aXRoIG5ldyB2YWx1ZXNcbiAgfVxuXG4gIGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbShjb250ZXh0SXRlbSlcbiAgcmV0dXJuIDhcbn1cbiovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgY29uc3QgbGFzdFN1cHBvcnQgPSBjb250ZXh0SXRlbS5zdGF0ZT8ubmV3ZXN0O1xuICAgIGNvbnN0IGlzVmFsdWVUYWcgPSBpc1N0YXRpY1RhZyhuZXdWYWx1ZSk7XG4gICAgY29uc3QgbmV3VGFnID0gbmV3VmFsdWU7XG4gICAgaWYgKGlzVmFsdWVUYWcpIHtcbiAgICAgICAgLy8gaXRzIGEgZGlmZmVyZW50IHRhZyBub3dcbiAgICAgICAgY29uc3QgbGlrZVRhZ3MgPSBpc0xpa2VUYWdzKG5ld1RhZywgbGFzdFN1cHBvcnQpO1xuICAgICAgICBpZiAoIWxpa2VUYWdzKSB7XG4gICAgICAgICAgICBkZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCwgZ2xvYmFsKTtcbiAgICAgICAgICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgICAgICAgICByZXR1cm4gNzsgLy8gJ3RhZy1zd2FwJ1xuICAgICAgICB9XG4gICAgICAgIC8vIGFsd2F5cyBjYXVzZSBhIHJlZHJhdyBvZiBzdGF0aWMgdGFncyAod2FzIGZhbHNlKVxuICAgICAgICB0cnlVcGRhdGVUb1RhZyhjb250ZXh0SXRlbSwgbmV3VmFsdWUsIGxhc3RTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGlzVGFnID0gbmV3VmFsdWU/LnRhZ0pzVHlwZTtcbiAgICBpZiAoaXNUYWcpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBjb250ZXh0SXRlbS5zdGF0ZTtcbiAgICAgICAgY29uc3Qgc3VwcG9ydCA9IHN0YXRlLm5ld2VzdDtcbiAgICAgICAgY29uc3Qgb3duZXJTdXBwb3J0ID0gc3VwcG9ydC5vd25lclN1cHBvcnQ7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRyeVVwZGF0ZVRvVGFnKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgY29uc3QgZG9Ob3RSZWRyYXcgPSByZXN1bHQgPT09IHRydWU7XG4gICAgICAgIGlmIChkb05vdFJlZHJhdykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDg4OyAvLyBpdHMgc2FtZSB0YWcgd2l0aCBuZXcgdmFsdWVzXG4gICAgfVxuICAgIGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbShjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIDg7IC8vICduby1sb25nZXItdGFnJ1xufVxuIiwiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL3N1YmplY3QvU3ViamVjdC5jbGFzcy5qcyc7XG5pbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBhZGRPbmVDb250ZXh0KHZhbHVlLCBjb250ZXh0cywgd2l0aGluT3duZXJFbGVtZW50LCBwYXJlbnRDb250ZXh0KSB7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSB7XG4gICAgICAgIHVwZGF0ZUNvdW50OiAwLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgICAgIHRhZ0pzVmFyOiB2YWx1ZVRvVGFnSnNWYXIodmFsdWUpLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQsXG4gICAgICAgIHBhcmVudENvbnRleHQsXG4gICAgICAgIHZhbHVlSW5kZXg6IGNvbnRleHRzLmxlbmd0aCwgLy8gd2hlbiAtMSBpdHMgYSByYXcgYm9sdCB2YWx1ZVxuICAgIH07XG4gICAgY29udGV4dHMucHVzaChjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgcGFpbnRBcHBlbmQsIHBhaW50QXBwZW5kcywgcGFpbnRCZWZvcmUsIHBhaW50Q29tbWFuZHMgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBhZGRPbmVDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3JlbmRlci9hZGRPbmVDb250ZXh0LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gXCIuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzXCI7XG5pbXBvcnQgeyBkb21Qcm9jZXNzQ29udGV4dEl0ZW0gfSBmcm9tIFwiLi9kb21Qcm9jZXNzQ29udGV4dEl0ZW0uZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hEeW5hbWljRG9tKHZhbHVlLCBjb250ZXh0cywgc3VwcG9ydCwgLy8gb3duZXJcbnBhcmVudENvbnRleHQsIGRlcHRoLCAvLyB1c2VkIHRvIGluZGljYXRlIGlmIHZhcmlhYmxlIGxpdmVzIHdpdGhpbiBhbiBvd25lcidzIGVsZW1lbnRcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBtYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlbXB0eSk7XG4gICAgY29uc3QgaXNXaXRoaW5Pd25lckVsZW1lbnQgPSBkZXB0aCA+IDA7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBhZGRPbmVDb250ZXh0KHZhbHVlLCBjb250ZXh0cywgaXNXaXRoaW5Pd25lckVsZW1lbnQsIHBhcmVudENvbnRleHQpO1xuICAgIGNvbnRleHRJdGVtLnBsYWNlaG9sZGVyID0gbWFya2VyO1xuICAgIGNvbnRleHRJdGVtLmVsZW1lbnQgPSBhcHBlbmRUbztcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIG1hcmtlcl1dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhaW50Q29tbWFuZHMucHVzaChbXG4gICAgICAgICAgICBwYWludEJlZm9yZSwgW2luc2VydEJlZm9yZSwgbWFya2VyLCAnYXR0YWNoRHluYW1pY0RvbS5hdHRhY2hEeW5hbWljRG9tJ11cbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGRvbVByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgc3VwcG9ydCwgY29udGV4dEl0ZW0sIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGhvd1RvU2V0U3RhbmRBbG9uZUF0dHIsIHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSB9IGZyb20gXCIuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZSB9IGZyb20gXCIuLi9hdHRyaWJ1dGVzL3Byb2Nlc3NBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlQXJyYXkoYXR0cnMsIHZhbHVlcywgZG9tRWxlbWVudCwgc3VwcG9ydCwgXG4vLyBjb250ZXh0czogQ29udGV4dEl0ZW1bXSxcbnBhcmVudENvbnRleHQsIGF0dHJpYnV0ZUNvbnRleHRzKSB7XG4gICAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJzKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJbMV07XG4gICAgICAgIGNvbnN0IGlzU3BlY2lhbCA9IGF0dHJbMl0gfHwgZmFsc2U7XG4gICAgICAgIGxldCBob3dUb1NldCA9IGF0dHIubGVuZ3RoID4gMSA/IHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSA6IGhvd1RvU2V0U3RhbmRBbG9uZUF0dHI7XG4gICAgICAgIGlmIChhdHRyWzNdKSB7XG4gICAgICAgICAgICBob3dUb1NldCA9IGF0dHJbM107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q29udGV4dCA9IHByb2Nlc3NBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIHZhbHVlcywgZG9tRWxlbWVudCwgc3VwcG9ydCwgaG93VG9TZXQsIHN1cHBvcnQuY29udGV4dC5jb250ZXh0cywgcGFyZW50Q29udGV4dCwgaXNTcGVjaWFsKTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgYXR0cmlidXRlQ29udGV4dHMucHVzaChuZXdDb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IHBhaW50QXBwZW5kcywgcGFpbnRBcHBlbmQsIHBhaW50Q29tbWFuZHMsIHBhaW50QmVmb3JlIH0gZnJvbSBcIi4uL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzQXR0cmlidXRlQXJyYXkgfSBmcm9tIFwiLi9wcm9jZXNzQXR0cmlidXRlQXJyYXkuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hEb21FbGVtZW50KGRvbUVsZW1lbnQsIG5vZGUsIHZhbHVlcywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZUNvbnRleHRzID0gW107XG4gICAgLy8gYXR0cmlidXRlcyB0aGF0IG1heSBlZmZlY3Qgc3R5bGUsIGNvbWUgZmlyc3QgZm9yIHBlcmZvcm1hbmNlXG4gICAgaWYgKG5vZGUuYXQpIHtcbiAgICAgICAgcHJvY2Vzc0F0dHJpYnV0ZUFycmF5KG5vZGUuYXQsIHZhbHVlcywgZG9tRWxlbWVudCwgc3VwcG9ydCwgXG4gICAgICAgIC8vIGNvbnRleHRzLFxuICAgICAgICBwYXJlbnRDb250ZXh0LCBhdHRyaWJ1dGVDb250ZXh0cyk7XG4gICAgfVxuICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgZG9tRWxlbWVudCwgJ2FwcGVuZFRvQXR0YWNoRG9tRWxlbWVudCddXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYWludENvbW1hbmRzLnB1c2goW3BhaW50QmVmb3JlLCBbaW5zZXJ0QmVmb3JlLCBkb21FbGVtZW50LCAnaW5zZXJ0QmVmb3JlQXR0YWNoRG9tRWxlbWVudCddXSk7XG4gICAgfVxuICAgIHJldHVybiBhdHRyaWJ1dGVDb250ZXh0cztcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZEVsZW1lbnRTdHJpbmcsIHBhaW50QXBwZW5kcywgcGFpbnRCZWZvcmVFbGVtZW50U3RyaW5nLCBwYWludENvbW1hbmRzIH0gZnJvbSBcIi4uL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gXCIuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzXCI7XG5pbXBvcnQgeyBhdHRhY2hEeW5hbWljRG9tIH0gZnJvbSBcIi4uLy4uL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvYXR0YWNoRHluYW1pY0RvbS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgYXR0YWNoRG9tRWxlbWVudCB9IGZyb20gXCIuL2F0dGFjaERvbUVsZW1lbnQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwiLi4vLi4vc3ViamVjdC9TdWJqZWN0LmNsYXNzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoRG9tRWxlbWVudHMobm9kZXMsIHZhbHVlcywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgZGVwdGgsIC8vIHVzZWQgdG8ga25vdyBpZiBkeW5hbWljIHZhcmlhYmxlcyBsaXZlIHdpdGhpbiBwYXJlbnQgb3duZXIgdGFnL3N1cHBvcnRcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBjb250ZXh0cyA9IHN1cHBvcnQuY29udGV4dC5jb250ZXh0cztcbiAgICBjb25zdCBkb20gPSBbXTtcbiAgICBpZiAoYXBwZW5kVG8gJiYgaW5zZXJ0QmVmb3JlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5zZXJ0QmVmb3JlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZW1wdHkpO1xuICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgaW5zZXJ0QmVmb3JlXV0pO1xuICAgICAgICBhcHBlbmRUbyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gbG9vcCBtYXAgb2YgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGJlIHB1dCBkb3duIG9uIGRvY3VtZW50XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG5vZGVzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaW5kZXhdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG5vZGUudjtcbiAgICAgICAgY29uc3QgaXNOdW0gPSAhaXNOYU4odmFsdWUpO1xuICAgICAgICBpZiAoaXNOdW0pIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlSW5kZXggPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1t2YWx1ZUluZGV4XTtcbiAgICAgICAgICAgIGF0dGFjaER5bmFtaWNEb20odmFsdWUsIGNvbnRleHRzLCBzdXBwb3J0LCBwYXJlbnRDb250ZXh0LCBkZXB0aCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdOb2RlID0ge307IC8vIERvbU9iamVjdFRleHRcbiAgICAgICAgZG9tLnB1c2gobmV3Tm9kZSk7XG4gICAgICAgIGlmIChub2RlLm5uID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIGF0dGFjaERvbVRleHQobmV3Tm9kZSwgbm9kZSwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb21FbGVtZW50ID0gbmV3Tm9kZS5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlLm5uKTtcbiAgICAgICAgLy8gQ3JlYXRlIHBhcmVudCBjb250ZXh0IGZvciBhdHRyaWJ1dGVzIGZpcnN0XG4gICAgICAgIGNvbnN0IG5ld1BhcmVudENvbnRleHQgPSB7XG4gICAgICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgICAgIGlzQXR0cnM6IHRydWUsXG4gICAgICAgICAgICBlbGVtZW50OiBkb21FbGVtZW50LFxuICAgICAgICAgICAgcGFyZW50Q29udGV4dCxcbiAgICAgICAgICAgIGNvbnRleHRzOiBbXSxcbiAgICAgICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgICAgICAgICAgdGFnSnNWYXI6IHtcbiAgICAgICAgICAgICAgICB0YWdKc1R5cGU6ICduZXctcGFyZW50LWNvbnRleHQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIC8vIG9uZSBzaW5nbGUgaHRtbCBlbGVtZW50LiBUaGlzIGlzIHdoZXJlIGF0dHJpYnV0ZSBwcm9jZXNzaW5nIHRha2VzIHBsYWNlXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUNvbnRleHRzID0gYXR0YWNoRG9tRWxlbWVudChkb21FbGVtZW50LCBub2RlLCB2YWx1ZXMsIHN1cHBvcnQsIG5ld1BhcmVudENvbnRleHQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgICAgICAvLyBVcGRhdGUgcGFyZW50IGNvbnRleHQgd2l0aCBlbGVtZW50IGFuZCBhdHRyaWJ1dGUgY29udGV4dHNcbiAgICAgICAgbmV3UGFyZW50Q29udGV4dC5lbGVtZW50ID0gZG9tRWxlbWVudDtcbiAgICAgICAgbmV3UGFyZW50Q29udGV4dC5jb250ZXh0cyA9IGF0dHJpYnV0ZUNvbnRleHRzO1xuICAgICAgICBpZiAobm9kZS5jaCkge1xuICAgICAgICAgICAgbmV3Tm9kZS5jaCA9IGF0dGFjaERvbUVsZW1lbnRzKG5vZGUuY2gsIHZhbHVlcywgc3VwcG9ydCwgbmV3UGFyZW50Q29udGV4dCwgXG4gICAgICAgICAgICAvLyBjb250ZXh0cyxcbiAgICAgICAgICAgIGRlcHRoICsgMSwgZG9tRWxlbWVudCwgaW5zZXJ0QmVmb3JlKS5kb207XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgZG9tLCBjb250ZXh0cyB9O1xufVxuZnVuY3Rpb24gYXR0YWNoRG9tVGV4dChuZXdOb2RlLCBub2RlLCBvd25lciwgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgdGV4dE5vZGUgPSBuZXdOb2RlO1xuICAgIGNvbnN0IHN0cmluZyA9IHRleHROb2RlLnRjID0gbm9kZS50YztcbiAgICBpZiAob3duZXIpIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kRWxlbWVudFN0cmluZywgW293bmVyLCBzdHJpbmcsIGZ1bmN0aW9uIGFmdGVyQXBwZW5Eb21UZXh0KGVsbSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5kb21FbGVtZW50ID0gZWxtO1xuICAgICAgICAgICAgICAgIH1dXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZUVsZW1lbnRTdHJpbmcsIFtpbnNlcnRCZWZvcmUsIHN0cmluZywgZnVuY3Rpb24gYWZ0ZXJJbnNlcnREb21UZXh0KGVsbSkge1xuICAgICAgICAgICAgICAgIHRleHROb2RlLmRvbUVsZW1lbnQgPSBlbG07XG4gICAgICAgICAgICB9XV0pO1xufVxuIiwiaW1wb3J0IHsgYXR0YWNoRG9tRWxlbWVudHMgfSBmcm9tICcuL2RvbS9hdHRhY2hEb21FbGVtZW50cy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXREb21NZXRhIH0gZnJvbSAnLi4vdGFnL2RvbU1ldGFDb2xsZWN0b3IuanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcGFpbnRpbmcgfSBmcm9tICcuL3BhaW50LmZ1bmN0aW9uLmpzJztcbi8qKiBGdW5jdGlvbiB0aGF0IGtpY2tzIG9mZiBhY3R1YWxseSBwdXR0aW5nIHRhZ3MgZG93biBhcyBIVE1MIGVsZW1lbnRzICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIC8vIFRPRE8gdGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgY29tcG9uZW50cyBhbmQgbm90IGJhc2ljIHRhZ3NcbiAgICBzdWJqZWN0LnN0YXRlID0gc3ViamVjdC5zdGF0ZSB8fCB7fTtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBzdWJqZWN0LnN0YXRlO1xuICAgIHN0YXRlTWV0YS5vbGRlc3QgPSBzdXBwb3J0O1xuICAgIHN0YXRlTWV0YS5uZXdlc3QgPSBzdXBwb3J0O1xuICAgIHN1YmplY3Quc3RhdGUub2xkZXIgPSBzdWJqZWN0LnN0YXRlLm5ld2VyO1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgY29uc3QgcmVzdWx0ID0gYXR0YWNoSHRtbERvbU1ldGEoc3VwcG9ydCwgc3VwcG9ydC5jb250ZXh0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICBzdWJqZWN0Lmh0bWxEb21NZXRhID0gcmVzdWx0LmRvbTtcbiAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgIC8vIHJldHVybiBmcmFnbWVudFxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhdHRhY2hIdG1sRG9tTWV0YShzdXBwb3J0LCBwYXJlbnRDb250ZXh0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgZG9tTWV0YSA9IGxvYWREb21NZXRhKHN1cHBvcnQpO1xuICAgIGNvbnN0IHRoaXNUYWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpc1RhZy52YWx1ZXM7XG4gICAgY29uc3QgY29udGV4dHMgPSBbXTtcbiAgICBzdXBwb3J0LmNvbnRleHQuY29udGV4dHMgPSBjb250ZXh0cztcbiAgICBjb25zdCByZXN1bHQgPSBhdHRhY2hEb21FbGVtZW50cyhkb21NZXRhLCB2YWx1ZXMsIHN1cHBvcnQsIHBhcmVudENvbnRleHQsIFxuICAgIC8vIGNvbnRleHRzLFxuICAgIDAsIC8vIGRlcHRoXG4gICAgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKiBFeHRyYWN0cyB2YXJpYWJsZXMgZnJvbSBzdXBwb3J0IGluIG9yZGVyIHRvIG1lcmdlIHN0cmluZ3MgJiB2YWx1ZXMgd2l0aCBkb20gbWV0YSBpbnRvIGEgaHRtbCBhcnJheSB0cmVlICovXG5mdW5jdGlvbiBsb2FkRG9tTWV0YShzdXBwb3J0KSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0gc3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgY29uc3QgdGhpc1RhZyA9IHRlbXBsYXRlci50YWc7XG4gICAgaWYgKHRoaXNUYWcudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLmRvbSkge1xuICAgICAgICByZXR1cm4gdGhpc1RhZy5kb207XG4gICAgfVxuICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzVGFnLnN0cmluZ3M7XG4gICAgcmV0dXJuIGdldERvbU1ldGEoc3RyaW5ncywgdGhpc1RhZy52YWx1ZXMpO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlSHRtbFN1cHBvcnQgfSBmcm9tICcuLi8uLi90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4uLy4uL3RhZy9jaGVja1RhZ1ZhbHVlQ2hhbmdlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnSW5pdCB9IGZyb20gJy4uLy4uL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG4vKiogV2hlbiBmaXJzdCB0aW1lIHJlbmRlciwgYWRkcyB0byBvd25lciBjaGlsZFRhZ3NcbiAqIFVzZWQgZm9yIEJPVEggaW5zZXJ0cyAmIHVwZGF0ZXMgdG8gdmFsdWVzIHRoYXQgd2VyZSBzb21ldGhpbmcgZWxzZVxuICogSW50ZW5kZWQgdXNlIG9ubHkgZm9yIHVwZGF0ZXNcbiovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RhZyhvd25lclN1cHBvcnQsIC8vIG93bmVyXG5jb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBjb250ZXh0SXRlbS5zdGF0ZS5uZXdlc3Q7XG4gICAgY29uc3QgcGggPSBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcjtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgdW5kZWZpbmVkLCBwaCk7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdGFnRmFrZVRlbXBsYXRlcih0YWcpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBnZXRGYWtlVGVtcGxhdGVyKCk7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHRhZztcbiAgICB0YWcudGVtcGxhdGVyID0gdGVtcGxhdGVyO1xuICAgIHJldHVybiB0ZW1wbGF0ZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmFrZVRlbXBsYXRlcigpIHtcbiAgICBjb25zdCBmYWtlID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMudGVtcGxhdGVyLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1RhZ0luaXQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb3BXYXRjaDogJ3NoYWxsb3cnLFxuICAgICAgICBrZXk6IGJsYW5rSGFuZGxlcixcbiAgICB9O1xuICAgIHJldHVybiBmYWtlO1xufVxuLyoqIENyZWF0ZSBzdXBwb3J0IGZvciBhIHRhZyBjb21wb25lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIHN1YmplY3QpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gY3JlYXRlSHRtbFN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBzdWJqZWN0LmNvbnRleHRzID0gW107XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBidWlsZEJlZm9yZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvYnVpbGRCZWZvcmVFbGVtZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZHMsIHBhaW50QmVmb3JlLCBwYWludENvbW1hbmRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IG5ld1N1cHBvcnRCeVRlbXBsYXRlciB9IGZyb20gJy4uLy4uL3JlbmRlci91cGRhdGUvcHJvY2Vzc1RhZy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc05ld1N1YmplY3RUYWcodGVtcGxhdGVyLCBzdWJqZWN0LCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbm93bmVyU3VwcG9ydCwgLy8gb3duZXJcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gbmV3U3VwcG9ydEJ5VGVtcGxhdGVyKHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICBjb25zdCByZXN1bHQgPSBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgYXBwZW5kVG8sIGFwcGVuZFRvID8gdW5kZWZpbmVkIDogaW5zZXJ0QmVmb3JlKTtcbiAgICBmb3IgKGNvbnN0IGRvbSBvZiByZXN1bHQuZG9tKSB7XG4gICAgICAgIGlmIChkb20ubWFya2VyKSB7XG4gICAgICAgICAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgZG9tLm1hcmtlcl1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhaW50Q29tbWFuZHMucHVzaChbcGFpbnRCZWZvcmUsIFtpbnNlcnRCZWZvcmUsIGRvbS5tYXJrZXIsICdzdWJNYXJrZXInXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkb20uZG9tRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgICAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGRvbS5kb21FbGVtZW50LCAnc3ViQXBwZW5kVG8nXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZSwgW2luc2VydEJlZm9yZSwgZG9tLmRvbUVsZW1lbnQsICdzdWJJbnNlcnRCZWZvcmUnXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgcHJvY2Vzc1RhZyB9IGZyb20gJy4uLy4uL3JlbmRlci91cGRhdGUvcHJvY2Vzc1RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTmV3U3ViamVjdFRhZyB9IGZyb20gJy4vcHJvY2Vzc05ld1N1YmplY3RUYWcuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWdJbml0KHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29udGV4dEl0ZW0uc3RhdGUgPSB7fTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NUYWcob3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG59XG4iLCJpbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tICcuL2ZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZS5mdW5jdGlvbi5qcyc7XG4vKiogQ2hlY2tzIGlmIHZhbHVlIGhhcyBjaGFuZ2VkIGJlZm9yZSB1cGRhdGluZy4gVXNlZCBmb3IgYWxsIHRhZyB2YWx1ZSB1cGRhdGVzLiBEZXRlcm1pbmVzIGlmIHZhbHVlIGNoYW5nZWQgc2luY2UgbGFzdCByZW5kZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIobmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgKytjb250ZXh0SXRlbS51cGRhdGVDb3VudDtcbiAgICAvLyBUT0RPOiBXaGVuIGEgdGFnLWNvbnZlcnNpb24gb2NjdXJzIHdlIHNob3VsZCBzd2FwIGEgZGlmZmVyZW50IHByb2Nlc3NVcGRhdGUgdGhhdCBvbmx5IHJ1bnMgdGhlIGNvZGUgYmVsb3dcbiAgICBjb25zdCB0YWdKc1R5cGUgPSBjb250ZXh0SXRlbS50YWdKc1Zhci50YWdKc1R5cGU7XG4gICAgaWYgKHRhZ0pzVHlwZSAmJiBbJ3RhZy1jb252ZXJzaW9uJywgJ2VsZW1lbnQnXS5pbmNsdWRlcyh0YWdKc1R5cGUpKSB7XG4gICAgICAgIC8vIGNhbGxzIHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlXG4gICAgICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIFtdKTtcbiAgICAgICAgY29udGV4dEl0ZW0udmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIERvIG5vdCBjb250aW51ZSBpZiB0aGUgdmFsdWUgaXMganVzdCB0aGUgc2FtZVxuICAgIGlmIChuZXdWYWx1ZSA9PT0gY29udGV4dEl0ZW0udmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQpO1xufVxuIiwiaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHByb2Nlc3NUYWdJbml0IH0gZnJvbSAnLi91cGRhdGUvcHJvY2Vzc1RhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4vY2hlY2tUYWdWYWx1ZUNoYW5nZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0gfSBmcm9tICcuL2Rlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRlbXBsYXRlclJlc3VsdChwcm9wV2F0Y2gsIHByb3BzKSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMudGVtcGxhdGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1RhZ0luaXQsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcixcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0sXG4gICAgICAgIHByb3BXYXRjaCxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIGtleTogZnVuY3Rpb24ga2V5VGVtcGxhdGUoYXJyYXlWYWx1ZSkge1xuICAgICAgICAgICAgdGVtcGxhdGVyLmFycmF5VmFsdWUgPSBhcnJheVZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgbWF0Y2hlc0luamVjdGlvbihpbmplY3QpIHtcbiAgICAgICAgICAgIC8vIEZvciB0ZW1wbGF0ZXJzLCBjaGVjayBpZiB0aGUgd3JhcHBlciBtYXRjaGVzXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVyLndyYXBwZXIgPT09IGluamVjdCB8fCB0ZW1wbGF0ZXIud3JhcHBlcj8ub3JpZ2luYWwgPT09IGluamVjdD8ub3JpZ2luYWw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0ZW1wbGF0ZXI7XG59XG4iLCJleHBvcnQgY29uc3QgdGFncyA9IFtdO1xuIiwiaW1wb3J0IHsgaXNJbmxpbmVIdG1sLCByZW5kZXJJbmxpbmVIdG1sIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyRXhpc3RpbmdTdXBwb3J0IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzYWZlUmVuZGVyU3VwcG9ydChuZXdlc3QpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3ZXN0LmNvbnRleHQ7XG4gICAgY29uc3QgaXNJbmxpbmUgPSBpc0lubGluZUh0bWwobmV3ZXN0LnRlbXBsYXRlcik7XG4gICAgaWYgKGlzSW5saW5lKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJJbmxpbmVIdG1sKG5ld2VzdCk7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJFeGlzdGluZ1N1cHBvcnQobmV3ZXN0LCBuZXdlc3QsIHN1YmplY3QpO1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCB9IGZyb20gJy4uL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzQXJyYXksIGlzU3RhdGljVGFnIH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uLy4uL3N0YXRlL2luZGV4LmpzJztcbmltcG9ydCB7IHNhZmVSZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi9zYWZlUmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2FzdFByb3BzKHByb3BzLCBuZXdTdXBwb3J0LCBkZXB0aCkge1xuICAgIHJldHVybiBwcm9wcy5tYXAoZnVuY3Rpb24gZWFjaENhc3RQcm9wKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGFsdGVyUHJvcChwcm9wLCBuZXdTdXBwb3J0Lm93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgZGVwdGgpO1xuICAgIH0pO1xufVxuLyogVXNlZCB0byByZXdyaXRlIHByb3BzIHRoYXQgYXJlIGZ1bmN0aW9ucy4gV2hlbiB0aGV5IGFyZSBjYWxsZWQgaXQgc2hvdWxkIGNhdXNlIHBhcmVudCByZW5kZXJpbmcgKi9cbmZ1bmN0aW9uIGFsdGVyUHJvcChwcm9wLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoKSB7XG4gICAgaWYgKGlzU3RhdGljVGFnKHByb3ApIHx8ICFwcm9wKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cbiAgICBpZiAoIW93bmVyU3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gcHJvcDsgLy8gbm8gb25lIGFib3ZlIG1lXG4gICAgfVxuICAgIHJldHVybiBjaGVja1Byb3AocHJvcCwgb3duZXJTdXBwb3J0LCBuZXdTdXBwb3J0LCBkZXB0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcm9wKHZhbHVlLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoLCBvd25lcikge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUudGFnSnNUeXBlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIGlmIChkZXB0aCA8PSAxKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHdyYXAgZnVuY3Rpb24gYXQgZGVwdGggMCBhbmQgMVxuICAgICAgICAgICAgcmV0dXJuIGdldFByb3BXcmFwKHZhbHVlLCBvd25lciwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChkZXB0aCA9PT0gZGVlcENvbXBhcmVEZXB0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHNraXAgPSBpc1NraXBQcm9wVmFsdWUodmFsdWUpO1xuICAgIGlmIChza2lwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTsgLy8gbm8gY2hpbGRyZW4gdG8gY3Jhd2wgdGhyb3VnaFxuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQXJyYXlQcm9wKHZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrT2JqZWN0UHJvcCh2YWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCk7XG59XG5mdW5jdGlvbiBjaGVja0FycmF5UHJvcCh2YWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gdmFsdWUubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW2luZGV4XTtcbiAgICAgICAgdmFsdWVbaW5kZXhdID0gY2hlY2tQcm9wKHN1YlZhbHVlLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoICsgMSwgdmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIChzdWJWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChzdWJWYWx1ZS5tZW0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyQ2hlY2tQcm9wKGRlcHRoICsgMSwgaW5kZXgsIHN1YlZhbHVlLCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY2hlY2tPYmplY3RQcm9wKHZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Yga2V5cykge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW25hbWVdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVja1Byb3Aoc3ViVmFsdWUsIG93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgZGVwdGggKyAxLCB2YWx1ZSk7XG4gICAgICAgIGNvbnN0IG5ld1N1YlZhbHVlID0gdmFsdWVbbmFtZV07XG4gICAgICAgIGlmIChuZXdTdWJWYWx1ZSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRzZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBuYW1lKTtcbiAgICAgICAgY29uc3QgaGFzU2V0dGVyID0gZ2V0c2V0Py5nZXQgfHwgZ2V0c2V0Py5zZXQ7XG4gICAgICAgIGlmIChoYXNTZXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlW25hbWVdID0gcmVzdWx0O1xuICAgICAgICBpZiAodHlwZW9mIChyZXN1bHQpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3ViVmFsdWUubWVtKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlckNoZWNrUHJvcChkZXB0aCArIDEsIG5hbWUsIHN1YlZhbHVlLCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gYWZ0ZXJDaGVja1Byb3AoZGVwdGgsIGluZGV4LCBvcmlnaW5hbFZhbHVlLCBuZXdQcm9wLCBuZXdTdXBwb3J0KSB7XG4gICAgLy8gcmVzdG9yZSBvYmplY3QgdG8gaGF2ZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiBkZXN0cm95XG4gICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICBuZXdQcm9wW2luZGV4XS5zdWJzY3JpcHRpb24gPSBuZXdTdXBwb3J0LmNvbnRleHQuZGVzdHJveSQudG9DYWxsYmFjayhmdW5jdGlvbiBhbHRlckNoZWNrUHJvY2Vzc29yKCkge1xuICAgICAgICAgICAgbmV3UHJvcFtpbmRleF0gPSBvcmlnaW5hbFZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcFdyYXAodmFsdWUsIG93bmVyLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBhbHJlYWR5ID0gdmFsdWUubWVtO1xuICAgIC8vIGFscmVhZHkgcHJldmlvdXNseSBjb252ZXJ0ZWQgYnkgYSBwYXJlbnQ/XG4gICAgaWYgKGFscmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCB3cmFwID0gZnVuY3Rpb24gd3JhcFJ1bm5lciguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1Byb3BPd25lcih3cmFwLm1lbSwgb3duZXIsIGFyZ3MsIG93bmVyU3VwcG9ydCk7XG4gICAgfTsgLy8gd2hhdCBnZXRzIGNhbGxlZCBjYW4gc3dpdGNoIG92ZXIgcGFyZW50IHN0YXRlIGNoYW5nZXNcbiAgICB3cmFwLm9yaWdpbmFsID0gdmFsdWU7XG4gICAgd3JhcC5tZW0gPSB2YWx1ZTtcbiAgICAvLyBjb3B5IGRhdGEgcHJvcGVydGllcyB0aGF0IG1heWJlIG9uIHNvdXJjZSBmdW5jdGlvblxuICAgIE9iamVjdC5hc3NpZ24od3JhcCwgdmFsdWUpO1xuICAgIHJldHVybiB3cmFwO1xufVxuLyoqIEZ1bmN0aW9uIHNoYXJlZCBieSBhbHRlclByb3BzKCkgYW5kIHVwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50Li4uIFRPRE86IE1heSB3YW50IHRvIGhhdmUgdG8gZnVuY3Rpb25zIHRvIHJlZHVjZSBjeWNsZSBjaGVja2luZz8gICovXG5leHBvcnQgZnVuY3Rpb24gY2FsbGJhY2tQcm9wT3duZXIodG9DYWxsLCAvLyBvcmlnaW5hbCBmdW5jdGlvblxub3duZXIsIGNhbGxXaXRoLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBvd25lckNvbnRleHQgPSBvd25lclN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBuZXdlc3QgPSBvd25lckNvbnRleHQuc3RhdGU/Lm5ld2VzdCB8fCBvd25lclN1cHBvcnQ7XG4gICAgY29uc3Qgc3VwcG9ydEluQ3ljbGUgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGNvbnN0IG5vQ3ljbGUgPSBzdXBwb3J0SW5DeWNsZSA9PT0gdW5kZWZpbmVkO1xuICAgIC8vIGFjdHVhbCBmdW5jdGlvbiBjYWxsIHRvIG9yaWdpbmFsIG1ldGhvZFxuICAgIGNvbnN0IGNhbGxiYWNrUmVzdWx0ID0gdG9DYWxsLmFwcGx5KG93bmVyLCBjYWxsV2l0aCk7XG4gICAgY29uc3QgcnVuID0gZnVuY3Rpb24gcHJvcENhbGxiYWNrUHJvY2Vzc29yKCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gbmV3ZXN0LmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgICAgICBpZiAoY29udGV4dC5sb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFja1Jlc3VsdDsgLy8gY3VycmVudGx5IGluIHRoZSBtaWRkbGUgb2YgcmVuZGVyaW5nXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUoXG4gICAgICAgICAgICAgIGNvbnRleHQudmFsdWUsXG4gICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgIG93bmVyU3VwcG9ydCxcbiAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICApXG4gICAgICAqL1xuICAgICAgICAgICAgb3duZXJDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUob3duZXJDb250ZXh0LnZhbHVlLCBvd25lckNvbnRleHQsIG93bmVyU3VwcG9ydCwgW10pO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrUmVzdWx0OyAvLyBjdXJyZW50bHkgaW4gdGhlIG1pZGRsZSBvZiByZW5kZXJpbmdcbiAgICAgICAgfVxuICAgICAgICBzYWZlUmVuZGVyU3VwcG9ydChuZXdlc3QpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tSZXN1bHQ7XG4gICAgfTtcbiAgICBpZiAobm9DeWNsZSkge1xuICAgICAgICByZXR1cm4gcnVuKCk7XG4gICAgfVxuICAgIHNldFVzZU1lbW9yeS50YWdDbG9zZWQkLnRvQ2FsbGJhY2socnVuKTtcbiAgICByZXR1cm4gY2FsbGJhY2tSZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTa2lwUHJvcFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiAodmFsdWUpICE9PSBCYXNpY1R5cGVzLm9iamVjdCB8fCAhdmFsdWUgfHwgdmFsdWUudGFnSnNUeXBlO1xufVxuIiwiaW1wb3J0IHsgQmFzaWNUeXBlcywgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vc3RhdGUvc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVXcmFwKHRlbXBsYXRlciwgcmVzdWx0LCB1c2VTdXBwb3J0LCBjYXN0ZWRQcm9wcykge1xuICAgIGNvbnN0IG9yaWdpbmFsRnVuY3Rpb24gPSByZXN1bHQub3JpZ2luYWw7IC8vIChpbm5lclRhZ1dyYXAgYXMgYW55KS5vcmlnaW5hbCBhcyB1bmtub3duIGFzIFRhZ0NvbXBvbmVudFxuICAgIGNvbnN0IHN0YXRlbGVzcyA9IHRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXI7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKHVzZVN1cHBvcnQpO1xuICAgIGxldCB0YWc7XG4gICAgaWYgKHN0YXRlbGVzcykge1xuICAgICAgICB0YWcgPSB0ZW1wbGF0ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhZyA9IG9yaWdpbmFsRnVuY3Rpb24oLi4uY2FzdGVkUHJvcHMpO1xuICAgICAgICAvLyB0YWcgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uIGV4cGVjdGVkIHRvIGJlIGNhbGxlZFxuICAgICAgICBpZiAodHlwZW9mICh0YWcpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uICYmIHRhZy50YWdKc1R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGFnID0gdGFnKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXNlU3VwcG9ydC5jb250ZXh0LnJldHVyblZhbHVlID0gdGFnO1xuICAgIHRhZy50ZW1wbGF0ZXIgPSB0ZW1wbGF0ZXI7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHRhZztcbiAgICB1c2VTdXBwb3J0LmNvbnRleHQuc3RhdGUubmV3ZXIgPSB7IC4uLmNvbmZpZyB9O1xuICAgIHJldHVybiB1c2VTdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgZ2V0QmFzZVN1cHBvcnQsIHVwZ3JhZGVCYXNlVG9TdXBwb3J0IH0gZnJvbSAnLi9jcmVhdGVIdG1sU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIC8vIGF0IHJ1bnRpbWUgcmVuZGVyaW5nIG9mIGEgdGFnLCBpdCBuZWVkcyB0byBiZSBtYXJyaWVkIHRvIGEgbmV3IFN1cHBvcnQoKVxub3duZXJTdXBwb3J0LCBhcHBTdXBwb3J0LCBzdWJqZWN0LCBjYXN0ZWRQcm9wcykge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRCYXNlU3VwcG9ydCh0ZW1wbGF0ZXIsIHN1YmplY3QsIGNhc3RlZFByb3BzKTtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICByZXR1cm4gdXBncmFkZUJhc2VUb1N1cHBvcnQodGVtcGxhdGVyLCBzdXBwb3J0LCBhcHBTdXBwb3J0LCBjYXN0ZWRQcm9wcyk7XG59XG4iLCJpbXBvcnQgeyBjYXN0UHJvcHMgfSBmcm9tICcuL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzeW5jRnVuY3Rpb25Qcm9wcyB9IGZyb20gJy4uL3JlbmRlci91cGRhdGUvdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZXhlY3V0ZVdyYXAgfSBmcm9tICcuLi9yZW5kZXIvZXhlY3V0ZVdyYXAuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlZXBDb21wYXJlRGVwdGgsIHNoYWxsb3dDb21wYXJlRGVwdGggfSBmcm9tICcuL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZVN1cHBvcnQgfSBmcm9tICcuL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuLyoqIGNyZWF0ZXMvcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2hlbiBjYWxsZWQgdGhlbiBjYWxscyB0aGUgb3JpZ2luYWwgY29tcG9uZW50IGZ1bmN0aW9uXG4gKiBHZXRzIHVzZWQgYXMgdGVtcGxhdGVyLndyYXBwZXIoKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFnV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCkge1xuICAgIC8vIHRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgYnkgdGFnZ2VkanNcbiAgICBjb25zdCB3cmFwcGVyID0gZnVuY3Rpb24gdGFnRnVuV3JhcChuZXdTdXBwb3J0LCBzdWJqZWN0LCBsYXN0U3VwcG9ydCAvLyBzdWJqZWN0Lmdsb2JhbC5uZXdlc3RcbiAgICApIHtcbiAgICAgICAgLy8gd3JhcCBhbnkgcHJvcCBmdW5jdGlvbnMgdGhhdCBhcmUgcGFzc2VkIGluXG4gICAgICAgIGNvbnN0IGNhc3RlZFByb3BzID0gZ2V0Q2FzdGVkUHJvcHModGVtcGxhdGVyLCBuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCk7XG4gICAgICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IG5ld1N1cHBvcnQub3duZXJTdXBwb3J0O1xuICAgICAgICBjb25zdCB1c2VTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydC5hcHBTdXBwb3J0LCAvLyBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCBhcyBBbnlTdXBwb3J0LFxuICAgICAgICBzdWJqZWN0LCBjYXN0ZWRQcm9wcyk7XG4gICAgICAgIHJldHVybiBleGVjdXRlV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCwgdXNlU3VwcG9ydCwgY2FzdGVkUHJvcHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FzdGVkUHJvcHModGVtcGxhdGVyLCBuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCkge1xuICAgIGNvbnN0IG1heERlcHRoID0gdGVtcGxhdGVyLnByb3BXYXRjaCA9PT0gUHJvcFdhdGNoZXMuREVFUCA/IGRlZXBDb21wYXJlRGVwdGggOiBzaGFsbG93Q29tcGFyZURlcHRoO1xuICAgIGNvbnN0IHByb3BzID0gdGVtcGxhdGVyLnByb3BzO1xuICAgIGNvbnN0IHByb3BzQ29uZmlnID0gbmV3U3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICAvLyBXaGVuIGRlZmluZWQsIHRoaXMgbXVzdCBiZSBhbiB1cGRhdGUgd2hlcmUgbXkgbmV3IHByb3BzIGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUgZm9yIG1lXG4gICAgbGV0IHByZUNhc3RlZFByb3BzID0gcHJvcHNDb25maWcuY2FzdFByb3BzO1xuICAgIGNvbnN0IGxhc3RQcm9wc0NvbmZpZyA9IGxhc3RTdXBwb3J0Py5wcm9wc0NvbmZpZztcbiAgICBjb25zdCBsYXN0Q2FzdFByb3BzID0gbGFzdFByb3BzQ29uZmlnPy5jYXN0UHJvcHM7XG4gICAgaWYgKGxhc3RDYXN0UHJvcHMpIHtcbiAgICAgICAgcHJvcHNDb25maWcuY2FzdFByb3BzID0gbGFzdENhc3RQcm9wcztcbiAgICAgICAgcHJlQ2FzdGVkUHJvcHMgPSBzeW5jRnVuY3Rpb25Qcm9wcyhuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCwgbGFzdFN1cHBvcnQub3duZXJTdXBwb3J0LCBwcm9wcywgbWF4RGVwdGgpO1xuICAgIH1cbiAgICBjb25zdCBjYXN0ZWRQcm9wcyA9IHByZUNhc3RlZFByb3BzIHx8IGNhc3RQcm9wcyhwcm9wcywgbmV3U3VwcG9ydCwgMCk7XG4gICAgcmV0dXJuIGNhc3RlZFByb3BzO1xufVxuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vc3RhdGUvc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuLyoqIENvbXBhcmVzIHN0YXRlcyBvZiBwcmV2aW91cyByZW5kZXJzXG4gKiBAcHJvcGVydHkgc3VwcG9ydCAtIFRoZSB3b3JrZmxvdyB0aGF0IHN1cHBvcnRzIGEgc2luZ2xlIHRhZ1xuICogQHByb3BlcnR5IG93bmVyU3VwcG9ydCAtIHVuZGVmaW5lZCB3aGVuIFwic3VwcG9ydFwiIGlzIHRoZSBhcHAgZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuQWZ0ZXJTdXBwb3J0UmVuZGVyKHN1cHBvcnQsIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHN1YmplY3QgPSBzdXBwb3J0LmNvbnRleHQ7XG4gICAgKytzdWJqZWN0LnJlbmRlckNvdW50O1xuICAgIHJ1bkFmdGVyUmVuZGVyKCk7XG4gICAgc2V0VXNlTWVtb3J5LnRhZ0Nsb3NlZCQubmV4dChvd25lclN1cHBvcnQpO1xufVxuLyoqIHJ1biBhZnRlciByZW5kZXJpbmcgYW55dGhpbmcgd2l0aCBzdGF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bkFmdGVyUmVuZGVyKGNvbnRleHQpIHtcbiAgICBzYXZlU3RhdGUoY29udGV4dCk7XG4gICAgLy8gVE9ETzogcHJvdmUgdGhpcyBpcyB3b3J0aCBoYXZpbmdcbiAgICAvLyBjaGVja1N0YXRlTWlzbWF0Y2goY29uZmlnLCBzdXBwb3J0KVxuICAgIGNsZWFyU3RhdGVDb25maWcoKTtcbiAgICAvLyBzZXRVc2VNZW1vcnkudGFnQ2xvc2VkJC5uZXh0KG93bmVyU3VwcG9ydClcbn1cbmZ1bmN0aW9uIHNhdmVTdGF0ZShjb250ZXh0KSB7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbnN0IHN1YmplY3QgPSBjb250ZXh0IHx8IGNvbmZpZy5jb250ZXh0O1xuICAgIHN1YmplY3Quc3RhdGUgPSBzdWJqZWN0LnN0YXRlIHx8IHt9O1xuICAgIHN1YmplY3Quc3RhdGUubmV3ZXIgPSB7IC4uLmNvbmZpZyB9O1xuICAgIGNvbnN0IHN1cHBvcnQgPSBjb25maWcuc3VwcG9ydDtcbiAgICBzdWJqZWN0LnN0YXRlLm5ld2VzdCA9IHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTdGF0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgZGVsZXRlIGNvbmZpZy5wcmV2U3VwcG9ydDsgLy8gb25seSB0aGlzIG9uZSByZWFsbHkgbmVlZGVkXG4gICAgZGVsZXRlIGNvbmZpZy5zdXBwb3J0O1xuICAgIGRlbGV0ZSBjb25maWcuc3RhdGU7XG4gICAgZGVsZXRlIGNvbmZpZy5zdGF0ZXM7XG4gICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvaW5kZXguanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL3RhZy9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXcmFwIH0gZnJvbSAnLi9leGVjdXRlV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBydW5BZnRlclN1cHBvcnRSZW5kZXIgfSBmcm9tICcuL3J1bkFmdGVyUmVuZGVyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjYWxsVGFnKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCAvLyBjYXVzZXMgcmVzdGF0ZVxuY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgbGV0IHJlU3VwcG9ydDtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBuZXdTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICAvLyBORVcgVEFHIENSRUFURUQgSEVSRVxuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRlbXBsYXRlcjsgLy8gLndyYXBwZXIgYXMgYW55Ly8gfHwge29yaWdpbmFsOiB0ZW1wbGF0ZXJ9IGFzIGFueVxuICAgICAgICByZVN1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBuZXdTdXBwb3J0LmFwcFN1cHBvcnQsIC8vIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0IGFzIEFueVN1cHBvcnQsXG4gICAgICAgIGNvbnRleHQpO1xuICAgICAgICBleGVjdXRlV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCwgcmVTdXBwb3J0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGZ1bmN0aW9ucyB3cmFwcGVkIGluIHRhZygpXG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0ZW1wbGF0ZXIud3JhcHBlcjtcbiAgICAgICAgLy8gY2FsbHMgdGhlIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gZ2V0VGFnV3JhcCgpXG4gICAgICAgIHJlU3VwcG9ydCA9IHdyYXBwZXIobmV3U3VwcG9ydCwgY29udGV4dCwgcHJldlN1cHBvcnQpO1xuICAgIH1cbiAgICBydW5BZnRlclN1cHBvcnRSZW5kZXIocmVTdXBwb3J0LCBvd25lclN1cHBvcnQpO1xuICAgIHJlU3VwcG9ydC5vd25lclN1cHBvcnQgPSBuZXdTdXBwb3J0Lm93bmVyU3VwcG9ydDsgLy8gfHwgbGFzdE93bmVyU3VwcG9ydCkgYXMgQW55U3VwcG9ydFxuICAgIHJldHVybiByZVN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBpbml0U3RhdGUsIHJlU3RhdGVTdXBwb3J0IH0gZnJvbSAnLi4vc3RhdGUvc3RhdGUudXRpbHMuanMnO1xuaW1wb3J0IHsgY2FsbFRhZyB9IGZyb20gJy4vY2FsbFRhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlUmVuZGVyVGFnKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCAvLyBjYXVzZXMgcmVzdGF0ZVxuY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICBjb25zdCBwcmV2U3RhdGUgPSBzdGF0ZU1ldGEub2xkZXIuc3RhdGU7XG4gICAgcmVTdGF0ZVN1cHBvcnQobmV3U3VwcG9ydCwgcHJldlN1cHBvcnQsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIGNhbGxUYWcobmV3U3VwcG9ydCwgcHJldlN1cHBvcnQsIGNvbnRleHQsIG93bmVyU3VwcG9ydCk7XG59XG4vKiogVXNlZCBkdXJpbmcgZmlyc3QgcmVuZGVycyBvZiBhIHN1cHBvcnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdFRhZ1JlbmRlcihuZXdTdXBwb3J0LCBwcmV2U3VwcG9ydCwgLy8gY2F1c2VzIHJlc3RhdGVcbmNvbnRleHQsIG93bmVyU3VwcG9ydCkge1xuICAgIGluaXRTdGF0ZShuZXdTdXBwb3J0LmNvbnRleHQpO1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBjYWxsVGFnKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCBjb250ZXh0LCBvd25lclN1cHBvcnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRPbGRlclN0YXRlKHN1cHBvcnQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gc3VwcG9ydD8uY29udGV4dDtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0Py5zdGF0ZTtcbiAgICByZXR1cm4gc3RhdGVNZXRhPy5vbGRlcj8uc3RhdGU7XG59XG4iLCJpbXBvcnQgeyBvbmVSZW5kZXJUb1N1cHBvcnQgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL29uZVJlbmRlclRvU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBmaXJzdFRhZ1JlbmRlciB9IGZyb20gJy4uL3JlbmRlclRhZ09ubHkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi4vLi4vdGFnL3VwZGF0ZS9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05ld1N1YmplY3RUYWcgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL3Byb2Nlc3NOZXdTdWJqZWN0VGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUmVuZGVyT25jZUluaXQodmFsdWUsIGNvbnRleHRJdGVtLCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbm93bmVyU3VwcG9ydCwgLy8gb3duaW5nU3VwcG9ydFxuaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgY29uc3Qgc3VwcG9ydCA9IG9uZVJlbmRlclRvU3VwcG9ydCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgZmlyc3RUYWdSZW5kZXIoc3VwcG9ydCwgdW5kZWZpbmVkLCBjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHN1cHBvcnQudGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbn1cbiIsImltcG9ydCB7IGdldFRlbXBsYXRlclJlc3VsdCB9IGZyb20gJy4uL2dldFRlbXBsYXRlclJlc3VsdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBvbmVSZW5kZXJUb1N1cHBvcnQod3JhcHBlciwgc3ViamVjdCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0gZ2V0VGVtcGxhdGVyUmVzdWx0KFByb3BXYXRjaGVzLkRFRVApO1xuICAgIHRlbXBsYXRlci50YWdKc1R5cGUgPSB3cmFwcGVyLnRhZ0pzVHlwZTtcbiAgICBjb25zdCBzdXBwb3J0ID0gbmV3U3VwcG9ydEJ5VGVtcGxhdGVyKHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBsZXQgdGFnO1xuICAgIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgICAgIHRlbXBsYXRlci50YWcgPSB0YWcgfHwgd3JhcHBlcigpO1xuICAgICAgICByZXR1cm4gc3VwcG9ydDtcbiAgICB9XG4gICAgdGVtcGxhdGVyLndyYXBwZXIgPSB3cmFwO1xuICAgIHdyYXAudGFnSnNUeXBlID0gd3JhcHBlci50YWdKc1R5cGU7XG4gICAgd3JhcC5vcmlnaW5hbCA9IHdyYXBwZXIub3JpZ2luYWwgfHwgd3JhcHBlcjtcbiAgICByZXR1cm4gc3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IHByb2Nlc3NGaXJzdFRhZ1Jlc3VsdCB9IGZyb20gJy4vcHJvY2Vzc1RhZ1Jlc3VsdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldENhc3RlZFByb3BzIH0gZnJvbSAnLi4vZ2V0VGFnV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdXBwb3J0IH0gZnJvbSAnLi4vY3JlYXRlU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBmaXJzdFRhZ1JlbmRlciB9IGZyb20gJy4uLy4uL3JlbmRlci9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uLy4uL3JlbmRlci9idWlsZEJlZm9yZUVsZW1lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL3ZhbHVlVG9UYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RhZ1ZhbHVlQ2hhbmdlLCBpc1Byb21pc2UsIHBhaW50LCBTdWJqZWN0IH0gZnJvbSAnLi4vLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgdXBkYXRlVG9EaWZmVmFsdWUgfSBmcm9tICcuL3VwZGF0ZVRvRGlmZlZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNhc3RQcm9wcyB9IGZyb20gJy4uL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5mdW5jdGlvbiBjcmVhdGVTdXBwb3J0V2l0aFByb3BzKHRlbXBsYXRlciwgc3ViamVjdCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgbmV3U3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBjb25zdCBuZXdQcm9wc0NvbmZpZyA9IG5ld1N1cHBvcnQucHJvcHNDb25maWc7XG4gICAgaWYgKG5ld1Byb3BzQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IGNhc3RlZFByb3BzID0gdGVtcGxhdGVyLnRhZ0pzVHlwZSAhPT0gVmFsdWVUeXBlcy50YWdDb21wb25lbnQgPyBbXSA6IGdldENhc3RlZFByb3BzKHRlbXBsYXRlciwgbmV3U3VwcG9ydCk7XG4gICAgICAgIG5ld1Byb3BzQ29uZmlnLmNhc3RQcm9wcyA9IGNhc3RlZFByb3BzO1xuICAgIH1cbiAgICBjb25zdCBzdXBwb3J0ID0gZmlyc3RUYWdSZW5kZXIobmV3U3VwcG9ydCwgc3ViamVjdC5zdGF0ZS5uZXdlc3QsIC8vIGV4aXN0aW5nIHRhZ1xuICAgIHN1YmplY3QpO1xuICAgIHJldHVybiBzdXBwb3J0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NSZXBsYWNlbWVudENvbXBvbmVudCh0ZW1wbGF0ZXIsIHN1YmplY3QsIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBjcmVhdGVTdXBwb3J0V2l0aFByb3BzKHRlbXBsYXRlciwgc3ViamVjdCwgb3duZXJTdXBwb3J0KTtcbiAgICBjb25zdCB0YWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgaWYgKCFbJ2RvbScsICdodG1sJ10uaW5jbHVkZXModGFnLnRhZ0pzVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRUYWdUb0VsZW1lbnRNYW5hZ2VkKHN1cHBvcnQsIG93bmVyU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgfVxuICAgIGJ1aWxkQmVmb3JlRWxlbWVudChzdXBwb3J0LCB1bmRlZmluZWQsIC8vIGVsZW1lbnQgZm9yIGFwcGVuZCBjaGlsZFxuICAgIHN1YmplY3QucGxhY2Vob2xkZXIpO1xuICAgIHJldHVybiBzdXBwb3J0O1xufVxuZnVuY3Rpb24gY29udmVydFRhZ1RvRWxlbWVudE1hbmFnZWQoc3VwcG9ydCwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGNvbnRleHQudG9SZW5kZXIgfHwgY29udGV4dC5yZXR1cm5WYWx1ZTtcbiAgICAvLyBFWEFNUExFOiBbJ2EnLCdiJ10ubWFwKHg9PiB0YWcoKCkgPT4gW2RpdixzcGFuXSkua2V5KHgpKVxuICAgIC8qXG4gICAgaWYoQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgIDsobmV3VmFsdWUgYXMgYW55KS5rZXkgPSAoYXJyYXlWYWx1ZTogYW55KSA9PiBrZXlUYWcoYXJyYXlWYWx1ZSwgbmV3VmFsdWUpXG4gICAgfVxuICAgICovXG4gICAgY29uc3QgdGFnSnNWYXIgPSB2YWx1ZVRvVGFnSnNWYXIobmV3VmFsdWUpO1xuICAgIGRlbGV0ZSBjb250ZXh0Lmdsb2JhbDtcbiAgICBjb25zdCBuZXdDb250ZXh0ID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICB0YWdKc1ZhcixcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgICAgIHBsYWNlaG9sZGVyOiBjb250ZXh0LnBsYWNlaG9sZGVyLFxuICAgICAgICAvLyBub3QgaW1wb3J0YW50XG4gICAgICAgIHZhbHVlSW5kZXg6IC0xLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgIHBhcmVudENvbnRleHQ6IGNvbnRleHQsXG4gICAgfTtcbiAgICBjb25zdCBvdmVycmlkZVRhZ1ZhciA9IGdldE92ZXJyaWRlVGFnVmFyKGNvbnRleHQsIG5ld0NvbnRleHQsIHN1cHBvcnQsIHN1YmplY3QpO1xuICAgIGNvbnRleHQudGFnSnNWYXIgPSBvdmVycmlkZVRhZ1ZhcjtcbiAgICAvLyBUT0RPOiBzaG91bGQgd2UgYmUgY2FsbGluZyB0aGlzIGhlcmU/XG4gICAgdGFnSnNWYXIucHJvY2Vzc0luaXQobmV3VmFsdWUsIG5ld0NvbnRleHQsIHN1cHBvcnQsIHN1YmplY3QucGxhY2Vob2xkZXIpO1xuICAgIHJldHVybiBzdXBwb3J0O1xufVxuLyoqIFVzZWQgd2hlbiBhIHRhZygpIGRvZXMgbm90IHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2MjIyNzFbMF0pICovXG5mdW5jdGlvbiBnZXRPdmVycmlkZVRhZ1Zhcihjb250ZXh0LCBuZXdDb250ZXh0LCBzdXBwb3J0LCBzdWJqZWN0KSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVUYWdWYXIgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ3RhZy1jb252ZXJzaW9uJyxcbiAgICAgICAgLy8gcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IG5ld0NvbnRleHQudGFnSnNWYXIucHJvY2Vzc0luaXRBdHRyaWJ1dGUsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsIC8vIGNhbm5vdCBiZSBhbiBhdHRyaWJ1dGUgZXZlclxuICAgICAgICBwcm9jZXNzSW5pdDogKF92YWx1ZSwgX2NvbnRleHRJdGVtLCBfb3duZXJTdXBwb3J0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJDb250ZW50ID0gY29udGV4dC50b1JlbmRlciB8fCBjb250ZXh0LnJldHVyblZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0NvbnRleHQudGFnSnNWYXIucHJvY2Vzc0luaXQocmVuZGVyQ29udGVudCwgbmV3Q29udGV4dCwgc3VwcG9ydCwgc3ViamVjdC5wbGFjZWhvbGRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6ICh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkgPT4ge1xuICAgICAgICAgICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgKytjb250ZXh0SXRlbS51cGRhdGVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRWYWx1ZSA9IGNvbnRleHQudG9SZW5kZXIgfHwgY29udGV4dC5yZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gY29udGV4dC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IG9sZFR5cGUgPSBvbGRWYWx1ZS50YWdKc1R5cGU7XG4gICAgICAgICAgICBjb25zdCBuZXdUeXBlID0gdmFsdWU/LnRhZ0pzVHlwZTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1R5cGVDaGFuZ2VkID0gbmV3VHlwZSAhPT0gb2xkVHlwZTtcbiAgICAgICAgICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBjaGVja1RhZ1ZhbHVlQ2hhbmdlKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGhhc1R5cGVDaGFuZ2VkIHx8IG92ZXJyaWRlVGFnVmFyLmhhc1ZhbHVlQ2hhbmdlZChjb252ZXJ0VmFsdWUsIGNvbnRleHQsIC8vIG5ld0NvbnRleHQsXG4gICAgICAgICAgICBzdXBwb3J0KTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVUYWdWYXIuZGVzdHJveShjb250ZXh0LCBzdXBwb3J0KTtcbiAgICAgICAgICAgICAgICB1cGRhdGVUb0RpZmZWYWx1ZSh2YWx1ZSwgY29udGV4dCwgLy8gbmV3Q29udGV4dFxuICAgICAgICAgICAgICAgIG93bmVyU3VwcG9ydCwgNzg5KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDb250ZXh0LnZhbHVlLnByb3BzID0gY2FzdFByb3BzKHZhbHVlLnByb3BzLCBvd25lclN1cHBvcnQsIDEpO1xuICAgICAgICAgICAgbmV3Q29udGV4dC51cGRhdGVzSGFuZGxlciA9IGNvbnRleHQudXBkYXRlc0hhbmRsZXI7XG4gICAgICAgICAgICBpZiAoY29udGV4dC51cGRhdGVzSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXNIYW5kbGVyID0gY29udGV4dC51cGRhdGVzSGFuZGxlcjtcbiAgICAgICAgICAgICAgICB1cGRhdGVzSGFuZGxlcihuZXdDb250ZXh0LnZhbHVlLnByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NvbnRleHQudGFnSnNWYXIucHJvY2Vzc1VwZGF0ZShjb252ZXJ0VmFsdWUsIG5ld0NvbnRleHQsIHN1cHBvcnQsIFtdKTtcbiAgICAgICAgICAgIG5ld0NvbnRleHQudmFsdWUgPSBjb252ZXJ0VmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogKF92YWx1ZSwgX2NvbnRleHRJdGVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGNvbnRleHQudG9SZW5kZXIgfHwgY29udGV4dC5yZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrUmVzdWx0ID0gbmV3Q29udGV4dC50YWdKc1Zhci5oYXNWYWx1ZUNoYW5nZWQobmV3VmFsdWUsIG5ld0NvbnRleHQsIHN1cHBvcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrUmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95OiAoY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkgPT4ge1xuICAgICAgICAgICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3Q29udGV4dC50YWdKc1Zhci5kZXN0cm95KG5ld0NvbnRleHQsIHN1cHBvcnQpO1xuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYWZ0ZXJEZXN0cm95KGNvbnRleHQsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIHBhaW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWZ0ZXJEZXN0cm95KGNvbnRleHQsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBvdmVycmlkZVRhZ1Zhcjtcbn1cbmZ1bmN0aW9uIGFmdGVyRGVzdHJveShjb250ZXh0LCBvd25lclN1cHBvcnQpIHtcbiAgICBkZWxldGUgY29udGV4dC5yZXR1cm5WYWx1ZTtcbiAgICBkZWxldGUgY29udGV4dC50b1JlbmRlcjtcbiAgICBkZWxldGUgY29udGV4dC5nbG9iYWwgLy8gPSB7fSBhcyBhbnk7XG4gICAgO1xuICAgIGNvbnRleHQuY29udGV4dHMgPSBbXTtcbiAgICA7XG4gICAgY29udGV4dC5odG1sRG9tTWV0YSA9IFtdO1xuICAgIGRlbGV0ZSBjb250ZXh0LnVwZGF0ZXNIYW5kbGVyO1xuICAgIC8vIGNvbnRleHQudmFsdWUuZGVzdHJveShjb250ZXh0LCBvd25lclN1cHBvcnQpXG59XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0ZpcnN0U3ViamVjdENvbXBvbmVudCh0ZW1wbGF0ZXIsIHN1YmplY3QsIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gY3JlYXRlU3VwcG9ydFdpdGhQcm9wcyh0ZW1wbGF0ZXIsIHN1YmplY3QsIG93bmVyU3VwcG9ydCk7XG4gICAgLy8gRElTQ09WRVIgSUYgdGFnKCkgZGlkIE5PVCByZXR1cm4gZG9tfGh0bWxcbiAgICBjb25zdCB0YWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgaWYgKCFbJ2RvbScsICdodG1sJ10uaW5jbHVkZXModGFnLnRhZ0pzVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRUYWdUb0VsZW1lbnRNYW5hZ2VkKHN1cHBvcnQsIG93bmVyU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzRmlyc3RUYWdSZXN1bHQoc3VwcG9ydCwgYXBwZW5kVG8pO1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczYyMjI3MTogW1tdXSB9O1xuIiwiaW1wb3J0IHsgYnVpbGRCZWZvcmVFbGVtZW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwYWludEFwcGVuZCwgcGFpbnRBcHBlbmRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRmlyc3RUYWdSZXN1bHQoc3VwcG9ydCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCByZXN1bHQgPSBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgYXBwZW5kVG8sIHVuZGVmaW5lZCk7XG4gICAgZm9yIChjb25zdCBkb20gb2YgcmVzdWx0LmRvbSkge1xuICAgICAgICBpZiAoZG9tLmRvbUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHBhaW50QXBwZW5kcy5wdXNoKFtwYWludEFwcGVuZCwgW2FwcGVuZFRvLCBkb20uZG9tRWxlbWVudF1dKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9tLm1hcmtlcikge1xuICAgICAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGRvbS5tYXJrZXJdXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBwcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50LCBwcm9jZXNzUmVwbGFjZW1lbnRDb21wb25lbnQgfSBmcm9tICcuL3Byb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWdDb21wb25lbnRJbml0KHZhbHVlLCBjb250ZXh0SXRlbSwgLy8gY291bGQgYmUgdGFnIHZpYSByZXN1bHQudGFnXG5vd25lclN1cHBvcnQsIC8vIG93bmluZ1N1cHBvcnRcbl9pbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NSZXBsYWNlbWVudENvbXBvbmVudCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG59XG4iLCJpbXBvcnQgeyBwYWludCwgcGFpbnRpbmcgfSBmcm9tICcuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyU3VwcG9ydCB9IGZyb20gJy4uLy4uL3JlbmRlci9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJUYWdVcGRhdGVBcnJheShzdXBwb3J0cykge1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgc3VwcG9ydHMuZm9yRWFjaChtYXBUYWdVcGRhdGUpO1xuICAgIC0tcGFpbnRpbmcubG9ja3M7XG4gICAgcGFpbnQoKTtcbn1cbmZ1bmN0aW9uIG1hcFRhZ1VwZGF0ZShzdXBwb3J0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0Lmdsb2JhbDtcbiAgICBpZiAoIWdsb2JhbCkge1xuICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUoY29udGV4dC52YWx1ZSwgY29udGV4dCwgc3VwcG9ydC5vd25lclN1cHBvcnQsIFtdKTtcbiAgICAgICAgcmV0dXJuOyAvLyB3aGlsZSByZW5kZXJpbmcgYSBwYXJlbnQsIGEgY2hpbGQgbWF5IGhhdmUgYmVlbiBkZWxldGVkIChwaW5ib3dsKVxuICAgIH1cbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlO1xuICAgIHJlbmRlclN1cHBvcnQoc3RhdGVNZXRhLm5ld2VzdCk7XG59XG4iLCIvKipcbiAqIFN5bmMgdHdvIHN1cHBvcnRzXG4gKiBAcGFyYW0gc3VwcG9ydCBGUk9NXG4gKiBAcGFyYW0gbmV3ZXN0U3VwcG9ydCAgT05UT1xuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN5bmNTdXBwb3J0cyhzdXBwb3J0LCAvLyBmcm9tXG5uZXdlc3RTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gc3VwcG9ydC5jb250ZXh0LnN0YXRlO1xuICAgIGNvbnN0IG5ld2VzdFN0YXRlTWV0YSA9IG5ld2VzdFN1cHBvcnQuY29udGV4dC5zdGF0ZTtcbiAgICBjb25zdCBmcm9tU3RhdGVzID0gc3RhdGVNZXRhLm5ld2VyLnN0YXRlcztcbiAgICBjb25zdCB0b1N0YXRlcyA9IG5ld2VzdFN0YXRlTWV0YS5uZXdlci5zdGF0ZXM7XG4gICAgcmV0dXJuIHN5bmNTdGF0ZXNBcnJheShmcm9tU3RhdGVzLCB0b1N0YXRlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc3luY1N0YXRlc0FycmF5KGZyb20sIG9udG8pIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZnJvbS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3QgZ2V0dGVyID0gZnJvbVtpbmRleF07XG4gICAgICAgIGNvbnN0IHNldHRlciA9IG9udG9baW5kZXhdO1xuICAgICAgICBzeW5jU3RhdGVzKGdldHRlciwgc2V0dGVyKTtcbiAgICB9XG59XG5sZXQgZ290O1xuZnVuY3Rpb24gc3luY0Zyb21TdGF0ZSguLi54KSB7XG4gICAgZ290ID0geDtcbiAgICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIHN5bmNPbnRvU3RhdGUoKSB7XG4gICAgcmV0dXJuIGdvdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzeW5jU3RhdGVzKGZyb20sIG9udG8pIHtcbiAgICBmcm9tKHN5bmNGcm9tU3RhdGUsIDEpO1xuICAgIG9udG8oc3luY09udG9TdGF0ZSwgMik7XG59XG4vKiogQGRlcHJlY2F0ZWQgZmF2b3IgdXNpbmcgc3luY1N1cHBvcnRzICovXG5leHBvcnQgZnVuY3Rpb24gb2xkU3luY1N0YXRlcyhzdGF0ZUZyb20sIHN0YXRlVG8sIGludG9TdGF0ZXMsIHN0YXRlc0Zyb20pIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IHN0YXRlRnJvbS5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgIGNvbnN0IHN0YXRlRnJvbVRhcmdldCA9IHN0YXRlRnJvbVtpbmRleF07XG4gICAgICAgIGNvbnN0IGZyb21WYWx1ZSA9IHN0YXRlRnJvbVRhcmdldC5nZXQoKTsgLy8gZ2V0IHdpdGhvdXQgc2V0dGluZ1xuICAgICAgICAvLyBjb25zdCBmcm9tVmFsdWUgPSBnZXRTdGF0ZVZhbHVlKHN0YXRlRnJvbVRhcmdldCkgLy8gZ2V0IHdpdGhvdXQgc2V0dGluZ1xuICAgICAgICBjb25zdCBzdGF0ZVRvVGFyZ2V0ID0gc3RhdGVUb1tpbmRleF07XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gc3RhdGVUb1RhcmdldC5jYWxsYmFjazsgLy8gaXMgaXQgYSBsZXQgc3RhdGU/XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGZyb21WYWx1ZSk7IC8vIHNldCB0aGUgdmFsdWVcbiAgICB9XG4gICAgLy8gbG9vcCBzdGF0ZXNGcm9tIHRvIHNldCBvbiB0aGUgb2xkU3RhdGVzXG4gICAgZm9yIChsZXQgaW5kZXggPSBzdGF0ZXNGcm9tLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgb2xkVmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgICAgIGdldEluZGV4ID0gMDtcbiAgICAgICAgY29uc3Qgc3RhdGVGcm9tVGFyZ2V0ID0gc3RhdGVzRnJvbVtpbmRleF07XG4gICAgICAgIC8vIHRyaWdnZXIgZ2V0dGluZyBhbGwgb2xkIHZhbHVlc1xuICAgICAgICBzdGF0ZUZyb21UYXJnZXQob2xkR2V0Q2FsbGJhY2spO1xuICAgICAgICAvLyB0cmlnZ2VyIHNldHRpbmcgdXBkYXRlZCB2YWx1ZXNcbiAgICAgICAgaW50b1N0YXRlc1tpbmRleF0obmV3U2V0Q2FsbGJhY2spO1xuICAgIH1cbn1cbmxldCBnZXRJbmRleCA9IDA7XG5jb25zdCBvbGRWYWx1ZXMgPSBbXTtcbmZ1bmN0aW9uIG9sZEdldENhbGxiYWNrKC4uLmFyZ3MpIHtcbiAgICBvbGRWYWx1ZXMucHVzaChhcmdzKTtcbiAgICByZXR1cm4gYXJncztcbn1cbi8vIFRoaXMgaXMgdGhlIFwiZ2V0XCIgYXJndW1lbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCBhbmQgYWxsIGFyZ3VtZW50cyBhcmUgaWdub3JlZFxuZnVuY3Rpb24gbmV3U2V0Q2FsbGJhY2soLi4uXykge1xuICAgIHJldHVybiBvbGRWYWx1ZXNbZ2V0SW5kZXgrK107XG59XG4iLCIvKiogRmlsZSBsYXJnZWx5IHJlc3BvbnNpYmxlIGZvciByZWFjdGluZyB0byBlbGVtZW50IGV2ZW50cywgc3VjaCBhcyBvbmNsaWNrICovXG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGdldFVwVGFncyB9IGZyb20gJy4vZ2V0VXBUYWdzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclRhZ1VwZGF0ZUFycmF5IH0gZnJvbSAnLi9yZW5kZXJUYWdBcnJheS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzeW5jU3VwcG9ydHMgfSBmcm9tICcuLi8uLi9zdGF0ZS9zeW5jU3RhdGVzLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RvUmVzb2x2ZVByb21pc2UoY2FsbGJhY2tSZXN1bHQsIGxhc3QsIHsgcmVzb2x2ZVByb21pc2UsIHJlc29sdmVWYWx1ZSB9KSB7XG4gICAgY29uc3QgaXNQcm9tID0gaXNQcm9taXNlKGNhbGxiYWNrUmVzdWx0KTtcbiAgICBpZiAoaXNQcm9tKSB7XG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSBsYXN0LmNvbnRleHQ7XG4gICAgICAgIHN1YmplY3QubG9ja2VkID0gMjtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrUmVzdWx0LnRoZW4odGhlblJlc29sdmVCeShsYXN0LCByZXNvbHZlUHJvbWlzZSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZVZhbHVlKGNhbGxiYWNrUmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aGVuUmVzb2x2ZUJ5KGxhc3QsIHJlc29sdmVQcm9taXNlKSB7XG4gICAgcmV0dXJuICh4KSA9PiB7XG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IGxhc3QuY29udGV4dC5nbG9iYWw7XG4gICAgICAgIC8vY2xlYXJUaW1lb3V0KHRpbWVvdXQpXG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSBsYXN0LmNvbnRleHQ7XG4gICAgICAgIGRlbGV0ZSBzdWJqZWN0LmxvY2tlZDtcbiAgICAgICAgaWYgKGdsb2JhbC5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVByb21pc2UoeCk7IC8vIHRhZyB3YXMgZGVsZXRlZCBkdXJpbmcgZXZlbnQgcHJvY2Vzc2luZ1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBwcm9taXNlIG1heSBoYXZlIHRoZW4gY2hhbmdlZCBvbGQgdmFyaWFibGVzLCBsZXRzIHVwZGF0ZSBmb3J3YXJkXG4gICAgICAgIHN5bmNTdXBwb3J0cyhsYXN0LCBzdWJqZWN0LnN0YXRlLm5ld2VzdCk7XG4gICAgICAgIGNvbnN0IHRhZ3NUb1VwZGF0ZSA9IGdldFVwVGFncyhsYXN0KTtcbiAgICAgICAgcmVuZGVyVGFnVXBkYXRlQXJyYXkodGFnc1RvVXBkYXRlKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKHgpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuLyoqIFVzZWQgZm9yIHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gcmVtYWluIHRoZSBzYW1lIHZhcmlhYmxlIGR1cmluZyByZW5kZXIgcGFzc2VzICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5oYW5kbGVycy5oYW5kbGVyKGRlZmF1bHRWYWx1ZSk7XG59XG4iLCJpbXBvcnQgeyB0YWcgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBjaGVja1RvUmVzb2x2ZVByb21pc2UgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2NoZWNrVG9SZXNvbHZlUHJvbWlzZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5mdW5jdGlvbi5qcyc7XG4vKiogcnVucyBhIGNhbGxiYWNrIGZ1bmN0aW9uIG9uZSB0aW1lIGFuZCBuZXZlciBhZ2Fpbi4gU2FtZSBhcyBjYWxsaW5nIHN0YXRlKCgpID0+IC4uLikgKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkluaXQoY2FsbGJhY2spIHtcbiAgICBzdGF0ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgICAgICBpZiAoY29udGV4dC5nbG9iYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vd1N1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrVG9SZXNvbHZlUHJvbWlzZShyZXN1bHQsIG5vd1N1cHBvcnQsIHsgcmVzb2x2ZVByb21pc2UsIHJlc29sdmVWYWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiByZXNvbHZlVmFsdWUoeCkge1xuICAgIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHsgc3RhdGUgfSBmcm9tIFwiLi9zdGF0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tIFwiLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgdGFnIH0gZnJvbSBcIi4uL3RhZ0pzVmFycy90YWcuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBvbkRlc3Ryb3koY2FsbGJhY2spIHtcbiAgICBzdGF0ZShmdW5jdGlvbiBzdGF0ZURlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgICAgICBjb250ZXh0LmRlc3Ryb3kkLnRvQ2FsbGJhY2soY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIHJldHVybiB0YWc7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBjYWxsYmFjaywgc2V0VXNlTWVtb3J5LCBzdGF0ZSB9IGZyb20gJy4uL3N0YXRlL2luZGV4LmpzJztcbmltcG9ydCB7IGdldFRlbXBsYXRlclJlc3VsdCB9IGZyb20gJy4uL3RhZy9nZXRUZW1wbGF0ZXJSZXN1bHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFncyB9IGZyb20gJy4uL3RhZy90YWcudXRpbHMuanMnO1xuaW1wb3J0IHsgZ2V0VGFnV3JhcCB9IGZyb20gJy4uL3RhZy9nZXRUYWdXcmFwLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHByb2Nlc3NSZW5kZXJPbmNlSW5pdCB9IGZyb20gJy4uL3JlbmRlci91cGRhdGUvcHJvY2Vzc1JlbmRlck9uY2VJbml0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NUYWdDb21wb25lbnRJbml0IH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzVGFnQ29tcG9uZW50SW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlIH0gZnJvbSAnLi4vdGFnL2NoZWNrVGFnVmFsdWVDaGFuZ2UuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIH0gZnJvbSAnLi4vdGFnL2Rlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuLi90YWcvdXBkYXRlL3RhZ1ZhbHVlVXBkYXRlSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRDb250ZXh0SW5DeWNsZSwgZ2V0RWxlbWVudCBhcyBnZXRUYWdFbGVtZW50IH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdJbmplY3QgfSBmcm9tICcuL3RhZ0luamVjdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBvbkluaXQgYXMgdGFnT25Jbml0IH0gZnJvbSAnLi4vc3RhdGUvb25Jbml0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IG9uRGVzdHJveSBhcyB0YWdPbkRlc3Ryb3kgfSBmcm9tICcuLi9zdGF0ZS9vbkRlc3Ryb3kuZnVuY3Rpb24uanMnO1xubGV0IHRhZ0NvdW50ID0gMDtcbmNvbnN0IG9uQ2xpY2sgPSBtYWtlRXZlbnRMaXN0ZW5lcignY2xpY2snKTtcbmNvbnN0IG9uTW91c2VEb3duID0gbWFrZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicpO1xuZnVuY3Rpb24gbWFrZUV2ZW50TGlzdGVuZXIodHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBldmVudExpc3RlbmVyKHRvQmVDYWxsZWQpIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IGNhbGxiYWNrKHRvQmVDYWxsZWQpO1xuICAgICAgICAvLyBydW4gb25lIHRpbWVcbiAgICAgICAgc3RhdGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldFRhZ0VsZW1lbnQoKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCB3cmFwcGVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3cmFwcGVkOyAvLyB0aGlzIGlzIHdoYXQgeW91IHJlbW92ZVxuICAgIH07XG59XG5jb25zdCB0YWdFbGVtZW50ID0ge1xuICAgIGdldDogZ2V0VGFnRWxlbWVudCxcbiAgICBvbmNsaWNrOiBvbkNsaWNrLFxuICAgIGNsaWNrOiBvbkNsaWNrLFxuICAgIG9uQ2xpY2ssXG4gICAgbW91c2Vkb3duOiBvbk1vdXNlRG93bixcbiAgICBvbm1vdXNlZG93bjogb25Nb3VzZURvd24sXG4gICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duLFxufTtcbmRlZmluZUdldFNldCgnb25jbGljaycsIG9uQ2xpY2spO1xuZGVmaW5lR2V0U2V0KCdjbGljaycsIG9uQ2xpY2spO1xuZGVmaW5lR2V0U2V0KCdvbk1vdXNlRG93bicsIG9uTW91c2VEb3duKTtcbmRlZmluZUdldFNldCgnb25tb3VzZWRvd24nLCBvbk1vdXNlRG93bik7XG5kZWZpbmVHZXRTZXQoJ21vdXNlZG93bicsIG9uTW91c2VEb3duKTtcbmZ1bmN0aW9uIGRlZmluZUdldFNldChuYW1lLCBldmVudEZuKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhZywgbmFtZSwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRGbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRGbihmbik7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKiogSG93IHRvIGhhbmRsZSBjaGVja2luZyBmb3IgcHJvcCBjaGFuZ2VzIGFrYSBhcmd1bWVudCBjaGFuZ2VzICovXG5leHBvcnQgdmFyIFByb3BXYXRjaGVzO1xuKGZ1bmN0aW9uIChQcm9wV2F0Y2hlcykge1xuICAgIFByb3BXYXRjaGVzW1wiREVFUFwiXSA9IFwiZGVlcFwiO1xuICAgIC8qKiBjaGVja3MgYWxsIHZhbHVlcyB1cCB0byAyIGxldmVscyBkZWVwICovXG4gICAgUHJvcFdhdGNoZXNbXCJTSEFMTE9XXCJdID0gXCJzaGFsbG93XCI7XG4gICAgUHJvcFdhdGNoZXNbXCJOT05FXCJdID0gXCJub25lXCI7XG4gICAgUHJvcFdhdGNoZXNbXCJJTU1VVEFCTEVcIl0gPSBcImltbXV0YWJsZVwiO1xufSkoUHJvcFdhdGNoZXMgfHwgKFByb3BXYXRjaGVzID0ge30pKTtcbi8qKiBXcmFwcyBhIGZ1bmN0aW9uIHRhZyBpbiBhIHN0YXRlIG1hbmFnZXIgYW5kIGNhbGxzIHdyYXBwZWQgZnVuY3Rpb24gb24gZXZlbnQgY3ljbGVzXG4gKiBGb3Igc2luZ2xlIHJlbmRlcmluZywgbm8gZXZlbnQgY3ljbGVzLCB1c2U6IHRhZy5yZW5kZXJPbmNlID0gKHByb3BzKSA9PiBodG1sYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhZyh0YWdDb21wb25lbnQsIHByb3BXYXRjaCA9IFByb3BXYXRjaGVzLlNIQUxMT1cpIHtcbiAgICAvKiogZnVuY3Rpb24gZGV2ZWxvcGVyIHRyaWdnZXJzICovXG4gICAgY29uc3QgcGFyZW50V3JhcCA9IGZ1bmN0aW9uIHRhZ1dyYXBwZXIoLi4ucHJvcHMpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVyID0gZ2V0VGVtcGxhdGVyUmVzdWx0KHByb3BXYXRjaCwgcHJvcHMpO1xuICAgICAgICB0ZW1wbGF0ZXIudGFnSnNUeXBlID0gVmFsdWVUeXBlcy50YWdDb21wb25lbnQ7XG4gICAgICAgIHRlbXBsYXRlci5wcm9jZXNzSW5pdCA9IHByb2Nlc3NUYWdDb21wb25lbnRJbml0O1xuICAgICAgICB0ZW1wbGF0ZXIuaGFzVmFsdWVDaGFuZ2VkID0gY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZTtcbiAgICAgICAgLy8gYXR0YWNoIG1lbW9yeSBiYWNrIHRvIG9yaWdpbmFsIGZ1bmN0aW9uIHRoYXQgY29udGFpbnMgZGV2ZWxvcGVyIGRpc3BsYXkgbG9naWNcbiAgICAgICAgY29uc3QgaW5uZXJUYWdXcmFwID0gZ2V0VGFnV3JhcCh0ZW1wbGF0ZXIsIHBhcmVudFdyYXApO1xuICAgICAgICBpbm5lclRhZ1dyYXAub3JpZ2luYWwgPSB0YWdDb21wb25lbnQ7XG4gICAgICAgIHRlbXBsYXRlci53cmFwcGVyID0gaW5uZXJUYWdXcmFwO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVyO1xuICAgIH07IC8vIHdlIG92ZXJyaWRlIHRoZSBmdW5jdGlvbiBwcm92aWRlZCBhbmQgcHJldGVuZCBvcmlnaW5hbCBpcyB3aGF0J3MgcmV0dXJuZWRcbiAgICBjb25zdCB0YWcgPSB0YWdDb21wb25lbnQ7XG4gICAgcGFyZW50V3JhcC5vcmlnaW5hbCA9IHRhZ0NvbXBvbmVudDtcbiAgICAvLyBncm91cCB0YWdzIHRvZ2V0aGVyIGFuZCBoYXZlIGhtciBwaWNrdXBcbiAgICB0YWcudGFncyA9IHRhZ3M7XG4gICAgdGFnLnNldFVzZSA9IHNldFVzZU1lbW9yeTtcbiAgICB0YWcuVmFsdWVUeXBlcyA9IFZhbHVlVHlwZXM7XG4gICAgdGFnLnRhZ0luZGV4ID0gdGFnQ291bnQrKzsgLy8gbmVlZGVkIGZvciB0aGluZ3MgbGlrZSBITVJcbiAgICB0YWdzLnB1c2gocGFyZW50V3JhcCk7XG4gICAgY29uc3QgcmV0dXJuV3JhcCA9IHBhcmVudFdyYXA7XG4gICAgLy8gdXNlZCBmb3IgYXJndW1lbnQgdXBkYXRlc1xuICAgIHJldHVybldyYXAudXBkYXRlcyA9IHJldHVybldyYXAuaW5wdXRzID0gKGhhbmRsZXIpID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRJbkN5Y2xlKCk7XG4gICAgICAgIGNvbnRleHQudXBkYXRlc0hhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiByZXR1cm5XcmFwO1xufVxuLyoqIFVzZSB0byBzdHJ1Y3R1cmUgYW5kIGRlZmluZSBhIGJyb3dzZXIgdGFnIHJvdXRlIGhhbmRsZXJcbiAqIEV4YW1wbGU6IGV4cG9ydCBkZWZhdWx0IHRhZy5yb3V0ZSA9IChyb3V0ZVByb3BzOiBSb3V0ZVByb3BzKSA9PiAoc3RhdGUpID0+IGh0bWxgYFxuICovXG5mdW5jdGlvbiByb3V0ZUZuKF9yb3V0ZVByb3BzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEbyBub3QgY2FsbCB0YWcucm91dGUgYXMgYSBmdW5jdGlvbiBidXQgaW5zdGVhZCBzZXQgaXQgYXM6IGB0YWcucm91dGUgPSAocm91dGVQcm9wczogUm91dGVQcm9wcykgPT4gKHN0YXRlKSA9PiBodG1sYGAgYCcpO1xufVxuZnVuY3Rpb24gcmVuZGVyT25jZUZuKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRG8gbm90IGNhbGwgdGFnLnJlbmRlck9uY2UgYXMgYSBmdW5jdGlvbiBidXQgaW5zdGVhZCBzZXQgaXQgYXM6IGAocHJvcHMpID0+IHRhZy5yZW5kZXJPbmNlID0gKCkgPT4gaHRtbGBgIGAnKTtcbn1cbi8qKiBVc2VkIHRvIGNyZWF0ZSB2YXJpYWJsZSBzY29waW5nIHdoZW4gY2FsbGluZyBhIGZ1bmN0aW9uIHRoYXQgbGl2ZXMgd2l0aGluIGEgcHJvcCBjb250YWluZXIgZnVuY3Rpb24gKi9cbmZ1bmN0aW9uIHRhZ1VzZUZuKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRG8gbm90IGNhbGwgdGFnLnVzZSBhcyBhIGZ1bmN0aW9uIGJ1dCBpbnN0ZWFkIHNldCBpdCBhczogYChwcm9wcykgPT4gdGFnLnVzZSA9ICh1c2UpID0+IGh0bWxgYCBgJyk7XG59XG4vLyBhY3R1YWxseSBwbGFjaW5nIG9mIGl0ZW1zIGludG8gdGFnIG1lbW9yeVxuO1xudGFnLmVsZW1lbnQgPSB0YWdFbGVtZW50O1xudGFnLnJlbmRlck9uY2UgPSByZW5kZXJPbmNlRm47XG50YWcudXNlID0gdGFnVXNlRm47XG50YWcuZGVlcFByb3BXYXRjaCA9IHRhZztcbnRhZy5yb3V0ZSA9IHJvdXRlRm47XG50YWcuaW5qZWN0ID0gdGFnSW5qZWN0O1xudGFnLm9uSW5pdCA9IHRhZ09uSW5pdDtcbnRhZy5vbkRlc3Ryb3kgPSB0YWdPbkRlc3Ryb3k7XG50YWcuYXBwID0gZnVuY3Rpb24gKF9yb3V0ZVRhZykge1xuICAgIHRocm93IG5ldyBFcnJvcignRG8gbm90IGNhbGwgdGFnLnJvdXRlIGFzIGEgZnVuY3Rpb24gYnV0IGluc3RlYWQgc2V0IGl0IGFzOiBgdGFnLnJvdXRlID0gKHJvdXRlUHJvcHM6IFJvdXRlUHJvcHMpID0+IChzdGF0ZSkgPT4gaHRtbGBgIGAnKTtcbn07XG50YWcuaW1tdXRhYmxlUHJvcHMgPSBmdW5jdGlvbiBpbW11dGFibGVQcm9wcyh0YWdDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdGFnKHRhZ0NvbXBvbmVudCwgUHJvcFdhdGNoZXMuSU1NVVRBQkxFKTtcbn07XG50YWcud2F0Y2hQcm9wcyA9IGZ1bmN0aW9uIHdhdGNoUHJvcHModGFnQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIHRhZyh0YWdDb21wb25lbnQsIFByb3BXYXRjaGVzLlNIQUxMT1cpO1xufTtcbi8qIEJFTE9XOiBDYXN0IGZ1bmN0aW9ucyBpbnRvIHNldHRlcnMgd2l0aCBubyBnZXR0ZXJzICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkodGFnLCAncmVuZGVyT25jZScsIHtcbiAgICBzZXQob25lUmVuZGVyRnVuY3Rpb24pIHtcbiAgICAgICAgb25lUmVuZGVyRnVuY3Rpb24udGFnSnNUeXBlID0gVmFsdWVUeXBlcy5yZW5kZXJPbmNlO1xuICAgICAgICBvbmVSZW5kZXJGdW5jdGlvbi5wcm9jZXNzSW5pdCA9IHByb2Nlc3NSZW5kZXJPbmNlSW5pdDtcbiAgICAgICAgb25lUmVuZGVyRnVuY3Rpb24ucHJvY2Vzc1VwZGF0ZSA9IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcjtcbiAgICAgICAgb25lUmVuZGVyRnVuY3Rpb24uZGVzdHJveSA9IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbTtcbiAgICAgICAgb25lUmVuZGVyRnVuY3Rpb24uaGFzVmFsdWVDaGFuZ2VkID0gZnVuY3Rpb24gcmVuZGVyT25jZU5ldmVyQ2hhbmdlcygpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgIH0sXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsICd1c2UnLCB7XG4gICAgc2V0KHJlbmRlckZ1bmN0aW9uKSB7XG4gICAgICAgIHJlbmRlckZ1bmN0aW9uLm9yaWdpbmFsID0ge1xuICAgICAgICAgICAgc2V0VXNlOiBzZXRVc2VNZW1vcnksXG4gICAgICAgICAgICB0YWdzLFxuICAgICAgICB9O1xuICAgICAgICByZW5kZXJGdW5jdGlvbi50YWdKc1R5cGUgPSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyO1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5wcm9jZXNzSW5pdCA9IHByb2Nlc3NUYWdDb21wb25lbnRJbml0O1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5wcm9jZXNzVXBkYXRlID0gdGFnVmFsdWVVcGRhdGVIYW5kbGVyO1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5oYXNWYWx1ZUNoYW5nZWQgPSBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlO1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5kZXN0cm95ID0gZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtO1xuICAgIH0sXG59KTtcbiIsImltcG9ydCB7IGRlZXBFcXVhbCB9IGZyb20gJy4uL2RlZXBGdW5jdGlvbnMuanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBkZWVwQ29tcGFyZURlcHRoLCBpbW11dGFibGVQcm9wTWF0Y2ggfSBmcm9tICcuLi90YWcvaGFzU3VwcG9ydENoYW5nZWQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2hhbGxvd1Byb3BNYXRjaCB9IGZyb20gJy4uL3RhZy9zaGFsbG93UHJvcE1hdGNoLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JlbmRlclVwKHRlbXBsYXRlciwgc3VwcG9ydCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZGVsZXRlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHNlbGZQcm9wQ2hhbmdlID0gaGFzUHJvcHNUb093bmVyQ2hhbmdlZCh0ZW1wbGF0ZXIsIHN1cHBvcnQpO1xuICAgIC8vIHJlbmRlciBvd25lciB1cCBmaXJzdCBhbmQgdGhhdCB3aWxsIGNhdXNlIG1lIHRvIHJlLXJlbmRlclxuICAgIGlmIChzZWxmUHJvcENoYW5nZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqIFVzZWQgd2hlbiBjcmF3bGluZyB1cCB0aGUgY2hhaW4gb2YgY2hpbGQtdG8tcGFyZW50IHRhZ3MuIFNlZSBoYXNTdXBwb3J0Q2hhbmdlZCBmb3IgdGhlIGRvd253YXJkIGRpcmVjdGlvbiAqL1xuZnVuY3Rpb24gaGFzUHJvcHNUb093bmVyQ2hhbmdlZCh0ZW1wbGF0ZXIsIHN1cHBvcnQpIHtcbiAgICBjb25zdCBub3dQcm9wcyA9IHRlbXBsYXRlci5wcm9wcztcbiAgICBjb25zdCBwcm9wc0NvbmZpZyA9IHN1cHBvcnQucHJvcHNDb25maWc7XG4gICAgY29uc3QgbGF0ZXN0UHJvcHMgPSBwcm9wc0NvbmZpZy5sYXRlc3Q7XG4gICAgY29uc3QgY29tcGFyZUxlbiA9IGhhc1Byb3BMZW5ndGhzQ2hhbmdlZChub3dQcm9wcywgbGF0ZXN0UHJvcHMpO1xuICAgIGlmIChjb21wYXJlTGVuKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRlbXBsYXRlci5wcm9wV2F0Y2gpIHtcbiAgICAgICAgY2FzZSBQcm9wV2F0Y2hlcy5JTU1VVEFCTEU6XG4gICAgICAgICAgICByZXR1cm4gaW1tdXRhYmxlUHJvcE1hdGNoKG5vd1Byb3BzLCBsYXRlc3RQcm9wcyk7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuU0hBTExPVzpcbiAgICAgICAgICAgIHJldHVybiBzaGFsbG93UHJvcE1hdGNoKG5vd1Byb3BzLCBsYXRlc3RQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiAhZGVlcEVxdWFsKG5vd1Byb3BzLCBsYXRlc3RQcm9wcywgZGVlcENvbXBhcmVEZXB0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzUHJvcExlbmd0aHNDaGFuZ2VkKG5vd1Byb3BzLCBsYXRlc3RQcm9wcykge1xuICAgIGNvbnN0IG5vd0xlbiA9IG5vd1Byb3BzLmxlbmd0aDtcbiAgICBjb25zdCBsYXRlc3RMZW4gPSBsYXRlc3RQcm9wcy5sZW5ndGg7XG4gICAgcmV0dXJuIG5vd0xlbiAhPT0gbGF0ZXN0TGVuO1xufVxuIiwiaW1wb3J0IHsgZGVlcEVxdWFsIH0gZnJvbSAnLi4vZGVlcEZ1bmN0aW9ucy5qcyc7XG5pbXBvcnQgeyBkZWVwQ29tcGFyZURlcHRoLCBpbW11dGFibGVQcm9wTWF0Y2ggfSBmcm9tICcuL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNoYWxsb3dQcm9wTWF0Y2ggfSBmcm9tICcuL3NoYWxsb3dQcm9wTWF0Y2guZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBoYXNQcm9wTGVuZ3Roc0NoYW5nZWQgfSBmcm9tICcuLi9yZW5kZXIvY2hlY2tSZW5kZXJVcC5mdW5jdGlvbi5qcyc7XG4vKipcbiAqXG4gKiBAcGFyYW0gcHJvcHNcbiAqIEBwYXJhbSBwYXN0Q2xvbmVQcm9wc1xuICogQHJldHVybnMgV0hFTiBudW1iZXIgdGhlbiBwcm9wcyBoYXZlIGNoYW5nZWQuIFdIRU4gZmFsc2UgcHJvcHMgaGF2ZSBub3QgY2hhbmdlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJvcENoYW5nZXMocHJvcHMsIC8vIG5hdHVyYWwgcHJvcHNcbnBhc3RDbG9uZVByb3BzLCAvLyBwcmV2aW91c2x5IGNsb25lZCBwcm9wc1xucHJvcFdhdGNoKSB7XG4gICAgY29uc3QgaGFzTGVuQ2hhbmdlZCA9IGhhc1Byb3BMZW5ndGhzQ2hhbmdlZChwcm9wcywgcGFzdENsb25lUHJvcHMpO1xuICAgIGlmIChoYXNMZW5DaGFuZ2VkKSB7XG4gICAgICAgIHJldHVybiAxMTtcbiAgICB9XG4gICAgc3dpdGNoIChwcm9wV2F0Y2gpIHtcbiAgICAgICAgY2FzZSBQcm9wV2F0Y2hlcy5OT05FOlxuICAgICAgICAgICAgcmV0dXJuIDE7IC8vIGFsd2F5cyByZW5kZXJcbiAgICAgICAgY2FzZSBQcm9wV2F0Y2hlcy5TSEFMTE9XOiAvLyBkZXRlcm1pbmluZyBlcXVhbCBpcyBzYW1lIGFzIGltbXV0YWJsZSwgaXRzIHRoZSBwcmV2aW91cyBjbG9uaW5nIHN0ZXAgdGhhdHMgZGlmZmVyZW50XG4gICAgICAgICAgICByZXR1cm4gc2hhbGxvd1Byb3BNYXRjaChwcm9wcywgcGFzdENsb25lUHJvcHMpO1xuICAgICAgICBjYXNlIFByb3BXYXRjaGVzLklNTVVUQUJMRTpcbiAgICAgICAgICAgIHJldHVybiBpbW11dGFibGVQcm9wTWF0Y2gocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZXBQcm9wQ2hhbmdlQ29tcGFyZShwcm9wcywgcGFzdENsb25lUHJvcHMpO1xufVxuZnVuY3Rpb24gZGVlcFByb3BDaGFuZ2VDb21wYXJlKHByb3BzLCBwYXN0Q2xvbmVQcm9wcykge1xuICAgIC8vIERFRVAgd2F0Y2hcbiAgICBsZXQgY2FzdGVkUHJvcHMgPSBwcm9wcztcbiAgICBsZXQgY2FzdGVkUGFzdFByb3BzID0gcGFzdENsb25lUHJvcHM7XG4gICAgY2FzdGVkUHJvcHMgPSBbLi4ucHJvcHNdO1xuICAgIGNhc3RlZFBhc3RQcm9wcyA9IFsuLi4ocGFzdENsb25lUHJvcHMgfHwgW10pXTtcbiAgICBjb25zdCBhbGxGdW5jdGlvbnNNYXRjaCA9IGNhc3RlZFByb3BzLmV2ZXJ5KCh2YWx1ZSwgaW5kZXgpID0+IG9uZVByb3BDb21wYXJlKHZhbHVlLCBpbmRleCwgY2FzdGVkUHJvcHMsIGNhc3RlZFBhc3RQcm9wcykpO1xuICAgIGlmICghYWxsRnVuY3Rpb25zTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIDc7IC8vIGEgY2hhbmdlIGhhcyBiZWVuIGRldGVjdGVkIGJ5IGZ1bmN0aW9uIGNvbXBhcmlzb25zXG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG9uZVByb3BDb21wYXJlKHZhbHVlLCBpbmRleCwgY2FzdGVkUHJvcHMsIGNhc3RlZFBhc3RQcm9wcykge1xuICAgIGNvbnN0IGNvbXBhcmUgPSBjYXN0ZWRQYXN0UHJvcHNbaW5kZXhdO1xuICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgY29uc3Qgc3ViQ2FzdGVkUHJvcHMgPSB7IC4uLnZhbHVlIH07XG4gICAgICAgIGNvbnN0IHN1YkNvbXBhcmVQcm9wcyA9IHsgLi4uY29tcGFyZSB8fCB7fSB9O1xuICAgICAgICBjb25zdCBtYXRjaGVkID0gT2JqZWN0LmVudHJpZXMoc3ViQ2FzdGVkUHJvcHMpLmV2ZXJ5KChba2V5LCB2YWx1ZV0pID0+IGNvbXBhcmVQcm9wcyh2YWx1ZSwgc3ViQ29tcGFyZVByb3BzW2tleV0sICgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdWJDYXN0ZWRQcm9wc1trZXldOyAvLyBpdHMgYSBmdW5jdGlvbiBhbmQgbm90IG5lZWRlZCB0byBiZSBjb21wYXJlZFxuICAgICAgICAgICAgZGVsZXRlIHN1YkNvbXBhcmVQcm9wc1trZXldOyAvLyBpdHMgYSBmdW5jdGlvbiBhbmQgbm90IG5lZWRlZCB0byBiZSBjb21wYXJlZFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgICByZXR1cm4gY29tcGFyZVByb3BzKHZhbHVlLCBjb21wYXJlLCBmdW5jdGlvbiBwcm9wQ29tcGFyZXIoKSB7XG4gICAgICAgIGNhc3RlZFByb3BzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGNhc3RlZFBhc3RQcm9wcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0pO1xufVxuLyoqIHJldHVybmluZyBhIG51bWJlciBtZWFucyB0cnVlIGdvb2QgY29tcGFyaXNvbiAqL1xuZnVuY3Rpb24gY29tcGFyZVByb3BzKHZhbHVlLCBjb21wYXJlLCBvbkRlbGV0ZSkge1xuICAgIGlmICghKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSkge1xuICAgICAgICByZXR1cm4gZGVlcEVxdWFsKHZhbHVlLCBjb21wYXJlLCBkZWVwQ29tcGFyZURlcHRoKSA/IDQgOiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY29tcGFyZUZuID0gY29tcGFyZTtcbiAgICBpZiAoISh0eXBlb2YgKGNvbXBhcmVGbikgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gaXRzIGEgZnVuY3Rpb24gbm93IGJ1dCB3YXMgbm90IGJlZm9yZVxuICAgIH1cbiAgICAvLyBlbnN1cmUgd2UgYXJlIGNvbXBhcmluZyBhcHBsZXMgdG8gYXBwbGVzIGFzIGZ1bmN0aW9uIGdldCB3cmFwcGVkXG4gICAgY29uc3QgY29tcGFyZU9yaWdpbmFsID0gY29tcGFyZT8ub3JpZ2luYWw7XG4gICAgaWYgKGNvbXBhcmVPcmlnaW5hbCkge1xuICAgICAgICBjb21wYXJlID0gY29tcGFyZU9yaWdpbmFsO1xuICAgIH1cbiAgICBjb25zdCBvcmlnaW5hbCA9IHZhbHVlLm9yaWdpbmFsO1xuICAgIGlmIChvcmlnaW5hbCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLm9yaWdpbmFsO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZVN0cmluZyA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgY29tcGFyZVN0cmluZyA9IGNvbXBhcmUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsdWVTdHJpbmcgPT09IGNvbXBhcmVTdHJpbmcpIHtcbiAgICAgICAgb25EZWxldGUoKTtcbiAgICAgICAgcmV0dXJuIDU7IC8vIGJvdGggYXJlIGZ1bmN0aW9uIHRoZSBzYW1lXG4gICAgfVxuICAgIG9uRGVsZXRlKCk7XG4gICAgcmV0dXJuIDY7XG59XG4iLCJpbXBvcnQgeyBoYXNQcm9wQ2hhbmdlcyB9IGZyb20gJy4vaGFzUHJvcENoYW5nZXMuZnVuY3Rpb24uanMnO1xuLyoqIFVzZWQgd2hlbiBkZWNpZGluZyBpZiBhIHN1cHBvcnQgd2lsbCBldmVuIGNoYW5nZSAoYXJlIHRoZSBhcmd1bWVudHMgdGhlIHNhbWU/KSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1N1cHBvcnRDaGFuZ2VkKG9sZFN1cHBvcnQsIG5ld1RlbXBsYXRlcikge1xuICAgIGNvbnN0IGxhdGVzdFByb3BzID0gbmV3VGVtcGxhdGVyLnByb3BzO1xuICAgIGNvbnN0IHByb3BzQ29uZmlnID0gb2xkU3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICBjb25zdCBwYXN0Q2xvbmVQcm9wcyA9IHByb3BzQ29uZmlnLmxhdGVzdDtcbiAgICBjb25zdCBwcm9wc0NoYW5nZWQgPSBoYXNQcm9wQ2hhbmdlcyhsYXRlc3RQcm9wcywgcGFzdENsb25lUHJvcHMsIG9sZFN1cHBvcnQudGVtcGxhdGVyLnByb3BXYXRjaCk7XG4gICAgcmV0dXJuIHByb3BzQ2hhbmdlZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbW11dGFibGVQcm9wTWF0Y2gocHJvcHMsIHBhc3RDbG9uZVByb3BzKSB7XG4gICAgLy8gaWYgZXZlcnkgcHJvcCB0aGUgc2FtZSwgdGhlbiBubyBjaGFuZ2VzXG4gICAgY29uc3QgbGVuID0gcHJvcHMubGVuZ3RoO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW47ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgY29uc3QgcGFzdFByb3AgPSBwYXN0Q2xvbmVQcm9wc1tpbmRleF07XG4gICAgICAgIGlmIChwcm9wICE9PSBwYXN0UHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBmYWxzZSBtZWFucyBoYXMgbm90IGNoYW5nZWRcbn1cbmV4cG9ydCBjb25zdCBzaGFsbG93Q29tcGFyZURlcHRoID0gMztcbmV4cG9ydCBjb25zdCBkZWVwQ29tcGFyZURlcHRoID0gMTA7XG4iLCJpbXBvcnQgeyBnZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuLyoqIEluamVjdCBhIHBhcmVudCB0YWcgb3IgaG9zdCBpbnRvIHRoZSBjdXJyZW50IGNvbnRleHRcbiAqIEZvciBob3N0IGZ1bmN0aW9ucywgcmV0dXJucyB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhlIGhvc3QgY2FsbGJhY2tcbiAqIEZvciB0YWcgY29tcG9uZW50cywgcmV0dXJucyB0aGUgdGFnIGluc3RhbmNlIGl0c2VsZlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnSW5qZWN0KHRhcmdldEl0ZW0pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEluQ3ljbGUoKTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0YWcuaW5qZWN0IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoaW4gYSB0YWcgb3IgaG9zdCBjb250ZXh0Jyk7XG4gICAgfVxuICAgIC8vIFNlYXJjaCB1cCB0aGUgY29udGV4dCB0cmVlIGZvciBhIG1hdGNoaW5nIHBhcmVudFxuICAgIGxldCBjdXJyZW50Q29udGV4dCA9IGNvbnRleHQucGFyZW50Q29udGV4dDtcbiAgICB3aGlsZSAoY3VycmVudENvbnRleHQpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhbiBhdHRyaWJ1dGVzIGNvbnRleHQgd2l0aCBjaGlsZCBjb250ZXh0c1xuICAgICAgICBjb25zdCBjb250ZXh0cyA9IGN1cnJlbnRDb250ZXh0LmNvbnRleHRzO1xuICAgICAgICBpZiAoY29udGV4dHMpIHtcbiAgICAgICAgICAgIC8vIFNlYXJjaCB3aXRoaW4gdGhlIGF0dHJpYnV0ZXMgY29udGV4dHNcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXR0ckNvbnRleHQgb2YgY29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ckNvbnRleHQuaXNBdHRyICYmIGF0dHJDb250ZXh0LnRhZ0pzVmFyPy5tYXRjaGVzSW5qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgbWF0Y2hlc0luamVjdGlvbiBtZXRob2QgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyQ29udGV4dC50YWdKc1Zhci5tYXRjaGVzSW5qZWN0aW9uKHRhcmdldEl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgaG9zdCB2YWx1ZXMsIHJldHVybiB0aGUgcmV0dXJuVmFsdWUgZnJvbSB0aGUgY29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJDb250ZXh0LnJldHVyblZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgY29udGV4dCBoYXMgYSB0YWdKc1ZhciB3aXRoIG1hdGNoZXNJbmplY3Rpb25cbiAgICAgICAgaWYgKGN1cnJlbnRDb250ZXh0LnRhZ0pzVmFyPy5tYXRjaGVzSW5qZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudENvbnRleHQudGFnSnNWYXIubWF0Y2hlc0luamVjdGlvbih0YXJnZXRJdGVtKSkge1xuICAgICAgICAgICAgICAgIC8vIEZvciB0YWcgY29tcG9uZW50cywgcmV0dXJuIHRoZSB0YWcgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudENvbnRleHQucmV0dXJuVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTW92ZSB1cCB0byB0aGUgcGFyZW50IGNvbnRleHRcbiAgICAgICAgY3VycmVudENvbnRleHQgPSBjdXJyZW50Q29udGV4dC5wYXJlbnRDb250ZXh0O1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlID0gYENvdWxkIG5vdCBmaW5kIHBhcmVudCBjb250ZXh0IGZvciB0YWcuaW5qZWN0ICR7dGFyZ2V0SXRlbX1gO1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgeyB0YXJnZXRJdGVtLCBjb250ZXh0IH0pO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbn1cbiIsImltcG9ydCB7IGlzU2tpcFByb3BWYWx1ZSB9IGZyb20gJy4uL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IHVwZGF0ZUV4aXN0aW5nT2JqZWN0IH0gZnJvbSAnLi91cGRhdGVFeGlzdGluZ09iamVjdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB1cGRhdGVFeGlzdGluZ0FycmF5IH0gZnJvbSAnLi91cGRhdGVFeGlzdGluZ0FycmF5LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzeW5jUHJpb3JQcm9wRnVuY3Rpb24ocHJpb3JQcm9wLCBwcm9wLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIG1heERlcHRoLCBkZXB0aCkge1xuICAgIGlmIChwcmlvclByb3AgPT09IHVuZGVmaW5lZCB8fCBwcmlvclByb3AgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuICAgIC8vIHByZXZlbnQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgaWYgKGRlcHRoID4gbWF4RGVwdGgpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKHByaW9yUHJvcCkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgLy8gdGhlIHByb3AgaSBhbSByZWNlaXZpbmcsIGlzIGFscmVhZHkgYmVpbmcgbW9uaXRvcmVkL2NvbnRyb2xsZWQgYnkgYW5vdGhlciBwYXJlbnRcbiAgICAgICAgaWYgKHByb3AubWVtKSB7XG4gICAgICAgICAgICBwcmlvclByb3AubWVtID0gcHJvcC5tZW07XG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgfVxuICAgICAgICBwcmlvclByb3AubWVtID0gcHJvcDtcbiAgICAgICAgcmV0dXJuIHByaW9yUHJvcDtcbiAgICB9XG4gICAgaWYgKGlzU2tpcFByb3BWYWx1ZShwcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJvcDsgLy8gbm8gY2hpbGRyZW4gdG8gY3Jhd2wgdGhyb3VnaFxuICAgIH1cbiAgICBpZiAoaXNBcnJheShwcm9wKSkge1xuICAgICAgICByZXR1cm4gdXBkYXRlRXhpc3RpbmdBcnJheShwcm9wLCBwcmlvclByb3AsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgZGVwdGgsIG1heERlcHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZUV4aXN0aW5nT2JqZWN0KHByb3AsIHByaW9yUHJvcCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCwgbWF4RGVwdGgpO1xufVxuIiwiaW1wb3J0IHsgc3luY1ByaW9yUHJvcEZ1bmN0aW9uIH0gZnJvbSAnLi9zeW5jUHJpb3JQcm9wRnVuY3Rpb24uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUV4aXN0aW5nQXJyYXkocHJvcCwgcHJpb3JQcm9wLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoLCBtYXhEZXB0aCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gcHJvcC5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgIGNvbnN0IHggPSBwcm9wW2luZGV4XTtcbiAgICAgICAgY29uc3Qgb2xkUHJvcCA9IHByaW9yUHJvcFtpbmRleF07XG4gICAgICAgIHByb3BbaW5kZXhdID0gc3luY1ByaW9yUHJvcEZ1bmN0aW9uKG9sZFByb3AsIHgsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgbWF4RGVwdGgsIGRlcHRoICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9wO1xufVxuIiwiaW1wb3J0IHsgc3luY1ByaW9yUHJvcEZ1bmN0aW9uIH0gZnJvbSAnLi9zeW5jUHJpb3JQcm9wRnVuY3Rpb24uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUV4aXN0aW5nT2JqZWN0KHByb3AsIHByaW9yUHJvcCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCwgbWF4RGVwdGgpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcCk7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGtleXMpIHtcbiAgICAgICAgY29uc3Qgc3ViVmFsdWUgPSBwcm9wW25hbWVdO1xuICAgICAgICBjb25zdCBvbGRQcm9wID0gcHJpb3JQcm9wW25hbWVdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzeW5jUHJpb3JQcm9wRnVuY3Rpb24ob2xkUHJvcCwgc3ViVmFsdWUsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgbWF4RGVwdGgsIGRlcHRoICsgMSk7XG4gICAgICAgIGlmIChzdWJWYWx1ZSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNTZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3AsIG5hbWUpPy5zZXQ7XG4gICAgICAgIGlmIChoYXNTZXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHByb3BbbmFtZV0gPSByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBwcm9wO1xufVxuIiwiaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCwgaGFzU3VwcG9ydENoYW5nZWQsIHNoYWxsb3dDb21wYXJlRGVwdGggfSBmcm9tICcuLi8uLi90YWcvaGFzU3VwcG9ydENoYW5nZWQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2FzdFByb3BzIH0gZnJvbSAnLi4vLi4vdGFnL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi4vcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydCB9IGZyb20gJy4uL2Rlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldE5ld0dsb2JhbCB9IGZyb20gJy4uLy4uL3RhZy91cGRhdGUvZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTGlrZVRhZ3MgfSBmcm9tICcuLi8uLi90YWcvaXNMaWtlVGFncy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBQcm9wV2F0Y2hlcyB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy90YWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc3luY1ByaW9yUHJvcEZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vdGFnL3VwZGF0ZS9zeW5jUHJpb3JQcm9wRnVuY3Rpb24uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50KG93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgLy8gbGFzdGVzdFxuc3ViamVjdCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1YmplY3QuZ2xvYmFsO1xuICAgIGNvbnN0IG9sZFN1cHBvcnQgPSBzdWJqZWN0LnN0YXRlLm5ld2VzdDtcbiAgICBjb25zdCBvbGRXcmFwcGVyID0gb2xkU3VwcG9ydC50ZW1wbGF0ZXIud3JhcHBlcjtcbiAgICBsZXQgbmV3V3JhcHBlciA9IG5ld1N1cHBvcnQudGVtcGxhdGVyLndyYXBwZXI7XG4gICAgbGV0IGlzU2FtZVRhZyA9IGZhbHNlO1xuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IG5ld1N1cHBvcnQudGVtcGxhdGVyLnRhZ0pzVHlwZTtcbiAgICBjb25zdCBza2lwQ29tcGFyaW5nID0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlciA9PT0gdGFnSnNUeXBlIHx8IFZhbHVlVHlwZXMucmVuZGVyT25jZSA9PT0gdGFnSnNUeXBlO1xuICAgIGlmIChza2lwQ29tcGFyaW5nKSB7XG4gICAgICAgIGlzU2FtZVRhZyA9IG5ld1N1cHBvcnQudGVtcGxhdGVyLnRhZ0pzVHlwZSA9PT0gVmFsdWVUeXBlcy5yZW5kZXJPbmNlIHx8IGlzTGlrZVRhZ3Mob2xkU3VwcG9ydCwgbmV3U3VwcG9ydCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9sZFdyYXBwZXIgJiYgbmV3V3JhcHBlcikge1xuICAgICAgICAvLyBpcyB0aGlzIHBlcmhhcHMgYW4gb3V0ZXJIVE1MIGNvbXBhcmU/XG4gICAgICAgIGNvbnN0IGlubmVySFRNTCA9IG9sZFN1cHBvcnQudGVtcGxhdGVyLnRhZz8uX2lubmVySFRNTDtcbiAgICAgICAgaWYgKGlubmVySFRNTCkge1xuICAgICAgICAgICAgLy8gbmV3V3JhcHBlciA9IGlubmVySFRNTC5vdXRlckhUTUwgYXMgYW55IGFzIFdyYXBwZXJcbiAgICAgICAgICAgIG5ld1dyYXBwZXIgPSBuZXdTdXBwb3J0Lm91dGVySFRNTDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRGdW5jdGlvbiA9IG9sZFdyYXBwZXIub3JpZ2luYWw7XG4gICAgICAgIGNvbnN0IG5ld0Z1bmN0aW9uID0gbmV3V3JhcHBlci5vcmlnaW5hbDtcbiAgICAgICAgLy8gc3RyaW5nIGNvbXBhcmUgYm90aCBmdW5jdGlvbnNcbiAgICAgICAgaXNTYW1lVGFnID0gb2xkRnVuY3Rpb24gPT09IG5ld0Z1bmN0aW9uO1xuICAgIH1cbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBuZXdTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICBzd2FwVGFncyhzdWJqZWN0LCB0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFzQ2hhbmdlZCA9IHNraXBDb21wYXJpbmcgfHwgaGFzU3VwcG9ydENoYW5nZWQob2xkU3VwcG9ydCwgdGVtcGxhdGVyKTtcbiAgICAvLyBldmVyeWhpbmcgaGFzIG1hdGNoZWQsIG5vIGRpc3BsYXkgbmVlZHMgdXBkYXRpbmcuXG4gICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIGNvbnN0IG1heERlcHRoID0gdGVtcGxhdGVyLnByb3BXYXRjaCA9PT0gUHJvcFdhdGNoZXMuREVFUCA/IGRlZXBDb21wYXJlRGVwdGggOiBzaGFsbG93Q29tcGFyZURlcHRoO1xuICAgICAgICBzeW5jU3VwcG9ydHModGVtcGxhdGVyLCBuZXdTdXBwb3J0LCBvbGRTdXBwb3J0LCBvd25lclN1cHBvcnQsIG1heERlcHRoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3ViamVjdC5sb2NrZWQpIHtcbiAgICAgICAgZ2xvYmFsLmJsb2NrZWQucHVzaChuZXdTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZW5kZXJTdXBwb3J0KG5ld1N1cHBvcnQpO1xuICAgICsrc3ViamVjdC5yZW5kZXJDb3VudDtcbiAgICByZXR1cm47XG59XG5leHBvcnQgZnVuY3Rpb24gc3luY0Z1bmN0aW9uUHJvcHMobmV3U3VwcG9ydCwgb2xkU3VwcG9ydCwgb3duZXJTdXBwb3J0LCBuZXdQcm9wc0FycmF5LCAvLyB0ZW1wbGF0ZXIucHJvcHNcbm1heERlcHRoLCBkZXB0aCA9IC0xKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG9sZFN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBnbG9iYWwgPSBzdWJqZWN0Lmdsb2JhbDtcbiAgICBpZiAoIWdsb2JhbCB8fCAhc3ViamVjdC5zdGF0ZS5uZXdlc3QpIHtcbiAgICAgICAgY29uc3QgY2FzdGVkUHJvcHMgPSBjYXN0UHJvcHMobmV3UHJvcHNBcnJheSwgbmV3U3VwcG9ydCwgZGVwdGgpO1xuICAgICAgICBuZXdQcm9wc0FycmF5LnB1c2goLi4uY2FzdGVkUHJvcHMpO1xuICAgICAgICBjb25zdCBwcm9wc0NvbmZpZyA9IG5ld1N1cHBvcnQucHJvcHNDb25maWc7XG4gICAgICAgIHByb3BzQ29uZmlnLmNhc3RQcm9wcyA9IGNhc3RlZFByb3BzO1xuICAgICAgICByZXR1cm4gbmV3UHJvcHNBcnJheTtcbiAgICB9XG4gICAgY29uc3QgbmV3ZXN0ID0gc3ViamVjdC5zdGF0ZS5uZXdlc3Q7XG4gICAgb2xkU3VwcG9ydCA9IG5ld2VzdCB8fCBvbGRTdXBwb3J0O1xuICAgIGNvbnN0IHByaW9yUHJvcENvbmZpZyA9IG9sZFN1cHBvcnQucHJvcHNDb25maWc7XG4gICAgY29uc3QgcHJpb3JQcm9wc0FycmF5ID0gcHJpb3JQcm9wQ29uZmlnLmNhc3RQcm9wcztcbiAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBuZXdQcm9wc0FycmF5Lmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBwcm9wID0gbmV3UHJvcHNBcnJheVtpbmRleF07XG4gICAgICAgIGNvbnN0IHByaW9yUHJvcCA9IHByaW9yUHJvcHNBcnJheVtpbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gc3luY1ByaW9yUHJvcEZ1bmN0aW9uKHByaW9yUHJvcCwgcHJvcCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCwgZGVwdGggKyAxKTtcbiAgICAgICAgbmV3QXJyYXkucHVzaChuZXdWYWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld1Byb3BzQ29uZmlnID0gbmV3U3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICBuZXdQcm9wc0NvbmZpZy5jYXN0UHJvcHMgPSBuZXdBcnJheTtcbiAgICByZXR1cm4gbmV3QXJyYXk7XG59XG5leHBvcnQgZnVuY3Rpb24gbW92ZVByb3ZpZGVycyhvbGRTdXBwb3J0LCBuZXdTdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gb2xkU3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICBsZXQgcEluZGV4ID0gLTE7XG4gICAgY29uc3QgcHJvdmlkZXJzID0gZ2xvYmFsLnByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgfHwgW107XG4gICAgY29uc3QgcExlbiA9IHByb3ZpZGVycy5sZW5ndGggLSAxO1xuICAgIHdoaWxlIChwSW5kZXgrKyA8IHBMZW4pIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBwcm92aWRlcnNbcEluZGV4XTtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGNvbnN0IHBjTGVuID0gcHJvdmlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKGluZGV4KysgPCBwY0xlbikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwcm92aWRlci5jaGlsZHJlbltpbmRleF07XG4gICAgICAgICAgICBjb25zdCB3YXNTYW1lR2xvYmFscyA9IGdsb2JhbCA9PT0gY2hpbGQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgICAgICBpZiAod2FzU2FtZUdsb2JhbHMpIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlci5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLmNoaWxkcmVuLnB1c2gobmV3U3VwcG9ydCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqIEV4Y2hhbmdlcyBlbnRpcmUgcHJvcHNDb25maWdzICovXG5mdW5jdGlvbiBzeW5jU3VwcG9ydHModGVtcGxhdGVyLCBzdXBwb3J0LCBvbGRTdXBwb3J0LCBvd25lclN1cHBvcnQsIG1heERlcHRoKSB7XG4gICAgLy8gdXBkYXRlIGZ1bmN0aW9uIHJlZnMgdG8gdXNlIGxhdGVzdCByZWZlcmVuY2VzXG4gICAgY29uc3QgbmV3UHJvcHMgPSB0ZW1wbGF0ZXIucHJvcHM7XG4gICAgY29uc3QgY2FzdGVkUHJvcHMgPSBzeW5jRnVuY3Rpb25Qcm9wcyhzdXBwb3J0LCBvbGRTdXBwb3J0LCBvd25lclN1cHBvcnQsIG5ld1Byb3BzLCBtYXhEZXB0aCk7XG4gICAgY29uc3QgcHJvcHNDb25maWcgPSBzdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIC8vIFdoZW4gbmV3IHN1cHBvcnQgYWN0dWFsbHkgbWFrZXMgY2FsbCB0byByZWFsIGZ1bmN0aW9uLCB1c2UgdGhlc2UgcHJlIGNhc3RlZCBwcm9wc1xuICAgIHByb3BzQ29uZmlnLmNhc3RQcm9wcyA9IGNhc3RlZFByb3BzO1xuICAgIGNvbnN0IGxhc3RQcm9wc0NvbmZpZyA9IG9sZFN1cHBvcnQucHJvcHNDb25maWc7XG4gICAgLy8gdXBkYXRlIHN1cHBvcnQgdG8gdGhpbmsgaXQgaGFzIGRpZmZlcmVudCBjbG9uZWQgcHJvcHNcbiAgICBsYXN0UHJvcHNDb25maWcubGF0ZXN0ID0gcHJvcHNDb25maWcubGF0ZXN0O1xuICAgIHJldHVybiBvbGRTdXBwb3J0OyAvLyBpdHMgdGhlIHNhbWUgdGFnIGNvbXBvbmVudCAgXG59XG4vKiogV2FzIHRhZywgd2lsbCBiZSB0YWcgKi9cbmZ1bmN0aW9uIHN3YXBUYWdzKGNvbnRleHRJdGVtLCB0ZW1wbGF0ZXIsIC8vIG5ldyB0YWdcbm93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHRJdGVtLmdsb2JhbDtcbiAgICBjb25zdCBvbGRlc3RTdXBwb3J0ID0gY29udGV4dEl0ZW0uc3RhdGUub2xkZXN0O1xuICAgIGRlc3Ryb3lTdXBwb3J0KG9sZGVzdFN1cHBvcnQsIGdsb2JhbCk7XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICB0ZW1wbGF0ZXIucHJvY2Vzc0luaXQodGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcik7XG59XG4iLCJpbXBvcnQgeyBnZXRDaGlsZFRhZ3NUb1NvZnREZXN0cm95LCB1bnN1YnNjcmliZUZyb20gfSBmcm9tICcuLi90YWcvZGVzdHJveUNvbnRleHRzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldE5ld0dsb2JhbCB9IGZyb20gJy4uL3RhZy91cGRhdGUvZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNtYXJ0UmVtb3ZlS2lkcyB9IGZyb20gJy4uL3RhZy9zbWFydFJlbW92ZUtpZHMuZnVuY3Rpb24uanMnO1xuLyoqIHVzZWQgd2hlbiBhIHRhZyBzd2FwcyBjb250ZW50IHJldHVybmVkICovXG5leHBvcnQgZnVuY3Rpb24gc29mdERlc3Ryb3lTdXBwb3J0KGxhc3RTdXBwb3J0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IGxhc3RTdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3QgZ2xvYmFsID0gY29udGV4dC5nbG9iYWw7XG4gICAgY29uc3QgeyBzdWJzLCB0YWdzIH0gPSBnZXRDaGlsZFRhZ3NUb1NvZnREZXN0cm95KGNvbnRleHQuY29udGV4dHMpO1xuICAgIHNvZnREZXN0cm95T25lKGNvbnRleHQpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGFncykge1xuICAgICAgICBjb25zdCBjR2xvYmFsID0gY2hpbGQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgIGlmIChjR2xvYmFsLmRlbGV0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzb2Z0RGVzdHJveU9uZShjaGlsZC5jb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgbXlTdWJzID0gZ2xvYmFsLnN1YnNjcmlwdGlvbnM7XG4gICAgaWYgKG15U3Vicykge1xuICAgICAgICBzdWJzLmZvckVhY2godW5zdWJzY3JpYmVGcm9tKTtcbiAgICB9XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHQpO1xufVxuZnVuY3Rpb24gc29mdERlc3Ryb3lPbmUoY29udGV4dCkge1xuICAgIGNvbnRleHQuZ2xvYmFsLmRlbGV0ZWQgPSB0cnVlOyAvLyB0aGUgY2hpbGRyZW4gYXJlIHRydWx5IGRlc3Ryb3llZCBidXQgdGhlIG1haW4gc3VwcG9ydCB3aWxsIGJlIHN3YXBwZWRcbiAgICBzbWFydFJlbW92ZUtpZHMoY29udGV4dCwgW10pO1xufVxuIiwiaW1wb3J0IHsgbW92ZVByb3ZpZGVycyB9IGZyb20gJy4vdXBkYXRlL3VwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNvZnREZXN0cm95U3VwcG9ydCB9IGZyb20gJy4vc29mdERlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGZpcnN0VGFnUmVuZGVyLCBnZXRTdXBwb3J0T2xkZXJTdGF0ZSwgcmVSZW5kZXJUYWcgfSBmcm9tICcuL3JlbmRlclRhZ09ubHkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNMaWtlVGFncyB9IGZyb20gJy4uL3RhZy9pc0xpa2VUYWdzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbi8qKiBUT0RPOiBUaGlzIHNlZW1zIHRvIHN1cHBvcnQgYm90aCBuZXcgYW5kIHVwZGF0ZXMgYW5kIHNob3VsZCBiZSBzZXBhcmF0ZWQ/ICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyV2l0aFN1cHBvcnQobmV3U3VwcG9ydCwgbGFzdFN1cHBvcnQsIC8vIHByZXZpb3VzIChnbG9iYWwubmV3ZXN0KVxuc3ViamVjdCkge1xuICAgIGxldCByZVN1cHBvcnQ7XG4gICAgZGVsZXRlIHN1YmplY3QudG9SZW5kZXI7XG4gICAgaWYgKGdldFN1cHBvcnRPbGRlclN0YXRlKGxhc3RTdXBwb3J0KSkge1xuICAgICAgICByZVN1cHBvcnQgPSByZVJlbmRlclRhZyhuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCwgc3ViamVjdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZVN1cHBvcnQgPSBmaXJzdFRhZ1JlbmRlcihuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCwgc3ViamVjdCk7XG4gICAgfVxuICAgIGNvbnN0IGlzTGlrZVRhZyA9ICFsYXN0U3VwcG9ydCB8fCBpc0xpa2VUYWdzKGxhc3RTdXBwb3J0LCByZVN1cHBvcnQpO1xuICAgIGlmICghaXNMaWtlVGFnKSB7XG4gICAgICAgIG1vdmVQcm92aWRlcnMobGFzdFN1cHBvcnQsIHJlU3VwcG9ydCk7XG4gICAgICAgIHNvZnREZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCk7XG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSByZVN1cHBvcnQuY29udGV4dDtcbiAgICAgICAgc3ViamVjdC5zdGF0ZS5vbGRlc3QgPSByZVN1cHBvcnQ7XG4gICAgICAgIHN1YmplY3Quc3RhdGUubmV3ZXN0ID0gcmVTdXBwb3J0O1xuICAgICAgICBzdWJqZWN0LnN0YXRlLm9sZGVyID0gc3ViamVjdC5zdGF0ZS5uZXdlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAobGFzdFN1cHBvcnQpIHtcbiAgICAgICAgY29uc3QgdGFnID0gbGFzdFN1cHBvcnQudGVtcGxhdGVyLnRhZztcbiAgICAgICAgaWYgKHRhZyAmJiBzdWJqZWN0LnJlbmRlckNvdW50ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFRlbXBsYXRlciA9IGxhc3RTdXBwb3J0Py50ZW1wbGF0ZXI7XG4gICAgICAgICAgICBjb25zdCBsYXN0VGFnID0gbGFzdFRlbXBsYXRlcj8udGFnO1xuICAgICAgICAgICAgY2hlY2tUYWdTb2Z0RGVzdHJveSh0YWcsIGxhc3RTdXBwb3J0LCBsYXN0VGFnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZVN1cHBvcnQub3duZXJTdXBwb3J0ID0gbmV3U3VwcG9ydC5vd25lclN1cHBvcnQ7IC8vIHx8IGxhc3RPd25lclN1cHBvcnQpIGFzIEFueVN1cHBvcnRcbiAgICByZXR1cm4ge1xuICAgICAgICBzdXBwb3J0OiByZVN1cHBvcnQsXG4gICAgICAgIHdhc0xpa2VUYWdzOiBpc0xpa2VUYWdcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tUYWdTb2Z0RGVzdHJveSh0YWcsIGxhc3RTdXBwb3J0LCBsYXN0VGFnKSB7XG4gICAgaWYgKHRhZy50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuZG9tKSB7XG4gICAgICAgIGNvbnN0IGxhc3REb20gPSBsYXN0VGFnPy5kb207XG4gICAgICAgIGNvbnN0IG5ld0RvbSA9IHRhZy5kb207XG4gICAgICAgIGlmIChsYXN0RG9tICE9PSBuZXdEb20pIHtcbiAgICAgICAgICAgIHNvZnREZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobGFzdFRhZykge1xuICAgICAgICBjb25zdCBsYXN0U3RyaW5ncyA9IGxhc3RUYWcuc3RyaW5ncztcbiAgICAgICAgaWYgKGxhc3RTdHJpbmdzKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRMZW5ndGggPSBsYXN0U3RyaW5ncz8ubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gdGFnLnN0cmluZ3MubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCAhPT0gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc29mdERlc3Ryb3lTdXBwb3J0KGxhc3RTdXBwb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IHJlbmRlcldpdGhTdXBwb3J0IH0gZnJvbSAnLi9yZW5kZXJXaXRoU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnIH0gZnJvbSAnLi91cGRhdGUvcHJvY2Vzc1RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB1cGRhdGVTdXBwb3J0QnkgfSBmcm9tICcuL3VwZGF0ZS91cGRhdGVTdXBwb3J0QnkuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckV4aXN0aW5nU3VwcG9ydChsYXN0U3VwcG9ydCwgLy8gc2hvdWxkIGJlIGdsb2JhbC5uZXdlc3Rcbm5ld1N1cHBvcnQsIC8vIG5ldyB0byBiZSByZW5kZXJlZFxuc3ViamVjdCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHJlbmRlcldpdGhTdXBwb3J0KG5ld1N1cHBvcnQsIGxhc3RTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBpZiAocmVzdWx0Lndhc0xpa2VUYWdzKSB7XG4gICAgICAgIGNvbnN0IG9sZGVzdCA9IHN1YmplY3Quc3RhdGUub2xkZXN0OyAvLyB8fCByZXN1bHQuc3VwcG9ydFxuICAgICAgICB1cGRhdGVTdXBwb3J0Qnkob2xkZXN0LCByZXN1bHQuc3VwcG9ydCk7XG4gICAgICAgIHJldHVybiByZXN1bHQuc3VwcG9ydDtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NUYWcobmV3U3VwcG9ydCwgc3ViamVjdCk7XG59XG4iLCJpbXBvcnQgeyByZW5kZXJFeGlzdGluZ1N1cHBvcnQgfSBmcm9tICcuL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRXaXRoU3RhdGUgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFN1cHBvcnRXaXRoU3RhdGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5saW5lSHRtbCh0ZW1wbGF0ZXIpIHtcbiAgICByZXR1cm4gVmFsdWVUeXBlcy50ZW1wbGF0ZXIgPT09IHRlbXBsYXRlci50YWdKc1R5cGU7XG59XG4vKiogTWFpbiBmdW5jdGlvbiB1c2VkIGJ5IGFsbCBvdGhlciBjYWxsZXJzIHRvIHJlbmRlci91cGRhdGUgZGlzcGxheSBvZiBhIHRhZyBjb21wb25lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdXBwb3J0KHN1cHBvcnQpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1YmplY3QuZ2xvYmFsO1xuICAgIGNvbnN0IHRlbXBsYXRlciA9IHN1cHBvcnQudGVtcGxhdGVyO1xuICAgIGNvbnN0IGlubGluZUh0bWwgPSBpc0lubGluZUh0bWwodGVtcGxhdGVyKTtcbiAgICBpZiAoc3ViamVjdC5sb2NrZWQpIHtcbiAgICAgICAgZ2xvYmFsLmJsb2NrZWQucHVzaChzdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnQ7XG4gICAgfVxuICAgIC8vIGlzIGl0IGp1c3QgYSB2YW5pbGxhIHRhZywgbm90IGNvbXBvbmVudD9cbiAgICBpZiAoaW5saW5lSHRtbCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZW5kZXJJbmxpbmVIdG1sKHN1cHBvcnQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzdWJqZWN0LmxvY2tlZCA9IDQ7XG4gICAgaWYgKGdsb2JhbC5ibG9ja2VkLmxlbmd0aCkge1xuICAgICAgICBzdXBwb3J0ID0gZ2xvYmFsLmJsb2NrZWQucG9wKCk7XG4gICAgICAgIGdsb2JhbC5ibG9ja2VkID0gW107XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IHJlbmRlckV4aXN0aW5nU3VwcG9ydChzdWJqZWN0LnN0YXRlLm5ld2VzdCwgc3VwcG9ydCwgc3ViamVjdCk7XG4gICAgZGVsZXRlIHN1YmplY3QubG9ja2VkO1xuICAgIHJldHVybiB0YWc7XG59XG4vKiogUmVuZGVycyB0aGUgb3duZXIgb2YgdGhlIGlubGluZSBIVE1MIGV2ZW4gaWYgdGhlIG93bmVyIGl0c2VsZiBpcyBpbmxpbmUgaHRtbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcklubGluZUh0bWwoc3VwcG9ydCkge1xuICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IGdldFN1cHBvcnRXaXRoU3RhdGUoc3VwcG9ydCk7XG4gICAgY29uc3Qgb3duQ29udGV4dCA9IG93bmVyU3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IG5ld2VzdCA9IG93bkNvbnRleHQuc3RhdGUubmV3ZXN0O1xuICAgIC8vIEZ1bmN0aW9uIGJlbG93IG1heSBjYWxsIHJlbmRlcklubGluZUh0bWwgYWdhaW4gaWYgb3duZXIgaXMganVzdCBpbmxpbmUgSFRNTFxuICAgIGNvbnN0IHJlc3VsdCA9IHJlbmRlclN1cHBvcnQobmV3ZXN0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vaXNJbnN0YW5jZS5qc1wiO1xuaW1wb3J0IHsgcHJvdmlkZXJzQ2hhbmdlQ2hlY2sgfSBmcm9tIFwiLi4vLi4vc3RhdGUvcHJvdmlkZXJzQ2hhbmdlQ2hlY2suZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGlzSW5saW5lSHRtbCB9IGZyb20gXCIuLi8uLi9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gXCIuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzXCI7XG5pbXBvcnQgeyBjaGVja1JlbmRlclVwIH0gZnJvbSBcIi4uLy4uL3JlbmRlci9jaGVja1JlbmRlclVwLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VXBUYWdzKHN1cHBvcnQsIHN1cHBvcnRzID0gW10pIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIC8vIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWwgYXMgU3VwcG9ydFRhZ0dsb2JhbFxuICAgIGNvbnN0IHRlbXBsYXRlciA9IHN1cHBvcnQudGVtcGxhdGVyO1xuICAgIGNvbnN0IGlubGluZUh0bWwgPSBpc0lubGluZUh0bWwodGVtcGxhdGVyKTtcbiAgICBjb25zdCBvd25lclN1cHBvcnQgPSBzdXBwb3J0Lm93bmVyU3VwcG9ydDtcbiAgICBpZiAoc3ViamVjdC5sb2NrZWQpIHtcbiAgICAgICAgc3VwcG9ydHMucHVzaChzdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzO1xuICAgIH1cbiAgICAvLyBpcyBpdCBqdXN0IGEgdmFuaWxsYSB0YWcsIG5vdCBjb21wb25lbnQ/XG4gICAgaWYgKGlubGluZUh0bWwpIHtcbiAgICAgICAgcmV0dXJuIGdldFVwVGFncyhvd25lclN1cHBvcnQsIHN1cHBvcnRzKTtcbiAgICB9XG4gICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICBpZiAoZ2xvYmFsICYmIGdsb2JhbC5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBzdXBwb3J0cztcbiAgICB9XG4gICAgY29uc3QgbmV3U3VwcG9ydCA9IHN1cHBvcnQ7IC8vIGdsb2JhbC5uZXdlc3QgYXMgQW55U3VwcG9ydFxuICAgIGNvbnN0IGlzQ29tcG9uZW50ID0gaXNUYWdDb21wb25lbnQobmV3U3VwcG9ydC50ZW1wbGF0ZXIpO1xuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IHN1cHBvcnQudGVtcGxhdGVyLnRhZ0pzVHlwZTtcbiAgICBjb25zdCBjYW5Db250aW51ZVVwID0gb3duZXJTdXBwb3J0ICYmIHRhZ0pzVHlwZSAhPT0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcjtcbiAgICBjb25zdCBjb250aW51ZVVwID0gY2FuQ29udGludWVVcCAmJiAoIWlzQ29tcG9uZW50IHx8IGNoZWNrUmVuZGVyVXAobmV3U3VwcG9ydC50ZW1wbGF0ZXIsIG5ld1N1cHBvcnQpKTtcbiAgICBpZiAobmV3U3VwcG9ydC5jb250ZXh0Lmdsb2JhbCkge1xuICAgICAgICBjb25zdCBwcm9TdXBwb3J0cyA9IHByb3ZpZGVyc0NoYW5nZUNoZWNrKG5ld1N1cHBvcnQpO1xuICAgICAgICBzdXBwb3J0cy5wdXNoKC4uLnByb1N1cHBvcnRzKTtcbiAgICB9XG4gICAgaWYgKGNvbnRpbnVlVXApIHtcbiAgICAgICAgZ2V0VXBUYWdzKG93bmVyU3VwcG9ydCwgc3VwcG9ydHMpO1xuICAgICAgICBpZiAoaXNDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzLnB1c2gobmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzOyAvLyBtb3JlIHRvIGtlZXAgZ29pbmcgdXAsIGRvIG5vdCBwdXNoIHRoaXMgY2hpbGQgZm9yIHJldmlld1xuICAgIH1cbiAgICBzdXBwb3J0cy5wdXNoKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBzdXBwb3J0cztcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbi8qKiBGaWxlIGxhcmdlbHkgcmVzcG9uc2libGUgZm9yIHJlYWN0aW5nIHRvIGVsZW1lbnQgZXZlbnRzLCBzdWNoIGFzIG9uY2xpY2sgKi9cbmltcG9ydCB7IGdldFVwVGFncyB9IGZyb20gJy4vZ2V0VXBUYWdzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclRhZ1VwZGF0ZUFycmF5IH0gZnJvbSAnLi9yZW5kZXJUYWdBcnJheS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0V2l0aFN0YXRlIH0gZnJvbSAnLi9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNoZWNrVG9SZXNvbHZlUHJvbWlzZSB9IGZyb20gJy4vY2hlY2tUb1Jlc29sdmVQcm9taXNlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBiaW5kU3ViamVjdENhbGxiYWNrKHZhbHVlLCBzdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAvLyBNQUlOIEVWRU5UIENBTExCQUNLIFBST0NFU1NPUlxuICAgIGNvbnN0IHN1YmplY3RGdW5jdGlvbiA9IGZ1bmN0aW9uIGNhbGxiYWNrUmVwbGFjZW1lbnQoZWxlbWVudCwgYXJncykge1xuICAgICAgICBpZiAoZ2xvYmFsLmRlbGV0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zdCBuZXdlc3QgPSBnbG9iYWwubmV3ZXN0IGFzIEFueVN1cHBvcnQgLy8gfHwgc3ViamVjdEZ1bmN0aW9uLnN1cHBvcnRcbiAgICAgICAgcmV0dXJuIHJ1blRhZ0NhbGxiYWNrKHN1YmplY3RGdW5jdGlvbi50YWdGdW5jdGlvbiwgc3ViamVjdEZ1bmN0aW9uLnN1cHBvcnQsIC8vIG5ld2VzdFxuICAgICAgICAvLyBzdWJqZWN0RnVuY3Rpb24uc3RhdGVzLCAvLyBuZXdlc3RcbiAgICAgICAgZWxlbWVudCwgYXJncyk7XG4gICAgfTtcbiAgICAvLyBsaW5rIGJhY2sgdG8gb3JpZ2luYWwuIE1vc3RseSB1c2VkIGZvciA8ZGl2IG9uaW5pdCBvbmRlc3Ryb3k+IGFuaW1hdGlvbnNcbiAgICBzdWJqZWN0RnVuY3Rpb24udGFnRnVuY3Rpb24gPSB2YWx1ZTtcbiAgICAvLyBjb25zdCBjb21wb25lbnQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpXG4gICAgc3ViamVjdEZ1bmN0aW9uLnN1cHBvcnQgPSBzdXBwb3J0O1xuICAgIC8vIHN1YmplY3RGdW5jdGlvbi5vdGhlclN1cHBvcnQgPSBjb21wb25lbnRcbiAgICAvL2NvbnN0IHN0YXRlcyA9IGNvbXBvbmVudC5zdGF0ZXMgLy8gPy5bMF1cbiAgICAvLyBzdWJqZWN0RnVuY3Rpb24uc3RhdGVzID0gc3RhdGVzXG4gICAgcmV0dXJuIHN1YmplY3RGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBydW5UYWdDYWxsYmFjayh2YWx1ZSwgc3VwcG9ydCwgXG4vLyBzdGF0ZXM6IFN0YXRlc1NldHRlcltdLFxuYmluZFRvLCBhcmdzKSB7XG4gICAgLy8gZ2V0IGFjdHVhbCBjb21wb25lbnQgb3duZXIgbm90IGp1c3QgdGhlIGh0bWxgYCBzdXBwb3J0XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0U3VwcG9ydFdpdGhTdGF0ZShzdXBwb3J0KTtcbiAgICBjb25zdCBzdWJqZWN0ID0gY29tcG9uZW50LmNvbnRleHQ7XG4gICAgLy8gY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWwgYXMgU3VwcG9ydFRhZ0dsb2JhbCAvLyB0YWcuc3ViamVjdC5nbG9iYWwgYXMgVGFnR2xvYmFsXG4gICAgc3ViamVjdC5sb2NrZWQgPSAxOyAvLyBwcmV2ZW50IGFub3RoZXIgcmVuZGVyIGZyb20gcmUtcmVuZGVyaW5nIHRoaXMgdGFnXG4gICAgLy8gc3luYyB0aGUgbmV3IHN0YXRlcyB0byB0aGUgb2xkIGJlZm9yZSB0aGUgb2xkIGRvZXMgYW55IHByb2Nlc3NpbmdcbiAgICAvLyBzeW5jU3RhdGVzQXJyYXkoY29tcG9uZW50LnN1YmplY3QuZ2xvYmFsLm5ld2VzdC5zdGF0ZXMsIHN0YXRlcylcbiAgICAvLyBBQ1RVQUwgQ0FMTEJBQ0sgVE8gT1JJR0lOQUwgRlVOQ1RJT05cbiAgICBjb25zdCBjYWxsYmFja1Jlc3VsdCA9IHZhbHVlLmFwcGx5KGJpbmRUbywgYXJncyk7XG4gICAgLy8gc3luYyB0aGUgb2xkIHN0YXRlcyB0byB0aGUgbmV3XG4gICAgLy8gc3luY1N0YXRlc0FycmF5KHN0YXRlcywgY29tcG9uZW50LnN1YmplY3QuZ2xvYmFsLm5ld2VzdC5zdGF0ZXMpXG4gICAgZGVsZXRlIHN1YmplY3QubG9ja2VkO1xuICAgIGNvbnN0IHJlc3VsdCA9IGFmdGVyVGFnQ2FsbGJhY2soY2FsbGJhY2tSZXN1bHQsIGNvbXBvbmVudCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZnRlclRhZ0NhbGxiYWNrKGNhbGxiYWNrUmVzdWx0LCBsYXN0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gbGFzdC5jb250ZXh0Lmdsb2JhbDtcbiAgICBpZiAoZ2xvYmFsPy5kZWxldGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFnc1RvVXBkYXRlID0gZ2V0VXBUYWdzKGxhc3QpO1xuICAgIHJlbmRlclRhZ1VwZGF0ZUFycmF5KHRhZ3NUb1VwZGF0ZSk7XG4gICAgcmV0dXJuIGNoZWNrVG9SZXNvbHZlUHJvbWlzZShjYWxsYmFja1Jlc3VsdCwgbGFzdCwgeyByZXNvbHZlUHJvbWlzZSwgcmVzb2x2ZVZhbHVlIH0pO1xufVxuY29uc3Qgbm9EYXRhID0gJ25vLWRhdGEtZXZlcic7XG5jb25zdCBwcm9taXNlTm9EYXRhID0gJ3Byb21pc2Utbm8tZGF0YS1ldmVyJztcbmZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKCkge1xuICAgIHJldHVybiBwcm9taXNlTm9EYXRhO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKCkge1xuICAgIHJldHVybiBub0RhdGE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYnViYmxlRXZlbnQoZXZlbnQsIHJlcGxhY2VFdmVudE5hbWUsIHRhcmdldCkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdGFyZ2V0W3JlcGxhY2VFdmVudE5hbWVdO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBsZXQgc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBldmVudC5vcmlnaW5hbFN0b3BQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBldmVudC5vcmlnaW5hbFN0b3BQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IGV2ZW50Lm9yaWdpbmFsU3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50Lm9yaWdpbmFsU3RvcFByb3BhZ2F0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkIHx8IHN0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXJlbnROb2RlID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgYnViYmxlRXZlbnQoZXZlbnQsIHJlcGxhY2VFdmVudE5hbWUsIHBhcmVudE5vZGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGJ1YmJsZUV2ZW50IH0gZnJvbSAnLi9idWJibGVFdmVudC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIoc3VwcG9ydCwgZXZlbnROYW1lLCBlbGVtZW50LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGVsbSA9IHN1cHBvcnQuYXBwRWxlbWVudDtcbiAgICBjb25zdCByZXBsYWNlRXZlbnROYW1lID0gZ2V0RXZlbnRSZWZlcmVuY2VOYW1lKGV2ZW50TmFtZSk7XG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2JsdXInKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9ICdmb2N1c291dCc7XG4gICAgfVxuICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgY29uc3QgZXZlbnRSZWcgPSBnbG9iYWwuZXZlbnRzO1xuICAgIGlmICghZXZlbnRSZWdbZXZlbnROYW1lXSkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2soZXZlbnQpIHtcbiAgICAgICAgICAgIGJ1YmJsZUV2ZW50KGV2ZW50LCByZXBsYWNlRXZlbnROYW1lLCBldmVudC50YXJnZXQpO1xuICAgICAgICB9O1xuICAgICAgICBldmVudFJlZ1tldmVudE5hbWVdID0gbGlzdGVuZXI7XG4gICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICAvLyBhdHRhY2ggdG8gZWxlbWVudCBhcyBcIl9jbGlja1wiIGFuZCBcIl9rZXl1cFwiXG4gICAgO1xuICAgIGVsZW1lbnRbcmVwbGFjZUV2ZW50TmFtZV0gPSBjYWxsYmFjaztcbiAgICBlbGVtZW50W2V2ZW50TmFtZV0gPSBjYWxsYmFjaztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFdmVudFJlZmVyZW5jZU5hbWUoZXZlbnROYW1lKSB7XG4gICAgLy8gY2FzdCBldmVudHMgdGhhdCBkbyBub3QgYnViYmxlIHVwIGludG8gb25lcyB0aGF0IGRvXG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2JsdXInKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9ICdmb2N1c291dCc7XG4gICAgfVxuICAgIHJldHVybiAnXycgKyBldmVudE5hbWU7XG59XG4iLCJpbXBvcnQgeyBhZGRTdXBwb3J0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4vYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbihlbGVtZW50LCBuZXdBdHRyVmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lKSB7XG4gICAgY29uc3QgZnVuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGZ1bi50YWdGdW5jdGlvbihlbGVtZW50LCBhcmdzKTtcbiAgICB9O1xuICAgIC8vIGFjY2VzcyB0byBvcmlnaW5hbCBmdW5jdGlvblxuICAgIGZ1bi50YWdGdW5jdGlvbiA9IG5ld0F0dHJWYWx1ZTtcbiAgICBmdW4uc3VwcG9ydCA9IHN1cHBvcnQ7XG4gICAgYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIoc3VwcG9ydC5hcHBTdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCwgLy8gc3VwcG9ydC5hcHBTdXBwb3J0LmFwcEVsZW1lbnQgYXMgRWxlbWVudCxcbiAgICBmdW4pO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzTm9EaXNwbGF5VmFsdWUoYXR0clZhbHVlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCA9PT0gYXR0clZhbHVlIHx8IG51bGwgPT09IGF0dHJWYWx1ZSB8fCBmYWxzZSA9PT0gYXR0clZhbHVlO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgQmFzaWNUeXBlcywgZW1wdHkgfSBmcm9tICcuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2lzU3BlY2lhbEF0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc05vRGlzcGxheVZhbHVlIH0gZnJvbSAnLi9pc05vRGlzcGxheVZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NBdHRyaWJ1dGUgfSBmcm9tICcuL3Byb2Nlc3NBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuLy8gc2luZ2xlL3N0YW5kIGFsb25lIGF0dHJpYnV0ZXNcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZSh2YWx1ZXMsIGF0dHJWYWx1ZSwgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBob3dUb1NldCwgY29udGV4dCwgcGFyZW50Q29udGV4dCkge1xuICAgIGlmIChpc05vRGlzcGxheVZhbHVlKGF0dHJWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBwcm9jZXNzIGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzICR7e2NsYXNzOidzb21ldGhpbmcsIGNoZWNrZWQ6dHJ1ZX19XG4gICAgaWYgKHR5cGVvZiBhdHRyVmFsdWUgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU3BlY2lhbCA9IGlzU3BlY2lhbEF0dHIobmFtZSk7IC8vIG9ubHkgb2JqZWN0IHZhcmlhYmxlcyBhcmUgZXZhbHVhdGVkIGZvciBpcyBzcGVjaWFsIGF0dHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXR0clZhbHVlW25hbWVdO1xuICAgICAgICAgICAgY29uc3QgaG93VG9TZXQgPSBzZXROb25GdW5jdGlvbklucHV0VmFsdWU7XG4gICAgICAgICAgICBwcm9jZXNzQXR0cmlidXRlKG5hbWUsIHZhbHVlLCB2YWx1ZXMsIGVsZW1lbnQsIG93bmVyU3VwcG9ydCwgaG93VG9TZXQsIGNvbnRleHQsIHBhcmVudENvbnRleHQsIGlzU3BlY2lhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyByZWd1bGFyIGF0dHJpYnV0ZXNcbiAgICBpZiAoYXR0clZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47IC8vIGlnbm9yZSwgZG8gbm90IHNldCBhdCB0aGlzIHRpbWVcbiAgICB9XG4gICAgaG93VG9TZXQoZWxlbWVudCwgYXR0clZhbHVlLCBlbXB0eSk7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwYWludENvbnRlbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1N0YW5kQWxvbmVBdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc05vRGlzcGxheVZhbHVlIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2F0dHJpYnV0ZXMvaXNOb0Rpc3BsYXlWYWx1ZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUodmFsdWVzLCBhdHRyVmFsdWUsIGxhc3RWYWx1ZSwgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBob3dUb1NldCwgY29udGV4dHMsIHBhcmVudENvbnRleHQpIHtcbiAgICAvLyBjaGVjayB0byByZW1vdmUgcHJldmlvdXMgYXR0cmlidXRlKHMpXG4gICAgaWYgKGxhc3RWYWx1ZSkge1xuICAgICAgICBpZiAoaXNOb0Rpc3BsYXlWYWx1ZShhdHRyVmFsdWUpIHx8IGF0dHJWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGxhc3RWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAobGFzdFZhbHVlKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzT2JTdGlsbCA9IHR5cGVvZiAoYXR0clZhbHVlKSA9PT0gQmFzaWNUeXBlcy5vYmplY3Q7XG4gICAgICAgICAgICBpZiAoaXNPYlN0aWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGxhc3RWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZigoYXR0clZhbHVlIGFzIGFueSlbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgaW4gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbcmVtb3ZlQXR0cmlidXRlLCBbZWxlbWVudCwgbmFtZV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gbGFzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtyZW1vdmVBdHRyaWJ1dGUsIFtlbGVtZW50LCBuYW1lXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZSh2YWx1ZXMsIGF0dHJWYWx1ZSwgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBob3dUb1NldCwgY29udGV4dHMsIHBhcmVudENvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUpIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbn1cbiIsImltcG9ydCB7IHByb2Nlc3NBdHRyaWJ1dGVFbWl0IH0gZnJvbSAnLi9wcm9jZXNzQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaG93VG9TZXRJbnB1dFZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHVwZGF0ZU5hbWVPbmx5QXR0clZhbHVlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy91cGRhdGVOYW1lT25seUF0dHJWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSwgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi8uLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbi8qKiBDdXJyZW50bHkgdW5pdmVyc2FsbHkgdXNlZCBmb3IgYWxsIGF0dHJpYnV0ZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIHZhbHVlcykge1xuICAgIGNvbnN0IGF0dHJDb250ZXh0SXRlbSA9IGNvbnRleHRJdGVtO1xuICAgIGNvbnN0IHRhZ1ZhbHVlID0gdmFsdWU7XG4gICAgaWYgKHRhZ1ZhbHVlPy50YWdKc1R5cGUpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBjb250ZXh0SXRlbS52YWx1ZTtcbiAgICAgICAgLy8gaXRzIG5vdyBhIHRhZ1ZhciB2YWx1ZSBidXQgYmVmb3JlIHdhcyBub3RcbiAgICAgICAgaWYgKCFvbGRWYWx1ZT8udGFnSnNUeXBlKSB7XG4gICAgICAgICAgICB0YWdWYWx1ZS5pc0F0dHIgPSB0cnVlO1xuICAgICAgICAgICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgICAgICAgICAgdGFnVmFsdWUucHJvY2Vzc0luaXRBdHRyaWJ1dGUoYXR0ckNvbnRleHRJdGVtLmF0dHJOYW1lLCB2YWx1ZSwgYXR0ckNvbnRleHRJdGVtLmVsZW1lbnQsIHRhZ1ZhbHVlLCBhdHRyQ29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgICAgICAgICBhdHRyQ29udGV4dEl0ZW0udGFnSnNWYXIgPSB0YWdWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbGRWYWx1ZS5oYXNWYWx1ZUNoYW5nZWQodGFnVmFsdWUsIGNvbnRleHRJdGVtLCAvLyB0b2RvOiB3ZWlyZCB0eXBpbmcgc2hvdWxkIGp1c3QgYmUgQ29udGV4dEl0ZW1cbiAgICAgICAgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYXR0ckNvbnRleHRJdGVtLmlzTmFtZU9ubHkpIHtcbiAgICAgICAgdXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUodmFsdWVzLCB2YWx1ZSwgYXR0ckNvbnRleHRJdGVtLnZhbHVlLCBhdHRyQ29udGV4dEl0ZW0uZWxlbWVudCwgLy8gZ2xvYmFsLmVsZW1lbnQgYXMgRWxlbWVudCxcbiAgICAgICAgb3duZXJTdXBwb3J0LCBhdHRyQ29udGV4dEl0ZW0uaG93VG9TZXQsIFtdLCAvLyBDb250ZXh0LCBidXQgd2UgZG9udCB3YW50IHRvIGFsdGVyIGN1cnJlbnRcbiAgICAgICAgYXR0ckNvbnRleHRJdGVtLnBhcmVudENvbnRleHQpO1xuICAgICAgICBhdHRyQ29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50ID0gYXR0ckNvbnRleHRJdGVtLmVsZW1lbnQ7XG4gICAgcHJvY2Vzc0F0dHJpYnV0ZUVtaXQodmFsdWUsIGF0dHJDb250ZXh0SXRlbS5hdHRyTmFtZSwgYXR0ckNvbnRleHRJdGVtLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGF0dHJDb250ZXh0SXRlbS5ob3dUb1NldCwgYXR0ckNvbnRleHRJdGVtLmlzU3BlY2lhbCk7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm47XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBzcGVjaWFsQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9zcGVjaWFsQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGJpbmRTdWJqZWN0Q2FsbGJhY2sgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2JpbmRTdWJqZWN0Q2FsbGJhY2suZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcGFpbnRDb250ZW50IH0gZnJvbSAnLi4vcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05vbkR5bmFtaWNBdHRyIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGFkZE9uZUNvbnRleHQgfSBmcm9tICcuLi9hZGRPbmVDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcHJvY2Vzc0F0dHJpYnV0ZUNhbGxiYWNrLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NVcGRhdGVBdHRyQ29udGV4dCB9IGZyb20gJy4vcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZUR5bmFtaWNBcnJheUF0dHJpYnV0ZSwgY3JlYXRlRHluYW1pY0F0dHJpYnV0ZSB9IGZyb20gJy4vY3JlYXRlRHluYW1pY0F0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRUYWdKc1ZhciB9IGZyb20gJy4vZ2V0VGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1N0YW5kQWxvbmVBdHRyaWJ1dGUgfSBmcm9tICcuL3Byb2Nlc3NTdGFuZEFsb25lQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NUYWdKc1ZhckF0dHJpYnV0ZSB9IGZyb20gJy4vcHJvY2Vzc1RhZ0pzQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbi8qKiBNQUlOIEZVTkNUSU9OLiBTZXRzIGF0dHJpYnV0ZSB2YWx1ZSwgc3Vic2NyaWJlcyB0byB2YWx1ZSB1cGRhdGVzICAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCB2YWx1ZXMsIC8vIGFsbCB0aGUgdmFyaWFibGVzIGluc2lkZSBodG1sYGBcbmVsZW1lbnQsIHN1cHBvcnQsIGhvd1RvU2V0LCAvLyAgPSBob3dUb1NldElucHV0VmFsdWVcbmNvbnRleHRzLCBwYXJlbnRDb250ZXh0LCBpc1NwZWNpYWwpIHtcbiAgICBjb25zdCB2YXJJbmRleCA9IGdldFRhZ0pzVmFyKGF0dHJOYW1lKTtcbiAgICBsZXQgaXNOYW1lVmFyID0gdmFySW5kZXggPj0gMCB8fCAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgKGF0dHJOYW1lKSAhPT0gJ3N0cmluZycpO1xuICAgIGxldCB2YWx1ZUluVmFsdWVzID0gdmFsdWVzW3ZhckluZGV4XTtcbiAgICAvLyB2YWx1ZSBvciBuYW1lIGZyb20gYm9sdD9cbiAgICBpZiAodmFsdWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICB2YWx1ZUluVmFsdWVzID0gdmFsdWU7IC8vIHRoZSB2YWx1ZSBpcyBhIHRhZ0pzVmFyXG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHJOYW1lPy50YWdKc1R5cGUpIHtcbiAgICAgICAgaXNOYW1lVmFyID0gdHJ1ZTtcbiAgICAgICAgdmFsdWVJblZhbHVlcyA9IGF0dHJOYW1lOyAvLyB0aGUgbmFtZSBpcyBhIHRhZ0pzVmFyXG4gICAgICAgIHZhbHVlID0gYXR0ck5hbWU7XG4gICAgfVxuICAgIGNvbnN0IHRhZ0pzVmFyID0gdmFsdWVJblZhbHVlcztcbiAgICBpZiAodGFnSnNWYXI/LnRhZ0pzVHlwZSkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlKHZhbHVlLCBjb250ZXh0cywgcGFyZW50Q29udGV4dCwgdGFnSnNWYXIsIHZhckluZGV4LCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCwgaXNOYW1lVmFyKTtcbiAgICB9XG4gICAgaWYgKGlzTmFtZVZhcikge1xuICAgICAgICAvLyBvbGQgd2F5IG9mIHNldHRpbmcgYnkgaHRtbGBgXG4gICAgICAgIGlmICh2YXJJbmRleCA9PT0gLTEgJiYgaXNOYW1lVmFyKSB7XG4gICAgICAgICAgICB2YWx1ZUluVmFsdWVzID0gYXR0ck5hbWU7IC8vIGl0cyBhIG5hbWUgb25seSB2YWx1ZSBhdHRyaWJ1dGVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0SXRlbSA9IGFkZE9uZUNvbnRleHQodmFsdWVJblZhbHVlcywgY29udGV4dHMsIHRydWUsIHBhcmVudENvbnRleHQpO1xuICAgICAgICBjb250ZXh0SXRlbS52YWx1ZUluZGV4ID0gdmFySW5kZXg7XG4gICAgICAgIGNvbnRleHRJdGVtLmlzQXR0ciA9IHRydWU7XG4gICAgICAgIGNvbnRleHRJdGVtLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBjb250ZXh0SXRlbS5pc05hbWVPbmx5ID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dEl0ZW0uaG93VG9TZXQgPSBob3dUb1NldDtcbiAgICAgICAgY29uc3QgdGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICAgICAgdGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSA9IHByb2Nlc3NVcGRhdGVBdHRyQ29udGV4dDtcbiAgICAgICAgLy8gc2luZ2xlL3N0YW5kIGFsb25lIGF0dHJpYnV0ZXNcbiAgICAgICAgcHJvY2Vzc1N0YW5kQWxvbmVBdHRyaWJ1dGUodmFsdWVzLCB2YWx1ZUluVmFsdWVzLCBlbGVtZW50LCBzdXBwb3J0LCBob3dUb1NldCwgY29udGV4dHMsIHBhcmVudENvbnRleHQpO1xuICAgICAgICByZXR1cm4gY29udGV4dEl0ZW07XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHluYW1pY0FycmF5QXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgZWxlbWVudCwgY29udGV4dHMsIGhvd1RvU2V0LCB2YWx1ZXMsIHN1cHBvcnQuY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlVmFyID0gZ2V0VGFnSnNWYXIodmFsdWUpO1xuICAgIGlmICh2YWx1ZVZhciA+PSAwKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3ZhbHVlVmFyXTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBjb250ZXh0cywgcGFyZW50Q29udGV4dCwgaG93VG9TZXQsIHN1cHBvcnQsIGlzU3BlY2lhbCwgdmFsdWVWYXIsIGNvbnRleHRzKTtcbiAgICB9XG4gICAgLy8gc2ltcGxlIG5hbWUvdmFsdWUgYXR0cmlidXRlXG4gICAgcmV0dXJuIHByb2Nlc3NOb25EeW5hbWljQXR0cihhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGhvd1RvU2V0LCBpc1NwZWNpYWwsIHBhcmVudENvbnRleHQpO1xufVxuLyoqIE9ubHkgdXNlZCBkdXJpbmcgdXBkYXRlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVFbWl0KG5ld0F0dHJWYWx1ZSwgYXR0ck5hbWUsIHN1YmplY3QsIGVsZW1lbnQsIHN1cHBvcnQsIGhvd1RvU2V0LCBpc1NwZWNpYWwpIHtcbiAgICAvLyBzaG91bGQgdGhlIGZ1bmN0aW9uIGJlIHdyYXBwZWQgc28gZXZlcnkgdGltZSBpdHMgY2FsbGVkIHdlIHJlLXJlbmRlcj9cbiAgICBpZiAoaXNGdW5jdGlvbihuZXdBdHRyVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja0Z1bihzdXBwb3J0LCBuZXdBdHRyVmFsdWUsIGVsZW1lbnQsIGF0dHJOYW1lLCBpc1NwZWNpYWwsIGhvd1RvU2V0LCBzdWJqZWN0KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVTdWJqZWN0VmFsdWUobmV3QXR0clZhbHVlLCBlbGVtZW50LCBhdHRyTmFtZSwgaXNTcGVjaWFsLCBob3dUb1NldCwgc3VwcG9ydCk7XG59XG4vKiogZmlndXJlIG91dCB3aGF0IHR5cGUgb2YgYXR0cmlidXRlIHdlIGFyZSBkZWFsaW5nIHdpdGggYW5kL29yIGZlZWQgdmFsdWUgaW50byBoYW5kbGVyIHRvIGZpZ3VyZSBob3cgdG8gdXBkYXRlICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnV0ZVN1YmplY3RWYWx1ZShuZXdBdHRyVmFsdWUsIGVsZW1lbnQsIGF0dHJOYW1lLCBzcGVjaWFsLCBob3dUb1NldCwgc3VwcG9ydCkge1xuICAgIC8vIHByb2Nlc3MgYWRkaW5nL3JlbW92aW5nIHN0eWxlLiBjbGFzcy4gKGZhbHNlIG1lYW5zIHJlbW92ZSlcbiAgICBpZiAoc3BlY2lhbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgc3BlY2lhbEF0dHJpYnV0ZShhdHRyTmFtZSwgbmV3QXR0clZhbHVlLCBlbGVtZW50LCBzcGVjaWFsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5ld0F0dHJWYWx1ZSkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW3BhaW50Q29udGVudFB1c2gsIFtlbGVtZW50LCBhdHRyTmFtZV1dKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24obmV3QXR0clZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZUZ1bmN0aW9uKGVsZW1lbnQsIG5ld0F0dHJWYWx1ZSwgc3VwcG9ydCwgYXR0ck5hbWUpO1xuICAgIH1cbiAgICAvLyB2YWx1ZSBpcyAwXG4gICAgaG93VG9TZXQoZWxlbWVudCwgYXR0ck5hbWUsIG5ld0F0dHJWYWx1ZSk7XG59XG5mdW5jdGlvbiBjYWxsYmFja0Z1bihzdXBwb3J0LCBuZXdBdHRyVmFsdWUsIGVsZW1lbnQsIGF0dHJOYW1lLCBpc1NwZWNpYWwsIGhvd1RvU2V0LCBzdWJqZWN0KSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHN1cHBvcnQudGVtcGxhdGVyLndyYXBwZXI7XG4gICAgY29uc3QgdGFnSnNUeXBlID0gd3JhcHBlcj8udGFnSnNUeXBlIHx8IHdyYXBwZXI/Lm9yaWdpbmFsPy50YWdKc1R5cGU7XG4gICAgY29uc3Qgb25lUmVuZGVyID0gdGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnJlbmRlck9uY2U7XG4gICAgaWYgKCFvbmVSZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NUYWdDYWxsYmFja0Z1bihzdWJqZWN0LCBuZXdBdHRyVmFsdWUsIHN1cHBvcnQsIGF0dHJOYW1lLCBlbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVTdWJqZWN0VmFsdWUobmV3QXR0clZhbHVlLCBlbGVtZW50LCBhdHRyTmFtZSwgaXNTcGVjaWFsLCBob3dUb1NldCwgc3VwcG9ydCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RhZ0NhbGxiYWNrRnVuKHN1YmplY3QsIG5ld0F0dHJWYWx1ZSwgc3VwcG9ydCwgYXR0ck5hbWUsIGVsZW1lbnQpIHtcbiAgICAvLyB0YWcgaGFzIHN0YXRlIGFuZCB3aWxsIG5lZWQgYWxsIGZ1bmN0aW9ucyB3cmFwcGVkIHRvIGNhdXNlIHJlLXJlbmRlcnNcbiAgICBuZXdBdHRyVmFsdWUgPSBiaW5kU3ViamVjdENhbGxiYWNrKG5ld0F0dHJWYWx1ZSwgc3VwcG9ydCk7XG4gICAgY29uc3QgdGFnSnNWYXIgPSBzdWJqZWN0LnRhZ0pzVmFyOyAvLyA9IHZhbHVlVG9UYWdKc1ZhcihuZXdBdHRyVmFsdWUpXG4gICAgdGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSA9IHByb2Nlc3NVcGRhdGVBdHRyQ29udGV4dDtcbiAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZUZ1bmN0aW9uKGVsZW1lbnQsIG5ld0F0dHJWYWx1ZSwgc3VwcG9ydCwgYXR0ck5hbWUpO1xufVxuZnVuY3Rpb24gcGFpbnRDb250ZW50UHVzaChlbGVtZW50LCBhdHRyTmFtZSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHByb2Nlc3NEeW5hbWljTmFtZVZhbHVlQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NVcGRhdGVBdHRyQ29udGV4dCB9IGZyb20gJy4vcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFRhZ1ZhckluZGV4IH0gZnJvbSAnLi9nZXRUYWdWYXJJbmRleC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi8uLi9zdWJqZWN0L1N1YmplY3QuY2xhc3MuanMnO1xuLyoqIFN1cHBvcnQgc3RyaW5nIGF0dHJpYnV0ZXMgd2l0aCBkeW5hbWljcyBFeDogPGRpdiBzdHlsZT1cImNvbG9yOmJsYWNrO2ZvbnQtc2l6ZTo6JHtmb250U2l6ZX07XCI+PC9kaXY+ICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHluYW1pY0FycmF5QXR0cmlidXRlKGF0dHJOYW1lLCBhcnJheSwgZWxlbWVudCwgY29udGV4dHMsIGhvd1RvU2V0LCAvLyAgPSBob3dUb1NldElucHV0VmFsdWVcbnZhbHVlcywgcGFyZW50Q29udGV4dCkge1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgLy8gbG9vcCBhbGwgdG8gYXR0YWNoIGNvbnRleHQgYW5kIHByb2Nlc3NvcnNcbiAgICBhcnJheS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZVZhciA9IGdldFRhZ1ZhckluZGV4KHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlVmFyID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG15SW5kZXggPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCB0YWdKc1ZhciA9IHZhbHVlVG9UYWdKc1Zhcih2YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0SXRlbSA9IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgICAgICAgICBpc0F0dHI6IHRydWUsXG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBhdHRyTmFtZTogYXR0ck5hbWUsXG4gICAgICAgICAgICAgICAgd2l0aGluT3duZXJFbGVtZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIHRhZ0pzVmFyLFxuICAgICAgICAgICAgICAgIHZhbHVlSW5kZXg6IGNvbnRleHRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb250ZXh0LFxuICAgICAgICAgICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGNvbnRleHRJdGVtLmhhbmRsZXIgPVxuICAgICAgICAgICAgdGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSA9IGZ1bmN0aW9uIGFycmF5SXRlbUhhbmRsZXIodmFsdWUsIGNvbnRleHRJdGVtLCBuZXdTdXBwb3J0LCBuZXdWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICArK2NvbnRleHRJdGVtLnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgICAgIHNldEJ5KG5ld1ZhbHVlcyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcHVzaFZhbHVlID0gdmFsdWVzW215SW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dEl0ZW0udmFsdWUgPSBwdXNoVmFsdWU7XG4gICAgICAgICAgICBjb250ZXh0cy5wdXNoKGNvbnRleHRJdGVtKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHNldEJ5KHZhbHVlcykge1xuICAgICAgICBjb25zdCBjb25jYXRWYWx1ZSA9IGJ1aWxkTmV3VmFsdWVGcm9tQXJyYXkoYXJyYXksIHZhbHVlcywgc3RhcnRJbmRleCkuam9pbignJyk7XG4gICAgICAgIGhvd1RvU2V0KGVsZW1lbnQsIGF0dHJOYW1lLCBjb25jYXRWYWx1ZSk7XG4gICAgfVxuICAgIHNldEJ5KHZhbHVlcyk7XG4gICAgcmV0dXJuIGNvbnRleHRzO1xufVxuZnVuY3Rpb24gYnVpbGROZXdWYWx1ZUZyb21BcnJheShhcnJheSwgdmFsdWVzLCBzdGFydEluZGV4KSB7XG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZSgoYWxsLCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZVZhciA9IGdldFRhZ1ZhckluZGV4KHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlVmFyID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG15SW5kZXggPSBzdGFydEluZGV4Kys7XG4gICAgICAgICAgICBjb25zdCBwdXNoVmFsdWUgPSB2YWx1ZXNbbXlJbmRleF07XG4gICAgICAgICAgICBhbGwucHVzaChwdXNoVmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgfVxuICAgICAgICBhbGwucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwgW10pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBjb250ZXh0LCBwYXJlbnRDb250ZXh0LCBob3dUb1NldCwgLy8gID0gaG93VG9TZXRJbnB1dFZhbHVlXG5zdXBwb3J0LCBpc1NwZWNpYWwsIHZhckluZGV4LCBjb250ZXh0cykge1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKTtcbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IHtcbiAgICAgICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgICAgIGlzQXR0cjogdHJ1ZSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgYXR0ck5hbWUsXG4gICAgICAgIGhvd1RvU2V0LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgd2l0aGluT3duZXJFbGVtZW50OiB0cnVlLFxuICAgICAgICB0YWdKc1ZhcixcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgICAgIHZhbHVlSW5kZXg6IHZhckluZGV4LFxuICAgICAgICBwYXJlbnRDb250ZXh0LFxuICAgIH07XG4gICAgY29udGV4dC5wdXNoKGNvbnRleHRJdGVtKTtcbiAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlID0gcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0O1xuICAgIHByb2Nlc3NEeW5hbWljTmFtZVZhbHVlQXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgY29udGV4dEl0ZW0sIGVsZW1lbnQsIGhvd1RvU2V0LCBzdXBwb3J0LCBpc1NwZWNpYWwsIGNvbnRleHRzKTtcbiAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IHNwZWNpYWxBdHRyaWJ1dGUgfSBmcm9tICcuL3NwZWNpYWxBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlIH0gZnJvbSAnLi9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0NhbGxiYWNrRnVuIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2F0dHJpYnV0ZXMvcHJvY2Vzc0F0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRnVuY3Rpb25BdHRyIH0gZnJvbSAnLi9wcm9jZXNzRnVuY3Rpb25BdHRyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRHluYW1pY05hbWVWYWx1ZUF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGNvbnRleHRJdGVtLCBlbGVtZW50LCBob3dUb1NldCwgc3VwcG9ydCwgaXNTcGVjaWFsLCBfY29udGV4dHMpIHtcbiAgICBjb250ZXh0SXRlbS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICBjb250ZXh0SXRlbS5ob3dUb1NldCA9IGhvd1RvU2V0O1xuICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1RhZ0NhbGxiYWNrRnVuKGNvbnRleHRJdGVtLCB2YWx1ZSwgc3VwcG9ydCwgYXR0ck5hbWUsIGVsZW1lbnQpO1xuICAgIH1cbiAgICBjb250ZXh0SXRlbS5hdHRyTmFtZSA9IGF0dHJOYW1lO1xuICAgIGNvbnRleHRJdGVtLmlzU3BlY2lhbCA9IGlzU3BlY2lhbDtcbiAgICBpZiAodmFsdWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1RhZ0pzQXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgY29udGV4dEl0ZW0sIHN1cHBvcnQsIGVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc05vbkR5bmFtaWNBdHRyKGF0dHJOYW1lLCB2YWx1ZSwgZWxlbWVudCwgaG93VG9TZXQsIGlzU3BlY2lhbCwgY29udGV4dEl0ZW0pO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1RhZ0pzQXR0cmlidXRlKG5hbWUsIHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBlbGVtZW50KSB7XG4gICAgdmFsdWUucHJvY2Vzc0luaXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGVsZW1lbnQsIHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBzZXROb25GdW5jdGlvbklucHV0VmFsdWUpO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gdmFsdWU7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc05vbkR5bmFtaWNBdHRyKGF0dHJOYW1lLCB2YWx1ZSwgZWxlbWVudCwgaG93VG9TZXQsIGlzU3BlY2lhbCwgY29udGV4dCkge1xuICAgIGlmIChpc1NwZWNpYWwpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpYWxBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBpc1NwZWNpYWwpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzRnVuY3Rpb25BdHRyKHZhbHVlLCBjb250ZXh0LCBhdHRyTmFtZSwgZWxlbWVudCwgaG93VG9TZXQpO1xuICAgIH1cbiAgICBob3dUb1NldChlbGVtZW50LCBhdHRyTmFtZSwgdmFsdWUpO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWdKc1ZhcihhdHRyUGFydCkge1xuICAgIGlmIChpc09iamVjdChhdHRyUGFydCkgJiYgJ3RhZ0pzVmFyJyBpbiBhdHRyUGFydClcbiAgICAgICAgcmV0dXJuIGF0dHJQYXJ0LnRhZ0pzVmFyO1xuICAgIHJldHVybiAtMTtcbiAgICAvLyByZXR1cm4gKGF0dHJQYXJ0IGFzIFRhZ1ZhcklkTnVtKT8udGFnSnNWYXIgfHwgLTFcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaG93VG9TZXRJbnB1dFZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGFkZE9uZUNvbnRleHQgfSBmcm9tICcuLi9hZGRPbmVDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbW92ZUNvbnRleHRJbkN5Y2xlLCBzZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uLy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydFdpdGhTdGF0ZSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlKHZhbHVlLCBjb250ZXh0cywgcGFyZW50Q29udGV4dCwgdGFnSnNWYXIsIHZhckluZGV4LCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCwgaXNOYW1lVmFyKSB7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBhZGRPbmVDb250ZXh0KHZhbHVlLCBjb250ZXh0cyB8fCBbXSwgdHJ1ZSwgcGFyZW50Q29udGV4dCk7XG4gICAgY29udGV4dEl0ZW0uZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgY29udGV4dEl0ZW0udmFsdWVJbmRleCA9IHZhckluZGV4O1xuICAgIGNvbnRleHRJdGVtLmlzQXR0ciA9IHRydWU7XG4gICAgY29udGV4dEl0ZW0uaXNOYW1lT25seSA9IGlzTmFtZVZhcjtcbiAgICBjb250ZXh0SXRlbS5zdGF0ZU93bmVyID0gZ2V0U3VwcG9ydFdpdGhTdGF0ZShzdXBwb3J0KTtcbiAgICBjb250ZXh0SXRlbS5zdXBwb3J0T3duZXIgPSBzdXBwb3J0O1xuICAgIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHRJdGVtKTtcbiAgICB0YWdKc1Zhci5wcm9jZXNzSW5pdEF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIC8vIHRhZ0pzVmFyLFxuICAgIGVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgc3VwcG9ydCwgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlKTtcbiAgICByZW1vdmVDb250ZXh0SW5DeWNsZSgpO1xuICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSB0YWdKc1ZhcjtcbiAgICByZXR1cm4gY29udGV4dEl0ZW07XG59XG4iLCJpbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBTdWJqZWN0LCB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi8uLi9pbmRleC5qcyc7XG4vKiogVXNlZCBmb3IgYm9sdHMgbGlrZSBkaXYuc3R5bGUoKCkgPT4ge3tiYWNrZ3JvdW5kQ29sb3I6fX0pICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0Z1bmN0aW9uQXR0cih2YWx1ZSwgcGFyZW50Q29udGV4dCwgLy8gcGFyZW50IGNvbnRleHRcbmF0dHJOYW1lLCBlbGVtZW50LCBob3dUb1NldCkge1xuICAgIGNvbnN0IGlubmVyVmFsdWUgPSB2YWx1ZSgpO1xuICAgIGNvbnN0IHRhZ0pzVmFyT3ZlcnJpZGUgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ2R5bmFtaWMtYXR0cicsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogKF92YWx1ZSwgX2NvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUoKTtcbiAgICAgICAgICAgIHJldHVybiBzdWJDb250ZXh0LnRhZ0pzVmFyLmhhc1ZhbHVlQ2hhbmdlZChuZXdWYWx1ZSwgc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2Vzc0luaXQ6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgZGVzdHJveTogKF9jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSA9PiB7XG4gICAgICAgICAgICBzdWJDb250ZXh0LnRhZ0pzVmFyLmRlc3Ryb3koc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCB2YWx1ZXMpID0+IHtcbiAgICAgICAgICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlKCk7XG4gICAgICAgICAgICAvLyBjb25zdCBvbGRWYWx1ZSA9IHN1YkNvbnRleHQudmFsdWVcbiAgICAgICAgICAgIC8vIGNvbnN0IG5ld1RhZ0pzVmFyID0gdmFsdWVUb1RhZ0pzVmFyKG5ld1ZhbHVlKVxuICAgICAgICAgICAgc3ViQ29udGV4dC50YWdKc1Zhci5wcm9jZXNzVXBkYXRlKG5ld1ZhbHVlLCAvLyBuZXdUYWdKc1ZhciBhcyBhbnksXG4gICAgICAgICAgICBzdWJDb250ZXh0LCBvd25lclN1cHBvcnQsIHZhbHVlcyk7XG4gICAgICAgICAgICBzdWJDb250ZXh0LnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSB7XG4gICAgICAgIHVwZGF0ZUNvdW50OiAwLFxuICAgICAgICBpc0F0dHI6IHRydWUsXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIHBhcmVudENvbnRleHQsXG4gICAgICAgIHZhbHVlOiBpbm5lclZhbHVlLCAvLyB1c2VkIGZvciBuZXcgdmFsdWUgY29tcGFyaW5nXG4gICAgICAgIHRhZ0pzVmFyOiB2YWx1ZVRvVGFnSnNWYXIoaW5uZXJWYWx1ZSksXG4gICAgICAgIC8vIFRPRE86IE5vdCBuZWVkZWRcbiAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgfTtcbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IHtcbiAgICAgICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgICAgIGlzQXR0cjogdHJ1ZSxcbiAgICAgICAgY29udGV4dHM6IFtzdWJDb250ZXh0XSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgcGFyZW50Q29udGV4dCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHRhZ0pzVmFyOiB0YWdKc1Zhck92ZXJyaWRlLFxuICAgICAgICAvLyBUT0RPOiBOb3QgbmVlZGVkXG4gICAgICAgIHZhbHVlSW5kZXg6IC0xLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgIH07XG4gICAgc3ViQ29udGV4dC50YWdKc1Zhci5wcm9jZXNzSW5pdEF0dHJpYnV0ZShhdHRyTmFtZSwgaW5uZXJWYWx1ZSwgZWxlbWVudCwgc3ViQ29udGV4dC50YWdKc1Zhciwgc3ViQ29udGV4dCwge30sIGhvd1RvU2V0KTtcbiAgICByZXR1cm4gY29udGV4dEl0ZW07XG59XG4iLCJpbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tIFwiLi92YWx1ZVRvVGFnSnNWYXIuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlVXBkYXRlKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBlbGVtZW50LCBuYW1lLCBob3dUb1NldCkge1xuICAgIGNvbnN0IG9sZFRhZyA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyOyAvLyBjb250ZXh0SXRlbS50YWdKc1ZhciBhcyBUYWdKc1ZhclxuICAgIGNvbnN0IHRhZ1ZhbHVlID0gdmFsdWU7XG4gICAgY29uc3QgY2hlY2tSZXN1bHQgPSBvbGRUYWcuaGFzVmFsdWVDaGFuZ2VkKHRhZ1ZhbHVlLCBjb250ZXh0SXRlbSwgLy8gdG9kbzogd2VpcmQgdHlwaW5nIHNob3VsZCBqdXN0IGJlIENvbnRleHRJdGVtXG4gICAgb3duZXJTdXBwb3J0KTtcbiAgICBpZiAoY2hlY2tSZXN1bHQgPiAwKSB7XG4gICAgICAgIG9sZFRhZy5kZXN0cm95KGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgY29uc3QgbmV3VGFnVmFyID0gdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKTtcbiAgICAgICAgbmV3VGFnVmFyLmlzQXR0ciA9IHRydWU7XG4gICAgICAgIG5ld1RhZ1Zhci5wcm9jZXNzSW5pdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgZWxlbWVudCwgbmV3VGFnVmFyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBob3dUb1NldCk7XG4gICAgICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gbmV3VGFnVmFyO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNTcGVjaWFsQXR0ciB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2lzU3BlY2lhbEF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc05vbkR5bmFtaWNBdHRyIH0gZnJvbSBcIi4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcHJvY2Vzc05hbWVWYWx1ZUF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgY2hlY2tTaW1wbGVWYWx1ZUNoYW5nZSwgZGVsZXRlU2ltcGxlQXR0cmlidXRlIH0gZnJvbSBcIi4vZ2V0U2ltcGxlVGFnVmFyLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzQXR0cmlidXRlVXBkYXRlIH0gZnJvbSBcIi4vcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZS5mdW5jdGlvbi5qc1wiO1xuLyoqIGluaXQgcnVubmVyICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1NpbXBsZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgLy8gVGVtcGxhdGVWYWx1ZSB8IFN0cmluZ1RhZyB8IFN1YnNjcmliZVZhbHVlIHwgU2lnbmFsT2JqZWN0LFxuZWxlbWVudCwgdGFnSnNWYXIsIGNvbnRleHRJdGVtLCBfb3duZXJTdXBwb3J0LCBob3dUb1NldCkge1xuICAgIC8vIGZ1bmN0aW9uIHN3YXBwaW5nXG4gICAgdGFnSnNWYXIuZGVzdHJveSA9IGRlbGV0ZVNpbXBsZUF0dHJpYnV0ZTtcbiAgICB0YWdKc1Zhci5oYXNWYWx1ZUNoYW5nZWQgPSBjaGVja1NpbXBsZVZhbHVlQ2hhbmdlO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSAodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGVsZW1lbnQsIG5hbWUsIGhvd1RvU2V0KTtcbiAgICB9O1xuICAgIGNvbnN0IGlzU3BlY2lhbCA9IGlzU3BlY2lhbEF0dHIobmFtZSk7XG4gICAgcHJvY2Vzc05vbkR5bmFtaWNBdHRyKG5hbWUsIHZhbHVlLCBlbGVtZW50LCBob3dUb1NldCwgaXNTcGVjaWFsLCBjb250ZXh0SXRlbSk7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSB0YWdKc1Zhcjtcbn1cbiIsImltcG9ydCB7IGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZSB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY2FzdFRleHRWYWx1ZSB9IGZyb20gJy4uL2Nhc3RUZXh0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcGFpbnRCZWZvcmVUZXh0LCBwYWludENvbW1hbmRzLCBhZGRQYWludFJlbW92ZXIgfSBmcm9tIFwiLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlUmVndWxhclZhbHVlIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvcHJvY2Vzc1JlZ3VsYXJWYWx1ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1NpbXBsZUF0dHJpYnV0ZSB9IGZyb20gXCIuL3Byb2Nlc3NTaW1wbGVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVNpbXBsZUF0dHJpYnV0ZShjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBjb250ZXh0SXRlbS5lbGVtZW50O1xuICAgIGNvbnN0IG5hbWUgPSBjb250ZXh0SXRlbS5hdHRyTmFtZTtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaW1wbGVUYWdWYXIodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdKc1R5cGU6ICdzaW1wbGUnLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IHByb2Nlc3NTaW1wbGVBdHRyaWJ1dGUsXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzU2ltcGxlVmFsdWVJbml0LFxuICAgICAgICBkZXN0cm95OiBkZWxldGVTaW1wbGVWYWx1ZSxcbiAgICAgICAgLy8gVE9ETzogZ2V0IHRvIHVzaW5nIG9ubHkgY2hlY2tTaW1wbGVWYWx1ZUNoYW5nZVxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrVXBkYXRlRGVsZXRlU2ltcGxlVmFsdWVDaGFuZ2UsIC8vIEZvciBhdHRyaWJ1dGVzLCB0aGlzIGdldHMgc3dpdGNoZWQgdG8gY2hlY2tTaW1wbGVWYWx1ZUNoYW5nZVxuICAgICAgICBwcm9jZXNzVXBkYXRlOiBwcm9jZXNzU3RyaW5nVXBkYXRlLCAvLyBGb3IgYXR0cmlidXRlcywgdGhpcyBnZXRzIHN3aXRjaGVkIHRvIHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGVcbiAgICAgICAgLy8gcHJvY2Vzc1VwZGF0ZTogdGFnVmFsdWVVcGRhdGVIYW5kbGVyLCAvLyBGb3IgYXR0cmlidXRlcywgdGhpcyBnZXRzIHN3aXRjaGVkIHRvIHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGVcbiAgICB9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc1N0cmluZ1VwZGF0ZShuZXdWYWx1ZSwgLy8gbmV3VmFsdWVcbmNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBpZiAobmV3VmFsdWUgPT09IGNvbnRleHRJdGVtLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTaW1wbGVWYWx1ZUluaXQodmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbmNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGluc2VydEJlZm9yZSwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCBjYXN0ZWRWYWx1ZSA9IGNhc3RUZXh0VmFsdWUodmFsdWUpO1xuICAgIGluc2VydEJlZm9yZSA9IGNvbnRleHRJdGVtLnBsYWNlaG9sZGVyO1xuICAgIC8vIGFsd2F5cyBpbnNlcnRCZWZvcmUgZm9yIGNvbnRlbnRcbiAgICBjb25zdCBwYWludCA9IGNvbnRleHRJdGVtLnBhaW50ID0gW3BhaW50QmVmb3JlVGV4dCwgW2luc2VydEJlZm9yZSwgY2FzdGVkVmFsdWUsIGZ1bmN0aW9uIGFmdGVyU2ltcGxlVmFsdWUoeCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRJdGVtLnNpbXBsZVZhbHVlRWxtID0geDtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29udGV4dEl0ZW0ucGFpbnQ7XG4gICAgICAgICAgICB9LCAncHJvY2Vzc1NpbXBsZVZhbHVlSW5pdCddXTtcbiAgICBwYWludENvbW1hbmRzLnB1c2gocGFpbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVNpbXBsZVZhbHVlKGNvbnRleHQpIHtcbiAgICBpZiAoIWNvbnRleHQuc2ltcGxlVmFsdWVFbG0gJiYgY29udGV4dC5wYWludCkge1xuICAgICAgICBjb250ZXh0LnBhaW50WzBdID0gYmxhbmtIYW5kbGVyO1xuICAgICAgICByZXR1cm47IC8vIEknbSBiZWluZyBkZWxldGVkIGJlZm9yZSBteSBmaXJzdCByZW5kZXIgZXZlbiBvY2N1cnJlZFxuICAgIH1cbiAgICBjb25zdCBlbG0gPSBjb250ZXh0LnNpbXBsZVZhbHVlRWxtO1xuICAgIGRlbGV0ZSBjb250ZXh0LnNpbXBsZVZhbHVlRWxtO1xuICAgIGFkZFBhaW50UmVtb3ZlcihlbG0sICdkZWxldGVTaW1wbGVWYWx1ZScpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU2ltcGxlVmFsdWVDaGFuZ2UobmV3VmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgaXNCYWRWYWx1ZSA9IG5ld1ZhbHVlID09PSBudWxsIHx8IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNSZWd1bGFyVXBkYXRlID0gaXNCYWRWYWx1ZSB8fCBuZXdWYWx1ZSA9PT0gY29udGV4dEl0ZW0udmFsdWU7IC8vICEodHlwZW9mKG5ld1ZhbHVlKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpXG4gICAgaWYgKGlzUmVndWxhclVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gMDsgLy8gbm8gbmVlZCB0byBkZXN0cm95LCBqdXN0IHVwZGF0ZSBkaXNwbGF5XG4gICAgfVxuICAgIHJldHVybiA2OyAvLyAnY2hhbmdlZC1zaW1wbGUtdmFsdWUnXG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tVcGRhdGVEZWxldGVTaW1wbGVWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBpc0JhZFZhbHVlID0gbmV3VmFsdWUgPT09IG51bGwgfHwgbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICBjb25zdCBpc1JlZ3VsYXJVcGRhdGUgPSBpc0JhZFZhbHVlIHx8ICEodHlwZW9mIChuZXdWYWx1ZSkgPT09IEJhc2ljVHlwZXMub2JqZWN0KTtcbiAgICBpZiAoaXNSZWd1bGFyVXBkYXRlKSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCBjYXVzZSBhbGwgb3RoZXIgdmFsdWVzIHRvIHJlbmRlclxuICAgICAgICBwcm9jZXNzVXBkYXRlUmVndWxhclZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSk7XG4gICAgICAgIHJldHVybiAwOyAvLyBubyBuZWVkIHRvIGRlc3Ryb3ksIGp1c3QgdXBkYXRlIGRpc3BsYXlcbiAgICB9XG4gICAgZGVsZXRlU2ltcGxlVmFsdWUoY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiA2OyAvLyAnY2hhbmdlZC1zaW1wbGUtdmFsdWUnXG59XG4iLCJpbXBvcnQgeyBjYXN0VGV4dFZhbHVlIH0gZnJvbSAnLi4vLi4vY2FzdFRleHRWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwYWludEJlZm9yZVRleHQsIHBhaW50Q29tbWFuZHMsIHBhaW50Q29udGVudCwgc2V0Q29udGVudCB9IGZyb20gJy4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRTaW1wbGVUYWdWYXIgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvZ2V0U2ltcGxlVGFnVmFyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVXBkYXRlUmVndWxhclZhbHVlKHZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IGNhc3RlZFZhbHVlID0gY2FzdFRleHRWYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKGNvbnRleHRJdGVtLnBhaW50KSB7XG4gICAgICAgIC8vIGl0cyBhbHJlYWR5IHBhaW50aW5nLCBqdXN0IHByb3ZpZGUgbmV3IHRleHQgcGFpbnRbZnVuY3Rpb24sIFtlbGVtZW50LCB0ZXh0XV1cbiAgICAgICAgY29udGV4dEl0ZW0ucGFpbnRbMV1bMV0gPSBjYXN0ZWRWYWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvbGRDbG9uZSA9IGNvbnRleHRJdGVtLnNpbXBsZVZhbHVlRWxtOyAvLyBwbGFjZWhvbGRlclxuICAgIHBhaW50Q29udGVudC5wdXNoKFtzZXRDb250ZW50LCBbY2FzdGVkVmFsdWUsIG9sZENsb25lXV0pO1xufVxuLyoqIFVzZWQgZHVyaW5nIHVwZGF0ZXMgdGhhdCB3ZXJlIGFub3RoZXIgdmFsdWUvdGFnIGZpcnN0IGJ1dCBub3cgc2ltcGxlIHN0cmluZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NOb3dSZWd1bGFyVmFsdWUodmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICBjb250ZXh0SXRlbS5vbGRUYWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gZ2V0U2ltcGxlVGFnVmFyKHZhbHVlKTtcbiAgICBjb25zdCBiZWZvcmUgPSBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcjtcbiAgICBjb25zdCBjYXN0ZWRWYWx1ZSA9IGNhc3RUZXh0VmFsdWUodmFsdWUpO1xuICAgIGNvbnN0IHBhaW50ID0gY29udGV4dEl0ZW0ucGFpbnQgPSBbcGFpbnRCZWZvcmVUZXh0LCBbYmVmb3JlLCBjYXN0ZWRWYWx1ZSwgZnVuY3Rpb24gY2xlYW5SZWd1bGFyVmFsdWUoeCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRJdGVtLnNpbXBsZVZhbHVlRWxtID0geDtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29udGV4dEl0ZW0ucGFpbnQ7XG4gICAgICAgICAgICB9LCAncHJvY2Vzc05vd1JlZ3VsYXJWYWx1ZSddXTtcbiAgICBwYWludENvbW1hbmRzLnB1c2gocGFpbnQpO1xufVxuIiwiaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgZGVzdHJveUFycmF5Q29udGV4dCB9IGZyb20gJy4vZGVzdHJveUFycmF5Q29udGV4dC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tBcnJheVZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBzdWJqZWN0KSB7XG4gICAgLy8gbm8gbG9uZ2VyIGFuIGFycmF5P1xuICAgIGlmICghaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgICAgZGVzdHJveUFycmF5Q29udGV4dChzdWJqZWN0KTtcbiAgICAgICAgcmV0dXJuIDk7IC8vICdhcnJheSdcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuLi90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY29tcGFyZUFycmF5SXRlbXMgfSBmcm9tICcuL2NvbXBhcmVBcnJheUl0ZW1zLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSB9IGZyb20gJy4uL2NyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RhZ0FycmF5KGNvbnRleHRJdGVtLCB2YWx1ZSwgLy8gYXJyeSBvZiBUYWcgY2xhc3Nlc1xub3duZXJTdXBwb3J0LCBhcHBlbmRUbykge1xuICAgIGNvbnN0IG5vTGFzdCA9IGNvbnRleHRJdGVtLmxhc3RBcnJheSA9PT0gdW5kZWZpbmVkO1xuICAgIGlmIChub0xhc3QpIHtcbiAgICAgICAgY29udGV4dEl0ZW0ubGFzdEFycmF5ID0gW107XG4gICAgfVxuICAgIGNvbnN0IGxhc3RBcnJheSA9IGNvbnRleHRJdGVtLmxhc3RBcnJheTtcbiAgICBsZXQgcnVudGltZUluc2VydEJlZm9yZSA9IGNvbnRleHRJdGVtLnBsYWNlaG9sZGVyO1xuICAgIGxldCByZW1vdmVkID0gMDtcbiAgICAvKiog8J+Xke+4jyByZW1vdmUgcHJldmlvdXMgaXRlbXMgZmlyc3QgKi9cbiAgICBjb25zdCBmaWx0ZXJlZExhc3QgPSBbXTtcbiAgICAvLyBpZiBub3QgZmlyc3QgdGltZSwgdGhlbiBjaGVjayBmb3IgZGVsZXRlc1xuICAgIGlmICghbm9MYXN0KSB7XG4gICAgICAgIC8vIG9uIGVhY2ggbG9vcCBjaGVjayB0aGUgbmV3IGxlbmd0aFxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGFzdEFycmF5Lmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGxhc3RBcnJheVtpbmRleF07XG4gICAgICAgICAgICAvLyDwn5GB77iPIENPTVBBUkUgJiBSRU1PVkVcbiAgICAgICAgICAgIGNvbnN0IG5ld1JlbW92ZWQgPSBjb21wYXJlQXJyYXlJdGVtcyh2YWx1ZSwgaW5kZXgsIGxhc3RBcnJheSwgcmVtb3ZlZCk7XG4gICAgICAgICAgICBpZiAobmV3UmVtb3ZlZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkTGFzdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG8gdGhlIHNhbWUgbnVtYmVyIGFnYWluIGJlY2F1c2UgaXQgd2FzIGEgbWlkIGRlbGV0ZVxuICAgICAgICAgICAgaWYgKG5ld1JlbW92ZWQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZWQgPSByZW1vdmVkICsgbmV3UmVtb3ZlZDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0SXRlbS5sYXN0QXJyYXkgPSBmaWx0ZXJlZExhc3Q7XG4gICAgfVxuICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IG5ld1N1YmplY3QgPSByZXZpZXdBcnJheUl0ZW0odmFsdWUsIGluZGV4LCBjb250ZXh0SXRlbS5sYXN0QXJyYXksIG93bmVyU3VwcG9ydCwgcnVudGltZUluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgICAgICBydW50aW1lSW5zZXJ0QmVmb3JlID0gbmV3U3ViamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG59XG5mdW5jdGlvbiByZXZpZXdBcnJheUl0ZW0oYXJyYXksIGluZGV4LCBsYXN0QXJyYXksIG93bmVyU3VwcG9ydCwgcnVudGltZUluc2VydEJlZm9yZSwgLy8gdXNlZCBkdXJpbmcgdXBkYXRlc1xuYXBwZW5kVG8pIHtcbiAgICBjb25zdCBpdGVtID0gYXJyYXlbaW5kZXhdO1xuICAgIGNvbnN0IHByZXZpb3VzID0gbGFzdEFycmF5W2luZGV4XTtcbiAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIHJldmlld1ByZXZpb3VzQXJyYXlJdGVtKGl0ZW0sIHByZXZpb3VzLCBsYXN0QXJyYXksIG93bmVyU3VwcG9ydCwgaW5kZXgsIHJ1bnRpbWVJbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0oaXRlbSwgb3duZXJTdXBwb3J0LCBsYXN0QXJyYXksIHJ1bnRpbWVJbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbiAgICAvLyBBZGRlZCB0byBwcmV2aW91cyBhcnJheVxuICAgIGxhc3RBcnJheS5wdXNoKGNvbnRleHRJdGVtKTtcbiAgICByZXR1cm4gY29udGV4dEl0ZW07XG59XG5mdW5jdGlvbiByZXZpZXdQcmV2aW91c0FycmF5SXRlbSh2YWx1ZSwgaXRlbVN1YmplY3QsIGxhc3RBcnJheSwgb3duZXJTdXBwb3J0LCBpbmRleCwgcnVudGltZUluc2VydEJlZm9yZSwgLy8gdXNlZCBkdXJpbmcgdXBkYXRlc1xuYXBwZW5kVG8pIHtcbiAgICBjb25zdCBjb3VsZEJlU2FtZSA9IGxhc3RBcnJheS5sZW5ndGggPiBpbmRleDtcbiAgICBpZiAoY291bGRCZVNhbWUpIHtcbiAgICAgICAgdGFnVmFsdWVVcGRhdGVIYW5kbGVyKHZhbHVlLCBpdGVtU3ViamVjdCwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIGl0ZW1TdWJqZWN0O1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgb3duZXJTdXBwb3J0LCBsYXN0QXJyYXksIHJ1bnRpbWVJbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbiAgICAvLyBBZGRlZCB0byBwcmV2aW91cyBhcnJheVxuICAgIGxhc3RBcnJheS5wdXNoKGNvbnRleHRJdGVtKTtcbiAgICByZXR1cm4gY29udGV4dEl0ZW07XG59XG4iLCJpbXBvcnQgeyBjaGVja0FycmF5VmFsdWVDaGFuZ2UgfSBmcm9tICcuLi90YWcvY2hlY2tEZXN0cm95UHJldmlvdXMuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0FycmF5IH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9hcnJheXMvcHJvY2Vzc1RhZ0FycmF5LmpzJztcbmltcG9ydCB7IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlciB9IGZyb20gJy4uL3RhZy91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lBcnJheUNvbnRleHQgfSBmcm9tICcuLi90YWcvZGVzdHJveUFycmF5Q29udGV4dC5mdW5jdGlvbi5qcyc7XG4vKiogaG93IHRvIHByb2Nlc3MgYW4gYXJyYXkgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcnJheVRhZ1Zhcih2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ2FycmF5JyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzQXJyYXlJbml0LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiBwcm9jZXNzQXJyYXlVcGRhdGVzLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrQXJyYXlWYWx1ZUNoYW5nZSxcbiAgICAgICAgZGVzdHJveTogZGVzdHJveUFycmF5Q29udGV4dCxcbiAgICB9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc0FycmF5VXBkYXRlcyhuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgY29uc3QgdGFnVXBkYXRlUmVzcG9uc2UgPSB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIGlmICh0YWdVcGRhdGVSZXNwb25zZSA9PT0gMCkge1xuICAgICAgICBwcm9jZXNzVGFnQXJyYXkoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NBcnJheUluaXQodmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbmNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIF9pbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29uc3Qgc3ViVmFsdWUgPSB2YWx1ZTtcbiAgICBwcm9jZXNzVGFnQXJyYXkoY29udGV4dEl0ZW0sIHN1YlZhbHVlLCBvd25lclN1cHBvcnQsIGFwcGVuZFRvKTtcbn1cbiIsImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGdldFNpbXBsZVRhZ1ZhciB9IGZyb20gJy4vZ2V0U2ltcGxlVGFnVmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldEFycmF5VGFnVmFyIH0gZnJvbSAnLi9nZXRBcnJheVRhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZVRvVGFnSnNWYXIodmFsdWUpIHtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSB2YWx1ZT8udGFnSnNUeXBlO1xuICAgIGlmICh0YWdKc1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0QmFzaWNUYWdWYXIodmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0QmFzaWNUYWdWYXIodmFsdWUpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGdldEFycmF5VGFnVmFyKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFNpbXBsZVRhZ1Zhcih2YWx1ZSk7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBwYWludEFwcGVuZCwgcGFpbnRBcHBlbmRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRvbVByb2Nlc3NDb250ZXh0SXRlbSB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvZG9tUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHZhbHVlVG9UYWdKc1ZhciB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy92YWx1ZVRvVGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uLy4uL3N1YmplY3QvU3ViamVjdC5jbGFzcy5qcyc7XG4vKiogVXNlZCBieSBhcnJheXMgYW5kIHN1YmNvbnRleHQgY3JlYXRvcnMgbGlrZSBzdWJzY3JpYmUuIE11c3QgcHJvdmlkZSBpbnNlcnRCZWZvcmUgT1IgYXBwZW5kVG8gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0odmFsdWUsIG93bmVyU3VwcG9ydCwgY29udGV4dHMsIGluc2VydEJlZm9yZSwgLy8gdXNlZCBkdXJpbmcgdXBkYXRlc1xuYXBwZW5kVG8pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZW1wdHkpO1xuICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHRhZ0pzVmFyOiB2YWx1ZVRvVGFnSnNWYXIodmFsdWUpLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IGZhbHNlLFxuICAgICAgICBwbGFjZWhvbGRlcjogZWxlbWVudCxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgICAgIC8vIFRPRE86IFRoaXMgd2lsbCBuZWVkIHRvIGJlIHBhc3NlZCBpblxuICAgICAgICBwYXJlbnRDb250ZXh0OiBvd25lclN1cHBvcnQuY29udGV4dCxcbiAgICAgICAgdmFsdWVJbmRleDogY29udGV4dHMubGVuZ3RoLFxuICAgIH07XG4gICAgaWYgKCFhcHBlbmRUbykge1xuICAgICAgICBjb250ZXh0SXRlbS5wbGFjZWhvbGRlciA9IGluc2VydEJlZm9yZTtcbiAgICB9XG4gICAgZG9tUHJvY2Vzc0NvbnRleHRJdGVtKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtLCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGVsZW1lbnRdXSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSB9IGZyb20gJy4vY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBvbkZpcnN0U3ViQ29udGV4dCh2YWx1ZSwgc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0LCAvLyBvd25lclN1cHBvcnQgP1xuaW5zZXJ0QmVmb3JlKSB7XG4gICAgc3ViQ29udGV4dC5oYXNFbWl0dGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gc3ViQ29udGV4dC5jb250ZXh0SXRlbSA9IGNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgb3duZXJTdXBwb3J0LCBbXSwgaW5zZXJ0QmVmb3JlKTtcbn1cbiIsImltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZHMgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZ3VhcmFudGVlSW5zZXJ0QmVmb3JlKGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBsZXQgYXBwZW5kTWFya2VyO1xuICAgIC8vIGRvIHdlIG5lZWQgdG8gYXBwZW5kIG5vdyBidXQgcHJvY2VzcyBzdWJzY3JpcHRpb24gbGF0ZXI/XG4gICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgIGFwcGVuZE1hcmtlciA9IGluc2VydEJlZm9yZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVtcHR5KTtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGluc2VydEJlZm9yZV1dKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBwZW5kTWFya2VyLFxuICAgICAgICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgc2V0dXBTdWJzY3JpYmUgfSBmcm9tICcuL3NldHVwU3Vic2NyaWJlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU3Vic2NyaWJlV2l0aCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSBzZXR1cFN1YnNjcmliZSh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG4gICAgaWYgKCFzdWJDb250ZXh0Lmhhc0VtaXR0ZWQpIHtcbiAgICAgICAgZW1pdFN1YkNvbnRleHQodmFsdWUsIHN1YkNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gc3ViQ29udGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbWl0U3ViQ29udGV4dCh2YWx1ZSwgc3ViQ29udGV4dCkge1xuICAgIGNvbnN0IG9ic2VydmFibGVzID0gdmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGVzWzBdO1xuICAgIGlmICghc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIGlmICgnd2l0aERlZmF1bHQnIGluIHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJDb250ZXh0LnN1YlZhbHVlSGFuZGxlcih2YWx1ZS53aXRoRGVmYXVsdCwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCd2YWx1ZScgaW4gb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgc3ViQ29udGV4dC5zdWJWYWx1ZUhhbmRsZXIob2JzZXJ2YWJsZS52YWx1ZSwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuOyAvLyBub3RoaW5nIHRvIGVtaXRcbiAgICB9XG4gICAgY29uc3QgZW1pdFZhbHVlID0gc3ViQ29udGV4dC5sYXN0VmFsdWVzWzBdLnZhbHVlO1xuICAgIHN1YkNvbnRleHQuc3ViVmFsdWVIYW5kbGVyKGVtaXRWYWx1ZSwgMCk7XG59XG4iLCJpbXBvcnQgeyBjaGVja1N0aWxsU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9jaGVja1N0aWxsU3Vic2NyaXB0aW9uLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGVtaXRTdWJDb250ZXh0IH0gZnJvbSAnLi9wcm9jZXNzU3Vic2NyaWJlV2l0aC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHJlc3VsdE51bSA9IGNoZWNrU3RpbGxTdWJzY3JpcHRpb24obmV3VmFsdWUsIC8vIHN1YlZhbHVlLFxuICAgIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIGlmIChjb250ZXh0SXRlbS5oYXNFbWl0dGVkICE9PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IE9ic2VydmFibGVzID0gY29udGV4dEl0ZW0udmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgICAgIGlmICghT2JzZXJ2YWJsZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBPYnNlcnZhYmxlID0gT2JzZXJ2YWJsZXNbMF07XG4gICAgICAgIC8vIGNvbnN0IHN1YlZhbHVlID0gT2JzZXJ2YWJsZS52YWx1ZVxuICAgICAgICBpZiAoISgndmFsdWUnIGluIE9ic2VydmFibGUpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIGl0cyBuZXZlciBlbWl0dGVkXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdE51bSA9PT0gMCAmJiBuZXdWYWx1ZS5jYWxsYmFjaykge1xuICAgICAgICBjb25zdCBzdWJDb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICAgICAgZW1pdFN1YkNvbnRleHQobmV3VmFsdWUsIHN1YkNvbnRleHQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHBhaW50IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uLy4uL3N0YXRlL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlIH0gZnJvbSAnLi9mb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVsZXRlU3ViQ29udGV4dCB9IGZyb20gJy4vZGVsZXRlQ29udGV4dFN1YkNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgb25GaXJzdFN1YkNvbnRleHQgfSBmcm9tICcuL29uRmlyc3RTdWJDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGd1YXJhbnRlZUluc2VydEJlZm9yZSB9IGZyb20gJy4uL2d1YXJhbnRlZUluc2VydEJlZm9yZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NVcGRhdGVTdWJzY3JpYmUgfSBmcm9tICcuL3Byb2Nlc3NVcGRhdGVTdWJzY3JpYmUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN1YnNjcmliZSh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgaW5zZXJ0QmVmb3JlT3JpZ2luYWwsIC8vIG9wdGlvbmFsIGJ1dCB3aWxsIGFsd2F5cyBiZSBtYWRlXG5hcHBlbmRUbykge1xuICAgIGNvbnN0IG9ic2VydmFibGVzID0gdmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgY29uc3QgeyBhcHBlbmRNYXJrZXIsIGluc2VydEJlZm9yZSB9ID0gZ3VhcmFudGVlSW5zZXJ0QmVmb3JlKGFwcGVuZFRvLCBpbnNlcnRCZWZvcmVPcmlnaW5hbCk7XG4gICAgbGV0IG9uT3V0cHV0ID0gZnVuY3Rpb24gb25TdWJWYWx1ZSh2YWx1ZSwgc3luY1J1biwgc3ViQ29udGV4dCkge1xuICAgICAgICBvbkZpcnN0U3ViQ29udGV4dCh2YWx1ZSwgc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUpO1xuICAgICAgICBjaGVja1RvUGFpbnQoc3luY1J1bik7XG4gICAgICAgIC8vIE1VVEFUSU9OOiBmcm9tIG5vdyBvbiBqdXN0IHJ1biB1cGRhdGVcbiAgICAgICAgb25PdXRwdXQgPSBzdWJDb250ZXh0LnRhZ0pzVmFyLm9uT3V0cHV0ID0gZnVuY3Rpb24gc3Vic2NyaXB0aW9uVXBkYXRlKHVwZGF0ZVZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBhQ29udGV4dCA9IHN1YkNvbnRleHQuY29udGV4dEl0ZW07XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUoYUNvbnRleHQsIHVwZGF0ZVZhbHVlLCBvd25lclN1cHBvcnQpO1xuICAgICAgICAgICAgYUNvbnRleHQudGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSh1cGRhdGVWYWx1ZSwgYUNvbnRleHQsIG93bmVyU3VwcG9ydCwgW3VwZGF0ZVZhbHVlXSk7XG4gICAgICAgICAgICAvLyBwcm9jZXNzVXBkYXRlQ29udGV4dChvd25lclN1cHBvcnQpXG4gICAgICAgICAgICBhQ29udGV4dC52YWx1ZSA9IHVwZGF0ZVZhbHVlO1xuICAgICAgICAgICAgY2hlY2tUb1BhaW50KHN5bmNSdW4pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IHNldHVwU3Vic2NyaWJlQ2FsbGJhY2tQcm9jZXNzb3Iob2JzZXJ2YWJsZXMsIG93bmVyU3VwcG9ydCwgKHZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KSA9PiBvbk91dHB1dCh2YWx1ZSwgc3luY1J1biwgc3ViQ29udGV4dCksIHZhbHVlLCBjb250ZXh0SXRlbSk7XG4gICAgc3ViQ29udGV4dC5hcHBlbmRNYXJrZXIgPSBhcHBlbmRNYXJrZXI7XG4gICAgY29udGV4dEl0ZW0uc3ViQ29udGV4dCA9IHN1YkNvbnRleHQ7XG4gICAgdmFsdWUucHJvY2Vzc1VwZGF0ZSA9IHByb2Nlc3NVcGRhdGVTdWJzY3JpYmU7XG4gICAgdmFsdWUub25PdXRwdXQgPSBvbk91dHB1dDtcbiAgICByZXR1cm4gc3ViQ29udGV4dDtcbn1cbi8qKiBBZnRlciBjYWxsaW5nIHRoaXMgZnVuY3Rpb24geW91IG5lZWQgdG8gc2V0IGBjb250ZXh0SXRlbS5zdWJDb250ZXh0ID0gc3ViQ29udGV4dGAgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN1YnNjcmliZUNhbGxiYWNrUHJvY2Vzc29yKG9ic2VydmFibGVzLCBvd25lclN1cHBvcnQsIC8vIG93bmVyU3VwcG9ydCA/XG5vbk91dHB1dCwgdGFnSnNWYXIsIGNvbnRleHRJdGVtKSB7XG4gICAgLy8gY29uc3QgY29tcG9uZW50ID0gZ2V0U3VwcG9ydFdpdGhTdGF0ZShvd25lclN1cHBvcnQpXG4gICAgLy8gb25WYWx1ZSBtdXRhdGVzIHNvIGZ1bmN0aW9uIGJlbG93IGNhbGxzIG9yaWdpbmFsIGFuZCBtdXRhdGlvblxuICAgIGZ1bmN0aW9uIHN1YlZhbHVlSGFuZGxlcih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgc3ViQ29udGV4dC5sYXN0VmFsdWVzW2luZGV4XSA9IHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdGFnSnNWYXI6IHZhbHVlVG9UYWdKc1Zhcih2YWx1ZSksXG4gICAgICAgICAgICBvbGRUYWdKc1Zhcjogc3ViQ29udGV4dC5sYXN0VmFsdWVzW2luZGV4XT8udGFnSnNWYXJcbiAgICAgICAgfTtcbiAgICAgICAgdmFsdWVzSGFuZGxlcihzdWJDb250ZXh0Lmxhc3RWYWx1ZXMsIGluZGV4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsdWVzSGFuZGxlcihuZXdWYWx1ZXMsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG5ld2VzdFBhcmVudFRhZ0pzVmFyID0gc3ViQ29udGV4dC50YWdKc1ZhcjtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBuZXdlc3RQYXJlbnRUYWdKc1Zhcj8uY2FsbGJhY2s7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VWYWx1ZSA9IG5ld2VzdFBhcmVudFRhZ0pzVmFyLmNhbGxiYWNrKC4uLm5ld1ZhbHVlcy5tYXAoeCA9PiB4LnZhbHVlKSk7XG4gICAgICAgICAgICBvbk91dHB1dChyZXNwb25zZVZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KTtcbiAgICAgICAgICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb25PdXRwdXQobmV3VmFsdWVzW2luZGV4XS52YWx1ZSwgc3luY1J1biwgc3ViQ29udGV4dCk7XG4gICAgfVxuICAgIGxldCBzeW5jUnVuID0gdHJ1ZTtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0ge1xuICAgICAgICBsYXN0VmFsdWVzOiBbXSxcbiAgICAgICAgc3ViVmFsdWVIYW5kbGVyLFxuICAgICAgICB2YWx1ZXNIYW5kbGVyLFxuICAgICAgICB0YWdKc1ZhcixcbiAgICAgICAgc3Vic2NyaXB0aW9uczogW10sXG4gICAgfTtcbiAgICAvLyBISU5UOiBNdXN0IHN1YnNjcmliZSBBRlRFUiBpbml0aWFsIHZhcmlhYmxlIGNyZWF0ZWQgYWJvdmUgaW5jYXNlIHN1YnNjcmliaW5nIGNhdXNlcyBpbW1lZGlhdGUgcnVuXG4gICAgb2JzZXJ2YWJsZXMuZm9yRWFjaCgob2JzZXJ2YWJsZSwgaW5kZXgpID0+IHtcbiAgICAgICAgc3luY1J1biA9IHRydWU7XG4gICAgICAgIHN1YkNvbnRleHQuc3Vic2NyaXB0aW9ucy5wdXNoKG9ic2VydmFibGUuc3Vic2NyaWJlKHZhbHVlID0+IHN1YlZhbHVlSGFuZGxlcih2YWx1ZSwgaW5kZXgpKSk7XG4gICAgICAgIHN5bmNSdW4gPSBmYWxzZTtcbiAgICB9KTtcbiAgICB0YWdKc1Zhci5vbk91dHB1dCA9IG9uT3V0cHV0O1xuICAgIHJldHVybiBzdWJDb250ZXh0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc3Vic2NyaWJlQ29udGV4dChjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuOyAvLyBUT0RPOiB3b25kZXIgd2h5IHRoaXMgaGFwcGVucywgbWF5YmUgc3Vic2NyaXB0aW9uIG5ldmVyIGVtaXRzP1xuICAgIH1cbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnM7XG4gICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gICAgZGVsZXRlIGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQW5kVW5zdWJzY3JpYmUoY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgdW5zdWJzY3JpYmVDb250ZXh0KGNvbnRleHRJdGVtKTtcbiAgICByZXR1cm4gZGVsZXRlU3ViQ29udGV4dChzdWJDb250ZXh0LCBvd25lclN1cHBvcnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVG9QYWludChzeW5jUnVuKSB7XG4gICAgaWYgKCFzeW5jUnVuICYmICFzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3VwcG9ydCkge1xuICAgICAgICBwYWludCgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHNldHVwU3Vic2NyaWJlIH0gZnJvbSAnLi9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU2lnbmFsKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBfaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGNvbnN0IHN1YlZhbHVlID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMuc3Vic2NyaWJlLFxuICAgICAgICBzdGF0ZXM6IFtdLFxuICAgICAgICBPYnNlcnZhYmxlczogW3ZhbHVlXSxcbiAgICB9O1xuICAgIHNldHVwU3Vic2NyaWJlKHN1YlZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBfaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG59XG4iLCJpbXBvcnQgeyBzZXROb25GdW5jdGlvbklucHV0VmFsdWUgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tIFwiLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9pc1NwZWNpYWxBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NOb25EeW5hbWljQXR0ciB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NOYW1lVmFsdWVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHVuc3Vic2NyaWJlQ29udGV4dCwgY2hlY2tUb1BhaW50LCBzZXR1cFN1YnNjcmliZUNhbGxiYWNrUHJvY2Vzc29yIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUgfSBmcm9tIFwiLi9wcm9jZXNzQXR0cmlidXRlVXBkYXRlLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgLy8gVGVtcGxhdGVWYWx1ZSB8IFN0cmluZ1RhZyB8IFN1YnNjcmliZVZhbHVlIHwgU2lnbmFsT2JqZWN0LFxuZWxlbWVudCwgX3RhZ0pzVmFyLCAvLyBzYW1lIGFzIHZhbHVlXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgLy8gY2hhbmdlIGhvdyB0aGUgZGVsZXRlIG9jY3Vyc1xuICAgIHZhbHVlLmRlc3Ryb3kgPSB1bnN1YnNjcmliZUNvbnRleHQ7XG4gICAgY29uc3QgaXNTcGVjaWFsID0gaXNTcGVjaWFsQXR0cihuYW1lKTtcbiAgICBjb25zdCBvbk91dHB1dCA9IGZ1bmN0aW9uIG9uU3ViVmFsdWUoY2FsbGJhY2tWYWx1ZSwgc3luY1J1bikge1xuICAgICAgICBwcm9jZXNzTm9uRHluYW1pY0F0dHIobmFtZSwgY2FsbGJhY2tWYWx1ZSwgZWxlbWVudCwgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlLCBpc1NwZWNpYWwsIGNvbnRleHRJdGVtKTtcbiAgICAgICAgY2hlY2tUb1BhaW50KHN5bmNSdW4pO1xuICAgIH07XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IHNldHVwU3Vic2NyaWJlQ2FsbGJhY2tQcm9jZXNzb3IodmFsdWUuT2JzZXJ2YWJsZXMsIG93bmVyU3VwcG9ydCwgb25PdXRwdXQsIHZhbHVlLCBjb250ZXh0SXRlbSk7XG4gICAgY29udGV4dEl0ZW0uc3ViQ29udGV4dCA9IHN1YkNvbnRleHQ7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IHZhbHVlO1xuICAgIHZhbHVlLnByb2Nlc3NVcGRhdGUgPSBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlVXBkYXRlV3JhcCh2YWx1ZSwgY29udGV4dEl0ZW0yLCBvd25lclN1cHBvcnQpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGVsZW1lbnQsIG5hbWUsIHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4geyBzdWJDb250ZXh0LCBvbk91dHB1dCB9O1xufVxuIiwiaW1wb3J0IHsgcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZSB9IGZyb20gXCIuL3Byb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU3Vic2NyaWJlV2l0aEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgLy8gVGVtcGxhdGVWYWx1ZSB8IFN0cmluZ1RhZyB8IFN1YnNjcmliZVZhbHVlIHwgU2lnbmFsT2JqZWN0LFxuZWxlbWVudCwgX3RhZ0pzVmFyLCAvLyBpdHMgdGhlIHNhbWUgYXMgdGhlIHZhbHVlXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgeyBzdWJDb250ZXh0IH0gPSBwcm9jZXNzU3Vic2NyaWJlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG4gICAgZWxlbWVudCwgdmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIGlmICghc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIGVtaXRTdWJTY3JpcHRpb25Bc0lzKHZhbHVlLCBzdWJDb250ZXh0KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZW1pdFN1YlNjcmlwdGlvbkFzSXModmFsdWUsIHN1YkNvbnRleHQpIHtcbiAgICBjb25zdCB0YWdKc1ZhciA9IHN1YkNvbnRleHQudGFnSnNWYXI7XG4gICAgY29uc3Qgb25PdXRwdXQgPSB0YWdKc1Zhci5vbk91dHB1dDsgLy8gdmFsdWUub25PdXRwdXRcbiAgICBjb25zdCBvYnNlcnZhYmxlcyA9IHZhbHVlLk9ic2VydmFibGVzO1xuICAgIGxldCBvYlZhbHVlID0gb2JzZXJ2YWJsZXNbMF0/LnZhbHVlIHx8IHZhbHVlLndpdGhEZWZhdWx0O1xuICAgIC8vIHN1YkNvbnRleHQuaGFzRW1pdHRlZCA9IHRydWVcbiAgICAvLyBzdWJDb250ZXh0Lmxhc3RWYWx1ZXNbMF0gPSBvYlZhbHVlXG4gICAgaWYgKHZhbHVlLmNhbGxiYWNrKSB7XG4gICAgICAgIG9iVmFsdWUgPSB2YWx1ZS5jYWxsYmFjayhvYlZhbHVlKTtcbiAgICB9XG4gICAgb25PdXRwdXQob2JWYWx1ZSwgdHJ1ZSwgc3ViQ29udGV4dCk7XG59XG4iLCJpbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tIFwiLi4vdGFnL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzU3Vic2NyaWJlV2l0aCB9IGZyb20gXCIuLi90YWcvdXBkYXRlL3Byb2Nlc3NTdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBkZWxldGVBbmRVbnN1YnNjcmliZSB9IGZyb20gXCIuLi90YWcvdXBkYXRlL3NldHVwU3Vic2NyaWJlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzU3Vic2NyaWJlV2l0aEF0dHJpYnV0ZSB9IGZyb20gXCIuL3Byb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlLmZ1bmN0aW9uLmpzXCI7XG4vKiogSGF2ZSBhbiBodG1sIHRhZ2dlZCB2YWx1ZSBhcyB2YWx1ZSBvZiBzdWJzY3JpYmUgZW1pc3Npb25zLCB3aXRoIGluaXRpYWwgZGVmYXVsdCB2YWx1ZSBlbWlzc2lvbi4gQXV0b21hdGljYWxseSB1bnN1YnNjcmliZXMgZm9yIHlvdSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZVdpdGgoT2JzZXJ2YWJsZSwgd2l0aERlZmF1bHQsIGNhbGxiYWNrKSB7XG4gICAgLy8gY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKCkgYXMgQW55U3VwcG9ydFxuICAgIC8vIGNvbnN0IGNvbnRleHQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpLmNvbnRleHRcbiAgICAvKlxuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpIGFzIENvbnRleHRJdGVtXG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZSBhcyBDb250ZXh0U3RhdGVNZXRhXG4gICAgY29uc3QgbmV3ZXIgPSBzdGF0ZU1ldGEubmV3ZXIgYXMgQ29udGV4dFN0YXRlU3VwcG9ydFxuICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25PdXRwdXQ6IGJsYW5rSGFuZGxlciwgLy8gdGhpcyBnZXRzIHNldCB3aXRoaW4gc2V0dXBTdWJzY3JpYmVcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLnN1YnNjcmliZSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IHByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1N1YnNjcmliZVdpdGgsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQsXG4gICAgICAgIC8vIHByb2Nlc3NVcGRhdGU6IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBkZXN0cm95OiBkZWxldGVBbmRVbnN1YnNjcmliZSxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHdpdGhEZWZhdWx0LFxuICAgICAgICAvLyBzdGF0ZXM6IG5ld2VyLnN0YXRlcyxcbiAgICAgICAgT2JzZXJ2YWJsZXM6IFtPYnNlcnZhYmxlXSxcbiAgICB9O1xufVxuLyoqIGNoZWNrcyBpcyBhIHByZXZpb3VzIHRhZyB2YXIgd2FzIGEgc3Vic2NyaXB0aW9uIGJ1dCBub3cgaGFzIGNoYW5nZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1N1YnNjcmliZVZhbHVlQ2hhbmdlZCh2YWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICBpZiAoIXZhbHVlPy50YWdKc1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIDE7IC8vIGl0cyBub3QgYSBzdWJzY3JpcHRpb24gYW55bW9yZVxuICAgIH1cbiAgICBjb25zdCBuZXdPYnNlcnZlcyA9IHZhbHVlLk9ic2VydmFibGVzO1xuICAgIGlmICghbmV3T2JzZXJ2ZXMpIHtcbiAgICAgICAgcmV0dXJuIDI7IC8vIGl0cyBub3QgYSBzdWJzY3JpcHRpb24gYW55bW9yZVxuICAgIH1cbiAgICBjb25zdCBvbGRWYWx1ZSA9IGNvbnRleHRJdGVtLnZhbHVlO1xuICAgIGNvbnN0IG9sZE9ic2VydmVzID0gb2xkVmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgaWYgKCFvbGRPYnNlcnZlcyB8fCBvbGRPYnNlcnZlcy5sZW5ndGggIT09IG5ld09ic2VydmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gMzsgLy8gbm90IHRoZSBzYW1lIHN1YnNjcmlwdGlvblxuICAgIH1cbiAgICBjb25zdCBhbGxNYXRjaCA9IG5ld09ic2VydmVzLmV2ZXJ5KChvYiwgaW5kZXgpID0+IG9iID09PSBvbGRPYnNlcnZlc1tpbmRleF0pO1xuICAgIGlmICghYWxsTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgfVxuICAgIHJldHVybiAwOyAvLyBzdGlsbCB0aGUgc2FtZVxufVxuIiwiaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzU2lnbmFsIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzU2lnbmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGRlbGV0ZUFuZFVuc3Vic2NyaWJlIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1N1YnNjcmliZVZhbHVlQ2hhbmdlZCB9IGZyb20gJy4uL3RhZ0pzVmFycy9zdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NVcGRhdGVTdWJzY3JpYmUgfSBmcm9tICcuLi90YWcvdXBkYXRlL3Byb2Nlc3NVcGRhdGVTdWJzY3JpYmUuZnVuY3Rpb24uanMnO1xuLyoqIENoZWNrcyBpZiByZW5kZXJpbmcgY3ljbGUgaW4gcHJvY2Vzcy4gVGhlbiBjcmVhdGVzIG9iamVjdCB3aXRoIFwidmFsdWVcIiBrZXkgYW5kIGFiaWxpdHkgdG8gXCJzdWJzY3JpYmVcIiB0byB2YWx1ZSBjaGFuZ2VzICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsKGluaXRpYWxWYWx1ZSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmIChzdXBwb3J0KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSgoKSA9PiBTaWduYWwoaW5pdGlhbFZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBTaWduYWwoaW5pdGlhbFZhbHVlKTtcbn1cbi8qKiBDcmVhdGVzIG9iamVjdCB3aXRoIFwidmFsdWVcIiBrZXkgYW5kIGFiaWxpdHkgdG8gXCJzdWJzY3JpYmVcIiB0byB2YWx1ZSBjaGFuZ2VzICovXG5leHBvcnQgZnVuY3Rpb24gU2lnbmFsKGluaXRpYWxWYWx1ZSkge1xuICAgIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBlbWl0ID0gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIC8vIE5vdGlmeSBhbGwgc3Vic2NyaWJlcnNcbiAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayhuZXdWYWx1ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLnNpZ25hbCxcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1N1YnNjcmliZVZhbHVlQ2hhbmdlZCxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NTaWduYWwsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NVcGRhdGVTdWJzY3JpYmUsXG4gICAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBlbWl0KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogZGVsZXRlQW5kVW5zdWJzY3JpYmUsXG4gICAgICAgIGVtaXQsXG4gICAgICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUpOyAvLyBlbWl0IGluaXRpYWwgdmFsdWVcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBSZXR1cm4gYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IHVuc3ViID0gKCkgPT4gc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIC8vIHN1cHBvcnQgdHJhZGl0aW9uYWwgdW5zdWJzY3JpYmVcbiAgICAgICAgICAgIHVuc3ViLnVuc3Vic2NyaWJlID0gdW5zdWI7XG4gICAgICAgICAgICByZXR1cm4gdW5zdWI7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiIsImltcG9ydCB7IFN1YmplY3QsIGRlZmluZVZhbHVlT24gfSBmcm9tICcuL1N1YmplY3QuY2xhc3MuanMnO1xuZXhwb3J0IGNsYXNzIFZhbHVlU3ViamVjdCBleHRlbmRzIFN1YmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHN1cGVyKHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3VwZXIuc3Vic2NyaWJlKGNhbGxiYWNrKTtcbiAgICAgICAgLy8gQ2FsbCB0aGUgY2FsbGJhY2sgaW1tZWRpYXRlbHkgd2l0aCB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICBjYWxsYmFjayh0aGlzLnZhbHVlLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBWYWx1ZVN1YmplY3RpdmUgZXh0ZW5kcyBTdWJqZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcih2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZGVmaW5lVmFsdWVPbih0aGlzKTsgLy8gaWYgeW91IGV4dGVuZCB0aGlzIEFORCBoYXZlIGEgY29uc3RydWN0b3IsIHlvdSBtdXN0IGNhbGwgdGhpcyBpbiB5b3VyIGV4dGVuc2lvblxuICAgIH1cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3VwZXIuc3Vic2NyaWJlKGNhbGxiYWNrKTtcbiAgICAgICAgLy8gQ2FsbCB0aGUgY2FsbGJhY2sgaW1tZWRpYXRlbHkgd2l0aCB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICBjYWxsYmFjayh0aGlzLl92YWx1ZSwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gd2lsbENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuICgobGFzdFZhbHVlLCB1dGlscykgPT4ge1xuICAgICAgICB1dGlscy5zZXRIYW5kbGVyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFjayhsYXN0VmFsdWUsIHV0aWxzLm5leHQpO1xuICAgIH0pO1xufVxuLyoqIC5waXBlKCBwcm9taXNlKCh4KSA9PiBQcm9taXNlLnJlc29sdmUoNDQpKSApICovXG5leHBvcnQgZnVuY3Rpb24gd2lsbFByb21pc2UoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gKChsYXN0VmFsdWUsIHV0aWxzKSA9PiB7XG4gICAgICAgIHV0aWxzLnNldEhhbmRsZXIoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSk7IC8vIGRvIG5vdGhpbmcgb24gaW5pdGlhbCByZXR1cm5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2sobGFzdFZhbHVlKTtcbiAgICAgICAgcmVzdWx0LnRoZW4oeCA9PiB1dGlscy5uZXh0KHgpKTtcbiAgICB9KTtcbn1cbi8qKiAucGlwZSggd2lsbFN1YnNjcmliZSgoeCkgPT4gbmV3IFZhbHVlU3ViamVjdCg0NCkpICkgKi9cbmV4cG9ydCBjb25zdCB3aWxsU3Vic2NyaWJlID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuICgobGFzdFZhbHVlLCB1dGlscykgPT4ge1xuICAgICAgICB1dGlscy5zZXRIYW5kbGVyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pOyAvLyBkbyBub3RoaW5nIG9uIGluaXRpYWwgcmV0dXJuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKGxhc3RWYWx1ZSk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHJlc3VsdC5zdWJzY3JpYmUoeCA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHV0aWxzLm5leHQoeCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsImltcG9ydCB7IFZhbHVlU3ViamVjdCB9IGZyb20gJy4uL3N1YmplY3QvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4vc3RhdGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgb2xkU3luY1N0YXRlcyB9IGZyb20gJy4vc3luY1N0YXRlcy5mdW5jdGlvbi5qcyc7XG4vKipcbiAqIFdoZW4gYW4gaXRlbSBpbiB3YXRjaCBhcnJheSBjaGFuZ2VzLCBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIHRyaWdnZXJlZC5cbiAqIFRyaWdnZXJzIG9uIGluaXRpYWwgd2F0Y2ggc2V0dXAuIFRJUDogdHJ5IHdhdGNoLm5vSW5pdCgpXG4gKiBAcGFyYW0gY3VycmVudFZhbHVlcyBUW11cbiAqIEBwYXJhbSBjYWxsYmFjayBXYXRjaENhbGxiYWNrXG4gKiBAcmV0dXJucyBUW11cbiAqL1xuZXhwb3J0IGNvbnN0IHdhdGNoID0gKChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiBzZXR1cFdhdGNoKGN1cnJlbnRWYWx1ZXMsIGNhbGxiYWNrKTtcbn0pO1xuY29uc3QgZGVmYXVsdEZpbmFsbHkgPSAoeCkgPT4geDtcbmZ1bmN0aW9uIG5ld1dhdGNoKHNldHVwKSB7XG4gICAgY29uc3QgbWV0aG9kID0gKGN1cnJlbnRWYWx1ZXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIHJldHVybiBzZXR1cFdhdGNoKGN1cnJlbnRWYWx1ZXMsIGNhbGxiYWNrLCBzZXR1cCk7XG4gICAgfTtcbiAgICBtZXRob2Quc2V0dXAgPSBzZXR1cDtcbiAgICBkZWZpbmVPbk1ldGhvZCgoKSA9PiBtZXRob2QsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbi8qKlxuICogcHV0cyBhYm92ZSBmdW5jdGlvbmFsaXR5IHRvZ2V0aGVyXG4gKiBAcGFyYW0gY3VycmVudFZhbHVlcyB2YWx1ZXMgYmVpbmcgd2F0Y2hlZFxuICogQHBhcmFtIGNhbGxiYWNrIChjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWVzKSA9PiByZXNvbHZlVG9WYWx1ZVxuICogQHBhcmFtIHBhcmFtMlxuICogQHJldHVybnNcbiAqL1xuY29uc3Qgc2V0dXBXYXRjaCA9IChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaywgeyBpbml0LCBiZWZvcmUsIGZpbmFsID0gZGVmYXVsdEZpbmFsbHksIH0gPSB7fSkgPT4ge1xuICAgIGNvbnN0IHByZXZpb3VzID0gc3RhdGUoe1xuICAgICAgICBwYXN0UmVzdWx0OiB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlczogdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIGNvbnN0IHByZXZpb3VzVmFsdWVzID0gcHJldmlvdXMudmFsdWVzO1xuICAgIC8vIEZpcnN0IHRpbWUgcnVubmluZyB3YXRjaD9cbiAgICBpZiAocHJldmlvdXNWYWx1ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYmVmb3JlICYmICFiZWZvcmUoY3VycmVudFZhbHVlcykpIHtcbiAgICAgICAgICAgIHByZXZpb3VzLnZhbHVlcyA9IGN1cnJlbnRWYWx1ZXM7XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXMucGFzdFJlc3VsdDsgLy8gZG8gbm90IGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FzdGVkSW5pdCA9IGluaXQgfHwgY2FsbGJhY2s7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhc3RlZEluaXQoY3VycmVudFZhbHVlcywgcHJldmlvdXNWYWx1ZXMpO1xuICAgICAgICBwcmV2aW91cy5wYXN0UmVzdWx0ID0gZmluYWwocmVzdWx0KTtcbiAgICAgICAgcHJldmlvdXMudmFsdWVzID0gY3VycmVudFZhbHVlcztcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzLnBhc3RSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IGFsbEV4YWN0ID0gY3VycmVudFZhbHVlcy5ldmVyeSgoaXRlbSwgaW5kZXgpID0+IGl0ZW0gPT09IHByZXZpb3VzVmFsdWVzW2luZGV4XSk7XG4gICAgaWYgKGFsbEV4YWN0KSB7XG4gICAgICAgIHJldHVybiBwcmV2aW91cy5wYXN0UmVzdWx0O1xuICAgIH1cbiAgICBpZiAoYmVmb3JlICYmICFiZWZvcmUoY3VycmVudFZhbHVlcykpIHtcbiAgICAgICAgcHJldmlvdXMudmFsdWVzID0gY3VycmVudFZhbHVlcztcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzLnBhc3RSZXN1bHQ7IC8vIGRvIG5vdCBjb250aW51ZVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayhjdXJyZW50VmFsdWVzLCBwcmV2aW91c1ZhbHVlcyk7XG4gICAgcHJldmlvdXMucGFzdFJlc3VsdCA9IGZpbmFsKHJlc3VsdCk7XG4gICAgcHJldmlvdXNWYWx1ZXMubGVuZ3RoID0gMDtcbiAgICBwcmV2aW91c1ZhbHVlcy5wdXNoKC4uLmN1cnJlbnRWYWx1ZXMpO1xuICAgIHJldHVybiBwcmV2aW91cy5wYXN0UmVzdWx0O1xufTtcbmZ1bmN0aW9uIGRlZmluZU9uTWV0aG9kKGdldFdhdGNoLCBhdHRhY2hUbykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhdHRhY2hUbywgJ25vSW5pdCcsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgY29uc3Qgd2F0Y2ggPSBnZXRXYXRjaCgpO1xuICAgICAgICAgICAgd2F0Y2guc2V0dXAuaW5pdCA9ICgpID0+IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaDtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXR0YWNoVG8sICdhc1N1YmplY3QnLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZFdhdGNoID0gZ2V0V2F0Y2goKTtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0U3VwcG9ydCA9IHN0YXRlKCgpID0+IGdldFN1cHBvcnRJbkN5Y2xlKCkpO1xuICAgICAgICAgICAgY29uc3Qgc3ViamVjdCA9IHN0YXRlKCgpID0+IG5ldyBWYWx1ZVN1YmplY3QodW5kZWZpbmVkKSk7XG4gICAgICAgICAgICBjb25zdCBvbGRTdGF0ZSA9IHN0YXRlKCgpID0+ICh7XG4gICAgICAgICAgICAgICAgc3RhdGU6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZSxcbiAgICAgICAgICAgICAgICBzdGF0ZXM6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZXMsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSAoY3VycmVudFZhbHVlcywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICBzZXR1cFdhdGNoKGN1cnJlbnRWYWx1ZXMsIChjdXJyZW50VmFsdWVzLCBwcmV2aW91c1ZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3dTdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2V0VG8gPSBjYWxsYmFjayhjdXJyZW50VmFsdWVzLCBwcmV2aW91c1ZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3dTdXBwb3J0ICE9PSBmaXJzdFN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld2VzdFN0YXRlID0gb2xkU3RhdGUuc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gZmlyc3RTdXBwb3J0LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkZXN0U3RhdGVTdXBwb3J0ID0gc3RhdGVNZXRhLm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkZXN0U3RhdGUgPSBvbGRlc3RTdGF0ZVN1cHBvcnQuc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdTdGF0ZXMgPSBvbGRTdGF0ZS5zdGF0ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRTdGF0ZXMgPSBvbGRlc3RTdGF0ZVN1cHBvcnQuc3RhdGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3luY1N0YXRlcyhuZXdlc3RTdGF0ZSwgb2xkZXN0U3RhdGUsIG5ld1N0YXRlcywgb2xkU3RhdGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Lm5leHQoc2V0VG8pO1xuICAgICAgICAgICAgICAgIH0sIG9sZFdhdGNoLnNldHVwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRob2Quc2V0dXAgPSBvbGRXYXRjaC5zZXR1cDtcbiAgICAgICAgICAgIGRlZmluZU9uTWV0aG9kKCgpID0+IG1ldGhvZCwgbWV0aG9kKTtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGF0dGFjaFRvLCAndHJ1dGh5Jywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCB3YXRjaCA9IGdldFdhdGNoKCk7XG4gICAgICAgICAgICB3YXRjaC5zZXR1cC5iZWZvcmUgPSAoY3VycmVudFZhbHVlcykgPT4gY3VycmVudFZhbHVlcy5ldmVyeSh4ID0+IHgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBhdHRhY2hUbztcbn1cbmRlZmluZU9uTWV0aG9kKCgpID0+IG5ld1dhdGNoKHt9KSwgd2F0Y2gpO1xuIiwiaW1wb3J0IHsgU3ViamVjdCwgVmFsdWVTdWJqZWN0IH0gZnJvbSAnLi4vc3ViamVjdC9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBvbGRTeW5jU3RhdGVzIH0gZnJvbSAnLi9zeW5jU3RhdGVzLmZ1bmN0aW9uLmpzJztcbi8qKiBDcmVhdGUgYSBTdWJqZWN0IHRoYXQgb24gdXBkYXRlcyB3aWxsIHN5bmMgc3RhdGUgdmFsdWVzIHRvIGtlZXAgY2hhaW5lZCBmdW5jdGlvbnMgdXNpbmcgbGF0ZXN0IHZhcmlhYmxlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YmplY3QoaW5pdGlhbFZhbHVlKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKCk7XG4gICAgaWYgKHN1cHBvcnQpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlKCgpID0+IG5ldyBTdWJqZWN0KGluaXRpYWxWYWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN1YmplY3QoaW5pdGlhbFZhbHVlKTtcbn1cbnN1YmplY3QuX3ZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgb2xkZXN0U3RhdGUgPSBzdGF0ZShmdW5jdGlvbiBzdWJqZWN0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0ZTogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlLFxuICAgICAgICAgICAgc3RhdGVzOiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3RhdGVzLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IG5vd1N1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIHJldHVybiBzdGF0ZShmdW5jdGlvbiBzdWJqZWN0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgVmFsdWVTdWJqZWN0KHZhbHVlKS5waXBlKHggPT4ge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IG5vd1N1cHBvcnQuY29udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlTWV0YSA9IGNvbnRleHQuc3RhdGU7XG4gICAgICAgICAgICBjb25zdCBuZXdlciA9IHN0YXRlTWV0YS5uZXdlcjtcbiAgICAgICAgICAgIG9sZFN5bmNTdGF0ZXMobmV3ZXIuc3RhdGUsIG9sZGVzdFN0YXRlLnN0YXRlLCBuZXdlci5zdGF0ZXMsIG9sZGVzdFN0YXRlLnN0YXRlcyk7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH0pO1xufTtcbmZ1bmN0aW9uIGFsbChhcmdzKSB7XG4gICAgY29uc3Qgb2xkZXN0U3RhdGUgPSBzdGF0ZSgoKSA9PiAoe1xuICAgICAgICBzdGF0ZTogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlLFxuICAgICAgICBzdGF0ZXM6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZXMsXG4gICAgfSkpO1xuICAgIGNvbnN0IG5vd1N1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIHJldHVybiBTdWJqZWN0LmFsbChhcmdzKS5waXBlKHggPT4ge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gbm93U3VwcG9ydC5jb250ZXh0O1xuICAgICAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlO1xuICAgICAgICBjb25zdCBuZXdlciA9IHN0YXRlTWV0YS5uZXdlcjtcbiAgICAgICAgaWYgKG5ld2VyKSB7XG4gICAgICAgICAgICBvbGRTeW5jU3RhdGVzKG5ld2VyLnN0YXRlLCBvbGRlc3RTdGF0ZS5zdGF0ZSwgbmV3ZXIuc3RhdGVzLCBvbGRlc3RTdGF0ZS5zdGF0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4O1xuICAgIH0pO1xufVxuc3ViamVjdC5hbGwgPSBhbGw7XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuLyoqIFVzZWQgZm9yIHZhcmlhYmxlcyB0aGF0IG5lZWQgdG8gcmVtYWluIHRoZSBzYW1lIHZhcmlhYmxlIGR1cmluZyByZW5kZXIgcGFzc2VzLiBJZiBkZWZhdWx0VmFsdWUgaXMgYSBmdW5jdGlvbiBpdCBpcyBjYWxsZWQgb25seSBvbmNlLCBpdHMgcmV0dXJuIHZhbHVlIGlzIGZpcnN0IHN0YXRlLCBhbmQgbGV0IHZhbHVlIGNhbiBjaGFuZ2VkICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVzKHNldHRlcikge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICByZXR1cm4gY29uZmlnLmhhbmRsZXJzLnN0YXRlc0hhbmRsZXIoc2V0dGVyKTtcbn1cbiIsImltcG9ydCB7IHNpZ25hbCB9IGZyb20gJy4vc2lnbmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHN0YXRlcyB9IGZyb20gJy4vc3RhdGVzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHdhdGNoIH0gZnJvbSAnLi93YXRjaC5mdW5jdGlvbi5qcyc7XG4vKipcbiAqIEVuYWJsZXMgdGhlIGFiaWxpdHkgdG8gbWFpbnRhaW4gYSBjaGFuZ2UgdG8gYSBwcm9wcyB2YWx1ZSB1bnRpbCB0aGUgcHJvcCBpdHNlbGYgY2hhbmdlc1xuICogQHBhcmFtIHByb3AgdHlwaWNhbGx5IHRoZSBuYW1lIG9mIGFuIGV4aXN0aW5nIHByb3BcbiAqIEByZXR1cm5zIGltbWVkaWF0ZWx5IGNhbGwgdGhlIHJldHVybmVkIGZ1bmN0aW9uOiBsZXRQcm9wKHkpKHggPT4gW3ksIHk9eF0pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXRQcm9wKHNldHRlcikge1xuICAgIGNvbnN0IHByb3BTdGF0ZXMyID0gc2lnbmFsKFtdKTtcbiAgICBjb25zdCBwYXNzZXMgPSBzaWduYWwoMCk7XG4gICAgY29uc3QgcGFzc2VkT24gPSBzaWduYWwoMCk7XG4gICAgbGV0IG5vd1ZhbHVlcyA9IFtdO1xuICAgIGxldCBwYXNzZWQgPSAwO1xuICAgIHBhc3NlZE9uLnZhbHVlID0gcGFzc2VzLnZhbHVlO1xuICAgIHNldHRlcigoLi4udmFsdWVzKSA9PiB7XG4gICAgICAgIG5vd1ZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xuICAgIH0pO1xuICAgIC8vIFdoZW4gdGhlIHdhdGNoZWQgdmFyaWFibGUgY2hhbmdlcywgdGhlbiB0aGUgbG9jYWwgcHJvcCB2YXJpYWJsZSBoYXMgdG8gdXBkYXRlXG4gICAgd2F0Y2gobm93VmFsdWVzLCAoKSA9PiB7XG4gICAgICAgICsrcGFzc2VkOyAvLyBmaXJzdCB0aW1lIHZhbHVlcyBhbmQgY2hhbmdlZCB2YWx1ZXMgY2F1c2UgbmV3IHN0YXRlXG4gICAgICAgIHByb3BTdGF0ZXMyLnZhbHVlID0gbm93VmFsdWVzO1xuICAgICAgICBzZXR0ZXIoKCkgPT4gbm93VmFsdWVzKTtcbiAgICB9KTtcbiAgICAvLyBjYWxsZWQgYW5kIG9ubHkgdXNlZCBkdXJpbmcgc3luYydpbmcgcHJvY2Vzc2VzXG4gICAgc3RhdGVzKChfeCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIC8vIG5vdyBpdHMgY29sbGVjdGlvbiBvZiB2YXJpYWJsZXMgdGltZVxuICAgICAgICBpZiAocGFzc2VkKSB7XG4gICAgICAgICAgICBzZXR0ZXIoKC4uLnZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZGlyZWN0aW9uIHx8IGRpcmVjdGlvbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3RhdGVzMi52YWx1ZSA9IHZhbHVlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXNzZWRPbi52YWx1ZSA9IHBhc3Nlcy52YWx1ZTtcbiAgICAgICAgICAgICsrcGFzc2VzLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaW4gYW4gaW5zeW5jIGNhbGwsIHdlIGRvIG5vdCBjYXJlIGFib3V0IHRoZSB2YWx1ZXMgaGVyZVxuICAgICAgICBzZXR0ZXIoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICArK3Bhc3NlZDtcbiAgICByZXR1cm4gcHJvcFN0YXRlczIudmFsdWU7XG59XG4iLCJpbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5mdW5jdGlvbi5qcyc7XG5mdW5jdGlvbiBnZXRCbGFua0RpZmZNZW1vcnkoKSB7XG4gICAgcmV0dXJuIHsgc3RhdGVEaWZmOiAwLCBwcm92aWRlcjogdW5kZWZpbmVkIH07XG59XG5leHBvcnQgY29uc3QgcHJvdmlkZXJzID0ge1xuICAgIGNyZWF0ZTogKGNvbnN0cnVjdE1ldGhvZCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZURpZmZNZW1vcnkgPSBzdGF0ZShnZXRCbGFua0RpZmZNZW1vcnkpO1xuICAgICAgICAvLyBtaW1pYyBob3cgbWFueSBzdGF0ZXMgd2VyZSBjYWxsZWQgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgaWYgKHN0YXRlRGlmZk1lbW9yeS5zdGF0ZURpZmYpIHtcbiAgICAgICAgICAgIGxldCB4ID0gc3RhdGVEaWZmTWVtb3J5LnN0YXRlRGlmZjtcbiAgICAgICAgICAgIHdoaWxlICh4LS0pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RhdGUoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgICAgICAgICBjb25zdCBvbGRTdGF0ZUNvdW50ID0gc3RhdGVDb25maWcuc3RhdGUubGVuZ3RoO1xuICAgICAgICAgICAgLy8gUHJvdmlkZXJzIHdpdGggcHJvdmlkZXIgcmVxdWlyZW1lbnRzIGp1c3QgbmVlZCB0byB1c2UgcHJvdmlkZXJzLmNyZWF0ZSgpIGFuZCBwcm92aWRlcnMuaW5qZWN0KClcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gY29uc3RydWN0TWV0aG9kLnByb3RvdHlwZSA/IG5ldyBjb25zdHJ1Y3RNZXRob2QoKSA6IGNvbnN0cnVjdE1ldGhvZCgpO1xuICAgICAgICAgICAgY29uc3Qgc3VwcG9ydCA9IHN0YXRlQ29uZmlnLnN1cHBvcnQ7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZURpZmYgPSBzdGF0ZUNvbmZpZy5zdGF0ZS5sZW5ndGggLSBvbGRTdGF0ZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB7XG4gICAgICAgICAgICAgICAgY29uc3RydWN0TWV0aG9kLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHN0YXRlRGlmZixcbiAgICAgICAgICAgICAgICBvd25lcjogc3VwcG9ydCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdGVEaWZmTWVtb3J5LnByb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICAgICAgICBjb25zdCBnbG9iYWwgPSBzdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gZ2xvYmFsLnByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgfHwgW107XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICBzdGF0ZURpZmZNZW1vcnkuc3RhdGVEaWZmID0gc3RhdGVEaWZmO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY20gPSBjb25zdHJ1Y3RNZXRob2Q7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVUbyA9IGNtLmNvbXBhcmVUbyA9IGNtLnRvU3RyaW5nKCk7XG4gICAgICAgIHN0YXRlRGlmZk1lbW9yeS5wcm92aWRlci5jb25zdHJ1Y3RNZXRob2QuY29tcGFyZVRvID0gY29tcGFyZVRvO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0geyhuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBUKSB8ICgpID0+IFR9IGNvbnN0cnVjdG9yXG4gICAgICogQHJldHVybnMge1R9XG4gICAgICovXG4gICAgaW5qZWN0OiBwcm92aWRlckluamVjdFxufTtcbmZ1bmN0aW9uIHByb3ZpZGVySW5qZWN0KGNvbnN0cnVjdG9yKSB7XG4gICAgLy8gZmluZCBvbmNlLCByZXR1cm4gc2FtZSBldmVyeSB0aW1lIGFmdGVyXG4gICAgcmV0dXJuIHN0YXRlKGZ1bmN0aW9uIHByb3ZpZGVySW5qZWN0U3RhdGUoKSB7XG4gICAgICAgIC8vIGNvbnN0IG1lbW9yeSA9IHNldFVzZS5tZW1vcnlcbiAgICAgICAgY29uc3QgY20gPSBjb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3QgY29tcGFyZVRvID0gY20uY29tcGFyZVRvID0gY20uY29tcGFyZVRvIHx8IGNvbnN0cnVjdG9yLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpOyAvLyBtZW1vcnkuc3RhdGVDb25maWcuc3VwcG9ydCBhcyBBbnlTdXBwb3J0XG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IFtdO1xuICAgICAgICBsZXQgb3duZXIgPSB7XG4gICAgICAgICAgICBvd25lclN1cHBvcnQ6IHN1cHBvcnQub3duZXJTdXBwb3J0XG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlIChvd25lci5vd25lclN1cHBvcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG93bkdsb2JhbCA9IG93bmVyLm93bmVyU3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgICAgIGNvbnN0IG93bmVyUHJvdmlkZXJzID0gb3duR2xvYmFsLnByb3ZpZGVycztcbiAgICAgICAgICAgIGlmICghb3duZXJQcm92aWRlcnMpIHtcbiAgICAgICAgICAgICAgICBvd25lciA9IG93bmVyLm93bmVyU3VwcG9ydDsgLy8gY2F1c2UgcmVsb29wIGNoZWNraW5nIG5leHQgcGFyZW50XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG93bmVyUHJvdmlkZXJzLmZpbmQocHJvdmlkZXIgPT4ge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVycy5wdXNoKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25zdHJ1Y3Rvck1hdGNoID0gcHJvdmlkZXIuY29uc3RydWN0TWV0aG9kLmNvbXBhcmVUbyA9PT0gY29tcGFyZVRvO1xuICAgICAgICAgICAgICAgIGlmIChjb25zdHJ1Y3Rvck1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzID0gZ2xvYmFsLnByb3ZpZGVycyB8fCBbXTtcbiAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIuY2hpbGRyZW4ucHVzaChzdXBwb3J0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIuaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvd25lciA9IG93bmVyLm93bmVyU3VwcG9ydDsgLy8gY2F1c2UgcmVsb29wIGNoZWNraW5nIG5leHQgcGFyZW50XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbXNnID0gYENvdWxkIG5vdCBpbmplY3QgcHJvdmlkZXI6ICR7Y29uc3RydWN0b3IubmFtZX0gJHtjb25zdHJ1Y3Rvcn1gO1xuICAgICAgICBjb25zb2xlLndhcm4oYCR7bXNnfS4gQXZhaWxhYmxlIHByb3ZpZGVyc2AsIHByb3ZpZGVycyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH0pO1xufVxuIiwiZXhwb3J0IGNsYXNzIFRhZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGVycm9yQ29kZSwgZGV0YWlscyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBUYWdFcnJvci5uYW1lO1xuICAgICAgICB0aGlzLmRldGFpbHMgPSB7IC4uLmRldGFpbHMsIGVycm9yQ29kZSB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBcnJheU5vS2V5RXJyb3IgZXh0ZW5kcyBUYWdFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZGV0YWlscykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnYXJyYXktbm8ta2V5LWVycm9yJywgZGV0YWlscyk7XG4gICAgICAgIHRoaXMubmFtZSA9IEFycmF5Tm9LZXlFcnJvci5uYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTdGF0ZU1pc21hdGNoRXJyb3IgZXh0ZW5kcyBUYWdFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZGV0YWlscykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCAnc3RhdGUtbWlzbWF0Y2gtZXJyb3InLCBkZXRhaWxzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gU3RhdGVNaXNtYXRjaEVycm9yLm5hbWU7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN5bmNDYWxsYmFja0Vycm9yIGV4dGVuZHMgVGFnRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ3N5bmMtY2FsbGJhY2stZXJyb3InLCBkZXRhaWxzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gU3luY0NhbGxiYWNrRXJyb3IubmFtZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyByZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi4vcmVuZGVyL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBmaW5kU3RhdGVTdXBwb3J0VXBDb250ZXh0IH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbGxiYWNrU3RhdGVVcGRhdGUoY29udGV4dCwgX29sZFN0YXRlcywgY2FsbGJhY2ssIC4uLmFyZ3MpIHtcbiAgICAvLyBORVdFU1QgVVBEQVRFIE9MREVTVDogZW5zdXJlIHRoYXQgdGhlIG9sZGVzdCBoYXMgdGhlIGxhdGVzdCB2YWx1ZXMgZmlyc3RcbiAgICAvL3N5bmNTdGF0ZXNBcnJheShuZXdlc3RTdXBwb3J0LnN0YXRlcywgb2xkU3RhdGVzKVxuICAgIC8vIHJ1biB0aGUgY2FsbGJhY2tcbiAgICBjb25zdCBtYXliZVByb21pc2UgPSBjYWxsYmFjayguLi5hcmdzKTtcbiAgICBjb25zdCBuZXdlc3RTdXBwb3J0ID0gZmluZFN0YXRlU3VwcG9ydFVwQ29udGV4dChjb250ZXh0KTtcbiAgICAvLyBjb25zdCBuZXdlc3RTdXBwb3J0ID0gY29udGV4dC5zdGF0ZS5uZXdlc3QgYXMgQW55U3VwcG9ydFxuICAgIGlmIChuZXdlc3RTdXBwb3J0KSB7XG4gICAgICAgIGlmIChjb250ZXh0Lmdsb2JhbCkge1xuICAgICAgICAgICAgcmVuZGVyU3VwcG9ydChuZXdlc3RTdXBwb3J0KTsgLy8gVE9ETzogcmVtb3ZlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUoY29udGV4dC52YWx1ZSwgY29udGV4dCwgbmV3ZXN0U3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0LFxuICAgICAgICAgICAgW10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlKSkge1xuICAgICAgICAgICAgbWF5YmVQcm9taXNlLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0Lmdsb2JhbCkge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJTdXBwb3J0KG5ld2VzdFN1cHBvcnQpOyAvLyBUT0RPOiByZW1vdmVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQudGFnSnNWYXIucHJvY2Vzc1VwZGF0ZShjb250ZXh0LnZhbHVlLCBjb250ZXh0LCBuZXdlc3RTdXBwb3J0LCAvLyBvd25lclN1cHBvcnQsXG4gICAgICAgICAgICAgICAgICAgIFtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF5YmVQcm9taXNlO1xufVxuIiwiaW1wb3J0IGNhbGxiYWNrU3RhdGVVcGRhdGUgZnJvbSAnLi9jYWxsYmFja1N0YXRlVXBkYXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4vc3RhdGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbi8qKiBXcmFwIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBiYWNrLiBBZnRlciB0aGUgd3JhcHBlciBhbmQgZnVuY3Rpb24gYXJlIGNhbGxlZCwgYSByZW5kZXJpbmcgY3ljbGUgd2lsbCB1cGRhdGUgZGlzcGxheSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRJbkN5Y2xlKCk7XG4gICAgY29uc3QgY2FsbGJhY2tTdGF0ZSA9IHN0YXRlKHtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgfSk7XG4gICAgLy8gZW5zdXJlIG9ubHkgb25lIHRyaWdnZXIgaW5zdGFuY2UgY3JlYXRlZCBhbmQgYWx3YXlzIHJldHVybmVkXG4gICAgY29uc3QgY2FsbGJhY2tUcmlnZ2VyID0gc3RhdGUoKCkgPT4gY3JlYXRlVHJpZ2dlcihjb250ZXh0LCBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcsIC8vIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZUFycmF5XG4gICAgY2FsbGJhY2tTdGF0ZSkpO1xuICAgIC8vIGFsd2F5cyB1cGRhdGUgY2FsbGJhY2sgdG8gbGF0ZXN0IGluIGN5Y2xlXG4gICAgY2FsbGJhY2tTdGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHJldHVybiBjYWxsYmFja1RyaWdnZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJpZ2dlcihjb250ZXh0LCBvbGRTdGF0ZSwgY2FsbGJhY2tTdGF0ZSkge1xuICAgIGNvbnN0IG9sZFN0YXRlcyA9IG9sZFN0YXRlLnN0YXRlcztcbiAgICByZXR1cm4gZnVuY3Rpb24gdHJpZ2dlciguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1N0YXRlVXBkYXRlKGNvbnRleHQsIG9sZFN0YXRlcywgY2FsbGJhY2tTdGF0ZS5jYWxsYmFjaywgLi4uYXJncyk7XG4gICAgfTtcbn1cbiIsImltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBTeW5jQ2FsbGJhY2tFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVUcmlnZ2VyIH0gZnJvbSAnLi9jYWxsYmFjay5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGNvbnN0IGNhbGxiYWNrTWFrZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRJbkN5Y2xlKCk7XG4gICAgLy8gY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKClcbiAgICAvLyBjYWxsYmFjayBhcyB0eXBlb2YgaW5uZXJDYWxsYmFja1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgICB0aHJvdyBzeW5jRXJyb3I7XG4gICAgfVxuICAgIGNvbnN0IG9sZFN0YXRlID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnOyAvLyAuc3RhdGVBcnJheVxuICAgIHJldHVybiBmdW5jdGlvbiB0cmlnZ2VyTWFrZXIoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRyaWdnZXIoY29udGV4dCwgb2xkU3RhdGUsIHsgY2FsbGJhY2sgfSk7XG4gICAgfTtcbn07XG5leHBvcnQgY29uc3Qgc3luY0Vycm9yID0gbmV3IFN5bmNDYWxsYmFja0Vycm9yKCdjYWxsYmFjaygpIHdhcyBjYWxsZWQgb3V0c2lkZSBvZiBzeW5jaHJvbm91cyByZW5kZXJpbmcuIFVzZSBgY2FsbGJhY2sgPSBjYWxsYmFja01ha2VyKClgIHRvIGNyZWF0ZSBhIGNhbGxiYWNrIHRoYXQgY291bGQgYmUgY2FsbGVkIG91dCBvZiBzeW5jIHdpdGggcmVuZGVyaW5nJyk7XG4iLCJpbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4uL2luZGV4LmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBTaWduYWwgfSBmcm9tICcuL3NpZ25hbC5mdW5jdGlvbi5qcyc7XG4vKiogcmV0dXJucyBhIHNpZ25hbCB0aGF0IGNvbnRhaW5zIGFuIGFycmF5IGFuZCBtb2NrcyBhY3RpbmcgbGlrZSBhbiBhcnJheSB0byBzdXBwb3J0IHJvb3QgYXJyYXkgZnVuY3Rpb25hbGl0eSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5KGluaXRpYWxWYWx1ZSA9IFtdKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKCk7XG4gICAgaWYgKHN1cHBvcnQpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlKCgpID0+IGZpcnN0U2lnbmFsKFNpZ25hbChpbml0aWFsVmFsdWUpKSk7XG4gICAgfVxuICAgIHJldHVybiBmaXJzdFNpZ25hbChTaWduYWwoaW5pdGlhbFZhbHVlKSk7XG59XG5mdW5jdGlvbiBmaXJzdFNpZ25hbChzaWcpIHtcbiAgICBjb25zdCBlZGl0b3JzID0gWydwdXNoJywgJ3BvcCcsICdzcGxpY2UnLCAnc2hpZnQnLCAndW5zaGlmdCddO1xuICAgIGNvbnN0IHJlYWRlcnMgPSBbJ21hcCcsICdyZWR1Y2UnLCAnZm9yRWFjaCcsICdldmVyeSddO1xuICAgIGNvbnN0IG92ZXJ3cml0ZUVtaXR0ZXIgPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgIHJldHVybiByZXNpZ25hbFthY3Rpb25dID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHNpZy52YWx1ZVthY3Rpb25dKC4uLmFyZ3MpO1xuICAgICAgICAgICAgc2lnLmVtaXQoc2lnLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCByZXNpZ25hbCA9IG5ldyBQcm94eShzaWcsIHtcbiAgICAgICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgLy8gSWYgYWNjZXNzaW5nIG51bWVyaWMgaW5kZXggbGlrZSAnMCcsICcxJywgZXRjLlxuICAgICAgICAgICAgaWYgKCFpc05hTihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzaWcudmFsdWVbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlZGl0b3JzLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG92ZXJ3cml0ZUVtaXR0ZXIocHJvcCk7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHNpZy52YWx1ZVtwcm9wXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlYWRlcnMuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnLnZhbHVlW3Byb3BdLmJpbmQoc2lnLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaWdbcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgc2lnLnZhbHVlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgc2lnLmVtaXQoc2lnLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnbGVuZ3RoJykge1xuICAgICAgICAgICAgICAgIHNpZy52YWx1ZS5sZW5ndGggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBzaWcuZW1pdChzaWcudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQXBwbGllcyB0byB0aGUgc2lnbmFsIGFuZCBub3QgdGhlIHNpZ25hbC52YWx1ZSBhcnJheVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgc2lnW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNpZ25hbDtcbn1cbiIsImltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uLy4uL3N0YXRlL2luZGV4LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0SW5DeWNsZSgpIHtcbiAgICByZXR1cm4gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLmNvbnRleHQ7XG59XG4vKiogR2V0cyB0aGUgY3VycmVudCBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCB0YWdnZWRqcyBkb2N1bWVudCBwcm9jZXNzaW5nICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudCgpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEluQ3ljbGUoKTtcbiAgICByZXR1cm4gY29udGV4dC5lbGVtZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLmNvbnRleHQgPSBjb250ZXh0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCkge1xuICAgIGRlbGV0ZSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuY29udGV4dDtcbn1cbiIsImltcG9ydCB7IHJlbW92ZUNvbnRleHRJbkN5Y2xlLCBzZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4vY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVXBkYXRlQ29udGV4dChzdXBwb3J0LCBjb250ZXh0cykge1xuICAgIGNvbnN0IHRoaXNUYWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpc1RhZy52YWx1ZXM7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBjb25zdCBsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikge1xuICAgICAgICBwcm9jZXNzVXBkYXRlT25lQ29udGV4dCh2YWx1ZXMsIGluZGV4LCBjb250ZXh0cywgc3VwcG9ydCk7XG4gICAgICAgICsraW5kZXg7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0cztcbn1cbi8qKiByZXR1cm5zIGJvb2xlYW4gb2YgZGlkIHJlbmRlciAqL1xuZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZU9uZUNvbnRleHQodmFsdWVzLCAvLyB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlc1xuaW5kZXgsIGNvbnRleHRzLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IGNvbnRleHRzW2luZGV4XTtcbiAgICBpZiAoY29udGV4dEl0ZW0uZGVsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHNvbWUgdmFsdWVzLCBsaWtlIHN0eWxlLCBnZXQgcmVhcnJhbmdlZCBhbmQgdGhlcmUgdmFsdWUgYXBwZWFyYW5jZSBtYXkgbm90IG1hdGNoIGNvbnRleHQgYXBwZWFyYW5jZVxuICAgIGNvbnN0IHZhbHVlSW5kZXggPSBjb250ZXh0SXRlbS52YWx1ZUluZGV4O1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWVzW3ZhbHVlSW5kZXhdO1xuICAgIC8vIFJlbW92ZWQsIGxldCB0aGUgdGFnSnNWYXJzIGRvIHRoZSBjaGVja2luZ1xuICAgIC8vIERvIG5vdCBjb250aW51ZSBpZiB0aGUgdmFsdWUgaXMganVzdCB0aGUgc2FtZVxuICAgIC8qXG4gICAgaWYobmV3VmFsdWUgPT09IGNvbnRleHRJdGVtLnZhbHVlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgKi9cbiAgICBjb25zdCB0YWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHRJdGVtKTtcbiAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCB2YWx1ZXMpO1xuICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSBuZXdWYWx1ZTtcbn1cbiIsImltcG9ydCB7IHBhaW50LCBwYWludGluZyB9IGZyb20gJy4uL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NVcGRhdGVDb250ZXh0IH0gZnJvbSAnLi4vLi4vdGFnL3Byb2Nlc3NVcGRhdGVDb250ZXh0LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTdXBwb3J0Qnkob2xkZXJTdXBwb3J0LCBuZXdlclN1cHBvcnQpIHtcbiAgICBjb25zdCBjb250ZXh0cyA9IG9sZGVyU3VwcG9ydC5jb250ZXh0LmNvbnRleHRzO1xuICAgIHVwZGF0ZVN1cHBvcnRWYWx1ZXNCeShvbGRlclN1cHBvcnQsIG5ld2VyU3VwcG9ydCk7XG4gICAgKytwYWludGluZy5sb2NrcztcbiAgICBwcm9jZXNzVXBkYXRlQ29udGV4dChvbGRlclN1cHBvcnQsIGNvbnRleHRzKTtcbiAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgIHBhaW50KCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3VwcG9ydFZhbHVlc0J5KG9sZGVyU3VwcG9ydCwgbmV3ZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgbmV3VGVtcGxhdGUgPSBuZXdlclN1cHBvcnQudGVtcGxhdGVyO1xuICAgIGNvbnN0IHRlbXBUYWcgPSBuZXdlclN1cHBvcnQudGVtcGxhdGVyLnRhZztcbiAgICBjb25zdCB2YWx1ZXMgPSBuZXdUZW1wbGF0ZS52YWx1ZXMgfHwgdGVtcFRhZy52YWx1ZXM7XG4gICAgY29uc3QgdGFnID0gb2xkZXJTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgdGFnLnZhbHVlcyA9IHZhbHVlcztcbn1cbiIsImltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGdldE5ld0dsb2JhbCB9IGZyb20gJy4vZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGhhbmRsZVN0aWxsVGFnIH0gZnJvbSAnLi9oYW5kbGVTdGlsbFRhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB1cGRhdGVFeGlzdGluZ1RhZ0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL3JlbmRlci91cGRhdGUvdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuLyoqIHJlc3VsdCBpcyBhbiBpbmRpY2F0aW9uIHRvIGlnbm9yZSBmdXJ0aGVyIHByb2Nlc3NpbmcgYnV0IHRoYXQgZG9lcyBub3Qgc2VlbSBpbiB1c2UgYW55bW9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeVVwZGF0ZVRvVGFnKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgLy8gbmV3VmFsdWVcbm93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IGlzQ29tcCA9IGlzVGFnQ29tcG9uZW50KG5ld1ZhbHVlKTtcbiAgICBpZiAoaXNDb21wKSB7XG4gICAgICAgIGlmIChjb250ZXh0SXRlbS5nbG9iYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0SXRlbS5vbGRUYWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgICAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IG5ld1ZhbHVlO1xuICAgICAgICBwcmVwYXJlVXBkYXRlVG9Db21wb25lbnQobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gZGV0ZWN0IGlmIHByZXZpb3VzIHZhbHVlIHdhcyBhIHRhZ1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHRJdGVtLmdsb2JhbDtcbiAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gbmV3VmFsdWU7XG4gICAgICAgIC8vIGl0cyBodG1sL2RvbSBiYXNlZCB0YWdcbiAgICAgICAgY29uc3Qgc3VwcG9ydCA9IGNvbnRleHRJdGVtLnN0YXRlLm5ld2VzdDtcbiAgICAgICAgaWYgKHN1cHBvcnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG5ld1ZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlU3RpbGxUYWcoc3VwcG9ydCwgY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgO1xuICAgIG5ld1ZhbHVlLnByb2Nlc3NJbml0KG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcik7XG4gICAgY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IG5ld1ZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gcHJlcGFyZVVwZGF0ZVRvQ29tcG9uZW50KHRlbXBsYXRlciwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIC8vIFdoZW4gbGFzdCB2YWx1ZSB3YXMgbm90IGEgY29tcG9uZW50XG4gICAgaWYgKCFjb250ZXh0SXRlbS5zdGF0ZS5uZXdlc3QpIHtcbiAgICAgICAgO1xuICAgICAgICB0ZW1wbGF0ZXIucHJvY2Vzc0luaXQodGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQob3duZXJTdXBwb3J0LCBzdXBwb3J0LCAvLyBsYXRlc3QgdmFsdWVcbiAgICBjb250ZXh0SXRlbSk7XG59XG4iLCJpbXBvcnQgeyB1cGRhdGVTdXBwb3J0QnkgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3VwZGF0ZVN1cHBvcnRCeS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdXBwb3J0IH0gZnJvbSAnLi4vY3JlYXRlU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlU3RpbGxUYWcob2xkU3VwcG9ydCwgc3ViamVjdCwgdmFsdWUsIG93bmVyU3VwcG9ydCkge1xuICAgIC8vIFZhbHVlIGlzIHJlc3VsdCBvZiBlaXRoZXIgdGFnKCgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExNDA1OFswXSkpIG9yICgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExNDA1OFsxXSlcbiAgICBsZXQgdGVtcGxhdGVyID0gdmFsdWUudGVtcGxhdGVyIHx8IHZhbHVlO1xuICAgIGNvbnN0IG9sZFR0YWcgPSBvbGRTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgaWYgKG9sZFR0YWcpIHtcbiAgICAgICAgY29uc3QgaW5uZXJIVE1MID0gb2xkVHRhZy5faW5uZXJIVE1MO1xuICAgICAgICBpZiAoaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAvLyBWYWx1ZSBoYXMgaW5uZXJIVE1MIHRoYXQgaXMgZWl0aGVyIHRhZygpIG9yIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExNDA1OFsyXSlcbiAgICAgICAgICAgIHRlbXBsYXRlciA9IHZhbHVlLm91dGVySFRNTCB8fCB2YWx1ZS5faW5uZXJIVE1MLm91dGVySFRNTDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2YWx1ZVN1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCwgc3ViamVjdCk7XG4gICAgY29uc3QgbGFzdFN1YmplY3QgPSBvbGRTdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3Qgb2xkZXN0ID0gbGFzdFN1YmplY3Quc3RhdGUub2xkZXN0O1xuICAgIHVwZGF0ZVN1cHBvcnRCeShvbGRlc3QsIHZhbHVlU3VwcG9ydCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTE0MDU4OiBbW10sIFtdLCBbXV0gfTtcbiIsImltcG9ydCB7IEJhc2ljVHlwZXMsIFZhbHVlVHlwZXMgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyB0cnlVcGRhdGVUb1RhZyB9IGZyb20gJy4vdHJ5VXBkYXRlVG9UYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uLy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0FycmF5IH0gZnJvbSAnLi9hcnJheXMvcHJvY2Vzc1RhZ0FycmF5LmpzJztcbmltcG9ydCB7IHByb2Nlc3NOb3dSZWd1bGFyVmFsdWUgfSBmcm9tICcuL3Byb2Nlc3NSZWd1bGFyVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0QXJyYXlUYWdWYXIgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvZ2V0QXJyYXlUYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVG9EaWZmVmFsdWUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGlnbm9yZU9yRGVzdHJveWVkKSB7XG4gICAgLy8gaXMgbmV3IHZhbHVlIGEgdGFnP1xuICAgIGNvbnN0IHRhZ0pzVHlwZSA9IG5ld1ZhbHVlICYmIG5ld1ZhbHVlLnRhZ0pzVHlwZTtcbiAgICBpZiAodGFnSnNUeXBlKSB7XG4gICAgICAgIGlmICh0YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMucmVuZGVyT25jZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeVVwZGF0ZVRvVGFnKGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShuZXdWYWx1ZSkpIHtcbiAgICAgICAgcHJvY2Vzc1RhZ0FycmF5KGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICAgICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBnZXRBcnJheVRhZ1ZhcihuZXdWYWx1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAobmV3VmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnRleHRJdGVtLnZhbHVlID0gbmV3VmFsdWU7IC8vIGRvIG5vdCByZW5kZXIgZnVuY3Rpb25zIHRoYXQgYXJlIG5vdCBleHBsaWNpdHkgZGVmaW5lZCBhcyB0YWcgaHRtbCBwcm9jZXNzaW5nXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlnbm9yZU9yRGVzdHJveWVkKSB7IC8vIFRPRE86IGlzIHRoaXMgY2hlY2sgcmVhbGx5IG5lZWRlZD9cbiAgICAgICAgcHJvY2Vzc05vd1JlZ3VsYXJWYWx1ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHVwZGF0ZVRvRGlmZlZhbHVlIH0gZnJvbSAnLi91cGRhdGVUb0RpZmZWYWx1ZS5mdW5jdGlvbi5qcyc7XG4vKiogdXNlZCB0byBoYW5kbGUgd2hlbiB2YWx1ZSB3YXMgc3Vic2NyaWJlIGJ1dCBub3cgaXMgc29tZXRoaW5nIGVsc2UgKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVUYWdUeXBlQ2hhbmdlRnJvbShvcmlnaW5hbFR5cGUsIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgaXNEaWZmZXJlbnQgPSAhbmV3VmFsdWUgfHwgIW5ld1ZhbHVlLnRhZ0pzVHlwZSB8fCBuZXdWYWx1ZS50YWdKc1R5cGUgIT09IG9yaWdpbmFsVHlwZTtcbiAgICBpZiAoaXNEaWZmZXJlbnQpIHtcbiAgICAgICAgY29uc3Qgb2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICAgICAgb2xkVGFnSnNWYXIuZGVzdHJveShjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgdXBkYXRlVG9EaWZmVmFsdWUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCAvLyBzdWJTdWJDb250ZXh0LFxuICAgICAgICBvd25lclN1cHBvcnQsIDk5KTtcbiAgICAgICAgcmV0dXJuIDk5O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20gfSBmcm9tICcuL2hhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1N0aWxsU3Vic2NyaXB0aW9uKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgY29uc3QgaGFzQ2hhbmdlZCA9IGhhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tKFZhbHVlVHlwZXMuc3Vic2NyaWJlLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc0NoYW5nZWQ7XG4gICAgfVxuICAgIGlmICghc3ViQ29udGV4dCB8fCAhc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBzdWJDb250ZXh0LnRhZ0pzVmFyID0gbmV3VmFsdWU7XG4gICAgc3ViQ29udGV4dC52YWx1ZXNIYW5kbGVyKHN1YkNvbnRleHQubGFzdFZhbHVlcywgMCk7XG4gICAgcmV0dXJuIDA7XG59XG4iLCJpbXBvcnQgeyBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIsIHByb2Nlc3NUYWcsIHRhZ0Zha2VUZW1wbGF0ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05ld1N1YmplY3RUYWcgfSBmcm9tICcuL3Byb2Nlc3NOZXdTdWJqZWN0VGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRG9tVGFnSW5pdCh2YWx1ZSwgLy8gU3RyaW5nVGFnLFxuY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xub3duZXJTdXBwb3J0LCAvLyBvd25pbmdTdXBwb3J0XG5pbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29uc3QgdGFnID0gdmFsdWU7XG4gICAgbGV0IHRlbXBsYXRlciA9IHRhZy50ZW1wbGF0ZXI7XG4gICAgaWYgKCF0ZW1wbGF0ZXIpIHtcbiAgICAgICAgdGVtcGxhdGVyID0gdGFnRmFrZVRlbXBsYXRlcih0YWcpO1xuICAgIH1cbiAgICBnZXROZXdHbG9iYWwoY29udGV4dEl0ZW0pO1xuICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc05ld1N1YmplY3RUYWcodGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dEl0ZW0uc3RhdGUgPSBjb250ZXh0SXRlbS5zdGF0ZSB8fCB7fTtcbiAgICBzdGF0ZU1ldGEubmV3ZXN0ID0gbmV3U3VwcG9ydEJ5VGVtcGxhdGVyKHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIHByb2Nlc3NUYWcob3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRG9tVGFnSW5pdCB9IGZyb20gJy4vdXBkYXRlL3Byb2Nlc3NEb21UYWdJbml0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNoZWNrVGFnVmFsdWVDaGFuZ2VBbmRVcGRhdGUgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tICcuL3VwZGF0ZS9mb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSB9IGZyb20gJy4vZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIHRvIG92ZXJyaWRlIHRoZSBodG1sYGAgcHJvY2Vzc2luZyB0aGF0IHdpbGwgZmlyc3QgcmVuZGVyIG91dGVySFRNTCBhbmQgdGhlbiBpdHMgaW5uZXJIVE1MICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc091dGVyRG9tVGFnSW5pdCh2YWx1ZSwgY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xub3duZXJTdXBwb3J0LCAvLyBvd25pbmdTdXBwb3J0XG5pbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29uc3Qgb3V0ZXJIVE1MID0gdmFsdWUub3V0ZXJIVE1MO1xuICAgIHByb2Nlc3NEb21UYWdJbml0KG91dGVySFRNTCwgY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xuICAgIG93bmVyU3VwcG9ydCwgLy8gb3duaW5nU3VwcG9ydFxuICAgIGluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgIC8vIGNvbnRleHRJdGVtLmhhbmRsZXIgPSBmdW5jdGlvbiBvdXREb21UYWdIYW5sZGVyKFxuICAgIGNvbnN0IHRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgdGFnSnNWYXIucHJvY2Vzc1VwZGF0ZSA9IGZ1bmN0aW9uIG91dERvbVRhZ0hhbmxkZXIodmFsdWUsIGNvbnRleHRJdGVtMiwgbmV3U3VwcG9ydCkge1xuICAgICAgICBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUoY29udGV4dEl0ZW0yLCB2YWx1ZT8ub3V0ZXJIVE1MIHx8IHZhbHVlLCBuZXdTdXBwb3J0KTtcbiAgICB9O1xuICAgIC8vIFRPRE86IE5vdCBiZXN0IGlkZWEgdG8gc3dhcCBvdXQgdGhlIG9yaWdpbmFsIHZhbHVlcyBjaGFuZ2VDaGVja2VyXG4gICAgdmFsdWUuaGFzVmFsdWVDaGFuZ2VkID0gY2hlY2tPdXRlclRhZ1ZhbHVlQ2hhbmdlO1xufVxuZnVuY3Rpb24gY2hlY2tPdXRlclRhZ1ZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIHJldHVybiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlKG5ld1ZhbHVlLCAvLyAobmV3VmFsdWUgYXMgVGFnKT8ub3V0ZXJIVE1MIHx8IG5ld1ZhbHVlLFxuICAgIGNvbnRleHRJdGVtKTtcbn1cbi8qKiB0YWcoaHRtbGBgKSBXaGVuIHJ1bnRpbWUgaXMgaW4gYnJvd3NlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ1RhZyhzdHJpbmdzLCB2YWx1ZXMpIHtcbiAgICBjb25zdCB0YWcgPSB7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgb3duZXJTdXBwb3J0OiBnZXRTdXBwb3J0SW5DeWNsZSgpLFxuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMudGFnLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc0RvbVRhZ0luaXQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcixcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0sXG4gICAgICAgIHN0cmluZ3MsXG4gICAgICAgIC8qKiBVc2VkIHdpdGhpbiBhbiBhcnJheS5tYXAoKSB0aGF0IHJldHVybnMgaHRtbCBha2EgYXJyYXkubWFwKHggPT4gaHRtbGBgLmtleSh4KSkgKi9cbiAgICAgICAga2V5KGFycmF5VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXlUYWcoYXJyYXlWYWx1ZSwgdGFnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIGFrYSBzZXRJbm5lckhUTUwgKi9cbiAgICAgICAgc2V0SFRNTDogZnVuY3Rpb24gc2V0SFRNTChpbm5lckhUTUwpIHtcbiAgICAgICAgICAgIGlubmVySFRNTC5vdXRlckhUTUwgPSB0YWc7XG4gICAgICAgICAgICB0YWcuX2lubmVySFRNTCA9IGlubmVySFRNTDtcbiAgICAgICAgICAgIGlubmVySFRNTC5vbGRQcm9jZXNzSW5pdCA9IGlubmVySFRNTC5wcm9jZXNzSW5pdDtcbiAgICAgICAgICAgIC8vIFRPRE86IE5vdCBiZXN0IGlkZWEgdG8gb3ZlcnJpZGUgdGhlIGluaXRcbiAgICAgICAgICAgIGlubmVySFRNTC5wcm9jZXNzSW5pdCA9IHByb2Nlc3NPdXRlckRvbVRhZ0luaXQ7XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9LFxuICAgICAgICAvKiogVXNlZCB3aXRoaW4gdGhlIG91dGVySFRNTCB0YWcgdG8gc2lnbmlmeSB0aGF0IGl0IGNhbiB1c2UgaW5uZXJIVE1MICovXG4gICAgICAgIGFjY2VwdElubmVySFRNTDogZnVuY3Rpb24gYWNjZXB0SW5uZXJIVE1MKHVzZVRhZ1Zhcikge1xuICAgICAgICAgICAgLy8gVE9ETzogZGF0YXR5cGVcbiAgICAgICAgICAgIHVzZVRhZ1Zhci5vd25lciA9IHRhZztcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH0sXG4gICAgICAgIGh0bWw6IGZ1bmN0aW9uIGh0bWwoc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgICAgICAgICB0YWcuY2hpbGRyZW4gPSB7IHN0cmluZ3MsIHZhbHVlcyB9O1xuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhZywgJ2lubmVySFRNTCcsIHtcbiAgICAgICAgc2V0KGlubmVySFRNTCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZy5zZXRIVE1MKGlubmVySFRNTCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRhZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlUYWcoYXJyYXlWYWx1ZSwgdGFnKSB7XG4gICAga2V5VGFnKGFycmF5VmFsdWUsIHRhZyk7XG4gICAgdGFnLmFycmF5VmFsdWUgPSBhcnJheVZhbHVlO1xuICAgIHJldHVybiB0YWc7XG59XG4iLCJpbXBvcnQgeyBnZXREb21UYWcgfSBmcm9tICcuL2dldERvbVRhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBQcm9wV2F0Y2hlcyB9IGZyb20gJy4uL3RhZ0pzVmFycy90YWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0VGVtcGxhdGVyUmVzdWx0IH0gZnJvbSAnLi9nZXRUZW1wbGF0ZXJSZXN1bHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3RyaW5nVGFnIH0gZnJvbSAnLi9wcm9jZXNzT3V0ZXJEb21UYWdJbml0LmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIGFzIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczExNjc3M1sxXSkgKi9cbmV4cG9ydCBmdW5jdGlvbiBodG1sKHN0cmluZ3MsIC4uLnZhbHVlcykge1xuICAgIGNvbnN0IHN0cmluZ1RhZyA9IGdldFN0cmluZ1RhZyhzdHJpbmdzLCB2YWx1ZXMpO1xuICAgIGNvbnN0IHRlbXBsYXRlciA9IGdldFRlbXBsYXRlclJlc3VsdChQcm9wV2F0Y2hlcy5OT05FKTtcbiAgICB0ZW1wbGF0ZXIudGFnID0gc3RyaW5nVGFnO1xuICAgIHN0cmluZ1RhZy50ZW1wbGF0ZXIgPSB0ZW1wbGF0ZXI7XG4gICAgcmV0dXJuIHN0cmluZ1RhZztcbn1cbmh0bWwuZG9tID0gZnVuY3Rpb24gKGRvbSwgLi4udmFsdWVzKSB7XG4gICAgcmV0dXJuIGdldERvbVRhZyhkb20sIHZhbHVlcyk7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczExNjc3MzogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiIH1dXSB9O1xuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0RvbVRhZ0luaXQgfSBmcm9tICcuL3VwZGF0ZS9wcm9jZXNzRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgcHJvY2Vzc091dGVyRG9tVGFnSW5pdCB9IGZyb20gJy4vcHJvY2Vzc091dGVyRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIH0gZnJvbSAnLi9kZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0uZnVuY3Rpb24uanMnO1xuLyoqIFdoZW4gY29tcGlsZWQgdG8gdGhlbiBydW4gaW4gYnJvd3NlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERvbVRhZyhkb20sIHZhbHVlcykge1xuICAgIGNvbnN0IHRhZyA9IHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBvd25lclN1cHBvcnQ6IGdldFN1cHBvcnRJbkN5Y2xlKCksXG4gICAgICAgIGRvbSxcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLmRvbSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NEb21UYWdJbml0LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSxcbiAgICAgICAgZGVzdHJveTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBrZXk6IGZ1bmN0aW9uIGtleUZ1bihhcnJheVZhbHVlKSB7XG4gICAgICAgICAgICB0YWcuYXJyYXlWYWx1ZSA9IGFycmF5VmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9LFxuICAgICAgICBzZXRIVE1MOiBmdW5jdGlvbiBzZXRIVE1MKGlubmVySFRNTCkge1xuICAgICAgICAgICAgaW5uZXJIVE1MLm91dGVySFRNTCA9IHRhZztcbiAgICAgICAgICAgIHRhZy5faW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICAgICAgICAgICAgaW5uZXJIVE1MLm9sZFByb2Nlc3NJbml0ID0gaW5uZXJIVE1MLnByb2Nlc3NJbml0O1xuICAgICAgICAgICAgLy8gVE9ETzogTm90IGJlc3QgaWRlYSB0byBvdmVycmlkZSB0aGUgaW5pdFxuICAgICAgICAgICAgaW5uZXJIVE1MLnByb2Nlc3NJbml0ID0gcHJvY2Vzc091dGVyRG9tVGFnSW5pdDtcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBVc2VkIHdpdGhpbiB0aGUgb3V0ZXJIVE1MIHRhZyB0byBzaWduaWZ5IHRoYXQgaXQgY2FuIHVzZSBpbm5lckhUTUwgKi9cbiAgICAgICAgYWNjZXB0SW5uZXJIVE1MOiBmdW5jdGlvbiBhY2NlcHRJbm5lckhUTUwodXNlVGFnVmFyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBkYXRhdHlwZVxuICAgICAgICAgICAgdXNlVGFnVmFyLm93bmVyID0gdGFnO1xuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfSxcbiAgICAgICAgaHRtbDoge1xuICAgICAgICAgICAgZG9tOiBmdW5jdGlvbiBkb20oZG9tLCAvLyBPYmplY3RDaGlsZHJlblxuICAgICAgICAgICAgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgdGFnLmNoaWxkcmVuID0geyBkb206IGRvbSwgdmFsdWVzIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhZywgJ2lubmVySFRNTCcsIHtcbiAgICAgICAgc2V0KGlubmVySFRNTCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZy5zZXRIVE1MKGlubmVySFRNTCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRhZztcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGFwcEVsZW1lbnRzLCBidWlsZEJlZm9yZUVsZW1lbnQgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJUYWdFbGVtZW50KHN1cHBvcnQsIGVsZW1lbnQsIGdsb2JhbCwgdGVtcGxhdGVyLCBhcHAsIHBsYWNlaG9sZGVyKSB7XG4gICAgLy8gY29uc29sZS5kZWJ1Zygn8J+Pt++4jyBCdWlsZGluZyBlbGVtZW50IGludG8gdGFnLi4uJywge2VsZW1lbnQsIGFwcCwgc3VwcG9ydH0pXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGVsZW1lbnQsIHVuZGVmaW5lZCk7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBzdWJqZWN0LnN0YXRlLm9sZGVzdCA9IHN1cHBvcnQ7XG4gICAgc3ViamVjdC5zdGF0ZS5uZXdlc3QgPSBzdXBwb3J0O1xuICAgIC8vIENvcHkgbmV3ZXIgdG8gb2xkZXIgd2hlbiByZXNldHRpbmdcbiAgICBzdWJqZWN0LnN0YXRlLm9sZGVyID0gc3ViamVjdC5zdGF0ZS5uZXdlcjtcbiAgICBsZXQgc2V0VXNlID0gdGVtcGxhdGVyLnNldFVzZTtcbiAgICBpZiAodGVtcGxhdGVyLnRhZ0pzVHlwZSAhPT0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcikge1xuICAgICAgICBjb25zdCB3cmFwID0gYXBwO1xuICAgICAgICBjb25zdCBvcmlnaW5hbCA9IHdyYXAub3JpZ2luYWw7XG4gICAgICAgIHNldFVzZSA9IG9yaWdpbmFsLnNldFVzZTtcbiAgICAgICAgb3JpZ2luYWwuaXNBcHAgPSB0cnVlO1xuICAgIH1cbiAgICA7XG4gICAgZWxlbWVudC5zZXRVc2UgPSBzZXRVc2U7XG4gICAgZWxlbWVudC5WYWx1ZVR5cGVzID0gVmFsdWVUeXBlcztcbiAgICBhcHBFbGVtZW50cy5wdXNoKHsgZWxlbWVudCwgc3VwcG9ydCB9KTtcbiAgICBjb25zdCBuZXdGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBuZXdGcmFnbWVudC5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG4gICAgZm9yIChjb25zdCBkb21JdGVtIG9mIHJlc3VsdC5kb20pIHtcbiAgICAgICAgcHV0T25lRG9tRG93bihkb21JdGVtLCBuZXdGcmFnbWVudCk7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUuZGVidWcoJ/Cfj7fvuI8gRWxlbWVudCBUYWcgRE9NIGJ1aWx0IOKchScpXG4gICAgcmV0dXJuIG5ld0ZyYWdtZW50O1xufVxuZnVuY3Rpb24gcHV0T25lRG9tRG93bihkb20sIG5ld0ZyYWdtZW50KSB7XG4gICAgaWYgKGRvbS5kb21FbGVtZW50KSB7XG4gICAgICAgIG5ld0ZyYWdtZW50LmFwcGVuZENoaWxkKGRvbS5kb21FbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGRvbS5tYXJrZXIpIHtcbiAgICAgICAgbmV3RnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9tLm1hcmtlcik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0QmFzZVN1cHBvcnQsIHVwZ3JhZGVCYXNlVG9TdXBwb3J0IH0gZnJvbSAnLi9jcmVhdGVIdG1sU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gbG9hZE5ld0Jhc2VTdXBwb3J0KHRlbXBsYXRlciwgc3ViamVjdCwgYXBwRWxlbWVudCkge1xuICAgIGNvbnN0IG5ld1N1cHBvcnQgPSBnZXRCYXNlU3VwcG9ydCh0ZW1wbGF0ZXIsIHN1YmplY3QpO1xuICAgIHVwZ3JhZGVCYXNlVG9TdXBwb3J0KHRlbXBsYXRlciwgbmV3U3VwcG9ydCwgbmV3U3VwcG9ydCk7XG4gICAgbmV3U3VwcG9ydC5hcHBFbGVtZW50ID0gYXBwRWxlbWVudDtcbiAgICAvLyBJbml0aWFsaXplIG9sZGVyL25ld2VyIHdpdGggZW1wdHkgc3RhdGUgaWYgZmlyc3QgcmVuZGVyXG4gICAgaWYgKCFzdWJqZWN0LnN0YXRlLm9sZGVzdCkge1xuICAgICAgICBzdWJqZWN0LnN0YXRlLm9sZGVzdCA9IG5ld1N1cHBvcnQ7XG4gICAgICAgIHN1YmplY3Quc3RhdGUub2xkZXIgPSBzdWJqZWN0LnN0YXRlLm5ld2VyO1xuICAgIH1cbiAgICBzdWJqZWN0LnN0YXRlLm5ld2VzdCA9IG5ld1N1cHBvcnQ7XG4gICAgcmV0dXJuIG5ld1N1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyB0YWdzIH0gZnJvbSAnLi4vdGFnL3RhZy51dGlscy5qcyc7XG5pbXBvcnQgeyBlbXB0eSwgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuL2Rlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50LCBwYWludGluZyB9IGZyb20gJy4vcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL3RhZy9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJ1bkFmdGVyU3VwcG9ydFJlbmRlciB9IGZyb20gJy4vcnVuQWZ0ZXJSZW5kZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZXhlY3V0ZVdyYXAgfSBmcm9tICcuL2V4ZWN1dGVXcmFwLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlZ2lzdGVyVGFnRWxlbWVudCB9IGZyb20gJy4vcmVnaXN0ZXJOZXdUYWdFbGVtZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGxvYWROZXdCYXNlU3VwcG9ydCB9IGZyb20gJy4uL3RhZy9sb2FkTmV3QmFzZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVTdGF0ZVN1cHBvcnQgfSBmcm9tICcuLi9zdGF0ZS9zdGF0ZS51dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVGFnRWxlbWVudChhcHAsIGdsb2JhbCwgdGVtcGxhdGVyLCB0ZW1wbGF0ZXIyLCBlbGVtZW50LCBzdWJqZWN0LCBpc0FwcEZ1bmN0aW9uKSB7XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlbXB0eSk7XG4gICAgdGFncy5wdXNoKCh0ZW1wbGF0ZXIud3JhcHBlciB8fCB7IG9yaWdpbmFsOiB0ZW1wbGF0ZXIgfSkpO1xuICAgIGNvbnN0IHN1cHBvcnQgPSBydW5XcmFwcGVyKHRlbXBsYXRlciwgcGxhY2Vob2xkZXIsIGVsZW1lbnQsIHN1YmplY3QsIGlzQXBwRnVuY3Rpb24pO1xuICAgIGdsb2JhbC5pc0FwcCA9IHRydWU7XG4gICAgaWYgKGlzQXBwRnVuY3Rpb24pIHtcbiAgICAgICAgdGVtcGxhdGVyMi50YWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgfVxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB0YWdFbGVtZW50LCBlbGVtZW50IHJlY2VpdmVkIGlzIHR5cGUgJHt0eXBlb2YgZWxlbWVudH0gYW5kIG5vdCB0eXBlIEVsZW1lbnRgKTtcbiAgICB9XG4gICAgLy8gZW5hYmxlcyBobXIgZGVzdHJveSBzbyBpdCBjYW4gY29udHJvbCBlbnRpcmUgYXBwXG4gICAgO1xuICAgIGVsZW1lbnQuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gZ2xvYmFsLmV2ZW50cztcbiAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbC5ldmVudHMgPSB7fTtcbiAgICAgICAgKytwYWludGluZy5sb2NrcztcbiAgICAgICAgY29uc3QgdG9Bd2FpdCA9IGRlc3Ryb3lTdXBwb3J0KHN1cHBvcnQsIGdsb2JhbCk7IC8vIG5ldmVyIHJldHVybiBhbnl0aGluZyBoZXJlXG4gICAgICAgIC0tcGFpbnRpbmcubG9ja3M7XG4gICAgICAgIHBhaW50KCk7XG4gICAgICAgIHJldHVybiB0b0F3YWl0O1xuICAgIH07XG4gICAgKytwYWludGluZy5sb2NrcztcbiAgICBjb25zdCBuZXdGcmFnbWVudCA9IHJlZ2lzdGVyVGFnRWxlbWVudChzdXBwb3J0LCBlbGVtZW50LCBnbG9iYWwsIHRlbXBsYXRlciwgYXBwLCBwbGFjZWhvbGRlcik7XG4gICAgLS1wYWludGluZy5sb2NrcztcbiAgICBwYWludCgpO1xuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RnJhZ21lbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1cHBvcnQsXG4gICAgICAgIHRhZ3MsXG4gICAgICAgIFZhbHVlVHlwZXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBydW5XcmFwcGVyKHRlbXBsYXRlciwgcGxhY2Vob2xkZXIsIGFwcEVsZW1lbnQsIHN1YmplY3QsIGlzQXBwRnVuY3Rpb24pIHtcbiAgICBzdWJqZWN0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgY29uc3Qgb2xkZXN0ID0gc3ViamVjdC5zdGF0ZS5vbGRlc3Q7XG4gICAgY29uc3QgbmV3ZXN0ID0gc3ViamVjdC5zdGF0ZS5uZXdlc3Q7XG4gICAgY29uc3QgaXNGaXJzdFJlbmRlciA9IG5ld2VzdCA9PT0gb2xkZXN0O1xuICAgIGNvbnN0IG5ld1N1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgbmV3ZXN0LCBuZXdlc3QuYXBwU3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0LmFwcFN1cHBvcnQgYXMgQW55U3VwcG9ydCxcbiAgICBzdWJqZWN0KTtcbiAgICBpZiAoIWlzRmlyc3RSZW5kZXIpIHtcbiAgICAgICAgY29uc3Qgb2xkZXJTdGF0ZUNvbnRleHQgPSBzdWJqZWN0LnN0YXRlLm9sZGVyO1xuICAgICAgICByZVN0YXRlU3VwcG9ydChuZXdTdXBwb3J0LCBuZXdlc3QsIG9sZGVyU3RhdGVDb250ZXh0LnN0YXRlKTtcbiAgICB9XG4gICAgaWYgKHRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVTdGF0ZVdyYXAodGVtcGxhdGVyLCBpc0FwcEZ1bmN0aW9uLCBuZXdTdXBwb3J0LCBzdWJqZWN0LCBhcHBFbGVtZW50KTtcbiAgICB9XG4gICAgLy8gQ2FsbCB0aGUgYXBwcyBmdW5jdGlvbiBmb3Igb3VyIHRhZyB0ZW1wbGF0ZXJcbiAgICBjb25zdCB3cmFwcGVyID0gdGVtcGxhdGVyLndyYXBwZXI7XG4gICAgY29uc3Qgbm93U3VwcG9ydCA9IHdyYXBwZXIobmV3U3VwcG9ydCwgc3ViamVjdCk7XG4gICAgcnVuQWZ0ZXJTdXBwb3J0UmVuZGVyKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBub3dTdXBwb3J0O1xufVxuZnVuY3Rpb24gZXhlY3V0ZVN0YXRlV3JhcCh0ZW1wbGF0ZXIsIGlzQXBwRnVuY3Rpb24sIG5ld1N1cHBvcnQsIHN1YmplY3QsIGFwcEVsZW1lbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSAodGVtcGxhdGVyLndyYXBwZXIgfHwgeyBvcmlnaW5hbDogdGVtcGxhdGVyIH0pO1xuICAgIGlmICghaXNBcHBGdW5jdGlvbikge1xuICAgICAgICBjb25zdCBuZXdTdXBwb3J0ID0gbG9hZE5ld0Jhc2VTdXBwb3J0KHRlbXBsYXRlciwgc3ViamVjdCwgYXBwRWxlbWVudCk7XG4gICAgICAgIHJ1bkFmdGVyU3VwcG9ydFJlbmRlcihuZXdTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIG5ld1N1cHBvcnQ7XG4gICAgfVxuICAgIGV4ZWN1dGVXcmFwKHRlbXBsYXRlciwgcmVzdWx0LCBuZXdTdXBwb3J0KTtcbiAgICBydW5BZnRlclN1cHBvcnRSZW5kZXIobmV3U3VwcG9ydCk7XG4gICAgcmV0dXJuIG5ld1N1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuL3VwZGF0ZS9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgQmFzaWNUeXBlcywgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0IH0gZnJvbSAnLi4vcmVuZGVyL2Rlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBpbml0U3RhdGUgfSBmcm9tICcuLi9zdGF0ZS9zdGF0ZS51dGlscy5qcyc7XG5pbXBvcnQgeyBpc1RhZ0NvbXBvbmVudCB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4vY2hlY2tUYWdWYWx1ZUNoYW5nZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0gfSBmcm9tICcuL2Rlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL3JlbmRlclRhZ0VsZW1lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgbG9hZE5ld0Jhc2VTdXBwb3J0IH0gZnJvbSAnLi9sb2FkTmV3QmFzZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL3N1YmplY3QvU3ViamVjdC5jbGFzcy5qcyc7XG5pZiAodHlwZW9mIChkb2N1bWVudCkgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKGRvY3VtZW50LnRhZ2dlZEpzKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign8J+Pt++4j/Cfj7fvuI8gTXVsdGlwbGUgdmVyc2lvbnMgb2YgdGFnZ2VkanMgYXJlIGxvYWRlZC4gTWF5IGNhdXNlIGlzc3Vlcy4nKTtcbiAgICB9XG4gICAgZG9jdW1lbnQudGFnZ2VkSnMgPSB0cnVlO1xufVxuZXhwb3J0IGNvbnN0IGFwcEVsZW1lbnRzID0gW107XG4vKipcbiAqXG4gKiBAcGFyYW0gYXBwIHRhZ2dlZGpzIHRhZ1xuICogQHBhcmFtIGVsZW1lbnQgSFRNTEVsZW1lbnRcbiAqIEBwYXJhbSBwcm9wcyBvYmplY3RcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWdFbGVtZW50KGFwcCwgZWxlbWVudCwgcHJvcHMpIHtcbiAgICBjb25zdCBhcHBFbG1JbmRleCA9IGFwcEVsZW1lbnRzLmZpbmRJbmRleChhcHBFbG0gPT4gYXBwRWxtLmVsZW1lbnQgPT09IGVsZW1lbnQpO1xuICAgIGlmIChhcHBFbG1JbmRleCA+PSAwKSB7XG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBhcHBFbGVtZW50c1thcHBFbG1JbmRleF0uc3VwcG9ydDtcbiAgICAgICAgZGVzdHJveVN1cHBvcnQoc3VwcG9ydCwgc3VwcG9ydC5jb250ZXh0Lmdsb2JhbCk7XG4gICAgICAgIGFwcEVsZW1lbnRzLnNwbGljZShhcHBFbG1JbmRleCwgMSk7XG4gICAgICAgIC8vIGFuIGVsZW1lbnQgYWxyZWFkeSBoYWQgYW4gYXBwIG9uIGl0XG4gICAgICAgIGNvbnNvbGUud2FybignRm91bmQgYW5kIGRlc3Ryb3llZCBhcHAgZWxlbWVudCBhbHJlYWR5IHJlbmRlcmVkIHRvIGVsZW1lbnQnLCB7IGVsZW1lbnQgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSB0aGUgYXBwIHdoaWNoIHJldHVybnMgW3Byb3BzLCBydW5PbmVUaW1lRnVuY3Rpb25dXG4gICAgbGV0IHRlbXBsYXRlciA9ICgoKSA9PiB0ZW1wbGF0ZXIyKHByb3BzKSk7XG4gICAgdGVtcGxhdGVyLnByb3BXYXRjaCA9IFByb3BXYXRjaGVzLk5PTkU7XG4gICAgdGVtcGxhdGVyLnRhZ0pzVHlwZSA9IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXI7XG4gICAgdGVtcGxhdGVyLnByb2Nlc3NVcGRhdGUgPSB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXI7XG4gICAgLy8gdG9kbzogcHJvcHMgc2hvdWxkIGJlIGFuIGFycmF5XG4gICAgdGVtcGxhdGVyLnByb3BzID0gW3Byb3BzXTtcbiAgICB0ZW1wbGF0ZXIuaXNBcHAgPSB0cnVlO1xuICAgIC8vIGNyZWF0ZSBvYnNlcnZhYmxlIHRoZSBhcHAgbGl2ZXMgb25cbiAgICBjb25zdCBzdWJqZWN0ID0gZ2V0TmV3U3ViamVjdCh0ZW1wbGF0ZXIsIGVsZW1lbnQpO1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1YmplY3QuZ2xvYmFsO1xuICAgIGNvbnN0IG5ld2VzdCA9IHN1YmplY3Quc3RhdGUubmV3ZXN0O1xuICAgIGluaXRTdGF0ZShuZXdlc3QuY29udGV4dCk7XG4gICAgc2V0U3VwcG9ydEluQ3ljbGUobmV3ZXN0KTtcbiAgICBsZXQgdGVtcGxhdGVyMiA9IGFwcChwcm9wcyk7XG4gICAgY29uc3QgaXNBcHBGdW5jdGlvbiA9IHR5cGVvZiB0ZW1wbGF0ZXIyID09IEJhc2ljVHlwZXMuZnVuY3Rpb247XG4gICAgaWYgKCFpc0FwcEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghaXNUYWdDb21wb25lbnQodGVtcGxhdGVyMikpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlci50YWcgPSB0ZW1wbGF0ZXIyO1xuICAgICAgICAgICAgdGVtcGxhdGVyMiA9IGFwcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1YmplY3Quc3RhdGUubmV3ZXN0LnByb3BzQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGxhdGVzdDogW3Byb3BzXSxcbiAgICAgICAgICAgICAgICBjYXN0UHJvcHM6IFtwcm9wc10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGVtcGxhdGVyLnByb3BXYXRjaCA9IHRlbXBsYXRlcjIucHJvcFdhdGNoO1xuICAgICAgICAgICAgdGVtcGxhdGVyLnRhZ0pzVHlwZSA9IHRlbXBsYXRlcjIudGFnSnNUeXBlO1xuICAgICAgICAgICAgdGVtcGxhdGVyLndyYXBwZXIgPSB0ZW1wbGF0ZXIyLndyYXBwZXI7XG4gICAgICAgICAgICB0ZW1wbGF0ZXIgPSB0ZW1wbGF0ZXIyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJUYWdFbGVtZW50KGFwcCwgZ2xvYmFsLCB0ZW1wbGF0ZXIsIHRlbXBsYXRlcjIsIGVsZW1lbnQsIHN1YmplY3QsIGlzQXBwRnVuY3Rpb24pO1xufVxuZnVuY3Rpb24gZ2V0TmV3U3ViamVjdCh0ZW1wbGF0ZXIsIGFwcEVsZW1lbnQpIHtcbiAgICBjb25zdCB0YWdKc1ZhciA9IHtcbiAgICAgICAgdGFnSnNUeXBlOiAndGVtcGxhdGVyJyxcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0sXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NJbml0OiBmdW5jdGlvbiBhcHBEb05vdGhpbmcoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdkbyBub3RoaW5nIGFwcCBmdW5jdGlvbicpO1xuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgfTtcbiAgICBjb25zdCBzdWJqZWN0ID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgdmFsdWU6IHRlbXBsYXRlcixcbiAgICAgICAgdmFsdWVJbmRleDogMCxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogZmFsc2UsIC8vIGkgYW0gdGhlIGhpZ2hlc3Qgb3duZXJcbiAgICAgICAgcmVuZGVyQ291bnQ6IDAsXG4gICAgICAgIGdsb2JhbDogdW5kZWZpbmVkLCAvLyBnZXRzIHNldCBiZWxvdyBpbiBnZXROZXdHbG9iYWwoKVxuICAgICAgICBzdGF0ZToge30sXG4gICAgICAgIC8vIHBhcmVudENvbnRleHQ6IHVuZGVmaW5lZCBhcyBhbnksXG4gICAgICAgIHRhZ0pzVmFyLFxuICAgIH07XG4gICAgY29uc3QgZ2xvYmFsID0gZ2V0TmV3R2xvYmFsKHN1YmplY3QpO1xuICAgIC8vIFRPRE86IGV2ZW50cyBhcmUgb25seSBuZWVkZWQgb24gdGhlIGJhc2UgYW5kIG5vdCBldmVyeSBzdXBwb3J0XG4gICAgLy8gZm9yIGNsaWNrIGV2ZW50cyBhbmQgc3VjaCByZWFkIGF0IGEgaGlnaGVyIGxldmVsXG4gICAgZ2xvYmFsLmV2ZW50cyA9IHt9O1xuICAgIGxvYWROZXdCYXNlU3VwcG9ydCh0ZW1wbGF0ZXIsIHN1YmplY3QsIGFwcEVsZW1lbnQpO1xuICAgIHJldHVybiBzdWJqZWN0O1xufVxuIiwiaW1wb3J0IHsgcGFpbnQgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcGFpbnRBZnRlcnMsIHBhaW50aW5nIH0gZnJvbSBcIi4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgc3luY1N0YXRlc0FycmF5IH0gZnJvbSBcIi4uL3N0YXRlL3N5bmNTdGF0ZXMuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSBcIi4vY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBzYWZlUmVuZGVyU3VwcG9ydCB9IGZyb20gXCIuL3Byb3BzL3NhZmVSZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLmpzXCI7XG4vKiogVXNlZCB0byBjYWxsIGEgZnVuY3Rpb24gdGhhdCBiZWxvbmdzIHRvIGEgY2FsbGluZyB0YWcgYnV0IGlzIG5vdCB3aXRoIHJvb3QgYXJndW1lbnRzICovXG5leHBvcnQgZnVuY3Rpb24gb3V0cHV0KGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gYmxhbmtIYW5kbGVyOyAvLyBvdXRwdXQgdXNlZCBvbiBhbiBhcmd1bWVudCB0aGF0IHdhcyBub3QgcGFzc2VkIGluXG4gICAgfVxuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmICghc3VwcG9ydCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ291dHB1dCBtdXN0IGJlIHVzZWQgaW4gcmVuZGVyIHN5bmMgZmFzaGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3Qgb3duZXJTdXBwb3J0ID0gc3VwcG9ydC5vd25lclN1cHBvcnQ7XG4gICAgICAgIHJldHVybiBzeW5jV3JhcENhbGxiYWNrKGFyZ3MsIGNhbGxiYWNrLCBvd25lclN1cHBvcnQuY29udGV4dCk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzeW5jV3JhcENhbGxiYWNrKGFyZ3MsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICBjb25zdCBuZXdlclN0YXRlcyA9IHN0YXRlTWV0YS5uZXdlci5zdGF0ZXM7XG4gICAgY29uc3Qgb2xkZXJTdGF0ZXMgPSBzdGF0ZU1ldGEub2xkZXIgPyBzdGF0ZU1ldGEub2xkZXIuc3RhdGVzIDogbmV3ZXJTdGF0ZXM7XG4gICAgY29uc3QgbmV3ZXN0T3duZXIgPSBzdGF0ZU1ldGEubmV3ZXN0O1xuICAgIC8vIHN5bmMgdGhlIG5ldyBzdGF0ZXMgdG8gdGhlIG9sZCBiZWZvcmUgdGhlIG9sZCBkb2VzIGFueSBwcm9jZXNzaW5nXG4gICAgc3luY1N0YXRlc0FycmF5KG5ld2VyU3RhdGVzLCBvbGRlclN0YXRlcyk7XG4gICAgY29uc3QgYyA9IGNhbGxiYWNrKC4uLmFyZ3MpOyAvLyBjYWxsIHRoZSBsYXRlc3QgY2FsbGJhY2tcbiAgICAvLyBzeW5jIHRoZSBvbGQgc3RhdGVzIHRvIHRoZSBuZXdcbiAgICBzeW5jU3RhdGVzQXJyYXkob2xkZXJTdGF0ZXMsIG5ld2VyU3RhdGVzKTtcbiAgICAvLyBub3cgcmVuZGVyIHRoZSBvd25lclxuICAgIHBhaW50QWZ0ZXJzLnB1c2goWygpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0dsb2JhbCA9IG5ld2VzdE93bmVyLmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICAgICAgY29uc3QgaWdub3JlID0gbmV3R2xvYmFsID09PSB1bmRlZmluZWQgfHwgbmV3R2xvYmFsLmRlbGV0ZWQgPT09IHRydWU7XG4gICAgICAgICAgICBpZiAoaWdub3JlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBpdHMgbm90IGEgdGFnIGFueW1vcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgICAgICAgICBzYWZlUmVuZGVyU3VwcG9ydChuZXdlc3RPd25lcik7XG4gICAgICAgICAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgICAgICAgICAgcGFpbnQoKTtcbiAgICAgICAgfSwgW11dKTtcbiAgICByZXR1cm4gYztcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tIFwiLi4vdGFnL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBkZWxldGVBbmRVbnN1YnNjcmliZSwgc2V0dXBTdWJzY3JpYmUgfSBmcm9tIFwiLi4vdGFnL3VwZGF0ZS9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQgfSBmcm9tIFwiLi9zdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzU3Vic2NyaWJlQXR0cmlidXRlIH0gZnJvbSBcIi4vcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSBcIi4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBjaGVja1N0aWxsU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvY2hlY2tTdGlsbFN1YnNjcmlwdGlvbi5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuLyoqIEhhdmUgYW4gaHRtbCB0YWdnZWQgdmFsdWUgYXMgdmFsdWUgb2Ygc3Vic2NyaWJlIGVtaXNzaW9ucy4gQXV0b21hdGljYWxseSB1bnN1YnNjcmliZXMgZm9yIHlvdSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZShPYnNlcnZhYmxlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uT3V0cHV0OiBibGFua0hhbmRsZXIsIC8vIGdldHMgc2V0IHdpdGhpbiBzZXR1cFN1YnNjcmliZSgpXG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5zdWJzY3JpYmUsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBwcm9jZXNzU3Vic2NyaWJlQXR0cmlidXRlLFxuICAgICAgICBwcm9jZXNzSW5pdDogc2V0dXBTdWJzY3JpYmUsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IGNoZWNrU3RpbGxTdWJzY3JpcHRpb24sXG4gICAgICAgIC8vIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NVcGRhdGVTdWJzY3JpYmUsXG4gICAgICAgIGRlc3Ryb3k6IGRlbGV0ZUFuZFVuc3Vic2NyaWJlLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgLy8gc3RhdGVzLFxuICAgICAgICBPYnNlcnZhYmxlczogW09ic2VydmFibGVdLFxuICAgIH07XG59XG5zdWJzY3JpYmUuYWxsID0gc3Vic2NyaWJlQWxsO1xuZnVuY3Rpb24gc3Vic2NyaWJlQWxsKHN1YmplY3RzLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBzdWJzY3JpYmUoU3ViamVjdC5hbGwoc3ViamVjdHMpLCBjYWxsYmFjayk7XG59XG4iLCJpbXBvcnQgeyBkZWxldGVDb250ZXh0U3ViQ29udGV4dCwgZ3VhcmFudGVlSW5zZXJ0QmVmb3JlLCBvbkZpcnN0U3ViQ29udGV4dCB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSBcIi4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tIFwiLi4vdGFnL3VwZGF0ZS9pbmRleC5qc1wiO1xuZnVuY3Rpb24gaGFuZGxlSW5uZXJIVE1MKHZhbHVlLCBjb250ZXh0SXRlbSwgbmV3U3VwcG9ydCkge1xuICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgY29uc3Qgb3duZXIgPSB2YWx1ZS5vd25lcjtcbiAgICBjb25zdCByZWFsVmFsdWUgPSBvd25lci5faW5uZXJIVE1MO1xuICAgIHJlYWxWYWx1ZS5wcm9jZXNzSW5pdCA9IHJlYWxWYWx1ZS5vbGRQcm9jZXNzSW5pdDtcbiAgICBjb25zdCBjb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dD8uY29udGV4dEl0ZW07XG4gICAgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGNvbnRleHQsIHJlYWxWYWx1ZSwgbmV3U3VwcG9ydCk7XG59XG5mdW5jdGlvbiBwcm9jZXNzSW5uZXJIVE1MKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29udGV4dEl0ZW0uc3ViQ29udGV4dCA9IHt9O1xuICAgIC8vIGNvbnRleHRJdGVtLmhhbmRsZXIgPSBoYW5kbGVJbm5lckhUTUxcbiAgICB2YWx1ZS5wcm9jZXNzVXBkYXRlID0gaGFuZGxlSW5uZXJIVE1MO1xuICAgIGNoZWNrSW5uZXJIVE1MKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtLCBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSW5uZXJIVE1MKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtLCBpbnNlcnRCZWZvcmVPcmlnaW5hbCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCB7IGFwcGVuZE1hcmtlciwgaW5zZXJ0QmVmb3JlIH0gPSBndWFyYW50ZWVJbnNlcnRCZWZvcmUoYXBwZW5kVG8sIGluc2VydEJlZm9yZU9yaWdpbmFsKTtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICBzdWJDb250ZXh0LmFwcGVuZE1hcmtlciA9IGFwcGVuZE1hcmtlcjtcbiAgICBjb25zdCBvd25lciA9IHZhbHVlLm93bmVyO1xuICAgIGNvbnN0IHJlYWxWYWx1ZSA9IG93bmVyLl9pbm5lckhUTUw7XG4gICAgcmVhbFZhbHVlLnByb2Nlc3NJbml0ID0gcmVhbFZhbHVlLm9sZFByb2Nlc3NJbml0O1xuICAgIC8qKiBSZW5kZXIgdGhlIGNvbnRlbnQgdGhhdCB3aWxsIENPTlRBSU4gdGhlIGlubmVySFRNTCAqL1xuICAgIG9uRmlyc3RTdWJDb250ZXh0KHJlYWxWYWx1ZSwgc3ViQ29udGV4dCwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldElubmVySFRNTCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdKc1R5cGU6ICdpbm5lckhUTUwnLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6ICgpID0+IDAsIC8vIG5vdCBleHBlY3RlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc0lubmVySFRNTCxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogaGFuZGxlSW5uZXJIVE1MLFxuICAgICAgICBkZXN0cm95OiBkZWxldGVDb250ZXh0U3ViQ29udGV4dCxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gXCIuLi90YWcvaW5kZXguanNcIjtcbmltcG9ydCB7IHN5bmNXcmFwQ2FsbGJhY2sgfSBmcm9tIFwiLi4vdGFnL291dHB1dC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSBcIi4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGluaXRTdGF0ZSwgcmVTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZS9zdGF0ZS51dGlscy5qc1wiO1xuaW1wb3J0IHsgcnVuQWZ0ZXJSZW5kZXIgfSBmcm9tIFwiLi4vcmVuZGVyL3J1bkFmdGVyUmVuZGVyLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBoYW5kbGVUYWdUeXBlQ2hhbmdlRnJvbSB9IGZyb20gXCIuLi90YWcvdXBkYXRlL2hhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tLmZ1bmN0aW9uLmpzXCI7XG4vKiogVXNlIHRvIGdhaW4gYWNjZXNzIHRvIGVsZW1lbnRcbiAqIEBjYWxsYmFjayBjYWxsZWQgZXZlcnkgcmVuZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0KGNhbGxiYWNrLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBiYXNlSG9zdCA9IHtcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLmhvc3QsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBwcm9jZXNzSG9zdEF0dHJpYnV0ZSxcbiAgICAgICAgLy8gVE9ETzogbWF5YmUgYSBob3N0IHZhbHVlIGNhbiBjaGFuZ2U/XG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogKCkgPT4gMCxcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NIb3N0LCAvLyBUaGlzIHNob3VsZCBiZSBhIHRocm93IGVycm9yIGJlY2F1c2Ugb25seSBhdHRyaWJ1dGUgaXMgc3VwcG9ydGVkXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NIb3N0VXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBkZWxldGVIb3N0LFxuICAgICAgICBvcHRpb25zOiB7IGNhbGxiYWNrLCAuLi5vcHRpb25zIH0sXG4gICAgICAgIG1hdGNoZXNJbmplY3Rpb24oaW5qZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBpbmplY3RDYWxsYmFjayA9IGluamVjdD8ub3B0aW9ucz8uY2FsbGJhY2s7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgaW5qZWN0IHRhcmdldCBpcyBhIGhvc3Qgd2l0aCB0aGUgc2FtZSBjYWxsYmFja1xuICAgICAgICAgICAgcmV0dXJuIGluamVjdENhbGxiYWNrID09PSBjYWxsYmFjaztcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IHJldHVybkZ1bmN0aW9uID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgaG9zdFZhbHVlID0ge1xuICAgICAgICAgICAgLi4ucmV0dXJuRnVuY3Rpb24sXG4gICAgICAgICAgICBvcHRpb25zOiB7IGFyZ3VtZW50czogYXJncywgLi4ub3B0aW9ucywgY2FsbGJhY2sgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGhvc3RWYWx1ZTtcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24ocmV0dXJuRnVuY3Rpb24sIGJhc2VIb3N0KTtcbiAgICAvLyByZXR1cm5GdW5jdGlvbi5vcHRpb25zID0geyBjYWxsYmFjayB9XG4gICAgcmV0dXJuIHJldHVybkZ1bmN0aW9uO1xufVxuLy8gQXR0YWNoIHRoZSBmdW5jdGlvbnMgdG8gdGhlIGhvc3QgbmFtZXNwYWNlXG47XG5ob3N0Lm9uSW5pdCA9IChjYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiBob3N0KCgpID0+IHsgfSwgeyBvbkluaXQ6IGNhbGxiYWNrIH0pO1xufTtcbmhvc3Qub25EZXN0cm95ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuIGhvc3QoKCkgPT4geyB9LCB7IG9uRGVzdHJveTogY2FsbGJhY2sgfSk7XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0hvc3RVcGRhdGUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBoYXNDaGFuZ2VkID0gaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20oVmFsdWVUeXBlcy5ob3N0LCBuZXdWYWx1ZSwgXG4gICAgLy8gdGFnSnNWYXIsXG4gICAgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG4gICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc0NoYW5nZWQ7XG4gICAgfVxuICAgIGNvbnN0IG9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgY29uc3Qgb2xkT3B0aW9ucyA9IG9sZFRhZ0pzVmFyLm9wdGlvbnM7XG4gICAgLy8gY29uc3QgZWxlbWVudCA9IChjb250ZXh0SXRlbSBhcyBhbnkgYXMgQXR0cmlidXRlQ29udGV4dEl0ZW0pLmVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudFxuICAgIGNvbnN0IG5ld0hvc3QgPSBuZXdWYWx1ZTtcbiAgICByZVN0YXRlKGNvbnRleHRJdGVtKTtcbiAgICBjb25zdCBhcmdzID0gKG5ld0hvc3Qub3B0aW9ucy5hcmd1bWVudHMgfHwgb2xkT3B0aW9ucy5hcmd1bWVudHMgfHwgW10pO1xuICAgIGNvbnRleHRJdGVtLnJldHVyblZhbHVlID0gbmV3SG9zdC5vcHRpb25zLmNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgIHJ1bkFmdGVyUmVuZGVyKGNvbnRleHRJdGVtKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NIb3N0QXR0cmlidXRlKG5hbWUsIHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5lbGVtZW50LCB0YWdKc1ZhciwgLy8gc2FtZSBhcyB2YWx1ZSBub3QgbmVlZGVkXG5jb250ZXh0SXRlbSkge1xuICAgIHJldHVybiBwcm9jZXNzSG9zdCh0YWdKc1ZhciwgY29udGV4dEl0ZW0pO1xufVxuLyogT25seSBydW5zIG9uIGhvc3QoKSBpbml0ICovXG5mdW5jdGlvbiBwcm9jZXNzSG9zdCh0YWdKc1ZhciwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudDtcbiAgICBjb25zdCBzdGF0ZSA9IGNvbnRleHRJdGVtLnN0YXRlID0ge307XG4gICAgaW5pdFN0YXRlKGNvbnRleHRJdGVtKTtcbiAgICBwcm9jZXNzSG9zdFRhZ0pzVmFyKGVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgc3RhdGUpO1xuICAgIHJ1bkFmdGVyUmVuZGVyKCk7XG59XG4vKiogZmlyc3QgdGltZSBydW4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NIb3N0VGFnSnNWYXIoZWxlbWVudCwgdGFnSnNWYXIsIGNvbnRleHRJdGVtLCBzdGF0ZSkge1xuICAgIGNvbnN0IGFyZ3MgPSB0YWdKc1Zhci5vcHRpb25zLmFyZ3VtZW50cyB8fCBbXTtcbiAgICBjb25zdCByZXR1cm5WYWx1ZSA9IHRhZ0pzVmFyLm9wdGlvbnMuY2FsbGJhY2soLi4uYXJncyk7XG4gICAgLy8gU3RvcmUgdGhlIHJldHVybiB2YWx1ZSBmb3IgdGFnLmluamVjdCB0byBhY2Nlc3NcbiAgICBjb250ZXh0SXRlbS5yZXR1cm5WYWx1ZSA9IHJldHVyblZhbHVlO1xuICAgIC8vIERFUFJFQ0FURURcbiAgICBjb25zdCBvcHRpb25zID0gdGFnSnNWYXIub3B0aW9ucztcbiAgICBpZiAob3B0aW9ucy5vbkluaXQpIHtcbiAgICAgICAgLy8gY29uc3QgZWxlbWVudCA9IGNvbnRleHRJdGVtLmVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudFxuICAgICAgICBvcHRpb25zLm9uSW5pdChlbGVtZW50LCB0YWdKc1ZhciwgY29udGV4dEl0ZW0sIHN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuZnVuY3Rpb24gZGVsZXRlSG9zdChjb250ZXh0SXRlbSkge1xuICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgY29uc3QgYXR0ckNvbnRleHQgPSBjb250ZXh0SXRlbTtcbiAgICBjb25zdCB0YWdKc1ZhciA9IGF0dHJDb250ZXh0LnRhZ0pzVmFyO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0YWdKc1Zhci5vcHRpb25zO1xuICAgIGlmIChhdHRyQ29udGV4dC5kZXN0cm95JC5zdWJzY3JpYmVycy5sZW5ndGgpIHtcbiAgICAgICAgLy8gVE9ETzogTm90IHN1cmUgaWYgdGhpcyBuZWVkZWRcbiAgICAgICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgICAgICBzeW5jV3JhcENhbGxiYWNrKFtdLCBhdHRyQ29udGV4dC5kZXN0cm95JC5uZXh0LmJpbmQoYXR0ckNvbnRleHQuZGVzdHJveSQpLCBjb250ZXh0SXRlbSk7XG4gICAgICAgIC8vIFRPRE86IE5vdCBzdXJlIGlmIHRoaXMgbmVlZGVkXG4gICAgICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgfVxuICAgIC8vIERFUFJFQ0FURURcbiAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjb2RlIGFuZCB1c2UgdGFnLm9uRGVzdHJveSBpbnN0ZWFkXG4gICAgaWYgKG9wdGlvbnMub25EZXN0cm95KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhdHRyQ29udGV4dC5lbGVtZW50O1xuICAgICAgICBjb25zdCBob3N0RGVzdHJveSA9IGZ1bmN0aW9uIHByb2Nlc3NIb3N0RGVzdHJveSgpIHtcbiAgICAgICAgICAgIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHRJdGVtKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9wdGlvbnMub25EZXN0cm95KGVsZW1lbnQsIHRhZ0pzVmFyLCBhdHRyQ29udGV4dCwgYXR0ckNvbnRleHQuc3RhdGUpO1xuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0YXRlT3duZXIgPSBjb250ZXh0SXRlbS5zdGF0ZU93bmVyO1xuICAgICAgICByZXR1cm4gc3luY1dyYXBDYWxsYmFjayhbXSwgaG9zdERlc3Ryb3ksIHN0YXRlT3duZXIuY29udGV4dCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNPYmplY3QgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBzZXRCb29sZWFuQXR0cmlidXRlLCBzZXROb25GdW5jdGlvbklucHV0VmFsdWUsIHNldFNpbXBsZUF0dHJpYnV0ZSB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaG93VG9TZXRJbnB1dFZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFB1c2hLaWQgfSBmcm9tICcuL2Rlc2lnbkVsZW1lbnQuZnVuY3Rpb24uanMnO1xuZnVuY3Rpb24gY2FsbGJhY2tXcmFwcGVyKGl0ZW0sIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbG9uZSA9IGdldFB1c2hLaWQoaXRlbSwgaXRlbS5lbGVtZW50RnVuY3Rpb25zKTtcbiAgICByZXR1cm4gY2FsbGJhY2tXcmFwcGVyMihjbG9uZSwgZXZlbnROYW1lLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBjYWxsYmFja1dyYXBwZXIyKGl0ZW0sIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICBmdW5jdGlvbiB3cmFwQ2FsbGJhY2soZSkge1xuICAgICAgICByZXR1cm4gd3JhcENhbGxiYWNrLnRvQ2FsbGJhY2soZSk7XG4gICAgfVxuICAgIHdyYXBDYWxsYmFjay50b0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgaXRlbS5saXN0ZW5lcnMucHVzaChbZXZlbnROYW1lLCB3cmFwQ2FsbGJhY2tdKTtcbiAgICBpdGVtLmFsbExpc3RlbmVycy5wdXNoKFtldmVudE5hbWUsIHdyYXBDYWxsYmFja10pO1xuICAgIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gYXR0cihpdGVtLCBhcmdzKSB7XG4gICAgY29uc3QgY2xvbmUgPSBnZXRQdXNoS2lkKGl0ZW0sIGl0ZW0uZWxlbWVudEZ1bmN0aW9ucyk7XG4gICAgY2xvbmUuYXR0cmlidXRlcy5wdXNoKGFyZ3MpO1xuICAgIGlmIChpc1ZhbHVlRm9yQ29udGV4dChhcmdzWzBdKSkge1xuICAgICAgICByZWdpc3Rlck1vY2tBdHRyQ29udGV4dChhcmdzWzBdLCBjbG9uZSk7IC8vIHRoZSBhdHRyTmFtZSBpcyBhIGZ1bmN0aW9uIG9yIFRhZ0pzVmFyXG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVmFsdWVGb3JDb250ZXh0KGFyZ3NbMV0pKSB7XG4gICAgICAgIHJlZ2lzdGVyTW9ja0F0dHJDb250ZXh0KGFyZ3NbMV0sIGNsb25lKTsgLy8gdGhlIGF0dHJWYWx1ZSBpcyBhIGZ1bmN0aW9uIG9yIFRhZ0pzVmFyXG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbn1cbmZ1bmN0aW9uIGF0dHIyKGl0ZW0sIGFyZ3MpIHtcbiAgICAvLyBjb25zdCBjbG9uZSA9IGdldFB1c2hLaWQoaXRlbSBhcyBhbnksIGl0ZW0uZWxlbWVudEZ1bmN0aW9ucylcbiAgICAvLyBjbG9uZS5hdHRyaWJ1dGVzLnB1c2goYXJncyBhcyBBdHRyaWJ1dGUpXG4gICAgaXRlbS5hdHRyaWJ1dGVzLnB1c2goYXJncyk7XG4gICAgaWYgKGlzVmFsdWVGb3JDb250ZXh0KGFyZ3NbMF0pKSB7XG4gICAgICAgIHJlZ2lzdGVyTW9ja0F0dHJDb250ZXh0KGFyZ3NbMF0sIGl0ZW0pOyAvLyB0aGUgYXR0ck5hbWUgaXMgYSBmdW5jdGlvbiBvciBUYWdKc1ZhclxuICAgIH1cbiAgICBlbHNlIGlmIChpc1ZhbHVlRm9yQ29udGV4dChhcmdzWzFdKSkge1xuICAgICAgICByZWdpc3Rlck1vY2tBdHRyQ29udGV4dChhcmdzWzFdLCBpdGVtKTsgLy8gdGhlIGF0dHJWYWx1ZSBpcyBhIGZ1bmN0aW9uIG9yIFRhZ0pzVmFyXG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRGdW5jdGlvbnMoaXRlbSkge1xuICAgIC8qKiBVc2VkIGZvciBhbGwgZWxlbWVudCBjYWxsYmFja3MgKi9cbiAgICBmdW5jdGlvbiBtYWtlQ2FsbGJhY2soZXZlbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFja1dyYXBwZXIoaXRlbSwgZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VBdHRyaWJ1dGVIYW5kbGVyKGF0dHJOYW1lLCBob3dUb1NldCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZSA9IGdldFB1c2hLaWQoaXRlbSwgaXRlbS5lbGVtZW50RnVuY3Rpb25zKTtcbiAgICAgICAgICAgIGNsb25lLmF0dHJpYnV0ZXMucHVzaChbYXR0ck5hbWUsIHZhbHVlLCBmYWxzZSwgaG93VG9TZXRdKTtcbiAgICAgICAgICAgIGlmIChpc1ZhbHVlRm9yQ29udGV4dCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZWdpc3Rlck1vY2tBdHRyQ29udGV4dCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBjYWxsYWJsZXMgPSB7XG4gICAgICAgIG9uQ2xpY2s6IG1ha2VDYWxsYmFjaygnY2xpY2snKSxcbiAgICAgICAgLy8gb25jbGljazogbWFrZUNhbGxiYWNrKCdjbGljaycpLFxuICAgICAgICAvLyBjbGljazogbWFrZUNhbGxiYWNrKCdjbGljaycpLFxuICAgICAgICBvbkNoYW5nZTogbWFrZUNhbGxiYWNrKCdvbmNoYW5nZScpLFxuICAgICAgICAvLyBvbmNoYW5nZTogbWFrZUNhbGxiYWNrKCdvbmNoYW5nZScpLFxuICAgICAgICAvLyBjaGFuZ2U6IG1ha2VDYWxsYmFjaygnb25jaGFuZ2UnKSxcbiAgICAgICAgb25LZXl1cDogbWFrZUNhbGxiYWNrKCdvbmtleXVwJyksXG4gICAgICAgIC8vIG9ua2V5dXA6IG1ha2VDYWxsYmFjaygnb25rZXl1cCcpLFxuICAgICAgICAvLyBrZXl1cDogbWFrZUNhbGxiYWNrKCdvbmtleXVwJyksXG4gICAgICAgIC8qIGFwcGx5IGF0dHJpYnV0ZSB2aWEgYXR0cihuYW1lOiBzdHJpbmcsIHZhbHVlPzogYW55KTogKiovXG4gICAgICAgIGF0dHI6ICguLi5hcmdzKSA9PiBhdHRyKGl0ZW0sIGFyZ3MpLFxuICAgICAgICAvKiogVXNlZCBmb3Igc2V0dGluZyBhcnJheSBpbmRleC1rZXkgdmFsdWUgKi9cbiAgICAgICAga2V5OiBmdW5jdGlvbiAoYXJyYXlWYWx1ZSkge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgdGhpcy5hcnJheVZhbHVlID0gYXJyYXlWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGNhbGxhYmxlcztcbn1cbmZ1bmN0aW9uIHNldENsYXNzVmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHZhbHVlKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47IC8vIGhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KVxuICAgIH1cbiAgICBzZXRTaW1wbGVBdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSwgdmFsdWUpO1xufVxuLyoqIHVzZWQgZHVyaW5nIHVwZGF0ZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck1vY2tBdHRyQ29udGV4dCh2YWx1ZSwgbW9ja0VsbSkge1xuICAgIGlmICghbW9ja0VsbS5jb250ZXh0cykge1xuICAgICAgICBtb2NrRWxtLmNvbnRleHRzID0gW107XG4gICAgfVxuICAgIG1vY2tFbG0uY29udGV4dHMucHVzaCh2YWx1ZSk7XG59XG4vKiogdXNlZCBkdXJpbmcgdXBkYXRlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyTW9ja0NoaWxkQ29udGV4dCh2YWx1ZSwgbW9ja0VsbSkge1xuICAgIGlmICghbW9ja0VsbS5jb250ZXh0cykge1xuICAgICAgICBtb2NrRWxtLmNvbnRleHRzID0gW107XG4gICAgfVxuICAgIG1vY2tFbG0uY29udGV4dHMucHVzaCh2YWx1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWx1ZUZvckNvbnRleHQodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNGdW5jdGlvbih2YWx1ZSkgfHwgdmFsdWU/LnRhZ0pzVHlwZTtcbn1cbmZ1bmN0aW9uIHNldHVwQXR0cihhdHRyTmFtZSwgaG93VG9TZXQpIHtcbiAgICByZXR1cm4gKGl0ZW0sIHZhbHVlKSA9PiBhdHRyMihpdGVtLCBbYXR0ck5hbWUsIHZhbHVlLCBmYWxzZSwgaG93VG9TZXRdKTtcbn1cbmZ1bmN0aW9uIG1ha2VDYWxsYmFjayhldmVudE5hbWUpIHtcbiAgICByZXR1cm4gKGl0ZW0sIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1dyYXBwZXIyKGl0ZW0sIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgIH07XG59XG5jb25zdCBjYWxsYWJsZXMgPSB7XG4gICAgY2hlY2tlZDogc2V0dXBBdHRyKCdjaGVja2VkJywgc2V0Qm9vbGVhbkF0dHJpYnV0ZSksXG4gICAgc2VsZWN0ZWQ6IHNldHVwQXR0cignc2VsZWN0ZWQnLCBzZXRCb29sZWFuQXR0cmlidXRlKSxcbiAgICAvKiogZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgeCkgICovXG4gICAgY2xhc3M6IHNldHVwQXR0cignY2xhc3MnLCBzZXRDbGFzc1ZhbHVlKSxcbiAgICBvbkNsaWNrOiBtYWtlQ2FsbGJhY2soJ2NsaWNrJyksXG4gICAgb25DaGFuZ2U6IG1ha2VDYWxsYmFjaygnb25jaGFuZ2UnKSxcbiAgICBvbktleXVwOiBtYWtlQ2FsbGJhY2soJ29ua2V5dXAnKSxcbn07XG5leHBvcnQgZnVuY3Rpb24gbG9vcE9iamVjdEF0dHJpYnV0ZXMoaXRlbSwgb2JqZWN0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmVudHJpZXMob2JqZWN0KS5yZWR1Y2UoKGFsbCwgW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAobmFtZSBpbiBjYWxsYWJsZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYWJsZXNbbmFtZV0oaXRlbSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBpdGVtW25hbWVdKHZhbHVlKVxuICAgICAgICAvLyByZXR1cm4gYXR0cjIoYWxsLCBbbmFtZSwgdmFsdWVdIGFzIGFueSlcbiAgICAgICAgcmV0dXJuIGF0dHIyKGl0ZW0sIFtuYW1lLCB2YWx1ZSwgZmFsc2UsIHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZV0pO1xuICAgIH0sIGl0ZW0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgcGFpbnRDb21tYW5kcyB9IGZyb20gJy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi90YWdKc1ZhcnMvaW5kZXguanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0VsZW1lbnRWYXIgfSBmcm9tICcuL3Byb2Nlc3NFbGVtZW50VmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NFbGVtZW50VmFyRnVuY3Rpb24gfSBmcm9tICcuL3Byb2Nlc3NFbGVtZW50VmFyRnVuY3Rpb24uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NDaGlsZHJlbihpbm5lckhUTUwsIGNvbnRleHQsIG93bmVyU3VwcG9ydCwgYWRkZWRDb250ZXh0cywgZWxlbWVudCwgLy8gYXBwZW5kVG9cbnBhaW50QnkpIHtcbiAgICBpbm5lckhUTUwuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udGFnSnNUeXBlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBwcm9jZXNzRWxlbWVudFZhcihpdGVtLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMpO1xuICAgICAgICAgICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJ5LCBbZWxlbWVudCwgbmV3RWxlbWVudF1dKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGl0ZW07XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVNpbXBsZUlubmVyVmFsdWUoaXRlbSwgZWxlbWVudCwgcGFpbnRCeSk7XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NFbGVtZW50VmFyRnVuY3Rpb24oaXRlbSwgZWxlbWVudCwgY29udGV4dCwgb3duZXJTdXBwb3J0LCBhZGRlZENvbnRleHRzLCBwYWludEJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY2Vzc05vbkVsZW1lbnQoaXRlbSwgY29udGV4dCwgYWRkZWRDb250ZXh0cywgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBwYWludEJ5KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTm9uRWxlbWVudChpdGVtLCBjb250ZXh0LCBhZGRlZENvbnRleHRzLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIHBhaW50QnkpIHtcbiAgICBjb25zdCB0YWdKc1ZhciA9IHZhbHVlVG9UYWdKc1ZhcihpdGVtKTtcbiAgICBjb25zdCBuZXdDb250ZXh0ID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICAgIHBhcmVudENvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIHRhZ0pzVmFyLFxuICAgICAgICAvLyBUT0RPOiBOb3QgbmVlZGVkXG4gICAgICAgIHZhbHVlSW5kZXg6IC0xLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgIH07XG4gICAgYWRkZWRDb250ZXh0cy5wdXNoKG5ld0NvbnRleHQpO1xuICAgIG5ld0NvbnRleHQucGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJ5LCBbZWxlbWVudCwgbmV3Q29udGV4dC5wbGFjZWhvbGRlcl1dKTtcbiAgICB0YWdKc1Zhci5wcm9jZXNzSW5pdChpdGVtLCBuZXdDb250ZXh0LCAvLyBjb250ZXh0LCAvLyBuZXdDb250ZXh0LFxuICAgIG93bmVyU3VwcG9ydCwgbmV3Q29udGV4dC5wbGFjZWhvbGRlcik7XG4gICAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlU2ltcGxlSW5uZXJWYWx1ZSh2YWx1ZSwgZWxlbWVudCwgcGFpbnRCeSkge1xuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJ5LCBbZWxlbWVudCwgdGV4dF1dKTtcbiAgICByZXR1cm4gdGV4dDtcbn1cbiIsImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTm9uRWxlbWVudCB9IGZyb20gJy4vcHJvY2Vzc0NoaWxkcmVuLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRWxlbWVudFZhckZ1bmN0aW9uKGl0ZW0sIGVsZW1lbnQsIGNvbnRleHQsIG93bmVyU3VwcG9ydCwgYWRkZWRDb250ZXh0cywgcGFpbnRCeSkge1xuICAgIGNvbnN0IHN1YkNvbnRleHRzID0gW107XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IHtcbiAgICAgICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgICAgIHBhcmVudENvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIGNvbnRleHRzOiBzdWJDb250ZXh0cyxcbiAgICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICAgIGh0bWxEb21NZXRhOiBbXSxcbiAgICAgICAgdGFnSnNWYXI6IHtcbiAgICAgICAgICAgIHRhZ0pzVHlwZTogJ2R5bmFtaWMtdGV4dCcsXG4gICAgICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6ICgpID0+IDAsXG4gICAgICAgICAgICBwcm9jZXNzSW5pdDogYmxhbmtIYW5kbGVyLFxuICAgICAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgICAgIGRlc3Ryb3k6IChfYywgb3duZXJTdXBwb3J0KSA9PiB7XG4gICAgICAgICAgICAgICAgKytzdWJDb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgICAgIHN1YkNvbnRleHRzLmZvckVhY2goc3ViU3ViID0+IHN1YlN1Yi50YWdKc1Zhci5kZXN0cm95KHN1YlN1Yiwgb3duZXJTdXBwb3J0KSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvY2Vzc1VwZGF0ZTogKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCB2YWx1ZXMpID0+IHtcbiAgICAgICAgICAgICAgICArK3N1YkNvbnRleHQudXBkYXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZShhU3ViQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYVN1YkNvbnRleHQudGFnSnNWYXIucHJvY2Vzc1VwZGF0ZShuZXdWYWx1ZSwgYVN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCwgdmFsdWVzKTtcbiAgICAgICAgICAgICAgICBhU3ViQ29udGV4dC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnRleHRJdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gVE9ETzogTm90IG5lZWRlZFxuICAgICAgICB2YWx1ZUluZGV4OiAtMSxcbiAgICAgICAgd2l0aGluT3duZXJFbGVtZW50OiB0cnVlLFxuICAgICAgICBkZXN0cm95JDogbmV3IFN1YmplY3QoKSxcbiAgICB9O1xuICAgIGFkZGVkQ29udGV4dHMucHVzaChzdWJDb250ZXh0KTtcbiAgICBjb25zdCBhU3ViQ29udGV4dCA9IHByb2Nlc3NOb25FbGVtZW50KGl0ZW0oKSwgY29udGV4dCwgc3ViQ29udGV4dC5jb250ZXh0cywgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBwYWludEJ5KTtcbiAgICByZXR1cm4gYVN1YkNvbnRleHQ7XG59XG4iLCJpbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBhZGRTdXBwb3J0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydFdpdGhTdGF0ZSB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdVcGRhdGVBcnJheSB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcmVuZGVyVGFnQXJyYXkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZUFycmF5IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9wcm9jZXNzQXR0cmlidXRlQXJyYXkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcGFpbnRBcHBlbmQgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0NoaWxkcmVuIH0gZnJvbSAnLi9wcm9jZXNzQ2hpbGRyZW4uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50VmFyKHZhbHVlLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh2YWx1ZS50YWdOYW1lKTtcbiAgICBjb250ZXh0LmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHByb2Nlc3NBdHRyaWJ1dGVBcnJheSh2YWx1ZS5hdHRyaWJ1dGVzLCBbXSwgLy8gdmFsdWVzLFxuICAgIGVsZW1lbnQsIG93bmVyU3VwcG9ydCwgY29udGV4dCwgLy8gY29udGV4dC5wYXJlbnRDb250ZXh0LFxuICAgIGFkZGVkQ29udGV4dHMpO1xuICAgIHByb2Nlc3NDaGlsZHJlbih2YWx1ZS5pbm5lckhUTUwsIGNvbnRleHQsIG93bmVyU3VwcG9ydCwgYWRkZWRDb250ZXh0cywgZWxlbWVudCwgcGFpbnRBcHBlbmQpO1xuICAgIHZhbHVlLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lciwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3Qgd3JhcCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5TY29wZSA9IHZhbHVlLmxpc3RlbmVyc1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCB0b0NhbGwgPSBsaXN0ZW5TY29wZVsxXTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlU3VwcG9ydCA9IGdldFN1cHBvcnRXaXRoU3RhdGUob3duZXJTdXBwb3J0KTtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZUNvdW50ID0gc3RhdGVTdXBwb3J0LmNvbnRleHQudXBkYXRlQ291bnQ7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0b0NhbGwoLi4uYXJncyk7XG4gICAgICAgICAgICBpZiAodXBkYXRlQ291bnQgPT09IHN0YXRlU3VwcG9ydC5jb250ZXh0LnVwZGF0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyVGFnVXBkYXRlQXJyYXkoW3N0YXRlU3VwcG9ydF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyVGFnVXBkYXRlQXJyYXkoW3N0YXRlU3VwcG9ydC5jb250ZXh0LnN0YXRlLm5ld2VzdF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3Byb21pc2Utbm8tZGF0YS1ldmVyJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnbm8tZGF0YS1ldmVyJztcbiAgICAgICAgfTtcbiAgICAgICAgYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIob3duZXJTdXBwb3J0LmFwcFN1cHBvcnQsIGxpc3RlbmVyWzBdLCAvLyBldmVudE5hbWVcbiAgICAgICAgZWxlbWVudCwgd3JhcCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG4iLCJpbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwYWludCwgcGFpbnRpbmcgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveUNvbnRleHRIdG1sIH0gZnJvbSAnLi4vdGFnL3NtYXJ0UmVtb3ZlS2lkcy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveURlc2lnbkVsZW1lbnQoY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IGNvbnRleHRzID0gY29udGV4dC5jb250ZXh0cztcbiAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgIGlmIChjb250ZXh0cy5sZW5ndGgpIHtcbiAgICAgICAgZGVzdHJveURlc2lnbkJ5Q29udGV4dHMoY29udGV4dHMsIG93bmVyU3VwcG9ydCwgcHJvbWlzZXMpO1xuICAgICAgICBpZiAocHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgICAgICAgICAgICAgZGVzdHJveUNvbnRleHRIdG1sKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBjb250ZXh0Lmh0bWxEb21NZXRhXG4gICAgICAgICAgICAgICAgY29udGV4dC5odG1sRG9tTWV0YSA9IFtdO1xuICAgICAgICAgICAgICAgIC0tcGFpbnRpbmcubG9ja3M7XG4gICAgICAgICAgICAgICAgcGFpbnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3lDb250ZXh0SHRtbChjb250ZXh0KTtcbiAgICAvLyBkZWxldGUgY29udGV4dC5odG1sRG9tTWV0YVxuICAgIGNvbnRleHQuaHRtbERvbU1ldGEgPSBbXTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lEZXNpZ25CeUNvbnRleHRzKGNvbnRleHRzLCBvd25lclN1cHBvcnQsIHByb21pc2VzKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbnRleHRzWzBdO1xuICAgIGNvbnN0IHJlc3VsdCA9IGNvbnRleHQudGFnSnNWYXIuZGVzdHJveShjb250ZXh0LCBvd25lclN1cHBvcnQpO1xuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29udGV4dHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXN0cm95RGVzaWduQnlDb250ZXh0cyhjb250ZXh0cy5zbGljZSgxLCBjb250ZXh0cy5sZW5ndGgpLCBvd25lclN1cHBvcnQsIHByb21pc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lmh0bWxEb21NZXRhKSB7XG4gICAgICAgIGRlc3Ryb3lDb250ZXh0SHRtbChjb250ZXh0KTtcbiAgICAgICAgZGVsZXRlIGNvbnRleHQuaHRtbERvbU1ldGE7XG4gICAgfVxuICAgIGlmIChjb250ZXh0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBkZXN0cm95RGVzaWduQnlDb250ZXh0cyhjb250ZXh0cy5zbGljZSgxLCBjb250ZXh0cy5sZW5ndGgpLCBvd25lclN1cHBvcnQsIHByb21pc2VzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB1cGRhdGVUb0RpZmZWYWx1ZSB9IGZyb20gJy4uL3RhZy91cGRhdGUvdXBkYXRlVG9EaWZmVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveURlc2lnbkVsZW1lbnQgfSBmcm9tICcuL2Rlc3Ryb3lEZXNpZ25FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRGVzaWduRWxlbWVudFVwZGF0ZSh2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBjaGVja1RhZ0VsZW1lbnRWYWx1ZUNoYW5nZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgZGVzdHJveURlc2lnbkVsZW1lbnQoY29udGV4dCwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgdXBkYXRlVG9EaWZmVmFsdWUodmFsdWUsIGNvbnRleHQsIG93bmVyU3VwcG9ydCwgNzg5KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBob3cgYXJndW1lbnRzIGdldCB1cGRhdGVkIHdpdGhpbiBmdW5jdGlvblxuICAgIGlmIChjb250ZXh0LnVwZGF0ZXNIYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZXNIYW5kbGVyID0gY29udGV4dC51cGRhdGVzSGFuZGxlcjtcbiAgICAgICAgdXBkYXRlc0hhbmRsZXIodmFsdWUucHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQuY29udGV4dHM7XG4gICAgY29uc3QgdkNvbnRleHRzID0gdmFsdWUuY29udGV4dHMgfHwgW107XG4gICAgY29uc3Qgb2dMaXN0ZW5lcnMgPSBjb250ZXh0LnRhZ0pzVmFyLmFsbExpc3RlbmVycztcbiAgICBjb25zdCBhbGxMaXN0ZW5lcnMgPSB2YWx1ZS5hbGxMaXN0ZW5lcnM7XG4gICAgYWxsTGlzdGVuZXJzLmZvckVhY2goKG5ld0xpc3RlbmVyLCBpbmRleCkgPT4ge1xuICAgICAgICAvLyBlbnN1cmUgdGhlIGxhdGVzdCBjYWxsYmFjayBpcyBhbHdheXMgY2FsbGVkLiBOZWVkZWQgZm9yIGZ1bmN0aW9ucyB3aXRoaW4gYXJyYXkgbWFwc1xuICAgICAgICBjb25zdCB3cmFwQ2FsbGJhY2sgPSBvZ0xpc3RlbmVyc1tpbmRleF1bMV07XG4gICAgICAgIHdyYXBDYWxsYmFjay50b0NhbGxiYWNrID0gbmV3TGlzdGVuZXJbMV0udG9DYWxsYmFjaztcbiAgICB9KTtcbiAgICBjb250ZXh0cy5mb3JFYWNoKChjb250ZXh0LCBpbmRleCkgPT4ge1xuICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUodkNvbnRleHRzW2luZGV4XSwgLy8gY29udGV4dC52YWx1ZSxcbiAgICAgICAgY29udGV4dCwgb3duZXJTdXBwb3J0KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RhZ0VsZW1lbnRWYWx1ZUNoYW5nZSh2YWx1ZSwgY29udGV4dCkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gY29udGV4dC52YWx1ZTtcbiAgICBpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAwOyAvLyBoYXMgbm90IGNoYW5nZWRcbiAgICB9XG4gICAgLy8gcmV0dXJuIDEgLy8gaXQgaGFzIGNoYW5nZWRcbiAgICBjb25zdCBoYXNDaGFuZ2VkID0gIXZhbHVlIHx8IHZhbHVlLnRhZ0pzVHlwZSAhPT0gJ2VsZW1lbnQnO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gMSA6IDA7XG59XG4iLCJpbXBvcnQgeyBwYWludEJlZm9yZSwgcGFpbnRDb21tYW5kcyB9IGZyb20gJy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBlbGVtZW50RnVuY3Rpb25zLCBpc1ZhbHVlRm9yQ29udGV4dCwgbG9vcE9iamVjdEF0dHJpYnV0ZXMsIHJlZ2lzdGVyTW9ja0NoaWxkQ29udGV4dCB9IGZyb20gJy4vZWxlbWVudEZ1bmN0aW9ucy5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRWxlbWVudFZhciB9IGZyb20gJy4vcHJvY2Vzc0VsZW1lbnRWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveURlc2lnbkVsZW1lbnQgfSBmcm9tICcuL2Rlc3Ryb3lEZXNpZ25FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLCBjaGVja1RhZ0VsZW1lbnRWYWx1ZUNoYW5nZSB9IGZyb20gJy4vcHJvY2Vzc0Rlc2lnbkVsZW1lbnRVcGRhdGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc2lnbkVsZW1lbnQodGFnTmFtZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdCxcbiAgICAgICAgZGVzdHJveTogZGVzdHJveURlc2lnbkVsZW1lbnQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrVGFnRWxlbWVudFZhbHVlQ2hhbmdlLFxuICAgICAgICB0YWdOYW1lLFxuICAgICAgICBpbm5lckhUTUw6IFtdLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXSxcbiAgICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgICAgYWxsTGlzdGVuZXJzOiBbXSxcbiAgICAgICAgZWxlbWVudEZ1bmN0aW9ucyxcbiAgICB9O1xuICAgIGNvbnN0IHB1c2hLaWQgPSBnZXRQdXNoS2lkKGVsZW1lbnQsIGVsZW1lbnRGdW5jdGlvbnMpO1xuICAgIHB1c2hLaWQudGFnTmFtZSA9IHRhZ05hbWU7XG4gICAgcmV0dXJuIHB1c2hLaWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVzaEtpZChlbGVtZW50LCBfZWxtRnVuY3Rpb25zKSB7XG4gICAgY29uc3QgcHVzaEtpZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0VsZW1lbnQgPSB7IC4uLnB1c2hLaWQgfTtcbiAgICAgICAgbmV3RWxlbWVudC5hdHRyaWJ1dGVzID0gWy4uLnB1c2hLaWQuYXR0cmlidXRlc107XG4gICAgICAgIG5ld0VsZW1lbnQubGlzdGVuZXJzID0gWy4uLnB1c2hLaWQubGlzdGVuZXJzXTtcbiAgICAgICAgbmV3RWxlbWVudC5hbGxMaXN0ZW5lcnMgPSBbLi4ucHVzaEtpZC5hbGxMaXN0ZW5lcnNdO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KGFyZ3NbMF0pICYmXG4gICAgICAgICAgICAhYXJnc1swXS50YWdKc1R5cGUgLy8gVE9ETzogbmVlZCBiZXR0ZXIgYXR0cmlidXRlIGRldGVjdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGxvb3BPYmplY3RBdHRyaWJ1dGVzKG5ld0VsZW1lbnQsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgYXJncy5zcGxpY2UoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3RWxlbWVudC5pbm5lckhUTUwgPSBhcmdzO1xuICAgICAgICAvLyByZXZpZXcgZWFjaCBjaGlsZCBmb3IgcG90ZW50aWFsIHRvIGJlIGNvbnRleHRcbiAgICAgICAgYXJncy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWx1ZUZvckNvbnRleHQoYXJnKSkge1xuICAgICAgICAgICAgICAgIGlmIChhcmcudGFnSnNUeXBlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5hbGxMaXN0ZW5lcnMucHVzaCguLi5hcmcuYWxsTGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5jb250ZXh0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFyZ3VtZW50IGlzIGFuIGVsZW1lbnQgc28gcHVzaCB1cCBpdHMgY29udGV4dHMgaW50byBtaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld0VsZW1lbnQuY29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmNvbnRleHRzID0gYXJnLmNvbnRleHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5jb250ZXh0cy5wdXNoKC4uLmFyZy5jb250ZXh0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWdpc3Rlck1vY2tDaGlsZENvbnRleHQoYXJnLCBuZXdFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihwdXNoS2lkLCBlbGVtZW50KTtcbiAgICBPYmplY3QuYXNzaWduKHB1c2hLaWQsIGVsZW1lbnRGdW5jdGlvbnMocHVzaEtpZCkpO1xuICAgIHB1c2hLaWQuYXR0cmlidXRlcyA9IFsuLi5lbGVtZW50LmF0dHJpYnV0ZXNdO1xuICAgIHB1c2hLaWQubGlzdGVuZXJzID0gWy4uLmVsZW1lbnQubGlzdGVuZXJzXTtcbiAgICBwdXNoS2lkLmFsbExpc3RlbmVycyA9IFsuLi5lbGVtZW50LmFsbExpc3RlbmVyc107XG4gICAgcmV0dXJuIHB1c2hLaWQ7XG59XG5mdW5jdGlvbiBwcm9jZXNzSW5pdCh2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb250ZXh0LmNvbnRleHRzID0gW107IC8vIGFkZGVkIGNvbnRleHRzXG4gICAgY29uc3QgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50VmFyKHZhbHVlLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGNvbnRleHQuY29udGV4dHMpO1xuICAgIHBhaW50Q29tbWFuZHMucHVzaChbcGFpbnRCZWZvcmUsIFtpbnNlcnRCZWZvcmUsIGVsZW1lbnQsICdkZXNpZ25FbGVtZW50LnByb2Nlc3NJbml0J11dKTtcbiAgICBjb25zdCBkb20gPSB7XG4gICAgICAgIG5uOiB2YWx1ZS50YWdOYW1lLFxuICAgICAgICBkb21FbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAvLyBtYXJrZXI6IGluc2VydEJlZm9yZSxcbiAgICAgICAgYXQ6IHZhbHVlLmF0dHJpYnV0ZXMsXG4gICAgfTtcbiAgICBjb250ZXh0Lmh0bWxEb21NZXRhID0gW2RvbV07XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG59XG4iLCJpbXBvcnQgeyBwYWludEJlZm9yZSB9IGZyb20gJy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBlbGVtZW50RnVuY3Rpb25zIH0gZnJvbSAnLi9lbGVtZW50RnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lEZXNpZ25FbGVtZW50IH0gZnJvbSAnLi9kZXN0cm95RGVzaWduRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRGVzaWduRWxlbWVudFVwZGF0ZSwgY2hlY2tUYWdFbGVtZW50VmFsdWVDaGFuZ2UgfSBmcm9tICcuL3Byb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NDaGlsZHJlbiB9IGZyb20gJy4vcHJvY2Vzc0NoaWxkcmVuLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFB1c2hLaWQgfSBmcm9tICcuL2Rlc2lnbkVsZW1lbnQuZnVuY3Rpb24uanMnO1xuLyoqIHVzZWQgd2hlbiB5b3UgZG8gTk9UIGhhdmUgYSByb290IGVsZW1lbnQgcmV0dXJuZWQgZm9yIHlvdXIgZnVuY3Rpb24gKi9cbmV4cG9ydCBjb25zdCBub0VsZW1lbnQgPSBub0VsZW1lbnRNYWtlcigpO1xuZXhwb3J0IGZ1bmN0aW9uIG5vRWxlbWVudE1ha2VyKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLCAvLyBpdHMgbmV2ZXIgYW4gYXR0cmlidXRlXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzTm9FbG1Jbml0LFxuICAgICAgICBkZXN0cm95OiBkZXN0cm95RGVzaWduRWxlbWVudCxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogcHJvY2Vzc0Rlc2lnbkVsZW1lbnRVcGRhdGUsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tUYWdFbGVtZW50VmFsdWVDaGFuZ2UsXG4gICAgICAgIHRhZ05hbWU6ICduby1lbGVtZW50JyxcbiAgICAgICAgaW5uZXJIVE1MOiBbXSxcbiAgICAgICAgYXR0cmlidXRlczogW10sXG4gICAgICAgIGxpc3RlbmVyczogW10sXG4gICAgICAgIGFsbExpc3RlbmVyczogW10sXG4gICAgICAgIGVsZW1lbnRGdW5jdGlvbnMsXG4gICAgfTtcbiAgICBjb25zdCBwdXNoS2lkID0gZ2V0UHVzaEtpZChlbGVtZW50LCBlbGVtZW50RnVuY3Rpb25zKTtcbiAgICBwdXNoS2lkLnRhZ05hbWUgPSAnbm8tZWxlbWVudCc7XG4gICAgcmV0dXJuIHB1c2hLaWQ7XG59XG5mdW5jdGlvbiBwcm9jZXNzTm9FbG1Jbml0KHZhbHVlLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGluc2VydEJlZm9yZSkge1xuICAgIGNvbnRleHQuY29udGV4dHMgPSBbXTsgLy8gYWRkZWQgY29udGV4dHNcbiAgICBwcm9jZXNzQ2hpbGRyZW4odmFsdWUuaW5uZXJIVE1MLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGNvbnRleHQuY29udGV4dHMsIGluc2VydEJlZm9yZSwgcGFpbnRCZWZvcmUpO1xufVxuIiwiaW1wb3J0IHsgZGVzaWduRWxlbWVudCB9IGZyb20gJy4vZGVzaWduRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgeyBub0VsZW1lbnQgfSBmcm9tICcuL25vRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgY29uc3QgYnV0dG9uID0gZGVzaWduRWxlbWVudCgnYnV0dG9uJyk7XG5leHBvcnQgY29uc3Qgc2VsZWN0ID0gZGVzaWduRWxlbWVudCgnc2VsZWN0Jyk7XG5leHBvcnQgY29uc3Qgb3B0aW9uID0gZGVzaWduRWxlbWVudCgnb3B0aW9uJyk7XG5leHBvcnQgY29uc3QgaW5wdXQgPSBkZXNpZ25FbGVtZW50KCdpbnB1dCcpO1xuLy8gQkxPQ0sgRUxFTUVOVFNcbmV4cG9ydCBjb25zdCBociA9IGRlc2lnbkVsZW1lbnQoJ2hyJyk7XG5leHBvcnQgY29uc3QgaDEgPSBkZXNpZ25FbGVtZW50KCdoMScpO1xuZXhwb3J0IGNvbnN0IGgyID0gZGVzaWduRWxlbWVudCgnaDInKTtcbmV4cG9ydCBjb25zdCBoMyA9IGRlc2lnbkVsZW1lbnQoJ2gzJyk7XG5leHBvcnQgY29uc3QgaDQgPSBkZXNpZ25FbGVtZW50KCdoNCcpO1xuZXhwb3J0IGNvbnN0IGg1ID0gZGVzaWduRWxlbWVudCgnaDUnKTtcbmV4cG9ydCBjb25zdCBoNiA9IGRlc2lnbkVsZW1lbnQoJ2g2Jyk7XG5leHBvcnQgY29uc3Qgb2wgPSBkZXNpZ25FbGVtZW50KCdvbCcpO1xuZXhwb3J0IGNvbnN0IGxpID0gZGVzaWduRWxlbWVudCgnbGknKTtcbmV4cG9ydCBjb25zdCBkaXYgPSBkZXNpZ25FbGVtZW50KCdkaXYnKTtcbmV4cG9ydCBjb25zdCBmaWVsZHNldCA9IGRlc2lnbkVsZW1lbnQoJ2ZpZWxkc2V0Jyk7XG5leHBvcnQgY29uc3QgbGVnZW5kID0gZGVzaWduRWxlbWVudCgnbGVnZW5kJyk7XG4vLyBJTkxJTkUgRUxFTUVOVFNcbmV4cG9ydCBjb25zdCBwID0gZGVzaWduRWxlbWVudCgncCcpO1xuZXhwb3J0IGNvbnN0IGEgPSBkZXNpZ25FbGVtZW50KCdhJyk7XG5leHBvcnQgY29uc3Qgc3BhbiA9IGRlc2lnbkVsZW1lbnQoJ3NwYW4nKTtcbmV4cG9ydCBjb25zdCBzdHJvbmcgPSBkZXNpZ25FbGVtZW50KCdzdHJvbmcnKTtcbmV4cG9ydCBjb25zdCBzbWFsbCA9IGRlc2lnbkVsZW1lbnQoJ3NtYWxsJyk7XG5leHBvcnQgY29uc3QgbGFiZWwgPSBkZXNpZ25FbGVtZW50KCdsYWJlbCcpO1xuZXhwb3J0IGNvbnN0IHN1cCA9IGRlc2lnbkVsZW1lbnQoJ3N1cCcpO1xuIiwiZXhwb3J0ICogZnJvbSAnLi90YWcvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zdGF0ZS9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3JlbmRlci9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3N1YmplY3QvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi90YWdKc1ZhcnMvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcnBvbGF0aW9ucy9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Vycm9ycy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2lzSW5zdGFuY2UuanMnO1xuZXhwb3J0IHsgc3RhdGVzIH0gZnJvbSAnLi9zdGF0ZS9zdGF0ZXMuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL1RhZ0pzRXZlbnQudHlwZS5qcyc7XG5pbXBvcnQgeyBmaXJzdFRhZ1JlbmRlciwgcmVSZW5kZXJUYWcgfSBmcm9tICcuL3JlbmRlci9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclN1cHBvcnQgfSBmcm9tICcuL3JlbmRlci9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlcldpdGhTdXBwb3J0IH0gZnJvbSAnLi9yZW5kZXIvcmVuZGVyV2l0aFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnRWxlbWVudCB9IGZyb20gJy4vdGFnL3RhZ0VsZW1lbnQuanMnO1xuaW1wb3J0IHsgcGFpbnQgfSBmcm9tICcuL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2RlZXBGdW5jdGlvbnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbGVtZW50cy9pbmRleC5qcyc7XG5leHBvcnQgY29uc3QgaG1yID0ge1xuICAgIHRhZ0VsZW1lbnQsIHJlbmRlcldpdGhTdXBwb3J0LCByZW5kZXJTdXBwb3J0LFxuICAgIGZpcnN0VGFnUmVuZGVyLCByZVJlbmRlclRhZywgcGFpbnQsXG59O1xuIiwiaW1wb3J0IHsgZGl2LCBzbWFsbCwgc3BhbiwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgcmVuZGVyQ291bnREaXYgPSB0YWcoKHsgcmVuZGVyQ291bnQsIG5hbWUgfSkgPT4ge1xuICAgIHJlbmRlckNvdW50RGl2LnVwZGF0ZXMoeCA9PiBbeyByZW5kZXJDb3VudCwgbmFtZSB9XSA9IHgpO1xuICAgIHJldHVybiBkaXYoc21hbGwoYCgke25hbWV9IHJlbmRlciBjb3VudGAsIHNwYW4oeyBpZDogYCR7bmFtZX1fcmVuZGVyX2NvdW50YCB9LCBfID0+IHJlbmRlckNvdW50KSwgYClgKSk7XG59KTtcbiIsImltcG9ydCB7IGh0bWwsIFN1YmplY3QsIHN1YmplY3QsIHRhZywgc3RhdGVzLCBWYWx1ZVN1YmplY3RpdmUsIHNpZ25hbCwgc3Vic2NyaWJlIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuLyoqIHRoaXMgdGFnIHJlbmRlcnMgb25seSBvbmNlICovXG5leHBvcnQgY29uc3Qgb25lUmVuZGVyID0gKCkgPT4gdGFnLnJlbmRlck9uY2UgPSAoY291bnRlciA9IG5ldyBWYWx1ZVN1YmplY3RpdmUoMCksIHJlbmRlckNvdW50ID0gMCkgPT4ge1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgY29uc3QgeCA9IFN1YmplY3QuYWxsKFswLCAnYWxsJywgNF0pO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyMjY1OTQxWzBdLCBzdWJzY3JpYmUoeC5waXBlKHggPT4gSlNPTi5zdHJpbmdpZnkoeCkpKSwgc3Vic2NyaWJlKGNvdW50ZXIpLCAoKSA9PiArK2NvdW50ZXIudmFsdWUsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdvbmVSZW5kZXJfdGFnX3RzJyB9KSwgaW5zaWRlTXVsdGlSZW5kZXIoKSk7XG59O1xuLyoqIHRoaXMgdGFnIHJlbmRlcnMgb24gZXZlcnkgZXZlbnQgYnV0IHNob3VsZCBub3QgY2F1c2UgcGFyZW50IHRvIHJlLXJlbmRlciAqL1xuY29uc3QgaW5zaWRlTXVsdGlSZW5kZXIgPSB0YWcoKCkgPT4gKGNvdW50ZXIkID0gc3ViamVjdCgwKSwgY291bnRlclNpZ25hbCQgPSBzaWduYWwoMCksIGNvdW50ZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIC8vIHN0YXRlIGNhbiBiZSB1c2VkIGJ1dCBpdCBuZXZlciB1cGRhdGVzXG5fID0gc3RhdGVzKGdldCA9PiBbeyByZW5kZXJDb3VudCwgY291bnRlciB9XSA9IGdldCh7IHJlbmRlckNvdW50LCBjb3VudGVyIH0pKSkgPT4ge1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczIyNjU5NDFbMV0sIHN1YnNjcmliZShjb3VudGVyJCksIGNvdW50ZXJTaWduYWwkLCBjb3VudGVyLCAoKSA9PiB7XG4gICAgICAgICsrY291bnRlcjtcbiAgICAgICAgY291bnRlciQubmV4dChjb3VudGVyKTtcbiAgICAgICAgY291bnRlclNpZ25hbCQudmFsdWUgPSBjb3VudGVyO1xuICAgIH0sIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdpbnNpZGVNdWx0aVJlbmRlcicgfSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMjI2NTk0MTogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GNXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfkY0tY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiaWRcIiwgXCLwn5GNLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisr8J+RjVwiIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5zaWRlTXVsdGlSZW5kZXJcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkY3wn5SoIHN1YiBjb3VudGVyLXN1YmplY3QtZGlzcGxheTpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+RjfCflKgtY291bnRlci1zdWJqZWN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GN8J+ToSBzaWduYWwgY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+ToS1zaWduYWwtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJiclwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+RjfCflKggc3ViIGNvdW50ZXJcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+RjfCflKgtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9LCB7IFwibm5cIjogXCJiclwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJpZFwiLCBcIvCfkY3wn5SoLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisr8J+RjfCfkY1cIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dXSB9O1xuIiwiaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gXCIuL3NlY3Rpb25TZWxlY3Rvci50YWdcIjtcbmltcG9ydCB7IHJ1bklzb2xhdGVkVGVzdHMgfSBmcm9tIFwiLi9pc29sYXRlZEFwcC50ZXN0XCI7XG5sZXQgdGVzdFRpbWVvdXQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIHJ1blRlc3RpbmcobWFudWFsID0gdHJ1ZSwgdGVzdHMsIHJ1blN0YXJ0RW5kVGVzdHMpIHtcbiAgICBpZiAodGVzdFRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRlc3RUaW1lb3V0KTtcbiAgICAgICAgY29uc29sZS5kZWJ1Zyhg8J+PgyBDbGVhcmVkIHByZXZpb3VzIHRlc3RpbmcgdG8gc3RhcnQgYWdhaW4uLi5gKTtcbiAgICB9XG4gICAgY29uc3Qgd2FpdEZvciA9IDIwMDA7XG4gICAgdGVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgdGVzdHMgPSB0ZXN0cyB8fCBzdG9yYWdlLnZpZXdzO1xuICAgICAgICBjb25zb2xlLmRlYnVnKGDwn4+DIFByZXBhcmUgdGVzdCBzdWl0ZXMuLi5gKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcnVuSXNvbGF0ZWRUZXN0cyh0ZXN0cywgcnVuU3RhcnRFbmRUZXN0cyk7XG4gICAgICAgIGlmICghbWFudWFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgYWxlcnQoJ+KchSBhbGwgYXBwIHRlc3RzIHBhc3NlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFsZXJ0KCfinYwgdGVzdHMgZmFpbGVkLiBTZWUgY29uc29sZSBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gICAgfSwgd2FpdEZvcik7IC8vIGNhdXNlIGRlbGF5IHRvIGJlIHNlcGFyYXRlIGZyb20gcmVuZGVyc1xufVxuIiwiaW1wb3J0IHsgVmlld1R5cGVzIH0gZnJvbSBcIi4vc2VjdGlvblNlbGVjdG9yLnRhZ1wiO1xuaW1wb3J0IHsgZXhlY3V0ZUJyb3dzZXJUZXN0cyB9IGZyb20gXCIuL3Rlc3RpbmcvdGVzdFJ1bm5lclwiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bklzb2xhdGVkVGVzdHModmlld3MsIHJ1blN0YXJ0RW5kVGVzdHMgPSB0cnVlKSB7XG4gICAgY29uc29sZS5sb2coJ/Cfj4MgcnVuSXNvbGF0ZWRUZXN0czogTG9hZGluZyB0ZXN0cyBmb3Igdmlld3M6Jywgdmlld3MpO1xuICAgIGxldCB0ZXN0Q291bnQgPSAwO1xuICAgIGlmIChydW5TdGFydEVuZFRlc3RzKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9zdGFydC50ZXN0LmpzJyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkNvbnRlbnQpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9jb250ZW50LnRlc3QnKTtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2R1bXBDb250ZW50LnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuU3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3N1YnNjcmlwdGlvbnMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Db3VudGVycykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2NvdW50ZXJzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuUHJvcHMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9wcm9wcy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlByb3ZpZGVyRGVidWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9wcm92aWRlcnMudGVzdCcpO1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vaW5qZWN0aW9uVGVzdGluZy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlRhZ1N3aXRjaERlYnVnKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vdGFnU3dpdGNoLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQ2hpbGQpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9jaGlsZC50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkFycmF5cykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2FycmF5cy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLk1pcnJvcmluZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL21pcnJvci50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLldhdGNoVGVzdGluZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3dhdGNoLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuRnVuSW5Qcm9wc1RhZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2Z1bkluUHJvcHMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5BdHRyaWJ1dGVEZWJ1ZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2F0dHJpYnV0ZXMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5PbmVSZW5kZXIpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9vbmVSZW5kZXIudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Ub2RvKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vdG9kb3MudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5EZXN0cm95cykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2Rlc3Ryb3lzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQmFzaWMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9iYXNpYy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBjb25zb2xlLmRlYnVnKGDwn4+DIFJ1bm5pbmcgJHt0ZXN0Q291bnR9IHRlc3Qgc3VpdGVzLi4uYCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRlQnJvd3NlclRlc3RzKCk7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnQ7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhg4pyFIHRlc3RzIGNvbXBsZXRlZCBpbiAke3RpbWV9bXNgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCB0ZXN0cyBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3ViamVjdCwgZGl2LCBoMywgaW5wdXQsIGxhYmVsLCBhIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBydW5UZXN0aW5nIH0gZnJvbSBcIi4vcnVuVGVzdGluZy5mdW5jdGlvblwiO1xuaW1wb3J0IHsgb3V0cHV0U2VjdGlvbnMgfSBmcm9tIFwiLi9yZW5kZXJlZFNlY3Rpb25zLnRhZ1wiO1xuY2xhc3MgYiB7XG59XG5leHBvcnQgdmFyIFZpZXdUeXBlcztcbihmdW5jdGlvbiAoVmlld1R5cGVzKSB7XG4gICAgVmlld1R5cGVzW1wiQmFzaWNcIl0gPSBcImJhc2ljXCI7XG4gICAgVmlld1R5cGVzW1wiRGVzdHJveXNcIl0gPSBcImRlc3Ryb3lzXCI7XG4gICAgVmlld1R5cGVzW1wiVG9kb1wiXSA9IFwidG9kb1wiO1xuICAgIFZpZXdUeXBlc1tcIkZ1bkluUHJvcHNUYWdcIl0gPSBcImZ1bkluUHJvcHNUYWdcIjtcbiAgICBWaWV3VHlwZXNbXCJPbmVSZW5kZXJcIl0gPSBcIm9uZVJlbmRlclwiO1xuICAgIFZpZXdUeXBlc1tcIldhdGNoVGVzdGluZ1wiXSA9IFwid2F0Y2hUZXN0aW5nXCI7XG4gICAgVmlld1R5cGVzW1wiTWlycm9yaW5nXCJdID0gXCJtaXJyb3JpbmdcIjtcbiAgICBWaWV3VHlwZXNbXCJDb250ZW50XCJdID0gXCJjb250ZW50XCI7XG4gICAgVmlld1R5cGVzW1wiQXJyYXlzXCJdID0gXCJhcnJheXNcIjtcbiAgICBWaWV3VHlwZXNbXCJDb3VudGVyc1wiXSA9IFwiY291bnRlcnNcIjtcbiAgICBWaWV3VHlwZXNbXCJUYWJsZURlYnVnXCJdID0gXCJ0YWJsZURlYnVnXCI7XG4gICAgVmlld1R5cGVzW1wiUHJvcHNcIl0gPSBcInByb3BzXCI7XG4gICAgVmlld1R5cGVzW1wiQ2hpbGRcIl0gPSBcImNoaWxkXCI7XG4gICAgVmlld1R5cGVzW1wiVGFnU3dpdGNoRGVidWdcIl0gPSBcInRhZ1N3aXRjaERlYnVnXCI7XG4gICAgVmlld1R5cGVzW1wiUHJvdmlkZXJEZWJ1Z1wiXSA9IFwicHJvdmlkZXJEZWJ1Z1wiO1xuICAgIFZpZXdUeXBlc1tcIkF0dHJpYnV0ZURlYnVnXCJdID0gXCJhdHRyaWJ1dGVEZWJ1Z1wiO1xuICAgIFZpZXdUeXBlc1tcIlN1YnNjcmlwdGlvbnNcIl0gPSBcInN1YnNjcmlwdGlvbnNcIjtcbn0pKFZpZXdUeXBlcyB8fCAoVmlld1R5cGVzID0ge30pKTtcbmV4cG9ydCBjb25zdCBzdG9yYWdlID0gZ2V0U2NvcGVkU3RvcmFnZSgpO1xuZnVuY3Rpb24gZ2V0U2NvcGVkU3RvcmFnZSgpIHtcbiAgICBjb25zdCBzdHJpbmcgPSBsb2NhbFN0b3JhZ2UudGFnZ2VkanMgfHwgSlNPTi5zdHJpbmdpZnkoeyBhdXRvVGVzdDogdHJ1ZSwgdmlld3M6IE9iamVjdC52YWx1ZXMoVmlld1R5cGVzKSB9KTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHJpbmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVTY29wZWRTdG9yYWdlKCkge1xuICAgIGxvY2FsU3RvcmFnZS50YWdnZWRqcyA9IEpTT04uc3RyaW5naWZ5KHN0b3JhZ2UpO1xufVxuY29uc3QgZGVmYXVsdFZpZXdUeXBlcyA9IE9iamVjdC52YWx1ZXMoVmlld1R5cGVzKTtcbmV4cG9ydCBjb25zdCBzZWN0aW9uU2VsZWN0b3IgPSAodmlld1R5cGVzID0gZGVmYXVsdFZpZXdUeXBlcykgPT4ge1xuICAgIC8vIFNvcnQgdmlld1R5cGVzIGFscGhhYmV0aWNhbGx5XG4gICAgY29uc3Qgc29ydGVkVmlld1R5cGVzID0gWy4uLnZpZXdUeXBlc11cbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEubG9jYWxlQ29tcGFyZShiKSlcbiAgICAgICAgLm1hcCh0eXBlID0+ICh7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIG1ldGE6IG91dHB1dFNlY3Rpb25zLmZpbmQocyA9PiBzLnZpZXcgPT09IHR5cGUpLFxuICAgIH0pKTtcbiAgICByZXR1cm4gZGl2KGgzKCfhrZ8gU2VjdGlvbnMnKSwgZGl2KHsgc3R5bGU6IFwiZGlzcGxheTpmbGV4O2dhcDoxZW07ZmxleC13cmFwOndyYXA7bWFyZ2luOjFlbTtcIiB9LCBfID0+IHNvcnRlZFZpZXdUeXBlcy5tYXAoKHsgbWV0YSwgdHlwZSB9KSA9PiBkaXYoeyBzdHlsZTogXCJmbGV4OjAgMCBhdXRvO21pbi13aWR0aDoxNTBweDt3aGl0ZS1zcGFjZTpub3dyYXA7XCIgfSwgaW5wdXQoe1xuICAgICAgICBuYW1lOiBfID0+ICd2aWV3LXR5cGUtJyArIHR5cGUsXG4gICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgICAgaWQ6IF8gPT4gJ3ZpZXctdHlwZS0nICsgdHlwZSxcbiAgICAgICAgY2hlY2tlZDogXyA9PiBzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKHR5cGUpLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB0b2dnbGVWaWV3VHlwZSh0eXBlKSxcbiAgICB9KSwgXyA9PiBtZXRhPy5lbW9qaSA/IG1ldGEuZW1vamkgKyAnICcgOiBudWxsLCBsYWJlbCh7IGZvcjogXyA9PiAndmlldy10eXBlLScgKyB0eXBlIH0sICcgJywgXyA9PiB0eXBlKSwgJyAnLCBhKHtcbiAgICAgICAgaHJlZjogXyA9PiBgaXNvbGF0ZWQuaHRtbCMke3R5cGV9YCxcbiAgICAgICAgc3R5bGU6IFwiZm9udC1zaXplOi42ZW07dGV4dC1kZWNvcmF0aW9uOm5vbmU7XCIsXG4gICAgfSwgJ/CflJcnKSwgJyAnLCBhKHtcbiAgICAgICAgaHJlZjogXyA9PiBgIyR7dHlwZX1gLFxuICAgICAgICBzdHlsZTogXCJmb250LXNpemU6LjZlbTtcIixcbiAgICB9LCAn4oaX77iPJykpLmtleSh0eXBlKSksIF8gPT4gdmlld1R5cGVzLmxlbmd0aCA+IDEgJiYgW1xuICAgICAgICBkaXYobGFiZWwoe1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4gdmlld1R5cGVzLmZvckVhY2godmlld1R5cGUgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHZpZXdDaGFuZ2VkLm5leHQoe3ZpZXdUeXBlLCBjaGVja1Rlc3Rpbmc6IGZhbHNlfSlcbiAgICAgICAgICAgICAgICBhY3RpdmF0ZSh2aWV3VHlwZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNhdmVTY29wZWRTdG9yYWdlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCAnIGFsbCcpKSxcbiAgICAgICAgZGl2KGxhYmVsKHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHZpZXdUeXBlcy5mb3JFYWNoKHZpZXdUeXBlID0+IHtcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlKHZpZXdUeXBlKTtcbiAgICAgICAgICAgICAgICBzYXZlU2NvcGVkU3RvcmFnZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgJyBub25lJykpXG4gICAgXSkpO1xufTtcbnNlY3Rpb25TZWxlY3Rvci50ZW1wTm90ZSA9ICdzZWN0aW9ucyc7XG5mdW5jdGlvbiB0b2dnbGVWaWV3VHlwZSh0eXBlLCBjaGVja1Rlc3RpbmcgPSB0cnVlKSB7XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXModHlwZSkpIHtcbiAgICAgICAgZGVhY3RpdmF0ZSh0eXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXdDaGFuZ2VkLm5leHQoeyB0eXBlLCBjaGVja1Rlc3RpbmcgfSk7XG4gICAgfVxuICAgIHNhdmVTY29wZWRTdG9yYWdlKCk7XG59XG5leHBvcnQgY29uc3Qgdmlld0NoYW5nZWQgPSBuZXcgU3ViamVjdCgpO1xuZnVuY3Rpb24gZGVhY3RpdmF0ZSh0eXBlKSB7XG4gICAgKHN0b3JhZ2Uudmlld3MgPSBzdG9yYWdlLnZpZXdzLmZpbHRlcih4ID0+IHggIT09IHR5cGUpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSh0eXBlLCBjaGVja1Rlc3RpbmcgPSB0cnVlKSB7XG4gICAgc3RvcmFnZS52aWV3cy5wdXNoKHR5cGUpO1xuICAgIGlmIChjaGVja1Rlc3RpbmcgJiYgc3RvcmFnZS5hdXRvVGVzdCkge1xuICAgICAgICBydW5UZXN0aW5nKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgYXJyYXlGdW5UYWcgPSB0YWcoKGl0ZW0sIGRlbGV0ZUl0ZW0pID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczE5MzQ3WzBdLCBpdGVtLCAoKSA9PiBkZWxldGVJdGVtKGl0ZW0pKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTkzNDc6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBzb2xpZCBibGFjaztcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRlbGV0ZVwiIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgb3V0cHV0LCBzdGF0ZXMsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnRcIjtcbmltcG9ydCB7IGFycmF5RnVuVGFnIH0gZnJvbSBcIi4vYXJyYXlGdW4udGFnXCI7XG5pbXBvcnQgeyBtYWluIH0gZnJvbSBcIi4vZnVuSW5Qcm9wcy50YWdcIjtcbmV4cG9ydCBjb25zdCBmdW5JblByb3BzQ2hpbGQgPSB0YWcoKGFyZzAsIG1haW5Qcm9wLCBteUZ1bmN0aW9uMykgPT4gKG90aGVyID0gJ290aGVyJywgY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgX18gPSBzdGF0ZXMoZ2V0ID0+IFt7IG90aGVyLCBjb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IG90aGVyLCBjb3VudGVyLCByZW5kZXJDb3VudCB9KSksIF8gPSArK3JlbmRlckNvdW50LCB7IGFkZEFycmF5SXRlbSwgbXlGdW5jdGlvbiwgZGVsZXRlSXRlbSwgY2hpbGQsIGFycmF5IH0gPSBhcmcwKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M1OTg2NjlbMF0sIG1haW5Qcm9wLmZ1bmN0aW9uLm9yaWdpbmFsID8gJ3RhZ2dqZWRqcy13cmFwcGVkJyA6ICdub3dyYXAnLCBtYWluUHJvcC5jb3VudCwgY2hpbGQubXlDaGlsZEZ1bmN0aW9uLm9yaWdpbmFsID8gJ3RhZ2dqZWRqcy13cmFwcGVkJyA6ICdub3dyYXAnLCBteUZ1bmN0aW9uLm9yaWdpbmFsID8gJ3RhZ2dqZWRqcy13cmFwcGVkJyA6ICdub3dyYXAnLCBteUZ1bmN0aW9uLCBvdXRwdXQoY2hpbGQubXlDaGlsZEZ1bmN0aW9uKSwgbXlGdW5jdGlvbjMsIG1haW4uZnVuY3Rpb24sICgpID0+ICsrY291bnRlciwgYXJyYXkubGVuZ3RoLCBhcnJheS5tYXAoaXRlbSA9PiBhcnJheUZ1blRhZyhpdGVtLCBkZWxldGVJdGVtKS5rZXkoaXRlbSkpLCBhZGRBcnJheUl0ZW0sIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdmdW5JblByb3BzX3RhZ19jaGlsZCcgfSkpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M1OTg2Njk6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInN0cm9uZ1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJtYWluRnVuY3Rpb246XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY2hpbGRGdW5jdGlvbjpcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibXlGdW5jdGlvbjpcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImZ1bl9pbl9wcm9wMVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6SwICsrb2JqZWN0IGFyZ3VtZW50XCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZnVuX2luX3Byb3AyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpLAgKytjaGlsZC5teUNoaWxkRnVuY3Rpb25cIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJmdW5faW5fcHJvcDNcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiK/CfpLAgK2FyZ3VtZW50XCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+GjiArK21haW5cIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDggfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK21lXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkIGFycmF5IGxlbmd0aDogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFkZEFycmF5SXRlbVwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXCIgfV1dIH07XG4iLCJpbXBvcnQgeyBpbnB1dCwgdGFnLCBidXR0b24gfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5leHBvcnQgY29uc3QgYWRkQXJyYXlDb21wb25lbnQgPSB0YWcoKGFkZEFycmF5SXRlbSkgPT4gKHJlbmRlckNvdW50ID0gMCwgX18gPSArK3JlbmRlckNvdW50LCBoYW5kbGVLZXlVcCA9IChlKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2UnLCBlKTtcbiAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgYWRkQXJyYXlJdGVtKHZhbHVlKTtcbiAgICAgICAgZS50YXJnZXQudmFsdWUgPSBcIlwiO1xuICAgIH1cbn0pID0+IHtcbiAgICBjb25zdCB4ID0gW1xuICAgICAgICBpbnB1dCh7XG4gICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIG9uS2V5dXA6IGhhbmRsZUtleVVwLFxuICAgICAgICAgICAgb25DaGFuZ2U6IChlKSA9PiB7IGFkZEFycmF5SXRlbShlLnRhcmdldC52YWx1ZSk7IGUudGFyZ2V0LnZhbHVlID0gJyc7IH0sXG4gICAgICAgIH0pLFxuICAgICAgICBidXR0b24oeyB0eXBlOiBcImJ1dHRvblwiLCBvbkNsaWNrOiBhZGRBcnJheUl0ZW0gfSwgJ2FkZCBieSBvdXRzaWRlJyksXG4gICAgICAgIF8gPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2FkZEFycmF5Q29tcG9uZW50JyB9KVxuICAgIF07XG4gICAgcmV0dXJuIHg7XG59KTtcbiIsImltcG9ydCB7IGJ1dHRvbiwgc3BhbiwgZGl2LCBzdHJvbmcsIGhyLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBmdW5JblByb3BzQ2hpbGQgfSBmcm9tIFwiLi9mdW5JblByb3BzQ2hpbGQudGFnXCI7XG5pbXBvcnQgeyBhZGRBcnJheUNvbXBvbmVudCB9IGZyb20gXCIuL2FkZEFycmF5Q29tcG9uZW50LnRhZ1wiO1xuZXhwb3J0IGNvbnN0IG1haW4gPSB7XG4gICAgZnVuY3Rpb246ICgpID0+ICsrbWFpbi5jb3VudCxcbiAgICBjb3VudDogMCxcbn07XG5leHBvcnQgZGVmYXVsdCB0YWcoKCkgPT4gKGFycmF5ID0gW10sIGNvdW50ZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIHNob3dDaGlsZCA9IHRydWUsIHNvbWV0aGluZ0Vsc2UgPSAnYScsIG15RnVuY3Rpb24gPSAoKSA9PiArK2NvdW50ZXIsIF8gPSArK3JlbmRlckNvdW50LCBhZGRBcnJheUl0ZW0gPSAoeCkgPT4ge1xuICAgIGFycmF5ID0gYXJyYXkubWFwKHggPT4geCk7XG4gICAgYXJyYXkucHVzaCh0eXBlb2YgKHgpID09PSAnc3RyaW5nJyA/IHggOiAncHVzaCcgKyBhcnJheS5sZW5ndGgpO1xufSwgZGVsZXRlSXRlbSA9IChpdGVtKSA9PiBhcnJheSA9IGFycmF5LmZpbHRlcih4ID0+IHggIT09IGl0ZW0pKSA9PiBkaXYoYnV0dG9uKHsgaWQ6IFwiZnVuLXBhcmVudC1idXR0b25cIiwgb25DbGljazogbXlGdW5jdGlvbiB9LCAn8J+ksCArK3BhcmVudCcpLCBzcGFuKHsgaWQ6IFwiZnVuX2luX3Byb3BfZGlzcGxheVwiIH0sIF8gPT4gY291bnRlciksIF8gPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2Z1bkluUHJvcHNfdGFnX3BhcmVudCcgfSksIGRpdihzdHJvbmcoJ/Cfho4gbWFpbjonKSwgc3Bhbih7IGlkOiBcIm1haW5fd3JhcF9zdGF0ZVwiIH0sIF8gPT4gbWFpbi5mdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJyksICc6JywgXyA9PiBtYWluLmNvdW50KSwgYnV0dG9uKHtcbiAgICBpZDogXCJ0b2dnbGUtZnVuLWluLWNoaWxkXCIsXG4gICAgdHlwZTogXCJidXR0b25cIixcbiAgICBvbkNsaWNrOiAoKSA9PiBzaG93Q2hpbGQgPSAhc2hvd0NoaWxkXG59LCAndG9nZ2xlIGNoaWxkJyksICdhcnJheSBsZW5ndGg6ICcsIGFycmF5Lmxlbmd0aCwgYnV0dG9uKHsgb25DbGljazogYWRkQXJyYXlJdGVtIH0sICdyZXNldCBhZGQnKSwgaHIoKSwgXyA9PiBzaG93Q2hpbGQgJiYgZnVuSW5Qcm9wc0NoaWxkKHtcbiAgICBteUZ1bmN0aW9uLCBhcnJheSwgYWRkQXJyYXlJdGVtLCBkZWxldGVJdGVtLFxuICAgIGNoaWxkOiB7IG15Q2hpbGRGdW5jdGlvbjogbXlGdW5jdGlvbiB9XG59LCBtYWluLCBteUZ1bmN0aW9uKSwgXyA9PiBhZGRBcnJheUNvbXBvbmVudChhZGRBcnJheUl0ZW0pKSk7XG4iLCJpbXBvcnQgeyBzdGF0ZXMsIGh0bWwsIHRhZyB9IGZyb20gJ3RhZ2dlZGpzJztcbmV4cG9ydCBjb25zdCBJdGVtID0gdGFnLmltbXV0YWJsZVByb3BzKCh0b2RvLCBkaXNwYXRjaCwgaW5kZXgpID0+IChlZGl0aW5nID0gZmFsc2UsIF8gPSBzdGF0ZXMoZ2V0ID0+IFtlZGl0aW5nXSA9IGdldChlZGl0aW5nKSkpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzQ5OTc2WzBdLCB0b2RvLmNvbXBsZXRlZCwgZWRpdGluZywgIWVkaXRpbmcgPyBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzNDk5NzZbMV0sIHRvZG8uY29tcGxldGVkICYmICfinIUnLCAoZSkgPT4gZGlzcGF0Y2gudG9nZ2xlSXRlbSh0b2RvLCBpbmRleCksIHRvZG8uY29tcGxldGVkICYmICdjaGVja2VkJywgKCkgPT4gZGlzcGF0Y2gudG9nZ2xlSXRlbSh0b2RvLCBpbmRleCksICgpID0+IGVkaXRpbmcgPSAhZWRpdGluZywgdG9kby50aXRsZSwgKCkgPT4gZGlzcGF0Y2gucmVtb3ZlSXRlbUJ5SW5kZXgoaW5kZXgpKSA6IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczM0OTk3NlsyXSwgdG9kby50aXRsZSwgKCkgPT4gZWRpdGluZyA9IGZhbHNlLCAoZSkgPT4gaGFuZGxlS2V5KGUsIHRpdGxlID0+IHtcbiAgICAgICAgaGFuZGxlVXBkYXRlKHRpdGxlLCB0b2RvLCBpbmRleCwgZGlzcGF0Y2gpO1xuICAgICAgICBlZGl0aW5nID0gZmFsc2U7XG4gICAgfSkpKTtcbn0pO1xuZnVuY3Rpb24gaGFuZGxlVXBkYXRlKHRpdGxlLCB0b2RvLCBpbmRleCwgZGlzcGF0Y2gpIHtcbiAgICBpZiAodGl0bGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRpc3BhdGNoLnJlbW92ZUl0ZW0odG9kby5pZCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlzcGF0Y2gudXBkYXRlVG9CeUluZGV4KHRvZG8sIHsgdGl0bGUgfSwgaW5kZXgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUtleShlLCBvblZhbGlkKSB7XG4gICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZS50cmltKCk7XG4gICAgICAgIG9uVmFsaWQodmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG47XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMzQ5OTc2OiBbW3sgXCJublwiOiBcImxpXCIsIFwiYXRcIjogW1tcImNsYXNzLmNvbXBsZXRlZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBcImNsYXNzXCJdLCBbXCJjbGFzcy5lZGl0aW5nXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIFwiY2xhc3NcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidmlld1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcInZhbHVlXCIsIFwidG9nZ2xlXCJdXSB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZ2dsZVwiXSwgW1widHlwZVwiLCBcImNoZWNrYm94XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDIgfV0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wiZGF0YS10ZXN0aWRcIiwgXCJ0b2RvLWl0ZW0tbGFiZWxcIl0sIFtcImRibGNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJkZXN0cm95XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfl5HvuI8gZGVzdHJveVwiIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwiaW5wdXQtY29udGFpbmVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJlZGl0LXRvZG8taW5wdXRcIl0sIFtcInR5cGVcIiwgXCJ0ZXh0XCJdLCBbXCJhdXRvZm9jdXNcIl0sIFtcImNsYXNzXCIsIFwiZWRpdFwiXSwgW1widmFsdWVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImJsdXJcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcImtleWRvd25cIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dIH0sIHsgXCJublwiOiBcImxhYmVsXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidmlzdWFsbHktaGlkZGVuXCJdLCBbXCJodG1sZm9yXCIsIFwidG9kby1pbnB1dFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkVkaXQgVG9kbyBJbnB1dFwiIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBoYW5kbGVLZXkgfSBmcm9tIFwiLi9pdGVtLmpzXCI7XG5leHBvcnQgY29uc3QgSGVhZGVyID0gKGRpc3BhdGNoKSA9PiB0YWcucmVuZGVyT25jZSA9ICgpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3ODYwWzBdLCAoZSkgPT4ge1xuICAgIGNvbnN0IGVudGVyID0gaGFuZGxlS2V5KGUsIHRpdGxlID0+IGRpc3BhdGNoLmFkZEl0ZW0odGl0bGUpKTtcbiAgICBpZiAoZW50ZXIpIHtcbiAgICAgICAgZS50YXJnZXQudmFsdWUgPSBcIlwiO1xuICAgIH1cbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQ3ODYwOiBbW3sgXCJublwiOiBcImhlYWRlclwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcImhlYWRlclwiXSwgW1wiZGF0YS10ZXN0aWRcIiwgXCJoZWFkZXJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoMVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2Rvc1wiIH1dIH0sIHsgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcImF1dG9mb2N1c1wiXSwgW1wiY2xhc3NcIiwgXCJuZXctdG9kb1wiXSwgW1wicGxhY2Vob2xkZXJcIiwgXCJXaGF0IG5lZWRzIHRvIGJlIGRvbmU/XCJdLCBbXCJrZXlkb3duXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IHRhZywgaHRtbCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IEZvb3RlciA9IHRhZy5pbW11dGFibGVQcm9wcygodG9kb3NDb3VudCwgcmVtb3ZlQ29tcGxldGVkLCByb3V0ZSwgYWN0aXZlVG9kb0NvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3NzE1NlswXSwgYWN0aXZlVG9kb0NvdW50LCBhY3RpdmVUb2RvQ291bnQgPiAxICYmIFwic1wiLCByb3V0ZSA9PT0gXCIvXCIsIHJvdXRlID09PSBcIi9hY3RpdmVcIiwgcm91dGUgPT09IFwiL2NvbXBsZXRlZFwiLCAodG9kb3NDb3VudCAtIGFjdGl2ZVRvZG9Db3VudCkgPiAwICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczc3MTU2WzFdLCAoKSA9PiByZW1vdmVDb21wbGV0ZWQoKSkpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M3NzE1NjogW1t7IFwibm5cIjogXCJmb290ZXJcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJmb290ZXJcIl0sIFtcImRhdGEtdGVzdGlkXCIsIFwiZm9vdGVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZG8tY291bnRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBpdGVtXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgbGVmdCFcIiB9XSB9LCB7IFwibm5cIjogXCJ1bFwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcImZpbHRlcnNcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsaVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9kby12aWV3LWFsbC1saW5rXCJdLCBbXCJjbGFzcy5zZWxlY3RlZFwiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBcImNsYXNzXCJdLCBbXCJocmVmXCIsIFwiIy9cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJBbGxcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJsaVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9kby12aWV3LWFjdGl2ZS1saW5rXCJdLCBbXCJjbGFzcy5zZWxlY3RlZFwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBcImNsYXNzXCJdLCBbXCJocmVmXCIsIFwiIy9hY3RpdmVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJBY3RpdmVcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJsaVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9kby12aWV3LWNvbXBsZXRlZC1saW5rXCJdLCBbXCJjbGFzcy5zZWxlY3RlZFwiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBcImNsYXNzXCJdLCBbXCJocmVmXCIsIFwiIy9jb21wbGV0ZWRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJDb21wbGV0ZWRcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dLCBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwiY2xlYXItY29tcGxldGVkXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNsZWFyIGNvbXBsZXRlZFwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgY2FsbGJhY2ssIG9uRGVzdHJveSwgc3RhdGUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmNvbnN0IGdldEhhc2ggPSAoKSA9PiB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkgfHwgJy8nO1xuLyoqIG9ubHkgc2hvdWxkIHJ1biBvbmNlICovXG5jb25zdCBIYXNoUm91dGVyID0gKG9uSGFzaENoYW5nZSkgPT4ge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4gb25IYXNoQ2hhbmdlKGdldEhhc2goKSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGxpc3RlbmVyO1xufTtcbi8qKiBIb29rIGludG8gYnJvd3NlciB3aW5kb3cgaGFzaCBjaGFuZ2VzIGFuZCBjYXVzZSBzdGF0ZSB0byByZW5kZXIgYWZ0ZXIgY2hhbmdlICovXG5leHBvcnQgY29uc3QgdXNlSGFzaFJvdXRlciA9ICgpID0+IHtcbiAgICBjb25zdCBtZW1vcnkgPSBzdGF0ZSgoKSA9PiAoe1xuICAgICAgICByb3V0ZTogZ2V0SGFzaCgpLFxuICAgICAgICBsb2NhdGlvbjogd2luZG93LmxvY2F0aW9uLFxuICAgIH0pKTtcbiAgICAvLyBXaGF0IHRvIHJ1biBvbiBjaGFuZ2UgYW5kIHNpZ25pZnkgYSBzdGF0ZSBjaGFuZ2Ugd2lsbCBvY2N1ci4gT25seSBmaXJzdCBpbnN0YW5jZSBpcyB1c2VkIGJlbG93IGluIGxpc3RlbmVyXG4gICAgY29uc3Qgb25IYXNoQ2hhbmdlID0gY2FsbGJhY2soKHJvdXRlKSA9PiBtZW1vcnkucm91dGUgPSBnZXRIYXNoKCkpO1xuICAgIC8vIHJ1bnMgZnVuY3Rpb24gY2FsbCBvbmx5IG9uY2VcbiAgICBjb25zdCBsaXN0ZW5lciA9IHN0YXRlKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIEhhc2hSb3V0ZXIob25IYXNoQ2hhbmdlKTtcbiAgICB9KTtcbiAgICBvbkRlc3Ryb3koKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBsaXN0ZW5lcikpO1xuICAgIHJldHVybiBtZW1vcnk7XG59O1xuIiwiaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSBcIi4vY29tcG9uZW50cy9oZWFkZXIuanNcIjtcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvZm9vdGVyLmpzXCI7XG5pbXBvcnQgeyB0b2RvUmVkdWNlciB9IGZyb20gXCIuL3JlZHVjZXIuanNcIjtcbmltcG9ydCB7IGh0bWwgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHVzZUhhc2hSb3V0ZXIgfSBmcm9tIFwiLi9IYXNoUm91dGVyLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4vY29tcG9uZW50cy9pdGVtLmpzXCI7XG5leHBvcnQgY29uc3QgdG9kb3MgPSBbXTtcbmNvbnN0IGRpc3BhdGNoID0gdG9kb1JlZHVjZXIodG9kb3MpO1xuZXhwb3J0IGNvbnN0IHRvZG9BcHAgPSAoKSA9PiB7XG4gICAgY29uc3Qgcm91dGUgPSB1c2VIYXNoUm91dGVyKCkucm91dGU7XG4gICAgY29uc3QgYWN0aXZlVG9kb0NvdW50ID0gdG9kb3MuZmlsdGVyKCh0b2RvKSA9PiAhdG9kby5jb21wbGV0ZWQpLmxlbmd0aDtcbiAgICBjb25zdCBpc0FjdGl2ZVJvdXRlID0gcm91dGUgPT09IFwiL2FjdGl2ZVwiO1xuICAgIGNvbnN0IGlzQ29tcGxldGVkUm91dGUgPSByb3V0ZSA9PT0gXCIvY29tcGxldGVkXCI7XG4gICAgY29uc3QgdmlzaWJsZVRvZG9zID0gaXNBY3RpdmVSb3V0ZSAmJiB0b2Rvcy5maWx0ZXIodG9kbyA9PiAhdG9kby5jb21wbGV0ZWQpIHx8XG4gICAgICAgIGlzQ29tcGxldGVkUm91dGUgJiYgdG9kb3MuZmlsdGVyKHRvZG8gPT4gdG9kby5jb21wbGV0ZWQpIHx8IHRvZG9zO1xuICAgIGNvbnN0IHRvZG9Db3VudCA9IHRvZG9zLmxlbmd0aDtcbiAgICBjb25zdCBuZXdNYXAgPSB2aXNpYmxlVG9kb3MubWFwKCh0b2RvLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gSXRlbSh0b2RvLCBkaXNwYXRjaCwgaW5kZXgpLmtleSh0b2RvLmlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTQzMTgwWzBdLCAvKmF1dG9UZXN0aW5nQ29udHJvbHMoW1ZpZXdUeXBlcy5Ub2RvXSwgZmFsc2UpKi8gZmFsc2UsIEhlYWRlcihkaXNwYXRjaCksIHRvZG9Db3VudCA+IDAgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTQzMTgwWzFdLCBhY3RpdmVUb2RvQ291bnQgPCAxID8gMSA6IDAsIChlKSA9PiBkaXNwYXRjaC50b2dnbGVBbGwoZS50YXJnZXQuY2hlY2tlZCksIG5ld01hcCwgRm9vdGVyKHRvZG9Db3VudCwgZGlzcGF0Y2gucmVtb3ZlQ29tcGxldGVkLCByb3V0ZSwgYWN0aXZlVG9kb0NvdW50KSkpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxNDMxODA6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH1dLCBbeyBcIm5uXCI6IFwibWFpblwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcIm1haW5cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0b2dnbGUtYWxsLWNvbnRhaW5lclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9nZ2xlLWFsbFwiXSwgW1wiY2xhc3NcIiwgXCJ0b2dnbGUtYWxsXCJdLCBbXCJ0eXBlXCIsIFwiY2hlY2tib3hcIl0sIFtcImNoZWNrZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0b2dnbGUtYWxsLWxhYmVsXCJdLCBbXCJmb3JcIiwgXCJ0b2dnbGUtYWxsXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiVG9nZ2xlIEFsbCBJbnB1dFwiIH1dIH1dIH0sIHsgXCJublwiOiBcInVsXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidG9kby1saXN0IHNob3ctcHJpb3JpdHlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgICBcIiB9XV0gfTtcbiIsImZ1bmN0aW9uIHV1aWQoKSB7XG4gICAgcmV0dXJuIFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCwgdiA9IGMgPT09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRvZG9SZWR1Y2VyKHRvZG9zKSB7XG4gICAgZnVuY3Rpb24gYWRkSXRlbSh0aXRsZSkge1xuICAgICAgICB0b2Rvcy5wdXNoKHsgaWQ6IHV1aWQoKSwgdGl0bGUsIGNvbXBsZXRlZDogZmFsc2UgfSk7XG4gICAgICAgIHJldHVybiB0b2RvcztcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlSXRlbShpZCkge1xuICAgICAgICByZXR1cm4gdG9kb3MuZmlsdGVyKCh0KSA9PiB0LmlkICE9PSBpZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUl0ZW1CeUluZGV4KGluZGV4KSB7XG4gICAgICAgIHRvZG9zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJldHVybiB0b2RvcztcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9nZ2xlSXRlbSh0b2RvLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdXBkYXRlVG9CeUluZGV4KHRvZG8sIHsgY29tcGxldGVkOiAhdG9kby5jb21wbGV0ZWQgfSwgaW5kZXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XG4gICAgICAgIHRvZG9zID0gW107XG4gICAgICAgIHJldHVybiB0b2RvcztcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9nZ2xlQWxsKGNvbXBsZXRlZCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRvZG9zLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgICAgIHRvZG9zW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAuLi50b2Rvc1tpbmRleF0sXG4gICAgICAgICAgICAgICAgY29tcGxldGVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9kb3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUNvbXBsZXRlZCgpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSB0b2Rvcy5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgICAgICBpZiAodG9kb3NbaW5kZXhdLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIHRvZG9zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVUb0J5SW5kZXgodG9kbywgcGFydGlhbCwgaW5kZXgpIHtcbiAgICAgICAgdG9kb3NbaW5kZXhdID0geyAuLi50b2RvLCAuLi5wYXJ0aWFsIH07XG4gICAgICAgIHJldHVybiB0b2RvcztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkSXRlbSxcbiAgICAgICAgcmVtb3ZlSXRlbSxcbiAgICAgICAgdG9nZ2xlSXRlbSxcbiAgICAgICAgcmVtb3ZlQWxsLFxuICAgICAgICB0b2dnbGVBbGwsXG4gICAgICAgIHJlbW92ZUNvbXBsZXRlZCxcbiAgICAgICAgcmVtb3ZlSXRlbUJ5SW5kZXgsXG4gICAgICAgIGNvbXBsZXRlSXRlbTogZnVuY3Rpb24gY29tcGxldGVJdGVtKHRvZG8sIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlVG9CeUluZGV4KHRvZG8sIHsgY29tcGxldGVkOiB0cnVlIH0sIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlSXRlbUJ5SW5kZXg6IGZ1bmN0aW9uIHVwZGF0ZUl0ZW1CeUluZGV4KHRvZG8sIGluZGV4KSB7XG4gICAgICAgICAgICB0b2Rvc1tpbmRleF0gPSB7IC4uLnRvZG8gfTtcbiAgICAgICAgICAgIHJldHVybiB0b2RvcztcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlVG9CeUluZGV4LFxuICAgIH07XG59XG47XG4iLCJpbXBvcnQgeyBodG1sLCBzdGF0ZXMsIHRhZywgaXNTdWJqZWN0SW5zdGFuY2UsIGZpZWxkc2V0LCBkaXYsIGxlZ2VuZCwgc3BhbiwgYnV0dG9uIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IGlubmVySHRtbFRlc3QgPSB0YWcoKF9wcm9wcywgYiwgLy8gVE9ETzogcmVtb3ZlLCBub3QgaW4gdXNlXG5jaGlsZHJlbikgPT4ge1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGlubmVySHRtbFRlc3QudXBkYXRlcyh4ID0+IFtfcHJvcHMsIGIsIGNoaWxkcmVuXSA9IHgpO1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGZpZWxkc2V0KHsgaWQ6IFwiaW5uZXJIdG1sVGVzdHMtMVwiIH0sIGxlZ2VuZCgnbm8gcHJvcHMgdGVzdCcpLCBkaXYoeyBzdHlsZTogXCJib3JkZXI6MnB4IHNvbGlkIHB1cnBsZTtcIiB9LCBfID0+IGNoaWxkcmVuKSwgZGl2KF8gPT4gYGlzU3ViamVjdEluc3RhbmNlOiR7aXNTdWJqZWN0SW5zdGFuY2UoY2hpbGRyZW4pfWApLCBkaXYoXyA9PiBgaXNTdWJqZWN0VGFnQXJyYXk6JHtjaGlsZHJlbiBpbnN0YW5jZW9mIEFycmF5fWApLCBidXR0b24oe1xuICAgICAgICBpZDogXCJpbm5lckh0bWxUZXN0LWNvdW50ZXItYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrY291bnRlcixcbiAgICB9LCBfID0+IGBpbmNyZWFzZSBpbm5lckh0bWxUZXN0ICR7Y291bnRlcn1gKSwgc3Bhbih7IGlkOiBcImlubmVySHRtbFRlc3QtY291bnRlci1kaXNwbGF5XCIgfSwgXyA9PiBjb3VudGVyKSwgXyA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnaW5uZXJIdG1sVGVzdCcgfSkpO1xufSk7XG5leHBvcnQgY29uc3QgaW5uZXJIdG1sUHJvcHNUZXN0ID0gdGFnKCh4LCBjaGlsZHJlbikgPT4gKGNvdW50ZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIF8gPSBzdGF0ZXMoZ2V0ID0+IFt7IGNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgY291bnRlciwgcmVuZGVyQ291bnQgfSkpLCBfXyA9ICsrcmVuZGVyQ291bnQpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyNzA5MFswXSwgeCwgY2hpbGRyZW4sICgpID0+ICsrY291bnRlciwgY291bnRlciwgY291bnRlciwgLypyZW5kZXJDb3VudERpdihyZW5kZXJDb3VudCkqLyBmYWxzZSkpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczEyNzA5MDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0taW5uZXJIdG1sVGVzdHMuanMtLT5cIiB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFRlc3RzLTJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5uZXJIVE1MIFByb3BzOiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sUHJvcHNUZXN0LWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmNyZWFzZSBpbm5lckh0bWxQcm9wc1Rlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sUHJvcHNUZXN0LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBnZXRJbm5lckhUTUwsIGh0bWwsIHN0YXRlcywgdGFnLCBmaWVsZHNldCwgbGVnZW5kLCBkaXYgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGlubmVySHRtbFByb3BzVGVzdCwgaW5uZXJIdG1sVGVzdCB9IGZyb20gXCIuL2lubmVySHRtbFRlc3RzLmpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuY29uc3QgdGVzdDIyID0gdGFnKChhLCBiLCBjaGlsZHJlbikgPT4ge1xuICAgIHRlc3QyMi51cGRhdGVzKHggPT4gW2EsIGIsIGNoaWxkcmVuXSA9IHgpO1xuICAgIHJldHVybiBmaWVsZHNldChsZWdlbmQoJ3h4eHh4JyksIGRpdignaGVsbG8gb3RoZXIgd29ybGQnLCBfID0+IGEsICcgLSAnLCBfID0+IGIpLCBkaXYoeyBzdHlsZTogXCJib3JkZXI6MnB4IHNvbGlkIHJlZDtcIiB9LCAnKioqJywgXyA9PiBjaGlsZHJlbiwgJyoqKicpKTtcbn0pO1xuY29uc3Qgbm9UYWdUZXN0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGlubmVySFRNTCA9IGdldElubmVySFRNTCgpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MDE5NzRbMF0sIDExLCBpbm5lckhUTUwsIDIyKS5hY2NlcHRJbm5lckhUTUwoaW5uZXJIVE1MKTtcbn07XG5leHBvcnQgY29uc3QgY2hpbGQgPSB0YWcoKF8gPSAnY2hpbGRUZXN0cycpID0+IChyZW5kZXJDb3VudCA9IDAsIGNvdW50ZXIgPSAwLCBfID0gc3RhdGVzKGdldCA9PiBbeyByZW5kZXJDb3VudCwgY291bnRlciB9XSA9IGdldCh7IHJlbmRlckNvdW50LCBjb3VudGVyIH0pKSwgX18gPSArK3JlbmRlckNvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MDE5NzRbMV0sIHRlc3QyMigxLCAyLCBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MDE5NzRbMl0sIERhdGUubm93KCkpKSwgaW5uZXJIdG1sVGVzdCh7fSwgMiwgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODAxOTc0WzNdLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIHJlbmRlckNvdW50LCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY2hpbGRUZXN0cy1pbm5lckh0bWxUZXN0JyB9KSkpLCBub1RhZ1Rlc3QoKS5pbm5lckhUTUwgPSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MDE5NzRbNF0sICgpID0+ICsrY291bnRlciwgY291bnRlciwgcmVuZGVyQ291bnQsIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjaGlsZFRlc3RzLWlubmVySHRtbFRlc3QtYycgfSkpLCBpbm5lckh0bWxQcm9wc1Rlc3QoMjIsIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczgwMTk3NFs1XSwgKCkgPT4gKytjb3VudGVyLCBjb3VudGVyLCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnaW5uZXJIdG1sUHJvcHNUZXN0IGNoaWxkJyB9KSkpLCBjaGlsZEFzUHJvcFRlc3QoeyBjaGlsZDogaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODAxOTc0WzZdLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIGNvdW50ZXIpIH0pLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIHJlbmRlckNvdW50LCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY2hpbGRUZXN0cycgfSkpKTtcbmNvbnN0IGNoaWxkQXNQcm9wVGVzdCA9IHRhZygoeyBjaGlsZCB9KSA9PiB7XG4gICAgY2hpbGRBc1Byb3BUZXN0LnVwZGF0ZXMoeCA9PiBbeyBjaGlsZCB9XSA9IHgpO1xuICAgIHJldHVybiBmaWVsZHNldChsZWdlbmQoJ2NoaWxkIGFzIHByb3AnKSwgXyA9PiBjaGlsZCk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M4MDE5NzQ6IFtbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm5vVGFnVGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiLS0tXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrKytcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4OjIgMiAyMGVtXCJdLCBbXCJpZFwiLCBcImNoaWxkcmVuLXRlc3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY2hpbGRUZXN0c1wiIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjaGlsZFRlc3RzLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CuIGluY3JlYXNlIGNoaWxkVGVzdHMgb3V0c2lkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiAtIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkVGVzdHMtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFiYy0xMjMtXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJoclwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJGaWVsZCBzZXQgYm9keSBBXCIgfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkK4gKEEpIGluY3JlYXNlIGNoaWxkVGVzdHMgaW5zaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBcIiB9XSwgW3sgXCJublwiOiBcImJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiRmllbGQgc2V0IGJvZHkgQ1wiIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWJ1dHRvbi1jXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkK4gKEMpIGluY3JlYXNlIGNoaWxkVGVzdHMgaW5zaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1kaXNwbGF5LWNcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH1dLCBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJGaWVsZCBzZXQgYm9keSBCXCIgfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxQcm9wc1Rlc3QtY2hpbGRUZXN0cy1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QriAoQikgaW5jcmVhc2UgY2hpbGRUZXN0cyBpbnNpZGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sUHJvcHNUZXN0LWNoaWxkVGVzdHMtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBoZWxsbyBjaGlsZCBhcyBwcm9wIHRlc3RcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjaGlsZC1hcy1wcm9wLXRlc3QtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkK4gY2hpbGQgYXMgcHJvcCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjaGlsZC1hcy1wcm9wLXRlc3QtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBvbkRlc3Ryb3ksIHNpZ25hbCwgdGFnLCBob3N0LCBzcGFuLCBidXR0b24sIGRpdiwgbm9FbGVtZW50IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xubGV0IGRlc3Ryb3lDb3VudCA9IHNpZ25hbCgwKTsgLy8gbGV0cyB1c2UgU2lnbmFsc1xuZXhwb3J0IGNvbnN0IGRlc3Ryb3lzID0gdGFnKCgpID0+IChvbiA9IHRydWUsIHJlbmRlckNvdW50ID0gMCwgX18gPSArK3JlbmRlckNvdW50KSA9PiBub0VsZW1lbnQoJ2Rlc3Ryb3lDb3VudDogJywgc3Bhbih7IGlkOiBcImRlc3Ryb3lDb3VudFwiIH0sIF8gPT4gZGVzdHJveUNvdW50KSwgJ29uL29mZjogJywgXyA9PiBvbiwgXyA9PiBvbiAmJiB0b0Rlc3Ryb3koKSwgYnV0dG9uKHtcbiAgICBpZDogXCJ0b2dnbGUtZGVzdHJveXNcIiwgdHlwZTogXCJidXR0b25cIixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIG9uID0gIW9uO1xuICAgIH0sXG59LCBfID0+IG9uID8gJ2Rlc3Ryb3knIDogJ3Jlc3RvcmUnKSwgKCkgPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2Rlc3Ryb3lzJyB9KSkpO1xuY29uc3QgdG9EZXN0cm95ID0gdGFnKCgpID0+IChfID0gb25EZXN0cm95KCgpID0+ICsrZGVzdHJveUNvdW50LnZhbHVlKSkgPT4gZGl2LmF0dHIoaG9zdC5vbkRlc3Ryb3koKCkgPT4ge1xuICAgICsrZGVzdHJveUNvdW50LnZhbHVlO1xufSkpKHtcbiAgICBpZDogXCJkZXN0cm95YWJsZS1jb250ZW50XCIsIHN0eWxlOiBcImJvcmRlcjoxcHggc29saWQgb3JhbmdlO1wiXG59LCAnd2lsbCBiZSBkZXN0cm95ZWQnKSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRngoeyBmeEluLCBmeE91dCwgXG4vLyBzdGFnZ2VyQnkgPSAzMDAsXG5vdXRQb3NpdGlvbkFic29sdXRlID0gdHJ1ZSwgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGluOiAoaW5wdXQsIHN0YWdnZXIpID0+IGFuaW1hdGVJbml0KHtcbiAgICAgICAgICAgIGZ4TmFtZTogZnhJbixcbiAgICAgICAgICAgIC4uLmlucHV0LFxuICAgICAgICB9LCBzdGFnZ2VyKSxcbiAgICAgICAgb3V0OiAoaW5wdXQsIHN0YWdnZXIpID0+IGFuaW1hdGVEZXN0cm95KHtcbiAgICAgICAgICAgIGZ4TmFtZTogZnhPdXQsXG4gICAgICAgICAgICBvdXRQb3NpdGlvbkFic29sdXRlLFxuICAgICAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgIH0sIHN0YWdnZXIpLFxuICAgIH07XG59XG5jb25zdCBhbmltYXRlSW5pdCA9IGFzeW5jICh7IHRhcmdldCwgZnhOYW1lID0gJ2ZhZGVJblVwJyB9LCBzdGFnZ2VyKSA9PiB7XG4gICAgdGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgaWYgKHN0YWdnZXIpIHtcbiAgICAgICAgYXdhaXQgd2FpdChzdGFnZ2VyKTtcbiAgICB9XG4gICAgdGFyZ2V0LnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgcmV0dXJuIGFkZENsYXNzZXNUbyhmeE5hbWUsIHRhcmdldCk7XG59O1xuY29uc3QgYW5pbWF0ZURlc3Ryb3kgPSBhc3luYyAoeyB0YXJnZXQsIG91dFBvc2l0aW9uQWJzb2x1dGUgPSB0cnVlLCBmeE5hbWUgPSAnZmFkZU91dFVwJywgfSwgc3RhZ2dlcikgPT4ge1xuICAgIGlmIChvdXRQb3NpdGlvbkFic29sdXRlKSB7XG4gICAgICAgIGNhcHR1cmVFbGVtZW50UG9zaXRpb24odGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKHN0YWdnZXIpIHtcbiAgICAgICAgYXdhaXQgd2FpdChzdGFnZ2VyKTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZENsYXNzZXNUbyhmeE5hbWUsIHRhcmdldCk7XG59O1xuZnVuY3Rpb24gYWRkQ2xhc3Nlc1RvKGZ4TmFtZSwgdGFyZ2V0KSB7XG4gICAgbGV0IHJlcztcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcmVzaW5hdGUocmVzb2x2ZSkge1xuICAgICAgICByZXMgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUFuaW1hdGlvbkVuZChldmVudCkge1xuICAgICAgICAvLyBPcHRpb25hbDogbWFrZSBzdXJlIHRoZSBldmVudCBpcyBmcm9tIHRoZSB0YXJnZXQgZWxlbWVudFxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSB0YXJnZXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlX19hbmltYXRlZCcsICdhbmltYXRlX18nICsgZnhOYW1lKTtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICAgIHJlcyh1bmRlZmluZWQpO1xuICAgIH1cbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZV9fYW5pbWF0ZWQnLCAnYW5pbWF0ZV9fJyArIGZ4TmFtZSk7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG4vLyBhYnNvbHV0ZVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFbGVtZW50UG9zaXRpb24oZWxlbWVudCkge1xuICAgIGVsZW1lbnQuc3R5bGUuekluZGV4ID0gZWxlbWVudC5zdHlsZS56SW5kZXggfHwgMTtcbiAgICBjb25zdCB0b1RvcCA9IGVsZW1lbnQub2Zmc2V0VG9wICsgJ3B4JztcbiAgICBjb25zdCB0b0xlZnQgPSBlbGVtZW50Lm9mZnNldExlZnQgKyAncHgnO1xuICAgIGNvbnN0IHRvV2lkdGggPSAoZWxlbWVudC5jbGllbnRXaWR0aCArIChlbGVtZW50Lm9mZnNldFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCkgKyAxKSArICdweCc7XG4gICAgY29uc3QgdG9IZWlnaHQgPSAoZWxlbWVudC5jbGllbnRIZWlnaHQgKyAoZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBlbGVtZW50LmNsaWVudEhlaWdodCkgKyAxKSArICdweCc7XG4gICAgY29uc3QgZml4ID0gKCkgPT4ge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHRvVG9wO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSB0b0xlZnQ7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSB0b1dpZHRoO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IHRvSGVpZ2h0O1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICB9O1xuICAgIC8vIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnXG4gICAgLy8gYWxsb3cgb3RoZXIgZWxlbWVudHMgdGhhdCBhcmUgYmVpbmcgcmVtb3ZlZCB0byBoYXZlIGEgbW9tZW50IHRvIGZpZ3VyZSBvdXQgd2hlcmUgdGhleSBjdXJyZW50bHkgc2l0XG4gICAgc2V0VGltZW91dChmaXgsIDApO1xufVxuZnVuY3Rpb24gd2FpdCh0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICAgICAgc2V0VGltZW91dChyZXMsIHRpbWUpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRnguZnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRnggfSBmcm9tIFwiLi9jcmVhdGVGeC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgYWRkUGFpbnRSZW1vdmVBd2FpdCwgZ2V0SW5uZXJIVE1MLCBob3N0LCBodG1sIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG4vKiogcHJlZmVycmVkICovXG5leHBvcnQgY29uc3QgeyBpbjogZmFkZUluVXAsIG91dDogZmFkZU91dERvd24gfSA9IGNyZWF0ZUZ4KHtcbiAgICBmeEluOiAnZmFkZUluVXAnLFxuICAgIGZ4T3V0OiAnZmFkZU91dERvd24nXG59KTtcbmV4cG9ydCBjb25zdCB7IGluOiBmYWRlSW5Eb3duLCBvdXQ6IGZhZGVPdXRVcCB9ID0gY3JlYXRlRngoe1xuICAgIGZ4SW46ICdmYWRlSW5Eb3duJyxcbiAgICBmeE91dDogJ2ZhZGVPdXRVcCdcbn0pO1xuZXhwb3J0IGNvbnN0IHsgaW46IGZhZGVJbiwgb3V0OiBmYWRlT3V0IH0gPSBjcmVhdGVGeCh7XG4gICAgZnhJbjogJ2ZhZGVJbicsXG4gICAgZnhPdXQ6ICdmYWRlT3V0Jyxcbn0pO1xuLyoqIEdyb3VwIGNyZWF0ZWQgYW5pbWF0aW9ucyB0b2dldGhlciB3aXRoIHN0YWdnZXJpbmcgKi9cbmV4cG9ydCBjb25zdCBmeEdyb3VwID0gKHsgc3RhZ2dlciA9IDEwMCwgZnhJbiwgZnhPdXQsIGR1cmF0aW9uID0gJzJzJywgaW5OYW1lID0gJ2ZhZGVJblVwJywgb3V0TmFtZSA9ICdmYWRlT3V0RG93bicsIG91dFBvc2l0aW9uQWJzb2x1dGUgPSBmYWxzZSwgfSA9IHt9KSA9PiB7XG4gICAgbGV0IHN0YWdnZXJUaW1lID0gMDtcbiAgICBjb25zdCBzZXR1cCA9IHNldHVwRngoZnVuY3Rpb24gb25Jbml0KGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1hbmltYXRlLWR1cmF0aW9uJywgZHVyYXRpb24pO1xuICAgICAgICBjb25zdCB0b3RhbFN0YWdnZXIgPSBzdGFnZ2VyICogKHN0YWdnZXJUaW1lKyspO1xuICAgICAgICByZXR1cm4gc2V0dXAuZnhJbih7IHRhcmdldDogZWxlbWVudCB9LCB0b3RhbFN0YWdnZXIpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLS1zdGFnZ2VyVGltZTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gb25EZXN0cm95KGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1hbmltYXRlLWR1cmF0aW9uJywgZHVyYXRpb24pO1xuICAgICAgICBjb25zdCB0b3RhbFN0YWdnZXIgPSBzdGFnZ2VyICogKHN0YWdnZXJUaW1lKyspO1xuICAgICAgICBjb25zdCBkZXN0cm95UHJvbWlzZSA9IHNldHVwLmZ4T3V0KHsgdGFyZ2V0OiBlbGVtZW50IH0sIHRvdGFsU3RhZ2dlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAtLXN0YWdnZXJUaW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgYWRkUGFpbnRSZW1vdmVBd2FpdChkZXN0cm95UHJvbWlzZSk7XG4gICAgICAgIHJldHVybiBkZXN0cm95UHJvbWlzZTtcbiAgICB9LCBmeEluLCBmeE91dCwgaW5OYW1lLCBvdXROYW1lLCBcbiAgICAvLyBzdGFnZ2VyLFxuICAgIG91dFBvc2l0aW9uQWJzb2x1dGUpO1xuICAgIHJldHVybiBzZXR1cC5ob3N0O1xufTtcbi8qKiBVc2VkIGFzIGEgaG9zdCBvbiBlbGVtZW50LiA8ZGl2ICR7ZngoKX0+ICovXG5leHBvcnQgY29uc3QgZnggPSAoeyBmeEluLCBmeE91dCwgc3RhZ2dlciwgaW5OYW1lID0gJ2ZhZGVJblVwJywgb3V0TmFtZSA9ICdmYWRlT3V0RG93bicsIGR1cmF0aW9uID0gJy4ycycsIG91dFBvc2l0aW9uQWJzb2x1dGUgPSBmYWxzZSwgfSA9IHt9KSA9PiB7XG4gICAgY29uc3Qgc2V0dXAgPSBzZXR1cEZ4KChlbGVtZW50KSA9PiB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYW5pbWF0ZS1kdXJhdGlvbicsIGR1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHNldHVwLmZ4SW4oeyB0YXJnZXQ6IGVsZW1lbnQgfSwgc3RhZ2dlcik7XG4gICAgfSwgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1hbmltYXRlLWR1cmF0aW9uJywgZHVyYXRpb24pO1xuICAgICAgICBjb25zdCBkZXN0cm95UHJvbWlzZSA9IHNldHVwLmZ4T3V0KHsgdGFyZ2V0OiBlbGVtZW50IH0sIHN0YWdnZXIpO1xuICAgICAgICBhZGRQYWludFJlbW92ZUF3YWl0KGRlc3Ryb3lQcm9taXNlKTtcbiAgICAgICAgcmV0dXJuIGRlc3Ryb3lQcm9taXNlO1xuICAgIH0sIGZ4SW4sIGZ4T3V0LCBpbk5hbWUsIG91dE5hbWUsIFxuICAgIC8vIHN0YWdnZXIsXG4gICAgb3V0UG9zaXRpb25BYnNvbHV0ZSk7XG4gICAgcmV0dXJuIHNldHVwLmhvc3Q7XG59O1xuZnVuY3Rpb24gc2V0dXBGeChvbkluaXQsIG9uRGVzdHJveSwgZnhJbiwgZnhPdXQsIGluTmFtZSwgb3V0TmFtZSwgXG4vLyBzdGFnZ2VyOiBudW1iZXIgfCB1bmRlZmluZWQsXG5vdXRQb3NpdGlvbkFic29sdXRlKSB7XG4gICAgaWYgKCFmeEluIHx8ICFmeE91dCkge1xuICAgICAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRngoe1xuICAgICAgICAgICAgZnhJbjogaW5OYW1lLFxuICAgICAgICAgICAgZnhPdXQ6IG91dE5hbWUsXG4gICAgICAgICAgICAvLyBzdGFnZ2VyQnk6IHN0YWdnZXIsXG4gICAgICAgICAgICBvdXRQb3NpdGlvbkFic29sdXRlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFmeEluKSB7XG4gICAgICAgICAgICBmeEluID0gY3JlYXRlZC5pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ4T3V0KSB7XG4gICAgICAgICAgICBmeE91dCA9IGNyZWF0ZWQub3V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGZ4SW4sIGZ4T3V0LFxuICAgICAgICBob3N0OiBob3N0KCgpID0+IHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgb25Jbml0LFxuICAgICAgICAgICAgb25EZXN0cm95LFxuICAgICAgICB9KVxuICAgIH07XG59XG4vKiogQGRlcHJlY2F0ZWQgLSBJbnN0ZWFkIHVzZSA8ZGl2ICR7ZngoKX0+IC4uLiBVc2Ugb24gaHRtbCBlbGVtZW50cyB0byBoYXZlIHRoZW0gYW5pbWF0ZWQgaW4gYW5kIG91dCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuaW1hdGVXcmFwKHsgZnhJbiwgZnhPdXQsIGR1cmF0aW9uID0gJy4ycycsIG91dFBvc2l0aW9uQWJzb2x1dGUgPSBmYWxzZSwgfSA9IHtcbiAgICBkdXJhdGlvbjogJy4ycycsXG4gICAgb3V0UG9zaXRpb25BYnNvbHV0ZTogZmFsc2UsXG59KSB7XG4gICAgaWYgKCFmeEluIHx8ICFmeE91dCkge1xuICAgICAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRngoe1xuICAgICAgICAgICAgZnhJbjogJ2ZhZGVJblVwJyxcbiAgICAgICAgICAgIGZ4T3V0OiAnZmFkZU91dERvd24nLFxuICAgICAgICAgICAgb3V0UG9zaXRpb25BYnNvbHV0ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZnhJbikge1xuICAgICAgICAgICAgZnhJbiA9IGNyZWF0ZWQuaW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmeE91dCkge1xuICAgICAgICAgICAgZnhPdXQgPSBjcmVhdGVkLm91dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBpbm5lckhUTUwgPSBnZXRJbm5lckhUTUwoKTtcbiAgICByZXR1cm4gaHRtbCBgXG4gICAgPGRpdiBvbmluaXQ9JHtmeElufSBvbmRlc3Ryb3k9JHtmeE91dH0gc3R5bGUuLS1hbmltYXRlLWR1cmF0aW9uPSR7ZHVyYXRpb259PiR7aW5uZXJIVE1MfTwvZGl2PlxuICBgLmFjY2VwdElubmVySFRNTChpbm5lckhUTUwpO1xufVxuLyoqIFVzZSBvbiBodG1sIGVsZW1lbnRzLCB3aXRoaW4gYSBsb29wLCB0byBoYXZlIHRoZW0gYW5pbWF0ZWQgaW4gYW5kIG91dCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuaW1hdGVMb29wKHsgZnhJbiwgZnhPdXQsIGR1cmF0aW9uID0gJy4ycycsIG91dFBvc2l0aW9uQWJzb2x1dGUgPSB0cnVlLCB9ID0ge1xuICAgIGR1cmF0aW9uOiAnLjJzJyxcbiAgICBvdXRQb3NpdGlvbkFic29sdXRlOiB0cnVlLFxufSkge1xuICAgIGlmICghZnhJbiB8fCAhZnhPdXQpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZ4KHtcbiAgICAgICAgICAgIGZ4SW46ICdmYWRlSW5VcCcsXG4gICAgICAgICAgICBmeE91dDogJ2ZhZGVPdXREb3duJyxcbiAgICAgICAgICAgIG91dFBvc2l0aW9uQWJzb2x1dGVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghZnhJbikge1xuICAgICAgICAgICAgZnhJbiA9IGNyZWF0ZWQuaW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmeE91dCkge1xuICAgICAgICAgICAgZnhPdXQgPSBjcmVhdGVkLm91dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBpbm5lckhUTUwgPSBnZXRJbm5lckhUTUwoKTtcbiAgICByZXR1cm4gaHRtbCBgXG4gICAgPGRpdiBvbmluaXQ9JHtmeElufSBvbmRlc3Ryb3k9JHtmeE91dH0gc3R5bGUuLS1hbmltYXRlLWR1cmF0aW9uPSR7ZHVyYXRpb259PiR7aW5uZXJIVE1MfTwvZGl2PlxuICBgLmFjY2VwdElubmVySFRNTChpbm5lckhUTUwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tICcuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBodG1sLCBzdGF0ZXMsIHRhZyB9IGZyb20gJ3RhZ2dlZGpzJztcbmV4cG9ydCBjb25zdCBhcnJheVNjb3JlRGF0YSA9IHRhZygoeyBzY29yZSwgcGxheWVySW5kZXggfSkgPT4ge1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbcmVuZGVyQ291bnRdID0gZ2V0KHJlbmRlckNvdW50KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NzhbMF0sIHNjb3JlLmZyYW1lLCBgc2NvcmUtZGF0YS0ke3BsYXllckluZGV4fS0ke3Njb3JlLmZyYW1lfS1pbnNpZGUtYnV0dG9uYCwgKCkgPT4gKytzY29yZS5zY29yZSwgc2NvcmUuc2NvcmUsIGBzY29yZS1kYXRhLSR7cGxheWVySW5kZXh9LSR7c2NvcmUuZnJhbWV9LWluc2lkZS1kaXNwbGF5YCwgc2NvcmUuc2NvcmUsICgpID0+ICsrcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzY29yZURhdGEnICsgc2NvcmUuZnJhbWUgfSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjc4Nzg6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIGZyYW1lOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lciBzY29yZSBidXR0b24gKytcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIHJlbmRlckNvdW50XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dXSB9O1xuIiwiaW1wb3J0IHsgZngsIGZ4R3JvdXAgfSBmcm9tICd0YWdnZWRqcy1hbmltYXRlLWNzcyc7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gJy4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzJztcbmltcG9ydCB7IGFycmF5U2NvcmVEYXRhIH0gZnJvbSAnLi9hcnJheVNjb3JlRGF0YS50YWcuanMnO1xuaW1wb3J0IHsgdGFnLCBhcnJheSwgc3Vic2NyaWJlLCBkaXYsIGZpZWxkc2V0LCBsZWdlbmQsIGJ1dHRvbiwgc3Bhbiwgc3VwIH0gZnJvbSAndGFnZ2VkanMnO1xuZXhwb3J0IGNvbnN0IGFycmF5cyA9IHRhZygoKSA9PiB7XG4gICAgY29uc3QgcGxheWVycyA9IFtdO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGNvbnN0IHNpZ25hbEFycmF5ID0gYXJyYXkoWydkJywgJ2UnLCAnZiddKTtcbiAgICBjb25zdCBzaW1wbGVBcnJheSA9IFsnYScsICdiJywgJ2MnXTtcbiAgICBjb25zdCBhcnJheUZ4ID0gZnhHcm91cCh7IHN0YWdnZXI6IDEwLCBkdXJhdGlvbjogJy4xcycgfSk7XG4gICAgY29uc3QgZ2V0TmV3UGxheWVyID0gKCkgPT4gKHtcbiAgICAgICAgbmFtZTogJ1BlcnNvbiAnICsgcGxheWVycy5sZW5ndGgsXG4gICAgICAgIHNjb3JlczogJzAsJy5yZXBlYXQoLypmcmFtZUNvdW50Ki8gMCkuc3BsaXQoJywnKS5tYXAoKF92LCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgIGZyYW1lOiBpbmRleCArIDEsXG4gICAgICAgICAgICBzY29yZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCkgKyAxXG4gICAgICAgIH0pKVxuICAgIH0pO1xuICAgIGNvbnN0IHJlbW92ZVBsYXllckJ5SW5kZXggPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgcGxheWVyID0gcGxheWVyc1tpbmRleF07XG4gICAgICAgIHBsYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcGxheWVyLmVkaXQgPSAhcGxheWVyLmVkaXQ7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBhZGRBcnJheVNpZ25hbChsb29wVGltZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxvb3BUaW1lczsgKytpbmRleCkge1xuICAgICAgICAgICAgc2lnbmFsQXJyYXlbc2lnbmFsQXJyYXkubGVuZ3RoXSA9IHNpZ25hbEFycmF5Lmxlbmd0aC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGRpdihzcGFuKCdjb3VudCBkaXNwbGF5OicsIHNwYW4oeyBpZDogXCJhcnJheXMtY291bnRlci1kaXNwbGF5XCIgfSwgXyA9PiBjb3VudGVyKSksIGZpZWxkc2V0KGxlZ2VuZCgnc2lnbmFsIGFycmF5IHRlc3QgJywgc3VwKHsgaWQ6IFwic2lnbmFsLWFycmF5LWNvdW50XCIgfSwgXyA9PiBzaWduYWxBcnJheS5sZW5ndGgpKSwgZGl2KHsgc3R5bGU6IFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIiB9LCBzdWJzY3JpYmUoc2lnbmFsQXJyYXksIGFycmF5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCgoeCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBkaXYoe1xuICAgICAgICAgICAgICAgIGF0dHI6IGFycmF5RngsXG4gICAgICAgICAgICAgICAgaWQ6IF8gPT4gYHNpZ25hbC1hcnJheS1pdGVtLSR7aW5kZXh9YCxcbiAgICAgICAgICAgICAgICBzdHlsZTogXCJib3JkZXI6MXB4IHNvbGlkIGJsYWNrO2JvcmRlci1yYWRpdXM6LjJlbVwiXG4gICAgICAgICAgICB9LCAnaW5kZXg6JywgXyA9PiBpbmRleCwgJyBjb3VudGVyOicsIHNwYW4oeyBpZDogXyA9PiBgc2lnbmFsLWFycmF5LWl0ZW0tY291bnRlci1kaXNwbGF5LSR7aW5kZXh9YCB9LCBfID0+IGNvdW50ZXIpLCAnIGNvbnRlbnQ6JywgXyA9PiB4LCAnIGxlbmd0aDonLCBfID0+IHNpZ25hbEFycmF5Lmxlbmd0aCwgYnV0dG9uKHtcbiAgICAgICAgICAgICAgICBpZDogYHNpZ25hbC1hcnJheS1pdGVtLWRlbGV0ZS1idG4tJHtpbmRleH1gLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAn8J+Xke+4jyBkZWxldGUgc3Vic2NyaWJlJyksIGJ1dHRvbih7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiArK2NvdW50ZXJcbiAgICAgICAgICAgIH0sICcrK2NvdW50ZXIgJywgXyA9PiBjb3VudGVyKSkua2V5KHgpO1xuICAgICAgICB9KTtcbiAgICB9KSwgXG4gICAgLyoqIGFkZGl0aW9uYWwgYnV0dG9ucy9jb250cm9scyAqL1xuICAgIGRpdihidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBpZDogXCJzaWduYWwtYXJyYXktaW5jcmVhc2UtY291bnRlclwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiArK2NvdW50ZXJcbiAgICB9LCAnKytjb3VudGVyICcsIF8gPT4gY291bnRlciksIGJ1dHRvbih7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGlkOiBcInB1c2gtc2lnbmFsLWFycmF5LWJ0blwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBhZGRBcnJheVNpZ25hbCgxKVxuICAgIH0sICdhZGQgbnVtYmVyJyksIGJ1dHRvbih7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGFkZEFycmF5U2lnbmFsKDEwKVxuICAgIH0sICdhZGQgMTAgbnVtYmVyJyksIGJ1dHRvbih7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNpZ25hbEFycmF5W3NpZ25hbEFycmF5Lmxlbmd0aF0gPSBzaWduYWxBcnJheS5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgfSwgJ2FkZCBudW1iZXIgYnkgZGVsYXknKSwgYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2lnbmFsQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgfSwgJ2RlbGF5IGNsZWFyIGFycmF5JykpKSksIGZpZWxkc2V0KHsgc3R5bGU6IFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIiB9LCBsZWdlbmQoJ3NpbXBsZSBhcnJheSB0ZXN0IC0gbGVuZ3RoOicsIF8gPT4gc2ltcGxlQXJyYXkubGVuZ3RoKSwgXyA9PiBzaW1wbGVBcnJheS5tYXAoKHgsIGluZGV4KSA9PiBkaXYoJ2NvdW50ZXI6JywgXyA9PiBjb3VudGVyLCAnIGluZGV4OicsIF8gPT4gaW5kZXgsICcgeDonLCBfID0+IHgsICcgbGVuZ3RoOicsIF8gPT4gc2ltcGxlQXJyYXkubGVuZ3RoLCBidXR0b24oe1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBzaW1wbGVBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfSwgJ/Cfl5HvuI8gZGVsZXRlIHNpbXBsZScpKS5rZXkoeCkpLCBkaXYoYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4gKytjb3VudGVyXG4gICAgfSwgJysrY291bnRlciAnLCBfID0+IGNvdW50ZXIpLCBidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBzaW1wbGVBcnJheVtzaW1wbGVBcnJheS5sZW5ndGhdID0gc2ltcGxlQXJyYXkubGVuZ3RoLnRvU3RyaW5nKClcbiAgICB9LCAnYWRkIG51bWJlcicpKSksIGZpZWxkc2V0KGxlZ2VuZCgnZ2FtZSB3aXRoIHBsYXllcnMnKSwgZGl2KHsgc3R5bGU6IFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIiB9LCBkaXYoJ3BsYXllcnMgY291bnQ6JywgXyA9PiB7XG4gICAgICAgIHJldHVybiBwbGF5ZXJzLmxlbmd0aDtcbiAgICB9KSwgXyA9PiB7XG4gICAgICAgIHJldHVybiBwbGF5ZXJzLm1hcCgocGxheWVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGdldFBsYXllckRpc3BsYXkocGxheWVyLCBpbmRleCwgcGxheWVycywgZ2V0TmV3UGxheWVyLCByZW1vdmVQbGF5ZXJCeUluZGV4KS5rZXkocGxheWVyLm5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9KSwgYnV0dG9uKHtcbiAgICAgICAgaWQ6IFwiYXJyYXktdGVzdC1wdXNoLWl0ZW1cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgfVxuICAgIH0sICdwdXNoIGl0ZW0gJywgcGxheWVycy5sZW5ndGggKyAxKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICB9XG4gICAgfSwgJ3B1c2ggMyBpdGVtcycpLCBidXR0b24oeyBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgIH0gfSwgJ3B1c2ggOSBpdGVtcycpLCBfID0+IHBsYXllcnMubGVuZ3RoID4gMCAmJlxuICAgICAgICBidXR0b24oe1xuICAgICAgICAgICAgYXR0cjogZngoeyBkdXJhdGlvbjogJy4xcycgfSksXG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBwbGF5ZXJzLmxlbmd0aCA9IDBcbiAgICAgICAgfSwgJ3JlbW92ZSBhbGwnKSksIF8gPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2FycmF5VGVzdHMudHMnIH0pKTtcbn0pO1xuY29uc3QgZ2V0UGxheWVyRGlzcGxheSA9IHRhZygocGxheWVyLCBpbmRleCwgcGxheWVycywgZ2V0TmV3UGxheWVyLCByZW1vdmVQbGF5ZXJCeUluZGV4KSA9PiB7XG4gICAgZ2V0UGxheWVyRGlzcGxheS51cGRhdGVzKHggPT4ge1xuICAgICAgICBbcGxheWVyLCBpbmRleCwgcGxheWVycywgZ2V0TmV3UGxheWVyLCByZW1vdmVQbGF5ZXJCeUluZGV4XSA9IHg7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRpdih7XG4gICAgICAgIHN0eWxlOiBcImJhY2tncm91bmQtY29sb3I6YmxhY2s7XCIsXG4gICAgICAgIGF0dHI6IGZ4KHsgZHVyYXRpb246ICcuMXMnIH0pXG4gICAgfSwgZGl2KF8gPT4gYG5hbWU6JHtwbGF5ZXIubmFtZX1gKSwgZGl2KF8gPT4ge1xuICAgICAgICByZXR1cm4gYGluZGV4OiR7aW5kZXh9YDtcbiAgICB9KSwgZGl2KHsgc3R5bGU6IFwiYmFja2dyb3VuZC1jb2xvcjpwdXJwbGU7cGFkZGluZzouNWVtXCIgfSwgJ3Njb3JlczonLCBfID0+IHBsYXllci5zY29yZXMubWFwKChzY29yZSwgcGxheWVySW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHBsYXllclNjb3JlRGlzcGxheShwbGF5ZXJJbmRleCwgc2NvcmUpLmtleShzY29yZSk7XG4gICAgfSkpLCBfID0+IHBsYXllci5lZGl0ICYmIGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZVBsYXllckJ5SW5kZXgoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfSwgJ3JlbW92ZScpLCBfID0+IHBsYXllci5lZGl0ICYmIGJ1dHRvbih7XG4gICAgICAgIGlkOiBfID0+IGBwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLSR7aW5kZXh9YCxcbiAgICAgICAgb25DbGljazogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgcGxheWVyLmVkaXQgPSAhcGxheWVyLmVkaXQ7XG4gICAgICAgICAgICByZW1vdmVQbGF5ZXJCeUluZGV4KGluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiAncGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi14eCc7XG4gICAgICAgIH1cbiAgICB9LCAncmVtb3ZlIGJ5IHByb21pc2UnKSwgYnV0dG9uKHtcbiAgICAgICAgaWQ6IF8gPT4gYHBsYXllci1lZGl0LWJ0bi0ke2luZGV4fWAsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHBsYXllci5lZGl0ID0gIXBsYXllci5lZGl0XG4gICAgfSwgJ2VkaXQnKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgcGxheWVycy5zcGxpY2UoaW5kZXgsIDAsIGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgfVxuICAgIH0sICdhZGQgYmVmb3JlJykpO1xufSk7XG5jb25zdCBwbGF5ZXJTY29yZURpc3BsYXkgPSB0YWcoKHBsYXllckluZGV4LCBzY29yZSkgPT4ge1xuICAgIHJldHVybiBkaXYoe1xuICAgICAgICBjbGFzczogXCJhbmltYXRlX19zbG93XCIsXG4gICAgICAgIGF0dHI6IGZ4KHsgZHVyYXRpb246ICcuMXMnIH0pXG4gICAgfSwgZmllbGRzZXQobGVnZW5kKGJ1dHRvbih7XG4gICAgICAgIGlkOiBfID0+IGBzY29yZS1kYXRhLSR7cGxheWVySW5kZXh9LSR7c2NvcmUuZnJhbWV9LW91dHNpZGUtYnV0dG9uYCxcbiAgICAgICAgb25DbGljazogKCkgPT4gKytzY29yZS5zY29yZVxuICAgIH0sIF8gPT4gYG91dGVyIHNjb3JlIGJ1dHRvbiArKyR7c2NvcmUuc2NvcmV9YCksIHNwYW4oe1xuICAgICAgICBpZDogXyA9PiBgc2NvcmUtZGF0YS0ke3BsYXllckluZGV4fS0ke3Njb3JlLmZyYW1lfS1vdXRzaWRlLWRpc3BsYXlgXG4gICAgfSwgXyA9PiBzY29yZS5zY29yZSkpLCBfID0+IGFycmF5U2NvcmVEYXRhKHsgc2NvcmUsIHBsYXllckluZGV4IH0pKSk7XG59KTtcbiIsImltcG9ydCB7IHRhZywgZGl2LCBzZWxlY3QsIG9wdGlvbiwgaDMsIGJ1dHRvbiwgc3BhbiB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnQuanNcIjtcbmV4cG9ydCBjb25zdCB0YWdTd2l0Y2hEZWJ1ZyA9IHRhZygoX3QgPSAndGFnU3dpdGNoRGVidWcnKSA9PiB7XG4gICAgbGV0IHNlbGVjdGVkVGFnID0gbnVsbDtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGZ1bmN0aW9uIGNoYW5nZVNlbGVjdGVkVGFnKGV2ZW50KSB7XG4gICAgICAgIHNlbGVjdGVkVGFnID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICBpZiAoc2VsZWN0ZWRUYWcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRhZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0ZWRUYWcgPT09ICdudWxsJykge1xuICAgICAgICAgICAgc2VsZWN0ZWRUYWcgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGRpdihkaXYoeyBpZDogXCJzZWxlY3RUYWctd3JhcFwiIH0sICdzZWxlY3RlZFRhZzogfCcsIHNwYW4oeyBpZDogXCJzZWxlY3RUYWctZGlzcGxheVwiIH0sICgpID0+IHNlbGVjdGVkVGFnID09PSBudWxsICYmICdudWxsJyB8fFxuICAgICAgICBzZWxlY3RlZFRhZyA9PT0gdW5kZWZpbmVkICYmICd1bmRlZmluZWQnIHx8XG4gICAgICAgIHNlbGVjdGVkVGFnID09PSAnJyAmJiAnZW1wdHktc3RyaW5nJyB8fFxuICAgICAgICBzZWxlY3RlZFRhZyksICd8JyksIHNlbGVjdCh7XG4gICAgICAgIGlkOiBcInRhZy1zd2l0Y2gtZHJvcGRvd25cIixcbiAgICAgICAgb25DaGFuZ2U6IGNoYW5nZVNlbGVjdGVkVGFnXG4gICAgfSwgb3B0aW9uKCksIFxuICAgIC8qIFRPRE86IGltcGxlbWVudCBzZWxlY3RlZCBhdHRyaWJ1dGUgKi9cbiAgICBvcHRpb24oe1xuICAgICAgICB2YWx1ZTogXCJcIixcbiAgICAgICAgc2VsZWN0ZWQ6ICgpID0+IHR5cGVvZiAoc2VsZWN0ZWRUYWcpID09PSAnc3RyaW5nJyAmJiAhc2VsZWN0ZWRUYWcubGVuZ3RoID8geyBzZWxlY3RlZDogdHJ1ZSB9IDoge31cbiAgICB9LCAnZW1wdHktc3RyaW5nJyksIG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBcInVuZGVmaW5lZFwiLFxuICAgICAgICBzZWxlY3RlZDogKCkgPT4gc2VsZWN0ZWRUYWcgPT09IHVuZGVmaW5lZCA/IHsgc2VsZWN0ZWQ6IHRydWUgfSA6IHt9XG4gICAgfSwgJ3VuZGVmaW5lZCcpLCBvcHRpb24oe1xuICAgICAgICB2YWx1ZTogXCJudWxsXCIsXG4gICAgICAgIHNlbGVjdGVkOiAoKSA9PiBzZWxlY3RlZFRhZyA9PT0gbnVsbFxuICAgIH0sICdudWxsJyksIG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBcIjFcIixcbiAgICAgICAgc2VsZWN0ZWQ6ICgpID0+IHNlbGVjdGVkVGFnID09PSAnMSdcbiAgICB9LCAndGFnIDEnKSwgb3B0aW9uKHtcbiAgICAgICAgdmFsdWU6IFwiMlwiLFxuICAgICAgICBzZWxlY3RlZDogKCkgPT4gc2VsZWN0ZWRUYWcgPT09ICcyJ1xuICAgIH0sICd0YWcgMicpLCBvcHRpb24oe1xuICAgICAgICB2YWx1ZTogXCIzXCIsXG4gICAgICAgIHNlbGVjdGVkOiAoKSA9PiBzZWxlY3RlZFRhZyA9PT0gJzMnXG4gICAgfSwgJ3RhZyAzJykpLCBkaXYoe1xuICAgICAgICBpZDogXCJzd2l0Y2gtdGVzdHMtd3JhcFwiLFxuICAgICAgICBzdHlsZTogXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIlxuICAgIH0sIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggc29saWQgYmx1ZTtmbGV4LWdyb3c6MVwiIH0sIGgzKCdUZXN0IDEgLSBzdHJpbmcgfCBUYWcnKSwgZGl2KCgpID0+IHtcbiAgICAgICAgc3dpdGNoIChzZWxlY3RlZFRhZykge1xuICAgICAgICAgICAgY2FzZSBudWxsOiByZXR1cm4gJ251bGwsIHNlbGVjdCB0YWcgYmVsb3cnO1xuICAgICAgICAgICAgY2FzZSBcIlwiOiByZXR1cm4gZGl2KHsgaWQ6IFwiZW1wdHktc3RyaW5nLTFcIiB9KTtcbiAgICAgICAgICAgIGNhc2UgJzEnOiByZXR1cm4gdGFnMSh7IHRpdGxlOiAndmFsdWUgc3dpdGNoJyB9KTtcbiAgICAgICAgICAgIGNhc2UgJzInOiByZXR1cm4gdGFnMih7IHRpdGxlOiAndmFsdWUgc3dpdGNoJyB9KTtcbiAgICAgICAgICAgIGNhc2UgJzMnOiByZXR1cm4gdGFnMyh7IHRpdGxlOiAndmFsdWUgc3dpdGNoJyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3NlbGVjdCB0YWcgYmVsb3cnO1xuICAgIH0pKSwgZGl2KHsgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBibHVlO2ZsZXgtZ3JvdzoxXCIgfSwgaDMoJ1Rlc3QgMiAtIFRhZycpLCBkaXYoKCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHNlbGVjdGVkVGFnKSB7XG4gICAgICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpdih7IGlkOiBcInNlbGVjdC10YWctYWJvdmVcIiB9LCAnbnVsbCwgc2VsZWN0IHRhZyBhYm92ZScpO1xuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBkaXYoeyBpZDogXCJzZWxlY3QtdGFnLWFib3ZlXCIgfSwgJ2VtcHR5LXN0cmluZywgc2VsZWN0IHRhZyBhYm92ZScpO1xuICAgICAgICAgICAgY2FzZSAnMSc6IHJldHVybiB0YWcxKHsgdGl0bGU6ICd0YWcgc3dpdGNoJyB9KTtcbiAgICAgICAgICAgIGNhc2UgJzInOiByZXR1cm4gdGFnMih7IHRpdGxlOiAndGFnIHN3aXRjaCcgfSk7XG4gICAgICAgICAgICBjYXNlICczJzogcmV0dXJuIHRhZzMoeyB0aXRsZTogJ3RhZyBzd2l0Y2gnIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXYoeyBpZDogXCJzZWxlY3QtdGFnLWFib3ZlXCIgfSwgJ3NlbGVjdCB0YWcgYWJvdmUnKTtcbiAgICB9KSksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggc29saWQgYmx1ZTtmbGV4LWdyb3c6MVwiIH0sIGgzKCdUZXN0IDMgLSB0ZXJuYXJ5IChvbmx5IDEgb3IgMyBzaG93cyknKSwgZGl2KCgpID0+IHNlbGVjdGVkVGFnID09PSAnMycgPyB0YWczKHsgdGl0bGU6ICd0ZXJuYXJ5IHNpbXBsZScgfSkgOiB0YWcxKHsgdGl0bGU6ICd0ZXJuYXJ5IHNpbXBsZScgfSkpKSwgZGl2KHsgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBibHVlO2ZsZXgtZ3JvdzoxXCIgfSwgaDMoJ1Rlc3QgMy4yIC0gdGVybmFyeSB2aWEgcHJvcCAob25seSAxIG9yIDMgc2hvd3MpJyksIGRpdigoKSA9PiB0ZXJuYXJ5UHJvcFRlc3QoeyBzZWxlY3RlZFRhZyB9KSkpLCBkaXYoe1xuICAgICAgICBpZDogXCJhcnJheVN3aXRjaGluZy10ZXN0LXdyYXBcIixcbiAgICAgICAgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCByZWQ7ZmxleC1ncm93OjFcIlxuICAgIH0sIGgzKCdUZXN0IDQgLSBhcnJheVN3aXRjaGluZycpLCBkaXYoeyBpZDogXCJhcnJheVN3aXRjaGluZy13cmFwXCIgfSwgKCkgPT4gYXJyYXlTd2l0Y2hpbmcoeyBzZWxlY3RlZFRhZyB9KSkpKSwgKCkgPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3RhZ1N3aXRjaERlYnVnJyB9KSk7XG59KTtcbmV4cG9ydCBjb25zdCB0ZXJuYXJ5UHJvcFRlc3QgPSB0YWcoKHsgc2VsZWN0ZWRUYWcgfSkgPT4ge1xuICAgIHRlcm5hcnlQcm9wVGVzdC5pbnB1dHMoeCA9PiBbeyBzZWxlY3RlZFRhZyB9XSA9IHgpO1xuICAgIHJldHVybiBkaXYoeyBpZDogXCJ0ZXJuYXJ5UHJvcFRlc3Qtd3JhcFwiIH0sICgpID0+IGAke3NlbGVjdGVkVGFnfTpgLCAoY29udGV4dCkgPT4ge1xuICAgICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IHNlbGVjdGVkVGFnID09PSAnMycgPyB0YWczKHsgdGl0bGU6ICd0ZXJuYXJ5UHJvcFRlc3QnIH0pIDogdGFnMSh7IHRpdGxlOiAndGVybmFyeVByb3BUZXN0JyB9KTtcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgIH0pO1xufSk7XG5leHBvcnQgY29uc3QgdGFnMSA9IHRhZygoeyB0aXRsZSB9KSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgdGFnMS5pbnB1dHMoeCA9PiBbeyB0aXRsZSB9XSA9IHgpO1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGRpdih7XG4gICAgICAgIGlkOiBcInRhZzFcIixcbiAgICAgICAgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBvcmFuZ2U7XCJcbiAgICB9LCBkaXYoeyBpZDogXCJ0YWdTd2l0Y2gtMS1oZWxsb1wiIH0sICgpID0+IGBIZWxsbyAxICR7dGl0bGV9IFdvcmxkYCksIGJ1dHRvbih7IG9uQ2xpY2s6ICgpID0+ICsrY291bnRlciB9LCAoKSA9PiBgaW5jcmVhc2UgJHtjb3VudGVyfWApLCAoKSA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAndGFnMScgfSkpO1xufSk7XG5leHBvcnQgY29uc3QgdGFnMiA9IHRhZygoeyB0aXRsZSB9KSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgLy90YWcyLmlucHV0cyh4ID0+IFt7dGl0bGV9XSA9IHgpXG4gICAgKytyZW5kZXJDb3VudDtcbiAgICAvL3JldHVybiAyMlxuICAgIHJldHVybiBkaXYoe1xuICAgICAgICBpZDogXCJ0YWcyXCIsXG4gICAgICAgIHN0eWxlOiBcImJvcmRlcjoxcHggc29saWQgb3JhbmdlO1wiXG4gICAgfSwgZGl2KHsgaWQ6IFwidGFnU3dpdGNoLTItaGVsbG9cIiB9LCAoKSA9PiBgSGVsbG8gMiAke3RpdGxlfSBXb3JsZGApLCBidXR0b24oe1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiArK2NvdW50ZXJcbiAgICB9LCAoKSA9PiBgaW5jcmVhc2UgJHtjb3VudGVyfWApLCAoKSA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAndGFnMScgfSkpO1xufSk7XG5leHBvcnQgY29uc3QgdGFnMyA9IHRhZygoeyB0aXRsZSB9KSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgdGFnMy5pbnB1dHMoeCA9PiBbeyB0aXRsZSB9XSA9IHgpO1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGRpdih7XG4gICAgICAgIGlkOiBcInRhZzNcIixcbiAgICAgICAgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBvcmFuZ2U7XCJcbiAgICB9LCBkaXYoeyBpZDogXCJ0YWdTd2l0Y2gtMy1oZWxsb1wiIH0sICgpID0+IGBIZWxsbyAzICR7dGl0bGV9IFdvcmxkYCksIGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrY291bnRlclxuICAgIH0sICgpID0+IGBpbmNyZWFzZSAke2NvdW50ZXJ9YCksICgpID0+IHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICd0YWcxJyB9KSk7XG59KTtcbmV4cG9ydCBjb25zdCBhcnJheVN3aXRjaGluZyA9ICh7IHNlbGVjdGVkVGFnIH0pID0+IHtcbiAgICBzd2l0Y2ggKHNlbGVjdGVkVGFnKSB7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgcmV0dXJuIGBpdHMgYW4gdW5kZWZpbmVkIHZhbHVlYDtcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgcmV0dXJuIGBpdHMgYSBudWxsIHZhbHVlYDtcbiAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgICAgIC8vIFRPRE86ID8/PyBzaG91bGQgYmUgZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gYHNwYWNlYDsgLy8gdGVzdHMgaG93IC5wcmV2aW91c1NpYmxpbmcgd29ya3NcbiAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICByZXR1cm4gdGFnMSh7IHRpdGxlOiBgdGFnICR7c2VsZWN0ZWRUYWd9YCB9KTtcbiAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICByZXR1cm4gWydiJywgJ2MnXS5tYXAoeCA9PiB0YWcyKHsgdGl0bGU6IGBhcnJheSAke3NlbGVjdGVkVGFnfSAke3h9YCB9KS5rZXkoeCkpO1xuICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgIHJldHVybiBbJ2QnLCAnZScsICdmJ10ubWFwKHggPT4gdGFnMyh7IHRpdGxlOiBgYXJyYXkgJHtzZWxlY3RlZFRhZ30gJHt4fWAgfSkua2V5KHgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGBub3RoaW5nIHRvIHNob3cgZm9yIGluIGFycmF5c2A7XG59O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnLCBzdGF0ZXMgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCBtaXJyb3JpbmcgPSB0YWcoKCkgPT4ge1xuICAgIGNvbnN0IHRhZyA9IHRhZ0NvdW50ZXIoKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTU2NzM0WzBdLCB0YWcsIHRhZyk7XG59KTtcbmNvbnN0IHRhZ0NvdW50ZXIgPSAoKSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW2NvdW50ZXJdID0gZ2V0KGNvdW50ZXIpKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTU2NzM0WzFdLCBjb3VudGVyLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxNTY3MzQ6IFtbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvdW50ZXIwXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY291bnRlcjFcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIGNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6qeXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm1pcnJvci1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm1pcnJvci1jb3VudGVyLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCBzdGF0ZSwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IHN0YXRlUHJvcERlYnVnID0gKHByb3BDb3VudGVyLCBjaGlsZCkgPT4gdGFnLnVzZSA9IChfID0gc3RhdGUoJ3N0YXRlUHJvcERlYnVnLnRhZy50cycpLCAvLyBzb21ldGhpbmcgdG8gYmUgc2VlbiBpbiBjb25zb2xlXG5lZGl0ID0gZmFsc2UsIHJlbmRlckNvdW50ID0gMCwgX19fID0gc3RhdGVzKGdldCA9PiBbeyBlZGl0LCByZW5kZXJDb3VudCB9XSA9IGdldCh7IGVkaXQsIHJlbmRlckNvdW50IH0pKSwgX18gPSArK3JlbmRlckNvdW50KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M1MzkyOVswXSwgcHJvcENvdW50ZXIsICgpID0+IGVkaXQgPSAhZWRpdCwgZWRpdCwgY2hpbGQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzdGF0ZVByb3BEZWJ1Zy10YWcnIH0pKTtcbmV4cG9ydCBkZWZhdWx0IHN0YXRlUHJvcERlYnVnO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczUzOTI5OiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgcHJvcENvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJlZGl0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY2hpbGQ6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dXSB9O1xuIiwiaW1wb3J0IHsgd2F0Y2gsIGh0bWwsIHRhZywgbGV0UHJvcCwgc3RhdGUsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnQuanNcIjtcbmltcG9ydCBzdGF0ZVByb3BEZWJ1Z1RhZyBmcm9tIFwiLi9zdGF0ZVByb3BEZWJ1Zy50YWcuanNcIjtcbmV4cG9ydCBjb25zdCBwcm9wc0RlYnVnTWFpbiA9IHRhZygoXyA9ICdwcm9wc0RlYnVnTWFpbicpID0+IChzeW5jUHJvcE51bWJlciA9IDAsIHByb3BOdW1iZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIHByb3BzSnNvbiA9IHsgdGVzdDogMzMsIHg6ICd5JyB9LCBkYXRlID0gc3RhdGUoKCkgPT4gbmV3IERhdGUoKSksIGpzb24gPSBKU09OLnN0cmluZ2lmeShwcm9wc0pzb24sIG51bGwsIDIpLCBzdGF0ZVByb3BEaXNwbGF5ID0gdHJ1ZSwgXyA9IHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgc3luY1Byb3BOdW1iZXIsIHByb3BOdW1iZXIsIHJlbmRlckNvdW50LCBwcm9wc0pzb24sIGRhdGUsIHN0YXRlUHJvcERpc3BsYXksXG4gICAgfV0gPSBnZXQoe1xuICAgIHN5bmNQcm9wTnVtYmVyLCBwcm9wTnVtYmVyLCByZW5kZXJDb3VudCwgcHJvcHNKc29uLCBkYXRlLCBzdGF0ZVByb3BEaXNwbGF5LFxufSkpKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMTk4MzE1WzBdLCAoZXZlbnQpID0+IHByb3BzSnNvbiA9IEpTT04ucGFyc2UoZXZlbnQudGFyZ2V0LnZhbHVlKSwganNvbiwganNvbiwgKytyZW5kZXJDb3VudCwgKCkgPT4gKytwcm9wTnVtYmVyLCBwcm9wTnVtYmVyLCBwcm9wTnVtYmVyLCBwcm9wc0RlYnVnKHtcbiAgICBwcm9wTnVtYmVyLFxuICAgIHByb3BzSnNvbixcbiAgICBwcm9wTnVtYmVyQ2hhbmdlOiB4ID0+IHtcbiAgICAgICAgcHJvcE51bWJlciA9IHg7XG4gICAgfVxufSksIHN5bmNQcm9wTnVtYmVyLCAoKSA9PiArK3N5bmNQcm9wTnVtYmVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnc3luY19wcm9wc19jYWxsYmFjaycgfSksIHN5bmNQcm9wRGVidWcoe1xuICAgIHN5bmNQcm9wTnVtYmVyLFxuICAgIHByb3BOdW1iZXJDaGFuZ2U6IHggPT4gc3luY1Byb3BOdW1iZXIgPSB4LFxuICAgIHBhcmVudFRlc3Q6IHggPT4geCwgLy8gY2F1c2VzIG5vIGNoYW5nZSwgaG93ZXZlciB0aGUgdGFnIGRpZCArK2NvdW50ZXIgdG8gaXRzZWxmIHdoaWNoIHNob3VsZCByZW5kZXJcbn0pLCBzdGF0ZVByb3BEaXNwbGF5ICYmIHN0YXRlUHJvcERlYnVnVGFnKHByb3BOdW1iZXIsIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTgzMTVbMV0pKSwgKCkgPT4gc3RhdGVQcm9wRGlzcGxheSA9ICFzdGF0ZVByb3BEaXNwbGF5LCBkYXRlLCB0aW1lc3RhbXBUb1ZhbHVlcyhkYXRlKS5kYXRlLCAoZXZlbnQpID0+IHtcbiAgICBjb25zdCBuZXdEYXRlU3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGRhdGUgPSBuZXcgRGF0ZShuZXdEYXRlU3RyaW5nKTtcbn0sIHByb3BEYXRlRGVidWcoeyBkYXRlIH0pKSk7XG5jb25zdCBwcm9wRGF0ZURlYnVnID0gdGFnKCh7IGRhdGUgfSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzE5ODMxNVsyXSwgZGF0ZSkpO1xuLyoqIFRlc3RzIGNhbGxpbmcgYSBwcm9wZXJ0eSB0aGF0IGlzIGEgZnVuY3Rpb24gaW1tZWRpYXRlbHkgd2hpY2ggc2hvdWxkIGNhdXNlIHJlbmRlcmluZyAqL1xuY29uc3Qgc3luY1Byb3BEZWJ1ZyA9IHRhZygoeyBzeW5jUHJvcE51bWJlciwgcHJvcE51bWJlckNoYW5nZSwgcGFyZW50VGVzdCwgfSkgPT4gKF8gPSBzdGF0ZSgnc3luY1Byb3BEZWJ1ZycpLCAvLyBzb21ldGhpbmcgdG8gc2VlIGluIGNvbnNvbGVcbmNvdW50ZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIF9fID0gc3RhdGVzKGdldCA9PiBbeyBjb3VudGVyLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IGNvdW50ZXIsIHJlbmRlckNvdW50IH0pKSkgPT4ge1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgaWYgKHN5bmNQcm9wTnVtYmVyICUgMiA9PT0gMSkge1xuICAgICAgICBwcm9wTnVtYmVyQ2hhbmdlKHN5bmNQcm9wTnVtYmVyID0gc3luY1Byb3BOdW1iZXIgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTgzMTVbM10sIHN5bmNQcm9wTnVtYmVyLCAoKSA9PiBwcm9wTnVtYmVyQ2hhbmdlKCsrc3luY1Byb3BOdW1iZXIpLCBjb3VudGVyLCBwYXJlbnRUZXN0KGNvdW50ZXIpLCAoKSA9PiB7XG4gICAgICAgIHBhcmVudFRlc3QoKytjb3VudGVyKTtcbiAgICB9LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY2hpbGRfc3luY19wcm9wc19jYWxsYmFjaycgfSkpO1xufSk7XG5jb25zdCBwcm9wc0RlYnVnID0gdGFnKCh7IHByb3BOdW1iZXIsIHByb3BzSnNvbiwgcHJvcE51bWJlckNoYW5nZSwgfSkgPT4gKF8gPSBzdGF0ZSgncHJvcHNEZWJ1ZycpLCAvLyBzb21ldGhpbmcgdG8gc2VlIGluIGNvbnNvbGVcbnJlbmRlckNvdW50ID0gMCwgcHJvcE51bWJlckNoYW5nZUNvdW50ID0gMCwgXG4vLyBzaW1wbGUgd2F5IHRvIGxvY2FsbHkgb25seSB1cGRhdGUgYW4gYXJndW1lbnRcbl9fXyA9IGxldFByb3AoZ2V0ID0+IFtwcm9wTnVtYmVyXSA9IGdldChwcm9wTnVtYmVyKSksIFxuLy8gX19fID0gbGV0UHJvcChwcm9wTnVtYmVyKSh4ID0+IFtwcm9wTnVtYmVyLCBwcm9wTnVtYmVyID0geF0pLFxuLy8gcG9vciB3YXkgdG8gdXBkYXRlIGFuIGFyZ3VtZW50XG5teVByb3BOdW1iZXIgPSBwcm9wTnVtYmVyLCBfc3RhdGVzID0gc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICByZW5kZXJDb3VudCwgcHJvcE51bWJlckNoYW5nZUNvdW50LCBteVByb3BOdW1iZXIsXG4gICAgfV0gPSBnZXQoe1xuICAgIHJlbmRlckNvdW50LCBwcm9wTnVtYmVyQ2hhbmdlQ291bnQsIG15UHJvcE51bWJlcixcbn0pKSwgX18gPSB3YXRjaChbcHJvcE51bWJlcl0sICgpID0+IG15UHJvcE51bWJlciA9IHByb3BOdW1iZXIpLCB3YXRjaFJlc3VsdHMgPSB3YXRjaChbbXlQcm9wTnVtYmVyXSwgKCkgPT4gKytwcm9wTnVtYmVyQ2hhbmdlQ291bnQpKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMTk4MzE1WzRdLCAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IEpTT04ucGFyc2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBPYmplY3QuYXNzaWduKHByb3BzSnNvbiwgdmFsdWUpO1xufSwgSlNPTi5zdHJpbmdpZnkocHJvcHNKc29uLCBudWxsLCAyKSwgSlNPTi5zdHJpbmdpZnkocHJvcHNKc29uLCBudWxsLCAyKSwgSlNPTi5zdHJpbmdpZnkod2F0Y2hSZXN1bHRzLCBudWxsLCAyKSwgKCkgPT4gcHJvcE51bWJlckNoYW5nZSgrK215UHJvcE51bWJlciksIG15UHJvcE51bWJlciwgbXlQcm9wTnVtYmVyLCAoKSA9PiArK3Byb3BOdW1iZXIsIHByb3BOdW1iZXIsIHByb3BOdW1iZXIsICgpID0+ICsrcmVuZGVyQ291bnQsICsrcmVuZGVyQ291bnQsICgpID0+ICsrbXlQcm9wTnVtYmVyLCBteVByb3BOdW1iZXIsIHByb3BOdW1iZXJDaGFuZ2VDb3VudCwgcHJvcEZuVXBkYXRlVGVzdCh7XG4gICAgcHJvcE51bWJlcjogbXlQcm9wTnVtYmVyLFxuICAgIGNhbGxiYWNrOiAoKSA9PiArK215UHJvcE51bWJlclxufSkpKTtcbmNvbnN0IHByb3BGblVwZGF0ZVRlc3QgPSB0YWcuaW1tdXRhYmxlUHJvcHMoKHsgcHJvcE51bWJlciwgY2FsbGJhY2ssIH0pID0+IChfID0gc3RhdGUoJ3Byb3BGblVwZGF0ZVRlc3QnKSwgLy8gc29tZXRoaW5nIHRvIHNlZSBpbiBjb25zb2xlXG5yZW5kZXJDb3VudCA9IDAsIF9fID0gc3RhdGVzKGdldCA9PiBbcmVuZGVyQ291bnRdID0gZ2V0KHJlbmRlckNvdW50KSkpID0+IHtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMTk4MzE1WzVdLCBjYWxsYmFjaywgcHJvcE51bWJlciwgcHJvcE51bWJlciwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3Byb3BGblVwZGF0ZVRlc3QnIH0pKTtcbn0pO1xuZnVuY3Rpb24gdGltZXN0YW1wVG9WYWx1ZXModGltZXN0YW1wKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7XG4gICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICBjb25zdCBob3VycyA9IFN0cmluZyhkYXRlLmdldEhvdXJzKCkpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgY29uc3QgbWludXRlcyA9IFN0cmluZyhkYXRlLmdldE1pbnV0ZXMoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkYXRlOiBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1gLFxuICAgICAgICB0aW1lOiBgJHtob3Vyc306JHttaW51dGVzfWBcbiAgICB9O1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczMxOTgzMTU6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwXCJdLCBbXCJpZFwiLCBcInRleHRhcmVhd3JhcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRhcmVhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiaGVpZ2h0OjIwMHB4O2ZvbnQtc2l6ZTowLjZlbTt3aWR0aDoxMDAlO21heC13aWR0aDo0MDBweFwiXSwgW1wiaWRcIiwgXCJwcm9wcy1kZWJ1Zy10ZXh0YXJlYVwiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJwcmVcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKHJlbmRlckNvdW50OlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKVwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc0RlYnVnLfCfpaktMC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+lqSBwcm9wTnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS0wLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN5bmMgcHJvcHMgY2FsbGJhY2tcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WhIHN5bmNQcm9wTnVtYmVyOiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3luYy1wcm9wLW51bWJlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WhICsrXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhdGUgcHJvcFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEyIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhpZGUvc2hvd1wiIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkYXRlIHByb3BcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkYXRlOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE0IH0sIHsgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJkYXRlXCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMTUgfSwgbnVsbF0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMTYgfSwgbnVsbF1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTcgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZCBpbm5lckh0bWwg8J+RtlwiIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZGF0ZTpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXN5bmNQcm9wRGVidWcgaHRtbC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WhIGNoaWxkIHN5bmNQcm9wTnVtYmVyOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzeW5jLXByb3AtY2hpbGQtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3luYy1wcm9wLWNoaWxkLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WhICsrXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzeW5jLXByb3AtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwYXJlbnRUZXN0XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm5vdGhpbmctcHJvcC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm5vdGhpbmctcHJvcC1jb3VudGVyLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK1wiIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1wcm9wc0RlYnVnLmpzLS0+XCIgfSwgeyBcIm5uXCI6IFwiaDNcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUHJvcHMgSnNvblwiIH1dIH0sIHsgXCJublwiOiBcInRleHRhcmVhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjAuNmVtO2hlaWdodDoyMDBweDt3aWR0aDoxMDAlOzttYXgtd2lkdGg6NDAwcHhcIl0sIFtcIndyYXBcIiwgXCJvZmZcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwicHJlXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLTxkaXYgc3R5bGU9XFxcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcFxcXCI+PC9kaXY+LS0+XCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQcm9wcyBOdW1iZXJcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZvbnQtc2l6ZTowLjZlbTtoZWlnaHQ6MjAwcHg7d2lkdGg6MTAwJTtjb2xvcjp3aGl0ZTtcIl0sIFtcIndyYXBcIiwgXCJvZmZcIl0sIFtcImRpc2FibGVkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNEZWJ1Zy3wn6WpLTEtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkIQg8J+lqSBteSBwcm9wTnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc0RlYnVnLfCfpaktMi1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QhCDwn6WpIGxvY2FsIGxldFByb3AgcHJvcE51bWJlciBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc0RlYnVnLfCfpaktbGV0LXByb3AtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInRpdGxlXCIsIFwidGVzdCBvZiBpbmNyZWFzaW5nIHJlbmRlciBjb3VudCBhbmQgbm90aGluZyBlbHNlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEyIH0sIG51bGxdLCBbXCJ0aXRsZVwiLCBcIm9ubHkgY2hhbmdlcyBudW1iZXIgbG9jYWxseSBidXQgaWYgY2hhbmdlIGJ5IHBhcmVudCB0aGFuIHRoYXQgaXMgdGhlIG51bWJlclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkIQg8J+lqSBsb2NhbCBzZXQgbXlQcm9wTnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIocHJvcE51bWJlckNoYW5nZUNvdW50OlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc0RlYnVnLfCfpaktY2hhbmdlLWNvdW50LWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJGbiB1cGRhdGUgdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE1IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiAgICBcXG5cIiB9XSwgW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzT25lTGV2ZWxGdW5VcGRhdGUt8J+lqS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QhCDwn6WpIGxvY2FsICYgMS1wYXJlbnQgaW5jcmVhc2UgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNPbmVMZXZlbEZ1blVwZGF0ZS3wn6WpLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwic21hbGxcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJvcGFjaXR5Oi41XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGhlIGNvdW50IGhlcmUgYW5kIHdpdGhpbiBwYXJlbnQgaW5jcmVhc2VzIGJ1dCBub3QgaW4gcGFyZW50IHBhcmVudFwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgZGlhbG9nID0gdGFnKChwcm92aWRlckNsYXNzKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDg4MDVbMF0sICgpID0+IHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZyA9IGZhbHNlLCBwcm92aWRlckNsYXNzLnNob3dEaWFsb2cgPyBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDg4MDVbMV0sIEpTT04uc3RyaW5naWZ5KHByb3ZpZGVyQ2xhc3MsIG51bGwsIDIpKSA6ICdubyBkaWFsb2cnKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMjQ4ODA1OiBbW3sgXCJublwiOiBcImRpYWxvZ1wiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6MFwiXSwgW1wiaWRcIiwgXCJwcm92aWRlcl9kZWJ1Z19kaWFsb2dcIl0sIFtcIm1vdXNlZG93blwiLCBcInZhciByID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsoci50b3A8PWV2ZW50LmNsaWVudFkmJmV2ZW50LmNsaWVudFk8PXIudG9wK3IuaGVpZ2h0JiZyLmxlZnQ8PWV2ZW50LmNsaWVudFgmJmV2ZW50LmNsaWVudFg8PXIubGVmdCtyLndpZHRoKSB8fCB0aGlzLmNsb3NlKClcIl0sIFtcImRyYWdzdGFydFwiLCBcImNvbnN0IHtlLGR0LHR9ID0ge3Q6dGhpcyxlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2Zlcn07Y29uc3QgZD10LmRyYWc9dC5kcmFnfHx7eDowLHk6MH07ZC5pbml0WD1kLng7ZC5zdGFydFg9ZXZlbnQuY2xpZW50WC10Lm9mZnNldExlZnQ7ZC5zdGFydFk9ZXZlbnQuY2xpZW50WS10Lm9mZnNldFRvcDt0Lm9uZHJhZ292ZXI9ZS50YXJnZXQub25kcmFnb3Zlcj0oZSk9PmUucHJldmVudERlZmF1bHQoKTtkdC5lZmZlY3RBbGxvd2VkPSdtb3ZlJztkdC5kcm9wRWZmZWN0PSdtb3ZlJ1wiXSwgW1wiZHJhZ1wiLCBcImNvbnN0IHt0LGUsZHQsZH09e2U6ZXZlbnQsZHQ6ZXZlbnQuZGF0YVRyYW5zZmVyLGQ6dGhpcy5kcmFnfTsgaWYoZS5jbGllbnRYPT09MCkgcmV0dXJuO2QueCA9IGQueCArIGUub2Zmc2V0WCAtIGQuc3RhcnRYOyBkLnkgPSBkLnkgKyBlLm9mZnNldFkgLSBkLnN0YXJ0WTsgdGhpcy5zdHlsZS5sZWZ0ID0gZC54ICsgJ3B4JzsgdGhpcy5zdHlsZS50b3AgPSBkLnkrJ3B4JztcIl0sIFtcImRyYWdlbmRcIiwgXCJjb25zdCB7dCxlLGR9PXt0OnRoaXMsZTpldmVudCxkOnRoaXMuZHJhZ307aWYgKGQuaW5pdFggPT09IGQueCkge2QueD1kLngrZS5vZmZzZXRYLShkLnN0YXJ0WC1kLngpO2QueT1kLnkrZS5vZmZzZXRZLShkLnN0YXJ0WS1kLnkpO3RoaXMuc3R5bGUudHJhbnNmb3JtPXRyYW5zbGF0ZTNkKGQueCsncHgnLCBkLnkrJ3B4JywgMCl9O3RoaXMuZHJhZ2dhYmxlPWZhbHNlXCJdLCBbXCJjbG9zZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRpYWxvZyB0aXRsZVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzouMjVlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCBcInByb3ZpZGVyX2RlYnVnX2RpYWxvZy5jbG9zZSgpXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+FpyBjbG9zZVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wid3JhcFwiLCBcIm9mZlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBob3N0LCBzdGF0ZSB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGluamVjdGlvbldyYXAgPSBob3N0KChzZWxlY3RlZCwgc2VsZWN0ZWRDaGFuZ2UpID0+IHtcbiAgICBjb25zdCB0YXJnZXRzID0gc3RhdGUoW10pO1xuICAgIHJldHVybiB7IHNlbGVjdGVkLCB0YXJnZXRzIH07XG59KTtcbiIsImltcG9ydCB7IGhvc3QsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgaW5qZWN0aW9uV3JhcCB9IGZyb20gXCIuL2luamVjdGlvbldyYXAuaG9zdFwiO1xuZXhwb3J0IGNvbnN0IGluamVjdGlvblRhcmdldCA9IGhvc3QoKHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgd3JhcEhvc3QgPSB0YWcuaW5qZWN0KGluamVjdGlvbldyYXApO1xuICAgIHRhZ1xuICAgICAgICAub25Jbml0KCgpID0+IHdyYXBIb3N0LnRhcmdldHMucHVzaCh2YWx1ZSkpXG4gICAgICAgIC5vbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHdyYXBIb3N0LnRhcmdldHMuZmluZEluZGV4KCh4KSA9PiB4ID09PSB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHdyYXBIb3N0LnRhcmdldHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5lbGVtZW50XG4gICAgICAgIC5vbmNsaWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB3cmFwSG9zdC5zZWxlY3RlZC5maW5kSW5kZXgoKHgpID0+IHggPT09IHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgd3JhcEhvc3Quc2VsZWN0ZWQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBIb3N0LnNlbGVjdGVkLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IHRhZywgaHRtbCwgc3RhdGUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGluamVjdGlvbldyYXAgfSBmcm9tIFwiLi9ob3N0VGVzdHMvaW5qZWN0aW9uV3JhcC5ob3N0XCI7XG5pbXBvcnQgeyBpbmplY3Rpb25UYXJnZXQgfSBmcm9tIFwiLi9ob3N0VGVzdHMvaW5qZWN0aW9uVGFyZ2V0Lmhvc3RcIjtcbmV4cG9ydCBjb25zdCBpbmplY3Rpb25UYWcgPSB0YWcoKCkgPT4ge1xuICAgIGNvbnN0IGl0ZW1zID0gc3RhdGUoKCkgPT4gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldLm1hcChpZCA9PiAoeyBpZCB9KSkpO1xuICAgIGNvbnN0IHNlbGVjdGVkVGVzdCA9IHN0YXRlKFtdKTtcbiAgICBjb25zdCB3cmFwSG9zdCA9IGluamVjdGlvbldyYXAoc2VsZWN0ZWRUZXN0LCAobmV3U2VsZWN0ZWQpID0+IHtcbiAgICAgICAgc2VsZWN0ZWRUZXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIHNlbGVjdGVkVGVzdC5wdXNoKC4uLm5ld1NlbGVjdGVkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTcxNTI0WzBdLCBzZWxlY3RlZFRlc3QubGVuZ3RoLCB3cmFwSG9zdCwgaXRlbXMubWFwKHggPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTcxNTI0WzFdLCBgaW5qZWN0aW9uLXRlc3QtaXRlbS0ke3guaWR9YCwgaW5qZWN0aW9uVGFyZ2V0KHgpLCBzZWxlY3RlZFRlc3QuaW5jbHVkZXMoeCkgPyAnIzRDQUY1MCcgOiAnIzIxOTZGMycsIHNlbGVjdGVkVGVzdC5pbmNsdWRlcyh4KSA/ICczcHggc29saWQgIzMzMycgOiAnMXB4IHNvbGlkICM5OTknLCB7IGNoZWNrZWQ6IHNlbGVjdGVkVGVzdC5pbmNsdWRlcyh4KSA/IHRydWUgOiBmYWxzZSB9LCB4LmlkKSksIHNlbGVjdGVkVGVzdC5sZW5ndGggPiAwXG4gICAgICAgID8gc2VsZWN0ZWRUZXN0Lm1hcCh4ID0+IHguaWQpLmpvaW4oJywgJylcbiAgICAgICAgOiAnTm8gaXRlbXMgc2VsZWN0ZWQuIENsaWNrIHRvIHNlbGVjdCBpdGVtcy4nKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE3MTUyNDogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOiAyMHB4O1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImgyXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkluamVjdGlvbiBUZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic2VsZWN0ZWQ6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiXFxuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICM2NjY7XFxuICAgICAgICAgIGdhcDoxZW07XFxuICAgICAgICAgIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICAgIG1pbi1oZWlnaHQ6IDMwMHB4O1xcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgICBkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7XFxuICAgICAgICBcIl0sIFtcImlkXCIsIFwiaW5qZWN0aW9uLXRlc3Rpbmctd3JhcC1ob3N0XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDEgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbi10b3A6IDIwcHg7IHBhZGRpbmc6IDEwcHg7IGJhY2tncm91bmQ6ICMzMzM7IGNvbG9yOiB3aGl0ZTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJTZWxlY3RlZCBJdGVtczpcIiB9XSB9LCB7IFwibm5cIjogXCJwXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWFyZ2luLXRvcDogMTBweDsgY29sb3I6ICM2NjY7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkluc3RydWN0aW9uczpcIiB9XSB9LCB7IFwibm5cIjogXCJiclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0gQ2xpY2sgdG8gc2VsZWN0L2Rlc2VsZWN0IGl0ZW1zXCIgfSwgeyBcIm5uXCI6IFwiYnJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItIENsaWNrIG9uIGVtcHR5IHNwYWNlIHRvIGRlc2VsZWN0IGFsbFwiIH0sIHsgXCJublwiOiBcImJyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiLSBTZWxlY3RlZCBpdGVtcyB3aWxsIGJlIGhpZ2hsaWdodGVkIGluIGdyZWVuXCIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJcXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4zcztcXG4gICAgICAgICAgICAgIFwiXSwgW1wiaWRcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFt7IFwidGFnSnNWYXJcIjogMSB9XSwgW1wic3R5bGUuYmFja2dyb3VuZFwiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBcInN0eWxlXCJdLCBbXCJzdHlsZS5ib3JkZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiA0IH1dXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJJdGVtIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuaW1wb3J0IHsgZGlhbG9nIH0gZnJvbSBcIi4vcHJvdmlkZXJEaWFsb2cudGFnLmpzXCI7XG5pbXBvcnQgeyBodG1sLCB0YWcsIHByb3ZpZGVycywgc3RhdGUsIGNhbGxiYWNrTWFrZXIsIFN1YmplY3QsIG9uSW5pdCwgc3RhdGVzLCBob3N0IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBmeCB9IGZyb20gXCJ0YWdnZWRqcy1hbmltYXRlLWNzc1wiO1xuaW1wb3J0IHsgaW5qZWN0aW9uVGFnIH0gZnJvbSBcIi4vaW5qZWN0aW9uVGVzdGluZy50YWcuanNcIjtcbmV4cG9ydCBjbGFzcyBUYWdEZWJ1Z1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50YWdEZWJ1ZyA9IDA7XG4gICAgICAgIHRoaXMuc2hvd0RpYWxvZyA9IGZhbHNlO1xuICAgIH1cbn1cbmNvbnN0IFByb3ZpZGVyRnVuYyA9ICgpID0+ICh7IGNvdW50ZXI6IDAgfSk7XG5leHBvcnQgZnVuY3Rpb24gdGFnRGVidWdQcm92aWRlcigpIHtcbiAgICBjb25zdCB1cHBlciA9IHByb3ZpZGVycy5jcmVhdGUodXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cHBlcixcbiAgICAgICAgdGVzdDogMFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyKCkge1xuICAgIHN0YXRlKCdlbnN1cmUgc3RhdGVzIGluIHByb3ZpZGVycyBhcmUgc3RhYmxlJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ3VwcGVyVGFnRGVidWdQcm92aWRlcicsXG4gICAgICAgIHRlc3Q6IDBcbiAgICB9O1xufVxuZXhwb3J0IGNvbnN0IHByb3ZpZGVyRGVidWcgPSB0YWcoKF94ID0gJ3Byb3ZpZGVyRGVidWdCYXNlJykgPT4ge1xuICAgIC8vIHByb3ZpZGVyRGVidWdCYXNlLCBoYXMgcHJvdmlkZXJcbiAgICBwcm92aWRlcnMuY3JlYXRlKFByb3ZpZGVyRnVuYyk7IC8vIHRlc3QgdGhhdCBhbiBhcnJvdyBmdW5jdGlvbiBjYW4gYmUgYSBwcm92aWRlclxuICAgIGNvbnN0IHByb3ZpZGVyQ2xhc3MgPSBwcm92aWRlcnMuY3JlYXRlKFRhZ0RlYnVnUHJvdmlkZXIpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gcHJvdmlkZXJzLmNyZWF0ZSh0YWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBsZXQgcHJvcENvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgcHJvcENvdW50ZXIsIHJlbmRlckNvdW50LFxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIHByb3BDb3VudGVyLCByZW5kZXJDb3VudCxcbiAgICB9KSk7XG4gICAgaWYgKHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZykge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvdmlkZXJfZGVidWdfZGlhbG9nJykuc2hvd01vZGFsKCk7XG4gICAgfVxuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbMF0sIHByb3ZpZGVyLnRlc3QsIHByb3ZpZGVyLnVwcGVyPy50ZXN0IHx8ICc/JywgcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZyB8fCAnPycsICgpID0+ICsrcHJvdmlkZXIudGVzdCwgcHJvdmlkZXIudGVzdCwgcHJvdmlkZXIudGVzdCwgKCkgPT4gKytwcm92aWRlci51cHBlci50ZXN0LCBwcm92aWRlci51cHBlci50ZXN0LCBwcm92aWRlci51cHBlci50ZXN0LCAoKSA9PiArK3Byb3ZpZGVyQ2xhc3MudGFnRGVidWcsIHByb3ZpZGVyQ2xhc3MudGFnRGVidWcsIHByb3ZpZGVyQ2xhc3MudGFnRGVidWcsICgpID0+ICsrcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCBwcm9wQ291bnRlciwgKCkgPT4gcHJvdmlkZXJDbGFzcy5zaG93RGlhbG9nID0gdHJ1ZSwgcHJvdmlkZXJDbGFzcy5zaG93RGlhbG9nLCBwcm92aWRlckNoaWxkRGVidWcoe1xuICAgICAgICBwcm9wQ291bnRlcixcbiAgICAgICAgcHJvcENvdW50ZXJDaGFuZ2U6IHggPT4ge1xuICAgICAgICAgICAgcHJvcENvdW50ZXIgPSB4O1xuICAgICAgICB9XG4gICAgfSksIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAncHJvdmlkZXJEZWJ1Z0Jhc2UnIH0pLCBkaWFsb2cocHJvdmlkZXJDbGFzcyksIGluQ3ljbGVDb250ZXh0Q29tbXMoKSk7XG59KTtcbi8qXG5jb25zdCB0YWdTd2l0Y2hpbmdXaXRoUHJvdmlkZXIgPSB0YWcoKCkgPT4gKFxuICB1cHBlclByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCggdXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyIClcbikgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVsxXSwgKCkgPT4gKyt1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QgJSAyID09IDAgPyAnb2ZmJyA6ICdvbicsIHRhZ1N3aXRjaGluZ1Byb0NoaWxkMSgpLCB1cHBlclByb3ZpZGVyLnRlc3QgJSAyID09IDAgPyBudWxsIDogdGFnU3dpdGNoaW5nUHJvQ2hpbGQyKCkpKVxuKi9cbi8qXG5jb25zdCB0YWdTd2l0Y2hpbmdQcm9DaGlsZDEgPSB0YWcoKCkgPT4gKFxuICB1cHBlclByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCggdXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyICksXG4pID0+IHVwcGVyUHJvdmlkZXIudGVzdCAlIDIgPT0gMCA/IG51bGwgOiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzJdLCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QpKVxuXG5jb25zdCB0YWdTd2l0Y2hpbmdQcm9DaGlsZDIgPSB0YWcoKCkgPT4gKFxuICB1cHBlclByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCggdXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyIClcbikgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVszXSwgKCkgPT4gKyt1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0KSkqL1xuLyogY2hpbGQgb2YgbWFpbiBwcm92aWRlciB0ZXN0aW5nICovXG5jb25zdCBwcm92aWRlckNoaWxkRGVidWcgPSB0YWcoKHsgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyQ2hhbmdlLCBfID0gJ3Byb3ZpZGVyRGVidWcuanNAY2hpbGQnLCB9KSA9PiB7XG4gICAgY29uc3QgZnVuY1Byb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdChQcm92aWRlckZ1bmMpOyAvLyB0ZXN0IHRoYXQgYW4gYXJyb3cgZnVuY3Rpb24gY2FuIGJlIGEgcHJvdmlkZXJcbiAgICBjb25zdCBwcm92aWRlciA9IHByb3ZpZGVycy5pbmplY3QodGFnRGVidWdQcm92aWRlcik7XG4gICAgY29uc3QgcHJvdmlkZXJDbGFzcyA9IHByb3ZpZGVycy5pbmplY3QoVGFnRGVidWdQcm92aWRlcik7XG4gICAgY29uc3QgdXBwZXJQcm92aWRlciA9IHByb3ZpZGVycy5pbmplY3QodXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBsZXQgc2hvd1Byb1Byb3BzID0gZmFsc2U7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHNob3dQcm9Qcm9wcywgcmVuZGVyQ291bnQgfV0gPSBnZXQoeyBzaG93UHJvUHJvcHMsIHJlbmRlckNvdW50IH0pKTtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjYWxsYmFja01ha2VyKCk7XG4gICAgY29uc3QgY2FsbGJhY2tUZXN0U3ViID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoKSk7XG4gICAgb25Jbml0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdwcm92aWRlckRlYnVnLnRzOiDwn5GJIPCfkYkgaSBzaG91bGQgb25seSBldmVyIHJ1biBvbmNlJyk7XG4gICAgICAgIGNhbGxiYWNrVGVzdFN1Yi5zdWJzY3JpYmUoeCA9PiB7XG4gICAgICAgICAgICBjYWxsYmFja3MoKHkpID0+IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlci50ZXN0ID0geDtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbNF0sICgpID0+ICsrcHJvdmlkZXIudGVzdCwgcHJvdmlkZXIudGVzdCwgcHJvdmlkZXIudGVzdCwgKCkgPT4gKyt1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCAoKSA9PiArK2Z1bmNQcm92aWRlci5jb3VudGVyLCBmdW5jUHJvdmlkZXIuY291bnRlciwgZnVuY1Byb3ZpZGVyLmNvdW50ZXIsICgpID0+IGNhbGxiYWNrVGVzdFN1Yi5uZXh0KHByb3ZpZGVyLnRlc3QgKyAxKSwgcHJvdmlkZXIudGVzdCwgKCkgPT4gKytwcm92aWRlckNsYXNzLnRhZ0RlYnVnLCBwcm92aWRlckNsYXNzLnRhZ0RlYnVnLCBwcm92aWRlckNsYXNzLnRhZ0RlYnVnLCAoKSA9PiBwcm9wQ291bnRlckNoYW5nZSgrK3Byb3BDb3VudGVyKSwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiBwcm92aWRlckNsYXNzLnNob3dEaWFsb2cgPSB0cnVlLCBwcm92aWRlckNsYXNzLnNob3dEaWFsb2csICgpID0+IHNob3dQcm9Qcm9wcyA9ICFzaG93UHJvUHJvcHMsIHNob3dQcm9Qcm9wcyA/ICdoaWRlJyA6ICdzaG93Jywgc2hvd1Byb1Byb3BzICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbNV0sIGZ4KCksIHRlc3RQcm92aWRlckFzUHJvcHMocHJvdmlkZXJDbGFzcykpLCByZW5kZXJDb3VudCwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3Byb3ZpZGVyRGVidWdJbm5lcicgfSkpO1xufSk7XG5jb25zdCB0ZXN0UHJvdmlkZXJBc1Byb3BzID0gdGFnKChwcm92aWRlckNsYXNzKSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbNl0sIEpTT04uc3RyaW5naWZ5KHByb3ZpZGVyQ2xhc3MsIG51bGwsIDIpKTtcbn0pO1xuY29uc3QgaW5DeWNsZVBhcmVudCA9IGhvc3QoKGNvbG9yID0gJ3JlZCcpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGFnLmVsZW1lbnQuZ2V0KCk7XG4gICAgZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkICcgKyBjb2xvcjtcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgZWxlbWVudC5zdHlsZS5nYXAgPSAnMWVtJztcbiAgICBjb25zdCBydG4gPSB7IGNvbG9yLCB0aXRsZTogJ2luQ3ljbGVQYXJlbnQnIH07XG4gICAgcmV0dXJuIHJ0bjtcbn0pO1xuY29uc3QgaW5DeWNsZUNoaWxkID0gaG9zdCgoY29sb3IgPSAnZ3JlZW4nKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gdGFnLmluamVjdChpbkN5Y2xlUGFyZW50KTtcbiAgICBjb25zdCBlbGVtZW50ID0gdGFnLmVsZW1lbnQuZ2V0KCk7XG4gICAgZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkICcgKyBjb2xvcjtcbiAgICBlbGVtZW50LnN0eWxlLmZsZXggPSAnMSc7XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBgd29uZGVyZnVsIC0gcGFyZW50KCR7cGFyZW50LmNvbG9yfSlgO1xufSk7XG5jb25zdCBpbkN5Y2xlQ2hpbGQyID0gaG9zdCgoY29sb3IgPSAnZ3JlZW4nKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRhZy5lbGVtZW50LmdldCgpO1xuICAgIGVsZW1lbnQuc3R5bGUuYm9yZGVyID0gJzJweCBzb2xpZCAnICsgY29sb3I7XG4gICAgZWxlbWVudC5zdHlsZS5mbGV4ID0gJzEnO1xufSk7XG5jb25zdCBpbkN5Y2xlQ2hpbGQzID0gaG9zdCgoY29sb3IgPSAnZ3JlZW4nKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRhZy5lbGVtZW50LmdldCgpO1xuICAgIGVsZW1lbnQuc3R5bGUuY29sb3IgPSBjb2xvcjtcbn0pO1xuY29uc3QgY29sb3JPcHRpb25zID0gWydyZWQnLCAnYmx1ZScsICdncmVlbicsICdwdXJwbGUnLCAnb3JhbmdlJ107XG5jb25zdCBpbkN5Y2xlQ29udGV4dENvbW1zID0gdGFnKCgpID0+IHtcbiAgICBsZXQgY3ljbGVDb2xvclBhcmVudCA9ICdyZWQnO1xuICAgIGxldCBjeWNsZUNvbG9yQ2hpbGQgPSAnZ3JlZW4nO1xuICAgIGxldCBjeWNsZUNvbG9yQ2hpbGQyID0gJ2dyZWVuJztcbiAgICBsZXQgaGlkZVNob3dDeWNsZXMgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgICAgICBjeWNsZUNvbG9yUGFyZW50LCBjeWNsZUNvbG9yQ2hpbGQsIGN5Y2xlQ29sb3JDaGlsZDIsIGhpZGVTaG93Q3ljbGVzLFxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIGN5Y2xlQ29sb3JQYXJlbnQsIGN5Y2xlQ29sb3JDaGlsZCwgY3ljbGVDb2xvckNoaWxkMiwgaGlkZVNob3dDeWNsZXMsXG4gICAgfSkpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzddLCAhaGlkZVNob3dDeWNsZXMsIGUgPT4gaGlkZVNob3dDeWNsZXMgPSAhaGlkZVNob3dDeWNsZXMsICFoaWRlU2hvd0N5Y2xlcyAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzhdLCBlID0+IGN5Y2xlQ29sb3JQYXJlbnQgPSBlLnRhcmdldC52YWx1ZSwgY29sb3JPcHRpb25zLm1hcChjb2xvciA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzldLCBjb2xvciwgY3ljbGVDb2xvclBhcmVudCA9PT0gY29sb3IsIGNvbG9yKS5rZXkoY29sb3IpKSwgZSA9PiBjeWNsZUNvbG9yQ2hpbGQgPSBlLnRhcmdldC52YWx1ZSwgY29sb3JPcHRpb25zLm1hcChjb2xvciA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzEwXSwgY29sb3IsIGN5Y2xlQ29sb3JDaGlsZCA9PT0gY29sb3IsIGNvbG9yKS5rZXkoY29sb3IpKSwgZSA9PiBjeWNsZUNvbG9yQ2hpbGQyID0gZS50YXJnZXQudmFsdWUsIGNvbG9yT3B0aW9ucy5tYXAoY29sb3IgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVsxMV0sIGNvbG9yLCBjeWNsZUNvbG9yQ2hpbGQyID09PSBjb2xvciwgY29sb3IpLmtleShjb2xvcikpLCBpbmplY3Rpb25UYWcoKSwgaW5DeWNsZVBhcmVudChjeWNsZUNvbG9yUGFyZW50KSwgaW5DeWNsZUNoaWxkKGN5Y2xlQ29sb3JDaGlsZCksIGluQ3ljbGVDaGlsZDIoY3ljbGVDb2xvckNoaWxkMiksIGluQ3ljbGVDaGlsZDMoY3ljbGVDb2xvckNoaWxkMikpKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczY4NTc5Mjk6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb3ZpZGVyRGVidWcuanMtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInByb3ZpZGVyLnRlc3Qgc3VnYXItZGFkZHktNzdcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInByb3ZpZGVyLnVwcGVyPy50ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInN0cm9uZ1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwcm92aWRlckNsYXNzLnRhZ0RlYnVnXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0wLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42MIGluY3JlYXNlIHByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYwtMC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0wLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IGluY3JlYXNlIHVwcGVyLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLkgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXVwcGVyLfCfjLktMC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0wLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42AIGluY3JlYXNlIHByb3ZpZGVyIGNsYXNzIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NgCBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0wLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvcC3wn5C3LTAtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5C3ICsrcHJvcENvdW50ZXIgaW4gcGFyZW50IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QtyBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvcC3wn5C3LTAtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE0IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5KsIHRvZ2dsZSBkaWFsb2cgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTYgfV0gfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE3IH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQgb3V0ZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJuYW1lXCIsIFwicmVuZGVyX2NvdW50X291dGVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTggfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblxcbiAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXN3aXRjaC3wn4y5LTAtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLkgaW5jcmVhc2Ugc3dpdGNoLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLlcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItc3dpdGNoLfCfjLktMC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGF0dWU6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci1zd2l0Y2gt8J+MuS0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IGluY3JlYXNlIHN3aXRjaC5wcm92aWRlci50ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXN3aXRjaC3wn4y5LTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItc3dpdGNoLfCfjLktMi1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuSBpbmNyZWFzZSBzd2l0Y2gucHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuVwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci1zd2l0Y2gt8J+MuS0yLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb3ZpZGVyRGVidWcuanNAY2hpbGQtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42MIGluY3JlYXNlIHByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYwtMS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IGluY3JlYXNlIHVwcGVyLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLlcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1hcnJvdy1wcm92aWRlci3imqHvuI8tMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4pqh77iPIGluY3JlYXNlIHVwcGVyLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKaoe+4j1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1hcnJvdy1wcm92aWRlci3imqHvuI8tMS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3ViamVjdC1pbmNyZWFzZS1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgc3ViamVjdCBpbmNyZWFzZTpcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN1YmplY3QtY291bnRlci1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYAgaW5jcmVhc2UgcHJvdmlkZXIgY2xhc3MgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42AIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42ALTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm9wLfCfkLctMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkLcgKytwcm9wQ291bnRlciBpbiBjaGlsZCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkLcgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3At8J+Qty0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDE3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+SrCB0b2dnbGUgZGlhbG9nIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE4IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgcHJvdmlkZXIgYXMgcHJvcHNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQgaW5uZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjMgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQcm92aWRlciBhcyBQcm9wc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvdmlkZXJEZWJ1Zy5qc0BUZXN0UHJvdmlkZXJBc1Byb3BzLS0+XCIgfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ3aWR0aDoxMDAlO2ZvbnQtc2l6ZTowLjZlbVwiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wicm93c1wiLCBcIjIwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSwgW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW4tY3ljbGUtY29udGV4dC1jb21tc1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsYWJlbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiY2hlY2tib3hcIl0sIFtcImNoZWNrZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiSW4tQ3ljbGUgQ29udGV4dCBDb21tdW5pY2F0aW9uXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbi1ib3R0b206IDFlbVwiXSwgW1wiaWRcIiwgXCJmaWVsZHNldC1ib2R5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsYWJlbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQYXJlbnQgQ29sb3I6IFwiIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhcmVudC1jb2xvci1zZWxlY3RcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXJnaW4tbGVmdDogMWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ2hpbGQgQ29sb3I6IFwiIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkLWNvbG9yLXNlbGVjdFwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSB9LCB7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbi1sZWZ0OiAxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJDaGlsZCBDb2xvcjI6IFwiIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkLWNvbG9yLXNlbGVjdC0yXCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImRyYWctZHJvcC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaDNcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiRHJhZyBTZWxlY3Rpb24gVGVzdGluZ1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW4tY3ljbGUtcGFyZW50XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDcgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbi1jeWNsZS1jaGlsZFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiA4IH1dXSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbi1jeWNsZS1jaGlsZC0yXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid29uZGVyZnVsIHRvb1xcbiAgICAgICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwYXJ0IDJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wic2VsZWN0ZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJzZWxlY3RlZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcInNlbGVjdGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlcywgdGFnIH0gZnJvbSAndGFnZ2VkanMnO1xuZXhwb3J0IGNvbnN0IG1vdXNlT3ZlclRhZyA9IHRhZygoeyBsYWJlbCwgbWVtb3J5LCB9KSA9PiB7XG4gICAgbGV0IG1vdXNlT3ZlckVkaXRTaG93ID0gZmFsc2U7XG4gICAgbGV0IGVkaXQgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IG1vdXNlT3ZlckVkaXRTaG93LCBlZGl0IH1dID0gZ2V0KHsgbW91c2VPdmVyRWRpdFNob3csIGVkaXQgfSkpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNDA0MDdbMF0sICgpID0+IG1vdXNlT3ZlckVkaXRTaG93ID0gdHJ1ZSwgKCkgPT4gbW91c2VPdmVyRWRpdFNob3cgPSBmYWxzZSwgbGFiZWwsIG1lbW9yeS5jb3VudGVyLCBtb3VzZU92ZXJFZGl0U2hvdyB8fCAnZmFsc2UnLCAoKSA9PiArK21lbW9yeS5jb3VudGVyLCAoZWRpdCB8fCBtb3VzZU92ZXJFZGl0U2hvdykgPyAndmlzaWJsZScgOiAnaGlkZGVuJywgKCkgPT4gZWRpdCA9ICFlZGl0KTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE0MDQwNzogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIG1vdXNlT3ZlclRhZyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yOnB1cnBsZTtwYWRkaW5nOi4yZW07ZmxleDoxXCJdLCBbXCJtb3VzZW92ZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcIm1vdXNlb3V0XCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibW91c2VvdmVyIC0gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK2NvdW50ZXJcIiB9XSB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlLnZpc2liaWxpdHlcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgXCJzdHlsZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLimpnvuI8mbmJzcDtcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IG1vdXNlT3ZlclRhZyB9IGZyb20gXCIuL21vdXNlb3Zlci50YWcuanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBzdGF0ZXMsIGh0bWwsIHRhZywgU3ViamVjdCwgY2FsbGJhY2tNYWtlciwgVmFsdWVTdWJqZWN0LCBjYWxsYmFjaywgc3ViamVjdCwgc3Vic2NyaWJlLCBob3N0LCBkaXYsIGJ1dHRvbiwgc3BhbiwgaW5wdXQsIGZpZWxkc2V0LCBsZWdlbmQsIHNtYWxsIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5jb25zdCBsb2FkU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbmNvbnN0IHRlc3QgPSB0YWcoKCkgPT4ge1xuICAgIHJldHVybiBkaXYoJ2hlbGxvIGNvbXBsZXggd29ybGQnKTtcbiAgICAvKlxuICAgIHRlc3QucmVuZGVyKFxuICAgICAgZGl2KCdoZWxsbyBjb21wbGV4IHdvcmxkJylcbiAgICApXG4gIFxuICAgIHJldHVybiBkaXYoJ2hlbGxvIHNpbXBsZSB3b3JsZCcpKi9cbn0pO1xuZXhwb3J0IGNvbnN0IGNvdW50ZXJzID0gdGFnLmltbXV0YWJsZVByb3BzKCh7IGFwcENvdW50ZXJTdWJqZWN0IH0sIF8gPSAnY291bnRlcnNEZWJ1ZycpID0+IHtcbiAgICByZXR1cm4gZGl2KCc8IS0tY291bnRlcnMtLT4nLCB0ZXN0KCksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCIgfSwgZGl2KCfwn5GJIFN1YnNjcmlwdGlvbiBjb3VudDonLCBzcGFuKHsgaWQ6IFwi8J+RiS1jb3VudGVyLXN1Yi1jb3VudFwiIH0sIHN1YnNjcmliZShTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JCkpKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4gY29uc29sZS5pbmZvKCdzdWJzJywgU3ViamVjdC5nbG9iYWxTdWJzKVxuICAgIH0sICdsb2cgc3VicycpLCBkaXYoYnV0dG9uKHtcbiAgICAgICAgaWQ6IFwiY291bnRlcnMtYXBwLWNvdW50ZXItc3ViamVjdC1idXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4gYXBwQ291bnRlclN1YmplY3QubmV4dCgoYXBwQ291bnRlclN1YmplY3QudmFsdWUgfHwgMCkgKyAxKVxuICAgIH0sICfwn42SICsrYXBwIHN1YmplY3QnKSwgc3Bhbign8J+NkiAnLCBzcGFuKHsgaWQ6IFwiYXBwLWNvdW50ZXJzLWRpc3BsYXlcIiB9LCBzdWJzY3JpYmUoYXBwQ291bnRlclN1YmplY3QpKSksIHNwYW4oJ/CfjZIgJywgc3Bhbih7IGlkOiBcImFwcC1jb3VudGVycy1zdWJqZWN0LWRpc3BsYXlcIiB9LCBhcHBDb3VudGVyU3ViamVjdC52YWx1ZSkpKSksIGlubmVyQ291bnRlckNvbnRlbnQoKSk7XG59KTtcbmNvbnN0IGlubmVyQ291bnRlcnMgPSB0YWcuZGVlcFByb3BXYXRjaCgoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4gKG90aGVyQ291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgZWxtSW5pdENvdW50ID0gMCwgX18gPSArK3JlbmRlckNvdW50KSA9PiB7XG4gICAgaW5uZXJDb3VudGVycy51cGRhdGVzKHggPT4ge1xuICAgICAgICA7XG4gICAgICAgIFt7IHByb3BDb3VudGVyLCBpbmNyZWFzZVByb3BDb3VudGVyIH1dID0geDtcbiAgICB9KTtcbiAgICByZXR1cm4gZGl2KGRpdi5hdHRyKGhvc3Qub25Jbml0KCgpID0+IHtcbiAgICAgICAgcmV0dXJuICsrZWxtSW5pdENvdW50O1xuICAgIH0pKSh7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiIH0sIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiIH0sICfwn5SlIGVsbUluaXRDb3VudDonLCBzcGFuKHsgaWQ6IFwi8J+UpS1pbml0LWNvdW50ZXJcIiB9LCBfID0+IHtcbiAgICAgICAgcmV0dXJuIGVsbUluaXRDb3VudDtcbiAgICB9KSksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiIH0sIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIuKdpO+4jy1pbm5lci1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6IGluY3JlYXNlUHJvcENvdW50ZXJcbiAgICB9LCAn4p2k77iPLWlubmVyLWNvdW50ZXIgcHJvcENvdW50ZXI6JywgXyA9PiB7XG4gICAgICAgIHJldHVybiBwcm9wQ291bnRlcjtcbiAgICB9KSwgc3Bhbign4p2k77iPICcsIHNwYW4oeyBpZDogXCLinaTvuI8taW5uZXItZGlzcGxheVwiIH0sIF8gPT4gcHJvcENvdW50ZXIpKSksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiIH0sIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIvCfpL8tZGVlcC1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrb3RoZXJDb3VudGVyXG4gICAgfSwgJ/CfpL8gb3RoZXJDb3VudGVyOicsIF8gPT4gb3RoZXJDb3VudGVyKSwgc3Bhbign8J+kvyAnLCBzcGFuKHsgaWQ6IFwi8J+kvy1kZWVwLWRpc3BsYXlcIiB9LCBfID0+IG90aGVyQ291bnRlcikpKSksIGRpdigncmVuZGVyQ291bnQ6JywgXyA9PiByZW5kZXJDb3VudCksIF8gPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2lubmVyX2NvdW50ZXJzJyB9KSk7XG59KTtcbmNvbnN0IHNoYWxsb3dQcm9wQ291bnRlcnMgPSB0YWcud2F0Y2hQcm9wcygoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDsgLy8gZm9yIGRlYnVnZ2luZ1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M5NzM3MTYxWzBdLCBpbmNyZWFzZVByb3BDb3VudGVyLCBwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsICgpID0+ICsrb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzaGFsbG93X2NvdW50ZXJzJyB9KSk7XG59KTtcbmNvbnN0IGltbXV0YWJsZVByb3BDb3VudGVycyA9IHRhZy5pbW11dGFibGVQcm9wcygoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDsgLy8gZm9yIGRlYnVnZ2luZ1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M5NzM3MTYxWzFdLCBpbmNyZWFzZVByb3BDb3VudGVyLCBwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsICgpID0+ICsrb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdpbW11dGFibGVfY291bnRlcnMnIH0pKTtcbn0pO1xuY29uc3Qgbm9XYXRjaFByb3BDb3VudGVycyA9IHRhZygoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IG5vV2F0Y2hQcm9wQ291bnRlcnMgPSAnbm9XYXRjaFByb3BDb3VudGVycyc7IC8vIGp1c3QgYSBuYW1lIHRvIHBpY2t1cFxuICAgIHN0YXRlcyhnZXQgPT4gW3sgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCwgbm9XYXRjaFByb3BDb3VudGVycyB9XSA9IGdldCh7IG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIG5vV2F0Y2hQcm9wQ291bnRlcnMgfSkpO1xuICAgICsrcmVuZGVyQ291bnQ7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzOTczNzE2MVsyXSwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiArK290aGVyQ291bnRlciwgb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnbm93YXRjaF9jb3VudGVycycgfSkpO1xufSk7XG5leHBvcnQgY29uc3QgaW5uZXJDb3VudGVyQ29udGVudCA9IHRhZygoKSA9PiAoc3RhdGVzUmVuZGVyQ291bnQgPSAwLCBzdGF0ZXNSZW5kZXJDb3VudDIgPSAwLCBjb3VudGVyID0gMCwgY291bnRlcjIgPSAwLCByZW5kZXJDb3VudCA9IDAsIHByb3BDb3VudGVyID0gMCwgaW5pdENvdW50ZXIgPSAwLCBjYWxsYmFja3MgPSBjYWxsYmFja01ha2VyKCksIGNhbGxiYWNrVG8gPSBjYWxsYmFjayh6ID0+IHtcbiAgICBjb3VudGVyMiA9IHo7XG59KSwgaW5jcmVhc2VQcm9wQ291bnRlciA9ICgpID0+IHtcbiAgICArK3Byb3BDb3VudGVyO1xufSwgaW1tdXRhYmxlUHJvcHMgPSB7IHByb3BDb3VudGVyLCBpbmNyZWFzZVByb3BDb3VudGVyIH0sIGNhbGxiYWNrVGVzdFN1YiA9IG5ldyBTdWJqZWN0KGNvdW50ZXIpLCBjYWxsYmFja1Rlc3RTdWIyID0gbmV3IFN1YmplY3QoMCksIGNhbGxiYWNrVGVzdFN1YjMgPSBuZXcgU3ViamVjdCgpLCBwaXBlZFN1YmplY3QwID0gbmV3IFZhbHVlU3ViamVjdCgnMjIyJyksIFxuLy8gU3RhdGUgYXMgYSBjYWxsYmFjayBvbmx5IG5lZWRlZCBzbyBwaXBlZFN1YmplY3QxIGhhcyB0aGUgbGF0ZXN0IHZhbHVlXG5pbmNyZWFzZUNvdW50ZXIgPSAoKSA9PiB7XG4gICAgKytjb3VudGVyO1xuICAgIHBpcGVkU3ViamVjdDAubmV4dCgnMzMzLScgKyBjb3VudGVyKTtcbn0sIHBpcGVkU3ViamVjdDEgPSBTdWJqZWN0LmFsbChbcGlwZWRTdWJqZWN0MCwgY2FsbGJhY2tUZXN0U3ViXSksIHBpcGVkU3ViamVjdDIgPSBzdWJqZWN0LmFsbChbcGlwZWRTdWJqZWN0MCwgY2FsbGJhY2tUZXN0U3ViXSksIHBpcGVkU3ViamVjdDMgPSBzdWJqZWN0LmFsbChbcGlwZWRTdWJqZWN0MCwgY2FsbGJhY2tUZXN0U3ViLCBjYWxsYmFja1Rlc3RTdWIzXSksIG1lbW9yeSA9IHsgY291bnRlcjogMCB9LCBcbi8vIGNyZWF0ZSBhbiBvYmplY3QgdGhhdCByZW1haW5zIHRoZSBzYW1lXG5yZWFkU3RhcnRUaW1lID0gRGF0ZS5ub3coKSkgPT4ge1xuICAgICsraW5pdENvdW50ZXI7XG4gICAgY29uc29sZS5pbmZvKCdjb3VudGVyc0RlYnVnLnRzOiDwn5GJIGkgc2hvdWxkIG9ubHkgZXZlciBydW4gb25jZScpO1xuICAgIGNhbGxiYWNrVGVzdFN1Yi5zdWJzY3JpYmUoY2FsbGJhY2tzKHkgPT4ge1xuICAgICAgICBjb3VudGVyID0geTtcbiAgICB9KSk7XG4gICAgY2FsbGJhY2tUZXN0U3ViLnN1YnNjcmliZShjYWxsYmFja1RvKTtcbiAgICBpZiAoaW1tdXRhYmxlUHJvcHMucHJvcENvdW50ZXIgIT09IHByb3BDb3VudGVyKSB7XG4gICAgICAgIGltbXV0YWJsZVByb3BzID0geyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9O1xuICAgIH1cbiAgICArK3JlbmRlckNvdW50OyAvLyBmb3IgZGVidWdnaW5nXG4gICAgcmV0dXJuIGRpdihkaXYoJ2luaXRDb3VudGVyOicsIF8gPT4gaW5pdENvdW50ZXIpLCBkaXYoJ/CfmLEgc3RhdGVzUmVuZGVyQ291bnQ6JywgXyA9PiBzdGF0ZXNSZW5kZXJDb3VudCwgYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgKytzdGF0ZXNSZW5kZXJDb3VudDtcbiAgICAgICAgfVxuICAgIH0sICfwn5ixICsrc3RhdGVzUmVuZGVyQ291bnQnKSksIGRpdign8J+YsfCfmLEgc3RhdGVzUmVuZGVyQ291bnQyOicsIF8gPT4gc3RhdGVzUmVuZGVyQ291bnQyLCBidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICArK3N0YXRlc1JlbmRlckNvdW50MjtcbiAgICAgICAgfSxcbiAgICB9LCAn8J+YsfCfmLEgKytzdGF0ZXNSZW5kZXJDb3VudDInKSksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCIgfSwgaW5wdXQoe1xuICAgICAgICBpZDogXCJzZXQtbWFpbi1jb3VudGVyLWlucHV0XCIsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcImlucHV0IGNvdW50ZXIgdmFsdWVcIixcbiAgICAgICAgb25LZXl1cDogZSA9PiAoY291bnRlciA9IE51bWJlcihlLnRhcmdldC52YWx1ZSkgfHwgMClcbiAgICB9KSwgZGl2KGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIuKdpO+4jy1pbmNyZWFzZS1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6IGluY3JlYXNlUHJvcENvdW50ZXJcbiAgICB9LCAn4p2k77iPIHByb3BDb3VudGVyOicsIF8gPT4gcHJvcENvdW50ZXIpLCBzcGFuKCfinaTvuI8gJywgc3Bhbih7IGlkOiBcIuKdpO+4jy1jb3VudGVyLWRpc3BsYXlcIiB9LCBfID0+IHByb3BDb3VudGVyKSkpLCBkaXYoYnV0dG9uKHtcbiAgICAgICAgaWQ6IFwi8J+lpi1zdGFuZGFsb25lLWNvdW50ZXJcIixcbiAgICAgICAgb25DbGljazogaW5jcmVhc2VDb3VudGVyLFxuICAgIH0sICfwn6WmIHN0YW5kIGFsb25lIGNvdW50ZXJzJyksIHNwYW4oJ/CfpaYgJywgc3Bhbih7IGlkOiBcIvCfpaYtc3RhbmRhbG9uZS1kaXNwbGF5XCIgfSwgXyA9PiBjb3VudGVyKSkpLCBfID0+IGNvdW50ZXIgPiAxICYmIGRpdihidXR0b24oe1xuICAgICAgICBpZDogXCJjb25kaXRpb25hbC1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6IGluY3JlYXNlQ291bnRlcixcbiAgICB9LCAnY29uZGl0aW9uYWwgY291bnRlcjonLCBfID0+IGNvdW50ZXIpKSwgc3Bhbign8J+lpiAnLCBzcGFuKHsgaWQ6IFwiY29uZGl0aW9uYWwtZGlzcGxheVwiIH0sIF8gPT4gY291bnRlcikpKSwgZGl2KGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIvCfpaYtc3ViamVjdC1pbmNyZWFzZS1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGNhbGxiYWNrVGVzdFN1Yi5uZXh0KGNvdW50ZXIgKyAxKVxuICAgIH0sICcrK3N1YmplY3Q8PicpLCBzcGFuKCfwn6WmPCcsIHNwYW4oeyBpZDogXCJzdWJqZWN0LWNvdW50ZXItc3ViamVjdC1kaXNwbGF5XCIgfSwgc3Vic2NyaWJlKGNhbGxiYWNrVGVzdFN1YikpLCAnPicpKSwgZGl2KGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIvCfpaYtc3ViamVjdC1pbmNyZWFzZS1hc3luYy1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrVGVzdFN1YjIubmV4dChjYWxsYmFja1Rlc3RTdWIyLnZhbHVlICsgMSk7XG4gICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH1cbiAgICB9LCAn8J+UgCDwn6WmICsrc3ViamVjdDw+JyksIHNwYW4oJ/CflIAg8J+lpjwnLCBzcGFuKHsgaWQ6IFwic3ViamVjdC1hc3luYy1jb3VudGVyLXN1YmplY3QtZGlzcGxheVwiIH0sIHN1YnNjcmliZShjYWxsYmFja1Rlc3RTdWIyKSksICc+JykpLCBmaWVsZHNldChsZWdlbmQoJ/CfqoggcGlwZWRTdWJqZWN0IDEnKSwgZGl2KHNtYWxsKHNwYW4oeyBpZDogXCLwn6qILXBpcGVkU3ViamVjdFwiIH0sIHN1YnNjcmliZShwaXBlZFN1YmplY3QxLCAoKSA9PiBjb3VudGVyKSkpKSksIGZpZWxkc2V0KGxlZ2VuZCgn8J+qiCBwaXBlZFN1YmplY3QgMicpLCBkaXYoc21hbGwoc3Bhbih7IGlkOiBcIvCfqogtcGlwZWRTdWJqZWN0LTJcIiB9LCBzdWJzY3JpYmUocGlwZWRTdWJqZWN0MiwgKCkgPT4gY291bnRlcikpKSkpLCBmaWVsZHNldChsZWdlbmQoJ/CfqoggcGlwZWRTdWJqZWN0IDMnKSwgZGl2KHNtYWxsKHNwYW4oeyBpZDogXCLwn6qILXBpcGVkU3ViamVjdC0zXCIgfSwgc3Vic2NyaWJlKHBpcGVkU3ViamVjdDMsIChhKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwaXBlZFN1YmplY3QzJywgcGlwZWRTdWJqZWN0Myk7XG4gICAgICAgIHJldHVybiAnaGVsbG8gd29ybGQnO1xuICAgIH0pKSkpKSwgZmllbGRzZXQobGVnZW5kKCdzaGFyZWQgbWVtb3J5JyksIGRpdih7XG4gICAgICAgIGNsYXNzOiB7IGJvbGQ6IHRydWUsICd0ZXh0LWJsdWUnOiB0cnVlIH0sXG4gICAgICAgIHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6LjVlbVwiXG4gICAgfSwgXyA9PiBtb3VzZU92ZXJUYWcoeyBsYWJlbDogJ2EtYS3wn5i7JywgbWVtb3J5IH0pLCBfID0+IG1vdXNlT3ZlclRhZyh7IGxhYmVsOiAnYi1iLfCfmLsnLCBtZW1vcnkgfSkpLCAnbWVtb3J5LmNvdW50ZXI68J+YuycsIF8gPT4gbWVtb3J5LmNvdW50ZXIsIGJ1dHRvbih7IG9uQ2xpY2s6ICgpID0+ICsrbWVtb3J5LmNvdW50ZXIgfSwgJ2luY3JlYXNlIPCfmLsnKSksIGZpZWxkc2V0KGxlZ2VuZCgnaW5uZXIgY291bnRlcicpLCBfID0+IGlubmVyQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSksIGZpZWxkc2V0KGxlZ2VuZCgnc2hhbGxvdyBwcm9wcycpLCBfID0+IHNoYWxsb3dQcm9wQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSksIGZpZWxkc2V0KGxlZ2VuZCgnaW1tdXRhYmxlIHByb3BzJyksIF8gPT4gaW1tdXRhYmxlUHJvcENvdW50ZXJzKGltbXV0YWJsZVByb3BzKSksIGZpZWxkc2V0KGxlZ2VuZCgnbm93YXRjaCBwcm9wcycpLCBfID0+IG5vV2F0Y2hQcm9wQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSksIGRpdih7IHN0eWxlOiBcImZvbnQtc2l6ZTowLjhlbTtvcGFjaXR5OjAuOFwiIH0sICfijJrvuI8gcGFnZSBsb2FkIHRvIGRpc3BsYXkgaW5cXHUwMEEwJywgc3Bhbi5hdHRyKGhvc3Qub25Jbml0KChlbGVtZW50KSA9PiBlbGVtZW50LmlubmVyVGV4dCA9IChEYXRlLm5vdygpIC0gbG9hZFN0YXJ0VGltZSkudG9TdHJpbmcoKSkpKCctJyksICdtcycpLCBkaXYoeyBzdHlsZTogXCJmb250LXNpemU6MC44ZW07b3BhY2l0eTowLjhcIiB9LCAn4oya77iPIHJlYWQgaW5cXHUwMEEwJywgc3Bhbi5hdHRyKGhvc3Qub25Jbml0KChlbGVtZW50KSA9PiBlbGVtZW50LmlubmVyVGV4dCA9IChEYXRlLm5vdygpIC0gcmVhZFN0YXJ0VGltZSkudG9TdHJpbmcoKSkpKCctJyksICdtcycpLCBfID0+IHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjb3VudGVycycgfSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzOTczNzE2MTogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn5KnLXNoYWxsb3ctY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn5KnIHByb3BDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn5KnIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn5KnLXNoYWxsb3ctZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+Spy1zaGFsbG93LWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+SpyBvdGhlckNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkqcgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfkqctc2hhbGxvdy1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn6qoLWltbXV0YWJsZS1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfqqggcHJvcENvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfqqggXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4j/CfqqgtaW1tdXRhYmxlLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfqqgtaW1tdXRhYmxlLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+qqCBvdGhlckNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfqqggXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfqqgtaW1tdXRhYmxlLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4j/Cfmqstbm93YXRjaC1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfmqsgcHJvcENvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfmqsgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4j/Cfmqstbm93YXRjaC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5qrLW5vd2F0Y2gtY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5qrIG90aGVyQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+aqyBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+aqy1ub3dhdGNoLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHRhZywgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgdGFibGVEZWJ1ZyA9IHRhZygoKSA9PiB7XG4gICAgbGV0IHNob3dDZWxsID0gdHJ1ZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFtzaG93Q2VsbF0gPSBnZXQoc2hvd0NlbGwpKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNTI3ODJbMF0sIDUsIDUsIHNob3dDZWxsICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczUyNzgyWzFdKSwgc2hvd0NlbGwgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNTI3ODJbMl0pKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczUyNzgyOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1heC1oZWlnaHQ6IDgwMHB4O292ZXJmbG93LXk6IHNjcm9sbDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0YWJsZVwiLCBcImF0XCI6IFtbXCJjZWxscGFkZGluZ1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2VsbHNwYWNpbmdcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcImJvcmRlclwiLCBcIjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0aGVhZFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBvc2l0aW9uOiBzdGlja3k7dG9wOiAwO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRyXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRoXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhlbGxvXCIgfV0gfSwgeyBcIm5uXCI6IFwidGhcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGVsbG9cIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcInRib2R5XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRyXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRkXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIndvcmxkXCIgfV0gfSwgeyBcIm5uXCI6IFwidGRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid29ybGRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGVsbG8gMiB0aGVhZCBjZWxsXCIgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3b3JsZCAyIHRib2R5IGNlbGxcIiB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlLCBzdGF0ZXMsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGNvbHVtbkVkaXRvciA9IHRhZygoeyBuYW1lLCBhcnJheSwgaW5jbHVkZWQsIGNvbHVtbk5hbWVzLCBhbGxDb2x1bW5OYW1lcyB9KSA9PiB7XG4gICAgbGV0IG1vdXNlT3ZlckVkaXRTaG93ID0gZmFsc2U7XG4gICAgbGV0IGVkaXQgPSBmYWxzZTtcbiAgICBsZXQgZWRpdEZvcm11bGEgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgZm9ybXVsYXMgPSBzdGF0ZShbXSk7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgbW91c2VPdmVyRWRpdFNob3csIGVkaXQsIGVkaXRGb3JtdWxhXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgbW91c2VPdmVyRWRpdFNob3csIGVkaXQsIGVkaXRGb3JtdWxhXG4gICAgfSkpO1xuICAgIGNvbnN0IGdvQWxsID0gKCkgPT4ge1xuICAgICAgICBjb2x1bW5OYW1lcy5sZW5ndGggPSAwO1xuICAgICAgICBjb2x1bW5OYW1lcy5wdXNoKC4uLmFsbENvbHVtbk5hbWVzKTtcbiAgICB9O1xuICAgIGNvbnN0IGdvT25seSA9ICgpID0+IHtcbiAgICAgICAgY29sdW1uTmFtZXMubGVuZ3RoID0gMDtcbiAgICAgICAgY29sdW1uTmFtZXMucHVzaChuYW1lKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjb2x1bW5OYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29sdW1uTmFtZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5OYW1lcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICBjb25zdCBhZGRTdW1Gb3JtdWxhID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHJpbmdGb3JtdWxhID0gYFxuICAgICAgYXJyYXkucmVkdWNlKChhbGwsIGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpdGVtWycke25hbWV9J11cbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKSA/IGFsbCA6IChhbGwgKyB2YWx1ZSlcbiAgICAgIH0sIDApXG4gICAgYDtcbiAgICAgICAgZm9ybXVsYXMucHVzaCh7XG4gICAgICAgICAgICB0aXRsZTogJ3N1bScsXG4gICAgICAgICAgICBzdHJpbmdGb3JtdWxhLFxuICAgICAgICAgICAgdmFsdWU6IHNhbmRib3hSdW5FdmFsKHN0cmluZ0Zvcm11bGEsIHsgYXJyYXkgfSlcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVGb3JtdWxhID0gKGZvcm11bGEsIG5ld0Zvcm11bGEpID0+IHtcbiAgICAgICAgZm9ybXVsYS5zdHJpbmdGb3JtdWxhID0gbmV3Rm9ybXVsYTtcbiAgICAgICAgZm9ybXVsYS52YWx1ZSA9IHNhbmRib3hSdW5FdmFsKG5ld0Zvcm11bGEsIHsgYXJyYXkgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzBdLCB0b2dnbGUsIGluY2x1ZGVkICYmICdjaGVja2VkJywgbmFtZSwgKCkgPT4gbW91c2VPdmVyRWRpdFNob3cgPSB0cnVlLCAoKSA9PiBtb3VzZU92ZXJFZGl0U2hvdyA9IGZhbHNlLCAoZWRpdCB8fCBtb3VzZU92ZXJFZGl0U2hvdykgPyAndmlzaWJsZScgOiAnaGlkZGVuJywgKCkgPT4gZWRpdCA9ICFlZGl0LCBpbmNsdWRlZCAmJiBjb2x1bW5OYW1lcy5sZW5ndGggIT09IGFsbENvbHVtbk5hbWVzLmxlbmd0aCA/IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQzMTY5MVsxXSwgZ29BbGwpIDogaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzJdLCBnb09ubHkpLCBlZGl0ICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQzMTY5MVszXSwgZWRpdEZvcm11bGEgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzRdLCAoZXZ0KSA9PiB1cGRhdGVGb3JtdWxhKGVkaXRGb3JtdWxhLCBldnQudGFyZ2V0LnZhbHVlKSwgZWRpdEZvcm11bGEudmFsdWUpLCBmb3JtdWxhcy5tYXAoZm9ybXVsYSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0MzE2OTFbNV0sIGZvcm11bGEudGl0bGUsICgpID0+IGVkaXRGb3JtdWxhID0gZm9ybXVsYSwgZm9ybXVsYS52YWx1ZSkua2V5KGZvcm11bGEpKSwgYWRkU3VtRm9ybXVsYSkpO1xufSk7XG5mdW5jdGlvbiBzYW5kYm94UnVuRXZhbChzdHJpbmdGb3JtdWxhLCBjb250ZXh0ID0ge30pIHtcbiAgICByZXR1cm4gc2FuZGJveEV2YWwoc3RyaW5nRm9ybXVsYSwgeyBpc05hTiwgTWF0aCwgTnVtYmVyLCBEYXRlLCAuLi5jb250ZXh0IH0pO1xufVxuLy8gZXhlY3V0ZSBzY3JpcHQgaW4gcHJpdmF0ZSBjb250ZXh0XG5mdW5jdGlvbiBzYW5kYm94RXZhbChzcmMsIGN0eCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICAgIHJldHVybiBzcmM7XG4gICAgfVxuICAgIGN0eCA9IG5ldyBQcm94eShjdHgsIHsgaGFzOiAoKSA9PiB0cnVlIH0pO1xuICAgIGxldCBmdW5jID0gKG5ldyBGdW5jdGlvbihcIndpdGgodGhpcykgeyByZXR1cm4gKFwiICsgc3JjICsgXCIpfVwiKSk7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjdHgpO1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQzMTY5MTogW1t7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY3Vyc29yOnBvaW50ZXI7XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAxIH1dXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDtcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJtb3VzZW92ZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF0sIFtcIm1vdXNlb3V0XCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS52aXNpYmlsaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIFwic3R5bGVcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4pqZ77iPJm5ic3A7XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY29sb3I6Ymx1ZTtcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWxsXCIgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY29sb3I6Ymx1ZTtcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwib25seVwiIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJTtwYWRkaW5nOjAuM2VtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZvbnQtc2l6ZTowLjdlbTt0ZXh0LWFsaWduOmNlbnRlcjtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ29sdW1uIFNldHRpbmdzXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1bVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowLjNlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZWRpdCBmb3JtdWxhXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKcj++4j1wiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBhcnJheVRhYmxlID0gdGFnKCh7IGFycmF5LCBcbi8vIHNob3dMZXZlbHMsXG5zaG93QWxsLCBzaG93S2lkcywgdG9nZ2xlQ29sdW1uRGlhbG9nLCBjb2x1bW5OYW1lcywgZm9ybWF0Q2hhbmdlLCBhbGxvd01heGltaXplLCBldmVyeVNpbXBsZVZhbHVlLCB9KSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFswXSwgYXJyYXkubGVuZ3RoICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFsxXSwgY29sdW1uTmFtZXMubWFwKGtleSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMjIxODRbMl0sIHRvZ2dsZUNvbHVtbkRpYWxvZyAmJiAncG9pbnRlcicsIHRvZ2dsZUNvbHVtbkRpYWxvZywga2V5KS5rZXkoa2V5KSkpLCBhcnJheS5tYXAocm93ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFszXSwgY29sdW1uTmFtZXMubWFwKG5hbWUgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTIyMTg0WzRdLCBkdW1wKHtcbiAgICAgICAgdmFsdWU6IHJvd1tuYW1lXSxcbiAgICAgICAgc2hvd0xldmVsczogMCxcbiAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgc2hvd0tpZHM6IHNob3dBbGwgfHwgc2hvd0tpZHMsXG4gICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgfSkpLmtleShyb3dbbmFtZV0pKSkua2V5KHJvdykpKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczEyMjE4NDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IHRhYmxlIC0tPjwhLS0gb3ZlcmZsb3cteTogc2Nyb2xsOyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXgtaGVpZ2h0OiA4MDBweDttYXgtd2lkdGg6MTAwdnc7b3ZlcmZsb3c6IHNjcm9sbDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0YWJsZVwiLCBcImF0XCI6IFtbXCJjZWxscGFkZGluZ1wiLCBcIjJcIl0sIFtcImNlbGxzcGFjaW5nXCIsIFwiMlwiXSwgW1wiYm9yZGVyXCIsIFwiMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGJvZHlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcInRoZWFkXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicG9zaXRpb246IHN0aWNreTt0b3A6IDA7Zm9udC1zaXplOiAwLjhlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0clwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGhcIiwgXCJhdFwiOiBbW1wic3R5bGUuY3Vyc29yXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIFwic3R5bGVcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcInRyXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBhcnJheURpc3BsYXkgPSB0YWcoKHsgYXJyYXksIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLCBjb2x1bW5OYW1lcywgZm9ybWF0Q2hhbmdlLCB0b2dnbGVDb2x1bW5EaWFsb2csIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTUyMTI3WzBdLCBhcnJheS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1WYWx1ZUtleXMoaXRlbSwgY29sdW1uTmFtZXMpO1xuICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTUyMTI3WzFdLCBkdW1wKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgc2hvd0xldmVscyxcbiAgICAgICAgICAgIHNob3dBbGwsXG4gICAgICAgICAgICBzaG93S2lkczogdHJ1ZSwgLy8gc2hvd0FsbCB8fCBzaG93S2lkcyxcbiAgICAgICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICAgICAgb25IZWFkZXJDbGljazogdG9nZ2xlQ29sdW1uRGlhbG9nLFxuICAgICAgICAgICAgYWxsb3dNYXhpbWl6ZSxcbiAgICAgICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgICAgIH0pKS5rZXkoaW5kZXgpO1xuICAgIH0pKTtcbn0pO1xuZnVuY3Rpb24gcGFyYW1WYWx1ZUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSkge1xuICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddLmluY2x1ZGVzKHR5cGVvZiAoaW5wdXRPYmplY3QpKSkge1xuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0T2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJPYmplY3RCeUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSk7XG59XG5mdW5jdGlvbiBmaWx0ZXJPYmplY3RCeUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSkge1xuICAgIGlmICgha2V5c0FycmF5KSB7XG4gICAgICAgIC8vIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKGlucHV0T2JqZWN0KVxuICAgICAgICAvLyByZXR1cm4gey4uLmlucHV0T2JqZWN0fSAvLyBtdXN0IGJlIGNsb25lIHNvIHVuY2hlY2tpbmcgaXRlbXMgZG9lcyBub3QgY2hhbmdlIG9yaWdpbmFsIG9iamVjdFxuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkT2JqZWN0ID0ge307XG4gICAga2V5c0FycmF5LmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGlucHV0T2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgfHwga2V5IGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBmaWx0ZXJlZE9iamVjdFtrZXldID0gaW5wdXRPYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZE9iamVjdDtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxNTIxMjc6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV1dIH07XG4iLCJpbXBvcnQgeyBjb2x1bW5FZGl0b3IgfSBmcm9tIFwiLi9jb2x1bW5FZGl0b3IuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBodG1sLCBzdGF0ZSwgc3RhdGVzLCB0YWcsIHdhdGNoIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBhcnJheVRhYmxlIH0gZnJvbSBcIi4vYXJyYXlUYWJsZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IGFycmF5RGlzcGxheSB9IGZyb20gXCIuL2FycmF5RGlzcGxheS50YWdcIjtcbmV4cG9ydCBjb25zdCBhcnJheXNEaXNwbGF5ID0gdGFnKCh7IHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLCBhcnJheSwgYXJyYXlWaWV3LCBmb3JtYXRDaGFuZ2UsIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICAvLyB1c2VkIHRvIGRpc3BsYXkgbGlzdCBvZiBhbGwgcG9zc2libGUgY29sdW1uc1xuICAgIGNvbnN0IGFsbENvbHVtbk5hbWVzID0gd2F0Y2goW2FycmF5LCBhcnJheS5sZW5ndGhdLCAoKSA9PiBhcnJheS5sZW5ndGggPyBnZXRBbGxLZXlzKGFycmF5KSA6IFtdKTtcbiAgICAvLyBhbiBlZGl0YWJsZSBsaXN0IG9mIGNvbHVtbiBuYW1lc1xuICAgIGxldCBjb2x1bW5OYW1lcyA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBkZWZhdWx0Q29sdW1uTmFtZXMgPSB3YXRjaChbYWxsQ29sdW1uTmFtZXNdLCAoKSA9PiBbLi4uYWxsQ29sdW1uTmFtZXNdKTtcbiAgICBsZXQgc2hvd0NvbHVtbkRpYWxvZyA9IGZhbHNlO1xuICAgIGNvbnN0IHVuaXF1ZUlkID0gc3RhdGUoKCkgPT4gJ2NvbHVtbkRpYWxvZycgKyBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBjb2x1bW5OYW1lcywgc2hvd0NvbHVtbkRpYWxvZyB9XSA9IGdldCh7IGNvbHVtbk5hbWVzLCBzaG93Q29sdW1uRGlhbG9nIH0pKTtcbiAgICB3YXRjaC5ub0luaXQoW2RlZmF1bHRDb2x1bW5OYW1lcy5sZW5ndGhdLCAoKSA9PiB7XG4gICAgICAgIGlmICghY29sdW1uTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbHVtbk5hbWVzID0gZGVmYXVsdENvbHVtbk5hbWVzO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgdG9nZ2xlQ29sdW1uRGlhbG9nID0gKCkgPT4ge1xuICAgICAgICBzaG93Q29sdW1uRGlhbG9nID0gIXNob3dDb2x1bW5EaWFsb2c7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh1bmlxdWVJZCk7XG4gICAgICAgIGlmIChzaG93Q29sdW1uRGlhbG9nKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5jbG9zZSgpOyAvLyA8LSBlbGVtZW50IGhhcyBvbmNsb3NlIGV2ZW50IHRoYXQgaXMgY2FsbGVkIHNsb3dcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgYXJyYXlUYWcgPSBhcnJheVZpZXcgPT09ICd0YWJsZScgPyBhcnJheVRhYmxlKHtcbiAgICAgICAgc2hvd0FsbCwgc2hvd0tpZHMsXG4gICAgICAgIGFycmF5LCB0b2dnbGVDb2x1bW5EaWFsb2csXG4gICAgICAgIGNvbHVtbk5hbWVzOiBjb2x1bW5OYW1lcyB8fCBhbGxDb2x1bW5OYW1lcyxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLCBldmVyeVNpbXBsZVZhbHVlLFxuICAgIH0pIDogYXJyYXlEaXNwbGF5KHtcbiAgICAgICAgYXJyYXksIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGNvbHVtbk5hbWVzOiBjb2x1bW5OYW1lcyB8fCBhbGxDb2x1bW5OYW1lcyxcbiAgICAgICAgdG9nZ2xlQ29sdW1uRGlhbG9nLFxuICAgICAgICBhbGxvd01heGltaXplLCBldmVyeVNpbXBsZVZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ2MzE3MVswXSwgYXJyYXlUYWcsIHVuaXF1ZUlkLCBhbGxDb2x1bW5OYW1lcy5tYXAobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVkID0gY29sdW1uTmFtZXMgPT09IHVuZGVmaW5lZCB8fCBjb2x1bW5OYW1lcy5pbmNsdWRlcyhuYW1lKTtcbiAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ2MzE3MVsxXSwgY29sdW1uRWRpdG9yKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgIGluY2x1ZGVkLFxuICAgICAgICAgICAgY29sdW1uTmFtZXM6IGNvbHVtbk5hbWVzIHx8IGRlZmF1bHRDb2x1bW5OYW1lcyxcbiAgICAgICAgICAgIGFsbENvbHVtbk5hbWVzLFxuICAgICAgICB9KSkua2V5KG5hbWUpO1xuICAgIH0pLCB0b2dnbGVDb2x1bW5EaWFsb2cpO1xufSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsS2V5cyhhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGFsbCwgeCkgPT4ge1xuICAgICAgICBpZiAoeCAmJiB0eXBlb2YgKHgpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmtleXMoeCkuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhbGwuaW5jbHVkZXMoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBhbHJlYWR5IGhhdmUgaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWxsLnB1c2goeCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sIFtdKTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M0NjMxNzE6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGlhbG9nXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowXCJdLCBbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJkdW1wLWRpYWxvZ1wiXSwgW1wibW91c2Vkb3duXCIsIFwidmFyIHIgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyhyLnRvcDw9ZXZlbnQuY2xpZW50WSYmZXZlbnQuY2xpZW50WTw9ci50b3Arci5oZWlnaHQmJnIubGVmdDw9ZXZlbnQuY2xpZW50WCYmZXZlbnQuY2xpZW50WDw9ci5sZWZ0K3Iud2lkdGgpIHx8IHRoaXMuY2xvc2UoKVwiXSwgW1wiZHJhZ3N0YXJ0XCIsIFwiY29uc3Qge2UsZHQsdH0gPSB7dDp0aGlzLGU6ZXZlbnQsZHQ6ZXZlbnQuZGF0YVRyYW5zZmVyfTtjb25zdCBkPXQuZHJhZz10LmRyYWd8fHt4OjAseTowfTtkLmluaXRYPWQueDtkLnN0YXJ0WD1ldmVudC5jbGllbnRYLXQub2Zmc2V0TGVmdDtkLnN0YXJ0WT1ldmVudC5jbGllbnRZLXQub2Zmc2V0VG9wO3Qub25kcmFnb3Zlcj1lLnRhcmdldC5vbmRyYWdvdmVyPShlKT0+ZS5wcmV2ZW50RGVmYXVsdCgpO2R0LmVmZmVjdEFsbG93ZWQ9J21vdmUnO2R0LmRyb3BFZmZlY3Q9J21vdmUnXCJdLCBbXCJkcmFnXCIsIFwiY29uc3Qge3QsZSxkdCxkfT17ZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXIsZDp0aGlzLmRyYWd9OyBpZihlLmNsaWVudFg9PT0wKSByZXR1cm47ZC54ID0gZC54ICsgZS5vZmZzZXRYIC0gZC5zdGFydFg7IGQueSA9IGQueSArIGUub2Zmc2V0WSAtIGQuc3RhcnRZOyB0aGlzLnN0eWxlLmxlZnQgPSBkLnggKyAncHgnOyB0aGlzLnN0eWxlLnRvcCA9IGQueSsncHgnO1wiXSwgW1wiZHJhZ2VuZFwiLCBcImNvbnN0IHt0LGUsZH09e3Q6dGhpcyxlOmV2ZW50LGQ6dGhpcy5kcmFnfTtpZiAoZC5pbml0WCA9PT0gZC54KSB7ZC54PWQueCtlLm9mZnNldFgtKGQuc3RhcnRYLWQueCk7ZC55PWQueStlLm9mZnNldFktKGQuc3RhcnRZLWQueSk7dGhpcy5zdHlsZS50cmFuc2Zvcm09dHJhbnNsYXRlM2QoZC54KydweCcsIGQueSsncHgnLCAwKX07dGhpcy5kcmFnZ2FibGU9ZmFsc2VcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtO2JhY2tncm91bmQtY29sb3I6IzY2Njtjb2xvcjp3aGl0ZTtcIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNvbHVtbiBNb2RpZmllclwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCVcIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+FpyBjbG9zZVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtmbGV4LXdyYXA6d3JhcFwiXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy13YXJuaW5nXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGFycmF5c0Rpc3BsYXkgfSBmcm9tIFwiLi9hcnJheXNEaXNwbGF5LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgaHRtbCwgbGV0UHJvcCwgc3RhdGUsIHN0YXRlcywgdGFnLCB3YXRjaCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGR1bXBBcnJheSA9IHRhZygoeyAvLyBkdW1wQXJyYXlcbmtleSwgdmFsdWUsIHNob3csIHNob3dBbGwsIHNob3dLaWRzLCBcbi8vIGFycmF5VmlldyxcbnNob3dMZXZlbHMsIGZvcm1hdENoYW5nZSwgYWxsb3dNYXhpbWl6ZSwgZXZlcnlTaW1wbGVWYWx1ZSwgfSkgPT4ge1xuICAgIGxldCBzaG93TG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGFycmF5VmlldyA9IHVuZGVmaW5lZDtcbiAgICBsZXQgbWF4aW1pemUgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHNob3dMb3dlciwgYXJyYXlWaWV3LCBtYXhpbWl6ZSB9XSA9IGdldCh7IHNob3dMb3dlciwgYXJyYXlWaWV3LCBtYXhpbWl6ZSB9KSk7XG4gICAgbGV0UHJvcChnZXQgPT4gW3Nob3dLaWRzXSA9IGdldChzaG93S2lkcykpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93QWxsXSA9IGdldChzaG93QWxsKSk7XG4gICAgd2F0Y2gubm9Jbml0KFtzaG93XSwgKFtzaG93XSkgPT4gc2hvd0xvd2VyID0gc2hvdyk7XG4gICAgd2F0Y2gubm9Jbml0KFtzaG93QWxsXSwgKFtzaG93QWxsXSkgPT4gc2hvd0xvd2VyID0gc2hvd0FsbCk7XG4gICAgY29uc3QgbWF4aW1pemVJZCA9IHN0YXRlKCgpID0+ICdtYXhpbWl6ZS1kdW1wLScgKyBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgY29uc3QgdG9nZ2xlTWF4aW1pemUgPSAoKSA9PiB7XG4gICAgICAgIG1heGltaXplID0gIW1heGltaXplO1xuICAgICAgICBpZiAobWF4aW1pemUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1heGltaXplSWQpLnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtaW5pbWl6ZSA9ICgpID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1heGltaXplSWQpLmNsb3NlKCk7XG4gICAgY29uc3QgZHVtcEJvZHkgPSAoc2hvd0FsbCB8fCBzaG93TG93ZXIgfHwgc2hvd0tpZHMgfHwgKHNob3dMb3dlciA9PSB1bmRlZmluZWQgJiYgc2hvd0xldmVscyA+IDApKTtcbiAgICBjb25zdCBnZXRIZWFkZXIgPSAoYWxsb3dNYXhpbWl6ZSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc5MzcwWzBdLCAoKSA9PiB7XG4gICAgICAgIGlmIChzaG93TG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dBbGwgPSBzaG93S2lkcyA9IHNob3dMb3dlciA9ICFkdW1wQm9keTtcbiAgICAgICAgfVxuICAgICAgICBzaG93QWxsID0gc2hvd0tpZHMgPSBzaG93TG93ZXIgPSAhc2hvd0xvd2VyO1xuICAgIH0sIGtleSwgYXJyYXlWaWV3ID09PSAndGFibGUnID8gJ2JvbGQnIDogJycsICgpID0+IGFycmF5VmlldyA9IGFycmF5VmlldyA9PT0gJ3RhYmxlJyA/IHVuZGVmaW5lZCA6ICd0YWJsZScsIGFycmF5VmlldyA9PT0gJ3RhYmxlJyA/ICdmbGV4JyA6ICd0YWJsZScsIHZhbHVlLmxlbmd0aCwgYWxsb3dNYXhpbWl6ZSAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NzkzNzBbMV0sIHRvZ2dsZU1heGltaXplKSk7XG4gICAgY29uc3QgZGlzcGxheU9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGFycmF5OiB2YWx1ZSxcbiAgICAgICAgYXJyYXlWaWV3OiBhcnJheVZpZXcsXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgfTtcbiAgICBjb25zdCBnZXRCb2R5ID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc5MzcwWzJdLCBhcnJheXNEaXNwbGF5KGRpc3BsYXlPcHRpb25zKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3OTM3MFszXSwgZ2V0SGVhZGVyKGFsbG93TWF4aW1pemUpLCBkdW1wQm9keSAmJiBnZXRCb2R5KCksIG1heGltaXplSWQsIG1heGltaXplICYmIGdldEhlYWRlcihmYWxzZSksIG1heGltaXplICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3OTM3MFs0XSwgYXJyYXlzRGlzcGxheSh7IC4uLmRpc3BsYXlPcHRpb25zLCBhbGxvd01heGltaXplOiBmYWxzZSB9KSksIG1pbmltaXplKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQ3OTM3MDogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1hcnJheS1sYWJlbFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJzdXBcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJvcGFjaXR5OjgwJTtmb250LXNpemU6NzUlO3BhZGRpbmctbGVmdDowLjRlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO1wiXSwgW1wic3R5bGUuZm9udC13ZWlnaHRcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJzdHlsZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dIH0sIHsgXCJublwiOiBcInN1cFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6ODAlO2ZvbnQtc2l6ZTo3NSU7cGFkZGluZy1sZWZ0OjAuNGVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiW1wiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgICZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTBweDtoZWlnaHQ6MTBweDtib3JkZXI6MXB4IHNvbGlkIHdoaXRlO2JvcmRlci10b3Atd2lkdGg6M3B4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO1wiXV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IGRpc3BsYXlzIHdyYXAgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidGFnZ2VkanMtYXJyYXktYm9keVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLWFycmF5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBtYXhpbWl6ZSAtLT5cIiB9LCB7IFwibm5cIjogXCJkaWFsb2dcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOjBcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcImR1bXAtZGlhbG9nXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJ2YXIgciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7KHIudG9wPD1ldmVudC5jbGllbnRZJiZldmVudC5jbGllbnRZPD1yLnRvcCtyLmhlaWdodCYmci5sZWZ0PD1ldmVudC5jbGllbnRYJiZldmVudC5jbGllbnRYPD1yLmxlZnQrci53aWR0aCkgfHwgdGhpcy5jbG9zZSgpXCJdLCBbXCJkcmFnc3RhcnRcIiwgXCJjb25zdCB7ZSxkdCx0fSA9IHt0OnRoaXMsZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXJ9O2NvbnN0IGQ9dC5kcmFnPXQuZHJhZ3x8e3g6MCx5OjB9O2QuaW5pdFg9ZC54O2Quc3RhcnRYPWV2ZW50LmNsaWVudFgtdC5vZmZzZXRMZWZ0O2Quc3RhcnRZPWV2ZW50LmNsaWVudFktdC5vZmZzZXRUb3A7dC5vbmRyYWdvdmVyPWUudGFyZ2V0Lm9uZHJhZ292ZXI9KGUpPT5lLnByZXZlbnREZWZhdWx0KCk7ZHQuZWZmZWN0QWxsb3dlZD0nbW92ZSc7ZHQuZHJvcEVmZmVjdD0nbW92ZSdcIl0sIFtcImRyYWdcIiwgXCJjb25zdCB7dCxlLGR0LGR9PXtlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2ZlcixkOnRoaXMuZHJhZ307IGlmKGUuY2xpZW50WD09PTApIHJldHVybjtkLnggPSBkLnggKyBlLm9mZnNldFggLSBkLnN0YXJ0WDsgZC55ID0gZC55ICsgZS5vZmZzZXRZIC0gZC5zdGFydFk7IHRoaXMuc3R5bGUubGVmdCA9IGQueCArICdweCc7IHRoaXMuc3R5bGUudG9wID0gZC55KydweCc7XCJdLCBbXCJkcmFnZW5kXCIsIFwiY29uc3Qge3QsZSxkfT17dDp0aGlzLGU6ZXZlbnQsZDp0aGlzLmRyYWd9O2lmIChkLmluaXRYID09PSBkLngpIHtkLng9ZC54K2Uub2Zmc2V0WC0oZC5zdGFydFgtZC54KTtkLnk9ZC55K2Uub2Zmc2V0WS0oZC5zdGFydFktZC55KTt0aGlzLnN0eWxlLnRyYW5zZm9ybT10cmFuc2xhdGUzZChkLngrJ3B4JywgZC55KydweCcsIDApfTt0aGlzLmRyYWdnYWJsZT1mYWxzZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJVwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlIGFycmF5XCIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ0ZXh0LWFsaWduOmxlZnQ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO21hcmdpbjowLjJlbTtnYXA6MC4yZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGNvcHlUZXh0KHRleHQpIHtcbiAgICB2YXIgY29weVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGNvcHlUZXh0LnZhbHVlID0gdGV4dDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvcHlUZXh0KTtcbiAgICBjb3B5VGV4dC5zZWxlY3QoKTtcbiAgICBjb3B5VGV4dC5zZXRTZWxlY3Rpb25SYW5nZSgwLCA5OTk5OSk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29weVRleHQpO1xufVxuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGNvcHlUZXh0IH0gZnJvbSBcIi4vY29weVRleHQuZnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBkdW1wU2ltcGxlKHsga2V5LCB2YWx1ZSwgb25IZWFkZXJDbGljaywgZXZlcnlTaW1wbGVWYWx1ZSB9KSB7XG4gICAgY29uc3QgaXNMaW5rVmFsdWUgPSB2YWx1ZS5zZWFyY2ggJiYgKHZhbHVlLnNsaWNlKDAsIDgpID09PSAnaHR0cHM6Ly8nIHx8IHZhbHVlLnNsaWNlKDAsIDcpID09PSAnaHR0cDovLycpO1xuICAgIC8vIGNvbnN0IHJlc3VsdCA9IGV2ZXJ5U2ltcGxlVmFsdWUgJiYgZXZlcnlTaW1wbGVWYWx1ZSh2YWx1ZSwga2V5KVxuICAgIGxldCBkaXNwbGF5VmFsdWU7XG4gICAgaWYgKGV2ZXJ5U2ltcGxlVmFsdWUpIHtcbiAgICAgICAgZGlzcGxheVZhbHVlID0gc2ltcGxlVmFsdWUoeyB2YWx1ZSwgZXZlcnlTaW1wbGVWYWx1ZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRpc3BsYXlWYWx1ZSA9IGlzTGlua1ZhbHVlID8gbGlua1ZhbHVlKHZhbHVlKSA6IHNpbXBsZVZhbHVlKHsgdmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMF0sIGtleSAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMV0sIG9uSGVhZGVyQ2xpY2sgJiYgXCJwb2ludGVyXCIsIG9uSGVhZGVyQ2xpY2ssIGtleSksIGRpc3BsYXlWYWx1ZSk7XG59XG5jb25zdCBzaW1wbGVWYWx1ZSA9IHRhZygoeyB2YWx1ZSwgZXZlcnlTaW1wbGVWYWx1ZSB9KSA9PiB7XG4gICAgY29uc3QgaXNMaWtlTnVsbCA9IFt1bmRlZmluZWQsIG51bGwsICdudWxsJ10uaW5jbHVkZXModmFsdWUpO1xuICAgIGNvbnN0IG51bWJlciA9IHZhbHVlO1xuICAgIGNvbnN0IGlzTGFyZ2VOdW1iZXIgPSAhaXNOYU4obnVtYmVyKSAmJiBudW1iZXIgPiAxMDAwMDAwMDAwO1xuICAgIGNvbnN0IHRpdGxlID0gIWlzTGFyZ2VOdW1iZXIgPyAnJyA6IGdldExhcmdlTnVtYmVyVGl0bGUobnVtYmVyKTtcbiAgICBsZXQgZG93blRpbWUgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW2Rvd25UaW1lXSA9IGdldChkb3duVGltZSkpO1xuICAgIGNvbnN0IHN0YXJ0TW91c2VEb3duID0gKCkgPT4ge1xuICAgICAgICBkb3duVGltZSA9IERhdGUubm93KCk7XG4gICAgfTtcbiAgICBjb25zdCBtYXJrTW91c2VVcCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGRvd25UaW1lID4gMzAwKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gYSBtYW51YWwgZHJhZyBjb3B5IGlzIHRha2luZyBwbGFjZVxuICAgICAgICB9XG4gICAgICAgIGNvcHlUZXh0KHZhbHVlKTsgLy8gYSByZWd1bGFyIGNsaWNrIHRvb2sgcGxhY2VcbiAgICB9O1xuICAgIGxldCBkaXNwbGF5VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoZXZlcnlTaW1wbGVWYWx1ZSkge1xuICAgICAgICBkaXNwbGF5VmFsdWUgPSBldmVyeVNpbXBsZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgZGlzcGxheVZhbHVlID0gZGlzcGxheVZhbHVlID09PSBudWxsICYmICdudWxsJyB8fCBkaXNwbGF5VmFsdWUgPT09IGZhbHNlICYmICdmYWxzZScgfHwgZGlzcGxheVZhbHVlID09PSB1bmRlZmluZWQgJiYgJ3VuZGVmaW5lZCcgfHwgZGlzcGxheVZhbHVlO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMl0sIHN0YXJ0TW91c2VEb3duLCBtYXJrTW91c2VVcCwgaXNMaWtlTnVsbCA/ICdyZ2JhKDAsMCwwLC41KScgOiAnJywgKHZhbHVlID09PSB0cnVlICYmICcjMjhhNTRjJykgfHxcbiAgICAgICAgKHZhbHVlID09PSBmYWxzZSAmJiAnI2U0MjExMicpIHx8XG4gICAgICAgIGlzTGlrZU51bGwgJiYgJ3doaXRlJyB8fCAnJywgdGl0bGUsIGRpc3BsYXlWYWx1ZSk7XG59KTtcbmZ1bmN0aW9uIGdldExhcmdlTnVtYmVyVGl0bGUobnVtYmVyKSB7XG4gICAgcmV0dXJuIG51bWJlciA+IDk0NjcwMjgwMDAwMCA/XG4gICAgICAgICdNaWxsaXNlY29uZHMgPiBVbml4IGVwb2NoOlxcbicgKyAobmV3IERhdGUobnVtYmVyKS50b0xvY2FsZVN0cmluZygpKSA6XG4gICAgICAgICdTZWNvbmRzID4gVW5peCBlcG9jaDpcXG4nICsgKG5ldyBEYXRlKG51bWJlciAqIDEwMDApLnRvTG9jYWxlU3RyaW5nKCkpO1xufVxuY29uc3QgbGlua1ZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0Njk3OFszXSwgKCkgPT4gY29weVRleHQodmFsdWUpLCB2YWx1ZSwgdmFsdWUpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyNDY5Nzg6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjc1JTtmbGV4OjEgMSAxMGVtO2NvbG9yOiMxMTExMTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1zaW1wbGUtbGFiZWxcIl0sIFtcInN0eWxlLmN1cnNvclwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBcInN0eWxlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJjdXJzb3I6cG9pbnRlcjtcIl0sIFtcImNsYXNzXCIsIFwiaG92ZXItYmctd2FybmluZyBhY3RpdmUtYmctZW5lcmdpemVkXCJdLCBbXCJtb3VzZWRvd25cIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcIm1vdXNldXBcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcInN0eWxlLmJhY2tncm91bmQtY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJzdHlsZVwiXSwgW1wic3R5bGUuY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgXCJzdHlsZVwiXSwgW1widGl0bGVcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dLCBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1widGFyZ2V0XCIsIFwiX2JsYW5rXCJdLCBbXCJjbGFzc1wiLCBcImhvdmVyLWJnLXdhcm5pbmcgYWN0aXZlLWJnLWVuZXJnaXplZFwiXSwgW1widGl0bGVcIiwgXCJ0YXAgdG8gY29weVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBsZXRQcm9wLCBzdGF0ZSwgc3RhdGVzLCB0YWcsIHdhdGNoIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBkdW1wT2JqZWN0ID0gdGFnKCh7IC8vIGR1bXBPYmplY3RcbmtleSwgc2hvd0tpZHMsIHNob3csIHNob3dMZXZlbHMsIHZhbHVlLCBzaG93QWxsLCBvbkhlYWRlckNsaWNrLCBmb3JtYXRDaGFuZ2UsIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICBsZXQgc2hvd0xvd2VyID0gdW5kZWZpbmVkO1xuICAgIGxldCBtYXhpbWl6ZSA9IGZhbHNlO1xuICAgIGNvbnN0IG1heGltaXplSWQgPSBzdGF0ZSgoKSA9PiAnbWF4aW1pemUtZHVtcC0nICsgcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvd0xvd2VyLCBtYXhpbWl6ZSB9XSA9IGdldCh7IHNob3dMb3dlciwgbWF4aW1pemUgfSkpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93S2lkc10gPSBnZXQoc2hvd0tpZHMpKTtcbiAgICB3YXRjaC5ub0luaXQoW3Nob3ddLCAoW3Nob3ddKSA9PiBzaG93TG93ZXIgPSBzaG93KTtcbiAgICB3YXRjaC5ub0luaXQoW3Nob3dBbGxdLCAoW3Nob3dBbGxdKSA9PiBzaG93TG93ZXIgPSBzaG93QWxsKTtcbiAgICBjb25zdCBjb250aW51ZUR1bXAgPSAha2V5IHx8IHNob3dLaWRzIHx8IHNob3dMb3dlciB8fCAoc2hvd0xvd2VyID09PSB1bmRlZmluZWQgJiYgc2hvd0xldmVscyA+IDApO1xuICAgIGNvbnN0IHRvZ2dsZU1heGltaXplID0gKCkgPT4ge1xuICAgICAgICBtYXhpbWl6ZSA9ICFtYXhpbWl6ZTtcbiAgICAgICAgaWYgKG1heGltaXplKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXhpbWl6ZUlkKS5zaG93TW9kYWwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbWluaW1pemUgPSAoKSA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXhpbWl6ZUlkKS5jbG9zZSgpO1xuICAgIGNvbnN0IGdldEhlYWQgPSAoYWxsb3dNYXhpbWl6ZSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDcwMjQ0WzBdLCBzaG93TG93ZXIgPyAnYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6YmxhY2s7JyA6ICcnLCAoKSA9PiB7XG4gICAgICAgIGlmIChzaG93TG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dBbGwgPSBzaG93S2lkcyA9IHNob3dMb3dlciA9ICEoc2hvd0FsbCB8fCBzaG93S2lkcyB8fCBzaG93TG93ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNob3dLaWRzID0gc2hvd0xvd2VyID0gIXNob3dMb3dlcjtcbiAgICB9LCBrZXksIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgsIGFsbG93TWF4aW1pemUgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDcwMjQ0WzFdLCB0b2dnbGVNYXhpbWl6ZSkpO1xuICAgIGNvbnN0IGdldER1bXBCb2R5ID0gKGFsbG93TWF4aW1pemUpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3MDI0NFsyXSwgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NzAyNDRbM10sICF2YWx1ZSB8fCB0eXBlb2YgKHZhbHVlKSAhPT0gJ29iamVjdCcgPyAnZmxleDogMSAxIDEwZW07JyA6ICdmbGV4LWdyb3c6MTsnLCBkdW1wKHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGtleSxcbiAgICAgICAgc2hvdzogc2hvd0xvd2VyLFxuICAgICAgICBzaG93QWxsLFxuICAgICAgICBzaG93TGV2ZWxzOiBzaG93TGV2ZWxzIC0gMSxcbiAgICAgICAgc2hvd0tpZHM6IHNob3dBbGwgfHwgc2hvd0tpZHMsXG4gICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgfSkpLmtleShrZXkpKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3MDI0NFs0XSwga2V5ICYmIGdldEhlYWQoYWxsb3dNYXhpbWl6ZSksIGNvbnRpbnVlRHVtcCAmJiBnZXREdW1wQm9keShhbGxvd01heGltaXplKSwgbWF4aW1pemVJZCwgbWF4aW1pemUgJiYgZ2V0SGVhZChmYWxzZSksIG1heGltaXplICYmIGdldER1bXBCb2R5KGZhbHNlKSwgbWluaW1pemUpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDcwMjQ0OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1vYmplY3QtbGFiZWxcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwic3VwXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwib3BhY2l0eTo4MCU7Zm9udC1zaXplOjc1JTtwYWRkaW5nLWxlZnQ6MC40ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ7XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ9XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JvcmRlcjoxcHggc29saWQgd2hpdGU7Ym9yZGVyLXRvcC13aWR0aDozcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7XCJdXSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLW9iamVjdC1ib2R5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSByZWN1cnNlIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1vYmplY3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDogMSAxIDEwZW07dGV4dC1hbGlnbjpsZWZ0O1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLW9iamVjdC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBtYXhpbWl6ZSAtLT5cIiB9LCB7IFwibm5cIjogXCJkaWFsb2dcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOjBcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcImR1bXAtZGlhbG9nXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJ2YXIgciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7KHIudG9wPD1ldmVudC5jbGllbnRZJiZldmVudC5jbGllbnRZPD1yLnRvcCtyLmhlaWdodCYmci5sZWZ0PD1ldmVudC5jbGllbnRYJiZldmVudC5jbGllbnRYPD1yLmxlZnQrci53aWR0aCkgfHwgdGhpcy5jbG9zZSgpXCJdLCBbXCJkcmFnc3RhcnRcIiwgXCJjb25zdCB7ZSxkdCx0fSA9IHt0OnRoaXMsZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXJ9O2NvbnN0IGQ9dC5kcmFnPXQuZHJhZ3x8e3g6MCx5OjB9O2QuaW5pdFg9ZC54O2Quc3RhcnRYPWV2ZW50LmNsaWVudFgtdC5vZmZzZXRMZWZ0O2Quc3RhcnRZPWV2ZW50LmNsaWVudFktdC5vZmZzZXRUb3A7dC5vbmRyYWdvdmVyPWUudGFyZ2V0Lm9uZHJhZ292ZXI9KGUpPT5lLnByZXZlbnREZWZhdWx0KCk7ZHQuZWZmZWN0QWxsb3dlZD0nbW92ZSc7ZHQuZHJvcEVmZmVjdD0nbW92ZSdcIl0sIFtcImRyYWdcIiwgXCJjb25zdCB7dCxlLGR0LGR9PXtlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2ZlcixkOnRoaXMuZHJhZ307IGlmKGUuY2xpZW50WD09PTApIHJldHVybjtkLnggPSBkLnggKyBlLm9mZnNldFggLSBkLnN0YXJ0WDsgZC55ID0gZC55ICsgZS5vZmZzZXRZIC0gZC5zdGFydFk7IHRoaXMuc3R5bGUubGVmdCA9IGQueCArICdweCc7IHRoaXMuc3R5bGUudG9wID0gZC55KydweCc7XCJdLCBbXCJkcmFnZW5kXCIsIFwiY29uc3Qge3QsZSxkfT17dDp0aGlzLGU6ZXZlbnQsZDp0aGlzLmRyYWd9O2lmIChkLmluaXRYID09PSBkLngpIHtkLng9ZC54K2Uub2Zmc2V0WC0oZC5zdGFydFgtZC54KTtkLnk9ZC55K2Uub2Zmc2V0WS0oZC5zdGFydFktZC55KTt0aGlzLnN0eWxlLnRyYW5zZm9ybT10cmFuc2xhdGUzZChkLngrJ3B4JywgZC55KydweCcsIDApfTt0aGlzLmRyYWdnYWJsZT1mYWxzZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJVwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlIG9iamVjdFwiIH1dIH1dIH1dIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBjb3B5VGV4dCB9IGZyb20gXCIuL2NvcHlUZXh0LmZ1bmN0aW9uXCI7XG5leHBvcnQgY29uc3QgY29udHJvbFBhbmVsID0gdGFnKCh7IHZhbHVlLCBmb3JtYXQsIHNob3dBbGwsIGZvcm1hdENoYW5nZSwgc2hvd0FsbENoYW5nZSwgfSkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NDA4MzNbMF0sICFmb3JtYXQgfHwgZm9ybWF0ID09PSAnZmxleCcgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDQwODMzWzFdLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIiArXG4gICAgICAgIChzaG93QWxsID8gJ2JhY2tncm91bmQtY29sb3I6IzMzY2Q1ZjsnIDogJ2JhY2tncm91bmQtY29sb3I6IzQ0NDQ0NCcpLCAoKSA9PiBzaG93QWxsQ2hhbmdlKHNob3dBbGwgPSAhc2hvd0FsbCkpLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIiArXG4gICAgICAgICghZm9ybWF0IHx8IGZvcm1hdCA9PT0gJ2ZsZXgnID8gJ2JhY2tncm91bmQtY29sb3I6IzMzY2Q1ZjsnIDogJ2JhY2tncm91bmQtY29sb3I6IzQ0NDQ0NCcpLCAoKSA9PiBmb3JtYXRDaGFuZ2UoZm9ybWF0ID0gJ2ZsZXgnKSwgXCJtYXJnaW46MXB4O2JvcmRlci1yYWRpdXM6NXB4O2NvbG9yOndoaXRlO2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXg7cGFkZGluZy1sZWZ0OjAuMmVtO3BhZGRpbmctcmlnaHQ6MC4yZW07XCIgK1xuICAgICAgICAoZm9ybWF0ID09PSAnanNvbicgPyAnYmFja2dyb3VuZC1jb2xvcjojMzNjZDVmOycgOiAnYmFja2dyb3VuZC1jb2xvcjojNDQ0NDQ0JyksICgpID0+IGZvcm1hdENoYW5nZShmb3JtYXQgPSAnanNvbicpLCAoKSA9PiBjb3B5QXNKc29uVGV4dCh2YWx1ZSkpO1xufSk7XG5mdW5jdGlvbiBjb3B5QXNKc29uVGV4dCh2YWx1ZSkge1xuICAgIGNvbnN0IHRleHQgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMik7XG4gICAgY29weVRleHQodGV4dCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDQwODMzOiBbW3sgXCJublwiOiBcInN0eWxlXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRpYWxvZy5kdW1wLWRpYWxvZzo6YmFja2Ryb3Age1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpOyAvKiBTZXQgYSBzZW1pLXRyYW5zcGFyZW50IGJsYWNrIGJhY2tncm91bmQgKi9cXG4gICAgICB9XFxuXFxuICAgICAgLmNoaWxkLW1hcmdpbi14eHMge21hcmdpbjowLjJlbTt9XFxuICAgICAgXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLmhvdmVyLWJnLXdhcm5pbmc6aG92ZXIge2JhY2tncm91bmQtY29sb3I6I2ZjZjhlM31cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuaG92ZXItYmctYmFsYW5jZWQ6aG92ZXIge2JhY2tncm91bmQtY29sb3I6IzMzY2Q1Zn1cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuYWN0aXZlLWJnLWVuZXJnaXplZDphY3RpdmUge2JhY2tncm91bmQtY29sb3I6I2ZmYzkwMH1cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuYmctZGFyayB7YmFja2dyb3VuZC1jb2xvcjojNDQ0NDQ0fVxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC5iZy1iYWxhbmNlZCB7YmFja2dyb3VuZC1jb2xvcjojMzNjZDVmfVxcbiAgICAgIFxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1vYmplY3Qge21hcmdpbjowLjJlbTtwYWRkaW5nOjAuMmVtO292ZXJmbG93OmF1dG87ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO31cXG4gICAgICAudGFnZ2VkanMtZHVtcCAudGFnZ2VkanMtb2JqZWN0LWxhYmVsIHtcXG4gICAgICAgIHBhZGRpbmc6MC4yZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZvbnQtc2l6ZTo2NSU7Y29sb3I6d2hpdGU7XFxuICAgICAgICBib3JkZXItY29sb3I6d2hpdGU7ZmxleC1ncm93OjE7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzODdlZjU7XFxuICAgICAgfVxcblxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1zaW1wbGUtbGFiZWwge1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6YmxhY2s7Zm9udC1zaXplOjY1JTtib3JkZXItY29sb3I6d2hpdGU7bGluZS1oZWlnaHQ6IDk1JTtmb250LXdlaWdodDpib2xkO1xcbiAgICAgIH1cXG5cXG4gICAgICAudGFnZ2VkanMtZHVtcCAudGFnZ2VkanMtb2JqZWN0LWJvZHktd3JhcCB7XFxuICAgICAgICBkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXBcXG4gICAgICB9XFxuXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLW9iamVjdC13cmFwIHtcXG4gICAgICAgIGZvbnQtc2l6ZTo5MCU7Y29sb3I6IzExMTExMTtiYWNrZ3JvdW5kLWNvbG9yOiNkOWVkZjc7Ym9yZGVyOjFweCBzb2xpZCBibGFjaztib3JkZXItcmFkaXVzOjVweDtmbGV4LWRpcmVjdGlvbjogY29sdW1uO2Rpc3BsYXk6ZmxleDtcXG4gICAgICB9XFxuICAgICAgXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLWFycmF5LWxhYmVsIHtcXG4gICAgICAgIHBhZGRpbmc6MC4yZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZsZXgtZ3JvdzoxO2ZvbnQtc2l6ZTo2NSU7Ym9yZGVyLWNvbG9yOndoaXRlO2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6I2VmNDczYTtcXG4gICAgICB9XFxuXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLWFycmF5LWJvZHkge1xcbiAgICAgICAgdGV4dC1hbGlnbjpsZWZ0O2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDttYXJnaW46MC4yZW07Z2FwOjAuMmVtXFxuICAgICAgfVxcbiAgICAgIFxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1hcnJheS13cmFwIHtcXG4gICAgICAgIGNvbG9yOiMxMTExMTE7YmFja2dyb3VuZC1jb2xvcjojZjJkZWRlO2JvcmRlcjoxcHggc29saWQgYmxhY2s7Ym9yZGVyLXJhZGl1czo1cHg7ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtkaXNwbGF5OmZsZXhcXG4gICAgICB9XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7bGluZS1oZWlnaHQ6IDkwJTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwb3NpdGlvbjpyZWxhdGl2ZTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7Zm9udC1zaXplOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTE4cHg7cmlnaHQ6LTZweFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy1iYWxhbmNlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJmbGV4XCIgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy1iYWxhbmNlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJqc29uXCIgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIl0sIFtcImNsYXNzXCIsIFwiYmctZGFyayBob3Zlci1iZy1iYWxhbmNlZCBhY3RpdmUtYmctZW5lcmdpemVkXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvcHlcIiB9XSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImNsYXNzXCIsIFwiaG92ZXItYmctYmFsYW5jZWRcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJ0aXRsZVwiLCBcImhpZGUvc2hvdyBhbGwgc3ViIG9iamVjdHNcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GBXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBvbkluaXQsIHRhZywgbGV0UHJvcCwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wQXJyYXkgfSBmcm9tIFwiLi9kdW1wQXJyYXkudGFnXCI7XG5pbXBvcnQgeyBkdW1wU2ltcGxlIH0gZnJvbSBcIi4vZHVtcFNpbXBsZS50YWdcIjtcbmltcG9ydCB7IGR1bXBPYmplY3QgfSBmcm9tIFwiLi9kdW1wT2JqZWN0LnRhZ1wiO1xuaW1wb3J0IHsgY29udHJvbFBhbmVsIH0gZnJvbSBcIi4vY29udHJvbFBhbmVsLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IGR1bXAgPSB0YWcoKHsgLy8gZHVtcCB0YWdcbmtleSwgdmFsdWUsIHNob3dLaWRzID0gZmFsc2UsIHNob3dMZXZlbHMgPSAtMSwgc2hvd0FsbCA9IGZhbHNlLCBmb3JtYXQgPSAnZmxleCcsIGZvcm1hdENoYW5nZSA9IHggPT4gZm9ybWF0ID0geCwgaXNSb290RHVtcCA9IHRydWUsIG9uSGVhZGVyQ2xpY2ssIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICBpZiAoaXNSb290RHVtcCAmJiBhbGxvd01heGltaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsb3dNYXhpbWl6ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGlzT2JqZWN0ID0gKCkgPT4gdmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBPYmplY3Q7XG4gICAgY29uc3QgdHlwaW5nID0gdmFsdWUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgKHZhbHVlKTtcbiAgICBsZXQgc2hvdyA9IGZhbHNlO1xuICAgIGxldFByb3AoZ2V0ID0+IFtmb3JtYXRdID0gZ2V0KGZvcm1hdCkpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93QWxsXSA9IGdldChzaG93QWxsKSk7XG4gICAgbGV0UHJvcChnZXQgPT4gW3Nob3dMZXZlbHNdID0gZ2V0KHNob3dMZXZlbHMpKTtcbiAgICBsZXQgYXJyYXlWaWV3ID0gdW5kZWZpbmVkO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvdywgYXJyYXlWaWV3IH1dID0gZ2V0KHsgc2hvdywgYXJyYXlWaWV3IH0pKTtcbiAgICBvbkluaXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBsZXZlbHNEZWZpbmVkID0gKHNob3dMZXZlbHMgPj0gMCAmJiBzaG93TGV2ZWxzKTtcbiAgICAgICAgLy8gZGV0ZWN0IGF1dG8gbGV2ZWxzIChkZWZhdWx0KSBhbmQgaWYgb2JqZWN0IGxldHMgb25seSBzaG93IDIgbGV2ZWxzIGRlZXBcbiAgICAgICAgY29uc3QgYXV0b1Nob3dPYmplY3RMZXZlbHMgPSBzaG93TGV2ZWxzID09PSAtMSAmJiAha2V5ICYmIGlzT2JqZWN0KCk7XG4gICAgICAgIHNob3dMZXZlbHMgPSBsZXZlbHNEZWZpbmVkIHx8IChhdXRvU2hvd09iamVjdExldmVscyA/IDIgOiAwKTtcbiAgICAgICAgaWYgKHNob3dMZXZlbHMgPiAwKSB7XG4gICAgICAgICAgICBzaG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qIElGIDE6IHVuZGVmaW5lZCBFTFNFIGdvdG8gc2ltcGxlVGVtcGxhdGUgKi9cbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBkdW1wU2ltcGxlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHR5cGluZyxcbiAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyogSUYgMjogc2ltcGxlIHZhbHVlIEVMU0UgZ290byBvYmplY3RUZW1wbGF0ZSAqL1xuICAgIGlmIChbJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ3N0cmluZyddLmluY2x1ZGVzKHR5cGluZykpIHtcbiAgICAgICAgcmV0dXJuIGR1bXBTaW1wbGUoeyBrZXk6IGtleSwgdmFsdWUsIG9uSGVhZGVyQ2xpY2ssIGV2ZXJ5U2ltcGxlVmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRPYmplY3RUZW1wbGF0ZSh7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzaG93S2lkcyxcbiAgICAgICAga2V5LFxuICAgICAgICBvbkhlYWRlckNsaWNrLFxuICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICBmb3JtYXQsXG4gICAgICAgIGlzUm9vdER1bXAsXG4gICAgICAgIHNob3dBbGwsXG4gICAgICAgIHNob3dBbGxDaGFuZ2U6ICh4KSA9PiBzaG93QWxsID0geCxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICBzaG93LFxuICAgICAgICBzaG93TGV2ZWxzLFxuICAgICAgICBhbGxvd01heGltaXplLFxuICAgIH0pO1xufSk7XG5sZXQgZHVtcENvdW50ID0gMDtcbmNvbnN0IGdldE9iamVjdFRlbXBsYXRlID0gKHsgdmFsdWUsIHNob3dLaWRzLCBrZXksIG9uSGVhZGVyQ2xpY2ssIGV2ZXJ5U2ltcGxlVmFsdWUsIGZvcm1hdCwgaXNSb290RHVtcCwgc2hvd0FsbCwgc2hvd0FsbENoYW5nZSwgZm9ybWF0Q2hhbmdlLCBzaG93LCBzaG93TGV2ZWxzLCBhbGxvd01heGltaXplLCB9KSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGlmICghc2hvd0tpZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMDYxODhbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkdW1wU2ltcGxlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6ICdudWxsJyxcbiAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkodmFsdWUpOyAvLyAoIWZvcm1hdCB8fCBmb3JtYXQ9PT0nZmxleCcpICYmICgodmFsdWUgYXMgYW55KS5wdXNoICYmICh2YWx1ZSBhcyBhbnkpLnBvcClcbiAgICBjb25zdCBnZXRBcnJheUR1bXAgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBkdW1wQXJyYXkoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBzaG93LFxuICAgICAgICAgICAgLy8gYXJyYXlWaWV3LFxuICAgICAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgICAgIHNob3dLaWRzLFxuICAgICAgICAgICAgc2hvd0xldmVscyxcbiAgICAgICAgICAgIGZvcm1hdENoYW5nZSxcbiAgICAgICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGdldE9iamVjdER1bXAgPSAoKSA9PiBkdW1wT2JqZWN0KHtcbiAgICAgICAga2V5LFxuICAgICAgICBzaG93LFxuICAgICAgICAvLyBzaG93Q2hhbmdlOiB4ID0+IHNob3dDaGFuZ2VWYWx1ZShzaG93ID0geCksXG4gICAgICAgIHNob3dLaWRzLFxuICAgICAgICBzaG93TGV2ZWxzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICBvbkhlYWRlckNsaWNrLFxuICAgICAgICBhbGxvd01heGltaXplLFxuICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgIH0pO1xuICAgIGNvbnN0IGdldEpzb25EdW1wID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzA2MTg4WzFdLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMikpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMDYxODhbMl0sIGB0YWdnZWRqcy1kdW1wLSR7KytkdW1wQ291bnR9YCwgaXNSb290RHVtcCAmJiBjb250cm9sUGFuZWwoe1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZm9ybWF0LFxuICAgICAgICBzaG93QWxsLFxuICAgICAgICBzaG93QWxsQ2hhbmdlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgfSksIChmb3JtYXQgPT09ICdqc29uJyAmJiBnZXRKc29uRHVtcCgpKSB8fCAoaXNBcnJheSA/IGdldEFycmF5RHVtcCgpIDogZ2V0T2JqZWN0RHVtcCgpKSk7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczMwNjE4ODogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJubyBraWRzXCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCU7aGVpZ2h0OjI1dmg7bWluLWhlaWdodDo0MDBweDtjb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO1wiXSwgW1wiZGlzYWJsZWRcIl0sIFtcIndyYXBcIiwgXCJvZmZcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLWR1bXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcywgc3RhdGUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGR1bXAgfSBmcm9tIFwiLi9kdW1wXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IGR1bXBDb250ZW50ID0gdGFnKCgpID0+IHtcbiAgICBsZXQgdXNlckpzb25TdHJpbmcgPSAnJztcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGxldCB1c2VySnNvbiA9ICcnO1xuICAgIGxldCBiYWRFdmFsID0gZmFsc2U7XG4gICAgc3RhdGVzKGdldCA9PiBbeyB1c2VySnNvblN0cmluZywgcmVuZGVyQ291bnQsIHVzZXJKc29uLCBiYWRFdmFsIH1dID0gZ2V0KHsgdXNlckpzb25TdHJpbmcsIHJlbmRlckNvdW50LCB1c2VySnNvbiwgYmFkRXZhbCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICAvLyBjb25zdCB1c2VySnNvbiA9IEpTT04ucGFyc2UodXNlckpzb25TdHJpbmcpXG4gICAgY29uc3QgY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHVzZXJKc29uU3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdXNlckpzb24gPSBzYW5kYm94RXZhbCh1c2VySnNvblN0cmluZywge30pO1xuICAgICAgICAgICAgdXNlckpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh1c2VySnNvbiwgbnVsbCwgMik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgYmFkRXZhbCA9IHRydWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEpTT04ucGFyc2UodXNlckpzb25TdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHVzZXJKc29uID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZXJyKS5yZWR1Y2UoKGEsIGtleSkgPT4gKGFba2V5XSA9IGVycltrZXldKSAmJiBhIHx8IGEsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2FtcGxlRHVtcCA9IHN0YXRlKCgpID0+ICh7XG4gICAgICAgIHNob3dMZXZlbHM6IDE1LFxuICAgICAgICBzaG93QWxsOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdGVzdDoge1xuICAgICAgICAgICAgICAgIGFub3RoZXJPbmU6IDIyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJyYXlUZXN0OiBbe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc29tZXRoaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgc3RyZWV0OiAnNDM2MScgfSxcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbiB0aGlzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgc3RyZWV0OiAnMjIzNScgfSxcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd3b3JsZCcsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB7IHN0cmVldDogJzQ3ODUnIH0sXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTgzNjMyWzBdLCBjaGFuZ2UsIHVzZXJKc29uID09PSBcIlwiID8gXCJcIiA6IHVzZXJKc29uU3RyaW5nLCB1c2VySnNvbiA9PT0gXCJcIiA/IFwiXCIgOiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxODM2MzJbMV0sIGR1bXAoe1xuICAgICAgICB2YWx1ZTogdXNlckpzb25cbiAgICB9KSksIGR1bXAoc2FtcGxlRHVtcCksIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdkdW1wQ29udGVudCcgfSkpO1xufSk7XG4vLyBleGVjdXRlIHNjcmlwdCBpbiBwcml2YXRlIGNvbnRleHRcbmZ1bmN0aW9uIHNhbmRib3hFdmFsKHNyYywgY3R4KSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG4gICAgY3R4ID0gbmV3IFByb3h5KGN0eCwgeyBoYXM6ICgpID0+IHRydWUgfSk7XG4gICAgbGV0IGZ1bmMgPSAobmV3IEZ1bmN0aW9uKFwid2l0aCh0aGlzKSB7IHJldHVybiAoXCIgKyBzcmMgKyBcIil9XCIpKTtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGN0eCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTgzNjMyOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDthbGlnbi1pdGVtOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtnYXA6LjVlbTtwYWRkaW5nOi41ZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtaW4td2lkdGg6MzAwcHg7bWluLWhlaWdodDo0MDBweDtmbGV4OjFcIl0sIFtcImlkXCIsIFwidGFnZ2VkanMtZHVtcC11c2VyLXRleHRhcmVhXCJdLCBbXCJ3cmFwXCIsIFwib2ZmXCJdLCBbXCJwbGFjZWhvbGRlclwiLCBcInBhc3RlIGpzb24gaGVyZVwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1heC13aWR0aDo5MDBweFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDoxO21pbi13aWR0aDoxMTBweDt3aWR0aDoxMDAlO21heC13aWR0aDo5MDBweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjUpO21pbi13aWR0aDozMDBweFwiXSwgW1wiaWRcIiwgXCJ0YWdnZWRqcy1kdW1wLXVzZXItcmVzdWx0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHRhZywgVmFsdWVTdWJqZWN0LCBzdGF0ZSwgc3RhdGVzLCBzdWJzY3JpYmUsIFN1YmplY3QsIGdldElubmVySFRNTCwgZGl2LCBpbnB1dCwgc2VsZWN0LCBvcHRpb24gfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGR1bXBDb250ZW50IH0gZnJvbSBcIi4vZHVtcENvbnRlbnQudGFnXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgZnggfSBmcm9tIFwidGFnZ2VkanMtYW5pbWF0ZS1jc3NcIjtcbmV4cG9ydCBjb25zdCB0ZXN0U3RhZ2dlckJ5ID0gMjA7XG5jb25zdCBvdXRlckh0bWwgPSAoc3RhZ2dlckJ5ID0gMTApID0+IHtcbiAgICBjb25zdCBpbm5lckhUTUwgPSBnZXRJbm5lckhUTUwoKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzBdLCBmeCh7IHN0YWdnZXI6IHN0YWdnZXJCeSwgZHVyYXRpb246ICcuMXMnIH0pLCBpbm5lckhUTUwpLmFjY2VwdElubmVySFRNTChpbm5lckhUTUwpO1xufTtcbmV4cG9ydCBjb25zdCBjb25jYXRTdHlsZXMgPSB0YWcoKGlubmVySFRNTCkgPT4ge1xuICAgIGNvbmNhdFN0eWxlcy51cGRhdGVzKHggPT4gW2lubmVySFRNTF0gPSB4KTtcbiAgICBsZXQgd2lkdGggPSAxO1xuICAgIGxldCBib3JkZXJDb2xvciA9ICd3aGl0ZSc7XG4gICAgcmV0dXJuIGRpdihkaXYoe1xuICAgICAgICBpZDogXCJkeW5hbWljLWJvcmRlci1lbGVtZW50XCIsXG4gICAgICAgIHN0eWxlOiBfID0+IGBib3JkZXItd2lkdGg6JHt3aWR0aH1weDtib3JkZXItY29sb3I6JHtib3JkZXJDb2xvcn07Ym9yZGVyLXN0eWxlOnNvbGlkO2BcbiAgICB9LCBpbm5lckhUTUwpLCBkaXYoJ2JvcmRlcldpZHRoOicsIGlucHV0KHtcbiAgICAgICAgaWQ6IFwiZHluYW1pYy1ib3JkZXItd2lkdGhcIixcbiAgICAgICAgdHlwZTogXCJyYW5nZVwiLFxuICAgICAgICBtaW46IFwiMFwiLFxuICAgICAgICBtYXg6IFwiMTBcIixcbiAgICAgICAgc3RlcDogXCIxXCIsXG4gICAgICAgIHZhbHVlOiBfID0+IHdpZHRoLFxuICAgICAgICBvbkNoYW5nZTogZXZlbnQgPT4gd2lkdGggPSBOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgIH0pLCAnIC0gJywgXyA9PiB3aWR0aCwgJ3B4JyksIGRpdignYm9yZGVyQ29sb3I6Jywgc2VsZWN0KHtcbiAgICAgICAgaWQ6IFwiZHluYW1pYy1ib3JkZXItY29sb3JcIixcbiAgICAgICAgb25DaGFuZ2U6IGV2ZW50ID0+IGJvcmRlckNvbG9yID0gZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgfSwgb3B0aW9uKHsgdmFsdWU6IFwiXCIsIHNlbGVjdGVkOiBfID0+IGJvcmRlckNvbG9yID09PSAnJyB9KSwgb3B0aW9uKHsgdmFsdWU6IFwiYmxhY2tcIiwgc2VsZWN0ZWQ6IF8gPT4gYm9yZGVyQ29sb3IgPT09ICdibGFjaycgfSwgJ2JsYWNrJyksIG9wdGlvbih7IHZhbHVlOiBcImJsdWVcIiwgc2VsZWN0ZWQ6IF8gPT4gYm9yZGVyQ29sb3IgPT09ICdibHVlJyB9LCAnYmx1ZScpLCBvcHRpb24oeyB2YWx1ZTogXCJ3aGl0ZVwiLCBzZWxlY3RlZDogXyA9PiBib3JkZXJDb2xvciA9PT0gJ3doaXRlJyB9LCAnd2hpdGUnKSkpKTtcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnQgPSB0YWcoKCkgPT4ge1xuICAgIGNvbnN0IHZzMCA9IHN0YXRlKCgpID0+IG5ldyBWYWx1ZVN1YmplY3QoMCkpO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IG9yYW5nZVRvZ2dsZSA9IHRydWU7XG4gICAgbGV0IGJvbGRUb2dnbGUgPSBmYWxzZTtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHN0YWdnZXJCeSA9IHRlc3RTdGFnZ2VyQnk7XG4gICAgbGV0IHNob3dIaWRlRnggPSBmYWxzZTtcbiAgICBjb25zdCBjb3VudHMgPSBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdCh7IGFkZGVkOiAwLCByZW1vdmVkOiAwIH0pKTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgICAgICByZW5kZXJDb3VudCwgb3JhbmdlVG9nZ2xlLCBib2xkVG9nZ2xlLCBjb3VudGVyLCBzaG93SGlkZUZ4LCBzdGFnZ2VyQnksXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgcmVuZGVyQ291bnQsIG9yYW5nZVRvZ2dsZSwgYm9sZFRvZ2dsZSwgY291bnRlciwgc2hvd0hpZGVGeCwgc3RhZ2dlckJ5LFxuICAgIH0pKTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIGNvbnN0IGRvbSA9IFt7XG4gICAgICAgICAgICBubjogJ2InLCBjaDogW3tcbiAgICAgICAgICAgICAgICAgICAgbm46ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgdGM6ICdiaWcnLFxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH1dO1xuICAgIGNvbnN0IGluamVjdGlvblRlc3QgPSAnPHNjcmlwdD5hbGVydChcImkgc2hvdWxkIG5ldmVyIHJ1biBidXQgYmUgc2VlbiBvbiBwYWdlXCIpPC9zY3JpcHQ+JztcbiAgICBjb25zdCBwaXBlID0gc3Vic2NyaWJlKHZzMCwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzFdLCAoKSA9PiB7XG4gICAgICAgICAgICArK2NvdW50ZXI7XG4gICAgICAgIH0sIGNvdW50ZXIsICgpID0+IHZzMC5uZXh0KHZzMC52YWx1ZSArIDEpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzJdLCBjb3VudGVyLCBwaXBlLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsICgpID0+IHNob3dIaWRlRnggPSAhc2hvd0hpZGVGeCwgc2hvd0hpZGVGeCAmJiAoaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzNdLCBmeCh7IGR1cmF0aW9uOiAnMTBtcycgfSkpKSwgc2hvd0hpZGVGeCAmJiAoaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzRdLCBmeCh7IGR1cmF0aW9uOiAnMTBtcycsIHN0YWdnZXI6IHN0YWdnZXJCeSB9KSkpLCBzaG93SGlkZUZ4ICYmIChodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NDc2NjNbNV0sIGZ4KHsgZHVyYXRpb246ICcxMG1zJywgc3RhZ2dlcjogc3RhZ2dlckJ5ICogMiB9KSkpLCBzaG93SGlkZUZ4ICYmIChvdXRlckh0bWwoc3RhZ2dlckJ5KS5pbm5lckhUTUwgPSBpbm5lckh0bWxUYWcoKSksIHN1YnNjcmliZShjb3VudHMsIGNvdW50cyA9PiBjb3VudHMuYWRkZWQpLCBzdWJzY3JpYmUoY291bnRzLCBjb3VudHMgPT4gY291bnRzLnJlbW92ZWQpLCBldmVudCA9PiBzdGFnZ2VyQnkgPSBOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKSwgY29uY2F0U3R5bGVzKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1s2XSkpLCBkdW1wQ29udGVudCgpLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY29udGVudCcgfSksIG51bWJlcmVkTm9QYXJlbnRzKCksIG51bWJlcmVkTm9QYXJlbnRzKCksIGluamVjdGlvblRlc3QsIGh0bWwuZG9tKGRvbSksIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1s3XSksIFwiM3B4IHNvbGlkIG9yYW5nZVwiLCBvcmFuZ2VUb2dnbGUgPyBcIjNweCBzb2xpZCBvcmFuZ2VcIiA6IFwiM3B4IHNvbGlkIGdyZWVuXCIsICgpID0+IG9yYW5nZVRvZ2dsZSA9ICFvcmFuZ2VUb2dnbGUsIG9yYW5nZVRvZ2dsZSwgYm9sZFRvZ2dsZSA/IHsgc3R5bGU6ICdmb250LXdlaWdodDpib2xkOycgfSA6IHt9LCAoKSA9PiBib2xkVG9nZ2xlID0gIWJvbGRUb2dnbGUsIGJvbGRUb2dnbGUgPyAndHJ1ZScgOiAnZmFsc2UnLCA1NCwgJ2hlbGxvJywgMCwgZmFsc2UsIG51bGwsIHVuZGVmaW5lZCwgdHJ1ZSwgJ3snLCAnfScsICd7JywgJ30nLCAnPGRpdj5oZWxsbzwvZGl2PicsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjb250ZW50JyB9KSk7XG59KTtcbmNvbnN0IG51bWJlcmVkTm9QYXJlbnRzID0gKCkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NDc2NjNbOF0sICd0ZXN0MCcsICd0ZXN0MScsICd0ZXN0MycpO1xufTtcbmNvbnN0IGlubmVySHRtbFRhZyA9IHRhZygoKSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1s5XSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M2NDc2NjM6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwib3V0ZXItaHRtbC1meC10ZXN0XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV0sIFtcInN0eWxlLmJvcmRlclwiLCBcIjFweCBzb2xpZCBvcmFuZ2VcIiwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmNyZWFzZSBpbnNpZGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmNyZWFzZSB2czBcIiB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS0gY29udGVudC1kZWJ1Zy10ZXN0aW5nIC0tPlwiIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicGlwZWQgc3ViamVjdCBjbGljayBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGlwZS1jb3VudGVyLWNsaWNrLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2Ugb3V0c2lkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZSBzaG93XCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC10b2dnbGUtZnhcIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidG9nZ2xlIGhpZGVzaG93IGZ4XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImFkZGVkOiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1meC1hZGRlZFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7XFxuICAgICAgICAgIHJlbW92ZWQ6IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWZ4LXJlbW92ZWRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhZ2dlckJ5OlwiIH0sIHsgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJyYW5nZVwiXSwgW1wibWluXCIsIFwiMTBcIl0sIFtcIm1heFwiLCBcIjMwMFwiXSwgW1wic3RlcFwiLCBcIjFcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMTEgfSwgbnVsbF1dIH1dIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkR1bXAgQ29udGVudFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE0IH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm9QYXJlbnRUYWdGaWVsZHNldFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJObyBQYXJlbnQgVGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE1IH1dIH0sIHsgXCJublwiOiBcImhyXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm9QYXJlbnRzVGVzdDItc3RhcnRcIl1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE2IH0sIHsgXCJublwiOiBcImhyXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm9QYXJlbnRzVGVzdDItZW5kXCJdXSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5qZWN0aW9uIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3Rpb24tdGVzdFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluamVjdGlvbiB0ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE3IH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhlbGxvLWJpZy1kb20td29ybGRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoZWxsbyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxOCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgd29ybGRcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJoZWxsby1iaWctc3RyaW5nLXdvcmxkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGVsbG8gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIHdvcmxkXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRhZ3ZhciBpbmplY3Rpb25cIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0LXRhZ3Zhci0wXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJiM1ODt0YWd2YXIwJiM1ODtcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI9PT1cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3QtcmVhZC10YWd2YXItMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjp0YWd2YSYjeDcyOzA6XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0LXRhZ3Zhci0xXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJiM1ODt0YWd2YXJ4MHgmIzU4O1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIj09PVwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdC1yZWFkLXRhZ3Zhci0xXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOnRhZ3ZhcngweDpcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3QtdGFndmFyLTJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImIzU4O3RhZ3ZhcjAmIzU4O1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIj09PVwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdC1yZWFkLXRhZ3Zhci0yXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOnRhZ3ZhJiN4NzI7MDpcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzdHlsZS1zaW1wbGUtYm9yZGVyLW9yYW5nZVwiXSwgW1wic3R5bGUuYm9yZGVyXCIsIFwiM3B4IHNvbGlkIG9yYW5nZVwiLCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic2ltcGxlIG9yYW5nZSBib3JkZXJcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzdHlsZS12YXItYm9yZGVyLW9yYW5nZVwiXSwgW1wic3R5bGUuYm9yZGVyXCIsIHsgXCJ0YWdKc1ZhclwiOiAyMCB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidmFyIG9yYW5nZSBib3JkZXJcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3R5bGUtdG9nZ2xlLWJvcmRlci1vcmFuZ2VcIl0sIFtcInN0eWxlLmJvcmRlclwiLCB7IFwidGFnSnNWYXJcIjogMjEgfSwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZ2dsZSBvcmFuZ2UgYm9yZGVyXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9nZ2xlLWJvcmRlci1vcmFuZ2VcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm9yYW5nZSB0b2dnbGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjMgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN0eWxlLXRvZ2dsZS1ib2xkXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDI0IH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidG9nZ2xlIG9yYW5nZSBib3JkZXJcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtYm9sZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDI1IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYm9sZCB0b2dnbGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjYgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaGVsbG8tc3BhY2luZy1kb20td29ybGRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjggfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIHdvcmxkc1wiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO2ZvbnQtc2l6ZTowLjhlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInplcm8gdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuMCBZb3Ugc2hvdWxkIHNlZSBcXFwiMFxcXCIgaGVyZSA9PiBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1wcm9vZiB5b3UgY2Fubm90IHNlZSBmYWxzZSB2YWx1ZXMgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZmFsc2UgdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuMSBZb3Ugc2hvdWxkIHNlZSBcXFwiXFxcIiBoZXJlID0+IFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibnVsbCB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC4yIFlvdSBzaG91bGQgc2VlIFxcXCJcXFwiIGhlcmUgPT4gXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ1bmRlZmluZWQgdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuMyBZb3Ugc2hvdWxkIHNlZSBcXFwiXFxcIiBoZXJlID0+IFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb29mIHlvdSBjYW4gc2VlIHRydWUgYm9vbGVhbnMgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidHJ1ZSB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC40IFlvdSBzaG91bGQgc2VlIFxcXCJ0cnVlXFxcIiBoZXJlID0+IFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb29mIHlvdSBjYW4gdHJ5IHRvIHVzZSB0aGUgdGFnVmFyIHN5bnRheCAtLT5cIiB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuNSBZb3Ugc2hvdWxkIHNlZSBcXFwiezIyfVxcXCIgaGVyZSA9PiBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMjJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjYgWW91IHNob3VsZCBzZWUgXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM2IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIl9fdGFnVmFyMFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCIgaGVyZSA9PiBcXFwie19fdGFnVmFyMH1cXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzaG91bGQgYmUgYSBzYWZlIHN0cmluZyBubyBodG1sJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtZG9tLXBhcnNlLTAtMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCImbHQ7ZGl2Jmd0O2hlbGxvJmx0Oy9kaXYmZ3Q7XFxcIlwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwO1xcbiAgICAgICAgaGVyZSA9PiZuYnNwO1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWRvbS1wYXJzZS0wLTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzggfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wibmFtZVwiLCBcInRlc3QtdGhlLXRlc3RlclwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGVzdCB0aGUgdGVzdGVyIC0gMFwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcIm5hbWVcIiwgXCJ0ZXN0LXRoZS10ZXN0ZXJcIl0sIFt7IFwidGFnSnNWYXJcIjogMCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRlc3QgdGhlIHRlc3RlciAtIDFcIiB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJuYW1lXCIsIFwidGVzdC10aGUtdGVzdGVyXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0ZXN0IHRoZSB0ZXN0ZXIgLSAyXCIgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIHRlc3QgdGhlIHRlc3RlcjJcXG4gICAgICBcIiB9XSwgW3sgXCJublwiOiBcImJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYmlnXCIgfV0gfV0sIFt7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbnRlbnQxXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29udGVudDJcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb250ZW50M1wiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbnRlbnQ0XCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImlubmVyIGh0bWwgdGFnXCIgfV1dIH07XG4iLCJpbXBvcnQgeyB3YXRjaCwgaHRtbCwgdGFnLCBzdGF0ZXMsIHN1YnNjcmliZSwgY2FsbGJhY2sgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCB3YXRjaFRlc3RpbmcgPSB0YWcuZGVlcFByb3BXYXRjaCgoKSA9PiAoc3RhdGVOdW0gPSAwLCBzdGF0ZU51bUNoYW5nZUNvdW50ID0gMCwgc2xvd0NoYW5nZUNvdW50ID0gMCwgc3ViamVjdENoYW5nZUNvdW50ID0gMCwgdHJ1dGhDaGFuZ2UgPSBmYWxzZSwgdHJ1dGhDaGFuZ2VDb3VudCA9IDAsIHRydXRoU3ViQ2hhbmdlQ291bnQgPSAwLCBfc3RhdGVzID0gc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICBzdGF0ZU51bSwgc3RhdGVOdW1DaGFuZ2VDb3VudCwgc2xvd0NoYW5nZUNvdW50LCBzdWJqZWN0Q2hhbmdlQ291bnQsXG4gICAgICAgIHRydXRoQ2hhbmdlLCB0cnV0aENoYW5nZUNvdW50LFxuICAgICAgICB0cnV0aFN1YkNoYW5nZUNvdW50LFxuICAgIH1dID0gZ2V0KHtcbiAgICBzdGF0ZU51bSwgc3RhdGVOdW1DaGFuZ2VDb3VudCwgc2xvd0NoYW5nZUNvdW50LCBzdWJqZWN0Q2hhbmdlQ291bnQsXG4gICAgdHJ1dGhDaGFuZ2UsIHRydXRoQ2hhbmdlQ291bnQsXG4gICAgdHJ1dGhTdWJDaGFuZ2VDb3VudCxcbn0pKSwgXyA9IHdhdGNoKFtzdGF0ZU51bV0sICgpID0+ICsrc3RhdGVOdW1DaGFuZ2VDb3VudCksIHdhdGNoUHJvcE51bVNsb3cgPSB3YXRjaC5ub0luaXQoW3N0YXRlTnVtXSwgY2FsbGJhY2soKCkgPT4gKytzbG93Q2hhbmdlQ291bnQpKSwgd2F0Y2hQcm9wTnVtU3ViamVjdCA9IHdhdGNoLmFzU3ViamVjdChbc3RhdGVOdW1dLCBjYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuICsrc3ViamVjdENoYW5nZUNvdW50O1xufSkpLCB3YXRjaFRydXRoID0gd2F0Y2gudHJ1dGh5KFt0cnV0aENoYW5nZV0sIGNhbGxiYWNrKCgpID0+ICsrdHJ1dGhDaGFuZ2VDb3VudCkpLCB3YXRjaFRydXRoQXNTdWIgPSB3YXRjaC50cnV0aHkuYXNTdWJqZWN0KFt0cnV0aENoYW5nZV0sIGNhbGxiYWNrKCh0cnV0aENoYW5nZSkgPT4ge1xuICAgICsrdHJ1dGhTdWJDaGFuZ2VDb3VudDtcbiAgICByZXR1cm4gdHJ1dGhTdWJDaGFuZ2VDb3VudDtcbn0pKSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjE4NzYxM1swXSwgc3RhdGVOdW0sICgpID0+ICsrc3RhdGVOdW0sIHN0YXRlTnVtQ2hhbmdlQ291bnQsIHNsb3dDaGFuZ2VDb3VudCwgd2F0Y2hQcm9wTnVtU2xvdywgc3ViamVjdENoYW5nZUNvdW50LCBzdWJzY3JpYmUod2F0Y2hQcm9wTnVtU3ViamVjdCksIHRydXRoQ2hhbmdlID8gJ3RydWUnIDogJ2ZhbHNlJywgd2F0Y2hUcnV0aCB8fCAnZmFsc2UnLCB0cnV0aENoYW5nZUNvdW50LCBzdWJzY3JpYmUod2F0Y2hUcnV0aEFzU3ViKSwgdHJ1dGhTdWJDaGFuZ2VDb3VudCwgKCkgPT4gdHJ1dGhDaGFuZ2UgPSAhdHJ1dGhDaGFuZ2UsIHRydXRoQ2hhbmdlID8gJ3RydWUnIDogJ2ZhbHNlJykpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczIxODc2MTM6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSB3YXRjaFRlc3RpbmcudGFnLnRzIC0tPnN0YXRlTnVtOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ3YXRjaC10ZXN0aW5nLW51bS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ3YXRjaC10ZXN0aW5nLW51bS1idXR0b25cIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKysgc3RhdGVOdW1cIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhdGVOdW1DaGFuZ2VDb3VudDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3RhdGVOdW1DaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYQgc2xvd0NoYW5nZUNvdW50XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn42ELXNsb3dDaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIndhdGNoUHJvcE51bVNsb3c6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfjYQtd2F0Y2hQcm9wTnVtU2xvd1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYTigI3wn5+rIHN1YmplY3RDaGFuZ2VDb3VudFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+NhOKAjfCfn6stc3ViamVjdENoYW5nZUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKHdhdGNoUHJvcE51bVN1YmplY3Q6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfjYTigI3wn5+rLXdhdGNoUHJvcE51bVN1YmplY3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+mtyB0cnV0aENoYW5nZVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty10cnV0aENoYW5nZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNpbXBsZSB0cnV0aFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3YXRjaFRydXRoOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6a3LXdhdGNoVHJ1dGhcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIodHJ1dGhDaGFuZ2VDb3VudDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty10cnV0aENoYW5nZUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRydXRoIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid2F0Y2hUcnV0aEFzU3ViOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6a3LXdhdGNoVHJ1dGhBc1N1YlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIodHJ1dGhTdWJDaGFuZ2VDb3VudDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty10cnV0aFN1YkNoYW5nZUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKVwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfprctdHJ1dGhDaGFuZ2UtYnV0dG9uXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6a3IHRvZ2dsZSB0byBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IHRhZywgU3ViamVjdCwgVmFsdWVTdWJqZWN0LCBzdWJzY3JpYmVXaXRoLCBzdWJzY3JpYmUsIHNwYW4sIGRpdiwgYnV0dG9uLCBmaWVsZHNldCwgbGVnZW5kIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlQXR0cmlidXRlcyA9IHRhZygoKSA9PiB7XG4gICAgY29uc3Qgc3ViQ29sb3IkID0gbmV3IFN1YmplY3QoKTtcbiAgICBjb25zdCBzdWJDb2xvclB1cnBsZU9yYW5nZSQgPSBuZXcgVmFsdWVTdWJqZWN0KCdwdXJwbGUnKTtcbiAgICBjb25zdCBzdWJDb2xvckdyZWVuWWVsbG93JCA9IG5ldyBWYWx1ZVN1YmplY3QoJ2dyZWVuJyk7XG4gICAgbGV0IHNob3VsZEhpZGVBdHRyaWJ1dGVzID0gZmFsc2U7XG4gICAgY29uc3QgYXR0cmlidXRlQ29udGVudCA9ICgpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEhpZGVBdHRyaWJ1dGVzKVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICByZXR1cm4gZGl2KHtcbiAgICAgICAgICAgIHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO2ZvbnQtc2l6ZTowLjhlbVwiLFxuICAgICAgICAgICAgaWQ6IFwic3Vic2NyaWJlLWF0dHJpYnV0ZXMtd3JhcFwiXG4gICAgICAgIH0sIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCIgfSwgZmllbGRzZXQoeyBzdHlsZTogXCJmbGV4LWdyb3c6MVwiIH0sIGxlZ2VuZCgnc3Vic2NyaWJlIHNwZWNpYWwgYXR0cmlidXRlJyksIHNwYW4oe1xuICAgICAgICAgICAgaWQ6IFwic3Vic2NyaWJlLXN0eWxlLWRvdC1iZy1jb2xvci1jaGFuZ2VyXCIsXG4gICAgICAgICAgICBzdHlsZTogc3Vic2NyaWJlV2l0aChzdWJDb2xvciQsICdyZWQnLCAoc3ViQ29sb3IpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBiYWNrZ3JvdW5kQ29sb3I6IHN1YkNvbG9yIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCAnYmFja2dyb3VuZCBjb2xvciBjaGFuZ2VyJykpLCBmaWVsZHNldCh7IHN0eWxlOiBcImZsZXgtZ3JvdzoxXCIgfSwgbGVnZW5kKCdzdWJzY3JpYmUgc3R5bGUgYXR0cmlidXRlJyksIHNwYW4oe1xuICAgICAgICAgICAgaWQ6IFwic3Vic2NyaWJlLXN0eWxlLWJnLWNvbG9yXCIsXG4gICAgICAgICAgICBzdHlsZTogc3Vic2NyaWJlV2l0aChzdWJDb2xvciQsICdyZWQnLCBzdWJDb2xvciA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBiYWNrZ3JvdW5kLWNvbG9yOiR7c3ViQ29sb3J9YDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sICdzdWJzY3JpYmUgYmcgY29sb3InKSksIGZpZWxkc2V0KHsgc3R5bGU6IFwiZmxleC1ncm93OjFcIiB9LCBsZWdlbmQoJ3NvbWV0aW1lcyBzdWJzY3JpYmUgc3R5bGUgYXR0cmlidXRlJyksIHNwYW4oe1xuICAgICAgICAgICAgaWQ6IFwibXVsdGlwbGUtc3Vic2NyaWJlLWJnLWNvbG9yXCIsXG4gICAgICAgICAgICBzdHlsZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoc3ViQ29sb3IkLnZhbHVlID09PSAnYmx1ZScgJiZcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlKHN1YkNvbG9yUHVycGxlT3JhbmdlJCwgc3ViQ29sb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdiYWNrZ3JvdW5kLWNvbG9yOicgKyBzdWJDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoc3ViQ29sb3IkLnZhbHVlID09PSAncmVkJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZShzdWJDb2xvckdyZWVuWWVsbG93JCwgc3ViQ29sb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2JhY2tncm91bmQtY29sb3I6JyArIHN1YkNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3I6cGluazsnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAnbXVsdGlwbGUgc3Vic2NyaWJlIGJnIGNvbG9yJykpKSk7XG4gICAgfTtcbiAgICByZXR1cm4gZmllbGRzZXQoeyBzdHlsZTogXCJmbGV4LWdyb3c6MVwiIH0sIGxlZ2VuZCgnc3Vic2NyaWJlIGF0dHJpYnV0ZXMnLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBgLSBzaG91bGRIaWRlQXR0cmlidXRlczogJHtzaG91bGRIaWRlQXR0cmlidXRlc31gO1xuICAgIH0pLCBhdHRyaWJ1dGVDb250ZW50LCBidXR0b24oe1xuICAgICAgICBpZDogXCJ0b2dnbGUtY29sb3ItYnRuXCIsXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb2xvciA9IHN1YkNvbG9yJC52YWx1ZTtcbiAgICAgICAgICAgIHN1YkNvbG9yJC5uZXh0KGN1cnJlbnRDb2xvciA9PT0gJ3JlZCcgPyAnYmx1ZScgOiAncmVkJyk7XG4gICAgICAgIH1cbiAgICB9LCBgVG9nZ2xlIENvbG9yIChgLCBzdWJzY3JpYmUoc3ViQ29sb3IkKSwgJyknKSwgYnV0dG9uKHtcbiAgICAgICAgaWQ6ICd0b2dnbGUtYXR0cmlidXRlcy1idG4nLFxuICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2hvdWxkSGlkZUF0dHJpYnV0ZXMgPSAhc2hvdWxkSGlkZUF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICB9LCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzaG91bGRIaWRlQXR0cmlidXRlcyA/ICdTaG93JyA6ICdIaWRlJztcbiAgICB9LCAnIEF0dHJpYnV0ZXMnKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4gc3ViQ29sb3IkLm5leHQoJycpLFxuICAgICAgICBpZDogXCJjbGVhci1jb2xvci1idG5cIixcbiAgICAgICAgdHlwZTogJ2J1dHRvbidcbiAgICB9LCBgQ2xlYXIgQ29sb3JgKSwgYHN1YnNjcmlwdGlvbnM6IGAsIHNwYW4oeyBpZDogJ3N1YnNjcmlwdGlvbnMtY291bnQnIH0sIHN1YnNjcmliZVdpdGgoU3ViamVjdC5nbG9iYWxTdWJDb3VudCQsIFN1YmplY3QuZ2xvYmFsU3ViQ291bnQkLnZhbHVlKSkpO1xufSk7XG4iLCJpbXBvcnQgeyBkaXYsIGZpZWxkc2V0LCBoMywgaHIsIGlucHV0LCBsZWdlbmQsIGxpLCBvbCwgb3B0aW9uLCBzZWxlY3QsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgc3Vic2NyaWJlQXR0cmlidXRlcyB9IGZyb20gXCIuL3N1YnNjcmliZUF0dHJpYnV0ZXMudGFnXCI7XG5leHBvcnQgY29uc3QgYXR0cmlidXRlRGVidWcgPSB0YWcoKCkgPT4ge1xuICAgIGxldCBzZWxlY3RlZCA9ICdhJztcbiAgICBsZXQgaXNPcmFuZ2UgPSB0cnVlO1xuICAgIHJldHVybiBkaXYoaW5wdXQoe1xuICAgICAgICBpZDogXCJhdHRyLWlucHV0LWFiY1wiLFxuICAgICAgICBwbGFjZWhvbGRlcjogXCJhIGIgb3IgY1wiLFxuICAgICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiBzZWxlY3RlZCA9IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH0pLCBzZWxlY3Qoe1xuICAgICAgICBvbkNoYW5nZTogZSA9PiBzZWxlY3RlZCA9IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICBpZDogXCJzZWxlY3Qtc2FtcGxlLWRyb3AtZG93blwiXG4gICAgfSwgWydhJywgJ2InLCAnYyddLm1hcChpdGVtID0+IG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBpdGVtLFxuICAgICAgICBzZWxlY3RlZDogKCkgPT4gaXRlbSA9PSBzZWxlY3RlZFxuICAgIH0sIGl0ZW0sICcgLSAnLCBfID0+IGl0ZW0gPT0gc2VsZWN0ZWQgPyAndHJ1ZScgOiAnZmFsc2UnKSkpLCBzZWxlY3Qoe1xuICAgICAgICBvbkNoYW5nZTogZSA9PiBzZWxlY3RlZCA9IGUudGFyZ2V0LnZhbHVlLFxuICAgICAgICBpZDogXCJzZWxlY3Qtc2FtcGxlLWRyb3AtZG93bi1jbG9uZVwiXG4gICAgfSwgWydhJywgJ2InLCAnYyddLm1hcChpdGVtID0+IG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBpdGVtLFxuICAgICAgICBzZWxlY3RlZDogKCkgPT4gaXRlbSA9PSBzZWxlY3RlZFxuICAgIH0sIGl0ZW0sICcgLSAnLCBpdGVtID09IHNlbGVjdGVkID8gJ3RydWUnIDogJ2ZhbHNlJykpKSwgaHIsIGgzKCdTcGVjaWFsIEF0dHJpYnV0ZXMnKSwgZGl2KGlucHV0KHtcbiAgICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgICBpZDogXCJ0b2dnbGUtYmFja2dyb3VuZHNcIixcbiAgICAgICAgY2hlY2tlZDogKCkgPT4gaXNPcmFuZ2UgJiYgJ2NoZWNrZWQnLFxuICAgICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiBpc09yYW5nZSA9IGV2ZW50LnRhcmdldC5jaGVja2VkXG4gICAgfSksICgpID0+IGAgLSB0b2dnbGUgYmFja2dyb3VuZHM6JHtpc09yYW5nZSA/ICd0cnVlJyA6ICdmYWxzZSd9YCksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6IGZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiIH0sIG9sKGxpKGRpdih7XG4gICAgICAgIGlkOiBcImF0dHItc3R5bGUtc3RyaW5nc1wiLFxuICAgICAgICBzdHlsZTogXyA9PiAoe1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpc09yYW5nZSA/ICdvcmFuZ2UnIDogJycsXG4gICAgICAgICAgICBjb2xvcjogaXNPcmFuZ2UgPyAnYmxhY2snIDogJycsXG4gICAgICAgIH0pXG4gICAgfSwgXCJzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yPSR7J29yYW5nZSd9XCIpKSwgbGkoZGl2KHtcbiAgICAgICAgaWQ6IFwiYXR0ci1jbGFzcy1ib29sZWFuc1wiLFxuICAgICAgICBjbGFzczogKCkgPT4gKHtcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLW9yYW5nZSc6IGlzT3JhbmdlID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgJ3RleHQtYmxhY2snOiBpc09yYW5nZSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICB9LCAoKSA9PiBgY2xhc3MuYmFja2dyb3VuZC1vcmFuZ2U9JHtpc09yYW5nZX1gKSksIGxpKGRpdih7XG4gICAgICAgIGlkOiBcImF0dHItaW5saW5lLWNsYXNzXCIsXG4gICAgICAgIGNsYXNzOiAoKSA9PiBpc09yYW5nZSA/ICdiYWNrZ3JvdW5kLW9yYW5nZSB0ZXh0LWJsYWNrJyA6ICcnXG4gICAgfSwgXCJjbGFzcz0keydiYWNrZ3JvdW5kLW9yYW5nZSB0ZXh0LWJsYWNrJ31cIikpLCBsaShkaXYoe1xuICAgICAgICBpZDogXCJhdHRyLWR5bmFtaWMtaW5saW5lLWNsYXNzXCIsXG4gICAgICAgIGNsYXNzOiAoKSA9PiAndGV4dC13aGl0ZScgKyAoaXNPcmFuZ2UgPyAnIGJhY2tncm91bmQtb3JhbmdlJyA6ICcnKVxuICAgIH0sIFwiY2xhc3M9JHsnYmFja2dyb3VuZC1vcmFuZ2UnfSBidXQgYWx3YXlzIHdoaXRlXCIpKSkpLCBmaWVsZHNldCh7IHN0eWxlOiBcIm1hcmdpbi10b3A6IDFlbVwiIH0sIGxlZ2VuZCgnc3R5bGUgb2JqZWN0IGF0dHJpYnV0ZScpLCBkaXYoe1xuICAgICAgICBpZDogXCJzdHlsZS1vYmplY3QtdGVzdFwiLFxuICAgICAgICBzdHlsZTogXyA9PiAoe1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpc09yYW5nZSA/ICdvcmFuZ2UnIDogJ2xpZ2h0Z3JleScsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMTBweCcsXG4gICAgICAgICAgICBib3JkZXI6ICcycHggc29saWQgYmxhY2snLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBpc09yYW5nZSA/ICc4cHgnIDogJzRweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6IGlzT3JhbmdlID8gJzJweCAycHggNHB4IHJnYmEoMCwwLDAsMC4zKScgOiAnbm9uZSdcbiAgICAgICAgfSlcbiAgICB9LCAnU3R5bGUgb2JqZWN0IHRlc3QnKSwgZGl2KHtcbiAgICAgICAgaWQ6IFwic3R5bGUtc2V0LXByb3BlcnR5LXRlc3RcIixcbiAgICAgICAgc3R5bGU6IF8gPT4gKHtcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogaXNPcmFuZ2UgPyAncmVkJyA6ICdibHVlJyxcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgcGFkZGluZzogJzVweCcsXG4gICAgICAgICAgICAnbWFyZ2luLXRvcCc6ICcxMHB4J1xuICAgICAgICB9KVxuICAgIH0sICdzdHlsZSBwcm9wZXJ0eSB0ZXN0JykpLCBfID0+IHN1YnNjcmliZUF0dHJpYnV0ZXMoKSk7XG59KTtcbiIsImltcG9ydCB7IGRpdiwgdGFnLCBidXR0b24sIHNlbGVjdCwgb3B0aW9uLCBzcGFuLCBoMiwgcCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGJhc2ljID0gdGFnKCgpID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBsZXQgc2hvd0RpdiA9IHRydWU7XG4gICAgcmVuZGVyQ291bnQrKztcbiAgICByZXR1cm4gZGl2KGgyKCdCYXNpYyBDb21wb25lbnQnKSwgcChfID0+IGBDb3VudGVyOiAke2NvdW50ZXJ9YCksIHAoXyA9PiBgUmVuZGVyIENvdW50OiAke3JlbmRlckNvdW50fWApLCBidXR0b24oe1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiBjb3VudGVyKytcbiAgICB9LCAnSW5jcmVtZW50IENvdW50ZXInKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4gc2hvd0RpdiA9ICFzaG93RGl2XG4gICAgfSwgXyA9PiBgVG9nZ2xlIERpdiAoJHtzaG93RGl2ID8gJ0hpZGUnIDogJ1Nob3cnfSlgKSwgXyA9PiBzaG93RGl2ICYmIGJvbHRUYWcoY291bnRlcikpO1xufSk7XG5jb25zdCBib2x0VGFnID0gdGFnKChwYXJlbnRDb3VudGVyKSA9PiB7XG4gICAgbGV0IGNsaWNrQ291bnQgPSAwO1xuICAgIGxldCBjb2xvciA9ICdyZWQnO1xuICAgIGJvbHRUYWcudXBkYXRlcyh4ID0+IFtwYXJlbnRDb3VudGVyXSA9IHgpO1xuICAgIHJldHVybiBkaXYoKCkgPT4gYGNvbG9yOiAke2NvbG9yfWAsIHNlbGVjdCh7IG9uQ2hhbmdlOiBlID0+IGNvbG9yID0gZS50YXJnZXQudmFsdWUgfSwgb3B0aW9uKHsgdmFsdWU6ICdyZWQnIH0sICdyZWQnKSwgb3B0aW9uKHsgdmFsdWU6ICdncmVlbicgfSwgJ2dyZWVuJykpLCAoKSA9PiBhcnJheUJvbHRUZXN0KHBhcmVudENvdW50ZXIpLCBzcGFuKHsgc3R5bGU6IF8gPT4gJ2NvbG9yOicgKyBjb2xvciB9LCAnaGVsbG8gbXkgc3BhbiB3b3JsZCcpLCBkaXYoeyBzdHlsZTogXyA9PiAnY29sb3I6JyArIGNvbG9yIH0sICdoZWxsbyBteSBkaXYgd29ybGQnKSwgYnV0dG9uKHsgb25DbGljazogKCkgPT4gKytjbGlja0NvdW50IH0sICdjbGljayBtZScpLCBkaXYoXyA9PiBgY2xpY2sgY291bnRzICR7Y2xpY2tDb3VudH1gKSwgZGl2KF8gPT4gYHBhcmVudCBjb3VudGVyOiAke3BhcmVudENvdW50ZXJ9YCksIGRpdihfID0+IGBjb21iaW5lZCBjb3VudGVyczogJHtjbGlja0NvdW50ICsgcGFyZW50Q291bnRlcn1gKSk7XG59KTtcbmNvbnN0IGFycmF5Qm9sdFRlc3QgPSB0YWcoKHBhcmVudENvdW50ZXIpID0+IHtcbiAgICBhcnJheUJvbHRUZXN0LnVwZGF0ZXMoeCA9PiBbcGFyZW50Q291bnRlcl0gPSB4KTtcbiAgICBsZXQgaW5uZXJDb3VudGVyID0gMDtcbiAgICByZXR1cm4gW1xuICAgICAgICBkaXYoJ2hlbGxvIGFycmF5IGJvbHQgMCcpLFxuICAgICAgICBkaXYoJ2hlbGxvIGFycmF5IGJvbHQgMScpLFxuICAgICAgICBkaXYoYGlubmVyQ291bnRlcjogYCwgXyA9PiBpbm5lckNvdW50ZXIpLFxuICAgICAgICBkaXYoKCkgPT4gYHBhcmVudCBjb3VudGVyOiAke3BhcmVudENvdW50ZXJ9YCksXG4gICAgICAgIGJ1dHRvbih7IG9uQ2xpY2s6ICgpID0+ICsraW5uZXJDb3VudGVyIH0sICdpbm5lciBjb3VudGVyJylcbiAgICBdO1xufSk7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wsIEl0ZXJhdG9yICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZyA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBJdGVyYXRvciA9PT0gXCJmdW5jdGlvblwiID8gSXRlcmF0b3IgOiBPYmplY3QpLnByb3RvdHlwZSk7XG4gIHJldHVybiBnLm5leHQgPSB2ZXJiKDApLCBnW1widGhyb3dcIl0gPSB2ZXJiKDEpLCBnW1wicmV0dXJuXCJdID0gdmVyYigyKSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0gT2JqZWN0LmNyZWF0ZSgodHlwZW9mIEFzeW5jSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEFzeW5jSXRlcmF0b3IgOiBPYmplY3QpLnByb3RvdHlwZSksIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIGF3YWl0UmV0dXJuKGYpIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUodikudGhlbihmLCByZWplY3QpOyB9OyB9XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAoZ1tuXSkgeyBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyBpZiAoZikgaVtuXSA9IGYoaVtuXSk7IH0gfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxudmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgIHZhciBhciA9IFtdO1xuICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgcmV0dXJuIGFyO1xuICB9O1xuICByZXR1cm4gb3duS2V5cyhvKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2UsIGlubmVyO1xuICAgIGlmIChhc3luYykge1xuICAgICAgaWYgKCFTeW1ib2wuYXN5bmNEaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jRGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmRpc3Bvc2VdO1xuICAgICAgaWYgKGFzeW5jKSBpbm5lciA9IGRpc3Bvc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBpZiAoaW5uZXIpIGRpc3Bvc2UgPSBmdW5jdGlvbigpIHsgdHJ5IHsgaW5uZXIuY2FsbCh0aGlzKTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IH0gfTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgdmFyIHIsIHMgPSAwO1xuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChyID0gZW52LnN0YWNrLnBvcCgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIXIuYXN5bmMgJiYgcyA9PT0gMSkgcmV0dXJuIHMgPSAwLCBlbnYuc3RhY2sucHVzaChyKSwgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihuZXh0KTtcbiAgICAgICAgaWYgKHIuZGlzcG9zZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSByLmRpc3Bvc2UuY2FsbChyLnZhbHVlKTtcbiAgICAgICAgICBpZiAoci5hc3luYykgcmV0dXJuIHMgfD0gMiwgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihuZXh0LCBmdW5jdGlvbihlKSB7IGZhaWwoZSk7IHJldHVybiBuZXh0KCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgcyB8PSAxO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMgPT09IDEpIHJldHVybiBlbnYuaGFzRXJyb3IgPyBQcm9taXNlLnJlamVjdChlbnYuZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jld3JpdGVSZWxhdGl2ZUltcG9ydEV4dGVuc2lvbihwYXRoLCBwcmVzZXJ2ZUpzeCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgJiYgL15cXC5cXC4/XFwvLy50ZXN0KHBhdGgpKSB7XG4gICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC4odHN4KSR8KCg/OlxcLmQpPykoKD86XFwuW14uL10rPyk/KVxcLihbY21dPyl0cyQvaSwgZnVuY3Rpb24gKG0sIHRzeCwgZCwgZXh0LCBjbSkge1xuICAgICAgICAgIHJldHVybiB0c3ggPyBwcmVzZXJ2ZUpzeCA/IFwiLmpzeFwiIDogXCIuanNcIiA6IGQgJiYgKCFleHQgfHwgIWNtKSA/IG0gOiAoZCArIGV4dCArIFwiLlwiICsgY20udG9Mb3dlckNhc2UoKSArIFwianNcIik7XG4gICAgICB9KTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBfX2V4dGVuZHMsXG4gIF9fYXNzaWduLFxuICBfX3Jlc3QsXG4gIF9fZGVjb3JhdGUsXG4gIF9fcGFyYW0sXG4gIF9fZXNEZWNvcmF0ZSxcbiAgX19ydW5Jbml0aWFsaXplcnMsXG4gIF9fcHJvcEtleSxcbiAgX19zZXRGdW5jdGlvbk5hbWUsXG4gIF9fbWV0YWRhdGEsXG4gIF9fYXdhaXRlcixcbiAgX19nZW5lcmF0b3IsXG4gIF9fY3JlYXRlQmluZGluZyxcbiAgX19leHBvcnRTdGFyLFxuICBfX3ZhbHVlcyxcbiAgX19yZWFkLFxuICBfX3NwcmVhZCxcbiAgX19zcHJlYWRBcnJheXMsXG4gIF9fc3ByZWFkQXJyYXksXG4gIF9fYXdhaXQsXG4gIF9fYXN5bmNHZW5lcmF0b3IsXG4gIF9fYXN5bmNEZWxlZ2F0b3IsXG4gIF9fYXN5bmNWYWx1ZXMsXG4gIF9fbWFrZVRlbXBsYXRlT2JqZWN0LFxuICBfX2ltcG9ydFN0YXIsXG4gIF9faW1wb3J0RGVmYXVsdCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcbiAgX19jbGFzc1ByaXZhdGVGaWVsZEluLFxuICBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSxcbiAgX19kaXNwb3NlUmVzb3VyY2VzLFxuICBfX3Jld3JpdGVSZWxhdGl2ZUltcG9ydEV4dGVuc2lvbixcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckNsYXNzKGNyZWF0ZUltcGwpIHtcbiAgICB2YXIgX3N1cGVyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIH07XG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yRnVuYztcbiAgICByZXR1cm4gY3RvckZ1bmM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJSZW1vdmUuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5LCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEZpbmFsaXplciA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbEZpbmFsaXplcikpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsRmluYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgICAgIGlmIChfZmluYWxpemVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9maW5hbGl6ZXJzXzEgPSBfX3ZhbHVlcyhfZmluYWxpemVycyksIF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpOyAhX2ZpbmFsaXplcnNfMV8xLmRvbmU7IF9maW5hbGl6ZXJzXzFfMSA9IF9maW5hbGl6ZXJzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzICE9PSBudWxsICYmIGVycm9ycyAhPT0gdm9pZCAwID8gZXJyb3JzIDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl9maW5hbGl6ZXJzID0gKF9hID0gdGhpcy5fZmluYWxpemVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmaW5hbGl6ZXIpKSB7XG4gICAgICAgIGZpbmFsaXplcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0VGltZW91dC5hcHBseShkZWxlZ2F0ZSwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbnZhciBjb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgfVxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnN1bWVyT2JzZXJ2ZXI7XG59KCkpO1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgIW9ic2VydmVyT3JOZXh0KSB7XG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgbmV4dDogKG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yICE9PSBudWxsICYmIGVycm9yICE9PSB2b2lkIDAgPyBlcnJvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyT3JOZXh0LmVycm9yICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuZXJyb3IsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgY2FwdHVyZUVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgRU1QVFlfU1VCU0NSSVBUSU9OIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tIFwiLi9pc0Z1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IHByb3ZpZGVkIFwiICsgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyBpbnB1dCArIFwiJ1wiKSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC4gWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIFJlYWRhYmxlU3RyZWFtLCBBcnJheSwgQXN5bmNJdGVyYWJsZSwgb3IgSXRlcmFibGUuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVNjaGVkdWxlKHBhcmVudFN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCB3b3JrLCBkZWxheSwgcmVwZWF0KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XG4gICAgdmFyIHNjaGVkdWxlU3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd29yaygpO1xuICAgICAgICBpZiAocmVwZWF0KSB7XG4gICAgICAgICAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHRoaXMuc2NoZWR1bGUobnVsbCwgZGVsYXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH0sIGRlbGF5KTtcbiAgICBwYXJlbnRTdWJzY3JpcHRpb24uYWRkKHNjaGVkdWxlU3Vic2NyaXB0aW9uKTtcbiAgICBpZiAoIXJlcGVhdCkge1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IG1lcmdlQWxsIH0gZnJvbSAnLi9tZXJnZUFsbCc7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbCgxKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdEFsbC5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUFsbChjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gbWVyZ2VNYXAoaWRlbnRpdHksIGNvbmN1cnJlbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VBbGwuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4vaXNTY2hlZHVsZXInO1xuZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BSZXN1bHRTZWxlY3RvcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24obGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFNjaGVkdWxlcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzU2NoZWR1bGVyKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BOdW1iZXIoYXJncywgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnbnVtYmVyJyA/IGFyZ3MucG9wKCkgOiBkZWZhdWx0VmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUuc2NoZWR1bGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xuaW1wb3J0IHsgc3Vic2NyaWJlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvc3Vic2NyaWJlT24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBkb25lO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzRnVuY3Rpb24oaXRlcmF0b3IgPT09IG51bGwgfHwgaXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGl0ZXJhdG9yLnJldHVybikgJiYgaXRlcmF0b3IucmV0dXJuKCk7IH07XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKGlucHV0KSwgc2NoZWR1bGVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdEFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9jb25jYXRBbGwnO1xuaW1wb3J0IHsgcG9wU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdEFsbCgpKGZyb20oYXJncywgcG9wU2NoZWR1bGVyKGFyZ3MpKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXQuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4uL29ic2VydmFibGUvY29uY2F0JztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGgoKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKHZhbHVlcyk7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAoc2NoZWR1bGVyID8gY29uY2F0KHZhbHVlcywgc291cmNlLCBzY2hlZHVsZXIpIDogY29uY2F0KHZhbHVlcywgc291cmNlKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcCIsImltcG9ydCB7IHN1YnNjcmliZVdpdGgsIGh0bWwsIHRhZywgVmFsdWVTdWJqZWN0LCBzdGF0ZSwgY29tYmluZUxhdGVzdCwgd2lsbFByb21pc2UsIHN1YnNjcmliZSwgU3ViamVjdCwgaG9zdCwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBTdWJqZWN0IGFzIFJ4U3ViamVjdCwgc3RhcnRXaXRoIH0gZnJvbSBcInJ4anNcIjtcbmV4cG9ydCBjb25zdCBzdWJzY3JpcHRpb25zID0gdGFnKCgpID0+IHtcbiAgICBjb25zdCBzdWIwID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoKSk7XG4gICAgY29uc3Qgc3ViMSA9IHN0YXRlKCgpID0+IG5ldyBWYWx1ZVN1YmplY3QoMykpO1xuICAgIGNvbnN0IHN1YkFycmF5ID0gc3RhdGUoKCkgPT4gbmV3IFZhbHVlU3ViamVjdChbJ2EnLCAnYicsICdjJ10pKTtcbiAgICBjb25zdCB2czAgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KDApKTtcbiAgICBjb25zdCB2czEgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KDEpKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NTI3WzBdLCBzdWJzY3JpYmUoc3ViMCksIHN1YnNjcmliZShzdWJBcnJheSwgYXJyYXkgPT4ge1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKHggPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NTI3WzFdLCB4KS5rZXkoeCkpO1xuICAgIH0pLCBzdWJzY3JpYmUoc3ViQXJyYXksIGFycmF5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCh4ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1syXSwgeCwgeCkua2V5KHgpKTtcbiAgICB9KSwgc3Vic2NyaWJlV2l0aChzdWIwLCAtMSksIHN1YnNjcmliZSh2czApLCBzdWJzY3JpYmUodnMwLCAoKSA9PiA1NSksIHRlc3RIb3N0KCksIHN1YnNjcmliZShjb21iaW5lTGF0ZXN0KFt2czAsIHZzMV0pLnBpcGUoeCA9PiB4WzFdKSksIHN1YnNjcmliZShjb21iaW5lTGF0ZXN0KFt2czAsIHZzMV0pLnBpcGUod2lsbFByb21pc2UoeCA9PiBQcm9taXNlLnJlc29sdmUoaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NTI3WzNdKSkpKSksIHBhc3NTdWJzY3JpcHRpb24oeyBzdWIwLCBzdWIxIH0pKTtcbn0pO1xuY29uc3QgcGFzc1N1YnNjcmlwdGlvbiA9IHRhZygoeyBzdWIwLCBzdWIxLCB9KSA9PiB7XG4gICAgbGV0IG9uT2ZmID0gZmFsc2U7XG4gICAgLy8gY29uc3Qgb2IgPSBzdGF0ZSgoKSA9PiBuZXcgT2JzZXJ2YWJsZSgpKSBhcyBhbnlcbiAgICBjb25zdCBvYiA9IHN0YXRlKCgpID0+IG5ldyBSeFN1YmplY3QoKSk7XG4gICAgc3RhdGVzKGdldCA9PiBbb25PZmZdID0gZ2V0KG9uT2ZmKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1s0XSwgc3Vic2NyaWJlKHN1YjApLCAoKSA9PiBzdWIwLm5leHQoKHN1YjAudmFsdWUgfHwgMCkgKyAxKSwgKCkgPT4gb2IubmV4dChzdWIwLnZhbHVlID0gKHN1YjAudmFsdWUgfHwgMCkgKyAxKSwgKCkgPT4gb25PZmYgPSAhb25PZmYsIG9uT2ZmID8gJ3Nob3cnIDogJ2hpZGUnLCBvbk9mZiwgb25PZmYgJiYgc3Vic2NyaWJlKHN1YjApLCBvbk9mZiAmJiBzdWJzY3JpYmUoc3ViMCwgbnVtYmVyRnVuKSwgb25PZmYgJiYgc3Vic2NyaWJlKHN1YjAsIG51bWJlclRhZyksIHN1YnNjcmliZShzdWIxLCBudW1iZXJUYWcpLCBzdWJzY3JpYmUob2IsIG51bWJlclRhZyksIHN1YnNjcmliZShvYi5waXBlKHN0YXJ0V2l0aCgzMykpLCBudW1iZXJUYWcpLCBzdWJzY3JpYmUob2IucGlwZShzdGFydFdpdGgodW5kZWZpbmVkKSksICh4KSA9PiBudW1iZXJUYWcoeCkpLCBzdWJzY3JpYmUob2IsICh4KSA9PiBudW1iZXJUYWcoeCkpKTtcbn0pO1xuY29uc3QgbnVtYmVyRnVuID0gKHgpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NTI3WzVdLCB4KTtcbn07XG5jb25zdCBudW1iZXJUYWcgPSB0YWcoKHgpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NTI3WzZdLCB4KTtcbn0pO1xuY29uc3QgdGVzdEhvc3QgPSB0YWcoKCkgPT4ge1xuICAgIGxldCBoaWRlU2hvdyA9IHRydWU7XG4gICAgbGV0IGRlc3Ryb3lDb3VudCA9IDA7XG4gICAgbGV0IGNsaWNrQ291bnRlciA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgaGlkZVNob3csIGRlc3Ryb3lDb3VudCwgY2xpY2tDb3VudGVyLFxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIGhpZGVTaG93LCBkZXN0cm95Q291bnQsIGNsaWNrQ291bnRlcixcbiAgICB9KSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1s3XSwgaGlkZVNob3cgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjc4NTI3WzhdLCBob3N0KCgpID0+IHRhZy5lbGVtZW50LmdldCgpLmlubmVySFRNTCA9IERhdGUubm93KCkudG9TdHJpbmcoKSwge1xuICAgICAgICBvbkRlc3Ryb3k6ICgpID0+ICsrZGVzdHJveUNvdW50LFxuICAgIH0pLCAoKSA9PiArK2NsaWNrQ291bnRlciwgY2xpY2tDb3VudGVyKSwgKCkgPT4gaGlkZVNob3cgPSAhaGlkZVNob3csIGRlc3Ryb3lDb3VudCk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M2Nzg1Mjc6IFtbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlN1YnNjcmliZSgpXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW07Zm9udC1zaXplOjAuOGVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjAgPT09IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXN1YnNjcmliZS1zdWIwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZSBtYXBcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIwID09PSBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1zdWJzY3JpYmUtc3ViLW1hcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWJzY3JpYmUgc2VsZWN0XCIgfV0gfSwgeyBcIm5uXCI6IFwic2VsZWN0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCBcIlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNlbGVjdCBvcHRpb25cIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3Vic2NyaWJlIHdpdGggZGVmYXVsdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjAgPT09IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXN1YnNjcmliZS1zdWIwLXdpdGhcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidmFsdWUgc3ViamVjdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjAgPT09IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJwaXBlZCBzdWJqZWN0XCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtc3ViamVjdC1waXBlLWRpc3BsYXkwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiNTVcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDs9PT0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1zdWJqZWN0LXBpcGUtZGlzcGxheTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb21iaW5lTGF0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlLWRpc3BsYXkwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOz09PSZuYnNwO1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZS1kaXNwbGF5MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb21iaW5lTGF0ZXN0IHBpcGVkIGh0bWxcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGVIdG1sLWRpc3BsYXkwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJib2xkIDc3XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7PT09Jm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlSHRtbC1kaXNwbGF5MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfV0gfV0gfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJub1BhcmVudFRhZ0ZpZWxkc2V0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlBhc3Mgc3Vic2NyaXB0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkYlcIiB9LCB7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GIXCIgfV0sIFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dLCBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJib2xkIDc3XCIgfV0gfV0sIFt7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1Yi12YWx1ZTpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLW91dHB1dFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1pbmNyZWFzZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWIwIGluY3JlYXNlXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1uZXh0XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm9iIGluY3JlYXNlXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1oaWRlLXNob3dcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93IG9uL29mZiA9IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJvbk9mZlZhbHVlOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWhpZGVTaG93LXZhbHVlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRlc3QgMFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXgwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMHx8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDBcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRlc3QgMVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXgxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMXx8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDFcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4MlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjJ8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHwyXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDNcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIzfHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8M1wiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXg0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiNHx8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHw0XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI1fHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDVcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4NFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjZ8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEyIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8NlwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXg0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiN3x8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHw3XCIgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ5b3VyIGZ1biBudW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInlvdXIgdGFnIG51bWJlciBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dLCBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJob3N0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJob3N0SGlkZVNob3dcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRlc3Ryb3lDb3VudDogXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhvc3REZXN0cm95Q291bnRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhvc3RlZENvbnRlbnRcIl0sIFt7IFwidGFnSnNWYXJcIjogMCB9XV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY2xpY2tDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBzdGF0ZSwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBvbmVSZW5kZXIgfSBmcm9tIFwiLi9vbmVSZW5kZXIudGFnXCI7XG5pbXBvcnQgeyBzdG9yYWdlLCBWaWV3VHlwZXMgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgZnVuSW5Qcm9wc1RhZyBmcm9tIFwiLi9mdW5JblByb3BzLnRhZ1wiO1xuaW1wb3J0IHsgdG9kb0FwcCB9IGZyb20gXCIuL3RvZG8vdG9kb3MuYXBwXCI7XG5pbXBvcnQgeyBjaGlsZCB9IGZyb20gXCIuL2NoaWxkVGVzdHMudGFnXCI7XG5pbXBvcnQgeyBkZXN0cm95cyB9IGZyb20gXCIuL2Rlc3Ryb3lzLnRhZ1wiO1xuaW1wb3J0IHsgYXJyYXlzIH0gZnJvbSBcIi4vYXJyYXlzLnRhZ1wiO1xuaW1wb3J0IHsgdGFnU3dpdGNoRGVidWcgfSBmcm9tIFwiLi90YWdTd2l0Y2hEZWJ1Zy5jb21wb25lbnRcIjtcbmltcG9ydCB7IG1pcnJvcmluZyB9IGZyb20gXCIuL21pcnJvcmluZy50YWdcIjtcbmltcG9ydCB7IHByb3BzRGVidWdNYWluIH0gZnJvbSBcIi4vUHJvcHNEZWJ1Zy50YWdcIjtcbmltcG9ydCB7IHByb3ZpZGVyRGVidWcgfSBmcm9tIFwiLi9wcm92aWRlcnMudGFnXCI7XG5pbXBvcnQgeyBjb3VudGVycyB9IGZyb20gXCIuL2NvdW50ZXJzRGVidWdcIjtcbmltcG9ydCB7IHRhYmxlRGVidWcgfSBmcm9tIFwiLi90YWJsZURlYnVnLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgY29udGVudCB9IGZyb20gXCIuL2NvbnRlbnQudGFnXCI7XG5pbXBvcnQgeyB3YXRjaFRlc3RpbmcgfSBmcm9tIFwiLi93YXRjaFRlc3RpbmcudGFnXCI7XG5pbXBvcnQgeyBhdHRyaWJ1dGVEZWJ1ZyB9IGZyb20gXCIuL2F0dHJpYnV0ZURlYnVnLnRhZ1wiO1xuaW1wb3J0IHsgYmFzaWMgfSBmcm9tIFwiLi9iYXNpYy50YWdcIjtcbmltcG9ydCB7IHN1YnNjcmlwdGlvbnMgfSBmcm9tIFwiLi9zdWJzY3JpcHRpb25zLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IG91dHB1dFNlY3Rpb25zID0gW3tcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkJhc2ljLCB0YWc6IGJhc2ljLCBlbW9qaTogJ/CflKInXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuT25lUmVuZGVyLCB0YWc6IG9uZVJlbmRlciwgZW1vamk6ICcx77iP4oOjJ1xuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLlByb3BzLCB0YWc6IHByb3BzRGVidWdNYWluLCBlbW9qaTogJ/Cfp7MnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLldhdGNoVGVzdGluZywgdGFnOiB3YXRjaFRlc3RpbmcsIGVtb2ppOiAn4oya77iPJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5UYWJsZURlYnVnLCB0YWc6IHRhYmxlRGVidWcsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuUHJvdmlkZXJEZWJ1ZywgdGFnOiBwcm92aWRlckRlYnVnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLlRhZ1N3aXRjaERlYnVnLCB0YWc6IHRhZ1N3aXRjaERlYnVnLCBlbW9qaTogJ/CflIAnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLk1pcnJvcmluZywgdGFnOiBtaXJyb3JpbmcsIGVtb2ppOiAn8J+qnicsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuQXJyYXlzLCB0YWc6IGFycmF5cywgZW1vamk6ICfioIcnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkNvbnRlbnQsIHRhZzogY29udGVudCwgZW1vamk6ICfwn5OwJyxcbiAgICAgICAgZGVidWc6IHRydWUsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuQ2hpbGQsIHRhZzogY2hpbGQsIGVtb2ppOiAn8J+RticsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuRGVzdHJveXMsIHRhZzogZGVzdHJveXMsIGVtb2ppOiAn8J+Xke+4jycsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuRnVuSW5Qcm9wc1RhZywgdGFnOiBmdW5JblByb3BzVGFnLCBlbW9qaTogJ/CfpKEnXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuQXR0cmlidXRlRGVidWcsIHRhZzogYXR0cmlidXRlRGVidWcsIGVtb2ppOiAn8J+PuScsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuVG9kbywgdGFnOiB0YWcodG9kb0FwcCksIGVtb2ppOiAn4pyP77iPJ1xuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkNvdW50ZXJzLCB0YWc6IGNvdW50ZXJzLCBlbW9qaTogJ/Cfkq8nLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLlN1YnNjcmlwdGlvbnMsIHRhZzogc3Vic2NyaXB0aW9ucywgZW1vamk6ICfwn5OhJyxcbiAgICB9XTtcbmV4cG9ydCBjb25zdCByZW5kZXJlZFNlY3Rpb25zID0gdGFnKChhcHBDb3VudGVyU3ViamVjdCwgdmlld1R5cGVzID0gc3RvcmFnZS52aWV3cykgPT4ge1xuICAgIGNvbnN0IHZpc2libGVTZWN0aW9ucyA9IHN0YXRlKCgpID0+IG91dHB1dFNlY3Rpb25zLmZpbHRlcihzZWN0aW9uID0+IHtcbiAgICAgICAgaWYgKHZpZXdUeXBlcy5pbmNsdWRlcyhzZWN0aW9uLnZpZXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pLm1hcCgoeyB2aWV3LCB0aXRsZSwgZW1vamksIHRhZywgLi4uZXh0cmEgfSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6IHRpdGxlIHx8IHZpZXcsXG4gICAgICAgICAgICBvdXRwdXQ6IHZpZXcgPT09IFZpZXdUeXBlcy5Db3VudGVycyA/IHRhZyh7IGFwcENvdW50ZXJTdWJqZWN0IH0pIDogdGFnKCksXG4gICAgICAgICAgICB2aWV3LFxuICAgICAgICAgICAgZW1vamksXG4gICAgICAgICAgICAuLi5leHRyYSxcbiAgICAgICAgfTtcbiAgICB9KS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIC8vIFNvcnQgYWxwaGFiZXRpY2FsbHkgYnkgdmlldyBuYW1lXG4gICAgICAgIHJldHVybiBhLnZpZXcubG9jYWxlQ29tcGFyZShiLnZpZXcpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjEwMTQ2NVswXSwgdmlzaWJsZVNlY3Rpb25zLm1hcCgoc2VjdGlvbikgPT4gZ2V0U2VjdGlvbihzZWN0aW9uKS5rZXkoc2VjdGlvbi52aWV3KSkpO1xufSk7XG5jb25zdCBnZXRTZWN0aW9uID0gKHNlY3Rpb24pID0+IHtcbiAgICBjb25zdCB7IGVtb2ppLCB2aWV3LCB0aXRsZSwgb3V0cHV0LCBkZWJ1ZyB9ID0gc2VjdGlvbjtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjEwMTQ2NVsxXSwgdmlldywgZW1vamksIHRpdGxlLCBzZWN0aW9uLmNvbnRlbnRIaWRlID8gJ25vbmUnIDogJycsIG91dHB1dCwgJ3NlY3Rpb25fJyArIHNlY3Rpb24udmlldywgKCkgPT4gc2VjdGlvbi5jb250ZW50SGlkZSA9ICFzZWN0aW9uLmNvbnRlbnRIaWRlLCBzZWN0aW9uLmNvbnRlbnRIaWRlID8gJ2dyZXknIDogJycpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyMTAxNDY1OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXg6MiAyIDIwZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSDimpPvuI8gLS0+XCIgfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwibWFueS1zZWN0aW9uLWNvbnRlbnRzXCJdLCBbXCJzdHlsZS5kaXNwbGF5XCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4OjE7XCJdLCBbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgbnVsbF0sIFtcInN0eWxlLmJhY2tncm91bmQtY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkYHvuI8gaGlkZS9zaG93XCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjAuNmVtO3RleHQtYWxpZ246cmlnaHQ7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJocmVmXCIsIFwiI3RvcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKPq1wiIH1dIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnLCBvbkluaXQsIGNhbGxiYWNrTWFrZXIsIG9uRGVzdHJveSwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5jb25zdCB0ZXN0MGludGVydmFsID0gMzAwMDtcbmNvbnN0IHRlc3QxaW50ZXJ2YWwgPSA2MDAwO1xuZXhwb3J0IGNvbnN0IGludGVydmFsVGVzdGVyMCA9IHRhZygoKSA9PiB7XG4gICAgbGV0IGludGVydmFsQ291bnQgPSAwO1xuICAgIGxldCBpbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgIGxldCBpbnRlcnZhbElkMiA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcmVuZGVyQ291bnRlciA9IDA7XG4gICAgbGV0IGN1cnJlbnRUaW1lID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgICAgICBpbnRlcnZhbENvdW50LCBpbnRlcnZhbElkLCBpbnRlcnZhbElkMiwgcmVuZGVyQ291bnRlciwgY3VycmVudFRpbWUsXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgaW50ZXJ2YWxDb3VudCwgaW50ZXJ2YWxJZCwgaW50ZXJ2YWxJZDIsIHJlbmRlckNvdW50ZXIsIGN1cnJlbnRUaW1lLFxuICAgIH0pKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBpbmNyZWFzZSA9ICgpID0+ICsraW50ZXJ2YWxDb3VudDtcbiAgICBjb25zdCBzdGFydEludGVydmFsID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmluZm8oJ/Cfn6IgaW50ZXJ2YWwgdGVzdCAwIHN0YXJ0ZWQuLi4nKTtcbiAgICAgICAgdHJhY2tUaW1lKCk7XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBpbmNyZWFzZSgpO1xuICAgICAgICB9KSwgdGVzdDBpbnRlcnZhbCk7XG4gICAgfTtcbiAgICBjb25zdCBzdG9wSW50ZXJ2YWwgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZDIpO1xuICAgICAgICBpbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgICAgICBpbnRlcnZhbElkMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc29sZS5pbmZvKCfwn5uRIGludGVydmFsIHRlc3QgMCBzdG9wcGVkJyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiB0cmFja1RpbWUoKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgaW50ZXJ2YWxJZDIgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lICsgNTAwO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRlc3QwaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCA1MDApO1xuICAgICAgICBjb25zb2xlLmluZm8oJ+KWtu+4jyBpbnRlcnZhbCBzdGFydGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGludGVydmFsSWQgfHwgaW50ZXJ2YWxJZDIpIHtcbiAgICAgICAgICAgIHN0b3BJbnRlcnZhbCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0SW50ZXJ2YWwoKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlbGF5SW5jcmVhc2UgPSAoKSA9PiBzZXRUaW1lb3V0KGNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY3VycmVudFRpbWUgPSBjdXJyZW50VGltZSArIDIwMDtcbiAgICB9KSwgMTAwMCk7XG4gICAgb25Jbml0KHN0YXJ0SW50ZXJ2YWwpO1xuICAgIG9uRGVzdHJveShzdG9wSW50ZXJ2YWwpO1xuICAgICsrcmVuZGVyQ291bnRlcjtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODM4MDA4WzBdLCB0ZXN0MGludGVydmFsLCBpbnRlcnZhbElkLCBpbmNyZWFzZSwgaW50ZXJ2YWxDb3VudCwgcmVuZGVyQ291bnRlciwgdGVzdDBpbnRlcnZhbCwgY3VycmVudFRpbWUsIGN1cnJlbnRUaW1lLCB0b2dnbGUsIGludGVydmFsSWQgfHwgaW50ZXJ2YWxJZDIgPyAncmVkJyA6ICdncmVlbicsIGRlbGF5SW5jcmVhc2UpO1xufSk7XG5leHBvcnQgY29uc3QgaW50ZXJ2YWxUZXN0ZXIxID0gdGFnKCgpID0+IHtcbiAgICBsZXQgaW50ZXJ2YWxDb3VudCA9IDA7XG4gICAgbGV0IGludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGludGVydmFsSWQyID0gdW5kZWZpbmVkO1xuICAgIGxldCByZW5kZXJDb3VudGVyID0gMDtcbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgICAgIGludGVydmFsQ291bnQsIGludGVydmFsSWQsIGludGVydmFsSWQyLCByZW5kZXJDb3VudGVyLCBjdXJyZW50VGltZVxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIGludGVydmFsQ291bnQsIGludGVydmFsSWQsIGludGVydmFsSWQyLCByZW5kZXJDb3VudGVyLCBjdXJyZW50VGltZVxuICAgIH0pKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBpbmNyZWFzZSA9ICgpID0+ICsraW50ZXJ2YWxDb3VudDtcbiAgICBmdW5jdGlvbiB0cmFja1RpbWUoKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgaW50ZXJ2YWxJZDIgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lICsgNTAwO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRlc3QxaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCA1MDApO1xuICAgIH1cbiAgICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQyKTtcbiAgICAgICAgaW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaW50ZXJ2YWxJZDIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnNvbGUuaW5mbygn8J+UtCBpbnRlcnZhbCAxIHN0b3BwZWQnKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRvZ2dsZUludGVydmFsKCkge1xuICAgICAgICBpZiAoaW50ZXJ2YWxJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmluZm8oJ/Cfn6IgaW50ZXJ2YWwgdGVzdCAxIHN0YXJ0ZWQuLi4nKTtcbiAgICAgICAgdHJhY2tUaW1lKCk7XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBpbmNyZWFzZSgpO1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdzbG93IGludGVydmFsIHJhbicpO1xuICAgICAgICB9KSwgdGVzdDFpbnRlcnZhbCk7XG4gICAgfVxuICAgIG9uSW5pdCh0b2dnbGVJbnRlcnZhbCk7XG4gICAgb25EZXN0cm95KGRlc3Ryb3kpO1xuICAgICsrcmVuZGVyQ291bnRlcjtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODM4MDA4WzFdLCB0ZXN0MWludGVydmFsLCBpbnRlcnZhbElkLCBpbmNyZWFzZSwgaW50ZXJ2YWxDb3VudCwgcmVuZGVyQ291bnRlciwgdGVzdDFpbnRlcnZhbCwgY3VycmVudFRpbWUsIGN1cnJlbnRUaW1lLCB0b2dnbGVJbnRlcnZhbCwgaW50ZXJ2YWxJZCA/ICdyZWQnIDogJ2dyZWVuJyk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M4MzgwMDg6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLWludGVydmFsRGVidWcuanMtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW50ZXJ2YWwgdHlwZSAxIGF0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibXNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbnRlcnZhbElkOiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcInJhbmdlXCJdLCBbXCJtaW5cIiwgXCIwXCJdLCBbXCJtYXhcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF0sIFtcInN0ZXBcIiwgXCIxXCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItLVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOCB9LCBudWxsXSwgW1wic3R5bGUuYmFja2dyb3VuZC1jb2xvclwiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhcnQvc3RvcFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkZWxheSBpbmNyZWFzZSBjdXJyZW50VGltZVwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImludGVydmFsIHR5cGUgMiB3aXRoIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibXNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbnRlcnZhbElkOiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcInJhbmdlXCJdLCBbXCJtaW5cIiwgXCIwXCJdLCBbXCJtYXhcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF0sIFtcInN0ZXBcIiwgXCIxXCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItLVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOCB9LCBudWxsXSwgW1wic3R5bGUuYmFja2dyb3VuZC1jb2xvclwiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhcnQvc3RvcFwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaW50ZXJ2YWxUZXN0ZXIwLCBpbnRlcnZhbFRlc3RlcjEgfSBmcm9tIFwiLi9pbnRlcnZhbERlYnVnXCI7XG5pbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgZnggfSBmcm9tIFwidGFnZ2VkanMtYW5pbWF0ZS1jc3NcIjtcbmV4cG9ydCBjb25zdCB0YWdEZWJ1ZyA9IHRhZygoKSA9PiB7XG4gICAgbGV0IF9maXJzdFN0YXRlID0gJ3RhZ0pzRGVidWcuanMnO1xuICAgIGxldCBzaG93SW50ZXJ2YWxzID0gZmFsc2U7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IF9maXJzdFN0YXRlLCBzaG93SW50ZXJ2YWxzLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IF9maXJzdFN0YXRlLCBzaG93SW50ZXJ2YWxzLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzc1MDBbMF0sICgpID0+IHNob3dJbnRlcnZhbHMgPSAhc2hvd0ludGVydmFscywgc2hvd0ludGVydmFscyAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3NzUwMFsxXSwgZngoKSwgaW50ZXJ2YWxUZXN0ZXIwKCksIGludGVydmFsVGVzdGVyMSgpKSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M3NzUwMDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIHRhZ0RlYnVnLmpzIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4OjIgMiAyMGVtXCJdLCBbXCJpZFwiLCBcImRlYnVnLWludGVydmFsc1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJJbnRlcnZhbCBUZXN0aW5nXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgdGFnLCBodG1sIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyB1c2VIYXNoUm91dGVyIH0gZnJvbSBcIi4vdG9kby9IYXNoUm91dGVyLmZ1bmN0aW9uXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlTWVudU5hbWUoKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdXNlSGFzaFJvdXRlcigpO1xuICAgIGNvbnN0IHJvdXRlID0gcm91dGVyLnJvdXRlO1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcm91dGVyLmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGlmIChwYXRobmFtZSAmJiByb3V0ZSA9PT0gJ2NvdW50ZXJzLycpIHtcbiAgICAgICAgcmV0dXJuICdjb3VudGVycyc7XG4gICAgfVxuICAgIGlmIChwYXRobmFtZSAmJiByb3V0ZSA9PT0gJ2NvbnRlbnQvJykge1xuICAgICAgICByZXR1cm4gJ2NvbnRlbnQnO1xuICAgIH1cbiAgICBjb25zdCBpc0lzb2xhdGVkID0gcGF0aG5hbWUuZW5kc1dpdGgoJ2lzb2xhdGVkLmh0bWwnKTtcbiAgICBpZiAoaXNJc29sYXRlZCkge1xuICAgICAgICByZXR1cm4gJ2lzb2xhdGVkJztcbiAgICB9XG4gICAgY29uc3QgaXNUb2RvID0gcGF0aG5hbWUuaW5jbHVkZXMoJ3RvZG8vd3d3Jyk7XG4gICAgaWYgKGlzVG9kbykge1xuICAgICAgICByZXR1cm4gJ3RvZG8nO1xuICAgIH1cbiAgICByZXR1cm4gJ2hvbWUnO1xufVxuZXhwb3J0IGNvbnN0IG1lbnUgPSAoKSA9PiB0YWcudXNlID0gKG1lbnVOYW1lID0gdXNlTWVudU5hbWUoKSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTIwODI5WzBdLCBtZW51TmFtZSA9PT0gJ2hvbWUnID8gJy41JyA6ICcxJywgbWVudU5hbWUgPT09ICdob21lJyA/IHVuZGVmaW5lZCA6ICcjLycsIG1lbnVOYW1lID09PSAnaXNvbGF0ZWQnID8gJy41JyA6ICcxJywgbWVudU5hbWUgPT09ICdpc29sYXRlZCcgPyB1bmRlZmluZWQgOiAnaXNvbGF0ZWQuaHRtbCcsIG1lbnVOYW1lID09PSAnY291bnRlcnMnID8gJy41JyA6ICcxJywgbWVudU5hbWUgPT09ICdjb3VudGVycycgPyB1bmRlZmluZWQgOiAnI2NvdW50ZXJzLycsIG1lbnVOYW1lID09PSAnY29udGVudCcgPyAnLjUnIDogJzEnLCBtZW51TmFtZSA9PT0gJ2NvbnRlbnQnID8gdW5kZWZpbmVkIDogJyNjb250ZW50LycsIG1lbnVOYW1lID09PSAndG9kbycgPyAnLjUnIDogJzEnLCBtZW51TmFtZSA9PT0gJ3RvZG8nID8gdW5kZWZpbmVkIDogJ3RvZG8vd3d3LycpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczEyMDgyOTogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS5vcGFjaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIFwic3R5bGVcIl0sIFtcImhyZWZcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJob21lXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7LSZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGUub3BhY2l0eVwiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBcInN0eWxlXCJdLCBbXCJocmVmXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaXNvbGF0ZWRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDstJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS5vcGFjaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIFwic3R5bGVcIl0sIFtcImhyZWZcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb3VudGVyc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOy0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlLm9wYWNpdHlcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgXCJzdHlsZVwiXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogNyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbnRlbnRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDstJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS5vcGFjaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIFwic3R5bGVcIl0sIFtcImhyZWZcIiwgeyBcInRhZ0pzVmFyXCI6IDkgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2RvIGFwcFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOy0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImhyZWZcIiwgXCJodHRwczovL2dpdGh1Yi5jb20vQWNrZXJBcHBsZS90YWdnZWRqc1wiXSwgW1widGFyZ2V0XCIsIFwiX2JsYW5rXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVwb1wiIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnLCBvbkluaXQsIHN0YXRlLCBTdWJqZWN0LCBjYWxsYmFja01ha2VyLCBvbkRlc3Ryb3ksIHN0YXRlcywgc3Vic2NyaWJlIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJlZFNlY3Rpb25zIH0gZnJvbSBcIi4vcmVuZGVyZWRTZWN0aW9ucy50YWdcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBzZWN0aW9uU2VsZWN0b3IgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyB0YWdEZWJ1ZyB9IGZyb20gXCIuL3RhZ0pzRGVidWdcIjtcbmltcG9ydCB7IHJ1blRlc3RzIH0gZnJvbSBcIi4vdGVzdHNcIjtcbmltcG9ydCB7IG1lbnUsIHVzZU1lbnVOYW1lIH0gZnJvbSBcIi4vbWVudS50YWdcIjtcbmltcG9ydCB7IGlubmVyQ291bnRlckNvbnRlbnQgfSBmcm9tIFwiLi9jb3VudGVyc0RlYnVnXCI7XG5pbXBvcnQgeyBjb250ZW50IH0gZnJvbSBcIi4vY29udGVudC50YWdcIjtcbmltcG9ydCB7IGFuaW1hdGVXcmFwIH0gZnJvbSBcInRhZ2dlZGpzLWFuaW1hdGUtY3NzXCI7XG5jb25zdCBhcHBEYXRlID0gRGF0ZS5ub3coKTtcbmZ1bmN0aW9uIGFwcEZ1bigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcnVuQXBwRnVuKG1lbnVOYW1lID0gdXNlTWVudU5hbWUoKSkge1xuICAgICAgICBsZXQgc2hvd0hpZGUgPSBmYWxzZTtcbiAgICAgICAgc3RhdGVzKGdldCA9PiBbeyBzaG93SGlkZSB9XSA9IGdldCh7IHNob3dIaWRlIH0pKTtcbiAgICAgICAgY29uc29sZS5sb2coJ/CfjZIgQXBwIHJlbmRlcmVkJywgYXBwRGF0ZSk7XG4gICAgICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyODA1MzAzWzBdLCAyICsgMiwgKCkgPT4gc2hvd0hpZGUgPSAhc2hvd0hpZGUsIHNob3dIaWRlLCBzaG93SGlkZSAmJiBmeFRhZygpLCBtZW51KCksIG1lbnVOYW1lID09PSAnaG9tZScgJiYgaG9tZVBhZ2UoKSwgbWVudU5hbWUgPT09ICdjb3VudGVycycgJiYgaW5uZXJDb3VudGVyQ29udGVudCgpLCBtZW51TmFtZSA9PT0gJ2NvbnRlbnQnICYmIGNvbnRlbnQoKSk7XG4gICAgfTtcbn1cbmFwcEZ1bi5pc0FwcCA9IHRydWU7XG5leHBvcnQgY29uc3QgQXBwID0gdGFnKGFwcEZ1bik7XG5leHBvcnQgY29uc3QgaG9tZVBhZ2UgPSAoKSA9PiB0YWcudXNlID0gKHNob3dTZWN0aW9ucyA9IHRydWUsIGFwcENvdW50ZXIgPSAwLCB0b2dnbGVWYWx1ZSA9IGZhbHNlLCB0ZXN0VGltZW91dCA9IG51bGwsIGFwcENvdW50ZXJTdWJqZWN0ID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoYXBwQ291bnRlcikpLCByZW5kZXJDb3VudCA9IDAsIHRlc3RFbW9qaSA9ICfwn5+mJywgXyA9IHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgc2hvd1NlY3Rpb25zLFxuICAgICAgICBhcHBDb3VudGVyLFxuICAgICAgICB0b2dnbGVWYWx1ZSxcbiAgICAgICAgdGVzdFRpbWVvdXQsXG4gICAgICAgIHJlbmRlckNvdW50LFxuICAgICAgICB0ZXN0RW1vamksXG4gICAgfV0gPSBnZXQoe1xuICAgIHNob3dTZWN0aW9ucyxcbiAgICBhcHBDb3VudGVyLFxuICAgIHRvZ2dsZVZhbHVlLFxuICAgIHRlc3RUaW1lb3V0LFxuICAgIHJlbmRlckNvdW50LFxuICAgIHRlc3RFbW9qaSxcbn0pKSwgdG9nZ2xlID0gKCkgPT4ge1xuICAgIHRvZ2dsZVZhbHVlID0gIXRvZ2dsZVZhbHVlO1xufSkgPT4ge1xuICAgIC8vIHN0YXRlcyhnZXQgPT4gKHsgYXBwQ291bnRlciB9ID0gZ2V0KHsgYXBwQ291bnRlciB9KSkpXG4gICAgY29uc3QgY2FsbGJhY2tzID0gY2FsbGJhY2tNYWtlcigpO1xuICAgIGNvbnN0IG9uVGVzdENvbXBsZXRlID0gY2FsbGJhY2tzKHN1Y2Nlc3MgPT4gdGVzdEVtb2ppID0gc3VjY2VzcyA/ICfinIUnIDogJ+KdjCcpO1xuICAgIC8vIGlmIEkgYW0gZGVzdHJveWVkIGJlZm9yZSBteSB0ZXN0IHJ1bnMsIHByZXZlbnQgdGVzdCBmcm9tIHJ1bm5pbmdcbiAgICBvbkRlc3Ryb3koZnVuY3Rpb24gYXBwT25EZXN0cm95KCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGVzdFRpbWVvdXQpO1xuICAgICAgICB0ZXN0VGltZW91dCA9IG51bGw7XG4gICAgfSk7XG4gICAgb25Jbml0KGZ1bmN0aW9uIGFwcE9uSW5pdCgpIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCcx77iP4oOjIGFwcCBpbml0IHNob3VsZCBvbmx5IHJ1biBvbmNlJyk7XG4gICAgICAgIGZpcmVUZXN0aW5nKGZhbHNlLCBvblRlc3RDb21wbGV0ZSk7XG4gICAgICAgIGFwcENvdW50ZXJTdWJqZWN0LnN1YnNjcmliZShjYWxsYmFja3MoeCA9PiBhcHBDb3VudGVyID0geCkpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGZpcmVUZXN0aW5nKG1hbnVhbCA9IHRydWUsIG9uQ29tcGxldGUgPSAoKSA9PiB1bmRlZmluZWQpIHtcbiAgICAgICAgdGVzdEVtb2ppID0gJ/Cfn6YnO1xuICAgICAgICBjb25zdCB3YWl0Rm9yID0gMjAwMDtcbiAgICAgICAgdGVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ/Cfj4Mg8J+Pg+KAjeKZgO+4jyDwn4+D4oCN4pmC77iPIFJ1bm5pbmcgdGVzdHMuLi4g8J+Pg+KAjeKZgu+4j+KAjeKeoe+4jyDwn4+D4oCN4pmA77iP4oCN4p6h77iPIPCfj4PigI3inqHvuI94Jyk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5UZXN0cygpO1xuICAgICAgICAgICAgb25Db21wbGV0ZShyZXN1bHQpO1xuICAgICAgICAgICAgaWYgKCFtYW51YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ+KchSBhbGwgYXBwIHRlc3RzIHBhc3NlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFsZXJ0KCfinYwgdGVzdHMgZmFpbGVkLiBTZWUgY29uc29sZSBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gICAgICAgIH0sIHdhaXRGb3IpOyAvLyBjYXVzZSBkZWxheSB0byBiZSBzZXBhcmF0ZSBmcm9tIHJlbmRlcnNcbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjgwNTMwM1sxXSwgKCkgPT4gZmlyZVRlc3RpbmcodHJ1ZSwgb25UZXN0Q29tcGxldGUpLCB0ZXN0RW1vamksICgpID0+IHtcbiAgICAgICAgYXBwQ291bnRlclN1YmplY3QubmV4dChhcHBDb3VudGVyICsgMSk7XG4gICAgfSwgKCkgPT4gKythcHBDb3VudGVyLCBhcHBDb3VudGVyLCBzdWJzY3JpYmUoYXBwQ291bnRlclN1YmplY3QpLCBhcHBDb3VudGVyU3ViamVjdC52YWx1ZSwgKCkgPT4gdG9nZ2xlKCksIHRvZ2dsZVZhbHVlLCByZW5kZXJDb3VudERpdih7IG5hbWU6ICdhcHAnLCByZW5kZXJDb3VudCB9KSwgc3Vic2NyaWJlKFN1YmplY3QuZ2xvYmFsU3ViQ291bnQkKSwgc2VjdGlvblNlbGVjdG9yKCksICgpID0+IHNob3dTZWN0aW9ucyA9ICFzaG93U2VjdGlvbnMsIHNob3dTZWN0aW9ucyAmJiByZW5kZXJlZFNlY3Rpb25zKGFwcENvdW50ZXJTdWJqZWN0KSwgdGFnRGVidWcoKSk7XG59O1xuY29uc3QgZnhUYWcgPSB0YWcoKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjgwNTMwM1syXSwgYW5pbWF0ZVdyYXAoKS5pbm5lckhUTUwgPSBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyODA1MzAzWzNdKSkpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczI4MDUzMDM6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLWFwcC5qcy0tPlwiIH0sIHsgXCJublwiOiBcImgxXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaDEtYXBwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+Pt++4jyBUYWdnZWRKcyAtIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic2hvdy9oaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG5cXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBcIiB9XSwgW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInJ1biB0ZXN0cyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkaXJlY3QgYXBwIHRlc3RzXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXBwLWNvdW50ZXItc3ViamVjdC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NkiArK2FwcCBzdWJqZWN0XCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXBwLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIgKythcHBcIiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjZIgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NkiQmbHQ7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLXN1YmplY3QtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJmd0O1wiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NkiQudmFsdWUmbHQ7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImFwcC1jb3VudGVyLXN1YmplY3QtdmFsdWUtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJmd0O1wiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRvZ2dsZS10ZXN0XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZ2dsZSB0ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDpub3dyYXA7Z2FwOjFlbTtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA5IH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIoc3Vic2NyaXB0aW9uIGNvdW50OiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJuYW1lXCIsIFwidG9wXCJdLCBbXCJpZFwiLCBcInRvcFwiXV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwidGFnRGVidWctZngtd3JhcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2dnbGUgc2VjdGlvbnNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNCB9XSB9XSwgW3sgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJoclwiIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIEhlbGxvIGFuaW1hdGVkIHdvcmxkXFxuICBcIiB9XV0gfTtcbiIsImltcG9ydCB7IG91dHB1dFNlY3Rpb25zIH0gZnJvbSBcIi4vcmVuZGVyZWRTZWN0aW9ucy50YWdcIjtcbmltcG9ydCB7IHN0b3JhZ2UsIFZpZXdUeXBlcyB9IGZyb20gXCIuL3NlY3Rpb25TZWxlY3Rvci50YWdcIjtcbi8vIGltcG9ydCB7IG1vY2hhTG9hZGVkIH0gZnJvbSBcIi4vdGVzdGluZy9pbml0aWFsaXplLW1vY2hhLWNoYWlcIiAvLyBObyBsb25nZXIgbmVlZGVkXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuVGVzdHMoKSB7XG4gICAgY29uc29sZS5sb2coJ/Cfj4MgcnVuVGVzdHM6IEltcG9ydGluZyB0ZXN0cy4uLicpO1xuICAgIC8vIEFsd2F5cyBydW4gYmFzaWMgYW5kIHN0YXJ0IHRlc3RzXG4gICAgYXdhaXQgaW1wb3J0KCcuL2Jhc2ljLnRlc3QnKTsgLy8gbm90IGluIGdoLXBhZ2VzXG4gICAgYXdhaXQgaW1wb3J0KCcuL3N0YXJ0LnRlc3QuanMnKTtcbiAgICAvLyBDb25kaXRpb25hbGx5IGltcG9ydCB0ZXN0cyBiYXNlZCBvbiBjaGVja2JveCBzdGF0ZXNcbiAgICAvLyBNYXAgVmlld1R5cGVzIHRvIHRlc3QgZmlsZXNcbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQ29udGVudCkpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2NvbnRlbnQudGVzdCcpO1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vZHVtcENvbnRlbnQudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBjb250ZW50IHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5TdWJzY3JpcHRpb25zKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vc3Vic2NyaXB0aW9ucy50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIHN1YnNjcmlwdGlvbnMgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkNvdW50ZXJzKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vY291bnRlcnMudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBjb3VudGVycyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuUHJvcHMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9wcm9wcy50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIHByb3BzIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5UYWdTd2l0Y2hEZWJ1ZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3RhZ1N3aXRjaC50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIHRhZ1N3aXRjaCB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQXJyYXlzKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vYXJyYXlzLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgYXJyYXlzIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5NaXJyb3JpbmcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9taXJyb3IudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBtaXJyb3JpbmcgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLk9uZVJlbmRlcikpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL29uZVJlbmRlci50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIG9uZVJlbmRlciB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuRnVuSW5Qcm9wc1RhZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2Z1bkluUHJvcHMudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBmdW5JblByb3BzVGFnIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5BdHRyaWJ1dGVEZWJ1ZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2F0dHJpYnV0ZXMudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBhdHRyaWJ1dGVEZWJ1ZyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuRGVzdHJveXMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9kZXN0cm95cy50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIGRlc3Ryb3lzIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5XYXRjaFRlc3RpbmcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi93YXRjaC50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIHdhdGNoVGVzdGluZyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQ2hpbGQpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9jaGlsZC50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIGNoaWxkIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Qcm92aWRlckRlYnVnKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vcHJvdmlkZXJzLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgcHJvdmlkZXJEZWJ1ZyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuVG9kbykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3RvZG9zLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgdG9kbyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7IC8vcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgLy8gUnVuIHRlc3RzIHdpdGggb3VyIGJyb3dzZXIgdGVzdCBydW5uZXJcbiAgICAgICAgaWYgKHdpbmRvdy5tb2NoYSkge1xuICAgICAgICAgICAgLy8gTGVnYWN5IE1vY2hhIHN1cHBvcnQgaWYgc3RpbGwgYXZhaWxhYmxlXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93Lm1vY2hhLnJ1bigoZmFpbHVyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhaWx1cmVzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgJHtmYWlsdXJlc30gdGVzdChzKSBmYWlsZWRgKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFVzZSBvdXIgY3VzdG9tIGJyb3dzZXIgdGVzdCBydW5uZXJcbiAgICAgICAgICAgIGNvbnN0IHsgZXhlY3V0ZUJyb3dzZXJUZXN0cyB9ID0gYXdhaXQgaW1wb3J0KCcuL3Rlc3RpbmcvdGVzdFJ1bm5lcicpO1xuICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGV4ZWN1dGVCcm93c2VyVGVzdHMoKTtcbiAgICAgICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGVzdHMgZmFpbGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGltZSA9IERhdGUubm93KCkgLSBzdGFydDsgLy8gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFxuICAgICAgICBjb25zb2xlLmluZm8oYOKchSBhbGwgdGVzdHMgcGFzc2VkIGluICR7dGltZX1tc2ApO1xuICAgICAgICAvLyBjbG9zZSBhbmQgaGlkZSBvbmx5IGFjdGl2ZSBzZWN0aW9uc1xuICAgICAgICBvdXRwdXRTZWN0aW9uc1xuICAgICAgICAgICAgLmZpbHRlcihzZWN0aW9uID0+IHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoc2VjdGlvbi52aWV3KSlcbiAgICAgICAgICAgIC5tYXAoc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VjdGlvbl8nICsgc2VjdGlvbi52aWV3KTtcbiAgICAgICAgICAgIGlmIChlbG0pIHtcbiAgICAgICAgICAgICAgICBlbG0uY2xpY2soKTsgLy8gY2F1c2UgaGlkZSBjb250ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCB0ZXN0cyBmYWlsZWQ6ICcgKyBlcnJvci5tZXNzYWdlLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB0YWcsIGh0bWwsIG9uSW5pdCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgc2F2ZVNjb3BlZFN0b3JhZ2UsIHN0b3JhZ2UgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyBydW5UZXN0aW5nIH0gZnJvbSBcIi4vcnVuVGVzdGluZy5mdW5jdGlvblwiO1xuZXhwb3J0IGNvbnN0IGF1dG9UZXN0aW5nQ29udHJvbHMgPSAodGVzdHMsIHJ1blN0YXJ0RW5kVGVzdHMpID0+IHRhZy51c2UgPSAoXyA9IG9uSW5pdCgoKSA9PiB7XG4gICAgaWYgKHN0b3JhZ2UuYXV0b1Rlc3QpIHtcbiAgICAgICAgcnVuVGVzdGluZyhmYWxzZSwgdGVzdHMsIHJ1blN0YXJ0RW5kVGVzdHMpO1xuICAgIH1cbn0pKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2Mjk0N1swXSwgc3RvcmFnZS5hdXRvVGVzdCAmJiAnY2hlY2tlZCcsIHRvZ2dsZUF1dG9UZXN0aW5nLCAoKSA9PiBydW5UZXN0aW5nKHRydWUsIHRlc3RzLCBydW5TdGFydEVuZFRlc3RzKSk7XG5mdW5jdGlvbiB0b2dnbGVBdXRvVGVzdGluZygpIHtcbiAgICBzdG9yYWdlLmF1dG9UZXN0ID0gc3RvcmFnZS5hdXRvVGVzdCA9ICFzdG9yYWdlLmF1dG9UZXN0O1xuICAgIHNhdmVTY29wZWRTdG9yYWdlKCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjI5NDc6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBhdXRvIHRlc3RpbmcgXCIgfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImNoZWNrYm94XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicnVuIHRlc3RzXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBTdWJqZWN0LCBjYWxsYmFja01ha2VyLCBodG1sLCBvbkluaXQsIHRhZywgc3RhdGUsIHN0YXRlcywgc3Vic2NyaWJlIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgYWN0aXZhdGUsIHNlY3Rpb25TZWxlY3Rvciwgdmlld0NoYW5nZWQgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyByZW5kZXJlZFNlY3Rpb25zIH0gZnJvbSBcIi4vcmVuZGVyZWRTZWN0aW9ucy50YWdcIjtcbmltcG9ydCB7IGF1dG9UZXN0aW5nQ29udHJvbHMgfSBmcm9tIFwiLi9hdXRvVGVzdGluZ0NvbnRyb2xzLnRhZ1wiO1xuaW1wb3J0IHsgbWVudSB9IGZyb20gXCIuL21lbnUudGFnXCI7XG5pbXBvcnQgeyB1c2VIYXNoUm91dGVyIH0gZnJvbSBcIi4vdG9kby9IYXNoUm91dGVyLmZ1bmN0aW9uXCI7XG5leHBvcnQgZGVmYXVsdCAoKSA9PiB0YWcudXNlID0gKF8gPSBzdGF0ZSgnaXNvbGF0ZWQgYXBwIHN0YXRlJyksIHJlbmRlckNvdW50ID0gMCwgYXBwQ291bnRlciA9IDAsIGFwcENvdW50ZXJTdWJqZWN0ID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoYXBwQ291bnRlcikpLCB0b2dnbGVWYWx1ZSA9IGZhbHNlLCBfXyA9IHN0YXRlcyhnZXQgPT4gW3sgcmVuZGVyQ291bnQsIGFwcENvdW50ZXIsIHRvZ2dsZVZhbHVlIH1dID0gZ2V0KHsgcmVuZGVyQ291bnQsIGFwcENvdW50ZXIsIHRvZ2dsZVZhbHVlIH0pKSwgdG9nZ2xlID0gKCkgPT4gdG9nZ2xlVmFsdWUgPSAhdG9nZ2xlVmFsdWUsIGNhbGxiYWNrID0gY2FsbGJhY2tNYWtlcigpKSA9PiB7XG4gICAgY29uc3Qgcm91dGUgPSB1c2VIYXNoUm91dGVyKCkucm91dGUuc3BsaXQoJy8nKVxuICAgICAgICAubWFwKHggPT4geC50cmltKCkpXG4gICAgICAgIC5maWx0ZXIoaGFzTGVuZ3RoID0+IGhhc0xlbmd0aC5sZW5ndGgpO1xuICAgIGxldCB2aWV3VHlwZXMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHJvdXRlLmxlbmd0aCkge1xuICAgICAgICB2aWV3VHlwZXMgPSByb3V0ZTtcbiAgICB9XG4gICAgb25Jbml0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5pbmZvKCcx77iP4oOjIGFwcCBpbml0IHNob3VsZCBvbmx5IHJ1biBvbmNlJyk7XG4gICAgICAgIGFwcENvdW50ZXJTdWJqZWN0LnN1YnNjcmliZShjYWxsYmFjayh4ID0+IHtcbiAgICAgICAgICAgIGFwcENvdW50ZXIgPSB4O1xuICAgICAgICB9KSAvLyBhIGxldCB2YXJpYWJsZSBpcyBleHBlY3RlZCB0byBtYWludGFpbiBuZXcgdmFsdWUgb3ZlciByZW5kZXIgY3ljbGVzIGZvcndhcmRcbiAgICAgICAgKTtcbiAgICB9KTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMDU0NTcwWzBdLCByb3V0ZSwgbWVudSgpLCAoKSA9PiB7XG4gICAgICAgIGFwcENvdW50ZXJTdWJqZWN0Lm5leHQoYXBwQ291bnRlciArIDEpO1xuICAgIH0sICgpID0+IHtcbiAgICAgICAgKythcHBDb3VudGVyO1xuICAgIH0sIGFwcENvdW50ZXIsIHN1YnNjcmliZShhcHBDb3VudGVyU3ViamVjdCksIGFwcENvdW50ZXJTdWJqZWN0LnZhbHVlLCB0b2dnbGUsIHRvZ2dsZVZhbHVlLCBhdXRvVGVzdGluZ0NvbnRyb2xzKHZpZXdUeXBlcyksIHJlbmRlckNvdW50RGl2KHsgbmFtZTogJ2FwcCcsIHJlbmRlckNvdW50IH0pLCBzdWJzY3JpYmUoU3ViamVjdC5nbG9iYWxTdWJDb3VudCQpLCBzZWN0aW9uU2VsZWN0b3Iodmlld1R5cGVzKSwgcmVuZGVyZWRTZWN0aW9ucyhhcHBDb3VudGVyU3ViamVjdCwgdmlld1R5cGVzKSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2lzb2xhdGVkQXBwJyB9KSk7XG59O1xudmlld0NoYW5nZWQuc3Vic2NyaWJlKCh7IHR5cGUsIGNoZWNrVGVzdGluZyB9KSA9PiB7XG4gICAgYWN0aXZhdGUodHlwZSwgY2hlY2tUZXN0aW5nKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczEwNTQ1NzA6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLWlzb2xhdGVkQXBwLmpzLS0+XCIgfSwgeyBcIm5uXCI6IFwiaDFcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4+377iPIFRhZ2dlZEpzIC0gaXNvbGF0ZWRcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJvcGFjaXR5Oi42XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKG5vIEhNUilcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJvcGFjaXR5Oi42XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicm91dGU6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRpcmVjdCBhcHAgdGVzdHNcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1zdWJqZWN0LWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SICsrYXBwIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJhcHAtY291bnRlci1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NkiArK2FwcFwiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NkiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXBwLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SJCZsdDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXBwLWNvdW50ZXItc3ViamVjdC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImZ3Q7XCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42SJC52YWx1ZSZsdDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiYXBwLWNvdW50ZXItc3ViamVjdC12YWx1ZS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImZ3Q7XCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9nZ2xlLXRlc3RcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA3IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidG9nZ2xlIHRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOm5vd3JhcDtnYXA6MWVtO2p1c3RpZnktY29udGVudDogY2VudGVyO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIoc3Vic2NyaXB0aW9uIGNvdW50OiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwidGFnRGVidWctZngtd3JhcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE0IH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgdGFnRWxlbWVudCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwLnRhZ1wiO1xuaW1wb3J0IElzb2xhdGVkQXBwIGZyb20gXCIuL2lzb2xhdGVkQXBwXCI7XG5leHBvcnQgZnVuY3Rpb24gcnVuKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYXBwJylbMF07XG4gICAgY29uc3QgcGF0aG5hbWUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgY29uc3QgbG9jYXRpb25TcGxpdCA9IHBhdGhuYW1lLnNwbGl0KCcvJykuZmlsdGVyKHggPT4geCk7XG4gICAgY29uc3QgbG9jYXRpb24gPSBsb2NhdGlvblNwbGl0WzBdPy50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb2NhdGlvbiAmJiBbJ2lzb2xhdGVkLmh0bWwnLCAnaW5kZXgtc3RhdGljLmh0bWwnXS5pbmNsdWRlcyhsb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICB0YWdFbGVtZW50KElzb2xhdGVkQXBwLCBlbGVtZW50LCB7IHRlc3Q6IDEgfSk7XG4gICAgICAgIGNvbnN0IGVuZCA9IERhdGUubm93KCkgLSBzdGFydDtcbiAgICAgICAgY29uc29sZS5pbmZvKGDij7HvuI8gaXNvbGF0ZWQgcmVuZGVyIGluICR7ZW5kfW1zYCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRhZ0VsZW1lbnQoQXBwLCBlbGVtZW50LCB7IHRlc3Q6IDEgfSk7XG4gICAgY29uc3QgZW5kID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgIGNvbnNvbGUuaW5mbyhg4o+x77iPIHJlbmRlcmVkIGluICR7ZW5kfW1zYCk7XG59XG4iXSwibmFtZXMiOlsiZnhUaW1lIiwiZGVsYXkiLCJ0aW1lIiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJpdCIsInNpZ25hbEFycmF5Q291bnQiLCJpbml0aWFsQ291bnQiLCJOdW1iZXIiLCJpbm5lclRleHQiLCJ0b0JlIiwiaSIsImFzeW5jIiwicHVzaEJ0biIsImNsaWNrIiwibmV3Q291bnQiLCJjb3VudGVyRGlzcGxheSIsImNvdW50ZXJWYWx1ZSIsImFycmF5TGVuZ3RoIiwiaXRlbUNvdW50ZXIiLCJ0b0JlRGVmaW5lZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm5ld0NvdW50ZXJWYWx1ZSIsImlkIiwidmFsdWUiLCJjdXJyZW50Q291bnQiLCJzaWdDb3VudCIsIm5ld0NvdW50MSIsIml0ZW1Db3VudDIiLCJjb3VudCIsImJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiaW5zaWRlQ291bnQiLCJpbnNpZGVFbG0iLCJpbnNpZGVEaXNwbGF5IiwiaW5kZXhWYWx1ZSIsIm91dHNpZGVFbG0iLCJvdXRzaWRlRGlzcGxheSIsIm91dHNpZGVWYWx1ZSIsInRvU3RyaW5nIiwieCIsIl9jbGljayIsInJlc3VsdCIsInJlc3VsdDIiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsIkFycmF5IiwiY2xhc3NMaXN0IiwiaW5jbHVkZXMiLCJkeW5hbWljQ2xhc3NMaXN0IiwiYmdDb2xvckNoYW5nZXIiLCJzdWJzY3JpYmVCZ0NvbG9yIiwibXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yIiwidG9nZ2xlQ29sb3JCdG4iLCJjbGVhckNvbG9yQnRuIiwidG9nZ2xlQXR0cmlidXRlc0J0biIsInN1YnNjcmlwdGlvbnNDb3VudCIsImFmdGVySGlkZUNvdW50IiwiYWZ0ZXJTaG93Q291bnQiLCJzdHlsZU9iamVjdFRlc3QiLCJ0b2dnbGVCdG4iLCJjaGVja2VkIiwicGFkZGluZyIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsInN0eWxlUHJvcGVydHlUZXN0IiwiY29sb3IiLCJtYXJnaW5Ub3AiLCJ0b2dnbGVUZXN0IiwiZm9udFdlaWdodCIsImVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImh0bWwiLCJwYXJlbnROb2RlIiwiaW5uZXJIVE1MIiwicmVwbGFjZSIsInRyaW0iLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwicnVucyIsImZpcnN0UnVuIiwiY291bnRlcklucHV0IiwiY3VycmVudFN1YnMiLCJleHBlY3RlZFJlbmRlckNvdW50IiwicmVuZGVyQ291bnQiLCJwcmVJbml0Q291bnRlciIsInNwZWVkQ2xpY2tDb3VudFRlc3QiLCJwaXBlMCIsInBpcGUyIiwicGlwZTMiLCJwaXBlZFN1YkRpc3BsYXkiLCJzdWJqZWN0Q291bnREaXNwbGF5IiwiY2xpY2tTcGVlZEFtb3VudCIsImNvdW50ZXJRdWVyeSIsImRpc3BsYXlRdWVyeSIsImluY3JlYXNlT3V0ZXJDb3VudGVyUXVlcnkiLCJjbGlja0NvdW50IiwiZWxtIiwicHJvcENvdW50ZXJCdG5FbG0iLCJjb25zb2xlIiwiaW5kZXgiLCJ0aW1lRW5kIiwiZGlzcGxheVF1ZXJ5VGltZSIsImRlc0NvdW50MCIsIm9sZERlc3Ryb3lDb3VudCIsImRlc3Ryb3lDb3VudCIsInVwZGF0ZWRDb3VudCIsImRDb250ZW50Q291bnQiLCJyZXN1bHRFbG1zIiwicmVzdWx0RWxtczIiLCJsb2ciLCJnZXRJdGVtcyIsIml0ZW1zIiwiaXRlbSIsInB1c2giLCJnZXRDaGVja2JveGVzIiwibWFwIiwiZ2V0Q2hlY2tlZENvdW50IiwiZmlsdGVyIiwiY2IiLCJyZXNldENoZWNrYm94ZXMiLCJmb3JFYWNoIiwiY2hlY2tib3giLCJpbmplY3Rpb25UZXN0aW5nV3JhcCIsImNoZWNrYm94ZXMiLCJpdGVtMFN0eWxlIiwiZ2V0QXR0cmlidXRlIiwiaXRlbTFTdHlsZSIsImNvdW50ZXIiLCJwcm9wc1RleHRhcmVhIiwiZnVuVXBkYXRlVmFsdWUiLCJjaGFuZ2VkIiwib3duZXJIVE1MIiwicGFyZW50SFRNTCIsImNoaWxkSFRNTCIsIm93bmVyTnVtIiwicGFyZW50TnVtIiwiY2hpbGROdW0iLCJwcm9wQ291bnRlciIsInN5bmNDb3VudGVyIiwicGFyZW50RWxlbWVudCIsInN0eWxlcyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJoYXNSZWQiLCJib3JkZXJTdHlsZSIsImNoaWxkRWxlbWVudCIsImhhc0dyZWVuIiwiY29udGFpbnMiLCJwYXJlbnRDb2xvclNlbGVjdCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImJ1YmJsZXMiLCJoYXNCbHVlIiwiY2hpbGRDb2xvclNlbGVjdCIsImhhc1B1cnBsZSIsImNoaWxkMkVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImNoaWxkMkNvbG9yU2VsZWN0IiwiaGFzT3JhbmdlIiwiY3VycmVudCIsImFmdGVyQ2xpY2siLCJpbmNyZWFzZSIsImhpZGVTaG93IiwiaGlkZVNob3dWYWx1ZSIsInN1YlZhbHVlIiwiemVyb3MiLCJvbmVzIiwiX2V4MUh0bWwiLCJleHBlY3RlZEV4MUh0bWwiLCJleDBIdG1sIiwiZXgxSHRtbCIsImhvc3REZXN0cm95Q291bnQiLCJpc05hTiIsImRyb3Bkb3duIiwib25jaGFuZ2UiLCJ0YXJnZXQiLCJ0d29Db3VudCIsImNyZWF0ZUV4cGVjdCIsImFjdHVhbCIsImNhbGxlckxpbmUiLCJFcnJvciIsInN0YWNrIiwic3BsaXQiLCJleHBlY3RlZCIsIm1lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJmdWxsTWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsInVuZGVmaW5lZCIsInRvQmVVbmRlZmluZWQiLCJ0b0JlR3JlYXRlclRoYW4iLCJ0b0hhdmVMZW5ndGgiLCJhY3R1YWxXaXRoTGVuZ3RoIiwibm90IiwiaXNWaXRlc3QiLCJnbG9iYWxUaGlzIiwidml0ZXN0Iiwidml0ZXN0RXhwZWN0IiwiZXhwZWN0IiwibWF0Y2hlcnMiLCJ0byIsImJlIiwiZ3JlYXRlclRoYW4iLCJzZWxlY3RvciIsImVsbUNvdW50IiwicXVlcnkiLCJxIiwiZm9jdXMiLCJjbGlja0J5SWQiLCJjbGlja09uZSIsImtleWRvd25PbiIsImlucHV0Iiwia2V5Iiwia2V5RXZlbnQiLCJLZXlib2FyZEV2ZW50Iiwia2V5dXBPbiIsImNoYW5nZU9uZSIsImNoYW5nZUVsbSIsImJ5SWQiLCJodG1sQnlJZCIsImNhbmNlbGFibGUiLCJjaGFuZ2VFdmVudCIsInRyaWdnZXJDaGFuZ2VFbG0iLCJzbGVlcCIsIm1zIiwicmVzb2x2ZSIsImV4cGVjdEVsbUNvdW50IiwiZWxlbWVudHMiLCJmb3VuZCIsImV4cGVjdE1hdGNoZWRIdG1sIiwicXVlcmllcyIsInJlZHVjZSIsImFsbCIsImxhc3RIdG1sIiwicG9wIiwiZXhwZWN0SFRNTCIsImV4cGVjdGVkSHRtbCIsInRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyIsImNvdW50ZXJCdXR0b25zIiwiY291bnRlckRpc3BsYXlzIiwiZWxlbWVudENvdW50RXhwZWN0ZWQiLCJjb3VudGVyQnV0dG9uU2VsZWN0IiwiY291bnRlckRpc3BsYXlTZWxlY3QiLCJ0ZXN0UXVhbnRpZmllciIsImluY3JlYXNlQ291bnRlciIsImJvZHkiLCJ0ZXN0Q291bnRlckVsZW1lbnRzIiwidGVzdER1ZWxDb3VudGVyRWxlbWVudHMiLCJzZXRzIiwiYnV0dG9uMCIsImRpc3BsYXkwIiwic2hpZnQiLCJidXR0b25RdWVyeSIsImlwMCIsImJ1dHRvbjEiLCJkaXNwbGF5MSIsImRpc3BsYXkxRWxlbWVudCIsImlwMUNoZWNrIiwic2Vjb25kSW5jcmVhc2UiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJjdXJyZW50U3VpdGUiLCJzdWl0ZXMiLCJNYXAiLCJ0ZXN0UXVldWUiLCJzdWl0ZUhvb2tzIiwibmFtZSIsImZuIiwidGVzdCIsInN1aXRlIiwic3VpdGVUZXN0cyIsImdldCIsInNldCIsInByZXZpb3VzU3VpdGUiLCJob29rcyIsImV4ZWN1dGVCcm93c2VyVGVzdHMiLCJwYXNzZWQiLCJmYWlsZWQiLCJmYWlsdXJlcyIsInRlc3RzQnlTdWl0ZSIsInN1aXRlTmFtZSIsInRlc3RzIiwiaW5kZW50IiwiaG9vayIsImFmdGVyRXJyb3IiLCJmdWxsTmFtZSIsImxpbmUiLCJjbGVhciIsInJ1blRvZG9TcGVlZG9tZXRlciIsIm5ld1RvZG8iLCJkZWxldGVCdXR0b25zIiwibnVtYmVyT2ZJdGVtc1RvQWRkIiwidG9kb0lucHV0IiwibG9jYXRpb24iLCJoYXNoIiwidG9kb1RvZ2dsZTIiLCJldmVudCIsIk1vdXNlRXZlbnQiLCJ2aWV3IiwiZWRpdElucHV0Iiwic2xvd0NvdW50Iiwic3RhcnRDb3VudCIsInRydXRoU3RhcnRDb3VudCIsImRpc3BsYXkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YXJpYWJsZVByZWZpeCIsInZhcmlhYmxlU3VmZml4IiwiaXNTcGVjaWFsQXR0ciIsImF0dHJOYW1lIiwic3RhcnRzV2l0aCIsInNwZWNpYWxBY3Rpb24iLCJpc1NwZWNpYWxBY3Rpb24iLCJwbGFjZWhvbGRlclJlZ2V4IiwiUmVnRXhwIiwiZ2V0VGFnVmFySW5kZXgiLCJzZWFyY2giLCJmcmFnRmluZEFueSIsIm9uZG91YmxlY2xpY2siLCJyZWdleEF0dHIiLCJyZWdleFRhZ09yZyIsInBhcnNlSFRNTCIsInZhbHVlUG9zaXRpb25zIiwiY3VycmVudEVsZW1lbnQiLCJ2YWx1ZUluZGV4IiwicG9zaXRpb24iLCJyZWdleFRhZyIsInJlbW92ZUNvbW1lbnRSZWdYIiwibWF0Y2giLCJwcmVwcm9jZXNzVGFnc0luQ29tbWVudHMiLCJ0YWdNYXRjaCIsImV4ZWMiLCJmdWxsTWF0Y2giLCJ0YWdOYW1lIiwiYXR0clN0cmluZyIsImlzQ2xvc2luZ1RhZyIsImlzU2VsZkNsb3NpbmciLCJlbmRzV2l0aCIsInNsaWNlIiwidGV4dFZhck1hdGNoZXMiLCJzcGxpdEJ5VGFnVmFyIiwiZmFrZVRhZ3NSZWdFeCIsInB1c2hUZXh0VG8iLCJhdHRyaWJ1dGVzIiwiYXR0ck1hdGNoIiwicGFyc2VBdHRyU3RyaW5nIiwibm4iLCJhdCIsImNoIiwidGV4dE5vZGUiLCJwdXNoVG8iLCJ0YyIsInBvc3RQcm9jZXNzVGFnc0luQ29tbWVudHMiLCJpbnB1dFN0cmluZyIsIm5vdEVtcHR5U3RyaW5nTWFwcGVyIiwicGFydCIsImF0dHJWYWx1ZSIsIm5vdEVtcHR5Iiwibm9WYWx1ZSIsImxvd2VyTmFtZSIsInRvTG93ZXJDYXNlIiwiZml4ZWROYW1lIiwiZXZlbnROYW1lIiwiY2xlYW5FdmVudE5hbWUiLCJ2YWx1ZU5hbWUiLCJ3aG9sZVZhbHVlIiwiYXR0clNldCIsImF0dHJWYWx1ZVNwbGl0IiwiZmluZFJlYWxUYWdzUmVnRXgiLCJpc1NwZWNpYWwiLCJ1bnNoaWZ0IiwicmVhbFRhZ3NSZWdFeCIsInNob3J0RnJvbnQiLCJyZXBsYWNlbWVudCIsImh0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhIiwic3RyaW5ncyIsInZhbHVlcyIsImh0bWxTdHJpbmciLCJzYW5pdGl6ZWRGcmFnbWVudHMiLCJyZXN1bHRzIiwic2FmZUZyYWdtZW50IiwiZGlmZiIsImJhbGFuY2VBcnJheUJ5QXJyYXlzIiwiYWRkUGxhY2Vob2xkZXJzIiwiaHRtbEludGVycG9sYXRpb25Ub1BsYWNlaG9sZGVycyIsImpvaW4iLCJlbXB0eSIsIkJhc2ljVHlwZXMiLCJJbW11dGFibGVUeXBlcyIsInRhZyIsImRvbSIsInRlbXBsYXRlciIsInRhZ0NvbXBvbmVudCIsInRhZ0FycmF5IiwiaG9zdCIsInN1YnNjcmliZSIsInNpZ25hbCIsInJlbmRlck9uY2UiLCJzdGF0ZVJlbmRlciIsInZlcnNpb24iLCJEYXRlIiwibm93IiwicmVwbGFjZVBsYWNlaG9sZGVycyIsInZhbHVlQ291bnQiLCJjdXJyZW50VGFpbCIsImxvb3BUYWlsIiwiYXR0cnMiLCJwcm9jZXNzQXR0cmlidXRlcyIsImNoaWxkcmVuIiwiaW5uZXJMb29wVGFpbCIsImV4YW1pbmVDaGlsZCIsImNoaWxkIiwidGV4dENoaWxkIiwic3RyaW5nIiwic2Vjb25kTWF0Y2giLCJ3SW5kZXgiLCJwYXJzZUludCIsInZhckNvbnRlbnQiLCJhZnRlciIsInNwbGljZSIsInYiLCJsYXN0SW5kZXgiLCJtYXBwZWQiLCJ0YWdKc1ZhciIsImxlbmd0aE1hcHBlciIsImxhc3RSdW5zIiwiZ2V0RG9tTWV0YSIsInN0cmluZ0lkIiwiYXJyYXkiLCJnZXRTdHJpbmdzSWQiLCJsYXN0UnVuIiwibWF0Y2hlcyIsImV2ZXJ5IiwiaXNMYXN0UnVuTWF0Y2hlZCIsImRvbU1ldGFNYXAiLCJ0ZW1wbGF0ZSIsImludGVycG9sYXRpb24iLCJwYWludENvbW1hbmRzIiwicGFpbnRSZW1vdmVzIiwicGFpbnRBcHBlbmRzIiwicGFpbnRBZnRlcnMiLCJwYWludGluZyIsImxvY2tzIiwicmVtb3ZlTG9ja3MiLCJzZXRDb250ZW50IiwidGV4dCIsInBhaW50IiwicmVtb3ZlcyIsImNvbnRlbnQiLCJydW5QYWludFJlbW92ZXMiLCJydW5QYWludEN5Y2xlcyIsIm5vd1BhaW50QWZ0ZXJzIiwicnVuQWZ0ZXJDeWNsZSIsImFkZFBhaW50UmVtb3ZlciIsImNhbGxlciIsInBhaW50UmVtb3ZlciIsIl9jYWxsZXIiLCJpbmZvIiwicmVtb3ZlQ2hpbGQiLCJwYWludEJlZm9yZSIsInJlbGF0aXZlIiwiaW5zZXJ0QmVmb3JlIiwicGFpbnRBcHBlbmQiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRDbGVhbmVyIiwiY3JlYXRlRWxlbWVudCIsInRvUGxhaW5UZXh0RWxtIiwiY3JlYXRlVGV4dE5vZGUiLCJwYWludEJlZm9yZVRleHQiLCJjYWxsYmFjayIsInRleHRFbG0iLCJwYWludEJlZm9yZUVsZW1lbnRTdHJpbmciLCJwYWludEFwcGVuZEVsZW1lbnRTdHJpbmciLCJkZWxldGVDb250ZXh0U3ViQ29udGV4dCIsImNvbnRleHRJdGVtIiwib3duZXJTdXBwb3J0IiwidXBkYXRlQ291bnQiLCJkZWxldGVTdWJDb250ZXh0Iiwic3ViQ29udGV4dCIsImRlbGV0ZWQiLCJhcHBlbmRNYXJrZXIiLCJoYXNFbWl0dGVkIiwic3ViQ29udGV4dEl0ZW0iLCJkZXN0cm95IiwiaXNTdGF0aWNUYWciLCJ0YWdKc1R5cGUiLCJpc1RhZ0NvbXBvbmVudCIsInRhZ1R5cGUiLCJpc1N1YmplY3RJbnN0YW5jZSIsInN1YmplY3QiLCJmdW5jdGlvbiIsImlzUHJvbWlzZSIsInRoZW4iLCJvYmplY3QiLCJpc0FycmF5IiwiZ2V0TmV3R2xvYmFsIiwic3RhdGUiLCJuZXdlciIsInN0YXRlcyIsImdsb2JhbCIsImJsb2NrZWQiLCJnZXRTdXBwb3J0SW5DeWNsZSIsInNldFVzZU1lbW9yeSIsInN0YXRlQ29uZmlnIiwic3VwcG9ydCIsInNldFN1cHBvcnRJbkN5Y2xlIiwic2V0Q29udGV4dEluQ3ljbGUiLCJjb250ZXh0IiwiZmluZFN0YXRlU3VwcG9ydFVwQ29udGV4dCIsInN0YXRlTWV0YSIsIm5ld2VzdCIsInBhcmVudENvbnRleHQiLCJnZXRTdXBwb3J0V2l0aFN0YXRlIiwiY29tcG9uZW50IiwicmV0dXJuQXJncyIsImFyZ3MiLCJmaXJzdFN0YXRlc0hhbmRsZXIiLCJzZXR0ZXIiLCJjb25maWciLCJzdGF0ZXNJbmRleCIsInJlU3RhdGVzSGFuZGxlciIsIm9sZFN0YXRlcyIsInByZXZTdXBwb3J0IiwibGFzdFZhbHVlcyIsIl9hcmdzIiwiaW5pdFN0YXRlIiwiaGFuZGxlcnMiLCJoYW5kbGVyIiwicnVuRmlyc3RTdGF0ZSIsInN0YXRlc0hhbmRsZXIiLCJyZWFycmF5IiwicmVTdGF0ZUJ5UHJldiIsInByZXZTdGF0ZSIsInJ1blJlc3RhdGUiLCJyZVN0YXRlU3VwcG9ydCIsIm5ld1N1cHBvcnQiLCJTdGF0ZUVjaG9CYWNrIiwiZ2V0U3RhdGVWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsImNoZWNrVmFsdWUiLCJnZXRDYWxsYmFja1ZhbHVlIiwicmVzdGF0ZSIsImdldENvbnRleHRJbkN5Y2xlIiwibXNnIiwiaW5pdFZhbHVlIiwib3JpZ2luYWwiLCJjb21iaW5lTGF0ZXN0Iiwic3ViamVjdHMiLCJvdXRwdXQiLCJTdWJqZWN0Iiwic3Vic2NyaWJlV2l0aCIsInZhbHVlc1NlZW4iLCJzZXRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsImNsb25lcyIsInN1YnNjcmlwdGlvbnMiLCJnZXRTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVycyIsImNvdW50U3ViamVjdCIsImdsb2JhbFN1YkNvdW50JCIsIm5leHQiLCJ1bnN1YnNjcmliZSIsImZpbmRJbmRleCIsInN1YiIsInJlbW92ZVN1YkZyb21BcnJheSIsInZhbFN1YiIsImFkZCIsInJ1blBpcGVkTWV0aG9kcyIsIm1ldGhvZHMiLCJvbkNvbXBsZXRlIiwiY2xvbmVNZXRob2RzIiwiZmlyc3RNZXRob2QiLCJuZXdWYWx1ZSIsIm1ldGhvZFJlc3BvbnNlIiwic2V0SGFuZGxlciIsImNvbnN0cnVjdG9yIiwib25TdWJzY3JpcHRpb24iLCJ0aGlzIiwiaXNTdWJqZWN0IiwiYmluZCIsImFyZ3VtZW50cyIsIm9yZ0NhbGxiYWNrIiwibGFzdFZhbHVlIiwiZW1pdCIsInN1YnMiLCJ0b1Byb21pc2UiLCJ0b0NhbGxiYWNrIiwicnVudGltZVN1YiIsInRhZ0pzVW5zdWIiLCJwaXBlIiwib3BlcmF0aW9ucyIsInNldE1ldGhvZHMiLCJhcmciLCJkZWZpbmVWYWx1ZU9uIiwiX3ZhbHVlIiwidGFnQ2xvc2VkJCIsImZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZSIsImlnbm9yZU9yRGVzdHJveWVkIiwiaGFzVmFsdWVDaGFuZ2VkIiwidXBkYXRlVG9EaWZmVmFsdWUiLCJkb21Qcm9jZXNzQ29udGV4dEl0ZW0iLCJhcHBlbmRUbyIsImxvY2tlZCIsInByb2Nlc3NJbml0IiwicmVtb3ZlQ29udGV4dEluQ3ljbGUiLCJjYXN0VGV4dFZhbHVlIiwic3BlY2lhbEF0dHJpYnV0ZSIsInNwZWNpYWxOYW1lIiwiYXV0b2ZvY3VzIiwiYXV0b3NlbGVjdCIsIm5hbWVzIiwicGFpbnRTdHlsZSIsImNsYXNzTGlzdEFkZCIsImNsYXNzTGlzdFJlbW92ZSIsInByb2Nlc3NTcGVjaWFsQ2xhc3MiLCJzbWFsbE5hbWUiLCJzZXRQcm9wZXJ0eSIsInJlbW92ZSIsInNlbGVjdCIsImhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZSIsInNldE9iamVjdFZhbHVlIiwic2V0UHJvcGVydHlWYWx1ZSIsImhvd1RvU2V0U3RhbmRBbG9uZUF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJzZXROb25GdW5jdGlvbklucHV0VmFsdWUiLCJzZXRTaW1wbGVBdHRyaWJ1dGUiLCJzZXRCb29sZWFuQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiaGFuZGxlUHJvdmlkZXJDaGFuZ2VzIiwiYXBwU3VwcG9ydCIsInByb3ZpZGVyIiwidGFnc1dpdGhQcm92aWRlciIsIm1lbW9yeSIsImNoaWxkVGFncyIsImNTdWJqZWN0IiwiZ2V0VGFnc1dpdGhQcm92aWRlciIsIm1hcFRvU3VwcG9ydCIsImRlZXBDbG9uZSIsIm1heERlcHRoIiwibWFrZURlZXBDbG9uZSIsImNsb25lIiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJkZWVwRXF1YWwiLCJvYmoxIiwib2JqMiIsImlzRGVlcEVxdWFsIiwiZm4wIiwiZm4xIiwiZ2V0VGltZSIsImlzQXJyYXlEZWVwRXF1YWwiLCJrZXlzMSIsImtleXMiLCJrZXlzMiIsImlzT2JqZWN0RGVlcEVxdWFsIiwic2hhbGxvd1Byb3BNYXRjaCIsInByb3BzIiwicGFzdENsb25lUHJvcHMiLCJsZW4iLCJwYXN0UHJvcCIsIm9iRW50cmllcyIsImVudHJpZXMiLCJzdWJJdGVtIiwib2JqZWN0SXRlbU1hdGNoZXMiLCJwYXN0VmFsdWUiLCJjbG9uZVZhbHVlQXJyYXkiLCJjbG9uZVRhZ0pzVmFsdWUiLCJzaGFsbG93TWFwcGVyIiwic2hhbGxvd0NvbXBhcmVEZXB0aCIsImRlZXBNYXBwZXIiLCJkZWVwQ29tcGFyZURlcHRoIiwiZ2V0QmFzZVN1cHBvcnQiLCJjYXN0ZWRQcm9wcyIsImJhc2VTdXBwb3J0IiwidXBncmFkZUJhc2VUb1N1cHBvcnQiLCJwcm9wc0NvbmZpZyIsImNhc3RQcm9wcyIsInByb3BXYXRjaCIsIlByb3BXYXRjaGVzIiwiSU1NVVRBQkxFIiwibGF0ZXN0IiwiU0hBTExPVyIsImNsb25lUHJvcHNCeSIsInJ1bkJlZm9yZURlc3Ryb3kiLCJwcm92aWRlcnMiLCJkZXN0cm95JCIsImRlc3Ryb3lDb250ZXh0cyIsImxhc3RBcnJheSIsImNoaWxkVmFsdWUiLCJpU3VicyIsInVuc3Vic2NyaWJlRnJvbSIsImNvbnRleHRzIiwiZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveSIsInRhZ3MiLCJzdWJUYWdzIiwiZnJvbSIsImNvbXBhcmVBcnJheUl0ZW1zIiwicmVtb3ZlZCIsIm5ld0xlbmd0aCIsImxlc3NMZW5ndGgiLCJwcmV2Q29udGV4dCIsImRlc3Ryb3lBcnJheUl0ZW0iLCJvbGRLZXkiLCJuZXdWYWx1ZVRhZyIsImlzRGlmZiIsImFycmF5VmFsdWUiLCJydW5BcnJheUl0ZW1EaWZmIiwib2xkZXN0IiwiZGVzdHJveVN1cHBvcnQiLCJkZXN0cm95QXJyYXlJdGVtQnlHbG9iYWwiLCJkZXN0cm95QXJyYXlDb250ZXh0IiwiZGVzdHJveUFycmF5IiwiZGVzdHJveUNsb25lIiwibWFya2VyIiwiZG9tRWxlbWVudCIsInNtYXJ0UmVtb3ZlS2lkcyIsImFsbFByb21pc2VzIiwid2l0aGluT3duZXJFbGVtZW50Iiwic3VwcG9ydE93bmVyIiwiaG9zdERlc3Ryb3kiLCJzaW1wbGVWYWx1ZUVsbSIsInN1Ykdsb2JhbCIsInNtYXJ0UmVtb3ZlQnlDb250ZXh0IiwiZGVzdHJveUNvbnRleHRIdG1sIiwiaHRtbERvbU1ldGEiLCJkZXN0cm95SHRtbERvbU1ldGEiLCJwcm9taXNlcyIsIndyYXBwZXIiLCJyZXR1cm5WYWx1ZSIsImlzTGlrZVRhZ3MiLCJvbGRTdXBwb3J0IiwiaXNMaWtlIiwiaXNMaWtlQmFzZVRhZ3MiLCJfaW5uZXJIVE1MIiwib3V0ZXJIVE1MIiwidGVtcGxhdGVyMCIsInRlbXBsYXRlcjEiLCJuZXdUYWciLCJvbGRUYWciLCJkb21NZXRhMCIsImRvbU1ldGExIiwiaXNMaWtlRG9tVGFncyIsImxpa2UiLCJzdHJpbmdzMCIsInN0cmluZ3MxIiwidmFsdWVzMCIsInZhbHVlczEiLCJ2YWx1ZXNMZW5ndGhzTWF0Y2giLCJhbGxWYXJzTWF0Y2giLCJjb21wYXJlVG8iLCJpc0xpa2VWYWx1ZVNldHMiLCJpc0xpa2VTdHJpbmdUYWdzIiwiZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIiwiZGVzdHJveVN1cHBvcnRDb250ZXh0IiwiY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSIsImxhc3RTdXBwb3J0IiwidHJ5VXBkYXRlVG9UYWciLCJpc1RhZyIsImFkZE9uZUNvbnRleHQiLCJ2YWx1ZVRvVGFnSnNWYXIiLCJhdHRhY2hEeW5hbWljRG9tIiwiZGVwdGgiLCJwbGFjZWhvbGRlciIsInByb2Nlc3NBdHRyaWJ1dGVBcnJheSIsImF0dHJpYnV0ZUNvbnRleHRzIiwiYXR0ciIsImhvd1RvU2V0IiwibmV3Q29udGV4dCIsInByb2Nlc3NBdHRyaWJ1dGUiLCJhdHRhY2hEb21FbGVtZW50Iiwibm9kZSIsImF0dGFjaERvbUVsZW1lbnRzIiwibm9kZXMiLCJuZXdOb2RlIiwiYXR0YWNoRG9tVGV4dCIsIm5ld1BhcmVudENvbnRleHQiLCJpc0F0dHJzIiwib3duZXIiLCJidWlsZEJlZm9yZUVsZW1lbnQiLCJvbGRlciIsImRvbU1ldGEiLCJ0aGlzVGFnIiwibG9hZERvbU1ldGEiLCJhdHRhY2hIdG1sRG9tTWV0YSIsInByb2Nlc3NUYWciLCJwaCIsInRhZ0Zha2VUZW1wbGF0ZXIiLCJwcm9jZXNzSW5pdEF0dHJpYnV0ZSIsInByb2Nlc3NUYWdJbml0IiwicHJvY2Vzc1VwZGF0ZSIsIm5ld1N1cHBvcnRCeVRlbXBsYXRlciIsImNyZWF0ZUh0bWxTdXBwb3J0IiwicHJvY2Vzc05ld1N1YmplY3RUYWciLCJ0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIiLCJnZXRUZW1wbGF0ZXJSZXN1bHQiLCJtYXRjaGVzSW5qZWN0aW9uIiwiaW5qZWN0Iiwic2FmZVJlbmRlclN1cHBvcnQiLCJpc0lubGluZUh0bWwiLCJyZW5kZXJJbmxpbmVIdG1sIiwicmVuZGVyRXhpc3RpbmdTdXBwb3J0IiwiY2hlY2tQcm9wIiwiYWx0ZXJQcm9wIiwiYWxyZWFkeSIsIm1lbSIsIndyYXAiLCJ0b0NhbGwiLCJjYWxsV2l0aCIsIm93bmVyQ29udGV4dCIsIm5vQ3ljbGUiLCJjYWxsYmFja1Jlc3VsdCIsImFwcGx5IiwicnVuIiwiY2FsbGJhY2tQcm9wT3duZXIiLCJhc3NpZ24iLCJnZXRQcm9wV3JhcCIsImlzU2tpcFByb3BWYWx1ZSIsImFmdGVyQ2hlY2tQcm9wIiwiY2hlY2tBcnJheVByb3AiLCJnZXRzZXQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjaGVja09iamVjdFByb3AiLCJvcmlnaW5hbFZhbHVlIiwibmV3UHJvcCIsImV4ZWN1dGVXcmFwIiwidXNlU3VwcG9ydCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJzdGF0ZWxlc3MiLCJjcmVhdGVTdXBwb3J0IiwiZ2V0Q2FzdGVkUHJvcHMiLCJERUVQIiwicHJlQ2FzdGVkUHJvcHMiLCJsYXN0UHJvcHNDb25maWciLCJsYXN0Q2FzdFByb3BzIiwic3luY0Z1bmN0aW9uUHJvcHMiLCJydW5BZnRlclN1cHBvcnRSZW5kZXIiLCJydW5BZnRlclJlbmRlciIsInNhdmVTdGF0ZSIsImNsZWFyU3RhdGVDb25maWciLCJjYWxsVGFnIiwicmVTdXBwb3J0IiwicmVSZW5kZXJUYWciLCJmaXJzdFRhZ1JlbmRlciIsInByb2Nlc3NSZW5kZXJPbmNlSW5pdCIsIm9uZVJlbmRlclRvU3VwcG9ydCIsImNyZWF0ZVN1cHBvcnRXaXRoUHJvcHMiLCJuZXdQcm9wc0NvbmZpZyIsImNvbnZlcnRUYWdUb0VsZW1lbnRNYW5hZ2VkIiwidG9SZW5kZXIiLCJvdmVycmlkZVRhZ1ZhciIsIl9jb250ZXh0SXRlbSIsIl9vd25lclN1cHBvcnQiLCJyZW5kZXJDb250ZW50IiwiY29udmVydFZhbHVlIiwib2xkVHlwZSIsIm5ld1R5cGUiLCJoYXNUeXBlQ2hhbmdlZCIsImhhc0NoYW5nZWQiLCJjaGVja1RhZ1ZhbHVlQ2hhbmdlIiwidXBkYXRlc0hhbmRsZXIiLCJhZnRlckRlc3Ryb3kiLCJnZXRPdmVycmlkZVRhZ1ZhciIsInByb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQiLCJwcm9jZXNzRmlyc3RUYWdSZXN1bHQiLCJwcm9jZXNzVGFnQ29tcG9uZW50SW5pdCIsIl9pbnNlcnRCZWZvcmUiLCJwcm9jZXNzUmVwbGFjZW1lbnRDb21wb25lbnQiLCJyZW5kZXJUYWdVcGRhdGVBcnJheSIsInN1cHBvcnRzIiwibWFwVGFnVXBkYXRlIiwicmVuZGVyU3VwcG9ydCIsInN5bmNTdGF0ZXNBcnJheSIsIm9udG8iLCJzeW5jU3RhdGVzIiwiZ290Iiwic3luY0Zyb21TdGF0ZSIsInN5bmNPbnRvU3RhdGUiLCJvbGRTeW5jU3RhdGVzIiwic3RhdGVGcm9tIiwic3RhdGVUbyIsImludG9TdGF0ZXMiLCJzdGF0ZXNGcm9tIiwiZnJvbVZhbHVlIiwib2xkVmFsdWVzIiwiZ2V0SW5kZXgiLCJzdGF0ZUZyb21UYXJnZXQiLCJvbGRHZXRDYWxsYmFjayIsIm5ld1NldENhbGxiYWNrIiwiXyIsImNoZWNrVG9SZXNvbHZlUHJvbWlzZSIsImxhc3QiLCJyZXNvbHZlUHJvbWlzZSIsInJlc29sdmVWYWx1ZSIsIm5ld2VzdFN1cHBvcnQiLCJuZXdlc3RTdGF0ZU1ldGEiLCJzeW5jU3VwcG9ydHMiLCJnZXRVcFRhZ3MiLCJ0aGVuUmVzb2x2ZUJ5Iiwib25Jbml0Iiwib25EZXN0cm95IiwidGFnQ291bnQiLCJvbkNsaWNrIiwibWFrZUV2ZW50TGlzdGVuZXIiLCJvbk1vdXNlRG93biIsInR5cGUiLCJ0b0JlQ2FsbGVkIiwid3JhcHBlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0YWdFbGVtZW50Iiwib25jbGljayIsIm1vdXNlZG93biIsIm9ubW91c2Vkb3duIiwiZGVmaW5lR2V0U2V0IiwiZXZlbnRGbiIsInBhcmVudFdyYXAiLCJpbm5lclRhZ1dyYXAiLCJnZXRUYWdXcmFwIiwic2V0VXNlIiwiVmFsdWVUeXBlcyIsInRhZ0luZGV4IiwicmV0dXJuV3JhcCIsInVwZGF0ZXMiLCJpbnB1dHMiLCJjaGVja1JlbmRlclVwIiwic2VsZlByb3BDaGFuZ2UiLCJub3dQcm9wcyIsImxhdGVzdFByb3BzIiwiaGFzUHJvcExlbmd0aHNDaGFuZ2VkIiwiaW1tdXRhYmxlUHJvcE1hdGNoIiwiaGFzUHJvcHNUb093bmVyQ2hhbmdlZCIsImhhc1Byb3BDaGFuZ2VzIiwiTk9ORSIsImNhc3RlZFBhc3RQcm9wcyIsImNvbXBhcmUiLCJzdWJDYXN0ZWRQcm9wcyIsInN1YkNvbXBhcmVQcm9wcyIsIm1hdGNoZWQiLCJjb21wYXJlUHJvcHMiLCJvbmVQcm9wQ29tcGFyZSIsImRlZXBQcm9wQ2hhbmdlQ29tcGFyZSIsIm9uRGVsZXRlIiwiY29tcGFyZU9yaWdpbmFsIiwidXNlIiwiZGVlcFByb3BXYXRjaCIsInJvdXRlIiwiX3JvdXRlUHJvcHMiLCJ0YXJnZXRJdGVtIiwiY3VycmVudENvbnRleHQiLCJhdHRyQ29udGV4dCIsImlzQXR0ciIsImFwcCIsIl9yb3V0ZVRhZyIsImltbXV0YWJsZVByb3BzIiwid2F0Y2hQcm9wcyIsIm9uZVJlbmRlckZ1bmN0aW9uIiwicmVuZGVyRnVuY3Rpb24iLCJzeW5jUHJpb3JQcm9wRnVuY3Rpb24iLCJwcmlvclByb3AiLCJvbGRQcm9wIiwidXBkYXRlRXhpc3RpbmdBcnJheSIsImhhc1NldHRlciIsInVwZGF0ZUV4aXN0aW5nT2JqZWN0IiwidXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQiLCJvbGRXcmFwcGVyIiwibmV3V3JhcHBlciIsImlzU2FtZVRhZyIsInNraXBDb21wYXJpbmciLCJzd2FwVGFncyIsIm5ld1RlbXBsYXRlciIsImhhc1N1cHBvcnRDaGFuZ2VkIiwibmV3UHJvcHMiLCJuZXdQcm9wc0FycmF5IiwicHJpb3JQcm9wc0FycmF5IiwibmV3QXJyYXkiLCJzb2Z0RGVzdHJveVN1cHBvcnQiLCJzb2Z0RGVzdHJveU9uZSIsInJlbmRlcldpdGhTdXBwb3J0IiwiZ2V0U3VwcG9ydE9sZGVyU3RhdGUiLCJpc0xpa2VUYWciLCJsYXN0VGVtcGxhdGVyIiwibGFzdFRhZyIsImxhc3REb20iLCJsYXN0U3RyaW5ncyIsIm9sZExlbmd0aCIsImNoZWNrVGFnU29mdERlc3Ryb3kiLCJwSW5kZXgiLCJwTGVuIiwicGNMZW4iLCJtb3ZlUHJvdmlkZXJzIiwid2FzTGlrZVRhZ3MiLCJ1cGRhdGVTdXBwb3J0QnkiLCJpbmxpbmVIdG1sIiwiaXNDb21wb25lbnQiLCJjb250aW51ZVVwIiwicHJvU3VwcG9ydHMiLCJwcm9zV2l0aENoYW5nZXMiLCJoYXNDaGFuZ2UiLCJwcm92aWRlcnNDaGFuZ2VDaGVjayIsImJpbmRTdWJqZWN0Q2FsbGJhY2siLCJzdWJqZWN0RnVuY3Rpb24iLCJiaW5kVG8iLCJ0YWdzVG9VcGRhdGUiLCJhZnRlclRhZ0NhbGxiYWNrIiwicnVuVGFnQ2FsbGJhY2siLCJ0YWdGdW5jdGlvbiIsIm5vRGF0YSIsInByb21pc2VOb0RhdGEiLCJidWJibGVFdmVudCIsInJlcGxhY2VFdmVudE5hbWUiLCJzdG9wcGVkIiwib3JpZ2luYWxTdG9wUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJkZWZhdWx0UHJldmVudGVkIiwiYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIiLCJhcHBFbGVtZW50IiwiZ2V0RXZlbnRSZWZlcmVuY2VOYW1lIiwiZXZlbnRSZWciLCJldmVudHMiLCJsaXN0ZW5lciIsInByb2Nlc3NBdHRyaWJ1dGVGdW5jdGlvbiIsIm5ld0F0dHJWYWx1ZSIsImZ1biIsImlzTm9EaXNwbGF5VmFsdWUiLCJwcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZSIsInByb2Nlc3NVcGRhdGVBdHRyQ29udGV4dCIsImF0dHJDb250ZXh0SXRlbSIsInRhZ1ZhbHVlIiwib2xkVmFsdWUiLCJpc05hbWVPbmx5IiwidXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUiLCJvbmVSZW5kZXIiLCJwcm9jZXNzVGFnQ2FsbGJhY2tGdW4iLCJwcm9jZXNzQXR0cmlidXRlU3ViamVjdFZhbHVlIiwiY2FsbGJhY2tGdW4iLCJwcm9jZXNzQXR0cmlidXRlRW1pdCIsImNyZWF0ZUR5bmFtaWNBcnJheUF0dHJpYnV0ZSIsInN0YXJ0SW5kZXgiLCJzZXRCeSIsImNvbmNhdFZhbHVlIiwibXlJbmRleCIsInB1c2hWYWx1ZSIsImJ1aWxkTmV3VmFsdWVGcm9tQXJyYXkiLCJuZXdWYWx1ZXMiLCJjcmVhdGVEeW5hbWljQXR0cmlidXRlIiwidmFySW5kZXgiLCJfY29udGV4dHMiLCJwcm9jZXNzVGFnSnNBdHRyaWJ1dGUiLCJwcm9jZXNzTm9uRHluYW1pY0F0dHIiLCJwcm9jZXNzRHluYW1pY05hbWVWYWx1ZUF0dHJpYnV0ZSIsImdldFRhZ0pzVmFyIiwiYXR0clBhcnQiLCJpc05hbWVWYXIiLCJ2YWx1ZUluVmFsdWVzIiwic3RhdGVPd25lciIsIm9sZFRhZ0pzVmFyIiwicHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlIiwidmFsdWVWYXIiLCJzcGVjaWFsIiwicGFpbnRDb250ZW50UHVzaCIsImlubmVyVmFsdWUiLCJ0YWdKc1Zhck92ZXJyaWRlIiwicHJvY2Vzc0Z1bmN0aW9uQXR0ciIsInByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUiLCJuZXdUYWdWYXIiLCJwcm9jZXNzU2ltcGxlQXR0cmlidXRlIiwiZGVsZXRlU2ltcGxlQXR0cmlidXRlIiwiY2hlY2tTaW1wbGVWYWx1ZUNoYW5nZSIsImdldFNpbXBsZVRhZ1ZhciIsInByb2Nlc3NTaW1wbGVWYWx1ZUluaXQiLCJkZWxldGVTaW1wbGVWYWx1ZSIsImNoZWNrVXBkYXRlRGVsZXRlU2ltcGxlVmFsdWVDaGFuZ2UiLCJwcm9jZXNzU3RyaW5nVXBkYXRlIiwiY2FzdGVkVmFsdWUiLCJvbGRDbG9uZSIsInByb2Nlc3NVcGRhdGVSZWd1bGFyVmFsdWUiLCJjaGVja0FycmF5VmFsdWVDaGFuZ2UiLCJwcm9jZXNzVGFnQXJyYXkiLCJub0xhc3QiLCJydW50aW1lSW5zZXJ0QmVmb3JlIiwiZmlsdGVyZWRMYXN0IiwibmV3UmVtb3ZlZCIsInJldmlld0FycmF5SXRlbSIsInByZXZpb3VzIiwiaXRlbVN1YmplY3QiLCJjb3VsZEJlU2FtZSIsImNyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbSIsInJldmlld1ByZXZpb3VzQXJyYXlJdGVtIiwiZ2V0QXJyYXlUYWdWYXIiLCJwcm9jZXNzQXJyYXlJbml0IiwicHJvY2Vzc0FycmF5VXBkYXRlcyIsImdldEJhc2ljVGFnVmFyIiwib25GaXJzdFN1YkNvbnRleHQiLCJndWFyYW50ZWVJbnNlcnRCZWZvcmUiLCJwcm9jZXNzU3Vic2NyaWJlV2l0aCIsImVtaXRTdWJDb250ZXh0Iiwib2JzZXJ2YWJsZSIsIk9ic2VydmFibGVzIiwic3ViVmFsdWVIYW5kbGVyIiwid2l0aERlZmF1bHQiLCJlbWl0VmFsdWUiLCJwcm9jZXNzVXBkYXRlU3Vic2NyaWJlIiwicmVzdWx0TnVtIiwiY2hlY2tTdGlsbFN1YnNjcmlwdGlvbiIsImluc2VydEJlZm9yZU9yaWdpbmFsIiwib2JzZXJ2YWJsZXMiLCJvbk91dHB1dCIsInN5bmNSdW4iLCJjaGVja1RvUGFpbnQiLCJ1cGRhdGVWYWx1ZSIsImFDb250ZXh0Iiwic2V0dXBTdWJzY3JpYmVDYWxsYmFja1Byb2Nlc3NvciIsInZhbHVlc0hhbmRsZXIiLCJuZXdlc3RQYXJlbnRUYWdKc1ZhciIsInJlc3BvbnNlVmFsdWUiLCJ1bnN1YnNjcmliZUNvbnRleHQiLCJwcm9jZXNzU2lnbmFsIiwicHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZSIsIl90YWdKc1ZhciIsImNhbGxiYWNrVmFsdWUiLCJjb250ZXh0SXRlbTIiLCJwcm9jZXNzU3Vic2NyaWJlV2l0aEF0dHJpYnV0ZSIsIm9iVmFsdWUiLCJlbWl0U3ViU2NyaXB0aW9uQXNJcyIsIk9ic2VydmFibGUiLCJuZXdPYnNlcnZlcyIsIm9sZE9ic2VydmVzIiwib2IiLCJpbml0aWFsVmFsdWUiLCJTaWduYWwiLCJTZXQiLCJ1bnN1YiIsImRlbGV0ZSIsIlZhbHVlU3ViamVjdCIsInN1cGVyIiwiVmFsdWVTdWJqZWN0aXZlIiwid2F0Y2giLCJjdXJyZW50VmFsdWVzIiwic2V0dXBXYXRjaCIsImRlZmF1bHRGaW5hbGx5IiwiaW5pdCIsImJlZm9yZSIsImZpbmFsIiwicGFzdFJlc3VsdCIsInByZXZpb3VzVmFsdWVzIiwiZGVmaW5lT25NZXRob2QiLCJnZXRXYXRjaCIsImF0dGFjaFRvIiwic2V0dXAiLCJvbGRXYXRjaCIsImZpcnN0U3VwcG9ydCIsIm9sZFN0YXRlIiwibWV0aG9kIiwibm93U3VwcG9ydCIsInNldFRvIiwibmV3ZXN0U3RhdGUiLCJvbGRlc3RTdGF0ZVN1cHBvcnQiLCJsZXRQcm9wIiwicHJvcFN0YXRlczIiLCJwYXNzZXMiLCJwYXNzZWRPbiIsIm5vd1ZhbHVlcyIsIl94IiwiZGlyZWN0aW9uIiwiZ2V0QmxhbmtEaWZmTWVtb3J5Iiwic3RhdGVEaWZmIiwibmV3V2F0Y2giLCJvbGRlc3RTdGF0ZSIsImNvbnN0cnVjdE1ldGhvZCIsInN0YXRlRGlmZk1lbW9yeSIsIm9sZFN0YXRlQ291bnQiLCJpbnN0YW5jZSIsImNtIiwib3duZXJQcm92aWRlcnMiLCJmaW5kIiwid2FybiIsIlRhZ0Vycm9yIiwiZXJyb3JDb2RlIiwiZGV0YWlscyIsIlN5bmNDYWxsYmFja0Vycm9yIiwiY2FsbGJhY2tTdGF0ZVVwZGF0ZSIsIl9vbGRTdGF0ZXMiLCJtYXliZVByb21pc2UiLCJmaW5hbGx5IiwiY2FsbGJhY2tTdGF0ZSIsImNhbGxiYWNrVHJpZ2dlciIsImNyZWF0ZVRyaWdnZXIiLCJjYWxsYmFja01ha2VyIiwic3luY0Vycm9yIiwiZmlyc3RTaWduYWwiLCJzaWciLCJlZGl0b3JzIiwicmVhZGVycyIsInJlc2lnbmFsIiwiUHJveHkiLCJhY3Rpb24iLCJnZXRFbGVtZW50IiwicHJvY2Vzc1VwZGF0ZU9uZUNvbnRleHQiLCJvbGRlclN1cHBvcnQiLCJuZXdlclN1cHBvcnQiLCJuZXdUZW1wbGF0ZSIsInRlbXBUYWciLCJ1cGRhdGVTdXBwb3J0VmFsdWVzQnkiLCJwcm9jZXNzVXBkYXRlQ29udGV4dCIsInByZXBhcmVVcGRhdGVUb0NvbXBvbmVudCIsIm9sZFR0YWciLCJ2YWx1ZVN1cHBvcnQiLCJoYW5kbGVTdGlsbFRhZyIsInByb2Nlc3NOb3dSZWd1bGFyVmFsdWUiLCJoYW5kbGVUYWdUeXBlQ2hhbmdlRnJvbSIsIm9yaWdpbmFsVHlwZSIsInByb2Nlc3NEb21UYWdJbml0IiwicHJvY2Vzc091dGVyRG9tVGFnSW5pdCIsImNoZWNrT3V0ZXJUYWdWYWx1ZUNoYW5nZSIsImdldFN0cmluZ1RhZyIsImtleVRhZyIsInNldEhUTUwiLCJvbGRQcm9jZXNzSW5pdCIsImFjY2VwdElubmVySFRNTCIsInVzZVRhZ1ZhciIsInN0cmluZ1RhZyIsImdldERvbVRhZyIsInB1dE9uZURvbURvd24iLCJuZXdGcmFnbWVudCIsImxvYWROZXdCYXNlU3VwcG9ydCIsInJlbmRlclRhZ0VsZW1lbnQiLCJ0ZW1wbGF0ZXIyIiwiaXNBcHBGdW5jdGlvbiIsImlzRmlyc3RSZW5kZXIiLCJleGVjdXRlU3RhdGVXcmFwIiwicnVuV3JhcHBlciIsImlzQXBwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRvQXdhaXQiLCJhcHBFbGVtZW50cyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJkb21JdGVtIiwicmVnaXN0ZXJUYWdFbGVtZW50IiwidGFnZ2VkSnMiLCJhcHBFbG1JbmRleCIsImFwcEVsbSIsImRlYnVnIiwiZ2V0TmV3U3ViamVjdCIsInN5bmNXcmFwQ2FsbGJhY2siLCJuZXdlclN0YXRlcyIsIm9sZGVyU3RhdGVzIiwibmV3ZXN0T3duZXIiLCJjIiwibmV3R2xvYmFsIiwiaGFuZGxlSW5uZXJIVE1MIiwicmVhbFZhbHVlIiwicHJvY2Vzc0lubmVySFRNTCIsImNoZWNrSW5uZXJIVE1MIiwib3B0aW9ucyIsImJhc2VIb3N0IiwicHJvY2Vzc0hvc3RBdHRyaWJ1dGUiLCJwcm9jZXNzSG9zdCIsInByb2Nlc3NIb3N0VXBkYXRlIiwiZGVsZXRlSG9zdCIsImluamVjdENhbGxiYWNrIiwicmV0dXJuRnVuY3Rpb24iLCJvbGRPcHRpb25zIiwibmV3SG9zdCIsInJlU3RhdGUiLCJwcm9jZXNzSG9zdFRhZ0pzVmFyIiwiY2FsbGJhY2tXcmFwcGVyMiIsIndyYXBDYWxsYmFjayIsImUiLCJsaXN0ZW5lcnMiLCJhbGxMaXN0ZW5lcnMiLCJhdHRyMiIsImlzVmFsdWVGb3JDb250ZXh0IiwicmVnaXN0ZXJNb2NrQXR0ckNvbnRleHQiLCJlbGVtZW50RnVuY3Rpb25zIiwibWFrZUNhbGxiYWNrIiwiZ2V0UHVzaEtpZCIsImNhbGxiYWNrV3JhcHBlciIsImNhbGxhYmxlcyIsIm9uQ2hhbmdlIiwib25LZXl1cCIsIm1vY2tFbG0iLCJzZXR1cEF0dHIiLCJzZWxlY3RlZCIsImNsYXNzIiwicHJvY2Vzc0NoaWxkcmVuIiwiYWRkZWRDb250ZXh0cyIsInBhaW50QnkiLCJuZXdFbGVtZW50IiwicHJvY2Vzc0VsZW1lbnRWYXIiLCJoYW5kbGVTaW1wbGVJbm5lclZhbHVlIiwic3ViQ29udGV4dHMiLCJfYyIsInN1YlN1YiIsImFTdWJDb250ZXh0IiwicHJvY2Vzc05vbkVsZW1lbnQiLCJwcm9jZXNzRWxlbWVudFZhckZ1bmN0aW9uIiwic3RhdGVTdXBwb3J0IiwiZGVzdHJveURlc2lnbkVsZW1lbnQiLCJkZXN0cm95RGVzaWduQnlDb250ZXh0cyIsInByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlIiwiY2hlY2tUYWdFbGVtZW50VmFsdWVDaGFuZ2UiLCJ2Q29udGV4dHMiLCJvZ0xpc3RlbmVycyIsIm5ld0xpc3RlbmVyIiwiZGVzaWduRWxlbWVudCIsInB1c2hLaWQiLCJfZWxtRnVuY3Rpb25zIiwibm9FbGVtZW50IiwicHJvY2Vzc05vRWxtSW5pdCIsIm5vRWxlbWVudE1ha2VyIiwiaHIiLCJoMiIsImgzIiwib2wiLCJsaSIsImRpdiIsImZpZWxkc2V0IiwibGVnZW5kIiwicCIsImEiLCJzcGFuIiwic3Ryb25nIiwic21hbGwiLCJsYWJlbCIsInN1cCIsImhtciIsInJlbmRlckNvdW50RGl2IiwiaW5zaWRlTXVsdGlSZW5kZXIiLCJjb3VudGVyJCIsImNvdW50ZXJTaWduYWwkIiwiYWxsU3RyaW5nczIyNjU5NDEiLCJ0ZXN0VGltZW91dCIsInJ1blRlc3RpbmciLCJtYW51YWwiLCJydW5TdGFydEVuZFRlc3RzIiwiY2xlYXJUaW1lb3V0Iiwic3RvcmFnZSIsInZpZXdzIiwidGVzdENvdW50IiwiVmlld1R5cGVzIiwiQ29udGVudCIsIlN1YnNjcmlwdGlvbnMiLCJDb3VudGVycyIsIlByb3BzIiwiUHJvdmlkZXJEZWJ1ZyIsIlRhZ1N3aXRjaERlYnVnIiwiQ2hpbGQiLCJBcnJheXMiLCJNaXJyb3JpbmciLCJXYXRjaFRlc3RpbmciLCJGdW5JblByb3BzVGFnIiwiQXR0cmlidXRlRGVidWciLCJPbmVSZW5kZXIiLCJUb2RvIiwiRGVzdHJveXMiLCJCYXNpYyIsInN0YXJ0IiwicnVuSXNvbGF0ZWRUZXN0cyIsImFsZXJ0IiwibG9jYWxTdG9yYWdlIiwidGFnZ2VkanMiLCJhdXRvVGVzdCIsInBhcnNlIiwiZ2V0U2NvcGVkU3RvcmFnZSIsInNhdmVTY29wZWRTdG9yYWdlIiwiZGVmYXVsdFZpZXdUeXBlcyIsInNlY3Rpb25TZWxlY3RvciIsInZpZXdUeXBlcyIsInNvcnRlZFZpZXdUeXBlcyIsInNvcnQiLCJiIiwibG9jYWxlQ29tcGFyZSIsIm1ldGEiLCJvdXRwdXRTZWN0aW9ucyIsInMiLCJjaGVja1Rlc3RpbmciLCJkZWFjdGl2YXRlIiwidmlld0NoYW5nZWQiLCJ0b2dnbGVWaWV3VHlwZSIsImVtb2ppIiwiZm9yIiwiaHJlZiIsInZpZXdUeXBlIiwiYWN0aXZhdGUiLCJ0ZW1wTm90ZSIsImFycmF5RnVuVGFnIiwiZGVsZXRlSXRlbSIsImFsbFN0cmluZ3MxOTM0NyIsImZ1bkluUHJvcHNDaGlsZCIsImFyZzAiLCJtYWluUHJvcCIsIm15RnVuY3Rpb24zIiwib3RoZXIiLCJfXyIsImFkZEFycmF5SXRlbSIsIm15RnVuY3Rpb24iLCJhbGxTdHJpbmdzNTk4NjY5IiwibXlDaGlsZEZ1bmN0aW9uIiwibWFpbiIsImFkZEFycmF5Q29tcG9uZW50IiwiaGFuZGxlS2V5VXAiLCJzaG93Q2hpbGQiLCJzb21ldGhpbmdFbHNlIiwiSXRlbSIsInRvZG8iLCJkaXNwYXRjaCIsImVkaXRpbmciLCJhbGxTdHJpbmdzMzQ5OTc2IiwiY29tcGxldGVkIiwidGl0bGUiLCJoYW5kbGVLZXkiLCJyZW1vdmVJdGVtIiwidXBkYXRlVG9CeUluZGV4IiwiaGFuZGxlVXBkYXRlIiwidG9nZ2xlSXRlbSIsInJlbW92ZUl0ZW1CeUluZGV4Iiwib25WYWxpZCIsImFsbFN0cmluZ3M0Nzg2MCIsIkZvb3RlciIsInRvZG9zQ291bnQiLCJyZW1vdmVDb21wbGV0ZWQiLCJhY3RpdmVUb2RvQ291bnQiLCJhbGxTdHJpbmdzNzcxNTYiLCJnZXRIYXNoIiwic3Vic3RyaW5nIiwidXNlSGFzaFJvdXRlciIsIm9uSGFzaENoYW5nZSIsIkhhc2hSb3V0ZXIiLCJ0b2RvcyIsInBhcnRpYWwiLCJhZGRJdGVtIiwiTWF0aCIsInJhbmRvbSIsInQiLCJyZW1vdmVBbGwiLCJ0b2dnbGVBbGwiLCJjb21wbGV0ZUl0ZW0iLCJ1cGRhdGVJdGVtQnlJbmRleCIsInRvZG9SZWR1Y2VyIiwidG9kb0FwcCIsImlzQ29tcGxldGVkUm91dGUiLCJ2aXNpYmxlVG9kb3MiLCJ0b2RvQ291bnQiLCJuZXdNYXAiLCJhbGxTdHJpbmdzMTQzMTgwIiwiSGVhZGVyIiwiaW5uZXJIdG1sVGVzdCIsIl9wcm9wcyIsImlubmVySHRtbFByb3BzVGVzdCIsImFsbFN0cmluZ3MxMjcwOTAiLCJ0ZXN0MjIiLCJhbGxTdHJpbmdzODAxOTc0Iiwibm9UYWdUZXN0IiwiY2hpbGRBc1Byb3BUZXN0IiwiZGVzdHJveXMiLCJvbiIsInRvRGVzdHJveSIsImZ4SW4iLCJmeE91dCIsIm91dFBvc2l0aW9uQWJzb2x1dGUiLCJpbiIsInN0YWdnZXIiLCJhbmltYXRlSW5pdCIsImZ4TmFtZSIsIm91dCIsImFuaW1hdGVEZXN0cm95Iiwib3BhY2l0eSIsIndhaXQiLCJhZGRDbGFzc2VzVG8iLCJ6SW5kZXgiLCJ0b1RvcCIsIm9mZnNldFRvcCIsInRvTGVmdCIsIm9mZnNldExlZnQiLCJ0b1dpZHRoIiwiY2xpZW50V2lkdGgiLCJvZmZzZXRXaWR0aCIsInRvSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiY2FwdHVyZUVsZW1lbnRQb3NpdGlvbiIsInByb21pc2UiLCJoYW5kbGVBbmltYXRpb25FbmQiLCJmYWRlSW5VcCIsImZhZGVPdXREb3duIiwiZmFkZUluRG93biIsImZhZGVPdXRVcCIsImZhZGVJbiIsImZhZGVPdXQiLCJmeCIsImluTmFtZSIsIm91dE5hbWUiLCJkdXJhdGlvbiIsInNldHVwRngiLCJkZXN0cm95UHJvbWlzZSIsImNyZWF0ZWQiLCJhcnJheVNjb3JlRGF0YSIsInNjb3JlIiwicGxheWVySW5kZXgiLCJhbGxTdHJpbmdzNjc4NzgiLCJmcmFtZSIsImFycmF5cyIsInBsYXllcnMiLCJzaWduYWxBcnJheSIsInNpbXBsZUFycmF5IiwiYXJyYXlGeCIsInN0YWdnZXJUaW1lIiwidG90YWxTdGFnZ2VyIiwiZnhHcm91cCIsImdldE5ld1BsYXllciIsInNjb3JlcyIsInJlcGVhdCIsIl92IiwiZmxvb3IiLCJyZW1vdmVQbGF5ZXJCeUluZGV4IiwicGxheWVyIiwiZWRpdCIsImFkZEFycmF5U2lnbmFsIiwibG9vcFRpbWVzIiwiZ2V0UGxheWVyRGlzcGxheSIsInBsYXllclNjb3JlRGlzcGxheSIsInRhZ1N3aXRjaERlYnVnIiwiX3QiLCJzZWxlY3RlZFRhZyIsInRhZzEiLCJ0YWcyIiwidGFnMyIsInRlcm5hcnlQcm9wVGVzdCIsImFycmF5U3dpdGNoaW5nIiwibWlycm9yaW5nIiwidGFnQ291bnRlciIsImFsbFN0cmluZ3MxNTY3MzQiLCJfX18iLCJhbGxTdHJpbmdzNTM5MjkiLCJwcm9wc0RlYnVnTWFpbiIsInN5bmNQcm9wTnVtYmVyIiwicHJvcE51bWJlciIsInByb3BzSnNvbiIsImRhdGUiLCJqc29uIiwic3RhdGVQcm9wRGlzcGxheSIsImFsbFN0cmluZ3MzMTk4MzE1IiwicHJvcHNEZWJ1ZyIsInByb3BOdW1iZXJDaGFuZ2UiLCJzeW5jUHJvcERlYnVnIiwicGFyZW50VGVzdCIsInRpbWVzdGFtcCIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiU3RyaW5nIiwiZ2V0TW9udGgiLCJwYWRTdGFydCIsImRheSIsImdldERhdGUiLCJob3VycyIsImdldEhvdXJzIiwibWludXRlcyIsImdldE1pbnV0ZXMiLCJ0aW1lc3RhbXBUb1ZhbHVlcyIsIm5ld0RhdGVTdHJpbmciLCJwcm9wRGF0ZURlYnVnIiwicHJvcE51bWJlckNoYW5nZUNvdW50IiwibXlQcm9wTnVtYmVyIiwiX3N0YXRlcyIsIndhdGNoUmVzdWx0cyIsInByb3BGblVwZGF0ZVRlc3QiLCJkaWFsb2ciLCJwcm92aWRlckNsYXNzIiwiYWxsU3RyaW5nczI0ODgwNSIsInNob3dEaWFsb2ciLCJpbmplY3Rpb25XcmFwIiwic2VsZWN0ZWRDaGFuZ2UiLCJ0YXJnZXRzIiwiaW5qZWN0aW9uVGFyZ2V0Iiwid3JhcEhvc3QiLCJpbmplY3Rpb25UYWciLCJzZWxlY3RlZFRlc3QiLCJuZXdTZWxlY3RlZCIsImFsbFN0cmluZ3MxNzE1MjQiLCJUYWdEZWJ1Z1Byb3ZpZGVyIiwidGFnRGVidWciLCJQcm92aWRlckZ1bmMiLCJ0YWdEZWJ1Z1Byb3ZpZGVyIiwidXBwZXIiLCJ1cHBlclRhZ0RlYnVnUHJvdmlkZXIiLCJwcm92aWRlckRlYnVnIiwic2hvd01vZGFsIiwiYWxsU3RyaW5nczY4NTc5MjkiLCJwcm92aWRlckNoaWxkRGVidWciLCJwcm9wQ291bnRlckNoYW5nZSIsImluQ3ljbGVDb250ZXh0Q29tbXMiLCJmdW5jUHJvdmlkZXIiLCJ1cHBlclByb3ZpZGVyIiwic2hvd1Byb1Byb3BzIiwiY2FsbGJhY2tzIiwiY2FsbGJhY2tUZXN0U3ViIiwieSIsInRlc3RQcm92aWRlckFzUHJvcHMiLCJpbkN5Y2xlUGFyZW50IiwiZ2FwIiwiaW5DeWNsZUNoaWxkIiwicGFyZW50IiwiZmxleCIsImluQ3ljbGVDaGlsZDIiLCJpbkN5Y2xlQ2hpbGQzIiwiY29sb3JPcHRpb25zIiwiY3ljbGVDb2xvclBhcmVudCIsImN5Y2xlQ29sb3JDaGlsZCIsImN5Y2xlQ29sb3JDaGlsZDIiLCJoaWRlU2hvd0N5Y2xlcyIsIm1vdXNlT3ZlclRhZyIsIm1vdXNlT3ZlckVkaXRTaG93IiwiYWxsU3RyaW5nczE0MDQwNyIsImxvYWRTdGFydFRpbWUiLCJjb3VudGVycyIsImFwcENvdW50ZXJTdWJqZWN0IiwiZ2xvYmFsU3VicyIsImlubmVyQ291bnRlckNvbnRlbnQiLCJpbm5lckNvdW50ZXJzIiwiaW5jcmVhc2VQcm9wQ291bnRlciIsIm90aGVyQ291bnRlciIsImVsbUluaXRDb3VudCIsInNoYWxsb3dQcm9wQ291bnRlcnMiLCJhbGxTdHJpbmdzOTczNzE2MSIsImltbXV0YWJsZVByb3BDb3VudGVycyIsIm5vV2F0Y2hQcm9wQ291bnRlcnMiLCJzdGF0ZXNSZW5kZXJDb3VudCIsInN0YXRlc1JlbmRlckNvdW50MiIsImNvdW50ZXIyIiwiaW5pdENvdW50ZXIiLCJjYWxsYmFja1RvIiwieiIsImNhbGxiYWNrVGVzdFN1YjIiLCJjYWxsYmFja1Rlc3RTdWIzIiwicGlwZWRTdWJqZWN0MCIsInBpcGVkU3ViamVjdDEiLCJwaXBlZFN1YmplY3QyIiwicGlwZWRTdWJqZWN0MyIsInJlYWRTdGFydFRpbWUiLCJib2xkIiwidGFibGVEZWJ1ZyIsInNob3dDZWxsIiwiYWxsU3RyaW5nczUyNzgyIiwiY29sdW1uRWRpdG9yIiwiaW5jbHVkZWQiLCJjb2x1bW5OYW1lcyIsImFsbENvbHVtbk5hbWVzIiwiZWRpdEZvcm11bGEiLCJmb3JtdWxhcyIsImFsbFN0cmluZ3M0MzE2OTEiLCJpbmRleE9mIiwiZXZ0IiwidXBkYXRlRm9ybXVsYSIsImZvcm11bGEiLCJuZXdGb3JtdWxhIiwic3RyaW5nRm9ybXVsYSIsInNhbmRib3hSdW5FdmFsIiwic3JjIiwiY3R4IiwiaGFzIiwiRnVuY3Rpb24iLCJzYW5kYm94RXZhbCIsImFycmF5VGFibGUiLCJzaG93QWxsIiwic2hvd0tpZHMiLCJ0b2dnbGVDb2x1bW5EaWFsb2ciLCJmb3JtYXRDaGFuZ2UiLCJhbGxvd01heGltaXplIiwiZXZlcnlTaW1wbGVWYWx1ZSIsImFsbFN0cmluZ3MxMjIxODQiLCJyb3ciLCJkdW1wIiwic2hvd0xldmVscyIsImlzUm9vdER1bXAiLCJhcnJheURpc3BsYXkiLCJhbGxTdHJpbmdzMTUyMTI3IiwiaW5wdXRPYmplY3QiLCJrZXlzQXJyYXkiLCJmaWx0ZXJlZE9iamVjdCIsImZpbHRlck9iamVjdEJ5S2V5cyIsInBhcmFtVmFsdWVLZXlzIiwib25IZWFkZXJDbGljayIsImFycmF5c0Rpc3BsYXkiLCJhcnJheVZpZXciLCJnZXRBbGxLZXlzIiwiZGVmYXVsdENvbHVtbk5hbWVzIiwic2hvd0NvbHVtbkRpYWxvZyIsInVuaXF1ZUlkIiwicGVyZm9ybWFuY2UiLCJub0luaXQiLCJjbG9zZSIsImFycmF5VGFnIiwiYWxsU3RyaW5nczQ2MzE3MSIsImR1bXBBcnJheSIsInNob3ciLCJzaG93TG93ZXIiLCJtYXhpbWl6ZSIsIm1heGltaXplSWQiLCJ0b2dnbGVNYXhpbWl6ZSIsImR1bXBCb2R5IiwiZ2V0SGVhZGVyIiwiYWxsU3RyaW5nczQ3OTM3MCIsImRpc3BsYXlPcHRpb25zIiwiY29weVRleHQiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImV4ZWNDb21tYW5kIiwiZHVtcFNpbXBsZSIsImlzTGlua1ZhbHVlIiwiZGlzcGxheVZhbHVlIiwic2ltcGxlVmFsdWUiLCJsaW5rVmFsdWUiLCJhbGxTdHJpbmdzMjQ2OTc4IiwiaXNMaWtlTnVsbCIsIm51bWJlciIsInRvTG9jYWxlU3RyaW5nIiwiZ2V0TGFyZ2VOdW1iZXJUaXRsZSIsImRvd25UaW1lIiwicHJldmVudERlZmF1bHQiLCJkdW1wT2JqZWN0IiwiY29udGludWVEdW1wIiwiZ2V0SGVhZCIsImFsbFN0cmluZ3M0NzAyNDQiLCJnZXREdW1wQm9keSIsImNvbnRyb2xQYW5lbCIsImZvcm1hdCIsInNob3dBbGxDaGFuZ2UiLCJhbGxTdHJpbmdzNDQwODMzIiwiY29weUFzSnNvblRleHQiLCJ0eXBpbmciLCJnZXRPYmplY3RUZW1wbGF0ZSIsImR1bXBDb3VudCIsImFsbFN0cmluZ3MzMDYxODgiLCJkdW1wQ29udGVudCIsInVzZXJKc29uU3RyaW5nIiwidXNlckpzb24iLCJiYWRFdmFsIiwic2FtcGxlRHVtcCIsImFub3RoZXJPbmUiLCJhcnJheVRlc3QiLCJzdHJlZXQiLCJhbGxTdHJpbmdzMTgzNjMyIiwiZXJyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbmNhdFN0eWxlcyIsIm1pbiIsIm1heCIsInN0ZXAiLCJ2czAiLCJvcmFuZ2VUb2dnbGUiLCJib2xkVG9nZ2xlIiwic3RhZ2dlckJ5Iiwic2hvd0hpZGVGeCIsImNvdW50cyIsImFkZGVkIiwiYWxsU3RyaW5nczY0NzY2MyIsIm91dGVySHRtbCIsImlubmVySHRtbFRhZyIsIm51bWJlcmVkTm9QYXJlbnRzIiwid2F0Y2hUZXN0aW5nIiwic3RhdGVOdW0iLCJzdGF0ZU51bUNoYW5nZUNvdW50Iiwic2xvd0NoYW5nZUNvdW50Iiwic3ViamVjdENoYW5nZUNvdW50IiwidHJ1dGhDaGFuZ2UiLCJ0cnV0aENoYW5nZUNvdW50IiwidHJ1dGhTdWJDaGFuZ2VDb3VudCIsIndhdGNoUHJvcE51bVNsb3ciLCJ3YXRjaFByb3BOdW1TdWJqZWN0IiwiYXNTdWJqZWN0Iiwid2F0Y2hUcnV0aCIsInRydXRoeSIsIndhdGNoVHJ1dGhBc1N1YiIsImFsbFN0cmluZ3MyMTg3NjEzIiwic3Vic2NyaWJlQXR0cmlidXRlcyIsInN1YkNvbG9yJCIsInN1YkNvbG9yUHVycGxlT3JhbmdlJCIsInN1YkNvbG9yR3JlZW5ZZWxsb3ckIiwic2hvdWxkSGlkZUF0dHJpYnV0ZXMiLCJzdWJDb2xvciIsImN1cnJlbnRDb2xvciIsImF0dHJpYnV0ZURlYnVnIiwiaXNPcmFuZ2UiLCJiYXNpYyIsInNob3dEaXYiLCJib2x0VGFnIiwicGFyZW50Q291bnRlciIsImFycmF5Qm9sdFRlc3QiLCJpbm5lckNvdW50ZXIiLCJleHRlbmRTdGF0aWNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfX2V4dGVuZHMiLCJUeXBlRXJyb3IiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImRvbmUiLCJfX2dlbmVyYXRvciIsImYiLCJzZW50IiwidHJ5cyIsIm9wcyIsImciLCJJdGVyYXRvciIsInZlcmIiLCJpdGVyYXRvciIsIm4iLCJvcCIsIl9fdmFsdWVzIiwibSIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWRBcnJheSIsInBhY2siLCJsIiwiY29uY2F0IiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwiQXN5bmNJdGVyYXRvciIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJfX2FzeW5jVmFsdWVzIiwiU3VwcHJlc3NlZEVycm9yIiwiY3JlYXRlRXJyb3JDbGFzcyIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJfc3VwZXIiLCJlcnJvcnMiLCJhcnJSZW1vdmUiLCJhcnIiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJlXzFfMSIsInJldHVybiIsImluaXRpYWxGaW5hbGl6ZXIiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsIkVNUFRZX1NVQlNDUklQVElPTiIsImlzU3Vic2NyaXB0aW9uIiwib25VbmhhbmRsZWRFcnJvciIsIm9uU3RvcHBlZE5vdGlmaWNhdGlvbiIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJ0aW1lb3V0UHJvdmlkZXIiLCJ0aW1lb3V0IiwiX2kiLCJkZWxlZ2F0ZSIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJlcnJvckNvbnRleHQiLCJpc1Jvb3QiLCJlcnJvclRocm93biIsIlN1YnNjcmliZXIiLCJkZXN0aW5hdGlvbiIsIl90aGlzIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwiaWRlbnRpdHkiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwicHJldiIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJwcm9taXNlQ3RvciIsImdldFByb21pc2VDdG9yIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJjdXJyZW50T2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsIkFub255bW91c1N1YmplY3QiLCJfdGhyb3dJZkNsb3NlZCIsImNvbmZpZ3VyYWJsZSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwiX2lubmVyU3Vic2NyaWJlIiwiYXNPYnNlcnZhYmxlIiwib3BlcmF0ZSIsImhhc0xpZnQiLCJsaWZ0ZWRTb3VyY2UiLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvbk5leHQiLCJvbkVycm9yIiwib25GaW5hbGl6ZSIsIk9wZXJhdG9yU3Vic2NyaWJlciIsInNob3VsZFVuc3Vic2NyaWJlIiwiY2xvc2VkXzEiLCJpc0FycmF5TGlrZSIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc0FzeW5jSXRlcmFibGUiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlzSXRlcmFibGUiLCJyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIiwicmVhZGFibGVTdHJlYW0iLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsImlubmVyRnJvbSIsIm9icyIsImZyb21BcnJheUxpa2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsInByb2Nlc3MiLCJjYXRjaCIsImV4ZWN1dGVTY2hlZHVsZSIsInBhcmVudFN1YnNjcmlwdGlvbiIsInNjaGVkdWxlciIsIndvcmsiLCJzY2hlZHVsZVN1YnNjcmlwdGlvbiIsInNjaGVkdWxlIiwibWVyZ2VNYXAiLCJwcm9qZWN0IiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbEZpbmFsaXplciIsImJ1ZmZlciIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJfbG9vcF8xIiwiYnVmZmVyZWRWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzIiwiY29uY2F0QWxsIiwicG9wU2NoZWR1bGVyIiwib2JzZXJ2ZU9uIiwic3Vic2NyaWJlT24iLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJzY2hlZHVsZWQiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVQcm9taXNlIiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic3RhcnRXaXRoIiwic3ViMCIsInN1YjEiLCJzdWJBcnJheSIsInZzMSIsImFsbFN0cmluZ3M2Nzg1MjciLCJ0ZXN0SG9zdCIsInV0aWxzIiwid2lsbFByb21pc2UiLCJwYXNzU3Vic2NyaXB0aW9uIiwib25PZmYiLCJudW1iZXJGdW4iLCJudW1iZXJUYWciLCJjbGlja0NvdW50ZXIiLCJUYWJsZURlYnVnIiwicmVuZGVyZWRTZWN0aW9ucyIsInZpc2libGVTZWN0aW9ucyIsInNlY3Rpb24iLCJleHRyYSIsImFsbFN0cmluZ3MyMTAxNDY1IiwiZ2V0U2VjdGlvbiIsImNvbnRlbnRIaWRlIiwidGVzdDBpbnRlcnZhbCIsInRlc3QxaW50ZXJ2YWwiLCJpbnRlcnZhbFRlc3RlcjAiLCJpbnRlcnZhbElkIiwiaW50ZXJ2YWxJZDIiLCJpbnRlcnZhbENvdW50IiwicmVuZGVyQ291bnRlciIsImN1cnJlbnRUaW1lIiwic3RhcnRJbnRlcnZhbCIsInNldEludGVydmFsIiwic3RvcEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImFsbFN0cmluZ3M4MzgwMDgiLCJpbnRlcnZhbFRlc3RlcjEiLCJ0b2dnbGVJbnRlcnZhbCIsIl9maXJzdFN0YXRlIiwic2hvd0ludGVydmFscyIsImFsbFN0cmluZ3M3NzUwMCIsInVzZU1lbnVOYW1lIiwicm91dGVyIiwicGF0aG5hbWUiLCJtZW51IiwibWVudU5hbWUiLCJhbGxTdHJpbmdzMTIwODI5IiwiYXBwRGF0ZSIsImFwcEZ1biIsInNob3dIaWRlIiwiYWxsU3RyaW5nczI4MDUzMDMiLCJmeFRhZyIsImhvbWVQYWdlIiwiQXBwIiwic2hvd1NlY3Rpb25zIiwiYXBwQ291bnRlciIsInRvZ2dsZVZhbHVlIiwidGVzdEVtb2ppIiwidG9nZ2xlIiwib25UZXN0Q29tcGxldGUiLCJzdWNjZXNzIiwiZmlyZVRlc3RpbmciLCJtb2NoYSIsInJ1blRlc3RzIiwiYW5pbWF0ZVdyYXAiLCJ0b2dnbGVBdXRvVGVzdGluZyIsImFsbFN0cmluZ3M2Mjk0NyIsImhhc0xlbmd0aCIsImFsbFN0cmluZ3MxMDU0NTcwIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsb2NhdGlvblNwbGl0IiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==