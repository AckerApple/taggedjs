var t={902:(t,n,e)=>{e.d(n,{kQ:()=>Xt,c_:()=>Yt});var o=e(856);const r=(0,o._q)((({name:t,array:n,included:e,columnNames:r,allColumnNames:c})=>{let l,i=!1,u=!1;const d=(0,o.SB)([]);(0,o.$q)((t=>[{mouseOverEditShow:i,edit:u,editFormula:l}]=t({mouseOverEditShow:i,edit:u,editFormula:l})));return o.dy.dom(a.allStrings431691[0],(function(){const n=r.indexOf(t);n>=0?r.splice(n,1):r.push(t)}),e&&"checked",t,(()=>i=!0),(()=>i=!1),u||i?"visible":"hidden",(()=>u=!u),e&&r.length!==c.length?o.dy.dom(a.allStrings431691[1],(()=>{r.length=0,r.push(...c)})):o.dy.dom(a.allStrings431691[2],(()=>{r.length=0,r.push(t)})),u&&o.dy.dom(a.allStrings431691[3],l&&o.dy.dom(a.allStrings431691[4],(t=>{return e=l,o=t.target.value,e.stringFormula=o,void(e.value=s(o,{array:n}));var e,o}),l.value),d.map((t=>o.dy.dom(a.allStrings431691[5],t.title,(()=>l=t),t.value).key(t))),(()=>{const e=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;d.push({title:"sum",stringFormula:e,value:s(e,{array:n})})})))}));function s(t,n={}){return function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{isNaN,Math,Number,Date,...n})}const a={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},c=(0,o._q)((({array:t,showAll:n,showKids:e,toggleColumnDialog:r,columnNames:s,formatChange:a,allowMaximize:c,everySimpleValue:i})=>o.dy.dom(l.allStrings122184[0],t.length&&o.dy.dom(l.allStrings122184[1],s.map((t=>o.dy.dom(l.allStrings122184[2],r&&"pointer",r,t).key(t)))),t.map((t=>o.dy.dom(l.allStrings122184[3],s.map((r=>o.dy.dom(l.allStrings122184[4],S({value:t[r],showLevels:0,showAll:n,showKids:n||e,isRootDump:!1,formatChange:a,allowMaximize:c})).key(t[r])))).key(t)))))),l={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},i=(0,o._q)((({array:t,showLevels:n,showAll:e,showKids:r,columnNames:s,formatChange:a,toggleColumnDialog:c,allowMaximize:l,everySimpleValue:i})=>o.dy.dom(u.allStrings152127[0],t.map(((t,r)=>{const d=function(t,n){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,n){if(!n)return t;const e={};return n.forEach((n=>{(t.hasOwnProperty(n)||n in t)&&(e[n]=t[n])})),e}(t,n)}(t,s);return o.dy.dom(u.allStrings152127[1],S({value:d,showLevels:n,showAll:e,showKids:!0,isRootDump:!1,formatChange:a,onHeaderClick:c,allowMaximize:l,everySimpleValue:i})).key(r)})))));const u={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},d=(0,o._q)((({showLevels:t,showAll:n,showKids:e,array:s,arrayView:a,formatChange:l,allowMaximize:u,everySimpleValue:d})=>{const h=(0,o.YP)([s,s.length],(()=>s.length?function(t){return t.reduce(((t,n)=>{if(n&&"object"==typeof n){if(Array.isArray(n))return t;Object.keys(n).forEach((n=>{t.includes(n)||t.push(n)}))}return t}),[])}(s):[]));let g;const f=(0,o.YP)([h],(()=>[...h]));let x=!1;const b=(0,o.SB)((()=>"columnDialog"+performance.now()));(0,o.$q)((t=>[{columnNames:g,showColumnDialog:x}]=t({columnNames:g,showColumnDialog:x}))),o.YP.noInit([f.length],(()=>{g||(g=f)}));const v=()=>{x=!x;const t=document.getElementById(b);x?t.showModal():t.close()},y="table"===a?c({showAll:n,showKids:e,array:s,toggleColumnDialog:v,columnNames:g||h,formatChange:l,everySimpleValue:d}):i({array:s,showLevels:t,showAll:n,showKids:e,formatChange:l,columnNames:g||h,toggleColumnDialog:v,allowMaximize:u,everySimpleValue:d});return o.dy.dom(p.allStrings463171[0],y,b,h.map((t=>{const n=void 0===g||g.includes(t);return o.dy.dom(p.allStrings463171[1],r({name:t,array:s,included:n,columnNames:g||f,allColumnNames:h})).key(t)})),v)}));const p={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},h=(0,o._q)((({key:t,value:n,show:e,showAll:r,showKids:s,showLevels:a,formatChange:c,allowMaximize:l,everySimpleValue:i})=>{let u,p,h=!1;(0,o.$q)((t=>[{showLower:u,arrayView:p,maximize:h}]=t({showLower:u,arrayView:p,maximize:h}))),(0,o.RW)((t=>[s]=t(s))),(0,o.RW)((t=>[r]=t(r))),o.YP.noInit([e],(([t])=>u=t)),o.YP.noInit([r],(([t])=>u=t));const f=(0,o.SB)((()=>"maximize-dump-"+performance.now())),x=()=>{h=!h,h&&document.getElementById(f).showModal()},b=r||u||s||null==u&&a>0,v=e=>o.dy.dom(g.allStrings479370[0],(()=>{if(void 0===u)return r=s=u=!b;r=s=u=!u}),t,"table"===p?"bold":"",(()=>p="table"===p?void 0:"table"),"table"===p?"flex":"table",n.length,e&&o.dy.dom(g.allStrings479370[1],x)),y={showLevels:a,showAll:r,showKids:s,formatChange:c,array:n,arrayView:p,allowMaximize:l,everySimpleValue:i};return o.dy.dom(g.allStrings479370[3],v(l),b&&o.dy.dom(g.allStrings479370[2],d(y)),f,h&&v(!1),h&&o.dy.dom(g.allStrings479370[4],d({...y,allowMaximize:!1})),(()=>document.getElementById(f).close()))})),g={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function f(t){var n=document.createElement("textarea");n.value=t,document.body.appendChild(n),n.select(),n.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(n)}function x({key:t,value:n,onHeaderClick:e,everySimpleValue:r}){const s=n.search&&("https://"===n.slice(0,8)||"http://"===n.slice(0,7));let a;return a=r?b({value:n,everySimpleValue:r}):s?v(n):b({value:n}),o.dy.dom(y.allStrings246978[0],t&&o.dy.dom(y.allStrings246978[1],e&&"pointer",e,t),a)}const b=(0,o._q)((({value:t,everySimpleValue:n})=>{const e=[void 0,null,"null"].includes(t),r=t,s=!isNaN(r)&&r>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(r):"";let a=0;(0,o.$q)((t=>[a]=t(a)));let c=t;return n&&(c=n(t)),c=(null===c?"null":!1===c&&"false")||void 0===c&&"undefined"||c,o.dy.dom(y.allStrings246978[2],(()=>{a=Date.now()}),(n=>{if(Date.now()-a>300)return n.preventDefault(),n.stopPropagation(),!0;f(t)}),e?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||e&&"white"||"",s,c)}));const v=t=>o.dy.dom(y.allStrings246978[3],(()=>f(t)),t,t),y={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},m=(0,o._q)((({key:t,showKids:n,show:e,showLevels:r,value:s,showAll:a,onHeaderClick:c,formatChange:l,allowMaximize:i,everySimpleValue:u})=>{let d,p=!1;const h=(0,o.SB)((()=>"maximize-dump-"+performance.now()));(0,o.$q)((t=>[{showLower:d,maximize:p}]=t({showLower:d,maximize:p}))),(0,o.RW)((t=>[n]=t(n))),o.YP.noInit([e],(([t])=>d=t)),o.YP.noInit([a],(([t])=>d=t));const g=!t||n||d||void 0===d&&r>0,f=()=>{p=!p,p&&document.getElementById(h).showModal()},x=e=>o.dy.dom(w.allStrings470244[0],d?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===d)return a=n=d=!(a||n||d);n=d=!d}),t,Object.keys(s).length,e&&o.dy.dom(w.allStrings470244[1],f)),b=t=>o.dy.dom(w.allStrings470244[2],Object.entries(s).map((([e,s])=>o.dy.dom(w.allStrings470244[3],s&&"object"==typeof s?"flex-grow:1;":"flex: 1 1 10em;",S({value:s,key:e,show:d,showAll:a,showLevels:r-1,showKids:a||n,isRootDump:!1,formatChange:l,onHeaderClick:c,allowMaximize:t,everySimpleValue:u})).key(e))));return o.dy.dom(w.allStrings470244[4],t&&x(i),g&&b(i),h,p&&x(!1),p&&b(!1),(()=>document.getElementById(h).close()))})),w={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},_=(0,o._q)((({value:t,format:n,showAll:e,formatChange:r,showAllChange:s})=>o.dy.dom(k.allStrings440833[0],!n||"flex"===n&&o.dy.dom(k.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e?"background-color:#33cd5f;":"background-color:#444444"),(()=>s(e=!e))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n&&"flex"!==n?"background-color:#444444":"background-color:#33cd5f;"),(()=>r(n="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===n?"background-color:#33cd5f;":"background-color:#444444"),(()=>r(n="json")),(()=>function(t){const n=JSON.stringify(t,null,2);f(n)}(t)))));const k={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},S=(0,o._q)((({key:t,value:n,showKids:e=!1,showLevels:r=-1,showAll:s=!1,format:a="flex",formatChange:c=(t=>a=t),isRootDump:l=!0,onHeaderClick:i,allowMaximize:u,everySimpleValue:d})=>{l&&void 0===u&&(u=!0);const p=null===n?"null":typeof n;let h,g=!1;return(0,o.RW)((t=>[a]=t(a))),(0,o.RW)((t=>[s]=t(s))),(0,o.RW)((t=>[r]=t(r))),(0,o.$q)((t=>[{show:g,arrayView:h}]=t({show:g,arrayView:h}))),(0,o.nc)((()=>{(r=r>=0&&r||(-1===r&&!t&&n&&n instanceof Object?2:0))>0&&(g=!0)})),[null,void 0].includes(n)?x({key:t,value:p,onHeaderClick:i,everySimpleValue:d}):["boolean","number","string"].includes(p)?x({key:t,value:n,onHeaderClick:i,everySimpleValue:d}):V({value:n,showKids:e,key:t,onHeaderClick:i,everySimpleValue:d,format:a,isRootDump:l,showAll:s,showAllChange:t=>s=t,formatChange:c,show:g,showLevels:r,allowMaximize:u})}));let C=0;const V=({value:t,showKids:n,key:e,onHeaderClick:r,everySimpleValue:s,format:a,isRootDump:c,showAll:l,showAllChange:i,formatChange:u,show:d,showLevels:p,allowMaximize:g})=>{if(null===t)return n?x({key:e,value:"null",onHeaderClick:r,everySimpleValue:s}):o.dy.dom(B.allStrings306188[0]);const f=Array.isArray(t);return o.dy.dom(B.allStrings306188[2],"taggedjs-dump-"+ ++C,c&&_({value:t,format:a,showAll:l,showAllChange:i,formatChange:u}),"json"===a&&o.dy.dom(B.allStrings306188[1],JSON.stringify(t,null,2))||(f?h({key:e,value:t,show:d,showAll:l,showKids:n,showLevels:p,formatChange:u,allowMaximize:g,everySimpleValue:s}):m({key:e,show:d,showKids:n,showLevels:p,value:t,showAll:l,formatChange:u,onHeaderClick:r,allowMaximize:g,everySimpleValue:s})))},B={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]};var J=e(232);const T=(0,o._q)((()=>{let t="",n=0,e="",r=!1;(0,o.$q)((o=>[{userJsonString:t,renderCount:n,userJson:e,badEval:r}]=o({userJsonString:t,renderCount:n,userJson:e,badEval:r}))),++n;const s=(0,o.SB)((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return o.dy.dom(j.allStrings183632[0],(n=>{t=n.target.value;try{e=function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{}),t=JSON.stringify(e,null,2)}catch(n){r=!0;try{JSON.parse(t)}catch(t){e=Object.getOwnPropertyNames(t).reduce(((n,e)=>(n[e]=t[e])&&n||n),{})}}}),""===e?"":t,""===e?"":o.dy.dom(j.allStrings183632[1],S({value:e})),S(s),(0,J.v)({renderCount:n,name:"dumpContent"}))}));const j={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};var I=function(t,n){return I=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},I(t,n)};function E(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}I(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function L(t,n,e,o){return new(e||(e=Promise))((function(r,s){function a(t){try{l(o.next(t))}catch(t){s(t)}}function c(t){try{l(o.throw(t))}catch(t){s(t)}}function l(t){var n;t.done?r(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,c)}l((o=o.apply(t,n||[])).next())}))}function P(t,n){var e,o,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(l){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(s=0)),s;)try{if(e=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,o=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){s.label=c[1];break}if(6===c[0]&&s.label<r[1]){s.label=r[1],r=c;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(c);break}r[2]&&s.ops.pop(),s.trys.pop();continue}c=n.call(t,s)}catch(t){c=[6,t],o=0}finally{e=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}}Object.create;function O(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],o=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function D(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var o,r,s=e.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(o=s.next()).done;)a.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(e=s.return)&&e.call(s)}finally{if(r)throw r.error}}return a}function $(t,n,e){if(e||2===arguments.length)for(var o,r=0,s=n.length;r<s;r++)!o&&r in n||(o||(o=Array.prototype.slice.call(n,0,r)),o[r]=n[r]);return t.concat(o||Array.prototype.slice.call(n))}function N(t){return this instanceof N?(this.v=t,this):new N(t)}function A(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=e.apply(t,n||[]),s=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),a("next"),a("throw"),a("return",(function(t){return function(n){return Promise.resolve(n).then(t,i)}})),o[Symbol.asyncIterator]=function(){return this},o;function a(t,n){r[t]&&(o[t]=function(n){return new Promise((function(e,o){s.push([t,n,e,o])>1||c(t,n)}))},n&&(o[t]=n(o[t])))}function c(t,n){try{(e=r[t](n)).value instanceof N?Promise.resolve(e.value.v).then(l,i):u(s[0][2],e)}catch(t){u(s[0][3],t)}var e}function l(t){c("next",t)}function i(t){c("throw",t)}function u(t,n){t(n),s.shift(),s.length&&c(s[0][0],s[0][1])}}function q(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=O(t),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(e){n[e]=t[e]&&function(n){return new Promise((function(o,r){(function(t,n,e,o){Promise.resolve(o).then((function(n){t({value:n,done:e})}),n)})(o,r,(n=t[e](n)).done,n.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function H(t){return"function"==typeof t}function M(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var R=M((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function W(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var Y=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,o,r;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var a=O(s),c=a.next();!c.done;c=a.next()){c.value.remove(this)}}catch(n){t={error:n}}finally{try{c&&!c.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}else s.remove(this);var l=this.initialTeardown;if(H(l))try{l()}catch(t){r=t instanceof R?t.errors:[t]}var i=this._finalizers;if(i){this._finalizers=null;try{for(var u=O(i),d=u.next();!d.done;d=u.next()){var p=d.value;try{U(p)}catch(t){r=null!=r?r:[],t instanceof R?r=$($([],D(r)),D(t.errors)):r.push(t)}}}catch(t){e={error:t}}finally{try{d&&!d.done&&(o=u.return)&&o.call(u)}finally{if(e)throw e.error}}}if(r)throw new R(r)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)U(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&W(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&W(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}(),z=Y.EMPTY;function X(t){return t instanceof Y||t&&"closed"in t&&H(t.remove)&&H(t.add)&&H(t.unsubscribe)}function U(t){H(t)?t():t.unsubscribe()}var F={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Q={setTimeout:function(t,n){for(var e=[],o=2;o<arguments.length;o++)e[o-2]=arguments[o];var r=Q.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,$([t,n],D(e))):setTimeout.apply(void 0,$([t,n],D(e)))},clearTimeout:function(t){var n=Q.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function G(t){Q.setTimeout((function(){var n=F.onUnhandledError;if(!n)throw t;n(t)}))}function K(){}var Z=tt("C",void 0,void 0);function tt(t,n,e){return{kind:t,value:n,error:e}}var nt=null;function et(t){if(F.useDeprecatedSynchronousErrorHandling){var n=!nt;if(n&&(nt={errorThrown:!1,error:null}),t(),n){var e=nt,o=e.errorThrown,r=e.error;if(nt=null,o)throw r}}else t()}var ot=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,X(n)&&n.add(e)):e.destination=ut,e}return E(n,t),n.create=function(t,n,e){return new ct(t,n,e)},n.prototype.next=function(t){this.isStopped?it(function(t){return tt("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?it(tt("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?it(Z,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(Y),rt=Function.prototype.bind;function st(t,n){return rt.call(t,n)}var at=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){lt(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){lt(t)}else lt(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){lt(t)}},t}(),ct=function(t){function n(n,e,o){var r,s,a=t.call(this)||this;H(n)||!n?r={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=o?o:void 0}:a&&F.useDeprecatedNextContext?((s=Object.create(n)).unsubscribe=function(){return a.unsubscribe()},r={next:n.next&&st(n.next,s),error:n.error&&st(n.error,s),complete:n.complete&&st(n.complete,s)}):r=n;return a.destination=new at(r),a}return E(n,t),n}(ot);function lt(t){var n;F.useDeprecatedSynchronousErrorHandling?(n=t,F.useDeprecatedSynchronousErrorHandling&&nt&&(nt.errorThrown=!0,nt.error=n)):G(t)}function it(t,n){var e=F.onStoppedNotification;e&&Q.setTimeout((function(){return e(t,n)}))}var ut={closed:!0,next:K,error:function(t){throw t},complete:K},dt="function"==typeof Symbol&&Symbol.observable||"@@observable";function pt(t){return t}function ht(t){return 0===t.length?pt:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var gt=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var o,r=this,s=(o=t)&&o instanceof ot||function(t){return t&&H(t.next)&&H(t.error)&&H(t.complete)}(o)&&X(o)?t:new ct(t,n,e);return et((function(){var t=r,n=t.operator,e=t.source;s.add(n?n.call(s,e):e?r._subscribe(s):r._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=ft(n))((function(n,o){var r=new ct({next:function(n){try{t(n)}catch(t){o(t),r.unsubscribe()}},error:o,complete:n});e.subscribe(r)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[dt]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return ht(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=ft(t))((function(t,e){var o;n.subscribe((function(t){return o=t}),(function(t){return e(t)}),(function(){return t(o)}))}))},t.create=function(n){return new t(n)},t}();function ft(t){var n;return null!==(n=null!=t?t:F.Promise)&&void 0!==n?n:Promise}var xt=M((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),bt=function(t){function n(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return E(n,t),n.prototype.lift=function(t){var n=new vt(this,this);return n.operator=t,n},n.prototype._throwIfClosed=function(){if(this.closed)throw new xt},n.prototype.next=function(t){var n=this;et((function(){var e,o;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var r=O(n.currentObservers),s=r.next();!s.done;s=r.next()){s.value.next(t)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(e)throw e.error}}}}))},n.prototype.error=function(t){var n=this;et((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},n.prototype.complete=function(){var t=this;et((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var n=this,e=this,o=e.hasError,r=e.isStopped,s=e.observers;return o||r?z:(this.currentObservers=null,s.push(t),new Y((function(){n.currentObservers=null,W(s,t)})))},n.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,o=n.thrownError,r=n.isStopped;e?t.error(o):r&&t.complete()},n.prototype.asObservable=function(){var t=new gt;return t.source=this,t},n.create=function(t,n){return new vt(t,n)},n}(gt),vt=function(t){function n(n,e){var o=t.call(this)||this;return o.destination=n,o.source=e,o}return E(n,t),n.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},n.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},n.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},n.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:z},n}(bt);function yt(t){return function(n){if(function(t){return H(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function mt(t,n,e,o,r){return new wt(t,n,e,o,r)}var wt=function(t){function n(n,e,o,r,s,a){var c=t.call(this,n)||this;return c.onFinalize=s,c.shouldUnsubscribe=a,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=r?function(t){try{r(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=o?function(){try{o()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return E(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(ot);var _t=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function kt(t){return H(null==t?void 0:t.then)}function St(t){return H(t[dt])}function Ct(t){return Symbol.asyncIterator&&H(null==t?void 0:t[Symbol.asyncIterator])}function Vt(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Bt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Jt(t){return H(null==t?void 0:t[Bt])}function Tt(t){return A(this,arguments,(function(){var n,e,o;return P(this,(function(r){switch(r.label){case 0:n=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,N(n.read())];case 3:return e=r.sent(),o=e.value,e.done?[4,N(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,N(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function jt(t){return H(null==t?void 0:t.getReader)}function It(t){if(t instanceof gt)return t;if(null!=t){if(St(t))return r=t,new gt((function(t){var n=r[dt]();if(H(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(_t(t))return o=t,new gt((function(t){for(var n=0;n<o.length&&!t.closed;n++)t.next(o[n]);t.complete()}));if(kt(t))return e=t,new gt((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,G)}));if(Ct(t))return Et(t);if(Jt(t))return n=t,new gt((function(t){var e,o;try{for(var r=O(n),s=r.next();!s.done;s=r.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){e={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(e)throw e.error}}t.complete()}));if(jt(t))return Et(Tt(t))}var n,e,o,r;throw Vt(t)}function Et(t){return new gt((function(n){(function(t,n){var e,o,r,s;return L(this,void 0,void 0,(function(){var a,c;return P(this,(function(l){switch(l.label){case 0:l.trys.push([0,5,6,11]),e=q(t),l.label=1;case 1:return[4,e.next()];case 2:if((o=l.sent()).done)return[3,4];if(a=o.value,n.next(a),n.closed)return[2];l.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=l.sent(),r={error:c},[3,11];case 6:return l.trys.push([6,,9,10]),o&&!o.done&&(s=e.return)?[4,s.call(e)]:[3,8];case 7:l.sent(),l.label=8;case 8:return[3,10];case 9:if(r)throw r.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))}))})(t,n).catch((function(t){return n.error(t)}))}))}function Lt(t,n,e,o,r){void 0===o&&(o=0),void 0===r&&(r=!1);var s=n.schedule((function(){e(),r?t.add(this.schedule(null,o)):this.unsubscribe()}),o);if(t.add(s),!r)return s}function Pt(t,n,e){return void 0===e&&(e=1/0),H(n)?Pt((function(e,o){return function(t,n){return yt((function(e,o){var r=0;e.subscribe(mt(o,(function(e){o.next(t.call(n,e,r++))})))}))}((function(t,r){return n(e,t,o,r)}))(It(t(e,o)))}),e):("number"==typeof n&&(e=n),yt((function(n,o){return function(t,n,e,o,r,s,a,c){var l=[],i=0,u=0,d=!1,p=function(){!d||l.length||i||n.complete()},h=function(t){return i<o?g(t):l.push(t)},g=function(t){s&&n.next(t),i++;var c=!1;It(e(t,u++)).subscribe(mt(n,(function(t){null==r||r(t),s?h(t):n.next(t)}),(function(){c=!0}),void 0,(function(){if(c)try{i--;for(var t=function(){var t=l.shift();a?Lt(n,a,(function(){return g(t)})):g(t)};l.length&&i<o;)t();p()}catch(t){n.error(t)}})))};return t.subscribe(mt(n,h,(function(){d=!0,p()}))),function(){null==c||c()}}(n,o,t,e)})))}function Ot(){return void 0===(t=1)&&(t=1/0),Pt(pt,t);var t}function Dt(t){return t[t.length-1]}function $t(t){return(n=Dt(t))&&H(n.schedule)?t.pop():void 0;var n}function Nt(t,n){return void 0===n&&(n=0),yt((function(e,o){e.subscribe(mt(o,(function(e){return Lt(o,t,(function(){return o.next(e)}),n)}),(function(){return Lt(o,t,(function(){return o.complete()}),n)}),(function(e){return Lt(o,t,(function(){return o.error(e)}),n)})))}))}function At(t,n){return void 0===n&&(n=0),yt((function(e,o){o.add(t.schedule((function(){return e.subscribe(o)}),n))}))}function qt(t,n){if(!t)throw new Error("Iterable cannot be null");return new gt((function(e){Lt(e,n,(function(){var o=t[Symbol.asyncIterator]();Lt(e,n,(function(){o.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function Ht(t,n){if(null!=t){if(St(t))return function(t,n){return It(t).pipe(At(n),Nt(n))}(t,n);if(_t(t))return function(t,n){return new gt((function(e){var o=0;return n.schedule((function(){o===t.length?e.complete():(e.next(t[o++]),e.closed||this.schedule())}))}))}(t,n);if(kt(t))return function(t,n){return It(t).pipe(At(n),Nt(n))}(t,n);if(Ct(t))return qt(t,n);if(Jt(t))return function(t,n){return new gt((function(e){var o;return Lt(e,n,(function(){o=t[Bt](),Lt(e,n,(function(){var t,n,r;try{n=(t=o.next()).value,r=t.done}catch(t){return void e.error(t)}r?e.complete():e.next(n)}),0,!0)})),function(){return H(null==o?void 0:o.return)&&o.return()}}))}(t,n);if(jt(t))return function(t,n){return qt(Tt(t),n)}(t,n)}throw Vt(t)}function Mt(){for(var t,n,e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];return Ot()((t=e,(n=$t(e))?Ht(t,n):It(t)))}function Rt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=$t(t);return yt((function(n,o){(e?Mt(t,n,e):Mt(t,n)).subscribe(o)}))}var Wt=e(149);const Yt=20,zt=(0,o._q)((t=>{let n=1,e="white";return(0,o.$q)((t=>[{borderColor:e,width:n}]=t({borderColor:e,width:n}))),o.dy.dom(tn.allStrings1340841[2],n,e,t,n,(t=>n=Number(t.target.value)),n,(t=>e=t.target.value),""===e?"selected":"","black"===e?"selected":"","blue"===e?"selected":"","white"===e?"selected":"")})),Xt=(0,o._q)((()=>{const t=(0,o.SB)((()=>new o.xQ)),n=(0,o.SB)((()=>new o.v0(3))),e=(0,o.SB)((()=>new o.v0(["a","b","c"]))),r=(0,o.SB)((()=>new o.v0(0))),s=(0,o.SB)((()=>new o.v0(1)));let a=0,c=!0,l=!1,i=0,u=Yt,d=!1;const p=(0,o.SB)((()=>new o.xQ({added:0,removed:0})));(0,o.$q)((t=>[{renderCount:a,orangeToggle:c,boldToggle:l,counter:i,showHideFx:d,staggerBy:u}]=t({renderCount:a,orangeToggle:c,boldToggle:l,counter:i,showHideFx:d,staggerBy:u}))),++a;const h=(0,o.Ld)(r,(()=>o.dy.dom(tn.allStrings1340841[3],(()=>{++i}),i,(()=>r.next(r.value+1)))));return o.dy.dom(tn.allStrings1340841[4],i,h,(()=>++i),i,(()=>d=!d),d&&o.dy.dom(tn.allStrings1340841[5],(0,Wt.fx)({duration:"10ms"})),d&&o.dy.dom(tn.allStrings1340841[6],(0,Wt.fx)({duration:"10ms",stagger:u})),d&&o.dy.dom(tn.allStrings1340841[7],(0,Wt.fx)({duration:"10ms",stagger:2*u})),d&&(((t=10)=>{const n=(0,o.iB)();return o.dy.dom(tn.allStrings1340841[1],(0,Wt.fx)({stagger:t,duration:".1s"}),n).acceptInnerHTML(n)})(u).innerHTML=Kt()),(0,o.Ld)(p,(t=>t.added)),(0,o.Ld)(p,(t=>t.removed)),(t=>u=Number(t.target.value)),zt(o.dy.dom(tn.allStrings1340841[8])),T(),(0,J.v)({renderCount:a,name:"ContentDebug"}),Ut(),Ft({sub0:t,sub1:n}),Ut(),'<script>alert("i should never run but be seen on page")<\/script>',o.dy.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),o.dy.dom(tn.allStrings1340841[9]),"3px solid orange",c?"3px solid orange":"3px solid green",(()=>c=!c),c,l?{style:"font-weight:bold;"}:{},(()=>l=!l),l?"true":"false",54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",(0,o.Ld)(t),(0,o.Ld)(e,(t=>t.map((t=>o.dy.dom(tn.allStrings1340841[10],t).key(t))))),(0,o.Ld)(e,(t=>t.map((t=>o.dy.dom(tn.allStrings1340841[11],t,t).key(t))))),(0,o.Te)(t,-1),(0,o.Ld)(r),(0,o.Ld)(r,(()=>55)),Zt(),(0,o.Ld)((0,o.aj)([r,s]).pipe((t=>t[1]))),(0,o.Ld)((0,o.aj)([r,s]).pipe((0,o.Ut)((t=>Promise.resolve(o.dy.dom(tn.allStrings1340841[12])))))),(0,J.v)({renderCount:a,name:"ContentDebug"}))}));function Ut(){return o.dy.dom(tn.allStrings1340841[13],"test0","test1","test3")}const Ft=(0,o._q)((({sub0:t,sub1:n})=>{let e=!1;const r=(0,o.SB)((()=>new bt));return(0,o.$q)((t=>[e]=t(e))),o.dy.dom(tn.allStrings1340841[14],(0,o.Ld)(t),(()=>t.next((t.value||0)+1)),(()=>r.next(t.value=(t.value||0)+1)),(()=>e=!e),e?"show":"hide",e,e&&(0,o.Ld)(t),e&&(0,o.Ld)(t,Qt),e&&(0,o.Ld)(t,Gt),(0,o.Ld)(n,Gt),(0,o.Ld)(r,Gt),(0,o.Ld)(r.pipe(Rt(33)),Gt),(0,o.Ld)(r.pipe(Rt(void 0)),(t=>Gt(t))),(0,o.Ld)(r,(t=>Gt(t))))})),Qt=t=>o.dy.dom(tn.allStrings1340841[15],t),Gt=(0,o._q)((t=>o.dy.dom(tn.allStrings1340841[16],t))),Kt=(0,o._q)((()=>o.dy.dom(tn.allStrings1340841[17]))),Zt=(0,o._q)((()=>{let t=!0,n=0,e=0;return(0,o.$q)((o=>[{hideShow:t,destroyCount:n,clickCounter:e}]=o({hideShow:t,destroyCount:n,clickCounter:e}))),o.dy.dom(tn.allStrings1340841[18],t&&o.dy.dom(tn.allStrings1340841[19],(0,o.ho)((()=>o._q.element.get().innerHTML=Date.now().toString()),{onDestroy:()=>++n}),(()=>++e),e),(()=>t=!t),n)})),tn={allStrings1340841:[[{nn:"div",at:[[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["style",["border-width:",":tagvar0:","px;border-color:",":tagvar1:",";border-style:solid;"]],["id","dynamic-border-element"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"text",tc:"borderWidth:"},{nn:"input",at:[["id","dynamic-border-width"],["type","range"],["min","0"],["max","10"],["step","1"],["value",{tagJsVar:3},null],["change",{tagJsVar:4},null]]},{nn:"text",tc:" - "},{nn:"text",v:5},{nn:"text",tc:"px"}]},{nn:"div",ch:[{nn:"text",tc:"borderColor:"},{nn:"select",at:[["id","dynamic-border-color"],["change",{tagJsVar:6},null]],ch:[{nn:"option",at:[[{tagJsVar:7}],["value",""]]},{nn:"option",at:[[{tagJsVar:8}],["value","black"]],ch:[{nn:"text",tc:"black"}]},{nn:"option",at:[[{tagJsVar:9}],["value","blue"]],ch:[{nn:"text",tc:"blue"}]},{nn:"option",at:[[{tagJsVar:10}],["value","white"]],ch:[{nn:"text",tc:"white"}]}]}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:16}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:17},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:18}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:20},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:22},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:23},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:24}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:25}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:26},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:27}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:28},{nn:"text",tc:" "},{nn:"text",v:29},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:34},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:35},{nn:"text",tc:"22"},{nn:"text",v:36},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:37},{nn:"text",tc:"__tagVar0"},{nn:"text",v:38},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:39},{nn:"text",tc:'"'}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:40}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:41}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:42}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:43}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:44}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:45}]}]},{nn:"text",v:46},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:47}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:48}]}]}]}]}]},{nn:"text",v:49},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"text",tc:"inner html tag"}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]}},842:(t,n,e)=>{e.r(n),e.d(n,{fxTime:()=>r});var o=e(78);const r=160;function s(t){return new Promise((n=>setTimeout(n,t)))}(0,o.yY)("⠇ array testing",(()=>{(0,o.it)("signal array count and items",(()=>{const t=(0,o.L7)("signal-array-count"),n=Number(t.innerText);for(let t=0;t<n;t++)(0,o.l_)((0,o.o5)(`#signal-array-item-${t}`)).toBe(1);(0,o.l_)((0,o.o5)(`#signal-array-item-${n}`)).toBe(0)})),(0,o.it)("push signal array button",(()=>{const t=(0,o.L7)("signal-array-count"),n=Number(t.innerText),e=(0,o.L7)("push-signal-array-btn");e.click();const r=Number(t.innerText);(0,o.l_)(r).toBe(n+1),(0,o.l_)((0,o.o5)(`#signal-array-item-${n}`)).toBe(1),e.click(),(0,o.l_)(Number(t.innerText)).toBe(n+2),(0,o.l_)((0,o.o5)(`#signal-array-item-${n+1}`)).toBe(1)})),(0,o.it)("arrays counter display matches item counter displays",(()=>{const t=(0,o.L7)("arrays-counter-display"),n=Number(t.innerText),e=(0,o.L7)("signal-array-count"),r=Number(e.innerText);for(let t=0;t<r;t++){const e=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(e).toBeDefined(),(0,o.l_)(Number(e.innerText)).toBe(n)}document.querySelector("#signal-array-increase-counter").click();const s=Number(t.innerText);(0,o.l_)(s).toBe(n+1);for(let t=0;t<r;t++){const n=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(Number(n.innerText)).toBe(s)}})),(0,o.it)("signal array item delete button with animation",(async()=>{const t=(0,o.L7)("signal-array-count");0===Number(t.innerText)&&(0,o.L7)("push-signal-array-btn").click();const n=Number(t.innerText);(0,o.l_)((0,o.o5)("#signal-array-item-0")).toBe(1);(0,o.L7)("signal-array-item-delete-btn-0").click(),await s(r),(0,o.l_)(Number(t.innerText)).toBe(n-1),(0,o.l_)((0,o.o5)("#signal-array-item-"+(n-1))).toBe(0);const e=Number(t.innerText);for(let t=0;t<e;t++){const n=(0,o.o5)(`#signal-array-item-${t}`);(0,o.l_)(n).toBe(1,`Expected only one #signal-array-item-${t} but got ${n}`)}})),(0,o.it)("array basics",(()=>{(0,o.l_)((0,o.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,o.l_)(t.length).toBe(0);const n=(0,o.o5)("#score-data-0-1-inside-button");(0,o.l_)(n).toBe(0),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const e=(0,o.L7)("score-data-0-1-inside-button"),r=(0,o.L7)("score-data-0-1-inside-display");let s=r.innerText;const a=(0,o.L7)("score-data-0-1-outside-button"),c=(0,o.L7)("score-data-0-1-outside-display"),l=c.innerText;(0,o.l_)(s).toBe(l),e.click(),(0,o.l_)(r.innerText).toBe(c.innerText),(0,o.l_)(r).toBe((0,o.L7)("score-data-0-1-inside-display")),(0,o.l_)(s).toBe((Number(r.innerText)-1).toString()),(0,o.l_)(s).toBe((Number(c.innerText)-1).toString()),a.click(),(0,o.l_)(r.innerText).toBe(c.innerText),(0,o.l_)(s).toBe((Number(r.innerText)-2).toString()),(0,o.l_)(s).toBe((Number(c.innerText)-2).toString())})),(0,o.it)("🗑️ deletes",(async()=>{(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(1);const t=(0,o.L7)("player-edit-btn-0")._click();(0,o.l_)(t).toBe("no-data-ever"),(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(1);const n=await(0,o.L7)("player-remove-promise-btn-0")._click();(0,o.l_)(n).toBe("promise-no-data-ever"),await s(r),await n,(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(0)})),(0,o.it)("add then deletes",(async()=>{(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(2),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(2),(0,o.L7)("player-edit-btn-0").click();const t=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(t).toBe("promise-no-data-ever"),await s(r-10),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("player-edit-btn-0").click();const n=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(n).toBe("promise-no-data-ever"),await s(r+25),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(0),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("🏹 special attributes",(()=>{(0,o.it)("style and class tests",(async()=>{(0,o.l_)((0,o.QX)("#attr-input-abc")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-backgrounds")).toBe(1),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,o.L7)("attr-dynamic-inline-class").classList;(0,o.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,o.it)("subscribe attributes colors",(()=>{const t=(0,o.L7)("subscribe-style-dot-bg-color-changer"),n=(0,o.L7)("subscribe-style-bg-color"),e=(0,o.L7)("multiple-subscribe-bg-color"),r=(0,o.L7)("toggle-color-btn"),s=(0,o.L7)("clear-color-btn");(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("red"),(0,o.l_)(e.style.backgroundColor).toBe("pink"),(0,o.l_)(r.innerText).toBe("Toggle Color ()"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (red)"),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("red"),(0,o.l_)(e.style.backgroundColor).toBe("green"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (blue)"),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(n.style.backgroundColor).toBe("blue"),(0,o.l_)(e.style.backgroundColor).toBe("purple"),s.click(),(0,o.l_)(t.style.backgroundColor).toBe(""),(0,o.l_)(n.style.backgroundColor).toBe(""),(0,o.l_)(e.style.backgroundColor).toBe("pink")})),(0,o.it)("hide/show attributes affects subscription count",(()=>{const t=(0,o.L7)("toggle-attributes-btn"),n=(0,o.L7)("subscriptions-count"),e=Number(n.innerText);(0,o.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,o.l_)(t.innerText).toBe("Show Attributes");const r=Number(n.innerText);(0,o.l_)(r).toBe(e-2),t.click(),(0,o.l_)(t.innerText).toBe("Hide Attributes");const s=Number(n.innerText);(0,o.l_)(s).toBe(e)})),(0,o.it)("style object converts to individual CSS properties",(()=>{const t=(0,o.L7)("style-object-test"),n=(0,o.L7)("toggle-backgrounds");(0,o.l_)(n.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),n.click(),(0,o.l_)(t.style.backgroundColor).toBe("lightgray"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("4px"),(0,o.l_)(t.style.boxShadow).toBe("none"),n.click(),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,o.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,o.L7)("style-set-property-test"),n=(0,o.L7)("toggle-backgrounds");(0,o.l_)(n.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),n.click(),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),n.click(),(0,o.l_)(t.style.backgroundColor).toBe("red")}))}))},566:(t,n,e)=>{e.r(n);var o=e(78);(0,o.it)("elements exists",(()=>{(0,o.l_)((0,o.L7)("h1-app")).toBeDefined();const t=(0,o.L7)("toggle-test");(0,o.l_)(t).toBeDefined(),(0,o.l_)(t.innerText).toBe("toggle test")})),(0,o.it)("toggle test",(()=>{const t=(0,o.L7)("toggle-test");(0,o.l_)(t.innerText).toBe("toggle test"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test");const n=(0,o.L7)("props-debug-textarea");(0,o.l_)(n.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')}))},527:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("👶 👧child tests",(()=>{(0,o.it)("child tests",(()=>{(0,o.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,o.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,o.it)("a",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,o.it)("b",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,o.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,o.it)("c",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},118:(t,n,e)=>{e.r(n);var o=e(78),r=e(902);console.log("📄 content.test.ts: Loading... window.describe available?",typeof window.describe);let s=0;async function a(t,n,e=5e3){const r=Date.now();for(;Date.now()-r<e;){if((0,o.QX)(t)===n)return await(0,o._v)(50),!0;await(0,o._v)(10)}throw new Error(`Timeout waiting for element count. Expected ${n} elements matching '${t}', but found ${(0,o.QX)(t)}`)}(0,o.yY)("📰 content",(()=>{(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,o.l_)((0,o.dy)("#content-dom-parse-0-0")).toBe((0,o.dy)("#content-dom-parse-0-1"))})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,o.it)("spacing",(()=>{(0,o.l_)((0,o.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,o.it)("style.",(()=>{(0,o.l_)((0,o.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,o.it)("style set as object",(()=>{(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,o.yY)("no parent element tests",(()=>{(0,o.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,o.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,o.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,o.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,o.it)("subscribe",(async()=>{s>0?console.warn("⏭️ skipped test that only passes the first time"):((0,o.l_)((0,o._8)("content-subscribe-sub0")).toBe(""),(0,o.l_)((0,o._8)("content-subscribe-sub0-with")).toBe("-1"))})),(0,o.yY)("passed in subscription",(()=>{(0,o.it)("increase subscription",(async()=>{const t=(0,o.L7)("passed-in-sub-increase"),n=(0,o.L7)("passed-in-sub-hide-show"),e=(0,o.L7)("passed-in-sub-hideShow-value");(0,o.l_)(e.textContent).toBe(""),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),n.click();let r=(0,o._8)("passed-in-output");(0,o.l_)(e.textContent).toBe("true"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed after hide"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),t.click(),r=(0,o._8)("passed-in-output"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe(`0||${r}||0`),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed third increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),n.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed closing"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,o.it)("increase runs",(()=>{++s})),(0,o.it)("concat style",(()=>{(0,o.L7)("dynamic-border-width").value=2,(0,o.L7)("dynamic-border-color").value="white",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,o.L7)("dynamic-border-width").value=1,(0,o.L7)("dynamic-border-color").value="blue",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,o.it)("tagvar injections",(()=>{(0,o.l_)((0,o.L7)("inject-tagvar-0").innerText).toBe((0,o.L7)("inject-read-tagvar-0").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-1").innerText).toBe((0,o.L7)("inject-read-tagvar-1").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-2").innerText).toBe((0,o.L7)("inject-read-tagvar-2").innerText)})),(0,o.it)("animates",(async()=>{if(!document.querySelector("#content-toggle-fx"))return void console.warn("⚠️ Skipping animation test - Content view not loaded properly in test environment");(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"Initial state: should have 0 test elements").toBe(0),(0,o.V4)("#content-toggle-fx"),await a("[name=test-the-tester]",3),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After show click: should have 3 test elements").toBe(3);const t=(0,o.QX)(".animate__animated[name=test-the-tester]");(0,o.l_)(t,"After show click: should have at least 1 animating element").toBeGreaterThan(0),await(0,o._v)(r.c_/2),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"During animation: should still have 3 test elements").toBe(3),(0,o.l_)((0,o.dZ)("#outer-html-fx-test"),"During animation: inner html should be rendered").toBe("inner html tag"),await async function(t,n,e=5e3){const r=Date.now();for(;Date.now()-r<e;){if((0,o.QX)(`.animate__animated${t}`)===n)return await(0,o._v)(50),!0;await(0,o._v)(10)}throw new Error(`Timeout waiting for animations to complete. Expected ${n} animating elements matching '.animate__animated${t}', but found ${(0,o.QX)(`.animate__animated${t}`)}`)}("[name=test-the-tester]",0),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After animation complete: should have 3 test elements").toBe(3),(0,o.l_)((0,o.QX)(".animate__animated[name=test-the-tester]"),"After animation complete: should have 0 animating elements").toBe(0),(0,o.V4)("#content-toggle-fx");const n=(0,o.QX)(".animate__animated[name=test-the-tester]");(0,o.l_)(n,"After hide click: should have at least 1 animating element").toBeGreaterThan(0),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After hide click: should still have 3 test elements").toBe(3),await a("[name=test-the-tester]",0),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After hide animation: should have 0 test elements").toBe(0),(0,o.l_)((0,o.QX)(".animate__animated[name=test-the-tester]"),"After hide animation: should have 0 animating elements").toBe(0)})),(0,o.it)("host",(()=>{let t=Number((0,o._8)("hostDestroyCount"));(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1),(0,o.cS)("hostHideShow"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1),(0,o.l_)((0,o._8)("hostedContent")).toBe(""),(0,o.cS)("hostHideShow"),(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1)}))}))},428:(t,n,e)=>{e.r(n),e.d(n,{clickSpeedAmount:()=>r});var o=e(78);(0,o.yY)("💯 counters",(()=>{const t="0"===(0,o.dy)("#🍄-slowChangeCount");(0,o.it)("basics",(()=>{const n=(0,o.L7)("set-main-counter-input");(0,o.l_)(n).toBeDefined(),n.value="0",(0,o.Sb)(n);const e=Number((0,o.dy)("#counters_render_count")),r=Number((0,o.dy)("#inner_counters_render_count"));(0,o.wG)("#conditional-counter",0);const a=(0,o._8)("👉-counter-sub-count");(0,o.di)("#❤️-increase-counter","#❤️-counter-display"),(0,o.l_)((0,o._8)("👉-counter-sub-count")).toBe(a),(0,o.l_)((0,o.dy)("#counters_render_count")).toBe((e+2).toString());let c=(r+2).toString(),l=(0,o.dy)("#inner_counters_render_count");(0,o.l_)(l).toBe(c);const i=(0,o.dy)("#🔥-init-counter");(0,o.l_)(i).toBe("1"),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),c=(e+4).toString(),l=(0,o.dy)("#counters_render_count"),(0,o.l_)(l).toBe(c),l=(0,o.dy)("#inner_counters_render_count"),c=(r+4).toString(),(0,o.l_)(l).toBe(c),(0,o.di)("#🥦-standalone-counter","#🥦-standalone-display"),c=(e+6).toString(),l=(0,o.dy)("#counters_render_count"),(0,o.l_)(l).toBe(c),l=(0,o.dy)("#inner_counters_render_count"),c=(r+4).toString(),(0,o.l_)(l).toBe(c),(0,o.wG)("#conditional-counter",1),(0,o.wG)("#conditional-display",1),t&&(0,o.l_)((0,o.dy)("#conditional-display")).toBe("2"),l=(0,o._8)("❤️💧-shallow-display"),(0,o.di)("#conditional-counter","#conditional-display"),(0,o.l_)(l).toBe((0,o._8)("❤️💧-shallow-display")),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),(0,o.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),s("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),s("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),s("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),s("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,o.it)("piped subject",(()=>{if(t){const t=(0,o.dy)("#🥦-standalone-display"),n=(0,o.dy)("#🪈-pipedSubject");(0,o.l_)(n).toBe(t,`firstRun failure pipe0. Expected "${n}" toBe empty-string`),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe(t,"firstRun failure pipe2")}(0,o.V4)("#🥦-subject-increase-counter");const n=(0,o.dy)("#🪈-pipedSubject"),e=(0,o.dy)("#🥦-standalone-display");(0,o.l_)(n).toBe(e),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe((0,o.dy)("#🥦-standalone-display"))}))}));const r=600;function s(t,n,e){const s=(0,o._8)(n),a=(0,o.L7)(t),c=(0,o.L7)(e);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)a.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)c.click();console.timeEnd(`⌚️ outer ${t}`);const l=(Number(s)+r).toString();(0,o.l_)((0,o._8)(n)).toBe(l)}},236:(t,n,e)=>{e.r(n);var o=e(78);(0,o.it)("destroys",(async()=>{(0,o.l_)((0,o.QX)("#destroyCount")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-destroys")).toBe(1),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1);let t=Number((0,o.dy)("#destroyCount"));(0,o.V4)("#toggle-destroys");let n=Number((0,o.dy)("#destroyCount"));(0,o.l_)(n).toBe(t+2),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(0),t=n,(0,o.V4)("#toggle-destroys"),n=Number((0,o.dy)("#destroyCount")),(0,o.l_)(n).toBe(t),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1)}))},835:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("taggedjs-dump",(()=>{(0,o.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,o.L7)("taggedjs-dump-user-textarea");(0,o.l_)(t.value).toBe(""),t.value="{test:22}",(0,o.b$)(t),(0,o.l_)(t.value).toBe("{test:22}");const n=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(n.length).toBe(1),(0,o.l_)(n[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,o.b$)(t);const e=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(e.length).toBe(2),(0,o.l_)(e[0].innerText).toBe("test"),(0,o.l_)(e[1].innerText).toBe("testb"),t.value="",(0,o.b$)(t)}))}))},157:(t,n,e)=>{e.r(n);var o=e(78);(0,o.it)("function in props",(async()=>{(0,o.di)("#fun_in_prop1","#fun_in_prop_display"),(0,o.di)("#fun_in_prop2","#fun_in_prop_display"),(0,o.di)("#fun_in_prop3","#fun_in_prop_display"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},488:(t,n,e)=>{e.r(n);var o=e(78);console.log("INCLUDED!!!"),(0,o.yY)("Injection Test",(()=>{const t=()=>{const t=[];for(let n=0;n<10;n++){const e=(0,o.L7)(`injection-test-item-${n}`);e&&t.push(e)}return t},n=()=>t().map((t=>t.querySelector('input[type="checkbox"]'))),e=()=>n().filter((t=>t?.checked)).length,r=()=>{const e=t();n().forEach(((t,n)=>{t?.checked&&e[n].click()}))};(0,o.HF)((()=>{r()})),(0,o.iu)((()=>{r()})),(0,o.it)("should have injection testing section with all items unchecked initially",(()=>{const e=(0,o.L7)("injection-testing-wrap-host");(0,o.l_)(e).toBeDefined();const r=t();(0,o.l_)(r.length).toBe(10);n().forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)}))})),(0,o.it)("should select individual items when clicked",(()=>{const r=t(),s=n();(0,o.l_)(e()).toBe(0),r[0].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(e()).toBe(1),r[2].click(),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(e()).toBe(2),r[4].click(),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(e()).toBe(3)})),(0,o.it)("should deselect items when clicked again",(()=>{(0,o.l_)(e()).toBe(0);const r=t(),s=n();r[1].click(),r[3].click(),r[5].click(),(0,o.l_)(e()).toBe(3),r[3].click(),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(e()).toBe(2),r[1].click(),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(e()).toBe(1),r[5].click(),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(e()).toBe(0)})),(0,o.it)("should select multiple items when clicking on different items",(()=>{const r=t(),s=n();r[0].click(),r[2].click(),r[4].click(),r[6].click(),r[8].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(s[6].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[8].checked).toBe(!0),(0,o.l_)(s[9].checked).toBe(!1),(0,o.l_)(e()).toBe(5)})),(0,o.it)("should toggle selection state correctly",(()=>{const e=t(),r=n();e[0].click(),(0,o.l_)(r[0].checked).toBe(!0),e[0].click(),(0,o.l_)(r[0].checked).toBe(!1),e[0].click(),(0,o.l_)(r[0].checked).toBe(!0),e[0].click(),(0,o.l_)(r[0].checked).toBe(!1)})),(0,o.it)("should maintain selection state across multiple operations",(()=>{const r=t(),s=n();r[1].click(),r[2].click(),r[3].click(),(0,o.l_)(e()).toBe(3),r[7].click(),r[9].click(),(0,o.l_)(e()).toBe(5),r[2].click(),r[7].click(),(0,o.l_)(e()).toBe(3),(0,o.l_)(s[1].checked).toBe(!0),(0,o.l_)(s[2].checked).toBe(!1),(0,o.l_)(s[3].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[9].checked).toBe(!0)})),(0,o.it)("should restore to original unchecked state after test",(()=>{const s=t(),a=n();s.forEach((t=>t.click())),(0,o.l_)(e()).toBe(10),r(),a.forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)})),(0,o.l_)(e()).toBe(0)})),(0,o.it)("should handle rapid clicking without issues",(()=>{const e=t(),r=n();for(let t=0;t<10;t++)e[0].click();(0,o.l_)(r[0].checked).toBe(!1),e[0].click(),(0,o.l_)(r[0].checked).toBe(!0)})),(0,o.it)("should update visual indicators when items are selected",(()=>{const n=t();n[0].click();const e=n[0].getAttribute("style")||"";(0,o.l_)(e.includes("background: rgb(76, 175, 80)")).toBe(!0),(0,o.l_)(e.includes("border: 3px solid rgb(51, 51, 51)")).toBe(!0);const r=n[1].getAttribute("style")||"";(0,o.l_)(r.includes("background: rgb(33, 150, 243)")).toBe(!0),(0,o.l_)(r.includes("border: 1px solid rgb(153, 153, 153)")).toBe(!0)}))}))},774:(t,n,e)=>{e.r(n);var o=e(78);(0,o.it)("🪞 mirror testing",(()=>{(0,o.wG)("#mirror-counter-display",2),(0,o.wG)("#mirror-counter-button",2);const t=Number((0,o._8)("mirror-counter-display"));(0,o.L7)("mirror-counter-button").click(),(0,o.l_)(t+1).toBe(Number((0,o._8)("mirror-counter-display"))),(0,o.wG)("#mirror-counter-display",2),(0,o.Lo)("#mirror-counter-display")}))},994:(t,n,e)=>{e.r(n);var o=e(78);(0,o.it)("oneRender",(()=>{(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,o.di)("#👍-counter-button","#👍-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,o.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("🧳 props",(()=>{(0,o.it)("test duels",(()=>{(0,o.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,o.it)("child prop communications",(()=>{(0,o.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,o.it)("basics",(()=>{const t=(0,o.dy)("#propsOneLevelFunUpdate-🥩-display"),n=(0,o.dy)("#propsDebug-🥩-change-count-display");(0,o.l_)(n).toBe((Number(t)+1).toString());const e=(0,o.L7)("propsDebug-🥩-0-display").innerHTML,r=(0,o.L7)("propsDebug-🥩-1-display").innerHTML,s=(0,o.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,a=Number(e),c=Number(r),l=Number(s);(0,o.l_)(c).toBe(l),(0,o.l_)(a+2).toBe(c)})),(0,o.it)("letProp",(()=>{(0,o.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,o.dy)("#propsDebug-🥩-0-display")),n=(0,o.IO)("#propsDebug-🥩-2-button")[0]._click();(0,o.l_)(n).toBe("no-data-ever"),(0,o.l_)((0,o.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,o.l_)((0,o.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,o.L7)("propsDebug-🥩-1-button").click()})),(0,o.it)("props as functions",(()=>{const t=Number((0,o._8)("sync-prop-number-display"));(0,o.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,o.L7)("sync-prop-child-button").click(),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("🫴 providers",(()=>{(0,o.it)("basics",(()=>{(0,o.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,o.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,o.it)("inner outer debug",(()=>{(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,o.yY)("host attributes",(()=>{(0,o.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),t){const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(255, 0, 0)")||n.borderColor.includes("red");(0,o.l_)(e).toBe(!0),(0,o.l_)(n.borderWidth).toBe("2px"),(0,o.l_)(n.borderStyle).toBe("solid")}})),(0,o.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),t){const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(0, 128, 0)")||n.borderColor.includes("green");(0,o.l_)(e).toBe(!0),(0,o.l_)(n.borderWidth).toBe("2px"),(0,o.l_)(n.borderStyle).toBe("solid")}})),(0,o.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),t&&(0,o.l_)(t.innerHTML.trim()).toBe("wonderful - parent(red)")})),(0,o.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),n=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),(0,o.l_)(n).toBeDefined(),t&&n&&(0,o.l_)(t.contains(n)).toBe(!0)})),(0,o.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),n=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(n).toBeDefined(),t&&n){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,o.wS)(t);const e=window.getComputedStyle(n),r=e.borderColor.includes("blue")||e.borderColor.includes("rgb(0, 0, 255)");(0,o.l_)(r).toBe(!0,`in-cycle-parent should be blue not ${e.borderColor}`)}})),(0,o.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),n=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(n).toBeDefined(),t&&n){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0}));const e=window.getComputedStyle(n),r=e.borderColor.includes("purple")||e.borderColor.includes("rgb(128, 0, 128)");(0,o.l_)(r).toBe(!0)}})),(0,o.it)("child2 has correct innerHTML and green border",(()=>{const t=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),t){(0,o.l_)(t.textContent.trim().replace(/\n(\s+)/g," ")).toBe("wonderful too part 2");const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(0, 128, 0)")||n.borderColor.includes("green");(0,o.l_)(e).toBe(!0),(0,o.l_)(n.borderWidth).toBe("2px"),(0,o.l_)(n.borderStyle).toBe("solid")}})),(0,o.it)("child2 color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select-2"),n=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(n).toBeDefined(),t&&n){t.value="orange",t.dispatchEvent(new Event("change",{bubbles:!0}));const e=window.getComputedStyle(n),r=e.borderColor.includes("orange")||e.borderColor.includes("rgb(255, 165, 0)");(0,o.l_)(r).toBe(!0,`in-cycle-child-2 should be orange not ${e.borderColor}`)}}))}))}))},232:(t,n,e)=>{e.d(n,{v:()=>r});var o=e(856);const r=({renderCount:t,name:n})=>o.dy.dom(s.allStrings21541[0],n,n+"_render_count",t),s={allStrings21541:[[{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"("},{nn:"text",v:0},{nn:"text",tc:" render count "},{nn:"span",at:[["id",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]},{nn:"text",tc:")"}]}]}]]}},451:(t,n,e)=>{e.r(n);var o=e(78);(0,o.it)("basic app subject",(()=>{const t=(0,o.dZ)("#app-counter-subject-value-display");(0,o.V4)("#app-counter-subject-button");const n=(0,o.dZ)("#app-counter-subject-value-display");(0,o.l_)(Number(t)).toBe(Number(n)-1)}))},168:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("🔀 tagSwitching",(()=>{(0,o.it)("0",(()=>{(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(1),(0,o.l_)((0,o.o5)("#tag-switch-dropdown")).toBe(1),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(2),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,o.it)("1",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="1",t._change({target:t}),(0,o.wG)("#tagSwitch-1-hello",5),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("2",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="2",t._change({target:t}),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",4),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("3",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="3",t._change({target:t}),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.wG)("#tagSwitch-3-hello",7),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("4",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="",t._change({target:t}),(0,o.wG)("#select-tag-above",1),(0,o.wG)("#tag-switch-dropdown",1),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",0),(0,o.wG)("#tagSwitch-3-hello",0)}))}))},525:(t,n,e)=>{function o(t){const n=((new Error).stack||"").split("\n")[3]||"";return{toBe(e,o){if(t!==e){const r="function"==typeof o?o():o,s=r||`Expected ${JSON.stringify(e)} but got ${JSON.stringify(t)}`,a=new Error(s);throw a.stack=s+"\n"+n+(a.stack?"\n"+a.stack:""),a}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(n){if("number"!=typeof t||!(t>n))throw new Error(`Expected ${t} to be greater than ${n}`)},toHaveLength(n){const e=t;if(!("length"in e)||e.length!==n)throw new Error(`Expected length ${n} but got ${e.length||"undefined"}`)},not:{toBe(n){if(t===n)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(n)}`)}}}}e.d(n,{l:()=>a});const r=void 0!==globalThis.vitest,s=r?globalThis.expect:null;const a=r&&s?function(t,n){if(void 0!==n){const e=s(t);return{toBe(t){try{e.toBe(t)}catch(t){throw new Error(n)}},toBeDefined(){try{e.toBeDefined()}catch(t){throw new Error(n)}},toBeUndefined(){try{e.toBeUndefined()}catch(t){throw new Error(n)}},toBeGreaterThan(t){try{e.toBeGreaterThan(t)}catch(t){throw new Error(n)}},toHaveLength(t){try{e.toHaveLength(t)}catch(t){throw new Error(n)}},not:{toBe(t){try{e.not.toBe(t)}catch(t){throw new Error(n)}}},to:{be:{greaterThan:t=>{try{e.toBeGreaterThan(t)}catch(t){throw new Error(n)}}}}}}const e=s(t);return{...e,to:{be:{greaterThan:n=>s(t).toBeGreaterThan(n)}},toBe:t=>e.toBe(t)}}:function(t,n){if(void 0!==n){const e=o(t);return{toBe(t){e.toBe(t,n)},toBeDefined(){e.toBeDefined()},toBeUndefined(){e.toBeUndefined()},toBeGreaterThan(t){e.toBeGreaterThan(t)},toHaveLength(t){e.toHaveLength(t)},not:{toBe(t){e.not.toBe(t)}},to:{be:{greaterThan:t=>{e.toBeGreaterThan(t)}}}}}const e=o(t);return{...e,to:{be:{greaterThan:t=>{e.toBeGreaterThan(t)}}}}}},78:(t,n,e)=>{e.d(n,{iu:()=>L,HF:()=>E,L7:()=>v,wS:()=>f,VJ:()=>g,V4:()=>i,cS:()=>u,dQ:()=>d,QX:()=>s,yY:()=>I,o5:()=>a,l_:()=>r.l,wG:()=>k,Fr:()=>C,Lo:()=>S,T_:()=>l,dy:()=>x,_8:()=>y,it:()=>j,WB:()=>p,Sb:()=>h,IO:()=>c,_v:()=>_,di:()=>B,Iq:()=>J,dZ:()=>b,b$:()=>w});var o=e(995),r=e(525);function s(t){return document.querySelectorAll(t).length}const a=s;function c(t){return document.querySelectorAll(t)}function l(t){return c(t).forEach((t=>t.focus()))}function i(t){[...c(t)].forEach((t=>t.click()))}function u(t){i("#"+t)}function d(t,n=0){c(t)[n].click()}function p(t,n){const e=new KeyboardEvent("keydown",{key:n,bubbles:!0});t.dispatchEvent(e)}function h(t,n){const e=new KeyboardEvent("keyup",{key:n,bubbles:!0});t.dispatchEvent(e)}function g(t,n=0){f(c(t)[n])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function x(t){let n="";return c(t).forEach((t=>n+=t.innerHTML)),n}function b(t){let n="";return c(t).forEach((t=>n+=t.textContent)),n}function v(t){return document.getElementById(t)}function y(t){const n=document.getElementById(t);return n?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const m=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(m)}function _(t){return new Promise((n=>setTimeout(n,t)))}function k(t,n,e){const o=document.querySelectorAll(t),s=o.length;return e=e||`Expected ${n} elements to match query ${t} but found ${s}`,(0,r.l)(s).toBe(n,e),o}function S(...t){const n=t.reduce(((t,n)=>{const e=document.querySelectorAll(n);return t.push(...e),t}),[]);if(0===n.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const e=n.pop().innerHTML;n.forEach((t=>(0,r.l)(t.innerHTML).toBe(e)))}function C(t,n){(0,r.l)(x(t)).toBe(n)}function V(t,n,{elementCountExpected:e}={elementCountExpected:1},o,s,a=0){(0,r.l)(t.length).toBe(e,(()=>`Expected ${o} to be ${e} elements but is instead ${t.length}`)),(0,r.l)(n.length).toBe(e,(()=>`Expected ${s} to be ${e} elements but is instead ${n.length}`)),t.forEach(((t,n)=>{const e=document.querySelectorAll(s)[n];(0,r.l)(document.body.contains(e)).toBe(!0,`The selected element ${s} is no longer an element on the document body BEFORE clicking ${o}`);let c=Number(e?.innerText);(0,r.l)(typeof t.click).toBe("function"),t.click(),(0,r.l)(e).toBeDefined(),(0,r.l)(document.body.contains(e)).toBe(!0,`The selected element ${s} is no longer an element on the document body AFTER clicking ${o}`);let l=c+1;c=Number(e.innerText),(0,r.l)(document.body.contains(e)).toBe(!0),(0,r.l)(l).toBe(c,(()=>`After click ${o}, counter test ${a+1} of ${a+2} expected ${s} to be value ${l} but it is ${c}`)),t.click(),c=Number(e?.innerText),++l,(0,r.l)(l).toBe(c,(()=>`Counter test ${a+2} of ${a+2} expected ${s} to increase value to ${l} but it is ${c}`))}))}function B(t,n,{elementCountExpected:e}={elementCountExpected:1}){return V(document.querySelectorAll(t),document.querySelectorAll(n),{elementCountExpected:e},t,n)}function J(...t){const[n,e]=t.shift();let o=k(e,1),s=k(n,1);const a=o[0].innerText;V(s,o,{elementCountExpected:1},n,e);let c=2;t.forEach((([t,l],i)=>{o=k(l,1),s=k(t,1);let u=o[0],d=u.innerText;const p=(Number(a)+c).toString();(0,r.l)(d).toBe(p,(()=>`Expected second ${l} increase provider to be increased to ${a} but got ${d}`)),V(s,o,{elementCountExpected:1},n,e,i+2),u=o[0],d=u.innerText;const h=c+2;(0,r.l)(d).toBe((Number(a)+h).toString(),(()=>`Expected ${l} innerText to be ${Number(a)+h} but instead it is ${d}`)),c+=2}))}const T=void 0!==globalThis.vitest,j=T?globalThis.it:o.it,I=T?globalThis.describe:o.yY,E=T?globalThis.beforeEach:o.HF,L=T?globalThis.afterEach:o.iu},995:(t,n,e)=>{e.d(n,{HF:()=>u,executeBrowserTests:()=>p,it:()=>l,iu:()=>d,yY:()=>i});e(525);let o=null,r=new Map,s=[],a=new Map;const c=void 0!==globalThis.vitest,l=c?globalThis.it:(t,n)=>{const e={name:t,fn:n,suite:o};s.push(e);const a=r.get(o)||[];a.push(e),r.set(o,a)},i=c?globalThis.describe:(t,n)=>{const e=o;o=t,r.set(t,[]),a.set(t,{beforeEach:[],afterEach:[]}),n(),o=e},u=c?globalThis.beforeEach:t=>{const n=a.get(o)||{beforeEach:[],afterEach:[]};n.beforeEach.push(t),a.set(o,n)},d=c?globalThis.afterEach:t=>{const n=a.get(o)||{beforeEach:[],afterEach:[]};n.afterEach.push(t),a.set(o,n)};async function p(){let t=0,n=0;const e=[];console.log(`🧪 Running ${s.length} tests...\n`);const c=new Map;for(const t of s){const n=t.suite||null,e=c.get(n)||[];e.push(t),c.set(n,e)}for(const[o,r]of c){o&&console.log(`${o}`);for(const s of r){const r=o?"  ":"",c=a.get(s.suite);try{if(c?.beforeEach)for(const t of c.beforeEach)await t();if(await s.fn(),t++,console.log(`${r}✅ ${s.name}`),c?.afterEach)for(const t of c.afterEach)await t()}catch(t){if(n++,e.push({test:s.name,suite:s.suite,error:t}),console.error(`${r}❌ ${s.name}`),console.error(t),c?.afterEach)for(const t of c.afterEach)try{await t()}catch(t){console.error("Error in afterEach hook:",t)}}}o&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${n} failed`),e.length>0&&(console.error("\n❌ Failed Tests:"),e.forEach((({test:t,suite:n,error:e})=>{const o=n?`${n} > ${t}`:t;if(console.error(`\n${o}:`),console.error(e),e.stack){e.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),s=[],r.clear(),a.clear(),o=null,0===n}},337:(t,n,e)=>{e.r(n);var o=e(78);function r(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let n=0;n<500;n++)t.value="aaa - "+n,(0,o.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const n=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)n[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const e=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)e[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,o.yY)("☑️ todos",(function(){const t=(0,o.IO)(".new-todo")[0];(0,o.it)("todos add one remove one",(async function(){(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.l_)(t).toBeDefined(),t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0)})),(0,o.it)("todos basic",(async function(){window.location.hash="#/",await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),(0,o.V4)("input.toggle"),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),t.value="two",(0,o.WB)(t,"Enter");const n=(0,o.IO)("input.toggle")[1];n.click(),(0,o.l_)(n.checked).toBe(!0),t.value="three",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.V4)("#todo-view-active-link"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.l_)(window.location.hash).toBe("#/active"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.V4)("#todo-view-completed-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(0)})),(0,o.it)("todos editing",(function(){t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0);let n=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,o.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(n),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(1),(0,o.T_)("input#edit-todo-input");const e=(0,o.IO)("input#edit-todo-input")[0];e.value="two",(0,o.WB)(e,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0)})),(0,o.it)("⌚️ todos speedometer",r)}))},702:(t,n,e)=>{e.r(n);var o=e(78);(0,o.yY)("⌚️ watch tests",(()=>{const t=(0,o.dy)("#🍄-slowChangeCount"),n="0"===t;(0,o.it)("basic",(async()=>{const e=Number((0,o._8)("watch-testing-num-display"));(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),n?((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,o.l_)(Number((0,o.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe((0,o.dy)("#🦷-truthSubChangeCount"))),(0,o.V4)("#watch-testing-num-button"),(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🍄‍🟫-subjectChangeCount")).toBe((e+2).toString()),(0,o.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const r=Number((0,o.dy)("#🦷-truthChangeCount"));(0,o.V4)("#🦷-truthChange-button");let s=(r+1).toString();(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+1).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+2).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),(0,o.V4)("#🦷-reset-button");const a=(0,o.dy)("#🦷-watchTruth"),c=(0,o.dy)("#🦷-watchTruthAsSub");(0,o.l_)(c).toBe(a)}))}))},856:(t,n,e)=>{e.d(n,{Ef:()=>B,_i:()=>ye,xQ:()=>Tt,v0:()=>qo,KU:()=>Ho,sj:()=>$,tg:()=>Sr,IX:()=>sr,tv:()=>Tn,uz:()=>nr,_:()=>or,G7:()=>kn,aj:()=>Vt,Wq:()=>et,iB:()=>jr,FU:()=>ko,fm:()=>Dr,ho:()=>Ir,dy:()=>mr,Kn:()=>it,DE:()=>at,RW:()=>Fo,ev:()=>xe,Zx:()=>_o,nc:()=>he,J8:()=>Vr,Kf:()=>z,a:()=>Go,td:()=>No,SB:()=>pe,$q:()=>Uo,fo:()=>Xo,Ld:()=>Oo,Te:()=>Do,_q:()=>me,bX:()=>Cr,YP:()=>Ro,Ut:()=>Mo});const o=":tagvar",r=":";function s(t){if(t.startsWith("class."))return"class";const n=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==n?n:!!t.startsWith("style.")&&"style"}const a=new RegExp(o+"(\\d+)"+r,"g");function c(t){return t.search&&t.startsWith(o)?t.search(a):-1}const l=/(:tagvar\d+:)/,i="ondoubleclick",u=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,d=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function p(t){const n=[],e=[],s=[];let a=null,c=-1,i=0;const p=new RegExp(d,"g");for(t=function(t){return t.replace(h,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(t);i<t.length;){const d=p.exec(t);if(!d)break;const[h,f,b]=d,y=h.startsWith("</"),m=h.endsWith("/>");if(i<d.index){const n=t.slice(i,d.index);if(n.trim()){const t=x(n);for(let n of t)n.startsWith(o)&&n.search(l)>=0&&-1===n.search(_)&&(n=o+ ++c+r),g(a,e,n)}}if(i=d.index+h.length,y){a=s.pop()||null;continue}const w=[];let k;for(;null!==(k=u.exec(b));)c=v(k,c,n,w);const S={nn:f};w.length&&(S.at=w),a?(a.ch||(a.ch=[]),a.ch.push(S)):e.push(S),m||(s.push(a),a=S)}if(i<t.length){const n=t.slice(i);if(n.trim()){const t=x(n);for(const n of t)n.startsWith(o)&&++c,g(a,e,n)}}return e}const h=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function g(t,n,e){!function(t,n,e){t?(t.ch||(t.ch=[]),t.ch.push(e)):n.push(e)}(t,n,{nn:"text",tc:f(e)})}function f(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function x(t){return t.split(l).filter(b)}function b(t){return""!==t}function v(t,n,e,c){const l=t[1]||t[3]||t[5];let u=t[2]||t[4]||t[6];if(void 0===l)return n;const d=""!==t[2],p=void 0===u&&d,h=l.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===i.length&&t===i?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(l.slice(0,o.length)===o){const t=o+ ++n+r;return e.push(["at",t]),c.push([t]),n}if(t[0].startsWith(l)&&t[0].slice(l.length,t[0].length).search(/\s+$/)>=0)return c.push([g]),n;const s=t[3];if(s.search(_)>=0){u=s;const t=[g,u];return c.push(t),n}u=o+ ++n+r}d||(u=t[2]);const f=u.split(m).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(a)>=0&&++n})));const x=[g,u],b=s(h);return b&&x.push(b),"style"===g?(c.unshift(x),n):(c.push(x),n)}const y=new RegExp(o+"(\\d+)"+r,"gi"),m=new RegExp("("+o+"\\d+"+r+")","gi"),w=o.slice(0,o.length-1),_=new RegExp(w+"&#x72;(\\d+)"+r,"gi"),k=w+"&#x72;$1"+r;function S(t,n){const e=function(t,n){const e=t;return function(t,n){const e=[];for(let s=0;s<t.length;++s){const a=t[s].replace(y,k);s<n.length?e.push(a+o+s+r):e.push(a)}return function(t,n,e){const s=e.length-n.length;if(s>0)for(let e=s;e>0;--e)t.push(o+(n.length+e-1)+r)}(e,t,n),e}(e,n)}(t,n).join("");return p(e)}const C="";var V,B;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(V||(V={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(B||(B={}));const J={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},T="ch";function j(t,n,e=[],o=[]){const r=t;for(let t=0;t<r.length;t++){const s=[...o,t],a=r[t];if(a.at){const t=a.at;a.at=E(t,n)}if(a.ch){const t=a.ch,o=[...s,T];a.ch=j(t,n,e,o)}t=I(a,n,r,t)}return r}function I(t,n,e,s){if("text"!==t.nn)return s;const c=t;let l,i=c.tc;if(typeof i!==V.string)return s;for(;null!==(l=a.exec(i));){const t=l[1],c=parseInt(t,10);if(!isNaN(c)&&c<n){const t=o+c+r,n=i.slice(l.index+t.length);e.splice(s,1,{nn:"text",v:c}),i=n,a.lastIndex=0}}return c.tc=i,s}function E(t,n){const e=[];for(const r of t){const[t,s,a]=r;if(t.startsWith(o)){const r=parseInt(t.replace(o,""),10);if(!isNaN(r)&&r<n){e.push([{tagJsVar:r}]);continue}}if(typeof s===V.string&&s.startsWith(o)){const r=parseInt(s.replace(o,""),10);if(!isNaN(r)&&r<n){e.push([t,{tagJsVar:r},a]);continue}}e.push(r)}return e}function L(t){return t.length}const P={};function O(t,n){const e=function(t){const n=t.map(L);return n.push(t.length),Number(n.join(""))}(t),o=P[e],r=o&&function(t,n,e){if(e&&e.strings.length===t.length&&e.strings.every(((n,e)=>n===t[e]))&&e.values.length===n.length)return!0;return!1}(t,n,o);if(r)return o.domMetaMap;const s=j(S(t,n),n.length),a={interpolation:void 0,string:void 0,strings:t,values:n,domMetaMap:s};return P[e]=a,s}const D=function(){};function $(t){N.length&&(N[N.length-1].paintRemoves.push(...q),q=[]),N.push({promise:t,paintRemoves:q}),q=[]}let N=[],A=[],q=[],H=[],M=[],R=[];const W={locks:0,removeLocks:0};function Y(t,n){n.textContent=t}function z(){if(!(W.locks>0))return function(){(function(){if(N.length){const t=N.map((t=>t.promise.then((()=>{const n=t.paintRemoves;for(const t of n)t[0](...t[1])}))));N=[];const n=q;return Promise.all(t).then((()=>{for(const t of n)t[0](...t[1])}))}for(const t of q)t[0](...t[1])})(),q=[];for(const t of H)t[0](...t[1]);for(const t of M)t[0](...t[1]);for(const t of A)t[0](...t[1])}(),void function(){A=[],H=[],M=[];const t=R;R=[];for(const n of t)n[0](...n[1])}()}function X(t,n){q.push([U,[t,n]])}function U(t,n){t.parentNode.removeChild(t)}function F(t,n){t.parentNode.insertBefore(n,t)}function Q(t,n){t.appendChild(n)}const G="object"==typeof document&&document.createElement("div");function K(t){return G.innerHTML=t,document.createTextNode(G.innerHTML)}function Z(t,n,e=D){const o=K(n);F(t,o),e(o)}function tt(t,n,e=D){G.innerHTML=n;const o=document.createTextNode(G.textContent);F(t,o),e(o)}function nt(t,n,e){G.innerHTML=n;const o=document.createTextNode(G.textContent);Q(t,o),e(o)}function et(t,n){const e=ot(t.subContext,n);return delete t.subContext,e}function ot(t,n){t.deleted=!0;const e=t.appendMarker;if(e&&(X(e,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const o=t.contextItem;return o.tagJsVar.delete(o,n),76}function rt(t){if(!t)return!1;switch(t.tagJsType){case J.dom:case J.tag:case J.templater:return!0}return!1}function st(t){const n=t?.tagJsType;return n===J.tagComponent||n===J.stateRender}function at(t){return it(t)&&typeof t.subscribe===B.function}function ct(t){return t&&lt(t.then)}function lt(t){return typeof t===B.function}function it(t){return typeof t===B.object&&null!==t}function ut(t){return Array.isArray(t)}function dt(t){return t.renderCount=t.renderCount||0,t.state={newer:{state:[],states:[]}},t.global={blocked:[]}}function pt(){return Et.stateConfig.support}function ht(t){return ir(t.context),Et.stateConfig.support=t}function gt(t){const n=t.state;return n&&n.newest&&n.newest?n.newest:t.parentContext?gt(t.parentContext):void 0}function ft(t){let n=t;for(;n.ownerSupport&&!st(n.templater);)n=n.ownerSupport;return n.context.state.newest||n}function xt(...t){return t}function bt(t){const n=Et.stateConfig;return n.states[n.statesIndex]=t,++n.statesIndex,t(xt)}function vt(t){const n=Et.stateConfig,e=n.statesIndex,o=ft(n.prevSupport).context.state.newer.states[e];let r=[];o((function(...t){return r=t,t}));return n.states[n.statesIndex]=t,++n.statesIndex,t((function(...t){return r}))}function yt(t){ir(t);const n=Et.stateConfig;n.handlers.handler=Ct,n.handlers.statesHandler=bt,n.rearray=[];const e=n.state=[],o=n.states=[];n.statesIndex=0;(t.state=t.state||{}).newer={state:e,states:o}}function mt(t){const n=Et.stateConfig;return n.rearray=t,n.state=[],n.states=[],n.statesIndex=0,n.handlers.handler=St,n.handlers.statesHandler=vt,n}function wt(t,n,e){mt(e);Et.stateConfig.prevSupport=n,ht(t)}class _t{}function kt(t){const n=t.callback;if(!n)return t.defaultValue;const[e]=function(t){const[n]=t(_t),[e]=t(n);return[n,e]}(n);return e}function St(){const t=Et.stateConfig,n=t.rearray[t.state.length];return t.state.push(n),n.defaultValue}function Ct(t){const n=Et.stateConfig,e=cr();if(!e||!e.state){const t="State requested but TaggedJs is not currently rendering a tag or host";throw console.error(t,{config:n,context:e}),new Error(t)}const o=e.state.newer;n.state=o.state;let r=t;if(typeof t===B.function&&(r=t()),typeof r===B.function){const t=r;r=function(...n){return t(...n)},r.original=t}const s={get:function(){return kt(s)},defaultValue:r};return n.state.push(s),r}function Vt(t){const n=new Tt;return n.subscribeWith=n=>{const e=[],o=[],r=(r,s)=>{e[s]=!0,o[s]=r;if(e.length===t.length){for(const t of e)if(!t)return;n(o,a)}},s=[...t],a=s.shift().subscribe((t=>r(t,0))),c=s.map(((t,n)=>t.subscribe((t=>r(t,n+1)))));return a.subscriptions=c,a},n}function Bt(t,n,e){const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value+1);const r=function(){r.unsubscribe()};return r.callback=n,r.subscriptions=[],r.unsubscribe=function(){return function(t,n,e){!function(t,n){const e=t.findIndex((t=>t.callback===n));-1!==e&&t.splice(e,1)}(n,e);const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value-1),t.unsubscribe=()=>t;const r=t.subscriptions;for(const t of r)t.unsubscribe();return t}(r,e,n)},r.add=t=>(r.subscriptions.push(t),r),r.next=t=>{n(t,r)},r}function Jt(t,n,e){const o=[...n],r=o.shift(),s=t=>{if(o.length)return Jt(t,o,e);e(t)};let a=s;const c=r(t,{setHandler:t=>a=t,next:s});a(c)}class Tt{constructor(t,n){this.value=t,this.onSubscription=n,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this)}subscribe(t){const n=Bt(0,t,this.subscribers),e=this.subscribeWith;if(e){if(this.methods.length){const e=t;t=t=>{Jt(t,this.methods,(t=>e(t,n)))}}return e(t)}return this.subscribers.push(n),this.onSubscription&&this.onSubscription(n),n}next(t){this.value=t,this.emit()}emit(){const t=this.value,n=this.subscribers;for(const e of n)e.callback(t,e)}toPromise(){return new Promise((t=>{this.subscribe(((n,e)=>{e.unsubscribe(),t(n)}))}))}toCallback(t){const n=this.subscribe(((e,o)=>{const r=o?.unsubscribe;r?r():setTimeout((()=>n.unsubscribe()),0),t(e)}));return this}pipe(...t){const n=new Tt(this.value);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return Vt(t.map((t=>{if(at(t))return t;return new Tt(t,(n=>(n.next(t),n)))})))}}Tt.globalSubCount$=new Tt(0);function jt(t){Object.defineProperty(t,"value",{set(n){t._value=n,t.emit()},get:()=>t._value})}const It=new Tt(void 0,(function(t){pt()||t.next()})),Et={stateConfig:{state:[],version:Date.now(),handlers:{handler:Ct,statesHandler:bt}},tagClosed$:It};function Lt(t,n,e){const o=t.tagJsVar.checkValueChange(n,t,e);return-1===o||gr(n,t,e,o),o}function Pt(t,n,e,o,r){const s=n.context;s.locked=3,e.element=e.element||o,ir(e),function(t,n,e,o,r){n.tagJsVar.processInit(t,n,e,o,r)}(t,e,n,o,r),ur(),delete s.locked,e.value=t}function Ot(t){switch(t){case void 0:case!1:case null:return C}return t}function Dt(t,n,e){return t===n.value?-1:Lt(n,t,e)}function $t(t,n,e){"object"!=typeof t[n]&&(t[n]={});for(const o in e)H.push([Ht,[t,n,o,e[o]]]);if(t[n].setProperty)for(const o in e)H.push([qt,[t,n,o,e[o]]])}function Nt(t,n,e){t.setAttribute(n,"")}function At(t,n,e){if(void 0!==e&&!1!==e&&null!==e)return it(e)?$t(t,n,e):void t.setAttribute(n,e);t.removeAttribute(n)}function qt(t,n,e,o){t[n].setProperty(e,o)}function Ht(t,n,e,o){t[n][e]=o}function Mt(t,n,e,o){switch(o){case"autofocus":return void H.push([Xt,[e]]);case"autoselect":return void H.push([zt,[e]]);case"style":{const o=t.split(".");return void H.push([Rt,[e,o,n]])}case"class":return void function(t,n,e){const o=t.split(".");if(o.shift(),n){for(const t of o)H.push([Wt,[e,t]]);return}for(const t of o)H.push([Yt,[e,t]])}(t,n,e)}throw new Error(`Invalid special attribute of ${o}. ${t}`)}function Rt(t,n,e){const o=n[1];t.style[o]=e,t.style.setProperty(o,e)}function Wt(t,n){t.classList.add(n)}function Yt(t,n){t.classList.remove(n)}function zt(t){t.select()}function Xt(t){t.focus()}function Ut(t,n){const e=function(t,n,e=[]){const o=t.context;e.push({support:t,renderCount:o.renderCount,provider:n});const r=n.children;for(let t=r.length-1;t>=0;--t){const o=r[t],s=o.context;e.push({support:o,renderCount:s.renderCount,provider:n})}return e}(t,n);return e}function Ft(t){return t.support}function Qt(t,n){return Gt(t,n)}function Gt(t,n){if(null===t||typeof t!==B.object)return t;if(n<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const e=ut(t)?[]:Object.create(Object.getPrototypeOf(t));if(ut(t))for(let o=0;o<t.length;o++)e[o]=Gt(t[o],n-1);else for(const o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=Gt(t[o],n-1));return e}function Kt(t,n,e){return Zt(t,n,e)}function Zt(t,n,e){return!(t!==n&&(o=t,r=n,!lt(o)||!lt(r)||o.toString()!==r.toString()))||(e<0||typeof t===B.object&&typeof n===B.object&&(t instanceof Date&&n instanceof Date?t.getTime()===n.getTime():ut(t)&&ut(n)?function(t,n,e){if(t.length!==n.length)return!1;for(let o=0;o<t.length;o++)if(!Zt(t[o],n[o],e-1))return!1;return!0}(t,n,e-1):!ut(t)&&!ut(n)&&function(t,n,e){const o=Object.keys(t),r=Object.keys(n);if(0===o.length&&0===r.length)return!0;if(o.length!==r.length)return!1;for(const s of o){if(!r.includes(s)||!Zt(t[s],n[s],e-1))return!1}return!0}(t,n,e-1)));var o,r}function tn(t,n){const e=t.length;for(let o=0;o<e;++o){const e=t[o],r=n[o];if(ut(e)&&ut(r)){if(e===r)continue;return 3}if(typeof e!==B.function||typeof r!==B.function)if(typeof e!==B.object){if(e!==r)return 3.3}else if(typeof n===B.object){const t=Object.entries(e);for(const n of t){if(!nn(n,r))return 3.1}}}return!1}function nn([t,n],e){const o=e[t];return typeof n===B.function&&typeof o===B.function||o===n}function en(t){return t.map(on)}function on(t,n){const e=t,o=t?.tagJsType;if(o)switch(o){case J.signal:case J.subscribe:case J.stateRender:return;case J.dom:case J.tag:case J.templater:return en(e.values)}return ut(t)?en(e):Qt(t,n)}function rn(t){return on(t,Se)}function sn(t){return on(t,Ce)}function an(t,n,e){const o={templater:t,context:n,castedProps:e,appSupport:void 0};return n.global.blocked=[],n.state||(n.state={newer:{state:[],states:[]}}),o}function cn(t,n,e,o){n.appSupport=e;const r=t.props;return r&&(n.propsConfig=function(t,n,e){const o=t.templater;if(o.tagJsType!==J.stateRender){switch(o.propWatch){case ye.IMMUTABLE:return t.propsConfig={latest:n,castProps:e};case ye.SHALLOW:return t.propsConfig={latest:n.map(rn),castProps:e}}return t.propsConfig={latest:n.map(sn),castProps:e}}}(n,r,o)),n}function ln(t,n){const e=n.providers;if(e)for(const t of e)for(let e=t.children.length-1;e>=0;--e){t.children[e].context.global===n&&t.children.splice(e,1)}t.context.destroy$.next(),t.context.renderCount=0}function un(t,n){for(const e of t){const t=e.lastArray;if(t){un(t,n);continue}const o=e.value;if(o?.tagJsType===J.subscribe){o.delete(e,n),e.deleted=!0;continue}const r=e.global;if(!r)continue;const s=e.state.newest,a=r.subscriptions;a&&a.forEach(pn),st(s.templater)&&ln(s,r);un(e.contexts,s),r.deleted=!0}}function dn(t,n=[],e=[]){for(const o of t){const t=o.global;if(!t)continue;const r=o.state.newest;if(r){n.push(r);const o=t.subscriptions;o&&e.push(...o)}const s=o.contexts;s&&dn(s,n,e)}return{tags:n,subs:e}}function pn(t){t.unsubscribe()}function hn(t,n,e,o){const r=t.length-1,s=n-o,a=s<0||r<s,c=e[n];if(a)return gn(c),1;const l=function(t,n,e,o,r){const s=n&&t!==n.arrayValue;if(s)return gn(e),o.splice(r,1),2;return 0}(c.value.arrayValue,t[n],c,e,n);return l}function gn(t){!function(t,n){if(t&&n.state?.oldest){return void yn(n.state.oldest,t)}const e=n.simpleValueElm;delete n.simpleValueElm,X(e)}(t.global,t)}function fn(t){xn(t,t.lastArray)}function xn(t,n){for(let t=0;t<n.length;++t)gn(n[t]);delete t.lastArray}function bn(t,n){const e=t.global;!function(t,n){for(const e of t){if(e.withinOwnerElement){const t=e.tagJsVar;if(t&&"host"===t.tagJsType){const n=e.supportOwner;t.delete(e,n)}continue}const t=e.lastArray;if(t){xn(e,t);continue}const o=e.simpleValueElm;if(o){delete e.simpleValueElm,X(o);continue}const r=e.global;if(void 0===r)continue;r.deleted=!0;const s=e.state?.oldest;s&&bn(e,n)}}(t.contexts,n),function(t){const n=t.htmlDomMeta;for(let t=n.length-1;t>=0;--t){vn(n[t]),n.splice(t,1)}}(e)}function vn(t){const n=t.marker;n&&X(n);const e=t.domElement;e&&X(e,"destroyClone")}function yn(t,n){const e=t.context;n.deleted=!0,e.renderCount=0;const o=[];return un(e.contexts,t),t.templater.wrapper&&ln(t,n),bn(e,o),delete e.state,delete e.contexts,o}function mn(t,n){const e=wn(t,n);return!(e||!n.templater.tag?._innerHTML||!wn(t.outerHTML,n))||e}function wn(t,n){const e=t.templater,o=n.templater,r=e?.tag||t,s=o.tag;if(e?.tagJsType===J.stateRender)return e.dom===o.dom;switch(r.tagJsType){case J.dom:return s?.tagJsType===J.dom&&function(t,n){const e=t.dom,o=n.dom;return e===o}(r,s);case J.tag:{const e=function(t,n,e,o){const r=t.strings,s=n.strings;if(r.length!==s.length)return!1;if(!r.every(((t,n)=>s[n].length===t.length)))return!1;const a=e.templater.values||t.values,c=o.templater.values||n.values;return function(t,n){const e=t.length===n.length;if(!e)return!1;const o=n.every((function(n,e){const o=t[e];if(typeof n===B.function&&typeof o===B.function){return!!(n.toString()===o.toString())}return!0}));if(o)return!0;return!1}(a,c)}(r,s,t,n);return e}}throw new Error(`unknown tagJsType of ${r.tagJsType}`)}function _n(t){const n=t.global;yn(t.state.newest,n),delete t.contexts,delete t.state,delete t.global,t.renderCount=0}function kn(t,n){const e=n.global,o=n.state?.newest;if(rt(t)){return mn(t,o)?(hr(n,t,o),-1):(yn(o,e),dt(n),7)}const r=t?.tagJsType;if(r){return!0===hr(n,t,n.state.newest.ownerSupport)?-1:88}return _n(n),8}function Sn(t,n,e,o){const r={value:t,valueIndex:n.length,destroy$:new Tt,tagJsVar:mo(t),withinOwnerElement:e,parentContext:o};return n.push(r),r}function Cn(t,n,e,o,r,s,a){const c=document.createTextNode(C),l=Sn(t,n,r>0,o);return l.placeholder=c,l.element=s,s?M.push([Q,[s,c]]):A.push([F,[a,c]]),Pt(t,e,l,s,a),l}function Vn(t,n,e,o,r,s,a,c){const l=[];if(n.at)for(const a of n.at){const n=a[0],c=a[1],i=a[2]||!1,u=to(e,n,t,o,a.length>1?At:Nt,r,s,i,c);"object"==typeof u&&l.push(u)}return a?M.push([Q,[a,t]]):A.push([F,[c,t]]),l}function Bn(t,n,e,o,r,s,a,c){const l=[];a&&void 0===c&&(c=document.createTextNode(C),M.push([Q,[a,c]]),a=void 0);for(let i=0;i<t.length;++i){const u=t[i],d=u.v;if(!isNaN(d)){Cn(n[r.length],r,e,o,s,a,c);continue}const p={};if(l.push(p),"text"===u.nn){Jn(p,u,a,c);continue}const h=p.domElement=document.createElement(u.nn),g={isAttrs:!0,element:h,parentContext:o,contexts:[],destroy$:new Tt,tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,withinOwnerElement:!0},f=Vn(h,u,n,e,r,g,a,c);g.element=h,g.contexts=f,u.ch&&(p.ch=Bn(u.ch,n,e,g,r,s+1,h,c).dom)}return{dom:l,contexts:r}}function Jn(t,n,e,o){const r=t,s=r.tc=n.tc;e?M.push([nt,[e,s,function(t){r.domElement=t}]]):A.push([tt,[o,s,function(t){r.domElement=t}]])}function Tn(t,n,e){const o=t.context,r=o.global;o.state=o.state||{};const s=o.state;s.oldest=t,s.newest=t,o.state.older=o.state.newer,++W.locks;const a=function(t,n,e,o){const r=function(t){const n=t.templater,e=n.tag;if(e.tagJsType===J.dom)return e.dom;const o=e.strings;return O(o,e.values)}(t),s=t.templater.tag,a=s.values,c=[];t.context.contexts=c;const l=Bn(r,a,t,n,c,0,e,o);return l}(t,t.context,n,e);return r.htmlDomMeta=a.dom,--W.locks,a}function jn(t,n){const e=n.state.newest,o=n.placeholder;return e.ownerSupport=t,Tn(e,void 0,o),e}function In(t){const n={tagJsType:J.templater,processInit:Pn,checkValueChange:kn};return n.tag=t,t.templater=n,n}function En(t,n,e){const o=function(t,n,e,o,r){const s={templater:t,context:o,castedProps:r,appSupport:void 0};return s.ownerSupport=n,s.appSupport=e,s}(t,n,n.appSupport,e);return e.contexts=[],o}function Ln(t,n,e,o,r){const s=En(t,e,n);s.ownerSupport=e;const a=Tn(s,o,o?void 0:r);for(const t of a.dom)t.marker&&(o?M.push([Q,[o,t.marker]]):A.push([F,[r,t.marker]])),t.domElement&&(o?M.push([Q,[o,t.domElement]]):A.push([F,[r,t.domElement]]));return s}function Pn(t,n,e,o,r){return n.state={},o?Ln(t,n,e,o,r):jn(e,n)}function On(t,n){const e={tagJsType:J.templater,processInit:Pn,processInitAttribute:D,processUpdate:Dt,checkValueChange:kn,delete:_n,propWatch:t,props:n,key:function(t){return e.arrayValue=t,e},matchesInjection:t=>e.wrapper===t||e.wrapper?.original===t?.original};return e}const Dn=[];function $n(t){const n=t.context;return Le(t.templater)?Oe(t):Ee(t,t,n)}function Nn(t,n,e){return t.map((function(t){return function(t,n,e,o){if(rt(t)||!t)return t;if(!n)return t;return An(t,n,e,o)}(t,n.ownerSupport,n,e)}))}function An(t,n,e,o,r){if(!t)return t;if(t.tagJsType)return t;if(typeof t===B.function)return o<=1?function(t,n,e){const o=t.mem;if(o)return t;const r=function(...t){return function(t,n,e,o){const r=o.context,s=r.state?.newest||o,a=void 0===pt(),c=t.apply(n,e),l=function(){const t=s.context;return!t.global||t.locked||$n(s),c};if(a)return l();return Et.tagClosed$.toCallback(l),c}(r.mem,n,t,e)};return r.original=t,r.mem=t,Object.assign(r,t),r}(t,r,n):t;if(o===Ce)return t;return Hn(t)?t:ut(t)?function(t,n,e,o){for(let r=t.length-1;r>=0;--r){const s=t[r];if(t[r]=An(s,e,n,o+1,t),typeof s===B.function){if(s.mem)continue;qn(o+1,r,s,t,n)}}return t}(t,e,n,o):function(t,n,e,o){const r=Object.keys(t);for(const s of r){const r=t[s],a=An(r,e,n,o+1,t);if(t[s]===a)continue;const c=Object.getOwnPropertyDescriptor(t,s);if(!(c?.get||c?.set)&&(t[s]=a,typeof a===B.function)){if(r.mem)continue;qn(o+1,s,r,t,n)}}return t}(t,e,n,o)}function qn(t,n,e,o,r){t>0&&(o[n].subscription=r.context.destroy$.toCallback((function(){o[n]=e})))}function Hn(t){return typeof t!==B.object||!t||t.tagJsType}function Mn(t,n,e,o){const r=n.original,s=t.tagJsType===J.stateRender,a=Et.stateConfig;let c;return ht(e),s?c=t():(c=r(...o),typeof c===B.function&&(c=c())),c.templater=t,t.tag=c,e.context.state.newer={...a},e}function Rn(t,n,e,o,r){const s=an(t,o,r);return s.ownerSupport=n,cn(t,s,e,r)}function Wn(t,n,e){const o=t.propWatch===ye.DEEP?Ce:Se,r=t.props,s=n.propsConfig;let a=s.castProps;const c=e?.propsConfig,l=c?.castProps;l&&(s.castProps=l,a=Je(n,e,e.ownerSupport,r,o));return a||Nn(r,n,0)}function Yn(t,n){++t.context.renderCount,zn(),Et.tagClosed$.next(n)}function zn(){!function(){const t=Et.stateConfig,n=t.context;n.state=n.state||{},n.state.newer={...t};const e=t.support;n.state.newest=e}(),function(){const t=Et.stateConfig;delete t.prevSupport,delete t.support,delete t.state,delete t.states,ur()}()}function Xn(t,n,e,o){let r;const s=t.templater;if(s.tagJsType===J.stateRender){const n=s;r=Rn(s,o,t.appSupport,e),Mn(s,n,r)}else{r=(0,s.wrapper)(t,e,n)}return Yn(r,o),r.ownerSupport=t.ownerSupport,r}function Un(t,n,e,o){return wt(t,n,e.state.older.state),Xn(t,n,e,o)}function Fn(t,n,e,o){return yt(t.context),ht(t),Xn(t,n,e,o)}function Qn(t,n,e,o,r){dt(n);const s=function(t,n,e){const o=On(ye.DEEP);o.tagJsType=t.tagJsType;const r=En(o,e,n);function s(){return o.tag=t(),r}return o.wrapper=s,s.tagJsType=t.tagJsType,s.original=t.original||t,r}(t,n,e);return Fn(s,void 0,n),Ln(s.templater,n,e,o,r)}function Gn(t,n,e,o){const r=Rn(t,e,e.appSupport,n),s=r.propsConfig;if(s){const n=t.tagJsType!==J.tagComponent?[]:Wn(t,r);s.castProps=n}return function(t,n){const e=Tn(t,n,void 0);for(const t of e.dom)t.domElement&&M.push([Q,[n,t.domElement]]),t.marker&&M.push([Q,[n,t.marker]]);return t}(Fn(r,n.state.newest,n),o)}function Kn(t,n,e,o){if(dt(n),o){return Gn(t,n,e,o)}const r=function(t,n,e){const o=Rn(t,e,e.appSupport,n),r=o.propsConfig;if(r){const n=t.tagJsType!==J.tagComponent?[]:Wn(t,o);r.castProps=n}const s=Fn(o,n.state.newest,n);return Tn(s,void 0,n.placeholder),s}(t,n,e);return r}function Zn(t){++W.locks,t.forEach(te),--W.locks,z()}function te(t){const n=t.context;if(!n.global)return;Pe(n.state.newest)}function ne(t,n){for(let e=0;e<t.length;++e){se(t[e],n[e])}}let ee;function oe(...t){return ee=t,t}function re(){return ee}function se(t,n){t(oe,1),n(re,2)}function ae(t,n,e,o){for(let e=t.length-1;e>=0;--e){const o=t[e].get(),r=n[e].callback;r&&r(o)}for(let t=o.length-1;t>=0;--t){le.length=0,ce=0;(0,o[t])(ie),e[t](ue)}}let ce=0;const le=[];function ie(...t){return le.push(t),t}function ue(...t){return le[ce++]}function de(t,n,{resolvePromise:e,resolveValue:o}){if(ct(t)){return n.context.locked=2,t.then(function(t,n){return e=>{const o=t.context.global,r=t.context;if(delete r.locked,!0===o.deleted)return n(e);!function(t,n){const e=t.context.state,o=n.context.state;ne(e.newer.states,o.newer.states)}(t,r.state.newest);return Zn(Ne(t)),n(e)}}(n,e))}return o(t)}function pe(t){return Et.stateConfig.handlers.handler(t)}function he(t){return pe((()=>{const n=t();if(cr().global){return de(n,pt(),{resolvePromise:ge,resolveValue:fe})}})),me}function ge(t){return t}function fe(t){return t}function xe(t){return pe((function(){cr().destroy$.toCallback(t)})),me}let be=0;const ve={get:lr,onclick:t=>{const n=nr(t);return pe((()=>{lr().addEventListener("click",n)})),nr}};var ye;function me(t,n=ye.SHALLOW){const e=function(...o){const r=On(n,o);r.tagJsType=J.tagComponent,r.processInit=Kn;const s=function(t,n){return function(e,o,r){const s=Wn(t,e,r),a=e.ownerSupport,c=Rn(t,a,e.appSupport,o,s);return Mn(t,n,c,s)}}(r,e);return s.original=t,r.wrapper=s,r},o=t;return e.original=t,o.tags=Dn,o.setUse=Et,o.ValueTypes=J,o.tagIndex=be++,Dn.push(e),e}function we(t,n,e){if($e(t,n))return 11;switch(e){case ye.NONE:return 1;case ye.SHALLOW:return tn(t,n);case ye.IMMUTABLE:return ke(t,n)}return function(t,n){let e=t,o=n;e=[...t],o=[...n||[]];if(!e.every(((t,n)=>function(t,n,e,o){const r=o[n];if(typeof t===B.object){const n={...t},e={...r||{}},o=Object.entries(n).every((([t,o])=>_e(o,e[t],(()=>{delete n[t],delete e[t]}))));return o}return _e(t,r,(function(){e.splice(n,1),o.splice(n,1)}))}(t,n,e,o))))return 7;return!1}(t,n)}function _e(t,n,e){if(typeof t!==B.function)return!!Kt(t,n,Ce)&&4;if(typeof n!==B.function)return!1;const o=n?.original;o&&(n=o);t.original&&(t=t.original);return t.toString()===n.toString()?(e(),5):(e(),6)}function ke(t,n){const e=t.length;for(let o=0;o<e;++o){if(t[o]!==n[o])return 2}return!1}!function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(ye||(ye={})),me.element=ve,me.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},me.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},me.deepPropWatch=me,me.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},me.inject=function(t){const n=cr();if(!n)throw new Error("tag.inject can only be called within a tag or host context");let e=n.parentContext;for(;e;){const n=e.contexts;if(n)for(const e of n)if(e.isAttr&&e.tagJsVar?.matchesInjection&&e.tagJsVar.matchesInjection(t))return e.returnValue;if(e.tagJsVar?.matchesInjection&&e.tagJsVar.matchesInjection(t))return e.returnValue;e=e.parentContext}const o=`Could not find parent context for tag.inject ${t}`;throw console.error(o,{targetItem:t,context:n}),new Error(o)},me.onInit=he,me.onDestroy=xe,me.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},me.immutableProps=function(t){return me(t,ye.IMMUTABLE)},me.watchProps=function(t){return me(t,ye.SHALLOW)},Object.defineProperty(me,"renderOnce",{set(t){t.tagJsType=J.renderOnce,t.processInit=Qn,t.processUpdate=Dt,t.delete=_n,t.checkValueChange=function(){return-1}}}),Object.defineProperty(me,"use",{set(t){t.original={setUse:Et,tags:Dn},t.tagJsType=J.stateRender,t.processInit=Kn,t.processUpdate=Dt,t.checkValueChange=kn,t.delete=_n}});const Se=3,Ce=10;function Ve(t,n,e,o,r,s){return null==t||s>r?n:typeof t===B.function?n.mem?(t.mem=n.mem,n):(t.mem=n,t):Hn(n)?n:ut(n)?function(t,n,e,o,r,s){for(let a=t.length-1;a>=0;--a){const c=t[a],l=n[a];t[a]=Ve(l,c,e,o,s,r+1)}return t}(n,t,e,o,s,r):function(t,n,e,o,r,s){const a=Object.keys(t);for(const c of a){const a=t[c],l=Ve(n[c],a,e,o,s,r+1);if(a===l)continue;const i=Object.getOwnPropertyDescriptor(t,c)?.set;i||(t[c]=l)}return t}(n,t,e,o,s,r)}function Be(t,n,e){const o=e.global,r=e.state.newest,s=r.templater.wrapper;let a=n.templater.wrapper,c=!1;const l=n.templater.tagJsType,i=J.stateRender===l||J.renderOnce===l;if(i)c=n.templater.tagJsType===J.renderOnce||mn(r,n);else if(s&&a){const t=r.templater.tag?._innerHTML;t&&(a=n.outerHTML);c=s.original===a.original}const u=n.templater;if(!c)return void function(t,n,e){const o=t.global;yn(t.state.oldest,o),dt(t),n.processInit(n,t,e,void 0,t.placeholder)}(e,u,t);const d=i||function(t,n){return we(n.props,t.propsConfig.latest,t.templater.propWatch)}(r,u);if(d)e.locked?o.blocked.push(n):(Pe(n),++e.renderCount);else{!function(t,n,e,o,r){const s=t.props,a=Je(n,e,o,s,r),c=n.propsConfig;c.castProps=a;const l=e.propsConfig;l.latest=c.latest}(u,n,r,t,u.propWatch===ye.DEEP?Ce:Se)}}function Je(t,n,e,o,r,s=-1){const a=n.context;if(!a.global||!a.state.newest){const n=Nn(o,t,s);o.push(...n);return t.propsConfig.castProps=n,o}const c=(n=a.state.newest||n).propsConfig.castProps,l=[];for(let n=0;n<o.length;++n){const a=o[n],i=Ve(c[n],a,t,e,r,s+1);l.push(i)}return t.propsConfig.castProps=l,l}function Te(t){const n=t.context,e=n.global,{subs:o,tags:r}=dn(n.contexts);je(n);for(const t of r){if(!0===t.context.global.deleted)return;je(t.context)}e.subscriptions&&o.forEach(pn),dt(n)}function je(t){t.global.deleted=!0,bn(t,[])}function Ie(t,n,e){let o;o=function(t){const n=t?.context,e=n?.state;return e?.older?.state}(n)?Un(t,n,e):Fn(t,n,e);const r=!n||mn(n,o);if(r){if(n){const t=n.templater.tag;if(t&&e.renderCount>0){const e=n?.templater,o=e?.tag;!function(t,n,e){if(t.tagJsType===J.dom){const o=e?.dom;return void(o!==t.dom&&Te(n))}if(e){const o=e.strings;if(o){const e=o?.length;e!==t.strings.length&&Te(n)}}}(t,n,o)}}}else{!function(t,n){const e=t.context.global;let o=-1;const r=e.providers=e.providers||[],s=r.length-1;for(;o++<s;){const t=r[o];let s=-1;const a=t.children.length-1;for(;s++<a;)if(e===t.children[s].context.global)return t.children.splice(s,1),void t.children.push(n)}}(n,o),Te(n);const t=o.context;t.state.oldest=o,t.state.newest=o,t.state.older=t.state.newer}return o.ownerSupport=t.ownerSupport,{support:o,wasLikeTags:r}}function Ee(t,n,e){const o=Ie(n,t,e);return o.wasLikeTags?(pr(e.state.oldest,o.support),o.support):jn(n,e)}function Le(t){return J.templater===t.tagJsType}function Pe(t){const n=t.context,e=n.global,o=Le(t.templater);if(n.locked)return console.log("global",{global:e,subject:n}),e.blocked.push(t),t;if(o){return Oe(t)}n.locked=4,e.blocked.length&&(t=e.blocked.pop(),e.blocked=[]);const r=Ee(n.state.newest,t,n);return delete n.locked,r}function Oe(t){return Pe(ft(t).context.state.newest)}function De(t,n){if(n.context.global.deleted)return!1;const e=function(t,n){const e=t.props,o=n.propsConfig,r=o.latest;if($e(e,r))return!0;switch(t.propWatch){case ye.IMMUTABLE:return ke(e,r);case ye.SHALLOW:return tn(e,r)}return!Kt(e,r,Ce)}(t,n);return!!e}function $e(t,n){return t.length!==n.length}function Ne(t,n=[]){const e=t.context,o=Le(t.templater),r=t.ownerSupport;if(e.locked)return n.push(t),n;if(o)return Ne(r,n);if(!0===t.context.global.deleted)return n;const s=t,a=st(s.templater),c=t.templater.tagJsType,l=r&&c!==J.stateRender&&(!a||De(s.templater,s)),i=function(t){const n=t.context.global.providers;if(!n)return[];const e=[];for(const t of n){const n=Ut(t.owner,t);e.push(...n.map(Ft))}return e}(s);return n.push(...i),l?(Ne(r,n),a&&n.push(s),n):(n.push(s),n)}function Ae(t,n){const e=n.context.global,o=function(t,n){if(!0!==e.deleted)return function(t,n,e,o){const r=ft(n),s=r.context;s.locked=1;const a=t.apply(e,o);delete s.locked;return function(t,n){if(n.context.global.deleted)return;return Zn(Ne(n)),de(t,n,{resolvePromise:Me,resolveValue:Re})}(a,r)}(o.tagFunction,o.support,t,n)};return o.tagFunction=t,o.support=n,o}const qe="no-data-ever",He="promise-no-data-ever";function Me(){return He}function Re(){return qe}function We(t,n,e){const o=e[n];if(o){let n=!1;if(t.originalStopPropagation=t.stopPropagation,t.stopPropagation=function(){n=!0,t.originalStopPropagation.call(t),t.stopPropagation=t.originalStopPropagation,delete t.originalStopPropagation},o(t),t.defaultPrevented||n)return}const r=e.parentNode;r&&We(t,n,r)}function Ye(t,n,e,o){const r=t.appElement,s=function(t){"blur"===t&&(t="focusout");return"_"+t}(n);"blur"===n&&(n="focusout");const a=t.context.global.events;if(!a[n]){const t=function(t){We(t,s,t.target)};a[n]=t,r.addEventListener(n,t)}e[s]=o,e[n]=o}function ze(t,n,e,o){const r=function(...n){return r.tagFunction(t,n)};r.tagFunction=n,r.support=e,Ye(e.appSupport,o,t,r)}function Xe(t){return null==t||!1===t}function Ue(t,n,e,o,r,a,c){if(!Xe(n))if(typeof n!==B.object)0!==n.length&&r(e,n,C);else for(const r in n){to(t,r,e,o,At,a,c,s(r),n[r])}}function Fe(t,n){t.removeAttribute(n)}function Qe(t,n,e,o){const r=n,s=t;if(s?.tagJsType){const o=n.value;return o?.tagJsType?void o.checkValueChange(s,n,e):(s.isAttr=!0,ir(n),s.processInitAttribute(r.attrName,t,r.element,s,r,e),ur(),void(r.tagJsVar=s))}if(r.isNameOnly)return function(t,n,e,o,r,s,a,c){if(e){if(Xe(n)||""===n)return void o.removeAttribute(e);if(typeof e===B.object)if(typeof n===B.object)for(const t in e)t in n||H.push([Fe,[o,t]]);else for(const t in e)H.push([Fe,[o,t]])}Ue(t,n,o,r,s,a,c)}(o,t,r.value,r.element,e,r.howToSet,[],r.parentContext),void(r.value=t);const a=r.element;!function(t,n,e,o,r,s,a){if(lt(t))return function(t,n,e,o,r,s,a){const c=t.templater.wrapper;if((c?.tagJsType||c?.original?.tagJsType)!==J.renderOnce)return eo(a,n,t,o,e);return no(n,e,o,r,s,t)}(r,t,o,n,a,s,e);no(t,o,n,a,s,r)}(t,r.attrName,r,a,e,r.howToSet,r.isSpecial),n.value=t}function Ge(t,n,e,o,r,s,a){const l=o.length;function i(o){const s=function(t,n,e){return t.reduce(((t,o)=>{if(c(o)>=0){const o=e++,r=n[o];return t.push(r),t}return t.push(o),t}),[])}(n,o,l).join("");r(e,t,s)}return n.forEach((n=>{if(c(n)>=0){const r=o.length,c=mo(n),l={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:c,valueIndex:o.length,parentContext:a,destroy$:new Tt};c.processUpdate=function(t,n,e,o){i(o)};const u=s[r];l.value=u,o.push(l)}})),i(s),o}function Ke(t,n,e,o,r,s,a,c,l){const i=mo(n),u={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:i,destroy$:new Tt,valueIndex:l,parentContext:r};return o.push(u),i.processUpdate=Qe,function(t,n,e,o,r,s,a){if(e.element=o,e.howToSet=r,typeof n===B.function)return eo(e,n,s,t,o);if(e.attrName=t,e.isSpecial=a,n?.tagJsType)return void function(t,n,e,o,r){n.processInitAttribute(t,n,r,n,e,o),e.tagJsVar=n}(t,n,e,s,o);ro(t,n,o,r,a)}(t,n,u,e,s,a,c),u.value=n,u}function Ze(t){return it(t)&&"tagJsVar"in t?t.tagJsVar:-1}function to(t,n,e,o,r,s,a,c,l){const i=Ze(n),u=i>=0,d=t[i],p=d;if(p?.tagJsType)return function(t,n,e,o,r,s,a,c,l){const i=Sn(t,n,!0,e);return i.element=c,i.valueIndex=r,i.isAttr=!0,i.isNameOnly=l,i.stateOwner=ft(s),i.supportOwner=s,ir(i),o.processInitAttribute(a,o,c,o,i,s),ur(),i.oldTagJsVar=i.tagJsVar,i.tagJsVar=o,i}(l,s,a,p,i,o,n,e,u);if(u){const n=Sn(d,s,!0,a);n.valueIndex=i,n.isAttr=!0,n.element=e,n.isNameOnly=!0,n.howToSet=r;return n.tagJsVar.processUpdate=Qe,Ue(t,d,e,o,r,s,a),n}if(Array.isArray(l))return Ge(n,l,e,s,r,t,o.context);const h=Ze(l);if(h>=0){return Ke(n,t[h],e,s,a,r,o,c,h)}ro(n,l,e,r,c)}function no(t,n,e,o,r,s){if(!1===o){switch(t){case void 0:case!1:case null:return void H.push([oo,[n,e]])}if(lt(t))return ze(n,t,s,e);r(n,e,t)}else Mt(e,t,n,o)}function eo(t,n,e,o,r){n=Ae(n,e);return t.tagJsVar.processUpdate=Qe,ze(r,n,e,o)}function oo(t,n){t.removeAttribute(n)}function ro(t,n,e,o,r){if(r)return Mt(t,n,e,r);o(e,t,n)}function so(t,n,e,o,r){const s=n.tagJsVar,a=t;if(s.checkValueChange(a,n,e)>=0){s.delete(n,e),o.removeAttribute(r);const a=mo(t);a.isAttr=!0,a.processInitAttribute(r,t,o,a,n,e),n.tagJsVar=a}}function ao(t,n,e,o,r){o.delete=co,o.checkValueChange=po,r.tagJsVar=o,r.tagJsVar.processUpdate=(n,o,r)=>{so(n,o,r,e,t)};const a=s(t);ro(t,n,e,At,a)}function co(t){const n=t.element,e=t.attrName;n.removeAttribute(e)}function lo(t){return{tagJsType:"simple",value:t,processInitAttribute:ao,processInit:io,delete:uo,checkValueChange:ho,processUpdate:Dt}}function io(t,n,e,o,r){const s=Ot(t);r=n.placeholder;const a=n.paint=[Z,[r,s,function(t){n.simpleValueElm=t,delete n.paint}]];A.push(a)}function uo(t){const n=t.simpleValueElm;delete t.simpleValueElm,X(n,"deleteSimpleValue")}function po(t,n){return null==t||!(typeof t===B.object)?-1:6}function ho(t,n){return null!=t&&typeof t===B.object?(uo(n),6):(function(t,n){const e=Ot(t);if(n.paint)return void(n.paint[1][1]=e);const o=n.simpleValueElm;H.push([Y,[e,o]])}(t,n),-1)}function go(t,n){return ut(t)?-1:(fn(n),9)}function fo(t,n,e,o){const r=void 0===t.lastArray;r&&(t.lastArray=[]);const s=t.lastArray;let a=t.placeholder,c=0;const l=[];if(!r){for(let t=0;t<s.length;++t){const e=s[t],o=hn(n,t,s,c);0!==o?2!==o?c+=o:t-=1:l.push(e)}t.lastArray=l}const i=n.length;for(let r=0;r<i;++r){a=xo(n,r,t.lastArray,e,a,o).placeholder}}function xo(t,n,e,o,r,s){const a=t[n],c=e[n];if(c)return function(t,n,e,o,r,s,a){const c=e.length>r;if(c)return Dt(t,n,o),n;const l=wo(t,o,e,s,a);return e.push(l),l}(a,c,e,o,n,r,s);const l=wo(a,o,e,r,s);return e.push(l),l}function bo(t){return{tagJsType:"array",value:t,processInitAttribute:D,processInit:yo,processUpdate:vo,checkValueChange:go,delete:fn}}function vo(t,n,e){-1===Dt(t,n,e)&&fo(n,t,e)}function yo(t,n,e,o){fo(n,t,e,o)}function mo(t){const n=t?.tagJsType;return n?t:function(t){if(ut(t))return bo(t);return lo(t)}(t)}function wo(t,n,e,o,r){const s=document.createTextNode(C),a={value:t,tagJsVar:mo(t),withinOwnerElement:!1,placeholder:s,destroy$:new Tt,parentContext:n.context,valueIndex:e.length};return r||A.push([F,[o,s]]),Pt(t,n,a,r,o),r&&M.push([Q,[r,s]]),a}function _o(t,n,e,o){return n.hasEmitted=!0,n.contextItem=wo(t,e,[],o)}function ko(t,n){let e;return t&&(e=n=document.createTextNode(C),M.push([Q,[t,n]])),{appendMarker:e,insertBefore:n}}function So(t,n,e){if(t===n.value)return;if(-1===fr(t,n,e)&&t.callback){Io(t,n.subContext)}}function Co(t,n,e,o,r){const s=t.Observables,{appendMarker:a,insertBefore:c}=ko(o,r);let l=function(t,n,o){_o(t,o,e,c),To(n),l=o.tagJsVar.onOutput=function(t,n,o){const r=o.contextItem;Lt(r,t,e),r.tagJsVar.processUpdate(t,r,e,[t]),To(n)}};const i=Vo(s,e,((t,n,e)=>l(t,n,e)),t);return i.appendMarker=a,n.subContext=i,t.processUpdate=So,t.onOutput=l,i}function Vo(t,n,e,o){function r(t,n){c.lastValues[n]={value:t,tagJsVar:mo(t),oldTagJsVar:c.lastValues[n]?.tagJsVar},s(c.lastValues,n)}function s(t,n){const o=c.tagJsVar;if(o?.callback){const n=o.callback(...t.map((t=>t.value)));e(n,a,c)}else e(t[n].value,a,c)}let a=!0;const c={lastValues:[],subValueHandler:r,valuesHandler:s,tagJsVar:o,subscriptions:[]};return t.forEach(((t,n)=>{a=!0,c.subscriptions.push(t.subscribe((t=>r(t,n)))),a=!1})),o.onOutput=e,c}function Bo(t){t.subContext.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function Jo(t,n){const e=t.subContext;return Bo(t),ot(e,n)}function To(t){t||Et.stateConfig.support||z()}function jo(t,n,e,o,r){const s=Co(t,n,e,o,r);return s.hasEmitted||Io(t,s),s}function Io(t,n){const e=t.Observables[0];if(!n.hasEmitted)return"withDefault"in t?void n.subValueHandler(t.withDefault,0):"value"in e?void n.subValueHandler(e.value,0):void 0;const o=n.lastValues[0].value;n.subValueHandler(o,0)}function Eo(t,n,e,o){Co({tagJsType:J.subscribe,states:[],Observables:[t]},n,e,o)}function Lo(t,n,e,o,r,a){n.delete=Bo;const c=s(t),l=function(n,o){ro(t,n,e,At,c),To(o)},i=Vo(n.Observables,0,l,n);return r.subContext=i,r.value=n,r.tagJsVar=n,r.tagJsVar.processUpdate=function(n,o,s){so(n,r,s,e,t)},{subContext:i,onOutput:l}}function Po(t,n,e,o,r,s){const{subContext:a}=Lo(t,n,e,0,r);a.hasEmitted||function(t,n){const e=n.tagJsVar,o=e.onOutput;if(o===D)throw new Error("blankhandler not converted");const r=t.Observables;let s=r[0]?.value||t.withDefault;t.callback&&(s=t.callback(s));o(s,!0,n)}(n,a)}function Oo(t,n){const e=pt();let o=[];if(e){o=ft(e).context.state.newer.states}return{onOutput:D,tagJsType:J.subscribe,processInitAttribute:Lo,processInit:Co,checkValueChange:$o,processUpdate:fr,delete:Jo,callback:n,states:o,Observables:[t]}}function Do(t,n,e){const o=ft(pt()).context.state.newer;return{onOutput:D,tagJsType:J.subscribe,processInitAttribute:Po,processInit:jo,checkValueChange:$o,processUpdate:D,delete:Jo,callback:e,withDefault:n,states:o.states,Observables:[t]}}function $o(t,n){if(!t?.tagJsType)return 1;const e=t.Observables;if(!e)return 2;const o=n.value.Observables;if(!o||o.length!==e.length)return 3;return e.every(((t,n)=>t===o[n]))?-1:4}function No(t){return pt()?pe((()=>Ao(t))):Ao(t)}function Ao(t){let n=t;const e=new Set,o=t=>{e.forEach((n=>n(t)))};return{tagJsType:J.signal,checkValueChange:$o,processInitAttribute:D,processInit:Eo,processUpdate:So,get value(){return n},set value(t){n!==t&&(n=t,o(t))},delete:Jo,emit:o,subscribe(t){t(n),e.add(t);const o=()=>e.delete(t);return o.unsubscribe=o,o}}}class qo extends Tt{constructor(t){super(t),this.value=t}subscribe(t){const n=super.subscribe(t);return t(this.value,n),n}}class Ho extends Tt{constructor(t){super(t),this.value=t,this._value=t,jt(this)}subscribe(t){const n=super.subscribe(t);return t(this._value,n),n}}function Mo(t){return(n,e)=>{e.setHandler((()=>{}));t(n).then((t=>e.next(t)))}}const Ro=(t,n)=>Yo(t,n),Wo=t=>t;const Yo=(t,n,{init:e,before:o,final:r=Wo}={})=>{const s=pe({pastResult:void 0,values:void 0}),a=s.values;if(void 0===a){if(o&&!o(t))return s.values=t,s.pastResult;const c=(e||n)(t,a);return s.pastResult=r(c),s.values=t,s.pastResult}if(t.every(((t,n)=>t===a[n])))return s.pastResult;if(o&&!o(t))return s.values=t,s.pastResult;const c=n(t,a);return s.pastResult=r(c),a.length=0,a.push(...t),s.pastResult};function zo(t,n){return Object.defineProperty(n,"noInit",{get(){const n=t();return n.setup.init=()=>{},n}}),Object.defineProperty(n,"asSubject",{get(){const n=t(),e=pe((()=>pt())),o=pe((()=>new qo(void 0))),r=pe((()=>({state:Et.stateConfig.state,states:Et.stateConfig.states}))),s=(t,s)=>(Yo(t,((t,n)=>{const a=pt(),c=s(t,n);if(a!==e){const t=r.state,n=e.context.state.older;ae(t,n.state,r.states,n.states)}o.next(c)}),n.setup),o);return s.setup=n.setup,zo((()=>s),s),s}}),Object.defineProperty(n,"truthy",{get(){const n=t();return n.setup.before=t=>t.every((t=>t)),n}}),n}function Xo(t){return pt()?pe((()=>new Tt(t))):new Tt(t)}function Uo(t){return Et.stateConfig.handlers.statesHandler(t)}function Fo(t){const n=No([]),e=No(0),o=No(0);let r=[],s=0;return o.value=e.value,t(((...t)=>(r=t,n.value))),Ro(r,(()=>{++s,n.value=r,t((()=>r))})),Uo(((r,a)=>{if(s)return t(((...t)=>(a&&1!==a||(n.value=t),n.value))),o.value=e.value,void++e.value;t((()=>n.value))})),++s,n.value}function Qo(){return{stateDiff:0,provider:void 0}}zo((()=>function(t){const n=(n,e)=>Yo(n,e,t);return n.setup=t,zo((()=>n),n),n}({})),Ro),Xo._value=t=>{const n=pe((function(){return{state:Et.stateConfig.state,states:Et.stateConfig.states}})),e=pt();return pe((function(){return new qo(t).pipe((t=>{const o=e.context.state.newer;return ae(o.state,n.state,o.states,n.states),t}))}))},Xo.all=function(t){const n=pe((()=>({state:Et.stateConfig.state,states:Et.stateConfig.states}))),e=pt();return Tt.all(t).pipe((t=>{const o=e.context.state.newer;return o&&ae(o.state,n.state,o.states,n.states),t}))};const Go={create:t=>{const n=pe(Qo);if(n.stateDiff){let t=n.stateDiff;for(;t--;)pe(void 0);return pe(void 0)}const e=pe((()=>{const e=Et.stateConfig,o=e.state.length,r=t.prototype?new t:t(),s=e.support,a=e.state.length-o,c={constructMethod:t,instance:r,stateDiff:a,owner:s,children:[]};n.provider=c;const l=s.context.global;return(l.providers=l.providers||[]).push(c),n.stateDiff=a,r})),o=t,r=o.compareTo=o.toString();return n.provider.constructMethod.compareTo=r,e},inject:function(t){return pe((function(){const n=t,e=n.compareTo=n.compareTo||t.toString(),o=pt(),r=[];let s={ownerSupport:o.ownerSupport};for(;s.ownerSupport;){const t=s.ownerSupport.context.global.providers;if(!t){s=s.ownerSupport;continue}const n=t.find((t=>{r.push(t);if(t.constructMethod.compareTo===e)return!0}));if(n){const t=o.context.global;return(t.providers=t.providers||[]).push(n),n.children.push(o),n.instance}s=s.ownerSupport}const a=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${a}. Available providers`,r),new Error(a)}))}};class Ko extends Error{constructor(t,n,e={}){super(t),this.name=Ko.name,this.details={...e,errorCode:n}}}class Zo extends Ko{constructor(t,n){super(t,"sync-callback-error",n),this.name=Zo.name}}function tr(t,n,e,...o){const r=e(...o),s=gt(t);return s&&(Pe(s),ct(r)&&r.finally((()=>{Pe(s)}))),r}function nr(t){const n=cr(),e=pe({callback:t}),o=pe((()=>er(n,Et.stateConfig,e)));return e.callback=t,o}function er(t,n,e){const o=n.states;return function(...n){return tr(t,o,e.callback,...n)}}const or=()=>{const t=cr();if(!t)throw rr;const n=Et.stateConfig;return function(e){return er(t,n,{callback:e})}},rr=new Zo("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function sr(t=[]){return pt()?pe((()=>ar(Ao(t)))):ar(Ao(t))}function ar(t){const n=["push","pop","splice","shift","unshift"],e=["map","reduce","forEach","every"],o=new Proxy(t,{get(r,s){return isNaN(s)?"length"===s?t.value.length:n.includes(s)?o[a=s]=(...n)=>{const e=t.value[a](...n);return t.emit(t.value),e}:e.includes(s)?t.value[s].bind(t.value):t[s]:t.value[s];var a},set:(n,e,o)=>isNaN(e)?"length"===e?(t.value.length=o,t.emit(t.value),!0):(t[e]=o,!0):(t.value[e]=o,t.emit(t.value),!0)});return o}function cr(){return Et.stateConfig.context}function lr(){return cr().element}function ir(t){return Et.stateConfig.context=t}function ur(){delete Et.stateConfig.context}function dr(t,n,e,o){const r=e[n];if(r.deleted)return;const s=t[r.valueIndex],a=r.tagJsVar;ir(r),a.processUpdate(s,r,o,t),ur(),r.value=s}function pr(t,n){const e=t.context.contexts;!function(t,n){const e=n.templater,o=n.templater.tag,r=e.values||o.values,s=t.templater.tag;s.values=r}(t,n),++W.locks,function(t,n){const e=t.templater.tag.values;let o=0;const r=e.length;for(;o<r;)dr(e,o,n,t),++o}(t,e),--W.locks,z()}function hr(t,n,e){if(st(n))return void 0===t.global&&dt(t),function(t,n,e){if(!n.state.newest)return void t.processInit(t,n,e,void 0,n.placeholder);const o=Rn(t,e,e.appSupport,n);Be(e,o,n)}(n,t,e),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n,!0;if(t.global){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n;const o=t.state.newest;if(o)return typeof n===B.function||function(t,n,e,o){let r=e.templater||e;const s=t.templater.tag;s&&s._innerHTML&&(r=e.outerHTML||e._innerHTML.outerHTML);const a=Rn(r,o,o.appSupport,n);pr(t.context.state.oldest,a)}(o,t,n,e),!0}return n.processInit(n,t,e,void 0,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n,!0}function gr(t,n,e,o){const r=t&&t.tagJsType;if(r){if(r===J.renderOnce)return;hr(n,t,e)}else{if(ut(t))return fo(n,t,e),n.oldTagJsVar=n.tagJsVar,void(n.tagJsVar=bo(t));typeof t!==B.function?o&&function(t,n){n.value=t,n.oldTagJsVar=n.tagJsVar,n.tagJsVar=lo(t);const e=n.placeholder,o=Ot(t),r=n.paint=[Z,[e,o,function(t){n.simpleValueElm=t,delete n.paint}]];A.push(r)}(t,n):n.value=t}}function fr(t,n,e){const o=n.subContext,r=xr(J.subscribe,t,e,n);return r||(o&&o.hasEmitted?(o.tagJsVar=t,o.valuesHandler(o.lastValues,0),-1):-1)}function xr(t,n,e,o){if(!n||!n.tagJsType||n.tagJsType!==t){return o.tagJsVar.delete(o,e),gr(n,o,e,99),99}}function br(t,n,e,o,r){const s=t;let a=s.templater;if(a||(a=In(s)),dt(n),o)return Ln(a,n,e,o,r);return(n.state=n.state||{}).newest=En(a,e,n),jn(e,n)}function vr(t,n,e,o,r){br(t.outerHTML,n,e,o,r);n.tagJsVar.processUpdate=function(t,n,e){Lt(n,t?.outerHTML||t,e)},t.checkValueChange=yr}function yr(t,n){return kn(t,n)}function mr(t,...n){const e=function(t,n){const e={values:n,ownerSupport:pt(),tagJsType:J.tag,processInitAttribute:D,processInit:br,processUpdate:Dt,checkValueChange:kn,delete:_n,strings:t,key:t=>(e.arrayValue=t,e),setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=vr,e},acceptInnerHTML:function(t){return t.owner=e,e},html:function(t,n){return e.children={strings:t,values:n},e}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n),o=On(ye.NONE);return o.tag=e,e.templater=o,e}mr.dom=function(t,...n){return function(t,n){const e={values:n,ownerSupport:pt(),dom:t,tagJsType:J.dom,processInitAttribute:D,processInit:br,processUpdate:Dt,checkValueChange:kn,delete:_n,key:function(t){return e.arrayValue=t,e},setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=vr,e},acceptInnerHTML:function(t){return t.owner=e,e},html:{dom:function(t,n){return e.children={dom:t,values:n},e}}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n)};function wr(t,n){t.domElement&&n.appendChild(t.domElement),t.marker&&n.appendChild(t.marker)}function _r(t,n,e){const o=an(t,n);return cn(t,o,o),o.appElement=e,n.state.oldest||(n.state.oldest=o,n.state.older=n.state.newer),n.state.newest=o,o}function kr(t,n,e,o,r,s,a){const c=document.createTextNode(C);Dn.push(e.wrapper||{original:e});const l=function(t,n,e,o,r){o.placeholder=n;const s=o.state.oldest,a=o.state.newest,c=a===s,l=Rn(t,a,a.appSupport,o);if(!c){wt(l,a,o.state.older.state)}if(t.tagJsType===J.stateRender)return function(t,n,e,o,r){const s=t.wrapper||{original:t};if(!n){const n=_r(t,o,r);return Yn(n),n}return Mn(t,s,e),Yn(e),e}(t,r,l,o,e);const i=t.wrapper,u=i(l,o);return Yn(l),u}(e,c,r,s,a);if(n.isApp=!0,a&&(o.tag=l.templater.tag),!r)throw new Error(`Cannot tagElement, element received is type ${typeof r} and not type Element`);r.destroy=function(){const t=n.events;for(const n in t){const e=t[n];r.removeEventListener(n,e)}n.events={},++W.locks;const e=yn(l,n);return--W.locks,z(),e},++W.locks;const i=function(t,n,e,o,r,s){console.debug("🏷️ Building element into tag...",{element:n,app:r,support:t});const a=Tn(t,n,void 0),c=t.context;c.state.oldest=t,c.state.newest=t,c.state.older=c.state.newer;let l=o.setUse;if(o.tagJsType!==J.stateRender){const t=r.original;l=t.setUse,t.isApp=!0}n.setUse=l,n.ValueTypes=J,Sr.push({element:n,support:t});const i=document.createDocumentFragment();i.appendChild(s);for(const t of a.dom)wr(t,i);return console.debug("🏷️ Element Tag DOM built ✅"),i}(l,r,0,e,t,c);return--W.locks,z(),r.appendChild(i),{support:l,tags:Dn,ValueTypes:J}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const Sr=[];function Cr(t,n,e){const o=Sr.findIndex((t=>t.element===n));if(o>=0){const t=Sr[o].support;yn(t,t.context.global),Sr.splice(o,1),console.warn("Found and destroyed app element already rendered to element",{element:n})}let r=()=>l(e);r.propWatch=ye.NONE,r.tagJsType=J.stateRender,r.processUpdate=Dt,r.props=[e],r.isApp=!0;const s=function(t,n){const e={tagJsType:"templater",checkValueChange:kn,delete:_n,processInitAttribute:D,processInit:function(){console.debug("do nothing app function")},processUpdate:Dt},o={value:t,valueIndex:0,destroy$:new Tt,withinOwnerElement:!1,renderCount:0,global:void 0,state:{},tagJsVar:e},r=dt(o);return r.events={},_r(t,o,n),o}(r,n),a=s.global,c=s.state.newest;yt(c.context),ht(c);let l=t(e);const i=typeof l==B.function;return i||(st(l)?(s.state.newest.propsConfig={latest:[e],castProps:[e]},r.propWatch=l.propWatch,r.tagJsType=l.tagJsType,r.wrapper=l.wrapper,r=l):(r.tag=l,l=t)),kr(t,a,r,l,n,s,i)}function Vr(t){if(!t)return D;const n=pt();if(!n)throw new Error("output must be used in render sync fashion");return(...e)=>{const o=n.ownerSupport;return Br(e,t,o.context)}}function Br(t,n,e){const o=e.state,r=o.newest,s=o.newer.states,a=o.older.states;ne(s,a);const c=n(...t);return ne(a,s),R.push([()=>{r.context.global&&(++W.locks,$n(r),--W.locks,z())},[]]),c}function Jr(t,n,e){const o=t.owner._innerHTML;o.processInit=o.oldProcessInit;const r=n.subContext?.contextItem;Lt(r,o,e)}function Tr(t,n,e,o,r){n.subContext={},t.processUpdate=Jr,function(t,n,e,o,r){const{appendMarker:s,insertBefore:a}=ko(r,o),c=e.subContext;c.appendMarker=s;const l=t.owner,i=l._innerHTML;i.processInit=i.oldProcessInit,_o(i,c,n,a)}(t,e,n,r,o)}function jr(){return{tagJsType:"innerHTML",checkValueChange:()=>-1,processInitAttribute:D,processInit:Tr,processUpdate:Jr,delete:et}}function Ir(t,n={}){const e={tagJsType:J.host,processInitAttribute:Lr,checkValueChange:()=>-1,processInit:Pr,processUpdate:Er,delete:Or,options:{callback:t,...n},matchesInjection(n){const e=n?.options?.callback;return e===t}},o=(...e)=>({...o,options:{arguments:e,...n,callback:t}});return Object.assign(o,e),o}function Er(t,n,e){const o=xr(J.host,t,e,n);if(o)return o;const r=n.tagJsVar.options,s=t;mt(n.state.newer.state);const a=s.options.arguments||r.arguments||[];n.returnValue=s.options.callback(...a),zn()}function Lr(t,n,e,o,r){return Pr(n,r)}function Pr(t,n){const e=n.element,o=n.state={};yt(n),function(t,n,e,o){const r=n.options.arguments||[],s=n.options.callback(...r);e.returnValue=s;const a=n.options;a.onInit&&a.onInit(t,n,e,o)}(e,t,n,o),zn()}function Or(t){const n=t,e=n.tagJsVar,o=e.options;if(n.destroy$.subscribers.length&&(ir(t),Br([],n.destroy$.next.bind(n.destroy$),t),ur()),o.onDestroy){const r=n.element;Br([],(function(){ir(t);const s=o.onDestroy(r,e,n,n.state);return ur(),s}),t.stateOwner.context)}}Ir.onInit=t=>Ir((()=>{}),{onInit:t}),Ir.onDestroy=t=>Ir((()=>{}),{onDestroy:t});const Dr={tagElement:Cr,renderWithSupport:Ie,renderSupport:Pe,firstTagRender:Fn,reRenderTag:Un,paint:z}},149:(t,n,e)=>{function o({fxIn:t,fxOut:n,outPositionAbsolute:e=!0}){return{in:(n,e)=>r({fxName:t,...n},e),out:(t,o)=>s({fxName:n,outPositionAbsolute:e,...t},o)}}e.d(n,{tw:()=>v,fx:()=>x,rW:()=>f});const r=async({target:t,fxName:n="fadeInUp"},e)=>(t.style.opacity="0",e&&await c(e),t.style.opacity="1",a(n,t)),s=async({target:t,outPositionAbsolute:n=!0,fxName:e="fadeOutUp"},o)=>(n&&function(t){t.style.zIndex=t.style.zIndex||1;const n=t.offsetTop+"px",e=t.offsetLeft+"px",o=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",r=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=n,t.style.left=e,t.style.width=o,t.style.height=r,t.style.position="absolute"}),0)}(t),o&&await c(o),a(e,t));function a(t,n){let e;const o=new Promise((function(t){e=t}));return n.classList.add("animate__animated","animate__"+t),n.addEventListener("animationend",(function o(r){r.target===n&&(n.classList.remove("animate__animated","animate__"+t),n.removeEventListener("animationend",o),e(void 0))})),o}function c(t){return new Promise((n=>{setTimeout(n,t)}))}var l=e(856);const{in:i,out:u}=o({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:d,out:p}=o({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:h,out:g}=o({fxIn:"fadeIn",fxOut:"fadeOut"}),f=({stagger:t=100,fxIn:n,fxOut:e,duration:o="2s",inName:r="fadeInUp",outName:s="fadeOutDown",outPositionAbsolute:a=!1}={})=>{let c=0;const i=b((function(n){n.style.setProperty("--animate-duration",o);const e=t*c++;return i.fxIn({target:n},e).then((()=>{--c}))}),(function(n){n.style.setProperty("--animate-duration",o);const e=t*c++,r=i.fxOut({target:n},e).then((()=>{--c}));return(0,l.sj)(r),r}),n,e,r,s,a);return i.host},x=({fxIn:t,fxOut:n,stagger:e,inName:o="fadeInUp",outName:r="fadeOutDown",duration:s=".2s",outPositionAbsolute:a=!1}={})=>{const c=b((t=>(t.style.setProperty("--animate-duration",s),c.fxIn({target:t},e))),(t=>{t.style.setProperty("--animate-duration",s);const n=c.fxOut({target:t},e);return(0,l.sj)(n),n}),t,n,o,r,a);return c.host};function b(t,n,e,r,s,a,c){if(!e||!r){const t=o({fxIn:s,fxOut:a,outPositionAbsolute:c});e||(e=t.in),r||(r=t.out)}return{fxIn:e,fxOut:r,host:(0,l.ho)((()=>{}),{onInit:t,onDestroy:n})}}function v({fxIn:t,fxOut:n,duration:e=".2s",outPositionAbsolute:r=!1}={duration:".2s",outPositionAbsolute:!1}){if(!t||!n){const e=o({fxIn:"fadeInUp",fxOut:"fadeOutDown",outPositionAbsolute:r});t||(t=e.in),n||(n=e.out)}const s=(0,l.iB)();return l.dy`
    <div oninit=${t} ondestroy=${n} style.--animate-duration=${e}>${s}</div>
  `.acceptInnerHTML(s)}}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var s=n[o]={exports:{}};return t[o](s,s.exports,e),s.exports}e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{e.d(o,{gV:()=>_n,jG:()=>Jn,fm:()=>t.fm,KH:()=>jn,bX:()=>t.bX,mK:()=>$});var t=e(856),n=e(232);const r=(0,t._q)((()=>(e=(0,t.fo)(0),o=(0,t.td)(0),r=0,a=0,c=(0,t.$q)((t=>[{renderCount:a,counter:r}]=t({renderCount:a,counter:r}))))=>(++a,t.dy.dom(s.allStrings2265941[1],(0,t.Ld)(e),o,r,(()=>{++r,e.next(r),o.value=r}),(0,n.v)({renderCount:a,name:"insideMultiRender"}))))),s={allStrings2265941:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"div",ch:[{nn:"span",ch:[{nn:"text",tc:"👍"},{nn:"span",at:[["id","👍-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"button",at:[["type","button"],["id","👍-counter-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"++👍"}]}]},{nn:"text",v:3},{nn:"hr"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"insideMultiRender"}]},{nn:"text",v:4}]}],[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var a=e(995);let c=null;function l(t=!0,n,o){null!==c&&(clearTimeout(c),console.debug("🏃 Cleared previous testing to start again..."));c=setTimeout((async()=>{n=n||u.views,console.debug("🏃 Prepare test suites...");const r=await async function(t,n=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let o=0;n&&(await Promise.resolve().then(e.bind(e,451)),++o),t.includes(i.Content)&&(await Promise.resolve().then(e.bind(e,118)),await Promise.resolve().then(e.bind(e,835)),++o),t.includes(i.Counters)&&(await Promise.resolve().then(e.bind(e,428)),++o),t.includes(i.Props)&&(await Promise.resolve().then(e.bind(e,749)),++o),t.includes(i.ProviderDebug)&&(await Promise.resolve().then(e.bind(e,186)),await Promise.resolve().then(e.bind(e,488)),++o),t.includes(i.TagSwitchDebug)&&(await Promise.resolve().then(e.bind(e,168)),++o),t.includes(i.Child)&&(await Promise.resolve().then(e.bind(e,527)),++o),t.includes(i.Arrays)&&(await Promise.resolve().then(e.bind(e,842)),++o),t.includes(i.Mirroring)&&(await Promise.resolve().then(e.bind(e,774)),++o),t.includes(i.WatchTesting)&&(await Promise.resolve().then(e.bind(e,702)),++o),t.includes(i.FunInPropsTag)&&(await Promise.resolve().then(e.bind(e,157)),++o),t.includes(i.AttributeDebug)&&(await Promise.resolve().then(e.bind(e,178)),++o),t.includes(i.OneRender)&&(await Promise.resolve().then(e.bind(e,994)),++o),t.includes(i.Todo)&&(await Promise.resolve().then(e.bind(e,337)),++o),t.includes(i.Destroys)&&(await Promise.resolve().then(e.bind(e,236)),++o),console.debug(`🏃 Running ${o} test suites...`);try{const t=Date.now(),n=await(0,a.executeBrowserTests)(),e=Date.now()-t;return console.info(`✅ tests completed in ${e}ms`),n}catch(t){return console.error("❌ tests failed:",t),!1}}(n,o);t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var i;!function(t){t.Basic="basic",t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug"}(i||(i={}));const u=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(i)});return JSON.parse(t)}();function d(){localStorage.taggedjs=JSON.stringify(u)}const p=Object.values(i),h=(n=p)=>{const e=[...n].sort(((t,n)=>t.localeCompare(n)));return t.dy.dom(b.allStrings430137[0],e.map((n=>t.dy.dom(b.allStrings430137[1],"view-type-"+n,"view-type-"+n,u.views.includes(n)&&"checked",(()=>function(t,n=!0){u.views.includes(t)?f(t):g.next({type:t,checkTesting:n});d()}(n)),"view-type-"+n,n,`isolated.html#${n}`,`#${n}`).key(n))),n.length>1&&t.dy.dom(b.allStrings430137[2],(()=>n.forEach((t=>{x(t,!1),d()}))),(()=>n.forEach((t=>{f(t),d()})))))};h.tempNote="sections";const g=new t.xQ;function f(t){u.views=u.views.filter((n=>n!==t))}function x(t,n=!0){u.views.push(t),n&&u.autoTest&&l()}const b={allStrings430137:[[{nn:"div",ch:[{nn:"h3",ch:[{nn:"text",tc:"Sections"}]},{nn:"text",tc:"\x3c!-- checkbox menu --\x3e"},{nn:"div",at:[["style","display:flex;gap:1em;flex-wrap:wrap;margin:1em;"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n\n        "},{nn:"text",v:1}]}]}],[{nn:"div",at:[["style","flex:1;white-space:nowrap;"]],ch:[{nn:"input",at:[["type","checkbox"],["id",{tagJsVar:0},null],["name",{tagJsVar:1},null],[{tagJsVar:2}],["click",{tagJsVar:3},null]]},{nn:"label",at:[["for",{tagJsVar:4},null]],ch:[{nn:"text",tc:"&nbsp;"},{nn:"text",v:5}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;text-decoration:none;"],["href",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🔗"}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"↗️"}]}]}],[{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"&nbsp;all"}]}]},{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"&nbsp;none"}]}]}]]},v=(0,t._q)(((n,e)=>t.dy.dom(y.allStrings19347[0],n,(()=>e(n))))),y={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},m=(0,t._q)(((e,o,r)=>(s="other",a=0,c=0,l=(0,t.$q)((t=>[{other:s,counter:a,renderCount:c}]=t({other:s,counter:a,renderCount:c}))),i=++c,{addArrayItem:u,myFunction:d,deleteItem:p,child:h,array:g}=e)=>t.dy.dom(w.allStrings598669[0],o.function.original?"taggjedjs-wrapped":"nowrap",o.count,h.myChildFunction.original?"taggjedjs-wrapped":"nowrap",d.original?"taggjedjs-wrapped":"nowrap",d,(0,t.J8)(h.myChildFunction),r,S.function,(()=>++a),g.length,g.map((t=>v(t,p).key(t))),u,a,(0,n.v)({renderCount:c,name:"funInProps_tag_child"})))),w={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},_=(0,t._q)((e=>(o=0,r=(0,t.$q)((t=>[o]=t(o))),s=++o,a=(t=>{if("Enter"===t.key){const n=t.target.value.trim();e(n),t.target.value=""}}))=>t.dy.dom(k.allStrings66965[0],a,(t=>{e(t.target.value),t.target.value=""}),e,(0,n.v)({renderCount:o,name:"addArrayComponent"})))),k={allStrings66965:[[{nn:"input",at:[["type","text"],["keyup",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"add by outside"}]},{nn:"text",v:3},{nn:"text",tc:"\n"}]]},S={function:()=>++S.count,count:0},C=(0,t._q)((()=>(e=[],o=0,r=0,s=!0,a="a",c=(()=>++o),l=(0,t.$q)((t=>[{array:e,counter:o,renderCount:r,showChild:s,somethingElse:a}]=t({array:e,counter:o,renderCount:r,showChild:s,somethingElse:a}))),i=++r,u=(t=>{e=e.map((t=>t)),e.push("string"==typeof t?t:"push"+e.length)}),d=(t=>e=e.filter((n=>n!==t))))=>t.dy.dom(V.allStrings360652[0],c,o,(0,n.v)({renderCount:r,name:"funInProps_tag_parent"}),S.function.original?"taggjedjs-wrapped":"nowrap",S.count,(()=>s=!s),e.length,u,s&&m({myFunction:c,array:e,addArrayItem:u,deleteItem:d,child:{myChildFunction:c}},S,c),_(u)))),V={allStrings360652:[[{nn:"button",at:[["id","fun-parent-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🤰 ++parent"}]},{nn:"span",at:[["id","fun_in_prop_display"]],ch:[{nn:"text",v:1}]},{nn:"text",v:2},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"🆎 main:"}]},{nn:"span",at:[["id","main_wrap_state"]],ch:[{nn:"text",v:3}]},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"button",at:[["id","toggle-fun-in-child"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"toggle child"}]},{nn:"text",tc:"array length: "},{nn:"text",v:6},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"reset add"}]},{nn:"hr"},{nn:"text",v:8},{nn:"text",tc:"\n  \n  "},{nn:"text",v:9},{nn:"text",tc:"\n"}]]},B=t._q.immutableProps(((n,e,o)=>(r=!1,s=(0,t.$q)((t=>[r]=t(r))))=>t.dy.dom(T.allStrings349976[0],n.completed,r,r?t.dy.dom(T.allStrings349976[2],n.title,(()=>r=!1),(t=>J(t,(t=>{!function(t,n,e,o){if(0===t.length)return void o.removeItem(n.id);o.updateToByIndex(n,{title:t},e)}(t,n,o,e),r=!1})))):t.dy.dom(T.allStrings349976[1],n.completed&&"✅",(t=>e.toggleItem(n,o)),n.completed&&"checked",(()=>e.toggleItem(n,o)),(()=>r=!r),n.title,(()=>e.removeItemByIndex(o))))));function J(t,n){if("Enter"===t.key){return n(t.target.value.trim()),!0}}const T={allStrings349976:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🗑️ destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},j={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},I=t._q.immutableProps(((n,e,o,r)=>t.dy.dom(E.allStrings77156[0],r,r>1&&"s","/"===o,"/active"===o,"/completed"===o,n-r>0&&t.dy.dom(E.allStrings77156[1],(()=>e()))))),E={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const L=()=>window.location.hash.substring(1)||"/",P=()=>{const n=(0,t.SB)((()=>({route:L(),location:window.location}))),e=(0,t.uz)((t=>n.route=L())),o=(0,t.SB)((()=>(t=>{const n=()=>t(L());return window.addEventListener("hashchange",n),n})(e)));return(0,t.ev)((()=>window.removeEventListener("hashchange",o))),n},O=[],D=function(t){function n(n,e,o){return t[o]={...n,...e},t}return{addItem:function(n){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"===t?n:3&n|8).toString(16)})),title:n,completed:!1}),t},removeItem:function(n){return t.filter((t=>t.id!==n))},toggleItem:function(t,e){return n(t,{completed:!t.completed},e)},removeAll:function(){return t=[]},toggleAll:function(n){for(let e=t.length-1;e>=0;--e)t[e]={...t[e],completed:n};return t},removeCompleted:function(){for(let n=t.length-1;n>=0;--n)t[n].completed&&t.splice(n,1);return t},removeItemByIndex:function(n){return t.splice(n,1),t},completeItem:function(t,e){return n(t,{completed:!0},e)},updateItemByIndex:function(n,e){return t[e]={...n},t},updateToByIndex:n}}(O),$=()=>{const n=P().route,e=O.filter((t=>!t.completed)).length,o="/completed"===n,r="/active"===n&&O.filter((t=>!t.completed))||o&&O.filter((t=>t.completed))||O,s=O.length,a=r.map(((t,n)=>B(t,D,n).key(t.id)));return t.dy.dom(N.allStrings143180[0],!1,(n=>t._q.renderOnce=()=>t.dy.dom(j.allStrings47860[0],(t=>{J(t,(t=>n.addItem(t)))&&(t.target.value="")})))(D),s>0&&t.dy.dom(N.allStrings143180[1],e<1?1:0,(t=>D.toggleAll(t.target.checked)),a,I(s,D.removeCompleted,n,e)))},N={allStrings143180:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},A=(0,t._q)(((e,o,r)=>{let s=0,a=0;return(0,t.$q)((t=>[{counter:s,renderCount:a}]=t({counter:s,renderCount:a}))),++a,t.dy.dom(H.allStrings128026[0],r,(0,t.DE)(r),r instanceof Array,(()=>++s),s,s,(0,n.v)({renderCount:a,name:"innerHtmlTest"}))})),q=(0,t._q)(((n,e)=>(o=0,r=0,s=(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),a=++r)=>t.dy.dom(H.allStrings128026[1],n,e,(()=>++o),o,o,!1))),H={allStrings128026:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"no props test"}]},{nn:"div",at:[["style","border:2px solid purple;"]],ch:[{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectInstance:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectTagArray:"},{nn:"text",v:2}]},{nn:"button",at:[["id","innerHtmlTest-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"increase innerHtmlTest "},{nn:"text",v:4}]},{nn:"span",at:[["id","innerHtmlTest-counter-display"]],ch:[{nn:"text",v:5}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},M=(0,t._q)(((n,e,o)=>t.dy.dom(W.allStrings795052[0],n,e,o))),R=(0,t._q)(((e="childTests")=>(e=0,o=0,r=(0,t.$q)((t=>[{renderCount:e,counter:o}]=t({renderCount:e,counter:o}))),s=++e)=>t.dy.dom(W.allStrings795052[2],M(1,2,t.dy.dom(W.allStrings795052[3],Date.now())),A({},2,t.dy.dom(W.allStrings795052[4],(()=>++o),o,e,o,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest"}))),(()=>{const n=(0,t.iB)();return t.dy.dom(W.allStrings795052[1],11,n,22).acceptInnerHTML(n)})().innerHTML=t.dy.dom(W.allStrings795052[5],(()=>++o),o,e,o,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest-c"})),q(22,t.dy.dom(W.allStrings795052[6],(()=>++o),o,o,(0,n.v)({renderCount:e,name:"innerHtmlPropsTest child"}))),function({child:n}){return t.dy.dom(W.allStrings795052[8],n)}({child:t.dy.dom(W.allStrings795052[7],(()=>++o),o,o)}),(()=>++o),o,e,o,(0,n.v)({renderCount:e,name:"childTests"}))));const W={allStrings795052:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"xxxxx"}]},{nn:"div",ch:[{nn:"text",tc:"hello other world "},{nn:"text",v:0},{nn:"text",tc:" - "},{nn:"text",v:1}]},{nn:"div",at:[["style","border:2px solid red;"]],ch:[{nn:"text",tc:"***"},{nn:"text",v:2},{nn:"text",tc:"***"}]}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child as prop"}]},{nn:"text",v:0}]}]]};let Y=(0,t.td)(0);const z=(0,t._q)((()=>(e=!0,o=0,r=(0,t.$q)((t=>[{renderCount:o,on:e}]=t({renderCount:o,on:e}))),s=++o)=>t.dy.dom(U.allStrings72990[0],Y,e,e&&X(),(()=>{e=!e}),e?"destroy":"restore",(0,n.v)({renderCount:o,name:"destroys"})))),X=(0,t._q)((()=>(n=(0,t.ev)((()=>{++Y.value})))=>t.dy.dom(U.allStrings72990[1],t.ho.onDestroy((()=>{++Y.value}))))),U={allStrings72990:[[{nn:"text",tc:"\n  destroyCount: "},{nn:"span",at:[["id","destroyCount"]],ch:[{nn:"text",v:0}]},{nn:"text",tc:"on/off: "},{nn:"text",v:1},{nn:"text",tc:"\n  \n  "},{nn:"text",v:2},{nn:"button",at:[["id","toggle-destroys"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","destroyable-content"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"will be destroyed"}]}]]};var F=e(149);const Q=(0,t._q)((({score:e,playerIndex:o})=>{let r=0;return(0,t.$q)((t=>[r]=t(r))),++r,t.dy.dom(G.allStrings67878[0],e.frame,`score-data-${o}-${e.frame}-inside-button`,(()=>++e.score),e.score,`score-data-${o}-${e.frame}-inside-display`,e.score,(()=>++r),(0,n.v)({renderCount:r,name:"scoreData"+e.frame}))})),G={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},K=(0,t._q)((()=>(e=(0,t.SB)([]),o=0,r=0,s=(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))))=>{const a=(0,t.IX)(["d","e","f"]),c=(0,t.SB)(["a","b","c"]),l=(0,t.SB)((()=>(0,F.rW)({stagger:10,duration:".1s"}))),i=()=>({name:"Person "+e.length,scores:"0,".repeat(0).split(",").map(((t,n)=>({frame:n+1,score:Math.floor(4*Math.random())+1})))});function u(t){for(let n=0;n<t;++n)a[a.length]=a.length.toString()}return++o,t.dy.dom(tt.allStrings873968[0],r,a.length,(0,t.Ld)(a,(n=>n.map(((n,e)=>t.dy.dom(tt.allStrings873968[1],l,`signal-array-item-${e}`,e,`signal-array-item-counter-display-${e}`,r,n,a.length,`signal-array-item-delete-btn-${e}`,(()=>{a.splice(e,1)}),(()=>++r),r).key(n))))),(()=>++r),r,(()=>u(1)),(()=>u(10)),(()=>{setTimeout((()=>{a[a.length]=a.length.toString()}),1e3)}),(()=>{setTimeout((()=>{a.length=0}),1e3)}),c.map(((n,e)=>t.dy.dom(tt.allStrings873968[2],r,e,n,c.length,(()=>{c.splice(e,1)})).key(n))),(()=>++r),r,(()=>c[c.length]=c.length.toString()),Z({players:e,getNewPlayer:i}),(()=>{e.push(i())}),e.length+1,(()=>{e.push(i()),e.push(i()),e.push(i())}),(()=>{e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i())}),e.length>0&&t.dy.dom(tt.allStrings873968[3],(0,F.fx)({duration:".1s"}),(()=>e.length=0)),(0,n.v)({renderCount:o,name:"arrayTests.ts"}))})),Z=(0,t._q)((({players:n,getNewPlayer:e})=>{const o=n.map(((o,r)=>function(n,e,o,r){return t.dy.dom(tt.allStrings873968[5],(0,F.fx)({duration:".1s"}),n.name,e,n.scores.map(((n,e)=>t.dy.dom(tt.allStrings873968[6],(0,F.fx)(),`score-data-${e}-${n.frame}-outside-button`,(()=>++n.score),n.score,`score-data-${e}-${n.frame}-outside-display`,n.score,Q({score:n,playerIndex:e})).key(n))),n.edit&&t.dy.dom(tt.allStrings873968[7],(()=>{o.splice(e,1),n.edit=!n.edit})),n.edit&&t.dy.dom(tt.allStrings873968[8],"player-remove-promise-btn-"+e,(async()=>{n.edit=!n.edit,o.splice(e,1)})),"player-edit-btn-"+e,(()=>n.edit=!n.edit),(()=>{o.splice(e,0,r())}))}(o,r,n,e).key(o)));return t.dy.dom(tt.allStrings873968[4],o)}));const tt={allStrings873968:[[{nn:"text",tc:"\x3c!--arrayTests.js--\x3e"},{nn:"span",ch:[{nn:"text",tc:"count display:"},{nn:"span",at:[["id","arrays-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"signal array test "},{nn:"sup",at:[["id","signal-array-count"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"button",at:[["type","button"],["id","signal-array-increase-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:4}]},{nn:"button",at:[["type","button"],["id","push-signal-array-btn"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"add number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"add 10 number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"add number by delay"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"delay clear array"}]}]}]},{nn:"fieldset",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"simple array test"}]},{nn:"text",v:9},{nn:"div",ch:[{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:11}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"add number"}]}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:13}]},{nn:"button",at:[["id","array-test-push-item"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"push item "},{nn:"text",v:15}]},{nn:"button",at:[["click",{tagJsVar:16},null]],ch:[{nn:"text",tc:"push 3 items"}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"push 9 items"}]},{nn:"text",v:18},{nn:"text",tc:"\n\n    "},{nn:"text",v:19},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","border:1px solid black;border-radius:.2em"],[{tagJsVar:0}],["id",{tagJsVar:1},null]],ch:[{nn:"text",tc:"index:"},{nn:"text",v:2},{nn:"text",tc:" counter:"},{nn:"span",at:[["id",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",tc:" content:"},{nn:"text",v:5},{nn:"text",tc:" length:"},{nn:"text",v:6},{nn:"button",at:[["id",{tagJsVar:7},null],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:10}]}]}],[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"text",v:0},{nn:"text",tc:" index:"},{nn:"text",v:1},{nn:"text",tc:" x:"},{nn:"text",v:2},{nn:"text",tc:" length:"},{nn:"text",v:3},{nn:"button",at:[["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]}]}],[{nn:"button",at:[[{tagJsVar:0}],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove all"}]}],[{nn:"text",tc:"\x3c!-- playersLoop.js --\x3e"},{nn:"text",v:0},{nn:"text",tc:"\x3c!-- end:playersLoop.js --\x3e"}],[{nn:"div",at:[["style","background-color:black;"],[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",tc:"name:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"index:"},{nn:"text",v:2}]},{nn:"div",at:[["style","background-color:purple;padding:.5em"]],ch:[{nn:"text",tc:"scores:\n        "},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n      "},{nn:"text",v:5},{nn:"button",at:[["id",{tagJsVar:6},null],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"edit"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"add before"}]}]}],[{nn:"div",at:[["class","animate__slow"],[{tagJsVar:0}]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"outer score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6}]}]}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"remove"}]}],[{nn:"button",at:[["id",{tagJsVar:0},null],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove by promise"}]}]]},nt=(0,t._q)(((e="tagSwitchDebug")=>{let o=null,r=0;(0,t.$q)((t=>[{renderCount:r,selectedTag:o}]=t({renderCount:r,selectedTag:o})));let s="select tag below";switch(o){case null:s="null, select tag below";break;case"":s=t.dy.dom(ct.allStrings484932[0]);break;case"1":s=ot({title:"value switch"});break;case"2":s=rt({title:"value switch"});break;case"3":s=st({title:"value switch"})}let a=t.dy.dom(ct.allStrings484932[1]);switch(o){case null:a=t.dy.dom(ct.allStrings484932[2]);break;case"":a=t.dy.dom(ct.allStrings484932[3]);break;case"1":a=ot({title:"tag switch"});break;case"2":a=rt({title:"tag switch"});break;case"3":a=st({title:"tag switch"})}return++r,t.dy.dom(ct.allStrings484932[4],(null===o?"null":void 0===o&&"undefined")||""===o&&"empty-string"||o,(function(t){o=t.target.value,"undefined"===o&&(o=void 0),"null"===o&&(o=null)}),"string"!=typeof o||o.length?{}:{selected:!0},void 0===o?{selected:!0}:{},null===o?{selected:!0}:{},"1"===o?{selected:!0}:{},"2"===o?{selected:!0}:{},"3"===o?{selected:!0}:{},s,a,"3"===o?st({title:"ternary simple"}):ot({title:"ternary simple"}),et({selectedTag:o}),at({selectedTag:o}),(0,n.v)({renderCount:r,name:"tagSwitchDebug"}))})),et=(0,t._q)((({selectedTag:n})=>{const e="3"===n?st({title:"ternaryPropTest"}):ot({title:"ternaryPropTest"});return t.dy.dom(ct.allStrings484932[5],n,e)})),ot=(0,t._q)((({title:e})=>{let o=0,r=0;return(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),++r,t.dy.dom(ct.allStrings484932[6],e,(()=>++o),o,(0,n.v)({renderCount:r,name:"tag1"}))})),rt=(0,t._q)((({title:e})=>{let o=0,r=0;return(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),++r,t.dy.dom(ct.allStrings484932[7],e,(()=>++o),o,(0,n.v)({renderCount:r,name:"tag1"}))})),st=(0,t._q)((({title:e})=>{let o=0,r=0;return(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),++r,t.dy.dom(ct.allStrings484932[8],e,(()=>++o),o,(0,n.v)({renderCount:r,name:"tag1"}))})),at=(0,t._q)((({selectedTag:n},e="arraySwitching")=>{switch(n){case void 0:return t.dy.dom(ct.allStrings484932[9]);case null:return t.dy.dom(ct.allStrings484932[10]);case"":return t.dy.dom(ct.allStrings484932[11]);case"1":return t.dy.dom(ct.allStrings484932[12],ot({title:`tag ${n}`}));case"2":return t.dy.dom(ct.allStrings484932[13],["b","c"].map((e=>t.dy.dom(ct.allStrings484932[14],rt({title:`array ${n} ${e}`})).key(e))));case"3":return t.dy.dom(ct.allStrings484932[15],["d","e","f"].map((e=>t.dy.dom(ct.allStrings484932[16],st({title:`array ${n} ${e}`})).key(e))))}return t.dy.dom(ct.allStrings484932[17])})),ct={allStrings484932:[[{nn:"div",at:[["id","empty-string-1"]]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"null, select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"empty-string, select tag above"}]}],[{nn:"div",at:[["id","selectTag-wrap"]],ch:[{nn:"text",tc:"selectedTag: |"},{nn:"text",v:0},{nn:"text",tc:"|"}]},{nn:"select",at:[["id","tag-switch-dropdown"],["change",{tagJsVar:1},null]],ch:[{nn:"option"},{nn:"text",tc:"\x3c!-- TODO: implement selected attribute ---\x3e"},{nn:"option",at:[["value",""],[{tagJsVar:2}]],ch:[{nn:"text",tc:"empty-string"}]},{nn:"option",at:[["value","undefined"],[{tagJsVar:3}]],ch:[{nn:"text",tc:"undefined"}]},{nn:"option",at:[["value","null"],[{tagJsVar:4}]],ch:[{nn:"text",tc:"null"}]},{nn:"option",at:[["value","1"],[{tagJsVar:5}]],ch:[{nn:"text",tc:"tag 1"}]},{nn:"option",at:[["value","2"],[{tagJsVar:6}]],ch:[{nn:"text",tc:"tag 2"}]},{nn:"option",at:[["value","3"],[{tagJsVar:7}]],ch:[{nn:"text",tc:"tag 3"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],["id","switch-tests-wrap"]],ch:[{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 1 - string | Tag"}]},{nn:"div",ch:[{nn:"text",v:8}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 2 - Tag"}]},{nn:"div",ch:[{nn:"text",v:9}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3 - ternary (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:10}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3.2 - ternary via prop (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:11}]}]},{nn:"div",at:[["style","border:1px solid red;flex-grow:1"],["id","arraySwitching-test-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 4 - arraySwitching"}]},{nn:"div",at:[["id","arraySwitching-wrap"]],ch:[{nn:"text",v:12}]}]}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["id","ternaryPropTest-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:":"},{nn:"text",v:1}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag1"]],ch:[{nn:"div",at:[["id","tagSwitch-1-hello"]],ch:[{nn:"text",tc:"Hello 1 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag2"]],ch:[{nn:"div",at:[["id","tagSwitch-2-hello"]],ch:[{nn:"text",tc:"Hello 2 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag3"]],ch:[{nn:"div",at:[["id","tagSwitch-3-hello"]],ch:[{nn:"text",tc:"Hello 3 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"text",tc:"its an undefined value"}],[{nn:"text",tc:"its a null value"}],[{nn:"text",tc:"space"}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",tc:"nothing to show for in arrays"}]]},lt=(0,t._q)((()=>{const n=it();return t.dy.dom(ut.allStrings156734[0],n,n)})),it=()=>{let n=0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(ut.allStrings156734[1],n,(()=>++n),n)},ut={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},dt=(e,o)=>t._q.use=(r=(0,t.SB)("statePropDebug.tag.ts"),s=!1,a=0,c=(0,t.$q)((t=>[{edit:s,renderCount:a}]=t({edit:s,renderCount:a}))),l=++a)=>t.dy.dom(pt.allStrings53929[0],e,(()=>s=!s),s,o,(0,n.v)({renderCount:a,name:"statePropDebug-tag"})),pt={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},ht=(0,t._q)(((e="propsDebugMain")=>(e=0,o=0,r=0,s={test:33,x:"y"},a=(0,t.SB)((()=>new Date)),c=JSON.stringify(s,null,2),l=!0,i=(0,t.$q)((t=>[{syncPropNumber:e,propNumber:o,renderCount:r,propsJson:s,date:a,statePropDisplay:l}]=t({syncPropNumber:e,propNumber:o,renderCount:r,propsJson:s,date:a,statePropDisplay:l}))))=>t.dy.dom(vt.allStrings3197847[0],(t=>s=JSON.parse(t.target.value)),c,c,++r,(()=>++o),o,o,xt({propNumber:o,propsJson:s,propNumberChange:t=>{o=t}}),e,(()=>++e),(0,n.v)({renderCount:r,name:"sync_props_callback"}),ft({syncPropNumber:e,propNumberChange:t=>e=t,parentTest:t=>t}),l&&dt(o,t.dy.dom(vt.allStrings3197847[1])),(()=>l=!l),a,function(t){const n=new Date(t),e=n.getFullYear(),o=String(n.getMonth()+1).padStart(2,"0"),r=String(n.getDate()).padStart(2,"0"),s=String(n.getHours()).padStart(2,"0"),a=String(n.getMinutes()).padStart(2,"0");return{date:`${e}-${o}-${r}`,time:`${s}:${a}`}}(a).date,(t=>{const n=t.target.value;a=new Date(n)}),gt({date:a})))),gt=(0,t._q)((({date:n})=>t.dy.dom(vt.allStrings3197847[2],n))),ft=(0,t._q)((({syncPropNumber:e,propNumberChange:o,parentTest:r})=>(s=(0,t.SB)("syncPropDebug"),a=0,c=0,l=(0,t.$q)((t=>[{counter:a,renderCount:c}]=t({counter:a,renderCount:c}))))=>(++c,e%2==1&&o(e+=1),t.dy.dom(vt.allStrings3197847[3],e,(()=>o(++e)),a,r(a),(()=>{r(++a)}),(0,n.v)({renderCount:c,name:"child_sync_props_callback"}))))),xt=(0,t._q)((({propNumber:n,propsJson:e,propNumberChange:o})=>(r=(0,t.SB)("propsDebug"),s=0,a=0,c=(0,t.RW)((t=>[n]=t(n))),l=n,i=(0,t.$q)((t=>[{renderCount:s,propNumberChangeCount:a,myPropNumber:l}]=t({renderCount:s,propNumberChangeCount:a,myPropNumber:l}))),u=(0,t.YP)([n],(()=>l=n)),d=(0,t.YP)([l],(()=>++a)))=>t.dy.dom(vt.allStrings3197847[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(d,null,2),(()=>o(++l)),l,l,(()=>++n),n,n,(()=>++s),++s,(()=>++l),l,a,bt({propNumber:l,callback:()=>++l})))),bt=t._q.immutableProps((({propNumber:e,callback:o})=>(r=(0,t.SB)("propFnUpdateTest"),s=0,a=(0,t.$q)((t=>[s]=t(s))))=>(++s,t.dy.dom(vt.allStrings3197847[5],o,e,e,(0,n.v)({renderCount:s,name:"propFnUpdateTest"})))));const vt={allStrings3197847:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},yt=(0,t._q)((n=>t.dy.dom(mt.allStrings248805[0],(()=>n.showDialog=!1),n.showDialog?t.dy.dom(mt.allStrings248805[1],JSON.stringify(n,null,2)):"no dialog"))),mt={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]},wt=(0,t.ho)(((n,e)=>({selected:n,targets:(0,t.SB)([])}))),_t=(0,t.ho)((n=>{const e=t._q.inject(wt);t._q.onInit((()=>e.targets.push(n))).onDestroy((()=>{const t=e.targets.findIndex((t=>t===n));-1!==t&&e.targets.splice(t,1)})).element.onclick((()=>{const t=e.selected.findIndex((t=>t===n));-1!==t?e.selected.splice(t,1):e.selected.push(n)}))})),kt=(0,t._q)((()=>{const n=(0,t.SB)((()=>[0,1,2,3,4,5,6,7,8,9].map((t=>({id:t}))))),e=(0,t.SB)([]),o=wt(e,(t=>{e.length=0,e.push(...t)}));return t.dy.dom(St.allStrings170403[0],e.length,o,n.map((n=>t.dy.dom(St.allStrings170403[1],`injection-test-item-${n.id}`,_t(n),e.includes(n)?"#4CAF50":"#2196F3",e.includes(n)?"3px solid #333":"1px solid #999",e.includes(n)?"checked":"",n.id))),e.length>0?e.map((t=>t.id)).join(", "):"No items selected. Click to select items.")})),St={allStrings170403:[[{nn:"div",at:[["style","padding: 20px;"]],ch:[{nn:"h2",ch:[{nn:"text",tc:"Injection Test"}]},{nn:"text",tc:"selected: "},{nn:"text",v:0},{nn:"div",at:[["style","\n          border: 2px solid #666;\n          gap:1em;\n          background: #f0f0f0;\n          padding: 20px;\n          min-height: 300px;\n          position: relative;\n          user-select: none;\n          display:flex;flex-wrap:wrap;\n        "],["id","injection-testing-wrap-host"],[{tagJsVar:1}]],ch:[{nn:"text",v:2}]},{nn:"div",at:[["style","margin-top: 20px; padding: 10px; background: #333; color: white;"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Selected Items:"}]},{nn:"p",ch:[{nn:"text",v:3}]}]},{nn:"div",at:[["style","margin-top: 10px; color: #666;"]],ch:[{nn:"small",ch:[{nn:"strong",ch:[{nn:"text",tc:"Instructions:"}]},{nn:"br"},{nn:"text",tc:"- Click to select/deselect items"},{nn:"br"},{nn:"text",tc:"- Click on empty space to deselect all"},{nn:"br"},{nn:"text",tc:"- Selected items will be highlighted in green"}]}]}]}],[{nn:"div",at:[["style","\n              display: inline-block;\n              color: black;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: bold;\n              cursor: pointer;\n              transition: background 0.3s;\n              "],["id",{tagJsVar:0},null],[{tagJsVar:1}],["style.background",{tagJsVar:2},"style"],["style.border",{tagJsVar:3},"style"]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:4}]]},{nn:"text",tc:"Item "},{nn:"text",v:5}]}]]};class Ct{constructor(){this.tagDebug=0,this.showDialog=!1}}const Vt=()=>({counter:0});function Bt(){return{upper:t.a.create(Jt),test:0}}function Jt(){return(0,t.SB)("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const Tt=(0,t._q)(((e="providerDebugBase")=>{t.a.create(Vt);const o=t.a.create(Ct),r=t.a.create(Bt);let s=0,a=0;return(0,t.$q)((t=>[{propCounter:s,renderCount:a}]=t({propCounter:s,renderCount:a}))),o.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++a,t.dy.dom(Nt.allStrings6862700[0],r.test,r.upper?.test||"?",o.tagDebug||"?",(()=>++r.test),r.test,r.test,(()=>++r.upper.test),r.upper.test,r.upper.test,(()=>++o.tagDebug),o.tagDebug,o.tagDebug,(()=>++s),s,s,(()=>o.showDialog=!0),o.showDialog,jt({propCounter:s,propCounterChange:t=>{s=t}}),a,(0,n.v)({renderCount:a,name:"providerDebugBase"}),yt(o),$t())})),jt=(0,t._q)((({propCounter:e,propCounterChange:o,_:r="providerDebug.js@child"})=>{const s=t.a.inject(Vt),a=t.a.inject(Bt),c=t.a.inject(Ct),l=t.a.inject(Jt);let i=!1,u=0;(0,t.$q)((t=>[{showProProps:i,renderCount:u}]=t({showProProps:i,renderCount:u})));const d=(0,t._)(),p=(0,t.SB)((()=>new t.xQ));return(0,t.nc)((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),p.subscribe((t=>{d((n=>{a.test=t}))()}))})),++u,t.dy.dom(Nt.allStrings6862700[4],(()=>++a.test),a.test,a.test,(()=>++l.test),l.test,l.test,(()=>++s.counter),s.counter,s.counter,(()=>p.next(a.test+1)),a.test,(()=>++c.tagDebug),c.tagDebug,c.tagDebug,(()=>o(++e)),e,e,(()=>c.showDialog=!0),c.showDialog,(()=>i=!i),i?"hide":"show",i&&t.dy.dom(Nt.allStrings6862700[5],(0,F.fx)(),It(c)),u,(0,n.v)({renderCount:u,name:"providerDebugInner"}))})),It=(0,t._q)((n=>t.dy.dom(Nt.allStrings6862700[6],JSON.stringify(n,null,2)))),Et=(0,t.ho)(((n="red")=>{const e=t._q.element.get();e.style.border="2px solid "+n,e.style.display="flex",e.style.gap="1em";const o={color:n,title:"inCycleParent"};return console.log("parent return value created",{rtn:o}),o})),Lt=(0,t.ho)(((n="green")=>{const e=t._q.inject(Et),o=t._q.element.get();o.style.border="2px solid "+n,o.style.flex="1",o.innerHTML=`wonderful - parent(${e.color})`})),Pt=(0,t.ho)(((n="green")=>{const e=t._q.element.get();e.style.border="2px solid "+n,e.style.flex="1"})),Ot=(0,t.ho)(((n="green")=>{t._q.element.get().style.color=n})),Dt=["red","blue","green","purple","orange"],$t=(0,t._q)((()=>{let n="red",e="green",o="green",r=!1;return(0,t.$q)((t=>[{cycleColorParent:n,cycleColorChild:e,cycleColorChild2:o,hideShowCycles:r}]=t({cycleColorParent:n,cycleColorChild:e,cycleColorChild2:o,hideShowCycles:r}))),t.dy.dom(Nt.allStrings6862700[7],!r,(t=>r=!r),!r&&t.dy.dom(Nt.allStrings6862700[8],(t=>n=t.target.value),Dt.map((e=>t.dy.dom(Nt.allStrings6862700[9],e,n===e,e).key(e))),(t=>e=t.target.value),Dt.map((n=>t.dy.dom(Nt.allStrings6862700[10],n,e===n,n).key(n))),(t=>o=t.target.value),Dt.map((n=>t.dy.dom(Nt.allStrings6862700[11],n,o===n,n).key(n))),kt(),Et(n),Lt(e),Pt(o),Ot(o)))})),Nt={allStrings6862700:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}],[{nn:"fieldset",at:[["id","in-cycle-context-comms"]],ch:[{nn:"legend",ch:[{nn:"label",ch:[{nn:"input",at:[["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"text",tc:"In-Cycle Context Communication"}]}]},{nn:"text",v:2}]}],[{nn:"div",at:[["style","margin-bottom: 1em"],["id","fieldset-body-wrap"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:2},null]],ch:[{nn:"text",v:3}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",at:[["id","drag-drop-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Drag Selection Testing"}]},{nn:"text",v:6}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:7}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:8}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",tc:"wonderful too\n            "},{nn:"text",v:9},{nn:"span",ch:[{nn:"text",tc:"part 2"},{nn:"text",v:10}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},At=(0,t._q)((({label:n,memory:e})=>{let o=!1,r=!1;return(0,t.$q)((t=>[{mouseOverEditShow:o,edit:r}]=t({mouseOverEditShow:o,edit:r}))),t.dy.dom(qt.allStrings140407[0],(()=>o=!0),(()=>o=!1),n,e.counter,o||"false",(()=>++e.counter),r||o?"visible":"hidden",(()=>r=!r))})),qt={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Ht=Date.now(),Mt=t._q.immutableProps((({appCounterSubject:n},e="countersDebug")=>((0,t.SB)("countersDebug state"),t.dy.dom(Xt.allStrings9522277[0],(0,t.Ld)(t.xQ.globalSubCount$),(()=>console.info("subs",t.xQ.globalSubs)),(()=>n.next((n.value||0)+1)),(0,t.Ld)(n),n.value,zt())))),Rt=t._q.deepPropWatch((({propCounter:e,increasePropCounter:o})=>(r=0,s=0,a=0,c=(0,t.$q)((t=>[{elmInitCount:a,otherCounter:r,renderCount:s}]=t({elmInitCount:a,otherCounter:r,renderCount:s}))),l=++s)=>t.dy.dom(Xt.allStrings9522277[1],t.ho.onInit((()=>++a)),a,o,e,e,(()=>++r),r,r,s,(0,n.v)({renderCount:s,name:"inner_counters"})))),Wt=t._q.watchProps((({propCounter:e,increasePropCounter:o})=>{let r=0,s=0;return(0,t.$q)((t=>[{otherCounter:r,renderCount:s}]=t({otherCounter:r,renderCount:s}))),++s,t.dy.dom(Xt.allStrings9522277[2],o,e,e,(()=>++r),r,r,s,(0,n.v)({renderCount:s,name:"shallow_counters"}))})),Yt=t._q.immutableProps((({propCounter:e,increasePropCounter:o})=>{let r=0,s=0;return(0,t.$q)((t=>[{otherCounter:r,renderCount:s}]=t({otherCounter:r,renderCount:s}))),++s,t.dy.dom(Xt.allStrings9522277[3],o,e,e,(()=>++r),r,r,s,(0,n.v)({renderCount:s,name:"immutable_counters"}))})),zt=()=>t._q.use=(e=0,o=0,r=0,s=0,a=0,c=0,l=0,i=(0,t._)(),u=(0,t.uz)((t=>{t})),d=(()=>{++c}),p=(0,t.SB)((()=>({propCounter:c,increasePropCounter:d}))),h=(0,t.$q)((t=>[{counter:r,renderCount:a,propCounter:c,initCounter:l,immutableProps:p,statesRenderCount:e,statesRenderCount2:o}]=t({counter:r,renderCount:a,propCounter:c,initCounter:l,immutableProps:p,statesRenderCount:e,statesRenderCount2:o}))),g=(0,t.SB)((()=>new t.xQ(r))),f=(0,t.SB)((()=>new t.xQ(0))),x=(0,t.SB)((()=>new t.v0("222"))),b=(()=>{++r,x.next("333-"+r)}),v=t.xQ.all([x,g]),y=t.fo.all([x,g]),m=(0,t.SB)((()=>({counter:0}))),w=(0,t.SB)((()=>Date.now())),_=(0,t.nc)((()=>{++l,console.info("countersDebug.ts: 👉 i should only ever run once"),g.subscribe(i((t=>{r=t}))),g.subscribe(u)})))=>(p.propCounter!==c&&(p={propCounter:c,increasePropCounter:d}),++a,t.dy.dom(Xt.allStrings9522277[5],l,e,(()=>{++e}),o,(()=>{++o}),(t=>r=Number(t.target.value)||0),d,c,c,b,r,r>1&&t.dy.dom(Xt.allStrings9522277[6],b,r,r),(()=>g.next(r+1)),(0,t.Ld)(g),(()=>{setTimeout((()=>{f.next(f.value+1)}),10)}),(0,t.Ld)(f),(0,t.Ld)(v,(()=>r)),(0,t.Ld)(y,(()=>r)),!0,At({label:"a-a-😻",memory:m}),At({label:"b-b-😻",memory:m}),m.counter,(()=>++m.counter),Rt({propCounter:c,increasePropCounter:d}),Wt({propCounter:c,increasePropCounter:d}),Yt(p),(({propCounter:e,increasePropCounter:o})=>{let r=0,s=0,a="noWatchPropCounters";return(0,t.$q)((t=>[{otherCounter:r,renderCount:s,noWatchPropCounters:a}]=t({otherCounter:r,renderCount:s,noWatchPropCounters:a}))),++s,t.dy.dom(Xt.allStrings9522277[4],o,e,e,(()=>++r),r,r,s,(0,n.v)({renderCount:s,name:"nowatch_counters"}))})({propCounter:c,increasePropCounter:d}),t.ho.onInit((t=>t.innerText=(Date.now()-Ht).toString())),t.ho.onInit((t=>t.innerText=(Date.now()-w).toString())),(0,n.v)({renderCount:a,name:"counters"}))),Xt={allStrings9522277:[[{nn:"text",tc:"\x3c!--counters--\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"text",tc:"👉 Subscription count:"},{nn:"span",at:[["id","👉-counter-sub-count"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"log subs"}]},{nn:"div",ch:[{nn:"button",at:[["id","counters-app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-display"]],ch:[{nn:"text",v:3}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-subject-display"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],[{tagJsVar:0}]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"text",tc:"🔥 elmInitCount:"},{nn:"span",at:[["id","🔥-init-counter"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️-inner-counter"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"❤️-inner-counter propCounter:"},{nn:"text",v:3}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-inner-display"]],ch:[{nn:"text",v:4}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🤿-deep-counter"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤿 otherCounter:"},{nn:"text",v:6}]},{nn:"span",ch:[{nn:"text",tc:"🤿 "},{nn:"span",at:[["id","🤿-deep-display"]],ch:[{nn:"text",v:7}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:8}]},{nn:"text",v:9},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"text",tc:"initCounter:"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"😱 statesRenderCount:"},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"😱 ++statesRenderCount"}]}]},{nn:"div",ch:[{nn:"text",tc:"😱😱 statesRenderCount2:"},{nn:"text",v:3},{nn:"button",at:[["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"😱😱 ++statesRenderCount2"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"input",at:[["id","set-main-counter-input"],["placeholder","input counter value"],["keyup",{tagJsVar:5},null]]},{nn:"div",ch:[{nn:"button",at:[["id","❤️-increase-counter"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"❤️ propCounter:"},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-counter-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-standalone-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥦 stand alone counters"}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","🥦-standalone-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"text",v:11},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-counter"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🥦&lt;"},{nn:"span",at:[["id","subject-counter-subject-display"]],ch:[{nn:"text",v:13}]},{nn:"text",tc:"&gt;"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-async-counter"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🔀 🥦 ++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🔀 🥦&lt;"},{nn:"span",at:[["id","subject-async-counter-subject-display"]],ch:[{nn:"text",v:15}]},{nn:"text",tc:"&gt;"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 1"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject"]],ch:[{nn:"text",v:16}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 2"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject-2"]],ch:[{nn:"text",v:17}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shared memory"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:.5em"],["class.bold.text-blue",{tagJsVar:18},"class"]],ch:[{nn:"text",v:19},{nn:"text",tc:"\n      "},{nn:"text",v:20}]},{nn:"text",tc:"memory.counter:😻"},{nn:"text",v:21},{nn:"button",at:[["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"increase 😻"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"inner counter"}]},{nn:"text",v:23}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shallow props"}]},{nn:"text",v:24}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"immutable props"}]},{nn:"text",v:25}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"nowatch props"}]},{nn:"text",v:26}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ page load to display in&nbsp;"},{nn:"span",at:[[{tagJsVar:27}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ read in&nbsp;"},{nn:"span",at:[[{tagJsVar:28}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"text",v:29},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","conditional-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"conditional counter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","conditional-display"]],ch:[{nn:"text",v:2}]}]}]}]]},Ut=(0,t._q)((()=>{let n=!0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(Ft.allStrings52782[0],5,5,n&&t.dy.dom(Ft.allStrings52782[1]),n&&t.dy.dom(Ft.allStrings52782[2]))})),Ft={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]};var Qt=e(902);const Gt=t._q.deepPropWatch((()=>(n=0,e=0,o=0,r=0,s=!1,a=0,c=0,l=(0,t.$q)((t=>[{stateNum:n,stateNumChangeCount:e,slowChangeCount:o,subjectChangeCount:r,truthChange:s,truthChangeCount:a,truthSubChangeCount:c}]=t({stateNum:n,stateNumChangeCount:e,slowChangeCount:o,subjectChangeCount:r,truthChange:s,truthChangeCount:a,truthSubChangeCount:c}))),i=(0,t.YP)([n],(()=>++e)),u=t.YP.noInit([n],(0,t.uz)((()=>++o))),d=t.YP.asSubject([n],(0,t.uz)((()=>++r))),p=t.YP.truthy([s],(0,t.uz)((()=>++a))),h=t.YP.truthy.asSubject([s],(0,t.uz)((t=>++c))))=>t.dy.dom(Kt.allStrings2187613[0],n,(()=>++n),e,o,u,r,(0,t.Ld)(d),s?"true":"false",p||"false",a,(0,t.Ld)(h),c,(()=>s=!s),s?"true":"false"))),Kt={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},Zt=(0,t._q)((()=>{const n=(0,t.SB)((()=>new t.xQ)),e=(0,t.SB)((()=>new t.v0("purple"))),o=(0,t.SB)((()=>new t.v0("green")));let r=!1;return(0,t.$q)((t=>[{shouldHideAttributes:r}]=t({shouldHideAttributes:r}))),t.dy.dom(tn.allStrings219820[0],r?"":t.dy.dom(tn.allStrings219820[1],(0,t.Te)(n,"red"),(0,t.Te)(n,"red",(t=>"background-color:"+t)),"blue"===n.value&&(0,t.Ld)(e,(t=>"background-color:"+t))||"red"===n.value&&(0,t.Ld)(o,(t=>"background-color:"+t))||"background-color:pink;"),(()=>{const t=n.value;n.next("red"===t?"blue":"red")}),(0,t.Ld)(n),(()=>r=!r),r?"Show":"Hide",(()=>n.next("")),(0,t.Te)(t.xQ.globalSubCount$,t.xQ.globalSubCount$.value))})),tn={allStrings219820:[[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe attributes"}]},{nn:"text",v:0},{nn:"button",at:[["id","toggle-color-btn"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"Toggle Color ("},{nn:"text",v:2},{nn:"text",tc:")"}]},{nn:"button",at:[["id","toggle-attributes-btn"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4},{nn:"text",tc:" Attributes"}]},{nn:"button",at:[["id","clear-color-btn"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"Clear Color"}]},{nn:"text",tc:"subscriptions: "},{nn:"span",at:[["id","subscriptions-count"]],ch:[{nn:"text",v:6}]}]}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"],["id","subscribe-attributes-wrap"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe special attribute"}]},{nn:"span",at:[["id","subscribe-style-dot-bg-color-changer"],["style.background-color",{tagJsVar:0},"style"]],ch:[{nn:"text",tc:"background color changer"}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe style attribute"}]},{nn:"span",at:[["style",{tagJsVar:1},null],["id","subscribe-style-bg-color"]],ch:[{nn:"text",tc:"subscribe bg color"}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"sometimes subscribe style attribute"}]},{nn:"span",at:[["style",{tagJsVar:2},null],["id","multiple-subscribe-bg-color"]],ch:[{nn:"text",tc:"multiple subscribe bg color"}]}]}]}]}]]},nn=(0,t._q)((()=>{let n="a",e=!0;return(0,t.$q)((t=>[{selected:n,isOrange:e}]=t({selected:n,isOrange:e}))),t.dy.dom(en.allStrings214806[0],(t=>n=t.target.value),["a","b","c"].map((e=>t.dy.dom(en.allStrings214806[1],e,e==n?"selected":"",e,e==n?"true":"false").key(e))),(t=>e=t.target.checked),e&&"checked",e?"true":"false",e?"orange":"",e?"black":"",!!e,!!e,e?"background-orange text-black":"",{class:"text-white"+(e?" background-orange":"")},{backgroundColor:e?"orange":"lightgray",padding:"10px",border:"2px solid black",borderRadius:e?"8px":"4px",boxShadow:e?"2px 2px 4px rgba(0,0,0,0.3)":"none"},{"background-color":e?"red":"blue",color:"white",padding:"5px","margin-top":"10px"},Zt())})),en={allStrings214806:[[{nn:"input",at:[["id","attr-input-abc"],["placeholder","a b or c"],["change",{tagJsVar:0},null]]},{nn:"select",at:[["id","select-sample-drop-down"]],ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Special Attributes"}]},{nn:"div",ch:[{nn:"input",at:[["type","checkbox"],["id","toggle-backgrounds"],["change",{tagJsVar:2},null],[{tagJsVar:3}]]},{nn:"text",tc:" - toggle backgrounds:"},{nn:"text",v:4}]},{nn:"div",at:[["style","display: flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"ol",ch:[{nn:"li",ch:[{nn:"div",at:[["id","attr-style-strings"],["style.background-color",{tagJsVar:5},"style"],["style.color",{tagJsVar:6},"style"]],ch:[{nn:"text",tc:"style.background-color=&dollar;{'orange'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-class-booleans"],["class.background-orange",{tagJsVar:7},"class"],["class.text-black",{tagJsVar:8},"class"]],ch:[{nn:"text",tc:"class.background-orange=&dollar;{true}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-inline-class"],["class",{tagJsVar:9},null]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange text-black'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-dynamic-inline-class"],[{tagJsVar:10}]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange'} but always white"}]}]}]}]},{nn:"fieldset",at:[["style","margin-top: 1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"style object attribute"}]},{nn:"div",at:[["style",{tagJsVar:11},null],["id","style-object-test"]],ch:[{nn:"text",tc:"Style object test"}]},{nn:"div",at:[["style",{tagJsVar:12},null],["id","style-set-property-test"]],ch:[{nn:"text",tc:"style property test"}]}]},{nn:"style",ch:[{nn:"text",tc:".background-orange {background-color:orange}\n      .text-black {color:black}\n      .text-white {color:white}"}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"option",at:[["value",{tagJsVar:0},null],[{tagJsVar:1}]],ch:[{nn:"text",v:2},{nn:"text",tc:" - "},{nn:"text",v:3}]}]]},on=(0,t._q)((()=>{let n=0,e=0;return(0,t.$q)((t=>[n,e]=t(n,e))),e++,t.dy.dom(rn.allStrings33733[0],n,e,(()=>n++))})),rn={allStrings33733:[[{nn:"div",ch:[{nn:"h2",ch:[{nn:"text",tc:"Basic Component"}]},{nn:"p",ch:[{nn:"text",tc:"Counter: "},{nn:"text",v:0}]},{nn:"p",ch:[{nn:"text",tc:"Render Count: "},{nn:"text",v:1}]},{nn:"button",at:[["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"Increment Counter"}]}]}]]},sn=[{view:i.Basic,tag:on,emoji:"🔢"},{view:i.OneRender,tag:()=>t._q.renderOnce=(e=new t.KU(0),o=0)=>{++o;const a=t.xQ.all([0,"all",4]);return t.dy.dom(s.allStrings2265941[0],(0,t.Ld)(a.pipe((t=>JSON.stringify(t)))),(0,t.Ld)(e),(()=>++e.value),(0,n.v)({renderCount:o,name:"oneRender_tag_ts"}),r())},emoji:"1️⃣"},{view:i.Props,tag:ht,emoji:"🧳"},{view:i.WatchTesting,tag:Gt,emoji:"⌚️"},{view:i.TableDebug,tag:Ut},{view:i.ProviderDebug,tag:Tt},{view:i.TagSwitchDebug,tag:nt,emoji:"🔀"},{view:i.Mirroring,tag:lt,emoji:"🪞"},{view:i.Arrays,tag:K,emoji:"⠇"},{view:i.Content,tag:Qt.kQ,emoji:"📰",debug:!0},{view:i.Child,tag:R,emoji:"👶"},{view:i.Destroys,tag:z,emoji:"🗑️"},{view:i.FunInPropsTag,tag:C},{view:i.AttributeDebug,tag:nn,emoji:"🏹"},{view:i.Todo,tag:(0,t._q)($)},{view:i.Counters,tag:Mt,emoji:"💯"}],an=(0,t._q)(((n,e=u.views)=>{const o=(0,t.SB)((()=>sn.filter((t=>{if(e.includes(t.view))return!0})).map((({view:t,title:e,emoji:o,tag:r,...s})=>({title:e||t,output:t===i.Counters?r({appCounterSubject:n}):r(),view:t,emoji:o,...s}))).sort(((t,n)=>t.view.localeCompare(n.view)))));return t.dy.dom(ln.allStrings1790640[0],o.map((t=>cn(t).key(t.view))))})),cn=n=>{const{emoji:e,view:o,title:r,output:s,debug:a}=n;return t.dy.dom(ln.allStrings1790640[1],o,e,r,n.contentHide?"none":"",s,"section_"+n.view,(()=>n.contentHide=!n.contentHide),n.contentHide?"grey":"")},ln={allStrings1790640:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["style","flex:2 2 20em"]],ch:[{nn:"a",at:[["id",{tagJsVar:0},null]],ch:[{nn:"text",tc:"\x3c!-- ⚓️ --\x3e"}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",v:1},{nn:"text",tc:" "},{nn:"text",v:2}]},{nn:"div",at:[["id","many-section-contents"],["style.display",{tagJsVar:3},"style"]],ch:[{nn:"text",v:4}]},{nn:"div",at:[["style","display:flex;"]],ch:[{nn:"button",at:[["style","flex:1;"],["id",{tagJsVar:5},null],["click",{tagJsVar:6},null],["style.background-color",{tagJsVar:7},"style"]],ch:[{nn:"text",tc:"👁️ hide/show"}]}]}]},{nn:"div",at:[["style","font-size:0.6em;text-align:right;"]],ch:[{nn:"a",at:[["href","#top"]],ch:[{nn:"text",tc:"⏫"}]}]}]}]]},un=3e3,dn=6e3,pn=(0,t._q)((()=>{let n,e,o=0,r=0,s=0;(0,t.$q)((t=>[{intervalCount:o,intervalId:n,intervalId2:e,renderCounter:r,currentTime:s}]=t({intervalCount:o,intervalId:n,intervalId2:e,renderCounter:r,currentTime:s})));const a=(0,t._)(),c=()=>++o,l=()=>{console.info("🟢 interval test 0 started..."),s=0,e=setInterval(a((()=>{s+=500,s>=un&&(s=0)})),500),console.info("▶️ interval started"),n=setInterval(a((()=>{c()})),un)},i=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return(0,t.nc)(l),(0,t.ev)(i),++r,t.dy.dom(gn.allStrings838008[0],un,n,c,o,r,un,s,s,(()=>{n||e?i():l()}),n||e?"red":"green",(()=>setTimeout(a((()=>{s+=200})),1e3)))})),hn=(0,t._q)((()=>{let n,e,o=0,r=0,s=0;(0,t.$q)((t=>[{intervalCount:o,intervalId:n,intervalId2:e,renderCounter:r,currentTime:s}]=t({intervalCount:o,intervalId:n,intervalId2:e,renderCounter:r,currentTime:s})));const a=(0,t._)(),c=()=>++o;const l=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function i(){if(n)return l();console.info("🟢 interval test 1 started..."),s=0,e=setInterval(a((()=>{s+=500,s>=dn&&(s=0)})),500),n=setInterval(a((()=>{c(),console.info("slow interval ran")})),dn)}return(0,t.nc)(i),(0,t.ev)(l),++r,t.dy.dom(gn.allStrings838008[1],dn,n,c,o,r,dn,s,s,i,n?"red":"green")})),gn={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},fn=(0,t._q)((()=>{let n="tagJsDebug.js",e=!1,o=0;return(0,t.$q)((t=>[{_firstState:n,showIntervals:e,renderCount:o}]=t({_firstState:n,showIntervals:e,renderCount:o}))),++o,t.dy.dom(xn.allStrings77500[0],(()=>e=!e),e&&t.dy.dom(xn.allStrings77500[1],(0,F.fx)(),pn(),hn()))})),xn={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};function bn(){const t=P(),n=t.route,e=t.location.pathname;if(e&&"counters/"===n)return"counters";if(e&&"content/"===n)return"content";if(e.endsWith("isolated.html"))return"isolated";return e.includes("todo/www")?"todo":"home"}const vn=()=>t._q.use=(n=bn())=>t.dy.dom(yn.allStrings120829[0],"home"===n?".5":"1","home"===n?void 0:"#/","isolated"===n?".5":"1","isolated"===n?void 0:"isolated.html","counters"===n?".5":"1","counters"===n?void 0:"#counters/","content"===n?".5":"1","content"===n?void 0:"#content/","todo"===n?".5":"1","todo"===n?void 0:"todo/www/"),yn={allStrings120829:[[{nn:"div",ch:[{nn:"a",at:[["style.opacity",{tagJsVar:0},"style"],["href",{tagJsVar:1},null]],ch:[{nn:"text",tc:"home"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:2},"style"],["href",{tagJsVar:3},null]],ch:[{nn:"text",tc:"isolated"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:4},"style"],["href",{tagJsVar:5},null]],ch:[{nn:"text",tc:"counters"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:6},"style"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"content"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:8},"style"],["href",{tagJsVar:9},null]],ch:[{nn:"text",tc:"todo app"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["href","https://github.com/AckerApple/taggedjs"],["target","_blank"]],ch:[{nn:"text",tc:"repo"}]}]}]]},mn=Date.now();function wn(){return function(n=bn()){let e=!1;return(0,t.$q)((t=>[{showHide:e}]=t({showHide:e}))),console.log("🍒 App rendered",mn),t.dy.dom(Cn.allStrings2805014[0],4,(()=>e=!e),e,e&&Sn(),vn(),"home"===n&&kn(),"counters"===n&&zt(),"content"===n&&(0,Qt.kQ)())}}wn.isApp=!0;const _n=(0,t._q)(wn),kn=()=>t._q.use=(o=!0,r=0,s=!1,a=null,c=(0,t.SB)((()=>new t.xQ(r))),l=0,i="🟦",u=(0,t.$q)((t=>[{showSections:o,appCounter:r,toggleValue:s,testTimeout:a,renderCount:l,testEmoji:i}]=t({showSections:o,appCounter:r,toggleValue:s,testTimeout:a,renderCount:l,testEmoji:i}))),d=(()=>{s=!s}))=>{const p=(0,t._)(),g=p((t=>i=t?"✅":"❌"));function f(t=!0,n=(()=>{})){i="🟦";a=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const o=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(e.bind(e,566)),await Promise.resolve().then(e.bind(e,451)),await Promise.resolve().then(e.bind(e,118)),await Promise.resolve().then(e.bind(e,835)),await Promise.resolve().then(e.bind(e,428)),await Promise.resolve().then(e.bind(e,749)),await Promise.resolve().then(e.bind(e,168)),await Promise.resolve().then(e.bind(e,842)),await Promise.resolve().then(e.bind(e,774)),await Promise.resolve().then(e.bind(e,994)),await Promise.resolve().then(e.bind(e,157)),await Promise.resolve().then(e.bind(e,178)),await Promise.resolve().then(e.bind(e,236)),await Promise.resolve().then(e.bind(e,702)),await Promise.resolve().then(e.bind(e,527)),await Promise.resolve().then(e.bind(e,186)),await Promise.resolve().then(e.bind(e,337));try{const t=Date.now();if(window.mocha)await new Promise(((t,n)=>{window.mocha.run((e=>{e>0?n(new Error(`${e} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(e.bind(e,995));if(!await t())throw new Error("Tests failed")}const n=Date.now()-t;return console.info(`✅ all tests passed in ${n}ms`),sn.map((t=>{document.getElementById("section_"+t.view).click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();n(o),t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return(0,t.ev)((function(){clearTimeout(a),a=null})),(0,t.nc)((function(){console.info("1️⃣ app init should only run once"),f(!1,g),c.subscribe(p((t=>r=t)))})),++l,t.dy.dom(Cn.allStrings2805014[1],(()=>f(!0,g)),i,(()=>{c.next(r+1)}),(()=>++r),r,(0,t.Ld)(c),c.value,(()=>d()),s,(0,n.v)({name:"app",renderCount:l}),(0,t.Ld)(t.xQ.globalSubCount$),h(),(()=>o=!o),o&&an(c),fn())},Sn=(0,t._q)((()=>t.dy.dom(Cn.allStrings2805014[2],(0,F.tw)().innerHTML=t.dy.dom(Cn.allStrings2805014[3])))),Cn={allStrings2805014:[[{nn:"text",tc:"\x3c!--app.js--\x3e"},{nn:"h1",at:[["id","h1-app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - "},{nn:"text",v:0}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"show/hide "},{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n\n\n      "},{nn:"text",v:4},{nn:"text",tc:"\n\n      "},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n    "}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"run tests "},{nn:"text",v:1}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:9},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:10},{nn:"text",tc:")"}]}]}]},{nn:"a",at:[["name","top"],["id","top"]]},{nn:"text",v:11},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"button",at:[["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"toggle sections"}]},{nn:"text",v:13},{nn:"text",tc:"\n\n      "},{nn:"text",v:14}]}],[{nn:"hr"},{nn:"text",v:0},{nn:"hr"}],[{nn:"text",tc:"\n    Hello animated world\n  "}]]};function Vn(){u.autoTest=u.autoTest=!u.autoTest,d()}const Bn={allStrings62947:[[{nn:"text",tc:"\n  auto testing "},{nn:"input",at:[["type","checkbox"],[{tagJsVar:0}],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"run tests"}]}]]},Jn=()=>t._q.use=(e=(0,t.SB)("isolated app state"),o=0,r=0,s=(0,t.SB)((()=>new t.xQ(r))),a=!1,c=(0,t.$q)((t=>[{renderCount:o,appCounter:r,toggleValue:a}]=t({renderCount:o,appCounter:r,toggleValue:a}))),i=(()=>a=!a),d=(0,t._)())=>{const p=P().route.split("/").map((t=>t.trim())).filter((t=>t.length));let g;return p.length&&(g=p),(0,t.nc)((()=>{console.info("1️⃣ app init should only run once"),s.subscribe(d((t=>{r=t})))})),++o,t.dy.dom(Tn.allStrings1054570[0],p,vn(),(()=>{s.next(r+1)}),(()=>{++r}),r,(0,t.Ld)(s),s.value,i,a,(f=g,t._q.use=(n=(0,t.nc)((()=>{u.autoTest&&l(!1,f,x)})))=>t.dy.dom(Bn.allStrings62947[0],u.autoTest&&"checked",Vn,(()=>l(!0,f,x)))),(0,n.v)({name:"app",renderCount:o}),(0,t.Ld)(t.xQ.globalSubCount$),h(g),an(s,g),(0,n.v)({renderCount:o,name:"isolatedApp"}));var f,x};g.subscribe((({type:t,checkTesting:n})=>{x(t,n)}));const Tn={allStrings1054570:[[{nn:"text",tc:"\x3c!--isolatedApp.js--\x3e"},{nn:"h1",at:[["id","app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - isolated"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"(no HMR)"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"route: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"div",ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"text",tc:" "},{nn:"text",v:9}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:10},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:11},{nn:"text",tc:")"}]}]}]},{nn:"text",v:12},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]}]]};function jn(){const n=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),o=e[0]?.toLowerCase();if(o&&["isolated.html","index-static.html"].includes(o)){const e=Date.now();(0,t.bX)(Jn,n,{test:1});const o=Date.now()-e;return void console.info(`⏱️ isolated render in ${o}ms`)}const r=Date.now();(0,t.bX)(_n,n,{test:1});const s=Date.now()-r;console.info(`⏱️ rendered in ${s}ms`)}})();var r=o.gV,s=o.jG,a=o.fm,c=o.KH,l=o.bX,i=o.mK;export{r as App,s as IsolatedApp,a as hmr,c as run,l as tagElement,i as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,