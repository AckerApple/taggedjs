var t={842:(t,e,n)=>{n.r(e),n.d(e,{fxTime:()=>r});var o=n(78);const r=160;function s(t){return new Promise((e=>setTimeout(e,t)))}(0,o.yY)("⠇ array testing",(()=>{(0,o.it)("signal array count and items",(()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);(0,o.l_)(e).toBe(3);for(let t=0;t<e;t++)(0,o.l_)((0,o.o5)(`#signal-array-item-${t}`)).toBe(1);(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(0)})),(0,o.it)("push signal array button",(async()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText),n=(0,o.L7)("push-signal-array-btn");(0,o.l_)(e).toBe(3),n.click();const a=Number(t.innerText);(0,o.l_)(a).toBe(e+1),(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(1),n.click(),(0,o.l_)(Number(t.innerText)).toBe(e+2),(0,o.l_)((0,o.o5)(`#signal-array-item-${e+1}`)).toBe(1),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(5),(0,o.V4)("#signal-array-item-delete-btn-3"),(0,o.V4)("#signal-array-item-delete-btn-4"),await s(2*r),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(3)})),(0,o.it)("arrays counter display matches item counter displays",(()=>{const t=(0,o.L7)("arrays-counter-display"),e=Number(t.innerText),n=(0,o.L7)("signal-array-count"),r=Number(n.innerText);for(let t=0;t<r;t++){const n=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(n).toBeDefined(),(0,o.l_)(Number(n.innerText)).toBe(e)}document.querySelector("#signal-array-increase-counter").click();const s=Number(t.innerText);(0,o.l_)(s).toBe(e+1);for(let t=0;t<r;t++){const e=`signal-array-item-counter-display-${t}`,n=(0,o.L7)(e),r=Number(n.innerText);(0,o.l_)(r).toBe(s,`Index ${t} ID ${e} has ${r} but need toBe ${s} like #signal-array-increase-counter`)}})),(0,o.it)("signal array item delete button with animation",(async()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);(0,o.l_)(e).toBe(3),0===e&&(0,o.L7)("push-signal-array-btn").click();const n=Number(t.innerText);(0,o.l_)((0,o.o5)("#signal-array-item-0")).toBe(1);(0,o.L7)("signal-array-item-delete-btn-0").click(),await s(r),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(2);const a=Number(t.innerText),i=n-1;(0,o.l_)(a).toBe(i,`#signal-array-count has ${a} but expected ${i}`);const c=(0,o.o5)("#signal-array-item-2");(0,o.l_)(c).toBe(0,`Expected signal array item 2 but got ${c}`);const l=Number(t.innerText);for(let t=0;t<l;t++){const e=(0,o.o5)(`#signal-array-item-${t}`);(0,o.l_)(e).toBe(1,`Expected only one #signal-array-item-${t} but got ${e}`)}})),(0,o.it)("array basics",(()=>{(0,o.l_)((0,o.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,o.l_)(t.length).toBe(0);const e=(0,o.o5)("#score-data-0-1-inside-button");(0,o.l_)(e).toBe(0),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const n=(0,o.L7)("score-data-0-1-inside-button"),r=(0,o.L7)("score-data-0-1-inside-display");let s=r.innerText;const a=(0,o.L7)("score-data-0-1-outside-button"),i=(0,o.L7)("score-data-0-1-outside-display"),c=i.innerText;(0,o.l_)(s).toBe(c),n.click(),(0,o.l_)(r.innerText).toBe(i.innerText),(0,o.l_)(r).toBe((0,o.L7)("score-data-0-1-inside-display")),(0,o.l_)(s).toBe((Number(r.innerText)-1).toString()),(0,o.l_)(s).toBe((Number(i.innerText)-1).toString()),a.click(),(0,o.l_)(r.innerText).toBe(i.innerText),(0,o.l_)(s).toBe((Number(r.innerText)-2).toString()),(0,o.l_)(s).toBe((Number(i.innerText)-2).toString())})),(0,o.it)("🗑️ deletes",(async()=>{(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(1);const t=(0,o.L7)("player-edit-btn-0")._click();(0,o.l_)(t).toBe("no-data-ever"),(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(1);const e=await(0,o.L7)("player-remove-promise-btn-0")._click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r),await e,(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0,"Expected element not to exist #player-remove-promise-btn-0"),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(0)})),(0,o.it)("add then deletes",(async()=>{(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(2),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(2),(0,o.L7)("player-edit-btn-0").click();const t=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(t).toBe("promise-no-data-ever"),await s(r-10),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("player-edit-btn-0").click();const e=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r+25),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(0),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🏹 special attributes",(()=>{(0,o.it)("style and class tests",(async()=>{(0,o.l_)((0,o.QX)("#attr-input-abc")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-backgrounds")).toBe(1),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,o.L7)("attr-dynamic-inline-class").classList;(0,o.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,o.it)("subscribe attributes colors",(()=>{const t=(0,o.L7)("subscribe-style-dot-bg-color-changer"),e=(0,o.L7)("subscribe-style-bg-color"),n=(0,o.L7)("multiple-subscribe-bg-color"),r=(0,o.L7)("toggle-color-btn"),s=(0,o.L7)("clear-color-btn");(0,o.l_)(t.style.backgroundColor).toBe("red","bgColorChanger should start red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("pink"),(0,o.l_)(r.innerText).toBe("Toggle Color ()"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (red)"),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("green"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (blue)"),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(e.style.backgroundColor).toBe("blue"),(0,o.l_)(n.style.backgroundColor).toBe("purple"),s.click(),(0,o.l_)(t.style.backgroundColor).toBe("","expected no background in bgColorChanger"),(0,o.l_)(e.style.backgroundColor).toBe("","expected no background in subscribeBgColor"),(0,o.l_)(n.style.backgroundColor).toBe("pink")})),(0,o.it)("hide/show attributes affects subscription count",(()=>{const t=(0,o.L7)("toggle-attributes-btn"),e=(0,o.L7)("subscriptions-count"),n=Number(e.innerText);(0,o.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,o.l_)(t.innerText).toBe("Show Attributes");const r=Number(e.innerText),s=n-2;(0,o.l_)(r).toBe(s,`afterHideCount expected(${r}) toBe(${s})`),t.click(),(0,o.l_)(t.innerText).toBe("Hide Attributes");const a=Number(e.innerText);(0,o.l_)(a).toBe(n)})),(0,o.it)("style object converts to individual CSS properties",(()=>{const t=(0,o.L7)("style-object-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("lightgrey"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("4px"),(0,o.l_)(t.style.boxShadow).toBe("none"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,o.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,o.L7)("style-set-property-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("red")}))}))},566:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("elements exists",(()=>{(0,o.l_)((0,o.L7)("h1-app")).toBeDefined();const t=(0,o.L7)("toggle-test");(0,o.l_)(t).toBeDefined(),(0,o.l_)(t.innerText).toBe("toggle test")})),(0,o.it)("toggle test",(()=>{const t=(0,o.L7)("toggle-test");(0,o.l_)(t.innerText).toBe("toggle test"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test")}))},527:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("👶 👧child tests",(()=>{(0,o.it)("child tests",(()=>{(0,o.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,o.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,o.it)("a",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,o.it)("b",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,o.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,o.it)("c",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},118:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 content",(()=>{(0,o.it)("spacing",(()=>{(0,o.l_)((0,o.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,o.it)("style.",(()=>{const t=(0,o.IO)("#style-simple-border-orange")[0].style.border;(0,o.l_)(t).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,o.it)("style set as object",(()=>{(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,o.yY)("no parent element tests",(()=>{(0,o.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,o.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,o.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,o.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,o.it)("concat style",(()=>{(0,o.L7)("dynamic-border-width").value=2,(0,o.L7)("dynamic-border-color").value="white",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,o.L7)("dynamic-border-width").value=1,(0,o.L7)("dynamic-border-color").value="blue",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,o.it)("tagvar injections",(()=>{(0,o.l_)((0,o.L7)("inject-tagvar-0").innerText).toBe((0,o.L7)("inject-read-tagvar-0").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-1").innerText).toBe((0,o.L7)("inject-read-tagvar-1").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-2").innerText).toBe((0,o.L7)("inject-read-tagvar-2").innerText)}))}))},428:(t,e,n)=>{n.r(e),n.d(e,{clickSpeedAmount:()=>s});var o=n(78);let r=0;(0,o.yY)("💯 counters",(()=>{const t=0===r;++r,(0,o.it)("basics",(()=>{const e=(0,o.L7)("set-main-counter-input");(0,o.l_)(e).toBeDefined(),e.value="0",(0,o.Sb)(e);Number((0,o.dy)("#counters_render_count")),Number((0,o.dy)("#inner_counters_render_count"));(0,o.wG)("#conditional-counter",0);const n=(0,o._8)("👉-counter-sub-count");(0,o.di)("#❤️-increase-counter","#❤️-counter-display"),(0,o.l_)((0,o._8)("👉-counter-sub-count")).toBe(n);const r=(0,o.dy)("#counters_render_count");(0,o.l_)(r).toBe("1",`expected render count ${r} to be 1`);let s="1",i=(0,o.dy)("#inner_counters_render_count");(0,o.l_)(i).toBe(s,`Expected renderCount ${i} to be ${s}`);const c=(0,o.dy)("#🔥-init-counter");(0,o.l_)(c).toBe("1",`#🔥-init-counter to be 1 but it's ${c}`),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(s,"#counters_render_count fail"),i=(0,o.dy)("#inner_counters_render_count"),(0,o.l_)(i).toBe(s),(0,o.di)("#🥦-standalone-counter","#🥦-standalone-display"),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(s,"#counters_render_count failed"),i=(0,o.dy)("#inner_counters_render_count"),(0,o.l_)(i).toBe(s,"#inner_counters_render_count failed"),(0,o.wG)("#conditional-counter",1),(0,o.wG)("#conditional-display",1),t&&(0,o.l_)((0,o.dy)("#conditional-display")).toBe("2"),i=(0,o._8)("❤️💧-shallow-display"),(0,o.di)("#conditional-counter","#conditional-display"),(0,o.l_)(i).toBe((0,o._8)("❤️💧-shallow-display")),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),(0,o.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),a("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),a("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),a("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),a("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,o.it)("counters.test piped subject",(()=>{if(t){(0,o.dy)("#🥦-standalone-display");const t=(0,o.dy)("#🪈-pipedSubject");(0,o.l_)(t).toBe("",`firstRun failure pipe0. Expected "${t}" toBe empty-string`);const e=(0,o.dy)("#🪈-pipedSubject-2");(0,o.l_)(e).toBe("","firstRun failure pipe2 expected toBe empty-string");const n=(0,o.dy)("#🪈-pipedSubject-3");(0,o.l_)(n).toBe("","firstRun failure pipe3 expected toBe empty-string")}(0,o.V4)("#🥦-subject-increase-counter");const e=(0,o.dy)("#🪈-pipedSubject"),n=(0,o.dy)("#🥦-standalone-display");(0,o.l_)(e).toBe(n),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe((0,o.dy)("#🥦-standalone-display"))}))}));const s=600;function a(t,e,n){const r=(0,o._8)(e),a=(0,o.L7)(t),i=(0,o.L7)(n);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)a.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)i.click();console.timeEnd(`⌚️ outer ${t}`);const c=(Number(r)+s).toString();(0,o.l_)((0,o._8)(e)).toBe(c)}},236:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("destroys",(async()=>{(0,o.l_)((0,o.QX)("#destroyCount")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-destroys")).toBe(1);const t=(0,o.QX)("#destroyable-content");(0,o.l_)(t).toBe(1,"Expected #destroyable-content to be defined");let e=Number((0,o.dy)("#destroyCount"));(0,o.V4)("#toggle-destroys");let n=Number((0,o.dy)("#destroyCount"));const r=e+1;(0,o.l_)(n).toBe(r,`Expected #destroyCount.innerHTML to be ${r} but it is ${n}`);const s=(0,o.QX)("#destroyable-content");(0,o.l_)(s).toBe(0,"Expected #destroyable-content to not exist"),e=n,(0,o.V4)("#toggle-destroys"),n=Number((0,o.dy)("#destroyCount")),(0,o.l_)(n).toBe(e),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1)}))},835:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("taggedjs-dump",(()=>{(0,o.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,o.L7)("taggedjs-dump-user-textarea");(0,o.l_)(t.value).toBe(""),t.value="{test:22}",(0,o.b$)(t),(0,o.l_)(t.value).toBe("{test:22}");const e=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(e.length).toBe(1),(0,o.l_)(e[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,o.b$)(t);const n=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(n.length).toBe(2),(0,o.l_)(n[0].innerText).toBe("test"),(0,o.l_)(n[1].innerText).toBe("testb"),t.value="",(0,o.b$)(t)}))}))},157:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("function in props",(async()=>{(0,o.di)("#fun_in_prop1","#fun_in_prop_display"),(0,o.di)("#fun_in_prop2","#fun_in_prop_display"),(0,o.di)("#fun_in_prop3","#fun_in_prop_display"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},488:(t,e,n)=>{n.r(e);var o=n(78);console.log("INCLUDED!!!"),(0,o.yY)("Injection Test",(()=>{const t=()=>{const t=[];for(let e=0;e<10;e++){const n=(0,o.L7)(`injection-test-item-${e}`);n&&t.push(n)}return t},e=()=>t().map((t=>t.querySelector('input[type="checkbox"]'))),n=()=>e().filter((t=>t?.checked)).length,r=()=>{const n=t();e().forEach(((t,e)=>{t?.checked&&n[e].click()}))};(0,o.HF)((()=>{r()})),(0,o.iu)((()=>{r()})),(0,o.it)("should have injection testing section with all items unchecked initially",(()=>{const n=(0,o.L7)("injection-testing-wrap-host");(0,o.l_)(n).toBeDefined();const r=t();(0,o.l_)(r.length).toBe(10);e().forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)}))})),(0,o.it)("should select individual items when clicked",(()=>{const r=t(),s=e();(0,o.l_)(n()).toBe(0),r[0].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(n()).toBe(1),r[2].click(),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(n()).toBe(2),r[4].click(),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(n()).toBe(3)})),(0,o.it)("should deselect items when clicked again",(()=>{(0,o.l_)(n()).toBe(0);const r=t(),s=e();r[1].click(),r[3].click(),r[5].click(),(0,o.l_)(n()).toBe(3),r[3].click(),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(n()).toBe(2),r[1].click(),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(n()).toBe(1),r[5].click(),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should select multiple items when clicking on different items",(()=>{const r=t(),s=e();r[0].click(),r[2].click(),r[4].click(),r[6].click(),r[8].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(s[6].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[8].checked).toBe(!0),(0,o.l_)(s[9].checked).toBe(!1),(0,o.l_)(n()).toBe(5)})),(0,o.it)("should toggle selection state correctly",(()=>{const n=t(),r=e();n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1)})),(0,o.it)("should maintain selection state across multiple operations",(()=>{const r=t(),s=e();r[1].click(),r[2].click(),r[3].click(),(0,o.l_)(n()).toBe(3),r[7].click(),r[9].click(),(0,o.l_)(n()).toBe(5),r[2].click(),r[7].click(),(0,o.l_)(n()).toBe(3),(0,o.l_)(s[1].checked).toBe(!0),(0,o.l_)(s[2].checked).toBe(!1),(0,o.l_)(s[3].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[9].checked).toBe(!0)})),(0,o.it)("should restore to original unchecked state after test",(()=>{const s=t(),a=e();s.forEach((t=>t.click())),(0,o.l_)(n()).toBe(10),r(),a.forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)})),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should handle rapid clicking without issues",(()=>{const n=t(),r=e();for(let t=0;t<10;t++)n[0].click();(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0)})),(0,o.it)("should update visual indicators when items are selected",(()=>{const e=t();e[0].click();const n=e[0].getAttribute("style")||"";(0,o.l_)(n.includes("background: rgb(76, 175, 80)")).toBe(!0),(0,o.l_)(n.includes("border: 3px solid rgb(51, 51, 51)")).toBe(!0);const r=e[1].getAttribute("style")||"";(0,o.l_)(r.includes("background: rgb(33, 150, 243)")).toBe(!0),(0,o.l_)(r.includes("border: 1px solid rgb(153, 153, 153)")).toBe(!0)}))}))},774:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("🪞 mirror testing",(()=>{(0,o.wG)("#mirror-counter-display",2),(0,o.wG)("#mirror-counter-button",2);const t=Number((0,o._8)("mirror-counter-display"));(0,o.L7)("mirror-counter-button").click(),(0,o.l_)(t+1).toBe(Number((0,o._8)("mirror-counter-display"))),(0,o.wG)("#mirror-counter-display",2),(0,o.Lo)("#mirror-counter-display")}))},994:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("oneRender",(()=>{(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,o.di)("#👍-counter-button","#👍-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,o.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🧳 props",(()=>{(0,o.it)("json",(()=>{const t=(0,o.L7)("props-debug-textarea");(0,o.l_)(t.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')})),(0,o.it)("test duels",(()=>{(0,o.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,o.it)("child prop communications",(()=>{(0,o.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,o.it)("basics",(()=>{const t=(0,o.dy)("#propsOneLevelFunUpdate-🥩-display"),e=(0,o.dy)("#propsDebug-🥩-change-count-display");(0,o.l_)(e).toBe((Number(t)+1).toString());const n=(0,o.L7)("propsDebug-🥩-0-display").innerHTML,r=(0,o.L7)("propsDebug-🥩-1-display").innerHTML,s=(0,o.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,a=Number(n),i=Number(r),c=Number(s);(0,o.l_)(i).toBe(c),(0,o.l_)(a+2).toBe(i)})),(0,o.it)("letProp",(()=>{(0,o.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,o.dy)("#propsDebug-🥩-0-display")),e=(0,o.IO)("#propsDebug-🥩-2-button")[0]._click();(0,o.l_)(e).toBe("no-data-ever"),(0,o.l_)((0,o.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,o.l_)((0,o.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,o.L7)("propsDebug-🥩-1-button").click()})),(0,o.it)("props as functions",(()=>{const t=Number((0,o._8)("sync-prop-number-display"));(0,o.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,o.L7)("sync-prop-child-button").click(),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🫴 providers",(()=>{(0,o.it)("basics",(()=>{(0,o.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,o.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,o.it)("inner outer debug",(()=>{(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,o.yY)("host attributes",(()=>{(0,o.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(255, 0, 0)")||e.borderColor.includes("red");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),t&&(0,o.l_)(t.innerHTML.trim()).toBe("wonderful - parent(red)")})),(0,o.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),e=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e&&(0,o.l_)(t.contains(e)).toBe(!0)})),(0,o.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),e=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,o.wS)(t);const n=window.getComputedStyle(e),r=n.borderColor.includes("blue")||n.borderColor.includes("rgb(0, 0, 255)");(0,o.l_)(r).toBe(!0,`in-cycle-parent should be blue not ${n.borderColor}`)}})),(0,o.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),e=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("purple")||n.borderColor.includes("rgb(128, 0, 128)");(0,o.l_)(r).toBe(!0)}})),(0,o.it)("child2 has correct innerHTML and green border",(()=>{const t=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),t){(0,o.l_)(t.textContent.trim().replace(/\n(\s+)/g," ")).toBe("wonderful too part 2");const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child2 color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select-2"),e=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="orange",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("orange")||n.borderColor.includes("rgb(255, 165, 0)");(0,o.l_)(r).toBe(!0,`in-cycle-child-2 should be orange not ${n.borderColor}`)}}))}))}))},451:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("basic app subject",(()=>{const t=Number((0,o.dZ)("#app-counter-subject-value-display"));(0,o.V4)("#app-counter-subject-button");const e=Number((0,o.dZ)("#app-counter-subject-value-display"));(0,o.l_)(t).toBe(e-1,`Expected #app-counter-subject-value-display to be ${e-1} but it is ${t}`)}))},528:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 subscriptions",(()=>{(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1")})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,o.it)("subscribe",(async()=>{(0,o.l_)((0,o._8)("content-subscribe-sub0")).toBe(""),(0,o.l_)((0,o._8)("content-subscribe-sub0-with")).toBe("-1")})),(0,o.yY)("passed in subscription",(()=>{(0,o.it)("increase subscription",(async()=>{const t=(0,o.L7)("passed-in-sub-increase"),e=(0,o.L7)("passed-in-sub-hide-show"),n=(0,o.L7)("passed-in-sub-hideShow-value");(0,o.l_)(n.textContent).toBe(""),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),e.click();let r=(0,o._8)("passed-in-output");(0,o.l_)(n.textContent).toBe("true"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0");const s="0||||0",a="1||||1",i=(0,o._8)("passed-in-sub-ex1"),c=`1||your fun number ${r}||1`;(0,o.l_)(i).toBe(c,`failed after hide expected #passed-in-sub-ex1 to be ${c} but its ${i}`),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),t.click(),r=(0,o._8)("passed-in-output"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe(`0||${r}||0`),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed third increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),e.click();const l=(0,o._8)("passed-in-sub-ex0");(0,o.l_)(l).toBe(s,`Lest click check expected #passed-in-sub-ex0 to be ${s} but it is ${l}`);const u=(0,o._8)("passed-in-sub-ex1");(0,o.l_)(u).toBe(a,`Failed closing expected #passed-in-sub-ex1 ${u} to be ${a} but it is ${u}`),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,o.it)("host",(()=>{let t=Number((0,o._8)("hostDestroyCount"));(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1,"hostedContent html not as expected"),(0,o.cS)("hostHideShow"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1,"host destroy mismatch"),(0,o.l_)((0,o._8)("hostedContent")).toBe(""),(0,o.cS)("hostHideShow"),(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1,"hostedContent check 2 not right"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1,"host destroy mismatch 2")})),(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,o.l_)((0,o.dy)("#content-dom-parse-0-0")).toBe((0,o.dy)("#content-dom-parse-0-1"))})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")}))}))},168:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🔀 tagSwitching",(()=>{(0,o.it)("0",(()=>{(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(1),(0,o.l_)((0,o.o5)("#tag-switch-dropdown")).toBe(1),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(2),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,o.it)("1",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="1",t.onchange({target:t}),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0),(0,o.wG)("#tagSwitch-1-hello",5)})),(0,o.it)("2",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="2",t.onchange({target:t}),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",4),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("3",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="3",t.onchange({target:t}),(0,o.l_)((0,o.L7)("selectTag-display").textContent).toBe("3"),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(0);const e=(0,o.o5)("#tagSwitch-2-hello");(0,o.l_)(e).toBe(0,`Expected no #tagSwitch-2-hello but got ${e}`),(0,o.wG)("#tagSwitch-3-hello",7),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("4",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="",t.onchange({target:t}),(0,o.wG)("#select-tag-above",1),(0,o.wG)("#tag-switch-dropdown",1),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",0),(0,o.wG)("#tagSwitch-3-hello",0)}))}))},525:(t,e,n)=>{function o(t){const e=((new Error).stack||"").split("\n")[3]||"";return{toBe(n,o){if(t!==n){const r="function"==typeof o?o():o,s=r||`Expected ${JSON.stringify(n)} but got ${JSON.stringify(t)}`,a=new Error(s);throw a.stack=s+"\n"+e+(a.stack?"\n"+a.stack:""),a}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(e,n){if("number"!=typeof t||!(t>e))throw new Error(`Expected ${t} to be greater than ${e}\n\n${n}`)},toHaveLength(e){const n=t;if(!("length"in n)||n.length!==e)throw new Error(`Expected length ${e} but got ${n.length||"undefined"}`)},not:{toBe(e){if(t===e)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(e)}`)}}}}n.d(e,{l:()=>a});const r=void 0!==globalThis.vitest,s=r?globalThis.expect:null;const a=r&&s?function(t,e){if(void 0!==e){const n=s(t);return{toBe(t){try{n.toBe(t)}catch(t){throw new Error(e)}},toBeDefined(){try{n.toBeDefined()}catch(t){throw new Error(e)}},toBeUndefined(){try{n.toBeUndefined()}catch(t){throw new Error(e)}},toBeGreaterThan(t){try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}},toHaveLength(t){try{n.toHaveLength(t)}catch(t){throw new Error(e)}},not:{toBe(t){try{n.not.toBe(t)}catch(t){throw new Error(e)}}},to:{be:{greaterThan:t=>{try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}}}}}}const n=s(t);return{...n,to:{be:{greaterThan:e=>s(t).toBeGreaterThan(e)}},toBe:t=>n.toBe(t)}}:function(t,e){if(void 0!==e){const n=o(t);return{toBe(t){n.toBe(t,e)},toBeDefined(){n.toBeDefined()},toBeUndefined(){n.toBeUndefined()},toHaveLength(t){n.toHaveLength(t)},not:{toBe(t){n.not.toBe(t)}},to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}const n=o(t);return{...n,to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}},78:(t,e,n)=>{n.d(e,{iu:()=>L,HF:()=>E,L7:()=>y,wS:()=>f,VJ:()=>g,V4:()=>l,cS:()=>u,dQ:()=>d,QX:()=>s,yY:()=>I,o5:()=>a,l_:()=>r.l,wG:()=>k,Fr:()=>S,Lo:()=>_,T_:()=>c,dy:()=>b,_8:()=>x,it:()=>j,WB:()=>p,Sb:()=>h,IO:()=>i,_v:()=>C,di:()=>B,Iq:()=>V,dZ:()=>m,b$:()=>w});var o=n(995),r=n(525);function s(t){return document.querySelectorAll(t).length}const a=s;function i(t){return document.querySelectorAll(t)}function c(t){return i(t).forEach((t=>t.focus()))}function l(t){[...i(t)].forEach((t=>t.click()))}function u(t){l("#"+t)}function d(t,e=0){i(t)[e].click()}function p(t,e){const n=new KeyboardEvent("keydown",{key:e,bubbles:!0});t.dispatchEvent(n)}function h(t,e){const n=new KeyboardEvent("keyup",{key:e,bubbles:!0});t.dispatchEvent(n)}function g(t,e=0){f(i(t)[e])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function b(t){let e="";return i(t).forEach((t=>e+=t.innerHTML)),e}function m(t){let e="";return i(t).forEach((t=>e+=t.textContent)),e}function y(t){return document.getElementById(t)}function x(t){const e=document.getElementById(t);return e?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const v=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(v)}function C(t){return new Promise((e=>setTimeout(e,t)))}function k(t,e,n){const o=document.querySelectorAll(t),s=o.length;return n=n||`Expected ${e} elements to match query ${t} but found ${s}`,(0,r.l)(s).toBe(e,n),o}function _(...t){const e=t.reduce(((t,e)=>{const n=document.querySelectorAll(e);return t.push(...n),t}),[]);if(0===e.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const n=e.pop().innerHTML;e.forEach((t=>(0,r.l)(t.innerHTML).toBe(n)))}function S(t,e){(0,r.l)(b(t)).toBe(e)}function T(t,e,{elementCountExpected:n}={elementCountExpected:1},o,s,a=0){(0,r.l)(t.length).toBe(n,(()=>`Expected ${o} to be ${n} elements but is instead ${t.length}`)),(0,r.l)(e.length).toBe(n,(()=>`Expected ${s} to be ${n} elements but is instead ${e.length}`)),t.forEach(((t,e)=>{const n=document.querySelectorAll(s)[e];(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body BEFORE clicking ${o}`);let i=Number(n?.innerText);(0,r.l)(typeof t.click).toBe("function"),t.click(),(0,r.l)(n).toBeDefined(),(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body AFTER clicking ${o}`);let c=i+1;i=Number(n.innerText),(0,r.l)(document.body.contains(n)).toBe(!0),(0,r.l)(c).toBe(i,(()=>`After click ${o}, counter test ${a+1} of ${a+2} expected ${s} to be value ${c} but it is ${i}`)),t.click(),i=Number(n?.innerText),++c,(0,r.l)(c).toBe(i,(()=>`Counter test ${a+2} of ${a+2} expected ${s} to increase value to ${c} but it is ${i}`))}))}function B(t,e,{elementCountExpected:n}={elementCountExpected:1}){return T(document.querySelectorAll(t),document.querySelectorAll(e),{elementCountExpected:n},t,e)}function V(...t){const[e,n]=t.shift();let o=k(n,1),s=k(e,1);const a=o[0].innerText;T(s,o,{elementCountExpected:1},e,n);let i=2;t.forEach((([t,c],l)=>{o=k(c,1),s=k(t,1);let u=o[0],d=u.innerText;const p=(Number(a)+i).toString();(0,r.l)(d).toBe(p,(()=>`Expected second ${c} increase provider to be increased to ${a} but got ${d}`)),T(s,o,{elementCountExpected:1},e,n,l+2),u=o[0],d=u.innerText;const h=i+2;(0,r.l)(d).toBe((Number(a)+h).toString(),(()=>`Expected ${c} innerText to be ${Number(a)+h} but instead it is ${d}`)),i+=2}))}const J=void 0!==globalThis.vitest,j=J?globalThis.it:o.it,I=J?globalThis.describe:o.yY,E=J?globalThis.beforeEach:o.HF,L=J?globalThis.afterEach:o.iu},995:(t,e,n)=>{n.d(e,{HF:()=>u,executeBrowserTests:()=>p,it:()=>c,iu:()=>d,yY:()=>l});n(525);let o=null,r=new Map,s=[],a=new Map;const i=void 0!==globalThis.vitest,c=i?globalThis.it:(t,e)=>{const n={name:t,fn:e,suite:o};s.push(n);const a=r.get(o)||[];a.push(n),r.set(o,a)},l=i?globalThis.describe:(t,e)=>{const n=o;o=t,r.set(t,[]),a.set(t,{beforeEach:[],afterEach:[]}),e(),o=n},u=i?globalThis.beforeEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.beforeEach.push(t),a.set(o,e)},d=i?globalThis.afterEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.afterEach.push(t),a.set(o,e)};async function p(){let t=0,e=0;const n=[];console.log(`🧪 Running ${s.length} tests...\n`);const i=new Map;for(const t of s){const e=t.suite||null,n=i.get(e)||[];n.push(t),i.set(e,n)}for(const[o,r]of i){o&&console.log(`${o}`);for(const s of r){const r=o?"  ":"",i=a.get(s.suite);try{if(i?.beforeEach)for(const t of i.beforeEach)await t();if(await s.fn(),t++,console.log(`${r}✅ ${s.name}`),i?.afterEach)for(const t of i.afterEach)await t()}catch(t){if(e++,n.push({test:s.name,suite:s.suite,error:t}),console.error(`${r}❌ ${s.name}`),console.error(t),i?.afterEach)for(const t of i.afterEach)try{await t()}catch(t){console.error("Error in afterEach hook:",t)}}}o&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${e} failed`),n.length>0&&(console.error("\n❌ Failed Tests:"),n.forEach((({test:t,suite:e,error:n})=>{const o=e?`${e} > ${t}`:t;if(console.error(`\n${o}:`),console.error(n),n.stack){n.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),s=[],r.clear(),a.clear(),o=null,0===e}},337:(t,e,n)=>{n.r(e);var o=n(78);function r(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let e=0;e<500;e++)t.value="aaa - "+e,(0,o.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const e=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)e[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const n=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)n[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,o.yY)("☑️ todos",(function(){const t=(0,o.IO)(".new-todo")[0];(0,o.it)("todos add one remove one",(async function(){(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.l_)(t).toBeDefined(),t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0)})),(0,o.it)("todos basic",(async function(){window.location.hash="#/",await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),(0,o.V4)("input.toggle"),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),t.value="two",(0,o.WB)(t,"Enter");const e=(0,o.IO)("input.toggle")[1];e.click(),(0,o.l_)(e.checked).toBe(!0),t.value="three",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.V4)("#todo-view-active-link"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.l_)(window.location.hash).toBe("#/active"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.V4)("#todo-view-completed-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(0)})),(0,o.it)("todos editing",(function(){t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0);let e=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,o.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(e),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(1),(0,o.T_)("input#edit-todo-input");const n=(0,o.IO)("input#edit-todo-input")[0];n.value="two",(0,o.WB)(n,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0)})),(0,o.it)("⌚️ todos speedometer",r)}))},702:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("⌚️ watch tests",(()=>{const t=(0,o.dy)("#🍄-slowChangeCount"),e="0"===t;(0,o.it)("basic",(async()=>{const n=Number((0,o._8)("watch-testing-num-display"));(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),e?((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,o.l_)(Number((0,o.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe((0,o.dy)("#🦷-truthSubChangeCount"))),(0,o.V4)("#watch-testing-num-button"),(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🍄‍🟫-subjectChangeCount")).toBe((n+2).toString()),(0,o.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const r=Number((0,o.dy)("#🦷-truthChangeCount"));(0,o.V4)("#🦷-truthChange-button");let s=(r+1).toString();(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+1).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+2).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),(0,o.V4)("#🦷-reset-button");const a=(0,o.dy)("#🦷-watchTruth"),i=(0,o.dy)("#🦷-watchTruthAsSub");(0,o.l_)(i).toBe(a)}))}))}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={exports:{}};return t[o](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.d(o,{gV:()=>ru,jG:()=>cu,fm:()=>Ps,KH:()=>lu,bX:()=>zr,mK:()=>mi});const t=":tagvar",e=":";function r(t){if(t.startsWith("class."))return"class";const e=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==e?e:!!t.startsWith("style.")&&"style"}const s=new RegExp(t+"(\\d+)"+e,"g");function a(e){return e.search&&e.startsWith(t)?e.search(s):-1}const i=/(:tagvar\d+:)/,c="ondoubleclick",l=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,u=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function d(n){const o=[],r=[],s=[];let a=null,c=-1,d=0;const g=new RegExp(u,"g");for(n=function(t){return t.replace(p,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(n);d<n.length;){const u=g.exec(n);if(!u)break;const[p,b,y]=u,x=p.startsWith("</"),v=p.endsWith("/>");if(d<u.index){const o=n.slice(d,u.index);if(o.trim()){const n=f(o);for(let o of n)o.startsWith(t)&&o.search(i)>=0&&-1===o.search(w)&&(o=t+ ++c+e),h(a,r,o)}}if(d=u.index+p.length,x){a=s.pop()||null;continue}const C=[];let k;for(;null!==(k=l.exec(y));)c=m(k,c,o,C);const _={nn:b};C.length&&(_.at=C),a?(a.ch||(a.ch=[]),a.ch.push(_)):r.push(_),v||(s.push(a),a=_)}if(d<n.length){const e=n.slice(d);if(e.trim()){const n=f(e);for(const e of n)e.startsWith(t)&&++c,h(a,r,e)}}return r}const p=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function h(t,e,n){!function(t,e,n){t?(t.ch||(t.ch=[]),t.ch.push(n)):e.push(n)}(t,e,{nn:"text",tc:g(n)})}function g(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function f(t){return t.split(i).filter(b)}function b(t){return""!==t}function m(n,o,a,i){const l=n[1]||n[3]||n[5];let u=n[2]||n[4]||n[6];if(void 0===l)return o;const d=""!==n[2],p=void 0===u&&d,h=l.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===c.length&&t===c?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(l.slice(0,t.length)===t){const n=t+ ++o+e;return a.push(["at",n]),i.push([n]),o}if(n[0].startsWith(l)&&n[0].slice(l.length,n[0].length).search(/\s+$/)>=0)return i.push([g]),o;const r=n[3];if(r.search(w)>=0){u=r;const t=[g,u];return i.push(t),o}u=t+ ++o+e}d||(u=n[2]);const f=u.split(x).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(s)>=0&&++o})));const b=[g,u],m=r(h);return m&&b.push(m),"style"===g?(i.unshift(b),o):(i.push(b),o)}const y=new RegExp(t+"(\\d+)"+e,"gi"),x=new RegExp("("+t+"\\d+"+e+")","gi"),v=t.slice(0,t.length-1),w=new RegExp(v+"&#x72;(\\d+)"+e,"gi"),C=v+"&#x72;$1"+e;function k(n,o){const r=function(n,o){const r=n;return function(n,o){const r=[];for(let s=0;s<n.length;++s){const a=n[s].replace(y,C);s<o.length?r.push(a+t+s+e):r.push(a)}return function(n,o,r){const s=r.length-o.length;if(s>0)for(let r=s;r>0;--r)n.push(t+(o.length+r-1)+e)}(r,n,o),r}(r,o)}(n,o).join("");return d(r)}const _="";var S,T;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(S||(S={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(T||(T={}));const B={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},V="ch";function J(t,e,n=[],o=[]){const r=t;for(let t=0;t<r.length;t++){const s=[...o,t],a=r[t];if(a.at){const t=a.at;a.at=I(t,e)}if(a.ch){const t=a.ch,o=[...s,V];a.ch=J(t,e,n,o)}t=j(a,e,r,t)}return r}function j(n,o,r,a){if("text"!==n.nn)return a;const i=n;let c,l=i.tc;if(typeof l!==S.string)return a;for(;null!==(c=s.exec(l));){const n=c[1],i=parseInt(n,10);if(!isNaN(i)&&i<o){const n=t+i+e,o=l.slice(c.index+n.length);r.splice(a,1,{nn:"text",v:i}),l=o,s.lastIndex=0}}return i.tc=l,a}function I(e,n){const o=[];for(const r of e){const[e,s,a]=r;if(e.startsWith(t)){const r=parseInt(e.replace(t,""),10);if(!isNaN(r)&&r<n){o.push([{tagJsVar:r}]);continue}}if(typeof s===S.string&&s.startsWith(t)){const r=parseInt(s.replace(t,""),10);if(!isNaN(r)&&r<n){o.push([e,{tagJsVar:r},a]);continue}}o.push(r)}return o}function E(t){return t.length}const L={};function P(t,e){const n=function(t){const e=t.map(E);return e.push(t.length),Number(e.join(""))}(t),o=L[n],r=o&&function(t,e,n){if(n&&n.strings.length===t.length&&n.strings.every(((e,n)=>e===t[n]))&&n.values.length===e.length)return!0;return!1}(t,e,o);if(r)return o.domMetaMap;const s=J(k(t,e),e.length),a={interpolation:void 0,string:void 0,strings:t,values:e,domMetaMap:s};return L[n]=a,s}const D=function(){};let O=[];const N=[];let $=[],A=[],H=[];const M={locks:0,removeLocks:0};function R(t,e){e.textContent=t}function U(){if(!(M.locks>0))return function(){const t=N.length;(function(){for(const t of N)t[0](...t[1])})(),N.splice(0,t);for(const t of $)t[0](...t[1]);for(const t of A)t[0](...t[1]);for(const t of O)t[0](...t[1])}(),void function(){O=[],$=[],A=[];const t=H;H=[];for(const e of t)e[0](...e[1])}()}function W(t,e){N.push([z,[t,e]])}function z(t,e){t||console.info("no element by",e);t.parentNode.removeChild(t)}function F(t,e,n){t.parentNode.insertBefore(e,t)}function Y(t,e){t.appendChild(e)}const X="object"==typeof document&&document.createElement("div");function q(t){return X.innerHTML=t,document.createTextNode(X.innerHTML)}function G(t,e,n=D,o){const r=q(e);F(t,r),n(r)}function K(t,e,n=D){X.innerHTML=e;const o=document.createTextNode(X.textContent);F(t,o),n(o)}function Q(t,e,n){X.innerHTML=e;const o=document.createTextNode(X.textContent);Y(t,o),n(o)}function Z(t,e){++t.updateCount;const n=tt(t.subContext,e);return delete t.subContext,n}function tt(t,e){t.deleted=!0;const n=t.appendMarker;if(n&&(W(n,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const o=t.contextItem;return o.tagJsVar.destroy(o,e),76}function et(t){if(!t)return!1;switch(t.tagJsType){case B.dom:case B.tag:case B.templater:return!0}return!1}function nt(t){const e=t?.tagJsType;return e===B.tagComponent||e===B.stateRender}function ot(t){return at(t)&&typeof t.subscribe===T.function}function rt(t){return t&&st(t.then)}function st(t){return typeof t===T.function}function at(t){return typeof t===T.object&&null!==t}function it(t){return Array.isArray(t)}function ct(t){return t.renderCount=t.renderCount||0,t.state={newer:{state:[],states:[]}},t.global={blocked:[]}}function lt(){return Jt.stateConfig.support}function ut(t){return Tr(t.context),Jt.stateConfig.support=t}function dt(t){const e=t.state;return e&&e.newest&&e.newest?e.newest:t.parentContext?dt(t.parentContext):void 0}function pt(t){let e=t;for(;e.ownerSupport&&!nt(e.templater);)e=e.ownerSupport;const n=e.context.state;return n&&n.newest||e}function ht(...t){return t}function gt(t){const e=Jt.stateConfig;return e.states[e.statesIndex]=t,++e.statesIndex,t(ht)}function ft(t){const e=Jt.stateConfig,n=e.statesIndex,o=pt(e.prevSupport).context.state.newer.states[n];let r=[];o((function(...t){return r=t,t}));return e.states[e.statesIndex]=t,++e.statesIndex,t((function(...t){return r}))}function bt(t){Tr(t);const e=Jt.stateConfig;e.handlers.handler=Ct,e.handlers.statesHandler=gt,e.rearray=[];const n=e.state=[],o=e.states=[];e.statesIndex=0;(t.state=t.state||{}).newer={state:n,states:o}}function mt(t){const e=Jt.stateConfig;return e.rearray=t,e.state=[],e.states=[],e.statesIndex=0,e.handlers.handler=wt,e.handlers.statesHandler=ft,e}function yt(t,e,n){mt(n);Jt.stateConfig.prevSupport=e,ut(t)}class xt{}function vt(t){const e=t.callback;if(!e)return t.defaultValue;const[n]=function(t){const[e]=t(xt),[n]=t(e);return[e,n]}(e);return n}function wt(){const t=Jt.stateConfig,e=t.rearray[t.state.length];return t.state.push(e),e.defaultValue}function Ct(t){const e=Jt.stateConfig,n=_r();if(!n||!n.state){const t="State requested but TaggedJs is not currently rendering a tag or host";throw console.error(t,{config:e,context:n}),new Error(t)}const o=n.state.newer;e.state=o.state;let r=t;if(typeof t===T.function&&(r=t()),typeof r===T.function){const t=r;r=function(...e){return t(...e)},r.original=t}const s={get:function(){return vt(s)},defaultValue:r};return e.state.push(s),r}function kt(t){const e=new Tt;return e.subscribeWith=e=>{const n=[],o=[],r=(r,s)=>{n[s]=!0,o[s]=r;if(n.length===t.length){for(const t of n)if(!t)return;e(o,a)}},s=[...t],a=s.shift().subscribe((t=>r(t,0))),i=s.map(((t,e)=>t.subscribe((t=>r(t,e+1)))));return a.subscriptions=i,a},e}function _t(t,e,n){const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value+1);const r=function(){r.unsubscribe()};return r.callback=e,r.subscriptions=[],r.unsubscribe=function(){return function(t,e,n){!function(t,e){const n=t.findIndex((t=>t.callback===e));-1!==n&&t.splice(n,1)}(e,n);const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value-1),t.unsubscribe=()=>t;const r=t.subscriptions;for(const t of r)t.unsubscribe();return t}(r,n,e)},r.add=t=>(r.subscriptions.push(t),r),r.next=t=>{e(t,r)},r}function St(t,e,n){const o=[...e],r=o.shift(),s=t=>{if(o.length)return St(t,o,n);n(t)};let a=s;const i=r(t,{setHandler:t=>a=t,next:s});a(i)}class Tt{constructor(t,e){this.onSubscription=e,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this),arguments.length>0&&(this.value=t)}subscribe(t){const e=_t(0,t,this.subscribers),n=this.subscribeWith;if(n){if(this.methods.length){const n=t;t=t=>{St(t,this.methods,(t=>n(t,e)))}}return n(t)}return this.subscribers.push(e),this.onSubscription&&this.onSubscription(e),e}next(t){this.value=t,this.emit()}emit(){const t=this.value,e=this.subscribers;for(const n of e)n.callback(t,n)}toPromise(){return new Promise((t=>{this.subscribe(((e,n)=>{n.unsubscribe(),t(e)}))}))}toCallback(t){const e=this.subscribe(((n,o)=>{const r=o?.unsubscribe;r?r():setTimeout((()=>e.unsubscribe()),0),t(n)}));return this}pipe(...t){const e=[];"value"in this&&e.push(this.value);const n=new Tt(...e);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return kt(t.map((t=>{if(ot(t))return t;return new Tt(t,(e=>(e.next(t),e)))})))}}Tt.globalSubCount$=new Tt(0);function Bt(t){Object.defineProperty(t,"value",{set(e){t._value=e,t.emit()},get:()=>t._value})}const Vt=new Tt(void 0,(function(t){lt()||t.next()})),Jt={stateConfig:{state:[],version:Date.now(),handlers:{handler:Ct,statesHandler:gt}},tagClosed$:Vt};function jt(t,e,n){const o=t.tagJsVar.hasValueChanged(e,t,n);return 0===o||Ir(e,t,n,o),o}function It(t,e,n,o,r){const s=e.context;s.locked=3,n.element=n.element||o,Tr(n),n.tagJsVar.processInit(t,n,e,r,o),Br(),n.value=t,delete s.locked}function Et(t){switch(t){case void 0:case!1:case null:return _}return t}function Lt(t,e,n,o){switch(o){case"autofocus":return void $.push([$t,[n]]);case"autoselect":return void $.push([Nt,[n]]);case"style":{const o=t.split(".");return void $.push([Pt,[n,o,e]])}case"class":return void function(t,e,n){const o=t.split(".");if(o.shift(),e){for(const t of o)$.push([Dt,[n,t]]);return}for(const t of o)$.push([Ot,[n,t]])}(t,e,n)}throw new Error(`Invalid special attribute of ${o}. ${t}`)}function Pt(t,e,n){const o=e[1];t.style[o]=n,t.style.setProperty(o,n)}function Dt(t,e){t.classList.add(e)}function Ot(t,e){t.classList.remove(e)}function Nt(t){t.select()}function $t(t){t.focus()}function At(t,e,n){"object"!=typeof t[e]&&(t[e]={});for(const o in n){const r=n[o];$.push([zt,[t,e,o,r]])}if(t[e].setProperty)for(const o in n){const r=n[o];$.push([Wt,[t,e,o,r]])}}function Ht(t,e,n){t.setAttribute(e,"")}function Mt(t,e,n){if(at(n))return At(t,e,n);Ut(t,e,n)}function Rt(t,e,n){t[e]=!!n}function Ut(t,e,n){t[e]=n,void 0!==n&&!1!==n&&null!==n?t.setAttribute(e,n):t.removeAttribute(e)}function Wt(t,e,n,o){t[e].setProperty(n,o)}function zt(t,e,n,o){t[e][n]=o}function Ft(t,e){const n=function(t,e,n=[]){const o=t.context;n.push({support:t,renderCount:o.renderCount,provider:e});const r=e.children;for(let t=r.length-1;t>=0;--t){const o=r[t],s=o.context;n.push({support:o,renderCount:s.renderCount,provider:e})}return n}(t,e);return n}function Yt(t){return t.support}function Xt(t,e){return qt(t,e)}function qt(t,e){if(null===t||typeof t!==T.object)return t;if(e<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const n=it(t)?[]:Object.create(Object.getPrototypeOf(t));if(it(t))for(let o=0;o<t.length;o++)n[o]=qt(t[o],e-1);else for(const o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=qt(t[o],e-1));return n}function Gt(t,e,n){return Kt(t,e,n)}function Kt(t,e,n){return!(t!==e&&(o=t,r=e,!st(o)||!st(r)||o.toString()!==r.toString()))||(n<0||typeof t===T.object&&typeof e===T.object&&(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():it(t)&&it(e)?function(t,e,n){if(t.length!==e.length)return!1;for(let o=0;o<t.length;o++)if(!Kt(t[o],e[o],n-1))return!1;return!0}(t,e,n-1):!it(t)&&!it(e)&&function(t,e,n){const o=Object.keys(t),r=Object.keys(e);if(0===o.length&&0===r.length)return!0;if(o.length!==r.length)return!1;for(const s of o){if(!r.includes(s)||!Kt(t[s],e[s],n-1))return!1}return!0}(t,e,n-1)));var o,r}function Qt(t,e){const n=t.length;for(let o=0;o<n;++o){const n=t[o],r=e[o];if(it(n)&&it(r)){if(n===r)continue;return 3}if(typeof n!==T.function||typeof r!==T.function)if(typeof n!==T.object){if(n!==r)return 3.3}else if(typeof e===T.object){const t=Object.entries(n);for(const e of t){if(!Zt(e,r))return 3.1}}}return!1}function Zt([t,e],n){const o=n[t];return typeof e===T.function&&typeof o===T.function||o===e}function te(t){return t.map(ee)}function ee(t,e){const n=t,o=t?.tagJsType;if(o)switch(o){case B.signal:case B.subscribe:case B.stateRender:return;case B.dom:case B.tag:case B.templater:return te(n.values)}return it(t)?te(n):Xt(t,e)}function ne(t){return ee(t,Qn)}function oe(t){return ee(t,Zn)}function re(t,e,n){const o={templater:t,context:e,castedProps:n,appSupport:void 0};return e.global.blocked=[],e.state||(e.state={newer:{state:[],states:[]}}),o}function se(t,e,n,o){e.appSupport=n;const r=t.props;return r&&(e.propsConfig=function(t,e,n){const o=t.templater;if(o.tagJsType!==B.stateRender){switch(o.propWatch){case zn.IMMUTABLE:return t.propsConfig={latest:e,castProps:n};case zn.SHALLOW:return t.propsConfig={latest:e.map(ne),castProps:n}}return t.propsConfig={latest:e.map(oe),castProps:n}}}(e,r,o)),e}function ae(t,e){const n=e.providers;if(n)for(const t of n)for(let n=t.children.length-1;n>=0;--n){t.children[n].context.global===e&&t.children.splice(n,1)}t.context.destroy$.next(),t.context.renderCount=0}function ie(t,e){for(const n of t){const t=n.lastArray;if(t){ie(t,e);continue}const o=n.value;if(o?.tagJsType===B.subscribe){o.destroy(n,e),n.deleted=!0;continue}const r=n.global;if(!r)continue;const s=n.state.newest,a=r.subscriptions;a&&a.forEach(le),nt(s.templater)&&ae(s,r);ie(n.contexts,s),r.deleted=!0}}function ce(t,e=[],n=[]){for(const o of t){const t=o.global;if(!t)continue;const r=o.state.newest;if(r){e.push(r);const o=t.subscriptions;o&&n.push(...o)}const s=o.contexts;s&&ce(s,e,n)}return{tags:e,subs:n}}function le(t){t.unsubscribe()}function ue(t,e,n,o){const r=t.length-1,s=e-o,a=s<0||r<s,i=n[e];if(a)return de(i),1;const c=function(t,e,n,o,r){const s=e&&t!==e.arrayValue;if(s)return de(n),o.splice(r,1),2;return 0}(i.value.arrayValue,t[e],i,n,e);return c}function de(t){!function(t,e){if(t&&e.state?.oldest){return void me(e.state.oldest,t)}e.tagJsVar.destroy(e,{})}(t.global,t)}function pe(t){++t.updateCount;he(t,t.lastArray)}function he(t,e){for(let t=0;t<e.length;++t)de(e[t]);delete t.lastArray}function ge(t){const e=t.marker;e&&W(e,"destroyMarker");W(t.domElement,"destroyClone")}function fe(t,e){!function(t,e){for(const n of t){if(n.withinOwnerElement){const t=n.tagJsVar;if(t&&"host"===t.tagJsType){const o=n.supportOwner,r=t.destroy(n,o);rt(r)&&e.push(r)}continue}const t=n.lastArray;if(t){he(n,t);continue}const o=n.simpleValueElm;if(o){delete n.simpleValueElm,W(o,"smartRemoveByContext");continue}const r=n.global;if(void 0===r)continue;r.deleted=!0;const s=n.state?.oldest;s&&fe(n,e)}}(t.contexts,e),be(t)}function be(t){!function(t){for(let e=t.length-1;e>=0;--e)ge(t[e]),t.splice(e,1)}(t.htmlDomMeta)}function me(t,e){const n=t.context;e.deleted=!0,n.renderCount=0;const o=[];return ie(n.contexts,t),t.templater.wrapper&&ae(t,e),fe(n,o),delete n.state,delete n.contexts,delete n.returnValue,o}function ye(t,e){const n=xe(t,e);return!(n||!e.templater.tag?._innerHTML||!xe(t.outerHTML,e))||n}function xe(t,e){const n=t.templater,o=e.templater,r=n?.tag||t,s=o.tag;if(n?.tagJsType===B.stateRender)return n.dom===o.dom;switch(r.tagJsType){case B.dom:return s?.tagJsType===B.dom&&function(t,e){const n=t.dom,o=e.dom;return n===o}(r,s);case B.tag:{const n=function(t,e,n,o){const r=t.strings,s=e.strings;if(r.length!==s.length)return!1;if(!r.every(((t,e)=>s[e].length===t.length)))return!1;const a=n.templater.values||t.values,i=o.templater.values||e.values;return function(t,e){const n=t.length===e.length;if(!n)return!1;const o=e.every((function(e,n){const o=t[n];if(typeof e===T.function&&typeof o===T.function){return!!(e.toString()===o.toString())}return!0}));if(o)return!0;return!1}(a,i)}(r,s,t,e);return n}}throw new Error(`unknown tagJsType of ${r.tagJsType}`)}function ve(t){++t.updateCount;const e=t.global;me(t.state.newest,e),function(t){t.htmlDomMeta=[],delete t.contexts,delete t.state,delete t.global,t.renderCount=0}(t)}function we(t,e){const n=e.global,o=e.state?.newest;if(et(t)){return ye(t,o)?(jr(e,t,o),0):(me(o,n),ct(e),7)}const r=t?.tagJsType;if(r){return!0===jr(e,t,e.state.newest.ownerSupport)?0:88}return ve(e),8}function Ce(t,e,n,o){const r={updateCount:0,value:t,destroy$:new Tt,tagJsVar:Fo(t),withinOwnerElement:n,parentContext:o,valueIndex:e.length};return e.push(r),r}function ke(t,e,n,o,r,s,a){const i=document.createTextNode(_),c=Ce(t,e,r>0,o);return c.placeholder=i,c.element=s,s?A.push([Y,[s,i]]):O.push([F,[a,i,"attachDynamicDom.attachDynamicDom"]]),It(t,n,c,s,a),c}function _e(t,e,n,o,r,s){for(const a of t){const t=a[0],i=a[1],c=a[2]||!1;let l=a.length>1?Mt:Ht;a[3]&&(l=a[3]);const u=Bo(t,i,e,n,o,l,o.context.contexts,r,c);"object"==typeof u&&s.push(u)}}function Se(t,e,n,o,r,s,a){const i=[];return e.at&&_e(e.at,n,t,o,r,i),s?A.push([Y,[s,t,"appendToAttachDomElement"]]):O.push([F,[a,t,"insertBeforeAttachDomElement"]]),i}function Te(t,e,n,o,r,s,a){const i=n.context.contexts,c=[];s&&void 0===a&&(a=document.createTextNode(_),A.push([Y,[s,a]]),s=void 0);for(let l=0;l<t.length;++l){const u=t[l],d=u.v;if(!isNaN(d)){ke(e[i.length],i,n,o,r,s,a);continue}const p={};if(c.push(p),"text"===u.nn){Be(p,u,s,a);continue}const h=p.domElement=document.createElement(u.nn),g={updateCount:0,isAttrs:!0,element:h,parentContext:o,contexts:[],destroy$:new Tt,tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,withinOwnerElement:!0},f=Se(h,u,e,n,g,s,a);g.element=h,g.contexts=f,u.ch&&(p.ch=Te(u.ch,e,n,g,r+1,h,a).dom)}return{dom:c,contexts:i}}function Be(t,e,n,o){const r=t,s=r.tc=e.tc;n?A.push([Q,[n,s,function(t){r.domElement=t}]]):O.push([K,[o,s,function(t){r.domElement=t}]])}function Ve(t,e,n){const o=t.context;o.state=o.state||{};const r=o.state;r.oldest=t,r.newest=t,o.state.older=o.state.newer,++M.locks;const s=function(t,e,n,o){const r=function(t){const e=t.templater,n=e.tag;if(n.tagJsType===B.dom)return n.dom;const o=n.strings;return P(o,n.values)}(t),s=t.templater.tag,a=s.values,i=[];t.context.contexts=i;const c=Te(r,a,t,e,0,n,o);return c}(t,t.context,e,n);return o.htmlDomMeta=s.dom,--M.locks,s}function Je(t,e){const n=e.state.newest,o=e.placeholder;return n.ownerSupport=t,Ve(n,void 0,o),n}function je(t){const e={tagJsType:B.templater,processInitAttribute:D,processInit:Le,processUpdate:D,hasValueChanged:we,destroy:D,propWatch:"shallow",key:D};return e.tag=t,t.templater=e,e}function Ie(t,e,n){const o=function(t,e,n,o,r){const s={templater:t,context:o,castedProps:r,appSupport:void 0};return s.ownerSupport=e,s.appSupport=n,s}(t,e,e.appSupport,n);return n.contexts=[],o}function Ee(t,e,n,o,r){const s=Ie(t,n,e);s.ownerSupport=n;const a=Ve(s,o,o?void 0:r);for(const t of a.dom)t.marker&&(o?A.push([Y,[o,t.marker]]):O.push([F,[r,t.marker,"subMarker"]])),t.domElement&&(o?A.push([Y,[o,t.domElement,"subAppendTo"]]):O.push([F,[r,t.domElement,"subInsertBefore"]]));return s}function Le(t,e,n,o,r){return e.state={},r?Ee(t,e,n,r,o):Je(n,e)}function Pe(t,e,n){++e.updateCount;const o=e.tagJsVar.tagJsType;return o&&["tag-conversion","element"].includes(o)?(e.tagJsVar.processUpdate(t,e,n,[]),e.value=t,0):t===e.value?0:jt(e,t,n)}function De(t,e){const n={tagJsType:B.templater,processInit:Le,processInitAttribute:D,processUpdate:Pe,hasValueChanged:we,destroy:ve,propWatch:t,props:e,key:function(t){return n.arrayValue=t,n},matchesInjection:t=>n.wrapper===t||n.wrapper?.original===t?.original};return n}const Oe=[];function Ne(t){const e=t.context;return io(t.templater)?lo(t):ao(t,t,e)}function $e(t,e,n){return t.map((function(t){return function(t,e,n,o){if(et(t)||!t)return t;if(!e)return t;return Ae(t,e,n,o)}(t,e.ownerSupport,e,n)}))}function Ae(t,e,n,o,r){if(!t)return t;if(t.tagJsType)return t;if(typeof t===T.function)return o<=1?function(t,e,n){const o=t.mem;if(o)return t;const r=function(...t){return function(t,e,n,o){const r=o.context,s=r.state?.newest||o,a=void 0===lt(),i=t.apply(e,n),c=function(){const t=s.context,e=t.global;return t.locked?i:e?(Ne(s),i):(r.tagJsVar.processUpdate(r.value,r,o,[]),i)};if(a)return c();return Jt.tagClosed$.toCallback(c),i}(r.mem,e,t,n)};return r.original=t,r.mem=t,Object.assign(r,t),r}(t,r,e):t;if(o===Zn)return t;return Me(t)?t:it(t)?function(t,e,n,o){for(let r=t.length-1;r>=0;--r){const s=t[r];if(t[r]=Ae(s,n,e,o+1,t),typeof s===T.function){if(s.mem)continue;He(o+1,r,s,t,e)}}return t}(t,n,e,o):function(t,e,n,o){const r=Object.keys(t);for(const s of r){const r=t[s],a=Ae(r,n,e,o+1,t);if(t[s]===a)continue;const i=Object.getOwnPropertyDescriptor(t,s);if(!(i?.get||i?.set)&&(t[s]=a,typeof a===T.function)){if(r.mem)continue;He(o+1,s,r,t,e)}}return t}(t,n,e,o)}function He(t,e,n,o,r){t>0&&(o[e].subscription=r.context.destroy$.toCallback((function(){o[e]=n})))}function Me(t){return typeof t!==T.object||!t||t.tagJsType}function Re(t,e,n,o){const r=e.original,s=t.tagJsType===B.stateRender,a=Jt.stateConfig;let i;return ut(n),s?i=t():(i=r(...o),typeof i===T.function&&void 0===i.tagJsType&&(i=i())),n.context.returnValue=i,i.templater=t,t.tag=i,n.context.state.newer={...a},n}function Ue(t,e,n,o,r){const s=re(t,o,r);return s.ownerSupport=e,se(t,s,n,r)}function We(t,e,n){const o=t.propWatch===zn.DEEP?Zn:Qn,r=t.props,s=e.propsConfig;let a=s.castProps;const i=n?.propsConfig,c=i?.castProps;c&&(s.castProps=c,a=no(e,n,n.ownerSupport,r,o));return a||$e(r,e,0)}function ze(t,e){++t.context.renderCount,Fe(),Jt.tagClosed$.next(e)}function Fe(t){!function(t){const e=Jt.stateConfig,n=t||e.context;n.state=n.state||{},n.state.newer={...e};const o=e.support;n.state.newest=o}(t),function(){const t=Jt.stateConfig;delete t.prevSupport,delete t.support,delete t.state,delete t.states,Br()}()}function Ye(t,e,n,o){let r;const s=t.templater;if(s.tagJsType===B.stateRender){const e=s;r=Ue(s,o,t.appSupport,n),Re(s,e,r)}else{r=(0,s.wrapper)(t,n,e)}return ze(r,o),r.ownerSupport=t.ownerSupport,r}function Xe(t,e,n,o){return yt(t,e,n.state.older.state),Ye(t,e,n,o)}function qe(t,e,n,o){return bt(t.context),ut(t),Ye(t,e,n,o)}function Ge(t,e,n,o,r){ct(e);const s=function(t,e,n){const o=De(zn.DEEP);o.tagJsType=t.tagJsType;const r=Ie(o,n,e);function s(){return o.tag=t(),r}return o.wrapper=s,s.tagJsType=t.tagJsType,s.original=t.original||t,r}(t,e,n);return qe(s,void 0,e),Ee(s.templater,e,n,r,o)}function Ke(t,e,n,o,r){const s=Ko(t,e,n,o,r);return s.hasEmitted||Qe(t,s),s}function Qe(t,e){const n=t.Observables[0];if(!e.hasEmitted)return"withDefault"in t?void e.subValueHandler(t.withDefault,0):"value"in n?void e.subValueHandler(n.value,0):void 0;const o=e.lastValues[0].value;e.subValueHandler(o,0)}function Ze(t,e,n,o,r,s){const a=e.tagJsVar,i=t;if(a.hasValueChanged(i,e,n)>0){a.destroy(e,n),o.removeAttribute(r);const i=Fo(t);return i.isAttr=!0,i.processInitAttribute(r,t,o,i,e,n,s),void(e.tagJsVar=i)}}function tn(t,e,n,o,s,a){e.destroy=Zo;const i=r(t),c=function(e,o){Io(t,e,n,Mt,i,s),er(o)},l=Qo(e.Observables,a,c,e,s);return s.subContext=l,s.value=e,s.tagJsVar=e,e.processUpdate=function(e,o,r){return Ze(e,s,r,n,t,Mt)},{subContext:l,onOutput:c}}function en(t,e,n,o,r,s){const{subContext:a}=tn(t,e,n,0,r,s);a.hasEmitted||function(t,e){const n=e.tagJsVar,o=n.onOutput,r=t.Observables;let s=r[0]?.value||t.withDefault;t.callback&&(s=t.callback(s));o(s,!0,e)}(e,a)}function nn(t,e,n){return{onOutput:D,tagJsType:B.subscribe,processInitAttribute:en,processInit:Ke,hasValueChanged:on,processUpdate:D,destroy:tr,callback:n,withDefault:e,Observables:[t]}}function on(t,e){if(!t?.tagJsType)return 1;const n=t.Observables;if(!n)return 2;const o=e.value.Observables;if(!o||o.length!==n.length)return 3;return n.every(((t,e)=>t===o[e]))?0:4}function rn(t,e){return{onOutput:D,tagJsType:B.subscribe,processInitAttribute:tn,processInit:Ko,hasValueChanged:on,processUpdate:Lr,destroy:tr,callback:e,Observables:[t]}}function sn(t,e,n){++e.updateCount;const o=t.owner._innerHTML;o.processInit=o.oldProcessInit;const r=e.subContext?.contextItem;jt(r,o,n)}function an(t,e,n,o,r){e.subContext={},t.processUpdate=sn,function(t,e,n,o,r){const{appendMarker:s,insertBefore:a}=qo(r,o),i=n.subContext;i.appendMarker=s;const c=t.owner,l=c._innerHTML;l.processInit=l.oldProcessInit,Xo(l,i,e,a)}(t,n,e,o,r)}function cn(){return{tagJsType:"innerHTML",hasValueChanged:()=>0,processInitAttribute:D,processInit:an,processUpdate:sn,destroy:Z}}function ln(t,e){for(let n=0;n<t.length;++n){hn(t[n],e[n])}}let un;function dn(...t){return un=t,t}function pn(){return un}function hn(t,e){t(dn,1),e(pn,2)}function gn(t,e,n,o){for(let n=t.length-1;n>=0;--n){const o=t[n].get(),r=e[n].callback;r&&r(o)}for(let t=o.length-1;t>=0;--t){bn.length=0,fn=0;(0,o[t])(mn),n[t](yn)}}rn.all=function(t,e){return rn(Tt.all(t),e)};let fn=0;const bn=[];function mn(...t){return bn.push(t),t}function yn(...t){return bn[fn++]}function xn(t,e,n){const o=n.state,r=o.newer.states,s=o.older?o.older.states:r,a=o.newest;ln(r,s);const i=e(...t);return ln(s,r),H.push([()=>{const t=a.context.global;void 0===t||!0===t.deleted||(++M.locks,Ne(a),--M.locks,U())},[]]),i}function vn(t,e={}){const n={tagJsType:B.host,processInitAttribute:Cn,hasValueChanged:()=>0,processInit:kn,processUpdate:wn,destroy:_n,options:{callback:t,...e},matchesInjection(e){const n=e?.options?.callback;return n===t}},o=(...n)=>({...o,options:{arguments:n,...e,callback:t}});return Object.assign(o,n),o}function wn(t,e,n){const o=Er(B.host,t,n,e);if(o)return o;const r=e.tagJsVar.options,s=t;!function(t){mt(t.state.newer.state)}(e);const a=s.options.arguments||r.arguments||[];e.returnValue=s.options.callback(...a),Fe(e)}function Cn(t,e,n,o,r){return kn(o,r)}function kn(t,e){const n=e.element,o=e.state={};bt(e),function(t,e,n,o){const r=e.options.arguments||[],s=e.options.callback(...r);n.returnValue=s;const a=e.options;a.onInit&&a.onInit(t,e,n,o)}(n,t,e,o),Fe()}function _n(t){++t.updateCount;const e=t,n=e.tagJsVar,o=n.options;if(e.destroy$.subscribers.length&&(Tr(t),xn([],e.destroy$.next.bind(e.destroy$),t),Br()),o.onDestroy){const r=e.element;return xn([],(function(){Tr(t);const s=o.onDestroy(r,n,e,e.state);return Br(),s}),t.stateOwner.context)}}function Sn(t,e,n){const o=t.context,r=o.toRender||o.returnValue,s=Fo(r);delete o.global;const a={updateCount:0,value:r,tagJsVar:s,destroy$:new Tt,placeholder:o.placeholder,valueIndex:-1,withinOwnerElement:!0,parentContext:o,contexts:[]},i=function(t,e,n,o){const r={tagJsType:"tag-conversion",processInitAttribute:D,processInit:(r,s,a)=>{const i=t.toRender||t.returnValue;return e.tagJsVar.processInit(i,e,n,o.placeholder)},processUpdate:(o,s,a)=>{++t.updateCount,++s.updateCount;const i=t.toRender||t.returnValue,c=t.value.tagJsType,l=o?.tagJsType,u=l!==c,d=function(t,e){const n=e.state?.newest;if(et(t))return ye(t,n)?0:7;const o=t?.tagJsType;return o?t.wrapper?.original===e.value.wrapper?.original?0:88:8}(o,t);if(d||u||r.hasValueChanged(i,t,n))return r.destroy(t,n),void Ir(o,t,a,789);if(e.value.props=$e(o.props,a,1),e.updatesHandler=t.updatesHandler,t.updatesHandler){(0,t.updatesHandler)(e.value.props)}e.tagJsVar.processUpdate(i,e,n,[]),e.value=i},hasValueChanged:(o,r)=>{const s=t.toRender||t.returnValue;return e.tagJsVar.hasValueChanged(s,e,n)},destroy:(o,r)=>{++t.updateCount;const s=e.tagJsVar.destroy(e,n);return rt(s)?s.then((()=>{const e=Vn(t,r);return U(),e})):Vn(t,r)}};return r}(o,a,t,n);return o.tagJsVar=i,s.processInit(r,a,t,n.placeholder),t}function Tn(t,e,n){const o=Ue(t,n,n.appSupport,e),r=o.propsConfig;if(r){const e=t.tagJsType!==B.tagComponent?[]:We(t,o);r.castProps=e}return qe(o,e.state.newest,e)}function Bn(t,e,n){const o=Tn(t,e,n),r=o.templater.tag;return["dom","html"].includes(r.tagJsType)?(Ve(o,void 0,e.placeholder),o):Sn(o,0,e)}function Vn(t,e){delete t.returnValue,delete t.toRender,delete t.global,t.contexts=[],t.htmlDomMeta=[],delete t.updatesHandler}function Jn(t,e,n,o){const r=Tn(t,e,n),s=r.templater.tag;return["dom","html"].includes(s.tagJsType)?function(t,e){const n=Ve(t,e,void 0);for(const t of n.dom)t.domElement&&A.push([Y,[e,t.domElement]]),t.marker&&A.push([Y,[e,t.marker]]);return t}(r,o):Sn(r,0,e)}vn.onInit=t=>vn((()=>{}),{onInit:t}),vn.onDestroy=t=>vn((()=>{}),{onDestroy:t});function jn(t,e,n,o,r){return ct(e),r?Jn(t,e,n,r):Bn(t,e,n)}function In(t){++M.locks,t.forEach(En),--M.locks,U()}function En(t){const e=t.context;if(!e.global)return void e.tagJsVar.processUpdate(e.value,e,t.ownerSupport,[]);co(e.state.newest)}function Ln(t,e,{resolvePromise:n,resolveValue:o}){if(rt(t)){return e.context.locked=2,t.then(function(t,e){return n=>{const o=t.context.global,r=t.context;if(delete r.locked,!0===o.deleted)return e(n);!function(t,e){const n=t.context.state,o=e.context.state;ln(n.newer.states,o.newer.states)}(t,r.state.newest);return In(uo(t)),e(n)}}(e,n))}return o(t)}function Pn(t){return Jt.stateConfig.handlers.handler(t)}function Dn(t){return Pn((()=>{const e=t();if(_r().global){return Ln(e,lt(),{resolvePromise:On,resolveValue:Nn})}})),Fn}function On(t){return t}function Nn(t){return t}function $n(t){return Pn((function(){_r().destroy$.toCallback(t)})),Fn}let An=0;const Hn=Rn("click"),Mn=Rn("mousedown");function Rn(t){return function(e){const n=xr(e);return Pn((()=>{Sr().addEventListener(t,n)})),n}}const Un={get:Sr,onclick:Hn,click:Hn,onClick:Hn,mousedown:Mn,onmousedown:Mn,onMouseDown:Mn};function Wn(t,e){Object.defineProperty(Fn,t,{get:()=>e,set:t=>e(t)})}var zn;function Fn(t,e=zn.SHALLOW){const n=function(...o){const r=De(e,o);r.tagJsType=B.tagComponent,r.processInit=jn,r.hasValueChanged=we;const s=function(t,e){return function(n,o,r){const s=We(t,n,r),a=n.ownerSupport,i=Ue(t,a,n.appSupport,o,s);return Re(t,e,i,s)}}(r,n);return s.original=t,r.wrapper=s,r},o=t;n.original=t,o.tags=Oe,o.setUse=Jt,o.ValueTypes=B,o.tagIndex=An++,Oe.push(n);const r=n;return r.updates=r.inputs=t=>(_r().updatesHandler=t,!0),r}function Yn(t,e){const n=e.context.global;if(n&&n.deleted)return!1;const o=function(t,e){const n=t.props,o=e.propsConfig,r=o.latest;if(Xn(n,r))return!0;switch(t.propWatch){case zn.IMMUTABLE:return Kn(n,r);case zn.SHALLOW:return Qt(n,r)}return!Gt(n,r,Zn)}(t,e);return!!o}function Xn(t,e){return t.length!==e.length}function qn(t,e,n){if(Xn(t,e))return 11;switch(n){case zn.NONE:return 1;case zn.SHALLOW:return Qt(t,e);case zn.IMMUTABLE:return Kn(t,e)}return function(t,e){let n=t,o=e;n=[...t],o=[...e||[]];if(!n.every(((t,e)=>function(t,e,n,o){const r=o[e];if(typeof t===T.object){const e={...t},n={...r||{}},o=Object.entries(e).every((([t,o])=>Gn(o,n[t],(()=>{delete e[t],delete n[t]}))));return o}return Gn(t,r,(function(){n.splice(e,1),o.splice(e,1)}))}(t,e,n,o))))return 7;return!1}(t,e)}function Gn(t,e,n){if(typeof t!==T.function)return!!Gt(t,e,Zn)&&4;if(typeof e!==T.function)return!1;const o=e?.original;o&&(e=o);t.original&&(t=t.original);return t.toString()===e.toString()?(n(),5):(n(),6)}function Kn(t,e){const n=t.length;for(let o=0;o<n;++o){if(t[o]!==e[o])return 2}return!1}Wn("onclick",Hn),Wn("click",Hn),Wn("onMouseDown",Mn),Wn("onmousedown",Mn),Wn("mousedown",Mn),function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(zn||(zn={})),Fn.element=Un,Fn.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},Fn.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},Fn.deepPropWatch=Fn,Fn.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Fn.inject=function(t){const e=_r();if(!e)throw new Error("tag.inject can only be called within a tag or host context");let n=e.parentContext;for(;n;){const e=n.contexts;if(e)for(const n of e)if(n.isAttr&&n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;if(n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;n=n.parentContext}const o=`Could not find parent context for tag.inject ${t}`;throw console.error(o,{targetItem:t,context:e}),new Error(o)},Fn.onInit=Dn,Fn.onDestroy=$n,Fn.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Fn.immutableProps=function(t){return Fn(t,zn.IMMUTABLE)},Fn.watchProps=function(t){return Fn(t,zn.SHALLOW)},Object.defineProperty(Fn,"renderOnce",{set(t){t.tagJsType=B.renderOnce,t.processInit=Ge,t.processUpdate=Pe,t.destroy=ve,t.hasValueChanged=function(){return 0}}}),Object.defineProperty(Fn,"use",{set(t){t.original={setUse:Jt,tags:Oe},t.tagJsType=B.stateRender,t.processInit=jn,t.processUpdate=Pe,t.hasValueChanged=we,t.destroy=ve}});const Qn=3,Zn=10;function to(t,e,n,o,r,s){return null==t||s>r?e:typeof t===T.function?e.mem?(t.mem=e.mem,e):(t.mem=e,t):Me(e)?e:it(e)?function(t,e,n,o,r,s){for(let a=t.length-1;a>=0;--a){const i=t[a],c=e[a];t[a]=to(c,i,n,o,s,r+1)}return t}(e,t,n,o,s,r):function(t,e,n,o,r,s){const a=Object.keys(t);for(const i of a){const a=t[i],c=to(e[i],a,n,o,s,r+1);if(a===c)continue;const l=Object.getOwnPropertyDescriptor(t,i)?.set;l||(t[i]=c)}return t}(e,t,n,o,s,r)}function eo(t,e,n){const o=n.global,r=n.state.newest,s=r.templater.wrapper;let a=e.templater.wrapper,i=!1;const c=e.templater.tagJsType,l=B.stateRender===c||B.renderOnce===c;if(l)i=e.templater.tagJsType===B.renderOnce||ye(r,e);else if(s&&a){const t=r.templater.tag?._innerHTML;t&&(a=e.outerHTML);i=s.original===a.original}const u=e.templater;if(!i)return void function(t,e,n){const o=t.global;me(t.state.oldest,o),ct(t),e.processInit(e,t,n,t.placeholder)}(n,u,t);const d=l||function(t,e){return qn(e.props,t.propsConfig.latest,t.templater.propWatch)}(r,u);if(d)n.locked?o.blocked.push(e):(co(e),++n.renderCount);else{!function(t,e,n,o,r){const s=t.props,a=no(e,n,o,s,r),i=e.propsConfig;i.castProps=a;const c=n.propsConfig;c.latest=i.latest}(u,e,r,t,u.propWatch===zn.DEEP?Zn:Qn)}}function no(t,e,n,o,r,s=-1){const a=e.context;if(!a.global||!a.state.newest){const e=$e(o,t,s);o.push(...e);return t.propsConfig.castProps=e,o}const i=(e=a.state.newest||e).propsConfig.castProps,c=[];for(let e=0;e<o.length;++e){const a=o[e],l=to(i[e],a,t,n,r,s+1);c.push(l)}return t.propsConfig.castProps=c,c}function oo(t){const e=t.context,n=e.global,{subs:o,tags:r}=ce(e.contexts);ro(e);for(const t of r){if(!0===t.context.global.deleted)return;ro(t.context)}n.subscriptions&&o.forEach(le),ct(e)}function ro(t){t.global.deleted=!0,fe(t,[])}function so(t,e,n){let o;delete n.toRender,o=function(t){const e=t?.context,n=e?.state;return n?.older?.state}(e)?Xe(t,e,n):qe(t,e,n);const r=!e||ye(e,o);if(r){if(e){const t=e.templater.tag;if(t&&n.renderCount>0){const n=e?.templater,o=n?.tag;!function(t,e,n){if(t.tagJsType===B.dom){const o=n?.dom;return void(o!==t.dom&&oo(e))}if(n){const o=n.strings;if(o){const n=o?.length;n!==t.strings.length&&oo(e)}}}(t,e,o)}}}else{!function(t,e){const n=t.context.global;let o=-1;const r=n.providers=n.providers||[],s=r.length-1;for(;o++<s;){const t=r[o];let s=-1;const a=t.children.length-1;for(;s++<a;)if(n===t.children[s].context.global)return t.children.splice(s,1),void t.children.push(e)}}(e,o),oo(e);const t=o.context;t.state.oldest=o,t.state.newest=o,t.state.older=t.state.newer}return o.ownerSupport=t.ownerSupport,{support:o,wasLikeTags:r}}function ao(t,e,n){const o=so(e,t,n);if(o.wasLikeTags){return Jr(n.state.oldest,o.support),o.support}return Je(e,n)}function io(t){return B.templater===t.tagJsType}function co(t){const e=t.context,n=e.global,o=io(t.templater);if(e.locked)return n.blocked.push(t),t;if(o){return lo(t)}e.locked=4,n.blocked.length&&(t=n.blocked.pop(),n.blocked=[]);const r=ao(e.state.newest,t,e);return delete e.locked,r}function lo(t){return co(pt(t).context.state.newest)}function uo(t,e=[]){const n=t.context,o=io(t.templater),r=t.ownerSupport;if(n.locked)return e.push(t),e;if(o)return uo(r,e);const s=t.context.global;if(s&&!0===s.deleted)return e;const a=t,i=nt(a.templater),c=t.templater.tagJsType,l=r&&c!==B.stateRender&&(!i||Yn(a.templater,a));if(a.context.global){const t=function(t){const e=t.context.global.providers;if(!e)return[];const n=[];for(const t of e){const e=Ft(t.owner,t);n.push(...e.map(Yt))}return n}(a);e.push(...t)}return l?(uo(r,e),i&&e.push(a),e):(e.push(a),e)}function po(t,e){const n=e.context.global,o=function(t,e){if(!0!==n.deleted)return function(t,e,n,o){const r=pt(e),s=r.context;s.locked=1;const a=t.apply(n,o);delete s.locked;return function(t,e){const n=e.context.global;if(n?.deleted)return;const o=uo(e);return In(o),Ln(t,e,{resolvePromise:fo,resolveValue:bo})}(a,r)}(o.tagFunction,o.support,t,e)};return o.tagFunction=t,o.support=e,o}const ho="no-data-ever",go="promise-no-data-ever";function fo(){return go}function bo(){return ho}function mo(t,e,n){const o=n[e];if(o){let e=!1;if(t.originalStopPropagation=t.stopPropagation,t.stopPropagation=function(){e=!0,t.originalStopPropagation.call(t),t.stopPropagation=t.originalStopPropagation,delete t.originalStopPropagation},o(t),t.defaultPrevented||e)return}const r=n.parentNode;r&&mo(t,e,r)}function yo(t,e,n,o){const r=t.appElement,s=function(t){"blur"===t&&(t="focusout");return"_"+t}(e);"blur"===e&&(e="focusout");const a=t.context.events;if(!a[e]){const t=function(t){mo(t,s,t.target)};a[e]=t,r.addEventListener(e,t)}n[s]=o,n[e]=o}function xo(t,e,n,o){const r=function(...e){return r.tagFunction(t,e)};r.tagFunction=e,r.support=n,yo(n.appSupport,o,t,r)}function vo(t){return null==t||!1===t}function wo(t,e,n,o,s,a,i){if(!vo(e))if(typeof e!==T.object)0!==e.length&&s(n,e,_);else for(const s in e){const c=r(s);Bo(s,e[s],t,n,o,Mt,a,i,c)}}function Co(t,e){t.removeAttribute(e)}function ko(t,e,n,o){const r=e,s=t;if(s?.tagJsType){const o=e.value;return o?.tagJsType?void o.hasValueChanged(s,e,n):(s.isAttr=!0,Tr(e),s.processInitAttribute(r.attrName,t,r.element,s,r,n,Mt),Br(),void(r.tagJsVar=s))}if(r.isNameOnly)return function(t,e,n,o,r,s,a,i){if(n){if(vo(e)||""===e)return void o.removeAttribute(n);if(typeof n===T.object)if(typeof e===T.object)for(const t in n)t in e||$.push([Co,[o,t]]);else for(const t in n)$.push([Co,[o,t]])}wo(t,e,o,r,s,a,i)}(o,t,r.value,r.element,n,r.howToSet,[],r.parentContext),void(r.value=t);const a=r.element;!function(t,e,n,o,r,s,a){if(st(t))return function(t,e,n,o,r,s,a){const i=t.templater.wrapper,c=(i?.tagJsType||i?.original?.tagJsType)===B.renderOnce;if(!c)return Jo(a,e,t,o,n);return Vo(e,n,o,r,s,t)}(r,t,o,e,a,s,n);Vo(t,o,e,a,s,r)}(t,r.attrName,r,a,n,r.howToSet,r.isSpecial),e.value=t}function _o(t,e,n,o,r,s,i){const c=o.length;function l(o){const s=function(t,e,n){return t.reduce(((t,o)=>{if(a(o)>=0){const o=n++,r=e[o];return t.push(r),t}return t.push(o),t}),[])}(e,o,c).join("");r(n,t,s)}return e.forEach((e=>{if(a(e)>=0){const r=o.length,a=Fo(e),c={updateCount:0,isAttr:!0,element:n,attrName:t,withinOwnerElement:!0,tagJsVar:a,valueIndex:o.length,parentContext:i,destroy$:new Tt};a.processUpdate=function(t,e,n,o){++e.updateCount,l(o)};const u=s[r];c.value=u,o.push(c)}})),l(s),o}function So(t,e,n,o,r,s,a,i,c,l){const u=Fo(e),d={updateCount:0,isAttr:!0,element:n,attrName:t,howToSet:s,value:e,withinOwnerElement:!0,tagJsVar:u,destroy$:new Tt,valueIndex:c,parentContext:r};return o.push(d),u.processUpdate=ko,function(t,e,n,o,r,s,a,i){if(n.element=o,n.howToSet=r,typeof e===T.function)return Jo(n,e,s,t,o);if(n.attrName=t,n.isSpecial=a,e?.tagJsType)return function(t,e,n,o,r){e.processInitAttribute(t,e,r,e,n,o,Mt),n.tagJsVar=e}(t,e,n,s,o);Io(t,e,o,r,a,n)}(t,e,d,n,s,a,i),d.value=e,d}function To(t){return at(t)&&"tagJsVar"in t?t.tagJsVar:-1}function Bo(t,e,n,o,r,s,a,i,c){const l=To(t);let u=l>=0||void 0===e&&"string"!=typeof t,d=n[l];e?.tagJsType?d=e:t?.tagJsType&&(u=!0,d=t,e=t);const p=d;if(p?.tagJsType)return function(t,e,n,o,r,s,a,i,c){const l=Ce(t,e||[],!0,n);return l.element=i,l.valueIndex=r,l.isAttr=!0,l.isNameOnly=c,l.stateOwner=pt(s),l.supportOwner=s,Tr(l),o.processInitAttribute(a,t,i,o,l,s,Mt),Br(),l.oldTagJsVar=l.tagJsVar,l.tagJsVar=o,l}(e,a,i,p,l,r,t,o,u);if(u){-1===l&&u&&(d=t);const e=Ce(d,a,!0,i);e.valueIndex=l,e.isAttr=!0,e.element=o,e.isNameOnly=!0,e.howToSet=s;return e.tagJsVar.processUpdate=ko,wo(n,d,o,r,s,a,i),e}if(Array.isArray(e))return _o(t,e,o,a,s,n,r.context);const h=To(e);if(h>=0){return So(t,n[h],o,a,i,s,r,c,h)}return Io(t,e,o,s,c,i)}function Vo(t,e,n,o,r,s){if(!1===o){switch(t){case void 0:case!1:case null:return void $.push([jo,[e,n]])}if(st(t))return xo(e,t,s,n);r(e,n,t)}else Lt(n,t,e,o)}function Jo(t,e,n,o,r){e=po(e,n);return t.tagJsVar.processUpdate=ko,xo(r,e,n,o)}function jo(t,e){t.removeAttribute(e)}function Io(t,e,n,o,r,s){return"function"==typeof e?function(t,e,n,o,r){const s=t(),a={tagJsType:"dynamic-attr",hasValueChanged:(e,n,o)=>{const r=t();return i.tagJsVar.hasValueChanged(r,i,o)},processInit:D,processInitAttribute:D,destroy:(t,e)=>{i.tagJsVar.destroy(i,e)},processUpdate:(t,e,n,o)=>{++e.updateCount;const r=t();i.tagJsVar.processUpdate(r,i,n,o),i.value=r}},i={updateCount:0,isAttr:!0,element:o,parentContext:e,value:s,tagJsVar:Fo(s),valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt},c={updateCount:0,isAttr:!0,contexts:[i],element:o,parentContext:e,value:t,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};return i.tagJsVar.processInitAttribute(n,s,o,i.tagJsVar,i,{},r),c}(e,s,t,n,o):r?Lt(t,e,n,r):void o(n,t,e)}function Eo(t,e,n,o,s,a,i){o.destroy=Lo,o.hasValueChanged=$o,o.processUpdate=(e,o,r)=>Ze(e,o,r,n,t,i);const c=r(t);Io(t,e,n,i,c,s),s.tagJsVar=o}function Lo(t){const e=t.element,n=t.attrName;e.removeAttribute(n)}function Po(t){return{tagJsType:"simple",value:t,processInitAttribute:Eo,processInit:Oo,destroy:No,hasValueChanged:Ao,processUpdate:Do}}function Do(t,e,n){return t===e.value?0:jt(e,t,n)}function Oo(t,e,n,o,r){const s=Et(t);o=e.placeholder;const a=e.paint=[G,[o,s,function(t){e.simpleValueElm=t,delete e.paint},"processSimpleValueInit"]];O.push(a)}function No(t){if(!t.simpleValueElm&&t.paint)return void(t.paint[0]=D);const e=t.simpleValueElm;delete t.simpleValueElm,W(e,"deleteSimpleValue")}function $o(t,e){return null==t||t===e.value?0:6}function Ao(t,e){return null!=t&&typeof t===T.object?(No(e),6):(function(t,e){const n=Et(t);if(e.paint)return void(e.paint[1][1]=n);const o=e.simpleValueElm;$.push([R,[n,o]])}(t,e),0)}function Ho(t,e){return it(t)?0:(pe(e),9)}function Mo(t,e,n,o){const r=void 0===t.lastArray;r&&(t.lastArray=[]);const s=t.lastArray;let a=t.placeholder,i=0;const c=[];if(!r){for(let t=0;t<s.length;++t){const n=s[t],o=ue(e,t,s,i);0!==o?2!==o?i+=o:t-=1:c.push(n)}t.lastArray=c}const l=e.length;for(let r=0;r<l;++r){a=Ro(e,r,t.lastArray,n,a,o).placeholder}}function Ro(t,e,n,o,r,s){const a=t[e],i=n[e];if(i)return function(t,e,n,o,r,s,a){const i=n.length>r;if(i)return Pe(t,e,o),e;const c=Yo(t,o,n,s,a);return n.push(c),c}(a,i,n,o,e,r,s);const c=Yo(a,o,n,r,s);return n.push(c),c}function Uo(t){return{tagJsType:"array",value:t,processInitAttribute:D,processInit:zo,processUpdate:Wo,hasValueChanged:Ho,destroy:pe}}function Wo(t,e,n){++e.updateCount;0===Pe(t,e,n)&&Mo(e,t,n)}function zo(t,e,n,o,r){Mo(e,t,n,r)}function Fo(t){const e=t?.tagJsType;return e?t:function(t){if(it(t))return Uo(t);return Po(t)}(t)}function Yo(t,e,n,o,r){const s=document.createTextNode(_),a={updateCount:0,value:t,tagJsVar:Fo(t),withinOwnerElement:!1,placeholder:s,destroy$:new Tt,parentContext:e.context,valueIndex:n.length};return r||(a.placeholder=o),It(t,e,a,r,o),r&&A.push([Y,[r,s]]),a}function Xo(t,e,n,o){return e.hasEmitted=!0,e.contextItem=Yo(t,n,[],o)}function qo(t,e){let n;return t&&(n=e=document.createTextNode(_),A.push([Y,[t,e]])),{appendMarker:n,insertBefore:e}}function Go(t,e,n){const o=Lr(t,e,n);if(!0!==e.hasEmitted){const t=e.value.Observables;if(!t)return;if(!("value"in t[0]))return}if(0===o&&t.callback){Qe(t,e.subContext)}}function Ko(t,e,n,o,r){const s=t.Observables,{appendMarker:a,insertBefore:i}=qo(r,o);let c=function(t,e,o){Xo(t,o,n,i),er(e),c=o.tagJsVar.onOutput=function(t,e,o){const r=o.contextItem;jt(r,t,n),r.tagJsVar.processUpdate(t,r,n,[t]),r.value=t,er(e)}};const l=Qo(s,n,((t,e,n)=>c(t,e,n)),t,e);return l.appendMarker=a,e.subContext=l,t.processUpdate=Go,t.onOutput=c,l}function Qo(t,e,n,o,r){function s(t,e){c.lastValues[e]={value:t,tagJsVar:Fo(t),oldTagJsVar:c.lastValues[e]?.tagJsVar},a(c.lastValues,e)}function a(t,e){const o=c.tagJsVar,s=o?.callback;if(s){Tr(r);const e=o.callback(...t.map((t=>t.value)));return n(e,i,c),void Br()}n(t[e].value,i,c)}let i=!0;const c={lastValues:[],subValueHandler:s,valuesHandler:a,tagJsVar:o,subscriptions:[]};return t.forEach(((t,e)=>{i=!0,c.subscriptions.push(t.subscribe((t=>s(t,e)))),i=!1})),o.onOutput=n,c}function Zo(t){const e=t.subContext;if(!e)return;e.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function tr(t,e){++t.updateCount;const n=t.subContext;return Zo(t),tt(n,e)}function er(t){t||Jt.stateConfig.support||U()}function nr(t,e,n,o,r){Ko({tagJsType:B.subscribe,states:[],Observables:[t]},e,n,o,r)}function or(t){return lt()?Pn((()=>rr(t))):rr(t)}function rr(t){let e=t;const n=new Set,o=t=>{n.forEach((e=>e(t)))};return{tagJsType:B.signal,hasValueChanged:on,processInitAttribute:D,processInit:nr,processUpdate:Go,get value(){return e},set value(t){e!==t&&(e=t,o(t))},destroy:tr,emit:o,subscribe(t){t(e),n.add(t);const o=()=>n.delete(t);return o.unsubscribe=o,o}}}class sr extends Tt{constructor(t){super(t),this.value=t}subscribe(t){const e=super.subscribe(t);return t(this.value,e),e}}class ar extends Tt{constructor(t){super(t),this.value=t,this._value=t,Bt(this)}subscribe(t){const e=super.subscribe(t);return t(this._value,e),e}}const ir=(t,e)=>lr(t,e),cr=t=>t;const lr=(t,e,{init:n,before:o,final:r=cr}={})=>{const s=Pn({pastResult:void 0,values:void 0}),a=s.values;if(void 0===a){if(o&&!o(t))return s.values=t,s.pastResult;const i=(n||e)(t,a);return s.pastResult=r(i),s.values=t,s.pastResult}if(t.every(((t,e)=>t===a[e])))return s.pastResult;if(o&&!o(t))return s.values=t,s.pastResult;const i=e(t,a);return s.pastResult=r(i),a.length=0,a.push(...t),s.pastResult};function ur(t,e){return Object.defineProperty(e,"noInit",{get(){const e=t();return e.setup.init=()=>{},e}}),Object.defineProperty(e,"asSubject",{get(){const e=t(),n=Pn((()=>lt())),o=Pn((()=>new sr(void 0))),r=Pn((()=>({state:Jt.stateConfig.state,states:Jt.stateConfig.states}))),s=(t,s)=>(lr(t,((t,e)=>{const a=lt(),i=s(t,e);if(a!==n){const t=r.state,e=n.context.state.older;gn(t,e.state,r.states,e.states)}o.next(i)}),e.setup),o);return s.setup=e.setup,ur((()=>s),s),s}}),Object.defineProperty(e,"truthy",{get(){const e=t();return e.setup.before=t=>t.every((t=>t)),e}}),e}function dr(t){return lt()?Pn((()=>new Tt(t))):new Tt(t)}function pr(t){return Jt.stateConfig.handlers.statesHandler(t)}function hr(t){const e=or([]),n=or(0),o=or(0);let r=[],s=0;return o.value=n.value,t(((...t)=>(r=t,e.value))),ir(r,(()=>{++s,e.value=r,t((()=>r))})),pr(((r,a)=>{if(s)return t(((...t)=>(a&&1!==a||(e.value=t),e.value))),o.value=n.value,void++n.value;t((()=>e.value))})),++s,e.value}function gr(){return{stateDiff:0,provider:void 0}}ur((()=>function(t){const e=(e,n)=>lr(e,n,t);return e.setup=t,ur((()=>e),e),e}({})),ir),dr._value=t=>{const e=Pn((function(){return{state:Jt.stateConfig.state,states:Jt.stateConfig.states}})),n=lt();return Pn((function(){return new sr(t).pipe((t=>{const o=n.context.state.newer;return gn(o.state,e.state,o.states,e.states),t}))}))},dr.all=function(t){const e=Pn((()=>({state:Jt.stateConfig.state,states:Jt.stateConfig.states}))),n=lt();return Tt.all(t).pipe((t=>{const o=n.context.state.newer;return o&&gn(o.state,e.state,o.states,e.states),t}))};const fr={create:t=>{const e=Pn(gr);if(e.stateDiff){let t=e.stateDiff;for(;t--;)Pn(void 0);return Pn(void 0)}const n=Pn((()=>{const n=Jt.stateConfig,o=n.state.length,r=t.prototype?new t:t(),s=n.support,a=n.state.length-o,i={constructMethod:t,instance:r,stateDiff:a,owner:s,children:[]};e.provider=i;const c=s.context.global;return(c.providers=c.providers||[]).push(i),e.stateDiff=a,r})),o=t,r=o.compareTo=o.toString();return e.provider.constructMethod.compareTo=r,n},inject:function(t){return Pn((function(){const e=t,n=e.compareTo=e.compareTo||t.toString(),o=lt(),r=[];let s={ownerSupport:o.ownerSupport};for(;s.ownerSupport;){const t=s.ownerSupport.context.global.providers;if(!t){s=s.ownerSupport;continue}const e=t.find((t=>{r.push(t);if(t.constructMethod.compareTo===n)return!0}));if(e){const t=o.context.global;return(t.providers=t.providers||[]).push(e),e.children.push(o),e.instance}s=s.ownerSupport}const a=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${a}. Available providers`,r),new Error(a)}))}};class br extends Error{constructor(t,e,n={}){super(t),this.name=br.name,this.details={...n,errorCode:e}}}class mr extends br{constructor(t,e){super(t,"sync-callback-error",e),this.name=mr.name}}function yr(t,e,n,...o){const r=n(...o),s=dt(t);return s&&(s.context.global?co(s):t.tagJsVar.processUpdate(t.value,t,s,[]),rt(r)&&r.finally((()=>{t.global?co(s):t.tagJsVar.processUpdate(t.value,t,s,[])}))),r}function xr(t){const e=_r(),n=Pn({callback:t}),o=Pn((()=>vr(e,Jt.stateConfig,n)));return n.callback=t,o}function vr(t,e,n){const o=e.states;return function(...e){return yr(t,o,n.callback,...e)}}const wr=()=>{const t=_r();if(!t)throw Cr;const e=Jt.stateConfig;return function(n){return vr(t,e,{callback:n})}},Cr=new mr("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function kr(t){const e=["push","pop","splice","shift","unshift"],n=["map","reduce","forEach","every"],o=new Proxy(t,{get(r,s){return isNaN(s)?"length"===s?t.value.length:e.includes(s)?o[a=s]=(...e)=>{const n=t.value[a](...e);return t.emit(t.value),n}:n.includes(s)?t.value[s].bind(t.value):t[s]:t.value[s];var a},set:(e,n,o)=>isNaN(n)?"length"===n?(t.value.length=o,t.emit(t.value),!0):(t[n]=o,!0):(t.value[n]=o,t.emit(t.value),!0)});return o}function _r(){return Jt.stateConfig.context}function Sr(){return _r().element}function Tr(t){return Jt.stateConfig.context=t}function Br(){delete Jt.stateConfig.context}function Vr(t,e,n,o){const r=n[e];if(r.deleted)return;const s=t[r.valueIndex],a=r.tagJsVar;Tr(r),a.processUpdate(s,r,o,t),Br(),r.value=s}function Jr(t,e){const n=t.context.contexts;!function(t,e){const n=e.templater,o=e.templater.tag,r=n.values||o.values,s=t.templater.tag;s.values=r}(t,e),++M.locks,function(t,e){const n=t.templater.tag.values;let o=0;const r=n.length;for(;o<r;)Vr(n,o,e,t),++o}(t,n),--M.locks,U()}function jr(t,e,n){if(nt(e))return void 0===t.global&&ct(t),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,function(t,e,n){if(!e.state.newest)return void t.processInit(t,e,n,e.placeholder);const o=Ue(t,n,n.appSupport,e);eo(n,o,e)}(e,t,n),!0;if(t.global){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e;const o=t.state.newest;if(o)return typeof e===T.function||function(t,e,n,o){let r=n.templater||n;const s=t.templater.tag;s&&s._innerHTML&&(r=n.outerHTML||n._innerHTML.outerHTML);const a=Ue(r,o,o.appSupport,e);Jr(t.context.state.oldest,a)}(o,t,e,n),!0}return e.processInit(e,t,n,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,!0}function Ir(t,e,n,o){const r=t&&t.tagJsType;if(r){if(r===B.renderOnce)return;jr(e,t,n)}else{if(it(t))return Mo(e,t,n),e.oldTagJsVar=e.tagJsVar,void(e.tagJsVar=Uo(t));typeof t!==T.function?o&&function(t,e){e.value=t,e.oldTagJsVar=e.tagJsVar,e.tagJsVar=Po(t);const n=e.placeholder,o=Et(t),r=e.paint=[G,[n,o,function(t){e.simpleValueElm=t,delete e.paint},"processNowRegularValue"]];O.push(r)}(t,e):e.value=t}}function Er(t,e,n,o){if(!e||!e.tagJsType||e.tagJsType!==t){return o.tagJsVar.destroy(o,n),Ir(e,o,n,99),99}}function Lr(t,e,n){const o=e.subContext,r=Er(B.subscribe,t,n,e);return r||(o&&o.hasEmitted?(o.tagJsVar=t,o.valuesHandler(o.lastValues,0),0):0)}function Pr(t,e,n,o,r){const s=t;let a=s.templater;if(a||(a=je(s)),ct(e),r)return Ee(a,e,n,r,o);return(e.state=e.state||{}).newest=Ie(a,n,e),Je(n,e)}function Dr(t,e,n,o,r){Pr(t.outerHTML,e,n,o,r);e.tagJsVar.processUpdate=function(t,e,n){jt(e,t?.outerHTML||t,n)},t.hasValueChanged=Or}function Or(t,e){return we(t,e)}function Nr(t,e){const n={values:e,ownerSupport:lt(),tagJsType:B.tag,processInitAttribute:D,processInit:Pr,processUpdate:Pe,hasValueChanged:we,destroy:ve,strings:t,key:t=>$r(t,n),setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Dr,n},acceptInnerHTML:function(t){return t.owner=n,n},html:function(t,e){return n.children={strings:t,values:e},n}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}function $r(t,e){return $r(t,e),e.arrayValue=t,e}function Ar(t,...e){const n=Nr(t,e),o=De(zn.NONE);return o.tag=n,n.templater=o,n}Ar.dom=function(t,...e){return function(t,e){const n={values:e,ownerSupport:lt(),dom:t,tagJsType:B.dom,processInitAttribute:D,processInit:Pr,processUpdate:Pe,hasValueChanged:we,destroy:ve,key:function(t){return n.arrayValue=t,n},setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Dr,n},acceptInnerHTML:function(t){return t.owner=n,n},html:{dom:function(t,e){return n.children={dom:t,values:e},n}}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}(t,e)};function Hr(t,e,n,o,r,s){const a=t.context;a.state.oldest=t,a.state.newest=t,a.state.older=a.state.newer;const i=t.templater.tag;if(!["dom","html"].includes(i.tagJsType)){a.contexts=[];const e=document.createDocumentFragment();return e.appendChild(s),Bn(t.templater,a,t),e}const c=Ve(t,e,void 0);let l=o.setUse;if(o.tagJsType!==B.stateRender){const t=r.original;l=t.setUse,t.isApp=!0}return e.setUse=l,e.ValueTypes=B,Wr.push({element:e,support:t}),function(t,e){const n=document.createDocumentFragment();n.appendChild(t);for(const t of e.dom)Mr(t,n);return n}(s,c)}function Mr(t,e){t.domElement&&e.appendChild(t.domElement),t.marker&&e.appendChild(t.marker)}function Rr(t,e,n){const o=re(t,e);return se(t,o,o),o.appElement=n,e.state.oldest||(e.state.oldest=o,e.state.older=e.state.newer),e.state.newest=o,o}function Ur(t,e,n,o,r,s,a){const i=document.createTextNode(_);Oe.push(n.wrapper||{original:n}),s.placeholder=i;const c=function(t,e,n,o,r){o.placeholder=e;const s=o.state.oldest,a=o.state.newest,i=a===s,c=Ue(t,a,a.appSupport,o);if(!i){yt(c,a,o.state.older.state)}if(t.tagJsType===B.stateRender)return function(t,e,n,o,r){const s=t.wrapper||{original:t};if(!e){const e=Rr(t,o,r);return ze(e),e}return Re(t,s,n),ze(n),n}(t,r,c,o,n);const l=t.wrapper,u=l(c,o);return ze(c),u}(n,i,r,s,a);if(e.isApp=!0,a&&(o.tag=c.templater.tag),!r)throw new Error(`Cannot tagElement, element received is type ${typeof r} and not type Element`);r.destroy=function(){const t=s.events;for(const e in t){const n=t[e];r.removeEventListener(e,n)}s.events={},++M.locks;const n=me(c,e);return--M.locks,U(),n},++M.locks;const l=Hr(c,r,0,n,t,i);return--M.locks,U(),r.appendChild(l),{support:c,tags:Oe,ValueTypes:B}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const Wr=[];function zr(t,e,n){const o=Wr.findIndex((t=>t.element===e));if(o>=0){const t=Wr[o].support;me(t,t.context.global),Wr.splice(o,1),console.warn("Found and destroyed app element already rendered to element",{element:e})}let r=()=>c(n);r.propWatch=zn.NONE,r.tagJsType=B.stateRender,r.processUpdate=Pe,r.props=[n],r.isApp=!0;const s=function(t,e){const n={tagJsType:"templater",hasValueChanged:we,destroy:ve,processInitAttribute:D,processInit:function(){console.debug("do nothing app function")},processUpdate:Pe},o={updateCount:0,value:t,valueIndex:0,destroy$:new Tt,withinOwnerElement:!1,renderCount:0,global:void 0,state:{},tagJsVar:n};return ct(o),o.events={},Rr(t,o,e),o}(r,e),a=s.global,i=s.state.newest;bt(i.context),ut(i);let c=t(n);const l=typeof c==T.function;return l||(nt(c)?(s.state.newest.propsConfig={latest:[n],castProps:[n]},r.propWatch=c.propWatch,r.tagJsType=c.tagJsType,r.wrapper=c.wrapper,r=c):(r.tag=c,c=t)),Ur(t,a,r,c,e,s,l)}function Fr(t,e,n){function o(t){return o.toCallback(t)}return o.toCallback=n,t.listeners.push([e,o]),t.allListeners.push([e,o]),t}function Yr(t,e){return t.attributes.push(e),Gr(e[0])?qr(e[0],t):Gr(e[1])&&qr(e[1],t),t}function Xr(t){function e(e){return function(n){return function(t,e,n){return Fr(ls(t,t.elementFunctions),e,n)}(t,e,n)}}const n={onClick:e("click"),onChange:e("onchange"),onKeyup:e("onkeyup"),attr:(...e)=>function(t,e){const n=ls(t,t.elementFunctions);return n.attributes.push(e),Gr(e[0])?qr(e[0],n):Gr(e[1])&&qr(e[1],n),n}(t,e),key:function(t){return this.arrayValue=t,this}};return n}function qr(t,e){e.contexts||(e.contexts=[]),e.contexts.push(t)}function Gr(t){return Array.isArray(t)||st(t)||t?.tagJsType}function Kr(t,e){return(n,o)=>Yr(n,[t,o,!1,e])}function Qr(t){return(e,n)=>Fr(e,t,n)}const Zr={checked:Kr("checked",Rt),selected:Kr("selected",Rt),class:Kr("class",(function(t,e,n){at(n)?Object.entries(n).forEach((([e,n])=>{n?t.classList.add(e):t.classList.remove(e)})):Ut(t,e,n)})),onClick:Qr("click"),onChange:Qr("onchange"),onKeyup:Qr("onkeyup")};function ts(t,e,n,o,r,s){t.forEach((t=>{const a=typeof t;switch(a){case"string":case"boolean":case"number":return ns(t,r,s)}if(null==t)return ns(t,r,s);if("element"!==t.tagJsType)return"function"===a?function(t,e,n,o,r,s){const a=[],i={updateCount:0,parentContext:n,contexts:a,value:t,htmlDomMeta:[],tagJsVar:{tagJsType:"dynamic-text",hasValueChanged:()=>0,processInit:D,processInitAttribute:D,destroy:(t,e)=>{++i.updateCount,a.forEach((t=>t.tagJsVar.destroy(t,e)))},processUpdate:(t,e,n,o)=>{++i.updateCount;const r=t(c),s=c.tagJsVar.processUpdate(r,c,n,o);return c.value=r,e.value=t,s}},valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};r.push(i);const c=es(t(),n,i.contexts,e,o,s);return c}(t,r,e,n,o,s):es(t,e,o,r,n,s);{const a=os(t,e,n,o);O.push([s,[r,a]]);e.htmlDomMeta.push({nn:a.tagName,domElement:a,at:[]})}}))}function es(t,e,n,o,r,s){const a=Fo(t),i={updateCount:0,value:t,parentContext:e,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};return n.push(i),i.placeholder=document.createTextNode(""),O.push([s,[o,i.placeholder]]),a.processInit(t,i,r,i.placeholder),i}function ns(t,e,n){const o=Et(t),r=document.createTextNode(o);return O.push([n,[e,r]]),r}function os(t,e,n,o){const s=document.createElement(t.tagName);return e.element=s,t.attributes.forEach((t=>{const e=t[0];"string"==typeof e&&(t[2]=r(e))})),_e(t.attributes,[],s,n,e,o),ts(t.innerHTML,e,n,o,s,Y),t.listeners.forEach(((e,o)=>{yo(n.appSupport,e[0],s,((...e)=>{const r=t.listeners[o][1],s=pt(n),a=s.context.updateCount,i=r(...e);return a===s.context.updateCount&&In([s]),rt(i)?i.then((()=>(In([s.context.state.newest]),"promise-no-data-ever"))):"no-data-ever"}))})),s}function rs(t,e){++t.updateCount;const n=t.contexts,o=[];if(n.length&&(ss(n,e,o),o.length))return Promise.all(o).then((()=>{++M.locks,be(t),t.htmlDomMeta=[],--M.locks,U()}));be(t),t.htmlDomMeta=[]}function ss(t,e,n){const o=t[0],r=o.tagJsVar.destroy(o,e);return rt(r)?n.push(r.then((()=>{if(t.length>1)return ss(t.slice(1,t.length),e,n)}))):(o.htmlDomMeta&&(be(o),delete o.htmlDomMeta),t.length>1?ss(t.slice(1,t.length),e,n):void 0)}function as(t,e,n){++e.updateCount;if(is(t,e))return rs(e,n),void Ir(t,e,n,789);if(e.updatesHandler){(0,e.updatesHandler)(t.props)}const o=e.contexts,r=t.contexts||[],s=e.tagJsVar.allListeners;t.allListeners.forEach(((t,e)=>{s[e][1].toCallback=t[1].toCallback})),o.forEach(((t,e)=>{t.tagJsVar.processUpdate(r[e],t,n)}))}function is(t,e){if(e.value===t)return 0;return!t||"element"!==t.tagJsType?1:0}function cs(t){const e=ls({tagJsType:"element",processInitAttribute:D,processInit:us,destroy:rs,processUpdate:as,hasValueChanged:is,tagName:t,innerHTML:[],attributes:[],listeners:[],allListeners:[],elementFunctions:Xr},Xr);return e.tagName=t,e}function ls(t,e){const n=(...t)=>{const e={...n};var o,r;return e.attributes=[...n.attributes],e.listeners=[...n.listeners],e.allListeners=[...n.allListeners],t.length>0&&"object"==typeof t[0]&&!Array.isArray(t[0])&&!t[0].tagJsType&&(o=e,r=t[0],Object.entries(r).reduce(((t,[e,n])=>e in Zr?Zr[e](o,n):Yr(o,[e,n,!1,Mt])),o),t.splice(0,1)),e.innerHTML=t,t.forEach((t=>{if(Gr(t)){if("element"===t.tagJsType)return e.allListeners.push(...t.allListeners),void(t.contexts&&(e.contexts?e.contexts.push(...t.contexts):e.contexts=t.contexts));n=t,(o=e).contexts||(o.contexts=[]),o.contexts.push(n)}var n,o})),e};return Object.assign(n,t),Object.assign(n,Xr(n)),n.attributes=[...t.attributes],n.listeners=[...t.listeners],n.allListeners=[...t.allListeners],n}function us(t,e,n,o){e.contexts=[],e.htmlDomMeta=[];const r=os(t,e,n,e.contexts);O.push([F,[o,r,"designElement.processInit"]]);const s={nn:t.tagName,domElement:r,at:t.attributes};return e.htmlDomMeta=[s],r}const ds=function(){const t=ls({tagJsType:"element",processInitAttribute:D,processInit:ps,destroy:hs,processUpdate:as,hasValueChanged:is,tagName:"no-element",innerHTML:[],attributes:[],listeners:[],allListeners:[],elementFunctions:Xr});return t.tagName="no-element",t}();function ps(t,e,n,o){e.contexts=[],e.htmlDomMeta=[],ts(t.innerHTML,e,n,e.contexts,o,F)}function hs(t,e){++t.updateCount;const n=t.contexts,o=[];if(n.length&&(ss(n,e,o),o.length))return Promise.all(o).then((()=>{++M.locks,be(t),t.htmlDomMeta=[],--M.locks,U()}))}const gs=cs("button"),fs=cs("select"),bs=cs("option"),ms=cs("input"),ys=(cs("html"),cs("head"),cs("title"),cs("meta"),cs("link"),cs("body"),cs("noscript"),cs("hr")),xs=cs("h1"),vs=cs("h2"),ws=cs("h3"),Cs=(cs("h4"),cs("h5"),cs("h6"),cs("ol")),ks=cs("li"),_s=cs("div"),Ss=cs("fieldset"),Ts=cs("legend"),Bs=(cs("table"),cs("tr"),cs("td"),cs("th"),cs("p")),Vs=cs("a"),Js=cs("span"),js=cs("strong"),Is=cs("small"),Es=cs("label"),Ls=cs("sup"),Ps={tagElement:zr,renderWithSupport:so,renderSupport:co,firstTagRender:qe,reRenderTag:Xe,paint:U},Ds=()=>window.location.hash.substring(1)||"/",Os=t=>{const e=()=>t(Ds());return window.addEventListener("hashchange",e),e},Ns=()=>{const t=Pn((()=>({route:Ds(),location:window.location}))),e=xr((e=>t.route=Ds())),n=Pn((()=>Os(e)));return $n((()=>window.removeEventListener("hashchange",n))),t},$s=()=>{const t={route:Ds(),location:window.location},e=xr((e=>{t.route=Ds(),o.next(t)})),n=Os(e);$n((()=>window.removeEventListener("hashchange",n)));const o=new sr(t);return o};const As=()=>rn($s(),(t=>{const e=function(t){const e=t.route,n=t.location.pathname;return n&&"counters/"===e?"counters":n&&"content/"===e?"content":n.endsWith("isolated.html")?"isolated":n.includes("todo/www")?"todo":"home"}(t);return _s(Vs({"style.opacity":t=>"home"===e?".5":"1",href:t=>"home"===e?void 0:"#/"},"home")," - ",Vs({"style.opacity":t=>"isolated"===e?".5":"1",href:t=>"isolated"===e?void 0:"isolated.html"},"isolated")," - ",Vs({"style.opacity":t=>"counters"===e?".5":"1",href:t=>"counters"===e?void 0:"#counters/"},"counters")," - ",Vs({"style.opacity":t=>"content"===e?".5":"1",href:t=>"content"===e?void 0:"#content/"},"content")," - ",Vs({"style.opacity":t=>"todo"===e?".5":"1",href:t=>"todo"===e?void 0:"todo/www/"},"todo app")," - ",Vs({href:"https://github.com/AckerApple/taggedjs",target:"_blank"},"repo"))}));const Hs=Fn((({label:t,memory:e})=>{let n=!1,o=!1;return pr((t=>[{mouseOverEditShow:n,edit:o}]=t({mouseOverEditShow:n,edit:o}))),Ar.dom(Ms.allStrings140407[0],(()=>n=!0),(()=>n=!1),t,e.counter,n||"false",(()=>++e.counter),o||n?"visible":"hidden",(()=>o=!o))})),Ms={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Rs=Fn((({renderCount:t,name:e})=>(Rs.updates((n=>[{renderCount:t,name:e}]=n)),_s(Is(`(${e} render count`,Js({id:`${e}_render_count`},(e=>t)),")"))))),Us=Date.now(),Ws=Fn((()=>_s("hello complex world"))),zs=Fn.immutableProps((({appCounterSubject:t},e="countersDebug")=>_s("\x3c!--counters--\x3e",Ws(),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},_s("👉 Subscription count:",Js({id:"👉-counter-sub-count"},rn(Tt.globalSubCount$))),gs({onClick:()=>console.info("subs",Tt.globalSubs)},"log subs"),_s(gs({id:"counters-app-counter-subject-button",onClick:()=>t.next((t.value||0)+1)},"🍒 ++app subject"),Js("🍒 ",Js({id:"app-counters-display"},rn(t))),Js("🍒 ",Js({id:"app-counters-subject-display"},t.value)))),Gs()))),Fs=Fn.deepPropWatch((({propCounter:t,increasePropCounter:e})=>(n=0,o=0,r=0,s=++o)=>(Fs.updates((n=>{[{propCounter:t,increasePropCounter:e}]=n})),_s(_s.attr(vn.onInit((()=>++r)))({style:"display:flex;flex-wrap:wrap;gap:1em;"},_s({style:"border:1px dashed black;padding:1em;"},"🔥 elmInitCount:",Js({id:"🔥-init-counter"},(t=>r))),_s({style:"border:1px dashed black;padding:1em;"},gs({id:"❤️-inner-counter",onClick:e},"❤️-inner-counter propCounter:",(e=>t)),Js("❤️ ",Js({id:"❤️-inner-display"},(e=>t)))),_s({style:"border:1px dashed black;padding:1em;"},gs({id:"🤿-deep-counter",onClick:()=>++n},"🤿 otherCounter:",(t=>n)),Js("🤿 ",Js({id:"🤿-deep-display"},(t=>n))))),_s("renderCount:",(t=>o)),(t=>Rs({renderCount:o,name:"inner_counters"})))))),Ys=Fn.watchProps((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0;return pr((t=>[{otherCounter:n,renderCount:o}]=t({otherCounter:n,renderCount:o}))),++o,Ar.dom(Ks.allStrings9732807[0],e,t,t,(()=>++n),n,n,o,Rs({renderCount:o,name:"shallow_counters"}))})),Xs=Fn.immutableProps((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0;return pr((t=>[{otherCounter:n,renderCount:o}]=t({otherCounter:n,renderCount:o}))),++o,Ar.dom(Ks.allStrings9732807[1],e,t,t,(()=>++n),n,n,o,Rs({renderCount:o,name:"immutable_counters"}))})),qs=Fn((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0,r="noWatchPropCounters";return pr((t=>[{otherCounter:n,renderCount:o,noWatchPropCounters:r}]=t({otherCounter:n,renderCount:o,noWatchPropCounters:r}))),++o,Ar.dom(Ks.allStrings9732807[2],e,t,t,(()=>++n),n,n,o,Rs({renderCount:o,name:"nowatch_counters"}))})),Gs=Fn((()=>(t=0,e=0,n=0,o=0,r=0,s=0,a=0,i=wr(),c=xr((t=>{t})),l=(()=>{++s}),u={propCounter:s,increasePropCounter:l},d=new Tt(n),p=new Tt(0),h=new Tt,g=new sr("222"),f=(()=>{++n,g.next("333-"+n)}),b=Tt.all([g,d]),m=dr.all([g,d]),y=dr.all([g,d,h]),x={counter:0},v=Date.now())=>(++a,console.info("countersDebug.ts: 👉 i should only ever run once"),d.subscribe(i((t=>{n=t}))),d.subscribe(c),u.propCounter!==s&&(u={propCounter:s,increasePropCounter:l}),++r,_s(_s("initCounter:",(t=>a)),_s("😱 statesRenderCount:",(e=>t),gs({type:"button",onClick:()=>{++t}},"😱 ++statesRenderCount")),_s("😱😱 statesRenderCount2:",(t=>e),gs({type:"button",onClick:()=>{++e}},"😱😱 ++statesRenderCount2")),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},ms({id:"set-main-counter-input",placeholder:"input counter value",onKeyup:t=>n=Number(t.target.value)||0}),_s(gs({id:"❤️-increase-counter",onClick:l},"❤️ propCounter:",(t=>s)),Js("❤️ ",Js({id:"❤️-counter-display"},(t=>s)))),_s(gs({id:"🥦-standalone-counter",onClick:f},"🥦 stand alone counters"),Js("🥦 ",Js({id:"🥦-standalone-display"},(t=>n)))),(t=>n>1&&_s(gs({id:"conditional-counter",onClick:f},"conditional counter:",(t=>n)))),Js("🥦 ",Js({id:"conditional-display"},(t=>n)))),_s(gs({id:"🥦-subject-increase-counter",onClick:()=>d.next(n+1)},"++subject<>"),Js("🥦<",Js({id:"subject-counter-subject-display"},rn(d)),">")),_s(gs({id:"🥦-subject-increase-async-counter",onClick:()=>{setTimeout((()=>{p.next(p.value+1)}),10)}},"🔀 🥦 ++subject<>"),Js("🔀 🥦<",Js({id:"subject-async-counter-subject-display"},rn(p)),">")),Ss(Ts("🪈 pipedSubject 1"),_s(Is(Js({id:"🪈-pipedSubject"},rn(b,(()=>n)))))),Ss(Ts("🪈 pipedSubject 2"),_s(Is(Js({id:"🪈-pipedSubject-2"},rn(m,(()=>n)))))),Ss(Ts("🪈 pipedSubject 3"),_s(Is(Js({id:"🪈-pipedSubject-3"},rn(y,(t=>"hello world")))))),Ss(Ts("shared memory"),_s({class:{bold:!0,"text-blue":!0},style:"display:flex;flex-wrap:wrap;gap:.5em"},(t=>Hs({label:"a-a-😻",memory:x})),(t=>Hs({label:"b-b-😻",memory:x}))),"memory.counter:😻",(t=>x.counter),gs({onClick:()=>++x.counter},"increase 😻")),Ss(Ts("inner counter"),(t=>Fs({propCounter:s,increasePropCounter:l}))),Ss(Ts("shallow props"),(t=>Ys({propCounter:s,increasePropCounter:l}))),Ss(Ts("immutable props"),(t=>Xs(u))),Ss(Ts("nowatch props"),(t=>qs({propCounter:s,increasePropCounter:l}))),_s({style:"font-size:0.8em;opacity:0.8"},"⌚️ page load to display in ",Js.attr(vn.onInit((t=>t.innerText=(Date.now()-Us).toString())))("-"),"ms"),_s({style:"font-size:0.8em;opacity:0.8"},"⌚️ read in ",Js.attr(vn.onInit((t=>t.innerText=(Date.now()-v).toString())))("-"),"ms"),(t=>Rs({renderCount:r,name:"counters"})))))),Ks={allStrings9732807:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},Qs=Fn((({name:t,array:e,included:n,columnNames:o,allColumnNames:r})=>{let s,a=!1,i=!1;const c=Pn([]);pr((t=>[{mouseOverEditShow:a,edit:i,editFormula:s}]=t({mouseOverEditShow:a,edit:i,editFormula:s})));return Ar.dom(ta.allStrings431691[0],(function(){const e=o.indexOf(t);e>=0?o.splice(e,1):o.push(t)}),n&&"checked",t,(()=>a=!0),(()=>a=!1),i||a?"visible":"hidden",(()=>i=!i),n&&o.length!==r.length?Ar.dom(ta.allStrings431691[1],(()=>{o.length=0,o.push(...r)})):Ar.dom(ta.allStrings431691[2],(()=>{o.length=0,o.push(t)})),i&&Ar.dom(ta.allStrings431691[3],s&&Ar.dom(ta.allStrings431691[4],(t=>{return n=s,o=t.target.value,n.stringFormula=o,void(n.value=Zs(o,{array:e}));var n,o}),s.value),c.map((t=>Ar.dom(ta.allStrings431691[5],t.title,(()=>s=t),t.value).key(t))),(()=>{const n=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;c.push({title:"sum",stringFormula:n,value:Zs(n,{array:e})})})))}));function Zs(t,e={}){return function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{isNaN,Math,Number,Date,...e})}const ta={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},ea=Fn((({array:t,showAll:e,showKids:n,toggleColumnDialog:o,columnNames:r,formatChange:s,allowMaximize:a,everySimpleValue:i})=>Ar.dom(na.allStrings122184[0],t.length&&Ar.dom(na.allStrings122184[1],r.map((t=>Ar.dom(na.allStrings122184[2],o&&"pointer",o,t).key(t)))),t.map((t=>Ar.dom(na.allStrings122184[3],r.map((o=>Ar.dom(na.allStrings122184[4],ya({value:t[o],showLevels:0,showAll:e,showKids:e||n,isRootDump:!1,formatChange:s,allowMaximize:a})).key(t[o])))).key(t)))))),na={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},oa=Fn((({array:t,showLevels:e,showAll:n,showKids:o,columnNames:r,formatChange:s,toggleColumnDialog:a,allowMaximize:i,everySimpleValue:c})=>Ar.dom(ra.allStrings152127[0],t.map(((t,o)=>{const l=function(t,e){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,e){if(!e)return t;const n={};return e.forEach((e=>{(t.hasOwnProperty(e)||e in t)&&(n[e]=t[e])})),n}(t,e)}(t,r);return Ar.dom(ra.allStrings152127[1],ya({value:l,showLevels:e,showAll:n,showKids:!0,isRootDump:!1,formatChange:s,onHeaderClick:a,allowMaximize:i,everySimpleValue:c})).key(o)})))));const ra={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},sa=Fn((({showLevels:t,showAll:e,showKids:n,array:o,arrayView:r,formatChange:s,allowMaximize:a,everySimpleValue:i})=>{const c=ir([o,o.length],(()=>o.length?function(t){return t.reduce(((t,e)=>{if(e&&"object"==typeof e){if(Array.isArray(e))return t;Object.keys(e).forEach((e=>{t.includes(e)||t.push(e)}))}return t}),[])}(o):[]));let l;const u=ir([c],(()=>[...c]));let d=!1;const p=Pn((()=>"columnDialog"+performance.now()));pr((t=>[{columnNames:l,showColumnDialog:d}]=t({columnNames:l,showColumnDialog:d}))),ir.noInit([u.length],(()=>{l||(l=u)}));const h=()=>{d=!d;const t=document.getElementById(p);d?t.showModal():t.close()},g="table"===r?ea({showAll:e,showKids:n,array:o,toggleColumnDialog:h,columnNames:l||c,formatChange:s,everySimpleValue:i}):oa({array:o,showLevels:t,showAll:e,showKids:n,formatChange:s,columnNames:l||c,toggleColumnDialog:h,allowMaximize:a,everySimpleValue:i});return Ar.dom(aa.allStrings463171[0],g,p,c.map((t=>{const e=void 0===l||l.includes(t);return Ar.dom(aa.allStrings463171[1],Qs({name:t,array:o,included:e,columnNames:l||u,allColumnNames:c})).key(t)})),h)}));const aa={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},ia=Fn((({key:t,value:e,show:n,showAll:o,showKids:r,showLevels:s,formatChange:a,allowMaximize:i,everySimpleValue:c})=>{let l,u,d=!1;pr((t=>[{showLower:l,arrayView:u,maximize:d}]=t({showLower:l,arrayView:u,maximize:d}))),hr((t=>[r]=t(r))),hr((t=>[o]=t(o))),ir.noInit([n],(([t])=>l=t)),ir.noInit([o],(([t])=>l=t));const p=Pn((()=>"maximize-dump-"+performance.now())),h=()=>{d=!d,d&&document.getElementById(p).showModal()},g=o||l||r||null==l&&s>0,f=n=>Ar.dom(ca.allStrings479370[0],(()=>{if(void 0===l)return o=r=l=!g;o=r=l=!l}),t,"table"===u?"bold":"",(()=>u="table"===u?void 0:"table"),"table"===u?"flex":"table",e.length,n&&Ar.dom(ca.allStrings479370[1],h)),b={showLevels:s,showAll:o,showKids:r,formatChange:a,array:e,arrayView:u,allowMaximize:i,everySimpleValue:c};return Ar.dom(ca.allStrings479370[3],f(i),g&&Ar.dom(ca.allStrings479370[2],sa(b)),p,d&&f(!1),d&&Ar.dom(ca.allStrings479370[4],sa({...b,allowMaximize:!1})),(()=>document.getElementById(p).close()))})),ca={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function la(t){var e=document.createElement("textarea");e.value=t,document.body.appendChild(e),e.select(),e.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(e)}function ua({key:t,value:e,onHeaderClick:n,everySimpleValue:o}){const r=e.search&&("https://"===e.slice(0,8)||"http://"===e.slice(0,7));let s;return s=o?da({value:e,everySimpleValue:o}):r?pa(e):da({value:e}),Ar.dom(ha.allStrings246978[0],t&&Ar.dom(ha.allStrings246978[1],n&&"pointer",n,t),s)}const da=Fn((({value:t,everySimpleValue:e})=>{const n=[void 0,null,"null"].includes(t),o=t,r=!isNaN(o)&&o>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(o):"";let s=0;pr((t=>[s]=t(s)));let a=t;return e&&(a=e(t)),a=(null===a?"null":!1===a&&"false")||void 0===a&&"undefined"||a,Ar.dom(ha.allStrings246978[2],(()=>{s=Date.now()}),(e=>{if(Date.now()-s>300)return e.preventDefault(),e.stopPropagation(),!0;la(t)}),n?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||n&&"white"||"",r,a)}));const pa=t=>Ar.dom(ha.allStrings246978[3],(()=>la(t)),t,t),ha={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},ga=Fn((({key:t,showKids:e,show:n,showLevels:o,value:r,showAll:s,onHeaderClick:a,formatChange:i,allowMaximize:c,everySimpleValue:l})=>{let u,d=!1;const p=Pn((()=>"maximize-dump-"+performance.now()));pr((t=>[{showLower:u,maximize:d}]=t({showLower:u,maximize:d}))),hr((t=>[e]=t(e))),ir.noInit([n],(([t])=>u=t)),ir.noInit([s],(([t])=>u=t));const h=!t||e||u||void 0===u&&o>0,g=()=>{d=!d,d&&document.getElementById(p).showModal()},f=n=>Ar.dom(fa.allStrings470244[0],u?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===u)return s=e=u=!(s||e||u);e=u=!u}),t,Object.keys(r).length,n&&Ar.dom(fa.allStrings470244[1],g)),b=t=>Ar.dom(fa.allStrings470244[2],Object.entries(r).map((([n,r])=>Ar.dom(fa.allStrings470244[3],r&&"object"==typeof r?"flex-grow:1;":"flex: 1 1 10em;",ya({value:r,key:n,show:u,showAll:s,showLevels:o-1,showKids:s||e,isRootDump:!1,formatChange:i,onHeaderClick:a,allowMaximize:t,everySimpleValue:l})).key(n))));return Ar.dom(fa.allStrings470244[4],t&&f(c),h&&b(c),p,d&&f(!1),d&&b(!1),(()=>document.getElementById(p).close()))})),fa={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},ba=Fn((({value:t,format:e,showAll:n,formatChange:o,showAllChange:r})=>Ar.dom(ma.allStrings440833[0],!e||"flex"===e&&Ar.dom(ma.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n?"background-color:#33cd5f;":"background-color:#444444"),(()=>r(n=!n))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e&&"flex"!==e?"background-color:#444444":"background-color:#33cd5f;"),(()=>o(e="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===e?"background-color:#33cd5f;":"background-color:#444444"),(()=>o(e="json")),(()=>function(t){const e=JSON.stringify(t,null,2);la(e)}(t)))));const ma={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},ya=Fn((({key:t,value:e,showKids:n=!1,showLevels:o=-1,showAll:r=!1,format:s="flex",formatChange:a=(t=>s=t),isRootDump:i=!0,onHeaderClick:c,allowMaximize:l,everySimpleValue:u})=>{i&&void 0===l&&(l=!0);const d=null===e?"null":typeof e;let p,h=!1;return hr((t=>[s]=t(s))),hr((t=>[r]=t(r))),hr((t=>[o]=t(o))),pr((t=>[{show:h,arrayView:p}]=t({show:h,arrayView:p}))),Dn((()=>{(o=o>=0&&o||(-1===o&&!t&&e&&e instanceof Object?2:0))>0&&(h=!0)})),[null,void 0].includes(e)?ua({key:t,value:d,onHeaderClick:c,everySimpleValue:u}):["boolean","number","string"].includes(d)?ua({key:t,value:e,onHeaderClick:c,everySimpleValue:u}):va({value:e,showKids:n,key:t,onHeaderClick:c,everySimpleValue:u,format:s,isRootDump:i,showAll:r,showAllChange:t=>r=t,formatChange:a,show:h,showLevels:o,allowMaximize:l})}));let xa=0;const va=({value:t,showKids:e,key:n,onHeaderClick:o,everySimpleValue:r,format:s,isRootDump:a,showAll:i,showAllChange:c,formatChange:l,show:u,showLevels:d,allowMaximize:p})=>{if(null===t)return e?ua({key:n,value:"null",onHeaderClick:o,everySimpleValue:r}):Ar.dom(wa.allStrings306188[0]);const h=Array.isArray(t);return Ar.dom(wa.allStrings306188[2],"taggedjs-dump-"+ ++xa,a&&ba({value:t,format:s,showAll:i,showAllChange:c,formatChange:l}),"json"===s&&Ar.dom(wa.allStrings306188[1],JSON.stringify(t,null,2))||(h?ia({key:n,value:t,show:u,showAll:i,showKids:e,showLevels:d,formatChange:l,allowMaximize:p,everySimpleValue:r}):ga({key:n,show:u,showKids:e,showLevels:d,value:t,showAll:i,formatChange:l,onHeaderClick:o,allowMaximize:p,everySimpleValue:r})))},wa={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]},Ca=Fn((()=>{let t="",e=0,n="",o=!1;pr((r=>[{userJsonString:t,renderCount:e,userJson:n,badEval:o}]=r({userJsonString:t,renderCount:e,userJson:n,badEval:o}))),++e;const r=Pn((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return Ar.dom(ka.allStrings183632[0],(e=>{t=e.target.value;try{n=function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{}),t=JSON.stringify(n,null,2)}catch(e){o=!0;try{JSON.parse(t)}catch(t){n=Object.getOwnPropertyNames(t).reduce(((e,n)=>(e[n]=t[n])&&e||e),{})}}}),""===n?"":t,""===n?"":Ar.dom(ka.allStrings183632[1],ya({value:n})),ya(r),Rs({renderCount:e,name:"dumpContent"}))}));const ka={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};function _a({fxIn:t,fxOut:e,outPositionAbsolute:n=!0}){return{in:(e,n)=>Sa({fxName:t,...e},n),out:(t,o)=>Ta({fxName:e,outPositionAbsolute:n,...t},o)}}const Sa=async({target:t,fxName:e="fadeInUp"},n)=>(t.style.opacity="0",n&&await Va(n),t.style.opacity="1",Ba(e,t)),Ta=async({target:t,outPositionAbsolute:e=!0,fxName:n="fadeOutUp"},o)=>(e&&function(t){t.style.zIndex=t.style.zIndex||1;const e=t.offsetTop+"px",n=t.offsetLeft+"px",o=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",r=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=e,t.style.left=n,t.style.width=o,t.style.height=r,t.style.position="absolute"}),0)}(t),o&&await Va(o),Ba(n,t));function Ba(t,e){let n;const o=new Promise((function(t){n=t}));return e.classList.add("animate__animated","animate__"+t),e.addEventListener("animationend",(function o(r){r.target===e&&(e.classList.remove("animate__animated","animate__"+t),e.removeEventListener("animationend",o),n(void 0))})),o}function Va(t){return new Promise((e=>{setTimeout(e,t)}))}const{in:Ja,out:ja}=_a({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:Ia,out:Ea}=_a({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:La,out:Pa}=_a({fxIn:"fadeIn",fxOut:"fadeOut"}),Da=({fxIn:t,fxOut:e,stagger:n,inName:o="fadeInUp",outName:r="fadeOutDown",duration:s=".2s",outPositionAbsolute:a=!1}={})=>{const i=Oa((t=>(t.style.setProperty("--animate-duration",s),i.fxIn({target:t},n))),(t=>{t.style.setProperty("--animate-duration",s);const e=i.fxOut({target:t},n);return e}),t,e,o,r,a);return i.host};function Oa(t,e,n,o,r,s,a){if(!n||!o){const t=_a({fxIn:r,fxOut:s,outPositionAbsolute:a});n||(n=t.in),o||(o=t.out)}return{fxIn:n,fxOut:o,host:vn((()=>{}),{onInit:t,onDestroy:e})}}const Na=Fn((t=>{Na.updates((e=>[t]=e));let e=1,n="white";return _s(_s({id:"dynamic-border-element",style:t=>`border-width:${e}px;border-color:${n};border-style:solid;`},t),_s("borderWidth:",ms({id:"dynamic-border-width",type:"range",min:"0",max:"10",step:"1",value:t=>e,onChange:t=>e=Number(t.target.value)})," - ",(t=>e),"px"),_s("borderColor:",fs({id:"dynamic-border-color",onChange:t=>n=t.target.value},bs({value:"",selected:t=>""===n}),bs({value:"black",selected:t=>"black"===n},"black"),bs({value:"blue",selected:t=>"blue"===n},"blue"),bs({value:"white",selected:t=>"white"===n},"white"))))})),$a=Fn((()=>{const t=Pn((()=>new sr(0)));let e=0,n=!0,o=!1,r=0,s=20,a=!1;const i=Pn((()=>new Tt({added:0,removed:0})));pr((t=>[{renderCount:e,orangeToggle:n,boldToggle:o,counter:r,showHideFx:a,staggerBy:s}]=t({renderCount:e,orangeToggle:n,boldToggle:o,counter:r,showHideFx:a,staggerBy:s}))),++e;const c=rn(t,(()=>ds(gs({type:"button",onClick:()=>{++r}},"increase inside ",(t=>r)),gs({type:"button",onClick:()=>t.next(t.value+1)},"increase vs0"))));return Ar.dom(Ma.allStrings643067[1],r,c,(()=>++r),r,(()=>a=!a),a&&Ar.dom(Ma.allStrings643067[2],Da({duration:"10ms"})),a&&Ar.dom(Ma.allStrings643067[3],Da({duration:"10ms",stagger:s})),a&&Ar.dom(Ma.allStrings643067[4],Da({duration:"10ms",stagger:2*s})),a&&(((t=10)=>{const e=cn();return Ar.dom(Ma.allStrings643067[0],Da({stagger:t,duration:".1s"}),e).acceptInnerHTML(e)})(s).innerHTML=Ha()),rn(i,(t=>t.added)),rn(i,(t=>t.removed)),(t=>s=Number(t.target.value)),Na(Ar.dom(Ma.allStrings643067[5])),Ca(),Rs({renderCount:e,name:"content"}),Aa(),Aa(),_s({style:"display:flex;flex-wrap:wrap;gap:1em;"},Ss(Ts("injection test"),_s({id:"injection-test"},"injection test ",'<script>alert("i should never run but be seen on page")<\/script>'),_s({id:"hello-big-dom-world"},"hello ",Ar.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}])," world"),_s({id:"hello-big-string-world"},"hello ",Ar.dom(Ma.allStrings643067[6])," world")),Ss(Ts("tagvar injection"),_s(_s({id:"inject-tagvar-0"},":tagvar0:"),"===",_s({id:"inject-read-tagvar-0"},":tagvar0:"),_s({id:"inject-tagvar-1"},":tagvarx0x:"),"===",_s({id:"inject-read-tagvar-1"},":tagvarx0x:"),_s({id:"inject-tagvar-2"},":tagvar0:"),"===",_s({id:"inject-read-tagvar-2"},":tagvar0:"))),_s({id:"style-simple-border-orange","style.border":"3px solid orange"},"simple orange border"),_s({id:"style-var-border-orange","style.border":"3px solid orange"},"var orange border"),_s(_s({id:"style-toggle-border-orange","style.border":t=>n?"3px solid orange":"3px solid green"},"toggle orange border"),gs({id:"toggle-border-orange",onClick:()=>n=!n},"orange toggle ",(t=>n))),_s(_s({id:"style-toggle-bold",style:t=>o?"font-weight:bold;":""},"toggle orange border"),gs({id:"toggle-bold",onClick:()=>o=!o},"bold toggle ",o?"true":"false")),_s({id:"hello-spacing-dom-world"},54," hello"," worlds")),0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",Rs({renderCount:e,name:"content"}))})),Aa=Fn((()=>ds(ys,"content1",ys,"test0",ys,"content2",ys,"test1",ys,"content3",ys,"test3",ys,"content4",ys))),Ha=Fn((()=>Ar.dom(Ma.allStrings643067[7]))),Ma={allStrings643067:[[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:16},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"text",v:17},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:18},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:19},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:20},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:21},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:22},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:23},{nn:"text",tc:"22"},{nn:"text",v:24},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:25},{nn:"text",tc:"__tagVar0"},{nn:"text",v:26},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:27},{nn:"text",tc:'"'}]}]}]},{nn:"text",v:28},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"text",tc:"inner html tag"}]]};let Ra=0;const Ua=Fn((()=>{const t=new ar(0);++Ra;const e=Tt.all([0,"all",4]);if(Ra>1)throw new Error("issue started!");return ds(rn(e.pipe((t=>JSON.stringify(t)))),_s(Js("👍",Js({id:"👍-counter-display"},rn(t,(t=>t)))),gs({type:"button",id:"👍-counter-button",onClick:()=>{++t.value}},"++👍")),(t=>Rs({renderCount:1,name:"oneRender_tag_ts"})),ys,Ss(Ts("insideMultiRender"),(t=>Wa())))})),Wa=Fn((()=>(t=dr(0),e=or(0),n=0,o=0,r=pr((t=>[{renderCount:o,counter:n}]=t({renderCount:o,counter:n}))))=>(++o,Ar.dom(za.allStrings2277686[0],rn(t),e,n,(()=>{++n,t.next(n),e.value=n}),Rs({renderCount:o,name:"insideMultiRender"}))))),za={allStrings2277686:[[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var Fa=n(995);let Ya=null;function Xa(t=!0,e,o){null!==Ya&&(clearTimeout(Ya),console.debug("🏃 Cleared previous testing to start again..."));Ya=setTimeout((async()=>{e=e||Ga.views,console.debug("🏃 Prepare test suites...");const r=await async function(t,e=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let o=0;e&&(await Promise.resolve().then(n.bind(n,451)),++o),t.includes(qa.Content)&&(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835)),++o),t.includes(qa.Subscriptions)&&(await Promise.resolve().then(n.bind(n,528)),++o),t.includes(qa.Counters)&&(await Promise.resolve().then(n.bind(n,428)),++o),t.includes(qa.Props)&&(await Promise.resolve().then(n.bind(n,749)),++o),t.includes(qa.ProviderDebug)&&(await Promise.resolve().then(n.bind(n,186)),await Promise.resolve().then(n.bind(n,488)),++o),t.includes(qa.TagSwitchDebug)&&(await Promise.resolve().then(n.bind(n,168)),++o),t.includes(qa.Child)&&(await Promise.resolve().then(n.bind(n,527)),++o),t.includes(qa.Arrays)&&(await Promise.resolve().then(n.bind(n,842)),++o),t.includes(qa.Mirroring)&&(await Promise.resolve().then(n.bind(n,774)),++o),t.includes(qa.WatchTesting)&&(await Promise.resolve().then(n.bind(n,702)),++o),t.includes(qa.FunInPropsTag)&&(await Promise.resolve().then(n.bind(n,157)),++o),t.includes(qa.AttributeDebug)&&(await Promise.resolve().then(n.bind(n,178)),++o),t.includes(qa.OneRender)&&(await Promise.resolve().then(n.bind(n,994)),++o),t.includes(qa.Todo)&&(await Promise.resolve().then(n.bind(n,337)),++o),t.includes(qa.Destroys)&&(await Promise.resolve().then(n.bind(n,236)),++o),t.includes(qa.Basic)&&(await Promise.resolve().then(n.bind(n,566)),++o),console.debug(`🏃 Running ${o} test suites...`);try{const t=Date.now(),e=await(0,Fa.executeBrowserTests)(),n=Date.now()-t;return console.info(`✅ tests completed in ${n}ms`),e}catch(t){return console.error("❌ tests failed:",t),!1}}(e,o);t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var qa;!function(t){t.Basic="basic",t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug",t.Subscriptions="subscriptions"}(qa||(qa={}));const Ga=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(qa)});return JSON.parse(t)}();function Ka(){localStorage.taggedjs=JSON.stringify(Ga)}const Qa=Object.values(qa),Za=Fn(((t=Qa)=>{const e=[...t].sort(((t,e)=>t.localeCompare(e))).map((t=>({type:t,meta:zl.find((e=>e.view===t))})));return _s(ws("᭟ Sections"),_s({style:"display:flex;gap:1em;flex-wrap:wrap;margin:1em;"},(t=>e.map((({meta:t,type:e})=>_s({style:"flex:0 0 auto;min-width:150px;white-space:nowrap;"},ms({name:t=>"view-type-"+e,type:"checkbox",id:t=>"view-type-"+e,checked:t=>Ga.views.includes(e),onClick:()=>function(t,e=!0){Ga.views.includes(t)?ei(t):ti.next({type:t,checkTesting:e});Ka()}(e)}),(e=>t?.emoji?t.emoji+" ":null),Es({for:t=>"view-type-"+e}," ",(t=>e))," ",Vs({href:t=>`isolated.html#${e}`,style:"font-size:.6em;text-decoration:none;"},"🔗")," ",Vs({href:t=>`#${e}`,style:"font-size:.6em;"},"↗️")).key(e)))),(e=>t.length>1&&[_s(Es({onClick:()=>t.forEach((t=>{ni(t,!1),Ka()}))}," all")),_s(Es({onClick:()=>t.forEach((t=>{ei(t),Ka()}))}," none"))])))}));const ti=new Tt;function ei(t){Ga.views=Ga.views.filter((e=>e!==t))}function ni(t,e=!0){Ga.views.push(t),e&&Ga.autoTest&&Xa()}const oi=Fn(((t,e)=>_s({style:"border:1px solid black;"},(e=>t),gs({type:"button",onClick:()=>e(t)},"delete")))),ri=Fn(((t,e,n)=>(o="other",r=0,s=0,a=pr((t=>[{other:o,counter:r,renderCount:s}]=t({other:o,counter:r,renderCount:s}))),i=++s,{addArrayItem:c,myFunction:l,deleteItem:u,child:d,array:p}=t)=>Ar.dom(si.allStrings598669[0],e.function.original?"taggjedjs-wrapped":"nowrap",e.count,d.myChildFunction.original?"taggjedjs-wrapped":"nowrap",l.original?"taggjedjs-wrapped":"nowrap",l,function(t){if(!t)return D;const e=lt();if(!e)throw new Error("output must be used in render sync fashion");return(...n)=>{const o=e.ownerSupport;return xn(n,t,o.context)}}(d.myChildFunction),n,ii.function,(()=>++r),p.length,p.map((t=>oi(t,u).key(t))),c,r,Rs({renderCount:s,name:"funInProps_tag_child"})))),si={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},ai=Fn((t=>(e=0,n=++e,o=(e=>{if("Enter"===e.key){const n=e.target.value.trim();t(n),e.target.value=""}}))=>[ms({type:"text",onKeyup:o,onChange:e=>{t(e.target.value),e.target.value=""}}),gs({type:"button",onClick:t},"add by outside"),t=>Rs({renderCount:e,name:"addArrayComponent"})])),ii={function:()=>++ii.count,count:0},ci=Fn((()=>(t=[],e=0,n=0,o=!0,r="a",s=(()=>++e),a=++n,i=(e=>{t=t.map((t=>t)),t.push("string"==typeof e?e:"push"+t.length)}),c=(e=>t=t.filter((t=>t!==e))))=>_s(gs({id:"fun-parent-button",onClick:s},"🤰 ++parent"),Js({id:"fun_in_prop_display"},(t=>e)),(t=>Rs({renderCount:n,name:"funInProps_tag_parent"})),_s(js("🆎 main:"),Js({id:"main_wrap_state"},(t=>ii.function.original?"taggjedjs-wrapped":"nowrap")),":",(t=>ii.count)),gs({id:"toggle-fun-in-child",type:"button",onClick:()=>o=!o},"toggle child"),"array length: ",t.length,gs({onClick:i},"reset add"),ys(),(e=>o&&ri({myFunction:s,array:t,addArrayItem:i,deleteItem:c,child:{myChildFunction:s}},ii,s)),(t=>ai(i))))),li=Fn.immutableProps(((t,e,n)=>(o=!1,r=pr((t=>[o]=t(o))))=>Ar.dom(di.allStrings349976[0],t.completed,o,o?Ar.dom(di.allStrings349976[2],t.title,(()=>o=!1),(r=>ui(r,(r=>{!function(t,e,n,o){if(0===t.length)return void o.removeItem(e.id);o.updateToByIndex(e,{title:t},n)}(r,t,n,e),o=!1})))):Ar.dom(di.allStrings349976[1],t.completed&&"✅",(o=>e.toggleItem(t,n)),t.completed&&"checked",(()=>e.toggleItem(t,n)),(()=>o=!o),t.title,(()=>e.removeItemByIndex(n))))));function ui(t,e){if("Enter"===t.key){return e(t.target.value.trim()),!0}}const di={allStrings349976:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🗑️ destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},pi={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},hi=Fn.immutableProps(((t,e,n,o)=>Ar.dom(gi.allStrings77156[0],o,o>1&&"s","/"===n,"/active"===n,"/completed"===n,t-o>0&&Ar.dom(gi.allStrings77156[1],(()=>e()))))),gi={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const fi=[],bi=function(t){function e(e,n,o){return t[o]={...e,...n},t}return{addItem:function(e){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})),title:e,completed:!1}),t},removeItem:function(e){return t.filter((t=>t.id!==e))},toggleItem:function(t,n){return e(t,{completed:!t.completed},n)},removeAll:function(){return t=[]},toggleAll:function(e){for(let n=t.length-1;n>=0;--n)t[n]={...t[n],completed:e};return t},removeCompleted:function(){for(let e=t.length-1;e>=0;--e)t[e].completed&&t.splice(e,1);return t},removeItemByIndex:function(e){return t.splice(e,1),t},completeItem:function(t,n){return e(t,{completed:!0},n)},updateItemByIndex:function(e,n){return t[n]={...e},t},updateToByIndex:e}}(fi),mi=()=>{const t=Ns().route,e=fi.filter((t=>!t.completed)).length,n="/completed"===t,o="/active"===t&&fi.filter((t=>!t.completed))||n&&fi.filter((t=>t.completed))||fi,r=fi.length,s=o.map(((t,e)=>li(t,bi,e).key(t.id)));return Ar.dom(yi.allStrings143180[0],!1,(t=>Fn.renderOnce=()=>Ar.dom(pi.allStrings47860[0],(e=>{const n=ui(e,(e=>t.addItem(e)));n&&(e.target.value="")})))(bi),r>0&&Ar.dom(yi.allStrings143180[1],e<1?1:0,(t=>bi.toggleAll(t.target.checked)),s,hi(r,bi.removeCompleted,t,e)))},yi={allStrings143180:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},xi=Fn(((t,e,n)=>{let o=0;return xi.updates((o=>[t,e,n]=o)),Ss({id:"innerHtmlTests-1"},Ts("no props test"),_s({style:"border:2px solid purple;"},(t=>n)),_s((t=>`isSubjectInstance:${ot(n)}`)),_s((t=>`isSubjectTagArray:${n instanceof Array}`)),gs({id:"innerHtmlTest-counter-button",onClick:()=>++o},(t=>`increase innerHtmlTest ${o}`)),Js({id:"innerHtmlTest-counter-display"},(t=>o)),(t=>Rs({renderCount:1,name:"innerHtmlTest"})))})),vi=Fn(((t,e)=>(n=0,o=0,r=pr((t=>[{counter:n,renderCount:o}]=t({counter:n,renderCount:o}))),s=++o)=>Ar.dom(wi.allStrings127090[0],t,e,(()=>++n),n,n,!1))),wi={allStrings127090:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},Ci=Fn(((t,e,n)=>(Ci.updates((o=>[t,e,n]=o)),Ss(Ts("xxxxx"),_s("hello other world",(e=>t)," - ",(t=>e)),_s({style:"border:2px solid red;"},"***",(t=>n),"***"))))),ki=Fn(((t="childTests")=>(t=0,e=0,n=pr((n=>[{renderCount:t,counter:e}]=n({renderCount:t,counter:e}))),o=++t)=>Ar.dom(Si.allStrings801974[1],Ci(1,2,Ar.dom(Si.allStrings801974[2],Date.now())),xi({},2,Ar.dom(Si.allStrings801974[3],(()=>++e),e,t,e,Rs({renderCount:t,name:"childTests-innerHtmlTest"}))),(()=>{const t=cn();return Ar.dom(Si.allStrings801974[0],11,t,22).acceptInnerHTML(t)})().innerHTML=Ar.dom(Si.allStrings801974[4],(()=>++e),e,t,e,Rs({renderCount:t,name:"childTests-innerHtmlTest-c"})),vi(22,Ar.dom(Si.allStrings801974[5],(()=>++e),e,e,Rs({renderCount:t,name:"innerHtmlPropsTest child"}))),_i({child:Ar.dom(Si.allStrings801974[6],(()=>++e),e,e)}),(()=>++e),e,t,e,Rs({renderCount:t,name:"childTests"})))),_i=Fn((({child:t})=>(_i.updates((e=>[{child:t}]=e)),Ss(Ts("child as prop"),(e=>t))))),Si={allStrings801974:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}]]};let Ti=or(0);const Bi=Fn((()=>(t=!0,e=0,n=++e)=>_s("destroyCount: ",Js({id:"destroyCount"},(t=>Ti)),"on/off: ",(e=>t),(e=>t&&Vi()),gs({id:"toggle-destroys",type:"button",onClick:()=>{t=!t}},(e=>t?"destroy":"restore")),(()=>Rs({renderCount:e,name:"destroys"}))))),Vi=Fn((()=>(t=$n((()=>++Ti.value)))=>_s.attr(vn.onDestroy((()=>{++Ti.value})))({id:"destroyable-content",style:"border:1px solid orange;"},"will be destroyed"))),Ji=Fn((({score:t,playerIndex:e})=>{let n=0;return pr((t=>[n]=t(n))),++n,Ar.dom(ji.allStrings67878[0],t.frame,`score-data-${e}-${t.frame}-inside-button`,(()=>++t.score),t.score,`score-data-${e}-${t.frame}-inside-display`,t.score,(()=>++n),Rs({renderCount:n,name:"scoreData"+t.frame}))})),ji={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},Ii=Fn((()=>{const t=[];let e=0;const n=function(t=[]){return lt()?Pn((()=>kr(rr(t)))):kr(rr(t))}(["d","e","f"]),o=["a","b","c"],r=(({stagger:t=100,fxIn:e,fxOut:n,duration:o="2s",inName:r="fadeInUp",outName:s="fadeOutDown",outPositionAbsolute:a=!1}={})=>{let i=0;const c=Oa((function(e){e.style.setProperty("--animate-duration",o);const n=t*i++;return c.fxIn({target:e},n).then((()=>{--i}))}),(function(e){e.style.setProperty("--animate-duration",o);const n=t*i++;return c.fxOut({target:e},n).then((()=>{--i}))}),e,n,r,s,a);return c.host})({stagger:10,duration:".1s"}),s=()=>({name:"Person "+t.length,scores:"0,".repeat(0).split(",").map(((t,e)=>({frame:e+1,score:Math.floor(4*Math.random())+1})))}),a=e=>{const n=t[e];t.splice(e,1),n.edit=!n.edit};function i(t){for(let e=0;e<t;++e)n[n.length]=n.length.toString()}return _s(Js("count display:",Js({id:"arrays-counter-display"},(t=>e))),Ss(Ts("signal array test ",Ls({id:"signal-array-count"},(t=>n.length))),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},rn(n,(t=>t.map(((t,o)=>_s({attr:r,id:t=>`signal-array-item-${o}`,style:"border:1px solid black;border-radius:.2em"},"index:",(t=>o)," counter:",Js({id:t=>`signal-array-item-counter-display-${o}`},(t=>e))," content:",(e=>t)," length:",(t=>n.length),gs({id:`signal-array-item-delete-btn-${o}`,onClick:()=>{n.splice(o,1)}},"🗑️ delete subscribe"),gs({type:"button",onClick:()=>++e},"++counter ",(t=>e))).key(t))))),_s(gs({type:"button",id:"signal-array-increase-counter",onClick:()=>++e},"++counter ",(t=>e)),gs({type:"button",id:"push-signal-array-btn",onClick:()=>i(1)},"add number"),gs({type:"button",onClick:()=>i(10)},"add 10 number"),gs({type:"button",onClick:()=>{setTimeout((()=>{n[n.length]=n.length.toString()}),1e3)}},"add number by delay"),gs({type:"button",onClick:()=>{setTimeout((()=>{n.length=0}),1e3)}},"delay clear array")))),Ss({style:"display:flex;flex-wrap:wrap;gap:1em"},Ts("simple array test - length:",(t=>o.length)),(t=>o.map(((t,n)=>_s("counter:",(t=>e)," index:",(t=>n)," x:",(e=>t)," length:",(t=>o.length),gs({onClick:()=>{o.splice(n,1)}},"🗑️ delete simple")).key(t)))),_s(gs({type:"button",onClick:()=>++e},"++counter ",(t=>e)),gs({type:"button",onClick:()=>o[o.length]=o.length.toString()},"add number"))),Ss(Ts("game with players"),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},_s("players count:",(e=>t.length)),(e=>t.map(((e,n)=>Ei(e,n,t,s,a).key(e.name))))),gs({id:"array-test-push-item",onClick:()=>{t.push(s())}},"push item ",t.length+1),gs({onClick:()=>{t.push(s()),t.push(s()),t.push(s())}},"push 3 items"),gs({onClick:()=>{t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s())}},"push 9 items"),(e=>t.length>0&&gs({attr:Da({duration:".1s"}),onClick:()=>t.length=0},"remove all"))),(t=>Rs({renderCount:1,name:"arrayTests.ts"})))})),Ei=Fn(((t,e,n,o,r)=>(Ei.updates((s=>{[t,e,n,o,r]=s})),_s({style:"background-color:black;",attr:Da({duration:".1s"})},_s((e=>`name:${t.name}`)),_s((t=>`index:${e}`)),_s({style:"background-color:purple;padding:.5em"},"scores:",(e=>t.scores.map(((t,e)=>Li(e,t).key(t))))),(n=>t.edit&&gs({onClick:()=>{r(e)}},"remove")),(n=>t.edit&&gs({id:t=>`player-remove-promise-btn-${e}`,onClick:async()=>(t.edit=!t.edit,r(e),"player-remove-promise-btn-xx")},"remove by promise")),gs({id:t=>`player-edit-btn-${e}`,onClick:()=>t.edit=!t.edit},"edit"),gs({onClick:()=>{n.splice(e,0,o())}},"add before"))))),Li=Fn(((t,e)=>_s({class:"animate__slow",attr:Da({duration:".1s"})},Ss(Ts(gs({id:n=>`score-data-${t}-${e.frame}-outside-button`,onClick:()=>++e.score},(t=>`outer score button ++${e.score}`)),Js({id:n=>`score-data-${t}-${e.frame}-outside-display`},(t=>e.score))),(n=>Ji({score:e,playerIndex:t})))))),Pi=Fn(((t="tagSwitchDebug")=>{let e=null;return _s(_s({id:"selectTag-wrap"},"selectedTag: |",Js({id:"selectTag-display"},(()=>(null===e?"null":void 0===e&&"undefined")||""===e&&"empty-string"||e)),"|"),fs({id:"tag-switch-dropdown",onChange:function(t){e=t.target.value,"undefined"===e&&(e=void 0),"null"===e&&(e=null)}},bs(),bs({value:"",selected:()=>"string"!=typeof e||e.length?{}:{selected:!0}},"empty-string"),bs({value:"undefined",selected:()=>void 0===e?{selected:!0}:{}},"undefined"),bs({value:"null",selected:()=>null===e},"null"),bs({value:"1",selected:()=>"1"===e},"tag 1"),bs({value:"2",selected:()=>"2"===e},"tag 2"),bs({value:"3",selected:()=>"3"===e},"tag 3")),_s({id:"switch-tests-wrap",style:"display:flex;flex-wrap:wrap;gap:1em;"},_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 1 - string | Tag"),_s((()=>{switch(e){case null:return"null, select tag below";case"":return _s({id:"empty-string-1"});case"1":return Oi({title:"value switch"});case"2":return Ni({title:"value switch"});case"3":return $i({title:"value switch"})}return"select tag below"}))),_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 2 - Tag"),_s((()=>{switch(e){case null:return _s({id:"select-tag-above"},"null, select tag above");case"":return _s({id:"select-tag-above"},"empty-string, select tag above");case"1":return Oi({title:"tag switch"});case"2":return Ni({title:"tag switch"});case"3":return $i({title:"tag switch"})}return _s({id:"select-tag-above"},"select tag above")}))),_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 3 - ternary (only 1 or 3 shows)"),_s((()=>"3"===e?$i({title:"ternary simple"}):Oi({title:"ternary simple"})))),_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 3.2 - ternary via prop (only 1 or 3 shows)"),_s((()=>Di({selectedTag:e})))),_s({id:"arraySwitching-test-wrap",style:"border:1px solid red;flex-grow:1"},ws("Test 4 - arraySwitching"),_s({id:"arraySwitching-wrap"},(()=>Ai({selectedTag:e}))))),(()=>Rs({renderCount:1,name:"tagSwitchDebug"})))})),Di=Fn((({selectedTag:t})=>(Di.inputs((e=>[{selectedTag:t}]=e)),_s({id:"ternaryPropTest-wrap"},(()=>`${t}:`),(e=>"3"===t?$i({title:"ternaryPropTest"}):Oi({title:"ternaryPropTest"})))))),Oi=Fn((({title:t})=>{let e=0;return Oi.inputs((e=>[{title:t}]=e)),_s({id:"tag1",style:"border:1px solid orange;"},_s({id:"tagSwitch-1-hello"},(()=>`Hello 1 ${t} World`)),gs({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Rs({renderCount:1,name:"tag1"})))})),Ni=Fn((({title:t})=>{let e=0;return _s({id:"tag2",style:"border:1px solid orange;"},_s({id:"tagSwitch-2-hello"},(()=>`Hello 2 ${t} World`)),gs({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Rs({renderCount:1,name:"tag1"})))})),$i=Fn((({title:t})=>{let e=0;return $i.inputs((e=>[{title:t}]=e)),_s({id:"tag3",style:"border:1px solid orange;"},_s({id:"tagSwitch-3-hello"},(()=>`Hello 3 ${t} World`)),gs({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Rs({renderCount:1,name:"tag1"})))})),Ai=({selectedTag:t})=>{switch(t){case void 0:return"its an undefined value";case null:return"its a null value";case"":return"space";case"1":return Oi({title:`tag ${t}`});case"2":return["b","c"].map((e=>Ni({title:`array ${t} ${e}`}).key(e)));case"3":return["d","e","f"].map((e=>$i({title:`array ${t} ${e}`}).key(e)))}return"nothing to show for in arrays"},Hi=Fn((()=>{const t=Mi();return Ar.dom(Ri.allStrings156734[0],t,t)})),Mi=()=>{let t=0;return pr((e=>[t]=e(t))),Ar.dom(Ri.allStrings156734[1],t,(()=>++t),t)},Ri={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},Ui=(t,e)=>Fn.use=(n=Pn("statePropDebug.tag.ts"),o=!1,r=0,s=pr((t=>[{edit:o,renderCount:r}]=t({edit:o,renderCount:r}))),a=++r)=>Ar.dom(Wi.allStrings53929[0],t,(()=>o=!o),o,e,Rs({renderCount:r,name:"statePropDebug-tag"})),Wi={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},zi=Fn(((t="propsDebugMain")=>(t=0,e=0,n=0,o={test:33,x:"y"},r=Pn((()=>new Date)),s=JSON.stringify(o,null,2),a=!0,i=pr((s=>[{syncPropNumber:t,propNumber:e,renderCount:n,propsJson:o,date:r,statePropDisplay:a}]=s({syncPropNumber:t,propNumber:e,renderCount:n,propsJson:o,date:r,statePropDisplay:a}))))=>Ar.dom(Gi.allStrings3198315[0],(t=>o=JSON.parse(t.target.value)),s,s,++n,(()=>++e),e,e,Xi({propNumber:e,propsJson:o,propNumberChange:t=>{e=t}}),t,(()=>++t),Rs({renderCount:n,name:"sync_props_callback"}),Yi({syncPropNumber:t,propNumberChange:e=>t=e,parentTest:t=>t}),a&&Ui(e,Ar.dom(Gi.allStrings3198315[1])),(()=>a=!a),r,function(t){const e=new Date(t),n=e.getFullYear(),o=String(e.getMonth()+1).padStart(2,"0"),r=String(e.getDate()).padStart(2,"0"),s=String(e.getHours()).padStart(2,"0"),a=String(e.getMinutes()).padStart(2,"0");return{date:`${n}-${o}-${r}`,time:`${s}:${a}`}}(r).date,(t=>{const e=t.target.value;r=new Date(e)}),Fi({date:r})))),Fi=Fn((({date:t})=>Ar.dom(Gi.allStrings3198315[2],t))),Yi=Fn((({syncPropNumber:t,propNumberChange:e,parentTest:n})=>(o=Pn("syncPropDebug"),r=0,s=0,a=pr((t=>[{counter:r,renderCount:s}]=t({counter:r,renderCount:s}))))=>(++s,t%2==1&&e(t+=1),Ar.dom(Gi.allStrings3198315[3],t,(()=>e(++t)),r,n(r),(()=>{n(++r)}),Rs({renderCount:s,name:"child_sync_props_callback"}))))),Xi=Fn((({propNumber:t,propsJson:e,propNumberChange:n})=>(o=Pn("propsDebug"),r=0,s=0,a=hr((e=>[t]=e(t))),i=t,c=pr((t=>[{renderCount:r,propNumberChangeCount:s,myPropNumber:i}]=t({renderCount:r,propNumberChangeCount:s,myPropNumber:i}))),l=ir([t],(()=>i=t)),u=ir([i],(()=>++s)))=>Ar.dom(Gi.allStrings3198315[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(u,null,2),(()=>n(++i)),i,i,(()=>++t),t,t,(()=>++r),++r,(()=>++i),i,s,qi({propNumber:i,callback:()=>++i})))),qi=Fn.immutableProps((({propNumber:t,callback:e})=>(n=Pn("propFnUpdateTest"),o=0,r=pr((t=>[o]=t(o))))=>(++o,Ar.dom(Gi.allStrings3198315[5],e,t,t,Rs({renderCount:o,name:"propFnUpdateTest"})))));const Gi={allStrings3198315:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},Ki=Fn((t=>Ar.dom(Qi.allStrings248805[0],(()=>t.showDialog=!1),t.showDialog?Ar.dom(Qi.allStrings248805[1],JSON.stringify(t,null,2)):"no dialog"))),Qi={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]},Zi=vn(((t,e)=>({selected:t,targets:Pn([])}))),tc=vn((t=>{const e=Fn.inject(Zi);Fn.onInit((()=>e.targets.push(t))).onDestroy((()=>{const n=e.targets.findIndex((e=>e===t));-1!==n&&e.targets.splice(n,1)})).element.onclick((()=>{const n=e.selected.findIndex((e=>e===t));-1!==n?e.selected.splice(n,1):e.selected.push(t)}))})),ec=Fn((()=>{const t=Pn((()=>[0,1,2,3,4,5,6,7,8,9].map((t=>({id:t}))))),e=Pn([]),n=Zi(e,(t=>{e.length=0,e.push(...t)}));return Ar.dom(nc.allStrings171524[0],e.length,n,t.map((t=>Ar.dom(nc.allStrings171524[1],`injection-test-item-${t.id}`,tc(t),e.includes(t)?"#4CAF50":"#2196F3",e.includes(t)?"3px solid #333":"1px solid #999",{checked:!!e.includes(t)},t.id))),e.length>0?e.map((t=>t.id)).join(", "):"No items selected. Click to select items.")})),nc={allStrings171524:[[{nn:"div",at:[["style","padding: 20px;"]],ch:[{nn:"h2",ch:[{nn:"text",tc:"Injection Test"}]},{nn:"text",tc:"selected: "},{nn:"text",v:0},{nn:"div",at:[["style","\n          border: 2px solid #666;\n          gap:1em;\n          background: #f0f0f0;\n          padding: 20px;\n          min-height: 300px;\n          position: relative;\n          user-select: none;\n          display:flex;flex-wrap:wrap;\n        "],["id","injection-testing-wrap-host"],[{tagJsVar:1}]],ch:[{nn:"text",v:2}]},{nn:"div",at:[["style","margin-top: 20px; padding: 10px; background: #333; color: white;"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Selected Items:"}]},{nn:"p",ch:[{nn:"text",v:3}]}]},{nn:"div",at:[["style","margin-top: 10px; color: #666;"]],ch:[{nn:"small",ch:[{nn:"strong",ch:[{nn:"text",tc:"Instructions:"}]},{nn:"br"},{nn:"text",tc:"- Click to select/deselect items"},{nn:"br"},{nn:"text",tc:"- Click on empty space to deselect all"},{nn:"br"},{nn:"text",tc:"- Selected items will be highlighted in green"}]}]}]}],[{nn:"div",at:[["style","\n              display: inline-block;\n              color: black;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: bold;\n              cursor: pointer;\n              transition: background 0.3s;\n              "],["id",{tagJsVar:0},null],[{tagJsVar:1}],["style.background",{tagJsVar:2},"style"],["style.border",{tagJsVar:3},"style"]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:4}]]},{nn:"text",tc:"Item "},{nn:"text",v:5}]}]]};class oc{constructor(){this.tagDebug=0,this.showDialog=!1}}const rc=()=>({counter:0});function sc(){return{upper:fr.create(ac),test:0}}function ac(){return Pn("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const ic=Fn(((t="providerDebugBase")=>{fr.create(rc);const e=fr.create(oc),n=fr.create(sc);let o=0,r=0;return pr((t=>[{propCounter:o,renderCount:r}]=t({propCounter:o,renderCount:r}))),e.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++r,Ar.dom(bc.allStrings6857929[0],n.test,n.upper?.test||"?",e.tagDebug||"?",(()=>++n.test),n.test,n.test,(()=>++n.upper.test),n.upper.test,n.upper.test,(()=>++e.tagDebug),e.tagDebug,e.tagDebug,(()=>++o),o,o,(()=>e.showDialog=!0),e.showDialog,cc({propCounter:o,propCounterChange:t=>{o=t}}),r,Rs({renderCount:r,name:"providerDebugBase"}),Ki(e),fc())})),cc=Fn((({propCounter:t,propCounterChange:e,_:n="providerDebug.js@child"})=>{const o=fr.inject(rc),r=fr.inject(sc),s=fr.inject(oc),a=fr.inject(ac);let i=!1,c=0;pr((t=>[{showProProps:i,renderCount:c}]=t({showProProps:i,renderCount:c})));const l=wr(),u=Pn((()=>new Tt));return Dn((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),u.subscribe((t=>{l((e=>{r.test=t}))()}))})),++c,Ar.dom(bc.allStrings6857929[4],(()=>++r.test),r.test,r.test,(()=>++a.test),a.test,a.test,(()=>++o.counter),o.counter,o.counter,(()=>u.next(r.test+1)),r.test,(()=>++s.tagDebug),s.tagDebug,s.tagDebug,(()=>e(++t)),t,t,(()=>s.showDialog=!0),s.showDialog,(()=>i=!i),i?"hide":"show",i&&Ar.dom(bc.allStrings6857929[5],Da(),lc(s)),c,Rs({renderCount:c,name:"providerDebugInner"}))})),lc=Fn((t=>Ar.dom(bc.allStrings6857929[6],JSON.stringify(t,null,2)))),uc=vn(((t="red")=>{const e=Fn.element.get();e.style.border="2px solid "+t,e.style.display="flex",e.style.gap="1em";return{color:t,title:"inCycleParent"}})),dc=vn(((t="green")=>{const e=Fn.inject(uc),n=Fn.element.get();n.style.border="2px solid "+t,n.style.flex="1",n.innerHTML=`wonderful - parent(${e.color})`})),pc=vn(((t="green")=>{const e=Fn.element.get();e.style.border="2px solid "+t,e.style.flex="1"})),hc=vn(((t="green")=>{Fn.element.get().style.color=t})),gc=["red","blue","green","purple","orange"],fc=Fn((()=>{let t="red",e="green",n="green",o=!1;return pr((r=>[{cycleColorParent:t,cycleColorChild:e,cycleColorChild2:n,hideShowCycles:o}]=r({cycleColorParent:t,cycleColorChild:e,cycleColorChild2:n,hideShowCycles:o}))),Ar.dom(bc.allStrings6857929[7],!o,(t=>o=!o),!o&&Ar.dom(bc.allStrings6857929[8],(e=>t=e.target.value),gc.map((e=>Ar.dom(bc.allStrings6857929[9],e,t===e,e).key(e))),(t=>e=t.target.value),gc.map((t=>Ar.dom(bc.allStrings6857929[10],t,e===t,t).key(t))),(t=>n=t.target.value),gc.map((t=>Ar.dom(bc.allStrings6857929[11],t,n===t,t).key(t))),ec(),uc(t),dc(e),pc(n),hc(n)))})),bc={allStrings6857929:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}],[{nn:"fieldset",at:[["id","in-cycle-context-comms"]],ch:[{nn:"legend",ch:[{nn:"label",ch:[{nn:"input",at:[["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"text",tc:"In-Cycle Context Communication"}]}]},{nn:"text",v:2}]}],[{nn:"div",at:[["style","margin-bottom: 1em"],["id","fieldset-body-wrap"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:2},null]],ch:[{nn:"text",v:3}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",at:[["id","drag-drop-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Drag Selection Testing"}]},{nn:"text",v:6}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:7}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:8}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",tc:"wonderful too\n            "},{nn:"text",v:9},{nn:"span",ch:[{nn:"text",tc:"part 2"},{nn:"text",v:10}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},mc=Fn((()=>{let t=!0;return pr((e=>[t]=e(t))),Ar.dom(yc.allStrings52782[0],5,5,t&&Ar.dom(yc.allStrings52782[1]),t&&Ar.dom(yc.allStrings52782[2]))})),yc={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]},xc=Fn.deepPropWatch((()=>(t=0,e=0,n=0,o=0,r=!1,s=0,a=0,i=pr((i=>[{stateNum:t,stateNumChangeCount:e,slowChangeCount:n,subjectChangeCount:o,truthChange:r,truthChangeCount:s,truthSubChangeCount:a}]=i({stateNum:t,stateNumChangeCount:e,slowChangeCount:n,subjectChangeCount:o,truthChange:r,truthChangeCount:s,truthSubChangeCount:a}))),c=ir([t],(()=>++e)),l=ir.noInit([t],xr((()=>++n))),u=ir.asSubject([t],xr((()=>++o))),d=ir.truthy([r],xr((()=>++s))),p=ir.truthy.asSubject([r],xr((t=>++a))))=>Ar.dom(vc.allStrings2187613[0],t,(()=>++t),e,n,l,o,rn(u),r?"true":"false",d||"false",s,rn(p),a,(()=>r=!r),r?"true":"false"))),vc={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},wc=Fn((()=>{const t=new Tt,e=new sr("purple"),n=new sr("green");let o=!1;return Ss({style:"flex-grow:1"},Ts("subscribe attributes",(()=>`- shouldHideAttributes: ${o}`)),(()=>o?"":_s({style:"display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em",id:"subscribe-attributes-wrap"},_s({style:"display:flex;flex-wrap:wrap;gap:1em"},Ss({style:"flex-grow:1"},Ts("subscribe special attribute"),Js({id:"subscribe-style-dot-bg-color-changer",style:nn(t,"red",(t=>({backgroundColor:t})))},"background color changer")),Ss({style:"flex-grow:1"},Ts("subscribe style attribute"),Js({id:"subscribe-style-bg-color",style:nn(t,"red",(t=>`background-color:${t}`))},"subscribe bg color")),Ss({style:"flex-grow:1"},Ts("sometimes subscribe style attribute"),Js({id:"multiple-subscribe-bg-color",style:()=>"blue"===t.value&&rn(e,(t=>"background-color:"+t))||"red"===t.value&&rn(n,(t=>"background-color:"+t))||"background-color:pink;"},"multiple subscribe bg color"))))),gs({id:"toggle-color-btn",type:"button",onClick:()=>{const e=t.value;t.next("red"===e?"blue":"red")}},"Toggle Color (",rn(t),")"),gs({id:"toggle-attributes-btn",type:"button",onClick:()=>{o=!o}},(()=>o?"Show":"Hide")," Attributes"),gs({onClick:()=>t.next(""),id:"clear-color-btn",type:"button"},"Clear Color"),"subscriptions: ",Js({id:"subscriptions-count"},nn(Tt.globalSubCount$,Tt.globalSubCount$.value)))})),Cc=Fn((()=>{let t="a",e=!0;return _s(ms({id:"attr-input-abc",placeholder:"a b or c",onChange:e=>t=e.target.value}),fs({onChange:e=>t=e.target.value,id:"select-sample-drop-down"},["a","b","c"].map((e=>bs({value:e,selected:()=>e==t},e," - ",(n=>e==t?"true":"false"))))),fs({onChange:e=>t=e.target.value,id:"select-sample-drop-down-clone"},["a","b","c"].map((e=>bs({value:e,selected:()=>e==t},e," - ",e==t?"true":"false")))),ys,ws("Special Attributes"),_s(ms({type:"checkbox",id:"toggle-backgrounds",checked:()=>e&&"checked",onChange:t=>e=t.target.checked}),(()=>" - toggle backgrounds:"+(e?"true":"false"))),_s({style:"display: flex;flex-wrap:wrap;gap:1em"},Cs(ks(_s({id:"attr-style-strings",style:t=>({backgroundColor:e?"orange":"",color:e?"black":""})},"style.background-color=${'orange'}")),ks(_s({id:"attr-class-booleans",class:()=>({"background-orange":!!e,"text-black":!!e})},(()=>`class.background-orange=${e}`))),ks(_s({id:"attr-inline-class",class:()=>e?"background-orange text-black":""},"class=${'background-orange text-black'}")),ks(_s({id:"attr-dynamic-inline-class",class:()=>"text-white"+(e?" background-orange":"")},"class=${'background-orange'} but always white")))),Ss({style:"margin-top: 1em"},Ts("style object attribute"),_s({id:"style-object-test",style:t=>({backgroundColor:e?"orange":"lightgrey",padding:"10px",border:"2px solid black",borderRadius:e?"8px":"4px",boxShadow:e?"2px 2px 4px rgba(0,0,0,0.3)":"none"})},"Style object test"),_s({id:"style-set-property-test",style:t=>({"background-color":e?"red":"blue",color:"white",padding:"5px","margin-top":"10px"})},"style property test")),(t=>wc()))})),kc=Fn((()=>{let t=0,e=!0;return _s(vs("Basic Component"),Bs((e=>`Counter: ${t}`)),Bs((t=>"Render Count: 1")),gs({onClick:()=>t++},"Increment Counter"),gs({onClick:()=>e=!e},(t=>`Toggle Div (${e?"Hide":"Show"})`)),(n=>e&&_c(t)))})),_c=Fn((t=>{let e=0,n="red";return _c.updates((e=>[t]=e)),_s((()=>`color: ${n}`),fs({onChange:t=>n=t.target.value},bs({value:"red"},"red"),bs({value:"green"},"green")),(()=>Sc(t)),Js({style:t=>"color:"+n},"hello my span world"),_s({style:t=>"color:"+n},"hello my div world"),gs({onClick:()=>++e},"click me"),_s((t=>`click counts ${e}`)),_s((e=>`parent counter: ${t}`)),_s((n=>`combined counters: ${e+t}`)))})),Sc=Fn((t=>{Sc.updates((e=>[t]=e));let e=0;return[_s("hello array bolt 0"),_s("hello array bolt 1"),_s("innerCounter: ",(t=>e)),_s((()=>`parent counter: ${t}`)),gs({onClick:()=>++e},"inner counter")]}));var Tc=function(t,e){return Tc=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},Tc(t,e)};function Bc(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}Tc(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function Vc(t,e,n,o){return new(n||(n=Promise))((function(r,s){function a(t){try{c(o.next(t))}catch(t){s(t)}}function i(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,i)}c((o=o.apply(t,e||[])).next())}))}function Jc(t,e){var n,o,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(s=0)),s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;function jc(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function Ic(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,s=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(o=s.next()).done;)a.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return a}function Ec(t,e,n){if(n||2===arguments.length)for(var o,r=0,s=e.length;r<s;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))}function Lc(t){return this instanceof Lc?(this.v=t,this):new Lc(t)}function Pc(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(t,e||[]),s=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),a("next"),a("throw"),a("return",(function(t){return function(e){return Promise.resolve(e).then(t,l)}})),o[Symbol.asyncIterator]=function(){return this},o;function a(t,e){r[t]&&(o[t]=function(e){return new Promise((function(n,o){s.push([t,e,n,o])>1||i(t,e)}))},e&&(o[t]=e(o[t])))}function i(t,e){try{(n=r[t](e)).value instanceof Lc?Promise.resolve(n.value.v).then(c,l):u(s[0][2],n)}catch(t){u(s[0][3],t)}var n}function c(t){i("next",t)}function l(t){i("throw",t)}function u(t,e){t(e),s.shift(),s.length&&i(s[0][0],s[0][1])}}function Dc(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=jc(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(o,r){(function(t,e,n,o){Promise.resolve(o).then((function(e){t({value:e,done:n})}),e)})(o,r,(e=t[n](e)).done,e.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function Oc(t){return"function"==typeof t}function Nc(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var $c=Nc((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function Ac(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var Hc=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,o,r;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var a=jc(s),i=a.next();!i.done;i=a.next()){i.value.remove(this)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}else s.remove(this);var c=this.initialTeardown;if(Oc(c))try{c()}catch(t){r=t instanceof $c?t.errors:[t]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var u=jc(l),d=u.next();!d.done;d=u.next()){var p=d.value;try{Uc(p)}catch(t){r=null!=r?r:[],t instanceof $c?r=Ec(Ec([],Ic(r)),Ic(t.errors)):r.push(t)}}}catch(t){n={error:t}}finally{try{d&&!d.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}}if(r)throw new $c(r)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)Uc(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&Ac(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&Ac(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=function(){var e=new t;return e.closed=!0,e}(),t}(),Mc=Hc.EMPTY;function Rc(t){return t instanceof Hc||t&&"closed"in t&&Oc(t.remove)&&Oc(t.add)&&Oc(t.unsubscribe)}function Uc(t){Oc(t)?t():t.unsubscribe()}var Wc={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},zc={setTimeout:function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var r=zc.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,Ec([t,e],Ic(n))):setTimeout.apply(void 0,Ec([t,e],Ic(n)))},clearTimeout:function(t){var e=zc.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function Fc(t){zc.setTimeout((function(){var e=Wc.onUnhandledError;if(!e)throw t;e(t)}))}function Yc(){}var Xc=qc("C",void 0,void 0);function qc(t,e,n){return{kind:t,value:e,error:n}}var Gc=null;function Kc(t){if(Wc.useDeprecatedSynchronousErrorHandling){var e=!Gc;if(e&&(Gc={errorThrown:!1,error:null}),t(),e){var n=Gc,o=n.errorThrown,r=n.error;if(Gc=null,o)throw r}}else t()}var Qc=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,Rc(e)&&e.add(n)):n.destination=sl,n}return Bc(e,t),e.create=function(t,e,n){return new nl(t,e,n)},e.prototype.next=function(t){this.isStopped?rl(function(t){return qc("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?rl(qc("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?rl(Xc,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(Hc),Zc=Function.prototype.bind;function tl(t,e){return Zc.call(t,e)}var el=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){ol(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){ol(t)}else ol(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){ol(t)}},t}(),nl=function(t){function e(e,n,o){var r,s,a=t.call(this)||this;Oc(e)||!e?r={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=o?o:void 0}:a&&Wc.useDeprecatedNextContext?((s=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},r={next:e.next&&tl(e.next,s),error:e.error&&tl(e.error,s),complete:e.complete&&tl(e.complete,s)}):r=e;return a.destination=new el(r),a}return Bc(e,t),e}(Qc);function ol(t){var e;Wc.useDeprecatedSynchronousErrorHandling?(e=t,Wc.useDeprecatedSynchronousErrorHandling&&Gc&&(Gc.errorThrown=!0,Gc.error=e)):Fc(t)}function rl(t,e){var n=Wc.onStoppedNotification;n&&zc.setTimeout((function(){return n(t,e)}))}var sl={closed:!0,next:Yc,error:function(t){throw t},complete:Yc},al="function"==typeof Symbol&&Symbol.observable||"@@observable";function il(t){return t}function cl(t){return 0===t.length?il:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var ll=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var o,r=this,s=(o=t)&&o instanceof Qc||function(t){return t&&Oc(t.next)&&Oc(t.error)&&Oc(t.complete)}(o)&&Rc(o)?t:new nl(t,e,n);return Kc((function(){var t=r,e=t.operator,n=t.source;s.add(e?e.call(s,n):n?r._subscribe(s):r._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=ul(e))((function(e,o){var r=new nl({next:function(e){try{t(e)}catch(t){o(t),r.unsubscribe()}},error:o,complete:e});n.subscribe(r)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[al]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return cl(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=ul(t))((function(t,n){var o;e.subscribe((function(t){return o=t}),(function(t){return n(t)}),(function(){return t(o)}))}))},t.create=function(e){return new t(e)},t}();function ul(t){var e;return null!==(e=null!=t?t:Wc.Promise)&&void 0!==e?e:Promise}var dl=Nc((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),pl=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return Bc(e,t),e.prototype.lift=function(t){var e=new hl(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new dl},e.prototype.next=function(t){var e=this;Kc((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var r=jc(e.currentObservers),s=r.next();!s.done;s=r.next()){s.value.next(t)}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;Kc((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;Kc((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,o=n.hasError,r=n.isStopped,s=n.observers;return o||r?Mc:(this.currentObservers=null,s.push(t),new Hc((function(){e.currentObservers=null,Ac(s,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,o=e.thrownError,r=e.isStopped;n?t.error(o):r&&t.complete()},e.prototype.asObservable=function(){var t=new ll;return t.source=this,t},e.create=function(t,e){return new hl(t,e)},e}(ll),hl=function(t){function e(e,n){var o=t.call(this)||this;return o.destination=e,o.source=n,o}return Bc(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:Mc},e}(pl);function gl(t){return function(e){if(function(t){return Oc(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function fl(t,e,n,o,r){return new bl(t,e,n,o,r)}var bl=function(t){function e(e,n,o,r,s,a){var i=t.call(this,e)||this;return i.onFinalize=s,i.shouldUnsubscribe=a,i._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,i._error=r?function(t){try{r(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,i._complete=o?function(){try{o()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,i}return Bc(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(Qc);var ml=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function yl(t){return Oc(null==t?void 0:t.then)}function xl(t){return Oc(t[al])}function vl(t){return Symbol.asyncIterator&&Oc(null==t?void 0:t[Symbol.asyncIterator])}function wl(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Cl="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function kl(t){return Oc(null==t?void 0:t[Cl])}function _l(t){return Pc(this,arguments,(function(){var e,n,o;return Jc(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,Lc(e.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,Lc(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,Lc(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function Sl(t){return Oc(null==t?void 0:t.getReader)}function Tl(t){if(t instanceof ll)return t;if(null!=t){if(xl(t))return o=t,new ll((function(t){var e=o[al]();if(Oc(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(ml(t))return function(t){return new ll((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}(t);if(yl(t))return n=t,new ll((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,Fc)}));if(vl(t))return Bl(t);if(kl(t))return e=t,new ll((function(t){var n,o;try{for(var r=jc(e),s=r.next();!s.done;s=r.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}t.complete()}));if(Sl(t))return Bl(_l(t))}var e,n,o;throw wl(t)}function Bl(t){return new ll((function(e){(function(t,e){var n,o,r,s;return Vc(this,void 0,void 0,(function(){var a,i;return Jc(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),n=Dc(t),c.label=1;case 1:return[4,n.next()];case 2:if((o=c.sent()).done)return[3,4];if(a=o.value,e.next(a),e.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return i=c.sent(),r={error:i},[3,11];case 6:return c.trys.push([6,,9,10]),o&&!o.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(r)throw r.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(t,e).catch((function(t){return e.error(t)}))}))}function Vl(t,e,n,o,r){void 0===o&&(o=0),void 0===r&&(r=!1);var s=e.schedule((function(){n(),r?t.add(this.schedule(null,o)):this.unsubscribe()}),o);if(t.add(s),!r)return s}function Jl(t,e,n){return void 0===n&&(n=1/0),Oc(e)?Jl((function(n,o){return function(t,e){return gl((function(n,o){var r=0;n.subscribe(fl(o,(function(n){o.next(t.call(e,n,r++))})))}))}((function(t,r){return e(n,t,o,r)}))(Tl(t(n,o)))}),n):("number"==typeof e&&(n=e),gl((function(e,o){return function(t,e,n,o,r,s,a,i){var c=[],l=0,u=0,d=!1,p=function(){!d||c.length||l||e.complete()},h=function(t){return l<o?g(t):c.push(t)},g=function(t){s&&e.next(t),l++;var i=!1;Tl(n(t,u++)).subscribe(fl(e,(function(t){null==r||r(t),s?h(t):e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(var t=function(){var t=c.shift();a?Vl(e,a,(function(){return g(t)})):g(t)};c.length&&l<o;)t();p()}catch(t){e.error(t)}})))};return t.subscribe(fl(e,h,(function(){d=!0,p()}))),function(){null==i||i()}}(e,o,t,n)})))}function jl(){return void 0===(t=1)&&(t=1/0),Jl(il,t);var t}function Il(t){return t[t.length-1]}function El(t){return(e=Il(t))&&Oc(e.schedule)?t.pop():void 0;var e}function Ll(t,e){return void 0===e&&(e=0),gl((function(n,o){n.subscribe(fl(o,(function(n){return Vl(o,t,(function(){return o.next(n)}),e)}),(function(){return Vl(o,t,(function(){return o.complete()}),e)}),(function(n){return Vl(o,t,(function(){return o.error(n)}),e)})))}))}function Pl(t,e){return void 0===e&&(e=0),gl((function(n,o){o.add(t.schedule((function(){return n.subscribe(o)}),e))}))}function Dl(t,e){if(!t)throw new Error("Iterable cannot be null");return new ll((function(n){Vl(n,e,(function(){var o=t[Symbol.asyncIterator]();Vl(n,e,(function(){o.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Ol(t,e){if(null!=t){if(xl(t))return function(t,e){return Tl(t).pipe(Pl(e),Ll(e))}(t,e);if(ml(t))return function(t,e){return new ll((function(n){var o=0;return e.schedule((function(){o===t.length?n.complete():(n.next(t[o++]),n.closed||this.schedule())}))}))}(t,e);if(yl(t))return function(t,e){return Tl(t).pipe(Pl(e),Ll(e))}(t,e);if(vl(t))return Dl(t,e);if(kl(t))return function(t,e){return new ll((function(n){var o;return Vl(n,e,(function(){o=t[Cl](),Vl(n,e,(function(){var t,e,r;try{e=(t=o.next()).value,r=t.done}catch(t){return void n.error(t)}r?n.complete():n.next(e)}),0,!0)})),function(){return Oc(null==o?void 0:o.return)&&o.return()}}))}(t,e);if(Sl(t))return function(t,e){return Dl(_l(t),e)}(t,e)}throw wl(t)}function Nl(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return jl()(function(t,e){return e?Ol(t,e):Tl(t)}(t,El(t)))}function $l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=El(t);return gl((function(e,o){(n?Nl(t,e,n):Nl(t,e)).subscribe(o)}))}const Al=Fn((()=>{const t=Pn((()=>new Tt)),e=Pn((()=>new sr(3))),n=Pn((()=>new sr(["a","b","c"]))),o=Pn((()=>new sr(0))),r=Pn((()=>new sr(1)));return Ar.dom(Wl.allStrings678527[0],rn(t),rn(n,(t=>t.map((t=>Ar.dom(Wl.allStrings678527[1],t).key(t))))),rn(n,(t=>t.map((t=>Ar.dom(Wl.allStrings678527[2],t,t).key(t))))),nn(t,-1),rn(o),rn(o,(()=>55)),Ul(),rn(kt([o,r]).pipe((t=>t[1]))),rn(kt([o,r]).pipe(function(t){return(e,n)=>{n.setHandler((()=>{})),t(e).then((t=>n.next(t)))}}((t=>Promise.resolve(Ar.dom(Wl.allStrings678527[3])))))),Hl({sub0:t,sub1:e}))})),Hl=Fn((({sub0:t,sub1:e})=>{let n=!1;const o=Pn((()=>new pl));return pr((t=>[n]=t(n))),Ar.dom(Wl.allStrings678527[4],rn(t),(()=>t.next((t.value||0)+1)),(()=>o.next(t.value=(t.value||0)+1)),(()=>n=!n),n?"show":"hide",n,n&&rn(t),n&&rn(t,Ml),n&&rn(t,Rl),rn(e,Rl),rn(o,Rl),rn(o.pipe($l(33)),Rl),rn(o.pipe($l(void 0)),(t=>Rl(t))),rn(o,(t=>Rl(t))))})),Ml=t=>Ar.dom(Wl.allStrings678527[5],t),Rl=Fn((t=>Ar.dom(Wl.allStrings678527[6],t))),Ul=Fn((()=>{let t=!0,e=0,n=0;return pr((o=>[{hideShow:t,destroyCount:e,clickCounter:n}]=o({hideShow:t,destroyCount:e,clickCounter:n}))),Ar.dom(Wl.allStrings678527[7],t&&Ar.dom(Wl.allStrings678527[8],vn((()=>Fn.element.get().innerHTML=Date.now().toString()),{onDestroy:()=>++e}),(()=>++n),n),(()=>t=!t),e)})),Wl={allStrings678527:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:1}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:2}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:4}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:7}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:8}]}]}]}]}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:9}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]},zl=[{view:qa.Basic,tag:kc,emoji:"🔢"},{view:qa.OneRender,tag:Ua,emoji:"1️⃣"},{view:qa.Props,tag:zi,emoji:"🧳"},{view:qa.WatchTesting,tag:xc,emoji:"⌚️"},{view:qa.TableDebug,tag:mc},{view:qa.ProviderDebug,tag:ic},{view:qa.TagSwitchDebug,tag:Pi,emoji:"🔀"},{view:qa.Mirroring,tag:Hi,emoji:"🪞"},{view:qa.Arrays,tag:Ii,emoji:"⠇"},{view:qa.Content,tag:$a,emoji:"📰",debug:!0},{view:qa.Child,tag:ki,emoji:"👶"},{view:qa.Destroys,tag:Bi,emoji:"🗑️"},{view:qa.FunInPropsTag,tag:ci,emoji:"🤡"},{view:qa.AttributeDebug,tag:Cc,emoji:"🏹"},{view:qa.Todo,tag:Fn(mi),emoji:"✏️"},{view:qa.Counters,tag:zs,emoji:"💯"},{view:qa.Subscriptions,tag:Al,emoji:"📡"}],Fl=Fn(((t,e=Ga.views)=>{const n=zl.filter((t=>{if(e.includes(t.view))return!0})).map((({view:e,title:n,emoji:o,tag:r,...s})=>({title:n||e,output:e===qa.Counters?r({appCounterSubject:t}):r(),view:e,emoji:o,...s}))).sort(((t,e)=>t.view.localeCompare(e.view)));return _s({style:"display:flex;flex-wrap:wrap;gap:1em"},(t=>n.map((t=>Yl(t).key(t.view)))))})),Yl=t=>{const{emoji:e,view:n,title:o,output:r,debug:s}=t;return _s({style:"flex:2 2 20em"},Vs({id:n},""),Ss(Ts(e," ",o),_s({id:"many-section-contents","style.display":e=>t.contentHide?"none":""},r),_s({style:"display:flex;"},gs({style:"flex:1;",id:"section_"+t.view,onClick:()=>t.contentHide=!t.contentHide,"style.background-color":e=>t.contentHide?"grey":""},"👁️ hide/show"))),_s({style:"font-size:0.6em;text-align:right;"},Vs({href:"#top"},"⏫")))},Xl=3e3,ql=6e3,Gl=Fn((()=>{let t,e,n=0,o=0,r=0;pr((s=>[{intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r}]=s({intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r})));const s=wr(),a=()=>++n,i=()=>{console.info("🟢 interval test 0 started..."),r=0,e=setInterval(s((()=>{r+=500,r>=Xl&&(r=0)})),500),console.info("▶️ interval started"),t=setInterval(s((()=>{a()})),Xl)},c=()=>{clearInterval(t),clearInterval(e),t=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return Dn(i),$n(c),++o,Ar.dom(Ql.allStrings838008[0],Xl,t,a,n,o,Xl,r,r,(()=>{t||e?c():i()}),t||e?"red":"green",(()=>setTimeout(s((()=>{r+=200})),1e3)))})),Kl=Fn((()=>{let t,e,n=0,o=0,r=0;pr((s=>[{intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r}]=s({intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r})));const s=wr(),a=()=>++n;const i=()=>{clearInterval(t),clearInterval(e),t=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function c(){if(t)return i();console.info("🟢 interval test 1 started..."),r=0,e=setInterval(s((()=>{r+=500,r>=ql&&(r=0)})),500),t=setInterval(s((()=>{a(),console.info("slow interval ran")})),ql)}return Dn(c),$n(i),++o,Ar.dom(Ql.allStrings838008[1],ql,t,a,n,o,ql,r,r,c,t?"red":"green")})),Ql={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},Zl=Fn((()=>{let t="tagJsDebug.js",e=!1,n=0;return pr((o=>[{_firstState:t,showIntervals:e,renderCount:n}]=o({_firstState:t,showIntervals:e,renderCount:n}))),++n,Ar.dom(tu.allStrings77500[0],(()=>e=!e),e&&Ar.dom(tu.allStrings77500[1],Da(),Gl(),Kl()))})),tu={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};const eu=Fn((()=>{let t=!0,e=0,o=!1,r=null,s=new Tt(e),a="🟦";const i=wr(),c=i((t=>a=t?"✅":"❌"));function l(t=!0,e=(()=>{})){a="🟦";r=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const o=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(n.bind(n,566)),await Promise.resolve().then(n.bind(n,451)),Ga.views.includes(qa.Content)?(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835))):console.log("⏭️ Skipping content tests (unchecked)"),Ga.views.includes(qa.Subscriptions)?await Promise.resolve().then(n.bind(n,528)):console.log("⏭️ Skipping subscriptions tests (unchecked)"),Ga.views.includes(qa.Counters)?await Promise.resolve().then(n.bind(n,428)):console.log("⏭️ Skipping counters tests (unchecked)"),Ga.views.includes(qa.Props)?await Promise.resolve().then(n.bind(n,749)):console.log("⏭️ Skipping props tests (unchecked)"),Ga.views.includes(qa.TagSwitchDebug)?await Promise.resolve().then(n.bind(n,168)):console.log("⏭️ Skipping tagSwitch tests (unchecked)"),Ga.views.includes(qa.Arrays)?await Promise.resolve().then(n.bind(n,842)):console.log("⏭️ Skipping arrays tests (unchecked)"),Ga.views.includes(qa.Mirroring)?await Promise.resolve().then(n.bind(n,774)):console.log("⏭️ Skipping mirroring tests (unchecked)"),Ga.views.includes(qa.OneRender)?await Promise.resolve().then(n.bind(n,994)):console.log("⏭️ Skipping oneRender tests (unchecked)"),Ga.views.includes(qa.FunInPropsTag)?await Promise.resolve().then(n.bind(n,157)):console.log("⏭️ Skipping funInPropsTag tests (unchecked)"),Ga.views.includes(qa.AttributeDebug)?await Promise.resolve().then(n.bind(n,178)):console.log("⏭️ Skipping attributeDebug tests (unchecked)"),Ga.views.includes(qa.Destroys)?await Promise.resolve().then(n.bind(n,236)):console.log("⏭️ Skipping destroys tests (unchecked)"),Ga.views.includes(qa.WatchTesting)?await Promise.resolve().then(n.bind(n,702)):console.log("⏭️ Skipping watchTesting tests (unchecked)"),Ga.views.includes(qa.Child)?await Promise.resolve().then(n.bind(n,527)):console.log("⏭️ Skipping child tests (unchecked)"),Ga.views.includes(qa.ProviderDebug)?await Promise.resolve().then(n.bind(n,186)):console.log("⏭️ Skipping providerDebug tests (unchecked)"),Ga.views.includes(qa.Todo)?await Promise.resolve().then(n.bind(n,337)):console.log("⏭️ Skipping todo tests (unchecked)");try{const t=Date.now();if(window.mocha)await new Promise(((t,e)=>{window.mocha.run((n=>{n>0?e(new Error(`${n} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(n.bind(n,995));if(!await t())throw new Error("Tests failed")}const e=Date.now()-t;return console.info(`✅ all tests passed in ${e}ms`),zl.filter((t=>Ga.views.includes(t.view))).map((t=>{const e=document.getElementById("section_"+t.view);e&&e.click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();e(o),t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return $n((function(){clearTimeout(r),r=null})),console.info("1️⃣ app init should only run once"),l(!1,c),s.subscribe(i((t=>e=t))),_s(gs({onClick:()=>l(!0,c)},"run tests ",a),Ss(Ts("direct app tests"),gs({id:"app-counter-subject-button",onClick:()=>{s.next(e+1)}},"🍒 ++app subject"),gs({id:"app-counter-button",onClick:()=>++e},"🍒 ++app"),Js("🍒 ",Js({id:"app-counter-display"},(t=>e))),Js("🍒$<",Js({id:"app-counter-subject-display"},(t=>rn(s))),">"),Js("🍒$.value<",Js({id:"app-counter-subject-value-display"},(t=>s.value)),">"),gs({id:"toggle-test",onClick:()=>{o=!o}},"toggle test ",(t=>o))),_s({style:"display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"},(t=>Rs({name:"app",renderCount:1})),_s(Is("(subscription count: ",rn(Tt.globalSubCount$),")"))),Vs({name:"top",id:"top"}),Za(),_s({id:"tagDebug-fx-wrap"},gs({onClick:()=>t=!t},"toggle sections"),(e=>t&&Fl(s)),Zl()))})),nu=Date.now();function ou(){return function(t=function(){const t=Ns(),e=t.route,n=t.location.pathname;return n&&"counters/"===e?"counters":n&&"content/"===e?"content":n.endsWith("isolated.html")?"isolated":n.includes("todo/www")?"todo":"home"}()){let e=!1;return console.info("🍒 Main app rendered",nu),ds("\x3c!--app.js--\x3e",xs({id:"h1-app"},"🏷️ TaggedJs - 4"),gs({type:"button",onClick:()=>e=!e},"show/hide ",(t=>e)),(t=>e&&su()),As(),(e=>"home"===t&&eu()),(e=>"counters"===t&&Gs()),(e=>"content"===t&&$a()))}}ou.isApp=!0;const ru=Fn(ou),su=Fn((()=>ds(ys,_s({attr:Da({duration:".1s"})},"Hello animated world"),ys))),au=Fn(((t,e)=>(Ga.autoTest&&Xa(!1,t,e),_s("auto testing ",ms({type:"checkbox",onChange:iu,checked:t=>Ga.autoTest}),gs({type:"button",onClick:()=>Xa(!0,t,e)},"run tests")))));function iu(){Ga.autoTest=Ga.autoTest=!Ga.autoTest,Ka()}const cu=Fn((()=>{let t=0;const e=new Tt(t);let n=!1;const o=$s().value.route.split("/").map((t=>t.trim())).filter((t=>t.length));let r;return o.length&&(r=o),console.info("1️⃣ app init should only run once"),e.subscribe((e=>t=e)),_s("\x3c!--isolatedApp.js--\x3e",xs({id:"app"},"🏷️ TaggedJs - isolated"),_s({style:"opacity:.6"},"(no HMR)"),_s({style:"opacity:.6"},"route: ",o),As(),_s(Ss(Ts("direct app tests"),gs({id:"app-counter-subject-button",onClick:()=>{e.next(t+1)}},"🍒 ++app subject"),gs({id:"app-counter-button",onClick:()=>{++t}},"🍒 ++app"),Js("🍒 ",Js({id:"app-counter-display"},t)),Js("🍒$<",Js({id:"app-counter-subject-display"},rn(e)),">"),Js("🍒$.value<",Js({id:"app-counter-subject-value-display"},(t=>e.value)),">"),gs({id:"toggle-test",onClick:()=>n=!n},"toggle test ",(t=>n),"true")),au(r)),_s({style:"display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"},Rs({name:"app",renderCount:1}),_s(Is("(subscription count: ",rn(Tt.globalSubCount$),")"))),Za(r),_s({id:"tagDebug-fx-wrap"},Fl(e,r),Rs({renderCount:1,name:"isolatedApp"})))}));function lu(){const t=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),n=e[0]?.toLowerCase();if(n&&["isolated.html","index-static.html"].includes(n)){const e=Date.now();zr(cu,t,{test:1});const n=Date.now()-e;return void console.info(`⏱️ isolated render in ${n}ms`)}const o=Date.now();zr(ru,t,{test:1});const r=Date.now()-o;console.info(`⏱️ rendered in ${r}ms`)}ti.subscribe((({type:t,checkTesting:e})=>{ni(t,e)}))})();var r=o.gV,s=o.jG,a=o.fm,i=o.KH,c=o.bX,l=o.mK;export{r as App,s as IsolatedApp,a as hmr,i as run,c as tagElement,l as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,