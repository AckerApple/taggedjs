var t={902:(t,n,e)=>{e.d(n,{kQ:()=>Yt,c_:()=>zt});var r=e(717);const o=(0,r._q)((({name:t,array:n,included:e,columnNames:o,allColumnNames:c})=>{let i,l=!1,u=!1;const d=(0,r.SB)([]);(0,r.$q)((t=>[{mouseOverEditShow:l,edit:u,editFormula:i}]=t({mouseOverEditShow:l,edit:u,editFormula:i})));return r.dy.dom(s.allStrings431691[0],(function(){const n=o.indexOf(t);n>=0?o.splice(n,1):o.push(t)}),e&&"checked",t,(()=>l=!0),(()=>l=!1),u||l?"visible":"hidden",(()=>u=!u),e&&o.length!==c.length?r.dy.dom(s.allStrings431691[1],(()=>{o.length=0,o.push(...c)})):r.dy.dom(s.allStrings431691[2],(()=>{o.length=0,o.push(t)})),u&&r.dy.dom(s.allStrings431691[3],i&&r.dy.dom(s.allStrings431691[4],(t=>{return e=i,r=t.target.value,e.stringFormula=r,void(e.value=a(r,{array:n}));var e,r}),i.value),d.map((t=>r.dy.dom(s.allStrings431691[5],t.title,(()=>i=t),t.value).key(t))),(()=>{const e=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;d.push({title:"sum",stringFormula:e,value:a(e,{array:n})})})))}));function a(t,n={}){return function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{isNaN,Math,Number,Date,...n})}const s={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},c=(0,r._q)((({array:t,showAll:n,showKids:e,toggleColumnDialog:o,columnNames:a,formatChange:s,allowMaximize:c,everySimpleValue:l})=>r.dy.dom(i.allStrings122184[0],t.length&&r.dy.dom(i.allStrings122184[1],a.map((t=>r.dy.dom(i.allStrings122184[2],o&&"pointer",o,t).key(t)))),t.map((t=>r.dy.dom(i.allStrings122184[3],a.map((o=>r.dy.dom(i.allStrings122184[4],k({value:t[o],showLevels:0,showAll:n,showKids:n||e,isRootDump:!1,formatChange:s,allowMaximize:c})).key(t[o])))).key(t)))))),i={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},l=(0,r._q)((({array:t,showLevels:n,showAll:e,showKids:o,columnNames:a,formatChange:s,toggleColumnDialog:c,allowMaximize:i,everySimpleValue:l})=>r.dy.dom(u.allStrings152127[0],t.map(((t,o)=>{const d=function(t,n){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,n){if(!n)return t;const e={};return n.forEach((n=>{(t.hasOwnProperty(n)||n in t)&&(e[n]=t[n])})),e}(t,n)}(t,a);return r.dy.dom(u.allStrings152127[1],k({value:d,showLevels:n,showAll:e,showKids:!0,isRootDump:!1,formatChange:s,onHeaderClick:c,allowMaximize:i,everySimpleValue:l})).key(o)})))));const u={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},d=(0,r._q)((({showLevels:t,showAll:n,showKids:e,array:a,arrayView:s,formatChange:i,allowMaximize:u,everySimpleValue:d})=>{const h=(0,r.YP)([a,a.length],(()=>a.length?function(t){return t.reduce(((t,n)=>{if(n&&"object"==typeof n){if(Array.isArray(n))return t;Object.keys(n).forEach((n=>{t.includes(n)||t.push(n)}))}return t}),[])}(a):[]));let g;const f=(0,r.YP)([h],(()=>[...h]));let x=!1;const v=(0,r.SB)((()=>"columnDialog"+performance.now()));(0,r.$q)((t=>[{columnNames:g,showColumnDialog:x}]=t({columnNames:g,showColumnDialog:x}))),r.YP.noInit([f.length],(()=>{g||(g=f)}));const b=()=>{x=!x;const t=document.getElementById(v);x?t.showModal():t.close()},m="table"===s?c({showAll:n,showKids:e,array:a,toggleColumnDialog:b,columnNames:g||h,formatChange:i,everySimpleValue:d}):l({array:a,showLevels:t,showAll:n,showKids:e,formatChange:i,columnNames:g||h,toggleColumnDialog:b,allowMaximize:u,everySimpleValue:d});return r.dy.dom(p.allStrings463171[0],m,v,h.map((t=>{const n=void 0===g||g.includes(t);return r.dy.dom(p.allStrings463171[1],o({name:t,array:a,included:n,columnNames:g||f,allColumnNames:h})).key(t)})),b)}));const p={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},h=(0,r._q)((({key:t,value:n,show:e,showAll:o,showKids:a,showLevels:s,formatChange:c,allowMaximize:i,everySimpleValue:l})=>{let u,p,h=!1;(0,r.$q)((t=>[{showLower:u,arrayView:p,maximize:h}]=t({showLower:u,arrayView:p,maximize:h}))),(0,r.RW)((t=>[a]=t(a))),(0,r.RW)((t=>[o]=t(o))),r.YP.noInit([e],(([t])=>u=t)),r.YP.noInit([o],(([t])=>u=t));const f=(0,r.SB)((()=>"maximize-dump-"+performance.now())),x=()=>{h=!h,h&&document.getElementById(f).showModal()},v=o||u||a||null==u&&s>0,b=e=>r.dy.dom(g.allStrings479370[0],(()=>{if(void 0===u)return o=a=u=!v;o=a=u=!u}),t,"table"===p?"bold":"",(()=>p="table"===p?void 0:"table"),"table"===p?"flex":"table",n.length,e&&r.dy.dom(g.allStrings479370[1],x)),m={showLevels:s,showAll:o,showKids:a,formatChange:c,array:n,arrayView:p,allowMaximize:i,everySimpleValue:l};return r.dy.dom(g.allStrings479370[3],b(i),v&&r.dy.dom(g.allStrings479370[2],d(m)),f,h&&b(!1),h&&r.dy.dom(g.allStrings479370[4],d({...m,allowMaximize:!1})),(()=>document.getElementById(f).close()))})),g={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function f(t){var n=document.createElement("textarea");n.value=t,document.body.appendChild(n),n.select(),n.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(n)}function x({key:t,value:n,onHeaderClick:e,everySimpleValue:o}){const a=n.search&&("https://"===n.slice(0,8)||"http://"===n.slice(0,7));let s;return s=o?v({value:n,everySimpleValue:o}):a?b(n):v({value:n}),r.dy.dom(m.allStrings246978[0],t&&r.dy.dom(m.allStrings246978[1],e&&"pointer",e,t),s)}const v=(0,r._q)((({value:t,everySimpleValue:n})=>{const e=[void 0,null,"null"].includes(t),o=t,a=!isNaN(o)&&o>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(o):"";let s=0;(0,r.$q)((t=>[s]=t(s)));let c=t;return n&&(c=n(t)),c=(null===c?"null":!1===c&&"false")||void 0===c&&"undefined"||c,r.dy.dom(m.allStrings246978[2],(()=>{s=Date.now()}),(n=>{if(Date.now()-s>300)return n.preventDefault(),n.stopPropagation(),!0;f(t)}),e?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||e&&"white"||"",a,c)}));const b=t=>r.dy.dom(m.allStrings246978[3],(()=>f(t)),t,t),m={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},y=(0,r._q)((({key:t,showKids:n,show:e,showLevels:o,value:a,showAll:s,onHeaderClick:c,formatChange:i,allowMaximize:l,everySimpleValue:u})=>{let d,p=!1;const h=(0,r.SB)((()=>"maximize-dump-"+performance.now()));(0,r.$q)((t=>[{showLower:d,maximize:p}]=t({showLower:d,maximize:p}))),(0,r.RW)((t=>[n]=t(n))),r.YP.noInit([e],(([t])=>d=t)),r.YP.noInit([s],(([t])=>d=t));const g=!t||n||d||void 0===d&&o>0,f=()=>{p=!p,p&&document.getElementById(h).showModal()},x=e=>r.dy.dom(w.allStrings470244[0],d?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===d)return s=n=d=!(s||n||d);n=d=!d}),t,Object.keys(a).length,e&&r.dy.dom(w.allStrings470244[1],f)),v=t=>r.dy.dom(w.allStrings470244[2],Object.entries(a).map((([e,a])=>r.dy.dom(w.allStrings470244[3],a&&"object"==typeof a?"flex-grow:1;":"flex: 1 1 10em;",k({value:a,key:e,show:d,showAll:s,showLevels:o-1,showKids:s||n,isRootDump:!1,formatChange:i,onHeaderClick:c,allowMaximize:t,everySimpleValue:u})).key(e))));return r.dy.dom(w.allStrings470244[4],t&&x(l),g&&v(l),h,p&&x(!1),p&&v(!1),(()=>document.getElementById(h).close()))})),w={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},S=(0,r._q)((({value:t,format:n,showAll:e,formatChange:o,showAllChange:a})=>r.dy.dom(_.allStrings440833[0],!n||"flex"===n&&r.dy.dom(_.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e?"background-color:#33cd5f;":"background-color:#444444"),(()=>a(e=!e))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n&&"flex"!==n?"background-color:#444444":"background-color:#33cd5f;"),(()=>o(n="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===n?"background-color:#33cd5f;":"background-color:#444444"),(()=>o(n="json")),(()=>function(t){const n=JSON.stringify(t,null,2);f(n)}(t)))));const _={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},k=(0,r._q)((({key:t,value:n,showKids:e=!1,showLevels:o=-1,showAll:a=!1,format:s="flex",formatChange:c=(t=>s=t),isRootDump:i=!0,onHeaderClick:l,allowMaximize:u,everySimpleValue:d})=>{i&&void 0===u&&(u=!0);const p=null===n?"null":typeof n;let h,g=!1;return(0,r.RW)((t=>[s]=t(s))),(0,r.RW)((t=>[a]=t(a))),(0,r.RW)((t=>[o]=t(o))),(0,r.$q)((t=>[{show:g,arrayView:h}]=t({show:g,arrayView:h}))),(0,r.nc)((()=>{(o=o>=0&&o||(-1===o&&!t&&n&&n instanceof Object?2:0))>0&&(g=!0)})),[null,void 0].includes(n)?x({key:t,value:p,onHeaderClick:l,everySimpleValue:d}):["boolean","number","string"].includes(p)?x({key:t,value:n,onHeaderClick:l,everySimpleValue:d}):V({value:n,showKids:e,key:t,onHeaderClick:l,everySimpleValue:d,format:s,isRootDump:i,showAll:a,showAllChange:t=>a=t,formatChange:c,show:g,showLevels:o,allowMaximize:u})}));let C=0;const V=({value:t,showKids:n,key:e,onHeaderClick:o,everySimpleValue:a,format:s,isRootDump:c,showAll:i,showAllChange:l,formatChange:u,show:d,showLevels:p,allowMaximize:g})=>{if(null===t)return n?x({key:e,value:"null",onHeaderClick:o,everySimpleValue:a}):r.dy.dom(T.allStrings306188[0]);const f=Array.isArray(t);return r.dy.dom(T.allStrings306188[2],"taggedjs-dump-"+ ++C,c&&S({value:t,format:s,showAll:i,showAllChange:l,formatChange:u}),"json"===s&&r.dy.dom(T.allStrings306188[1],JSON.stringify(t,null,2))||(f?h({key:e,value:t,show:d,showAll:i,showKids:n,showLevels:p,formatChange:u,allowMaximize:g,everySimpleValue:a}):y({key:e,show:d,showKids:n,showLevels:p,value:t,showAll:i,formatChange:u,onHeaderClick:o,allowMaximize:g,everySimpleValue:a})))},T={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]};var J=e(232);const B=(0,r._q)((()=>{let t="",n=0,e="",o=!1;(0,r.$q)((r=>[{userJsonString:t,renderCount:n,userJson:e,badEval:o}]=r({userJsonString:t,renderCount:n,userJson:e,badEval:o}))),++n;const a=(0,r.SB)((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return r.dy.dom(j.allStrings183632[0],(n=>{t=n.target.value;try{e=function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{}),t=JSON.stringify(e,null,2)}catch(n){o=!0;try{JSON.parse(t)}catch(t){e=Object.getOwnPropertyNames(t).reduce(((n,e)=>(n[e]=t[e])&&n||n),{})}}}),""===e?"":t,""===e?"":r.dy.dom(j.allStrings183632[1],k({value:e})),k(a),(0,J.v)({renderCount:n,name:"dumpContent"}))}));const j={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};var P=function(t,n){return P=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},P(t,n)};function I(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}P(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function L(t,n,e,r){return new(e||(e=Promise))((function(o,a){function s(t){try{i(r.next(t))}catch(t){a(t)}}function c(t){try{i(r.throw(t))}catch(t){a(t)}}function i(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,c)}i((r=r.apply(t,n||[])).next())}))}function E(t,n){var e,r,o,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=c(0),s.throw=c(1),s.return=c(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function c(c){return function(i){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;s&&(s=0,c[0]&&(a=0)),a;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=n.call(t,a)}catch(t){c=[6,t],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,i])}}}Object.create;function O(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function D(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,a=e.call(t),s=[];try{for(;(void 0===n||n-- >0)&&!(r=a.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return s}function A(t,n,e){if(e||2===arguments.length)for(var r,o=0,a=n.length;o<a;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function N(t){return this instanceof N?(this.v=t,this):new N(t)}function $(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),a=[];return r=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",(function(t){return function(n){return Promise.resolve(n).then(t,l)}})),r[Symbol.asyncIterator]=function(){return this},r;function s(t,n){o[t]&&(r[t]=function(n){return new Promise((function(e,r){a.push([t,n,e,r])>1||c(t,n)}))},n&&(r[t]=n(r[t])))}function c(t,n){try{(e=o[t](n)).value instanceof N?Promise.resolve(e.value.v).then(i,l):u(a[0][2],e)}catch(t){u(a[0][3],t)}var e}function i(t){c("next",t)}function l(t){c("throw",t)}function u(t,n){t(n),a.shift(),a.length&&c(a[0][0],a[0][1])}}function q(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=O(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){(function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)})(r,o,(n=t[e](n)).done,n.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function H(t){return"function"==typeof t}function M(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var R=M((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function X(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var z=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,r,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=O(a),c=s.next();!c.done;c=s.next()){c.value.remove(this)}}catch(n){t={error:n}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}else a.remove(this);var i=this.initialTeardown;if(H(i))try{i()}catch(t){o=t instanceof R?t.errors:[t]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var u=O(l),d=u.next();!d.done;d=u.next()){var p=d.value;try{U(p)}catch(t){o=null!=o?o:[],t instanceof R?o=A(A([],D(o)),D(t.errors)):o.push(t)}}}catch(t){e={error:t}}finally{try{d&&!d.done&&(r=u.return)&&r.call(u)}finally{if(e)throw e.error}}}if(o)throw new R(o)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)U(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&X(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&X(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}(),W=z.EMPTY;function Y(t){return t instanceof z||t&&"closed"in t&&H(t.remove)&&H(t.add)&&H(t.unsubscribe)}function U(t){H(t)?t():t.unsubscribe()}var F={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Q={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=Q.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,A([t,n],D(e))):setTimeout.apply(void 0,A([t,n],D(e)))},clearTimeout:function(t){var n=Q.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function K(t){Q.setTimeout((function(){var n=F.onUnhandledError;if(!n)throw t;n(t)}))}function G(){}var Z=tt("C",void 0,void 0);function tt(t,n,e){return{kind:t,value:n,error:e}}var nt=null;function et(t){if(F.useDeprecatedSynchronousErrorHandling){var n=!nt;if(n&&(nt={errorThrown:!1,error:null}),t(),n){var e=nt,r=e.errorThrown,o=e.error;if(nt=null,r)throw o}}else t()}var rt=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,Y(n)&&n.add(e)):e.destination=ut,e}return I(n,t),n.create=function(t,n,e){return new ct(t,n,e)},n.prototype.next=function(t){this.isStopped?lt(function(t){return tt("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?lt(tt("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?lt(Z,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(z),ot=Function.prototype.bind;function at(t,n){return ot.call(t,n)}var st=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){it(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){it(t)}else it(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){it(t)}},t}(),ct=function(t){function n(n,e,r){var o,a,s=t.call(this)||this;H(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:s&&F.useDeprecatedNextContext?((a=Object.create(n)).unsubscribe=function(){return s.unsubscribe()},o={next:n.next&&at(n.next,a),error:n.error&&at(n.error,a),complete:n.complete&&at(n.complete,a)}):o=n;return s.destination=new st(o),s}return I(n,t),n}(rt);function it(t){var n;F.useDeprecatedSynchronousErrorHandling?(n=t,F.useDeprecatedSynchronousErrorHandling&&nt&&(nt.errorThrown=!0,nt.error=n)):K(t)}function lt(t,n){var e=F.onStoppedNotification;e&&Q.setTimeout((function(){return e(t,n)}))}var ut={closed:!0,next:G,error:function(t){throw t},complete:G},dt="function"==typeof Symbol&&Symbol.observable||"@@observable";function pt(t){return t}function ht(t){return 0===t.length?pt:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var gt=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,a=(r=t)&&r instanceof rt||function(t){return t&&H(t.next)&&H(t.error)&&H(t.complete)}(r)&&Y(r)?t:new ct(t,n,e);return et((function(){var t=o,n=t.operator,e=t.source;a.add(n?n.call(a,e):e?o._subscribe(a):o._trySubscribe(a))})),a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=ft(n))((function(n,r){var o=new ct({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[dt]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return ht(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=ft(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function ft(t){var n;return null!==(n=null!=t?t:F.Promise)&&void 0!==n?n:Promise}var xt=M((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),vt=function(t){function n(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return I(n,t),n.prototype.lift=function(t){var n=new bt(this,this);return n.operator=t,n},n.prototype._throwIfClosed=function(){if(this.closed)throw new xt},n.prototype.next=function(t){var n=this;et((function(){var e,r;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var o=O(n.currentObservers),a=o.next();!a.done;a=o.next()){a.value.next(t)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}}))},n.prototype.error=function(t){var n=this;et((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},n.prototype.complete=function(){var t=this;et((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var n=this,e=this,r=e.hasError,o=e.isStopped,a=e.observers;return r||o?W:(this.currentObservers=null,a.push(t),new z((function(){n.currentObservers=null,X(a,t)})))},n.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new gt;return t.source=this,t},n.create=function(t,n){return new bt(t,n)},n}(gt),bt=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return I(n,t),n.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},n.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},n.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},n.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:W},n}(vt);function mt(t){return function(n){if(function(t){return H(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function yt(t,n,e,r,o){return new wt(t,n,e,r,o)}var wt=function(t){function n(n,e,r,o,a,s){var c=t.call(this,n)||this;return c.onFinalize=a,c.shouldUnsubscribe=s,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return I(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(rt);var St=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function _t(t){return H(null==t?void 0:t.then)}function kt(t){return H(t[dt])}function Ct(t){return Symbol.asyncIterator&&H(null==t?void 0:t[Symbol.asyncIterator])}function Vt(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Tt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Jt(t){return H(null==t?void 0:t[Tt])}function Bt(t){return $(this,arguments,(function(){var n,e,r;return E(this,(function(o){switch(o.label){case 0:n=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,N(n.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,N(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,N(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function jt(t){return H(null==t?void 0:t.getReader)}function Pt(t){if(t instanceof gt)return t;if(null!=t){if(kt(t))return o=t,new gt((function(t){var n=o[dt]();if(H(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(St(t))return r=t,new gt((function(t){for(var n=0;n<r.length&&!t.closed;n++)t.next(r[n]);t.complete()}));if(_t(t))return e=t,new gt((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,K)}));if(Ct(t))return It(t);if(Jt(t))return n=t,new gt((function(t){var e,r;try{for(var o=O(n),a=o.next();!a.done;a=o.next()){var s=a.value;if(t.next(s),t.closed)return}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}t.complete()}));if(jt(t))return It(Bt(t))}var n,e,r,o;throw Vt(t)}function It(t){return new gt((function(n){(function(t,n){var e,r,o,a;return L(this,void 0,void 0,(function(){var s,c;return E(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),e=q(t),i.label=1;case 1:return[4,e.next()];case 2:if((r=i.sent()).done)return[3,4];if(s=r.value,n.next(s),n.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=i.sent(),o={error:c},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(a=e.return)?[4,a.call(e)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))}))})(t,n).catch((function(t){return n.error(t)}))}))}function Lt(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var a=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(a),!o)return a}function Et(t,n,e){return void 0===e&&(e=1/0),H(n)?Et((function(e,r){return function(t,n){return mt((function(e,r){var o=0;e.subscribe(yt(r,(function(e){r.next(t.call(n,e,o++))})))}))}((function(t,o){return n(e,t,r,o)}))(Pt(t(e,r)))}),e):("number"==typeof n&&(e=n),mt((function(n,r){return function(t,n,e,r,o,a,s,c){var i=[],l=0,u=0,d=!1,p=function(){!d||i.length||l||n.complete()},h=function(t){return l<r?g(t):i.push(t)},g=function(t){a&&n.next(t),l++;var c=!1;Pt(e(t,u++)).subscribe(yt(n,(function(t){null==o||o(t),a?h(t):n.next(t)}),(function(){c=!0}),void 0,(function(){if(c)try{l--;for(var t=function(){var t=i.shift();s?Lt(n,s,(function(){return g(t)})):g(t)};i.length&&l<r;)t();p()}catch(t){n.error(t)}})))};return t.subscribe(yt(n,h,(function(){d=!0,p()}))),function(){null==c||c()}}(n,r,t,e)})))}function Ot(){return void 0===(t=1)&&(t=1/0),Et(pt,t);var t}function Dt(t){return t[t.length-1]}function At(t){return(n=Dt(t))&&H(n.schedule)?t.pop():void 0;var n}function Nt(t,n){return void 0===n&&(n=0),mt((function(e,r){e.subscribe(yt(r,(function(e){return Lt(r,t,(function(){return r.next(e)}),n)}),(function(){return Lt(r,t,(function(){return r.complete()}),n)}),(function(e){return Lt(r,t,(function(){return r.error(e)}),n)})))}))}function $t(t,n){return void 0===n&&(n=0),mt((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function qt(t,n){if(!t)throw new Error("Iterable cannot be null");return new gt((function(e){Lt(e,n,(function(){var r=t[Symbol.asyncIterator]();Lt(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function Ht(t,n){if(null!=t){if(kt(t))return function(t,n){return Pt(t).pipe($t(n),Nt(n))}(t,n);if(St(t))return function(t,n){return new gt((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(_t(t))return function(t,n){return Pt(t).pipe($t(n),Nt(n))}(t,n);if(Ct(t))return qt(t,n);if(Jt(t))return function(t,n){return new gt((function(e){var r;return Lt(e,n,(function(){r=t[Tt](),Lt(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return H(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(jt(t))return function(t,n){return qt(Bt(t),n)}(t,n)}throw Vt(t)}function Mt(){for(var t,n,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return Ot()((t=e,(n=At(e))?Ht(t,n):Pt(t)))}function Rt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=At(t);return mt((function(n,r){(e?Mt(t,n,e):Mt(t,n)).subscribe(r)}))}var Xt=e(149);const zt=20,Wt=(0,r._q)((t=>{let n=1,e="white";return(0,r.$q)((t=>[{borderColor:e,width:n}]=t({borderColor:e,width:n}))),r.dy.dom(tn.allStrings1332313[2],n,e,t,n,(t=>n=Number(t.target.value)),n,(t=>e=t.target.value),""===e?"selected":"","black"===e?"selected":"","blue"===e?"selected":"","white"===e?"selected":"")})),Yt=(0,r._q)((()=>{const t=(0,r.SB)((()=>new r.xQ)),n=(0,r.SB)((()=>new r.v0(3))),e=(0,r.SB)((()=>new r.v0(["a","b","c"]))),o=(0,r.SB)((()=>new r.v0(0))),a=(0,r.SB)((()=>new r.v0(1)));let s=0,c=!0,i=!1,l=0,u=zt,d=!1;const p=(0,r.SB)((()=>new r.xQ({added:0,removed:0})));(0,r.$q)((t=>[{renderCount:s,orangeToggle:c,boldToggle:i,counter:l,showHideFx:d,staggerBy:u}]=t({renderCount:s,orangeToggle:c,boldToggle:i,counter:l,showHideFx:d,staggerBy:u}))),++s;const h=(0,r.Ld)(o,(()=>r.dy.dom(tn.allStrings1332313[3],(()=>{++l}),l,(()=>o.next(o.value+1)))));return r.dy.dom(tn.allStrings1332313[4],l,h,(()=>++l),l,(()=>d=!d),d&&r.dy.dom(tn.allStrings1332313[5],(0,Xt.fx)({duration:"10ms"})),d&&r.dy.dom(tn.allStrings1332313[6],(0,Xt.fx)({duration:"10ms",stagger:u})),d&&r.dy.dom(tn.allStrings1332313[7],(0,Xt.fx)({duration:"10ms",stagger:2*u})),d&&(((t=10)=>{const n=(0,r.iB)();return r.dy.dom(tn.allStrings1332313[1],(0,Xt.fx)({stagger:t,duration:".1s"}),n).acceptInnerHTML(n)})(u).innerHTML=Gt()),(0,r.Ld)(p,(t=>t.added)),(0,r.Ld)(p,(t=>t.removed)),(t=>u=Number(t.target.value)),Wt(r.dy.dom(tn.allStrings1332313[8])),B(),(0,J.v)({renderCount:s,name:"ContentDebug"}),Ut(),Ft({sub0:t,sub1:n}),Ut(),'<script>alert("i should never run but be seen on page")<\/script>',r.dy.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),r.dy.dom(tn.allStrings1332313[9]),"3px solid orange",c?"3px solid orange":"3px solid green",(()=>c=!c),c,i?{style:"font-weight:bold;"}:{},(()=>i=!i),i,54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",(0,r.Ld)(t),(0,r.Ld)(e,(t=>t.map((t=>r.dy.dom(tn.allStrings1332313[10],t).key(t))))),(0,r.Ld)(e,(t=>t.map((t=>r.dy.dom(tn.allStrings1332313[11],t,t).key(t))))),(0,r.Te)(t,-1),(0,r.Ld)(o),(0,r.Ld)(o,(()=>55)),Zt(),(0,r.Ld)((0,r.aj)([o,a]).pipe((t=>t[1]))),(0,r.Ld)((0,r.aj)([o,a]).pipe((0,r.Ut)((t=>Promise.resolve(r.dy.dom(tn.allStrings1332313[12])))))),(0,J.v)({renderCount:s,name:"ContentDebug"}))}));function Ut(){return r.dy.dom(tn.allStrings1332313[13],"test0","test1","test3")}const Ft=(0,r._q)((({sub0:t,sub1:n})=>{let e=!1;const o=(0,r.SB)((()=>new vt));return(0,r.$q)((t=>[e]=t(e))),r.dy.dom(tn.allStrings1332313[14],(0,r.Ld)(t),e&&(0,r.Ld)(t),(()=>t.next((t.value||0)+1)),(()=>o.next(t.value=(t.value||0)+1)),(()=>e=!e),e,e&&(0,r.Ld)(t),e&&(0,r.Ld)(t,Qt),e&&(0,r.Ld)(t,Kt),(0,r.Ld)(n,Kt),(0,r.Ld)(o,Kt),(0,r.Ld)(o.pipe(Rt(33)),Kt),(0,r.Ld)(o.pipe(Rt(void 0)),(t=>Kt(t))),(0,r.Ld)(o,(t=>Kt(t))))})),Qt=t=>r.dy.dom(tn.allStrings1332313[15],t),Kt=(0,r._q)((t=>r.dy.dom(tn.allStrings1332313[16],t))),Gt=(0,r._q)((()=>r.dy.dom(tn.allStrings1332313[17]))),Zt=(0,r._q)((()=>{let t=!0,n=0,e=0;return(0,r.$q)((r=>[{hideShow:t,destroyCount:n,clickCounter:e}]=r({hideShow:t,destroyCount:n,clickCounter:e}))),r.dy.dom(tn.allStrings1332313[18],t&&r.dy.dom(tn.allStrings1332313[19],(0,r.ho)((t=>t.innerHTML=Date.now().toString()),{onDestroy:()=>++n}),(()=>++e),e),(()=>t=!t),n)})),tn={allStrings1332313:[[{nn:"div",at:[[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["style",["border-width:",":tagvar0:","px;border-color:",":tagvar1:",";border-style:solid;"]],["id","dynamic-border-element"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"text",tc:"borderWidth:"},{nn:"input",at:[["id","dynamic-border-width"],["type","range"],["min","0"],["max","10"],["step","1"],["value",{tagJsVar:3},null],["change",{tagJsVar:4},null]]},{nn:"text",tc:" - "},{nn:"text",v:5},{nn:"text",tc:"px"}]},{nn:"div",ch:[{nn:"text",tc:"borderColor:"},{nn:"select",at:[["id","dynamic-border-color"],["change",{tagJsVar:6},null]],ch:[{nn:"option",at:[[{tagJsVar:7}],["value",""]]},{nn:"option",at:[[{tagJsVar:8}],["value","black"]],ch:[{nn:"text",tc:"black"}]},{nn:"option",at:[[{tagJsVar:9}],["value","blue"]],ch:[{nn:"text",tc:"blue"}]},{nn:"option",at:[[{tagJsVar:10}],["value","white"]],ch:[{nn:"text",tc:"white"}]}]}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:16}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:17},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:18}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:20},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:22},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:23},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:24}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:25}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:26},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:27}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:28},{nn:"text",tc:" "},{nn:"text",v:29},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:34},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:35},{nn:"text",tc:"22"},{nn:"text",v:36},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:37},{nn:"text",tc:"__tagVar0"},{nn:"text",v:38},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:39},{nn:"text",tc:'"'}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:40}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:41}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:42}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:43}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:44}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:45}]}]},{nn:"text",v:46},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:47}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:48}]}]}]}]}]},{nn:"text",v:49},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"span",ch:[{nn:"text",tc:"test:"},{nn:"text",v:1},{nn:"text",tc:":end"}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"hide/show on/off - "},{nn:"text",v:5}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"text",tc:"inner html tag"}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]}},692:(t,n,e)=>{e.r(n);var r=e(78);function o(t){return new Promise((n=>setTimeout(n,t)))}(0,r.yY)("⠇ array testing",(()=>{(0,r.it)("array basics",(()=>{(0,r.l_)((0,r.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,r.l_)(t.length).toBe(0);const n=(0,r.o5)("#score-data-0-1-inside-button");(0,r.l_)(n).toBe(0),(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1);const e=(0,r.L7)("score-data-0-1-inside-button"),o=(0,r.L7)("score-data-0-1-inside-display");let a=o.innerText;const s=(0,r.L7)("score-data-0-1-outside-button"),c=(0,r.L7)("score-data-0-1-outside-display"),i=c.innerText;(0,r.l_)(a).toBe(i),e.click(),(0,r.l_)(o.innerText).toBe(c.innerText),(0,r.l_)(o).toBe((0,r.L7)("score-data-0-1-inside-display")),(0,r.l_)(a).toBe((Number(o.innerText)-1).toString()),(0,r.l_)(a).toBe((Number(c.innerText)-1).toString()),s.click(),(0,r.l_)(o.innerText).toBe(c.innerText),(0,r.l_)(a).toBe((Number(o.innerText)-2).toString()),(0,r.l_)(a).toBe((Number(c.innerText)-2).toString())})),(0,r.it)("🗑️ deletes",(async()=>{(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(0),(0,r.l_)((0,r.o5)("#player-edit-btn-0")).toBe(1);const t=(0,r.L7)("player-edit-btn-0")._click();(0,r.l_)(t).toBe("no-data-ever"),(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(1);const n=await(0,r.L7)("player-remove-promise-btn-0")._click();(0,r.l_)(n).toBe("promise-no-data-ever"),await o(160),await n,(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(0),(0,r.l_)((0,r.o5)("#player-edit-btn-0")).toBe(0)})),(0,r.it)("add then deletes",(async()=>{(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1),(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(2),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(2),(0,r.L7)("player-edit-btn-0").click();const t=await(0,r.L7)("player-remove-promise-btn-0").click();(0,r.l_)(t).toBe("promise-no-data-ever"),await o(150),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1),(0,r.L7)("player-edit-btn-0").click();const n=await(0,r.L7)("player-remove-promise-btn-0").click();(0,r.l_)(n).toBe("promise-no-data-ever"),await o(185),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(0),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🏹 special attributes",(()=>{(0,r.it)("style and class tests",(async()=>{(0,r.l_)((0,r.QX)("#attr-input-abc")).toBe(1),(0,r.l_)((0,r.QX)("#toggle-backgrounds")).toBe(1),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0),(0,r.V4)("#toggle-backgrounds"),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,r.V4)("#toggle-backgrounds"),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)}))}))},566:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("elements exists",(()=>{(0,r.l_)((0,r.L7)("h1-app")).toBeDefined();const t=(0,r.L7)("toggle-test");(0,r.l_)(t).toBeDefined(),(0,r.l_)(t.innerText).toBe("toggle test")})),(0,r.it)("toggle test",(()=>{const t=(0,r.L7)("toggle-test");(0,r.l_)(t.innerText).toBe("toggle test"),t.click(),(0,r.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,r.l_)(t.innerText).toBe("toggle test");const n=(0,r.L7)("props-debug-textarea");(0,r.l_)(n.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')}))},527:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("child tests",(()=>{(0,r.it)("child tests",(()=>{(0,r.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,r.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,r.it)("a",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,r.it)("b",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,r.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,r.it)("c",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},118:(t,n,e)=>{e.r(n);var r=e(78),o=e(902);console.log("📄 content.test.ts: Loading... window.describe available?",typeof window.describe);let a=0;async function s(t,n,e=5e3){const o=Date.now();for(;Date.now()-o<e;){if((0,r.QX)(t)===n)return await(0,r._v)(50),!0;await(0,r._v)(10)}throw new Error(`Timeout waiting for element count. Expected ${n} elements matching '${t}', but found ${(0,r.QX)(t)}`)}(0,r.yY)("📰 content",(()=>{(0,r.it)("basic",(()=>{(0,r.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,r.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,r.l_)((0,r.dy)("#content-dom-parse-0-0")).toBe((0,r.dy)("#content-dom-parse-0-1"))})),(0,r.it)("html",(()=>{(0,r.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,r.it)("spacing",(()=>{(0,r.l_)((0,r.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,r.l_)((0,r.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,r.l_)((0,r.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,r.it)("style.",(()=>{(0,r.l_)((0,r.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.l_)((0,r.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.V4)("#toggle-border-orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,r.V4)("#toggle-border-orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,r.it)("style set as object",(()=>{(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,r.V4)("#toggle-bold"),(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,r.V4)("#toggle-bold"),(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,r.yY)("no parent element tests",(()=>{(0,r.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,r.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,r.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,r.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,r.it)("subscribe",(async()=>{a>0?console.warn("⏭️ skipped test that only passes the first time"):((0,r.l_)((0,r._8)("content-subscribe-sub0")).toBe(""),(0,r.l_)((0,r._8)("content-subscribe-sub0-with")).toBe("-1"))})),(0,r.yY)("passed in subscription",(()=>{(0,r.it)("increase test",(async()=>{const t=(0,r.L7)("passed-in-sub-increase"),n=(0,r.L7)("passed-in-sub-hide-show");(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),n.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click();const e=(0,r._8)("passed-in-output");(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe(`0||${e}||0`),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${e}||1`),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${e}||2`),n.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,r.it)("increase runs",(()=>{++a})),(0,r.it)("concat style",(()=>{(0,r.L7)("dynamic-border-width").value=2,(0,r.L7)("dynamic-border-color").value="white",(0,r.VJ)("#dynamic-border-width"),(0,r.VJ)("#dynamic-border-color"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,r.L7)("dynamic-border-width").value=1,(0,r.L7)("dynamic-border-color").value="blue",(0,r.VJ)("#dynamic-border-width"),(0,r.VJ)("#dynamic-border-color"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,r.it)("tagvar injections",(()=>{(0,r.l_)((0,r.L7)("inject-tagvar-0").innerText).toBe((0,r.L7)("inject-read-tagvar-0").innerText),(0,r.l_)((0,r.L7)("inject-tagvar-1").innerText).toBe((0,r.L7)("inject-read-tagvar-1").innerText),(0,r.l_)((0,r.L7)("inject-tagvar-2").innerText).toBe((0,r.L7)("inject-read-tagvar-2").innerText)})),(0,r.it)("animates",(async()=>{if(!document.querySelector("#content-toggle-fx"))return void console.warn("⚠️ Skipping animation test - Content view not loaded properly in test environment");(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"Initial state: should have 0 test elements").toBe(0),(0,r.V4)("#content-toggle-fx"),await s("[name=test-the-tester]",3),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After show click: should have 3 test elements").toBe(3);const t=(0,r.QX)(".animate__animated[name=test-the-tester]");(0,r.l_)(t,"After show click: should have at least 1 animating element").toBeGreaterThan(0),await(0,r._v)(o.c_/2),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"During animation: should still have 3 test elements").toBe(3),(0,r.l_)((0,r.dZ)("#outer-html-fx-test"),"During animation: inner html should be rendered").toBe("inner html tag"),await async function(t,n,e=5e3){const o=Date.now();for(;Date.now()-o<e;){if((0,r.QX)(`.animate__animated${t}`)===n)return await(0,r._v)(50),!0;await(0,r._v)(10)}throw new Error(`Timeout waiting for animations to complete. Expected ${n} animating elements matching '.animate__animated${t}', but found ${(0,r.QX)(`.animate__animated${t}`)}`)}("[name=test-the-tester]",0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After animation complete: should have 3 test elements").toBe(3),(0,r.l_)((0,r.QX)(".animate__animated[name=test-the-tester]"),"After animation complete: should have 0 animating elements").toBe(0),(0,r.V4)("#content-toggle-fx");const n=(0,r.QX)(".animate__animated[name=test-the-tester]");(0,r.l_)(n,"After hide click: should have at least 1 animating element").toBeGreaterThan(0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After hide click: should still have 3 test elements").toBe(3),await s("[name=test-the-tester]",0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After hide animation: should have 0 test elements").toBe(0),(0,r.l_)((0,r.QX)(".animate__animated[name=test-the-tester]"),"After hide animation: should have 0 animating elements").toBe(0)})),(0,r.it)("host",(()=>{let t=Number((0,r._8)("hostDestroyCount"));(0,r.l_)(isNaN(Number((0,r._8)("hostedContent")))).toBe(!1),(0,r.cS)("hostHideShow"),(0,r.l_)(Number((0,r._8)("hostDestroyCount"))).toBe(t+1),(0,r.l_)((0,r._8)("hostedContent")).toBe(""),(0,r.cS)("hostHideShow"),(0,r.l_)(isNaN(Number((0,r._8)("hostedContent")))).toBe(!1),(0,r.l_)(Number((0,r._8)("hostDestroyCount"))).toBe(t+1)}))}))},428:(t,n,e)=>{e.r(n),e.d(n,{clickSpeedAmount:()=>o});var r=e(78);(0,r.yY)("💯 counters",(()=>{const t="0"===(0,r.dy)("#🍄-slowChangeCount");(0,r.it)("basics",(()=>{const n=(0,r.L7)("set-main-counter-input");(0,r.l_)(n).toBeDefined(),n.value="0",(0,r.Sb)(n);const e=Number((0,r.dy)("#counters_render_count")),o=Number((0,r.dy)("#inner_counters_render_count"));(0,r.wG)("#conditional-counter",0);const s=(0,r._8)("👉-counter-sub-count");(0,r.di)("#❤️-increase-counter","#❤️-counter-display"),(0,r.l_)((0,r._8)("👉-counter-sub-count")).toBe(s),(0,r.l_)((0,r.dy)("#counters_render_count")).toBe((e+2).toString());let c=(o+2).toString(),i=(0,r.dy)("#inner_counters_render_count");(0,r.l_)(i).toBe(c);const l=(0,r.dy)("#🔥-init-counter");(0,r.l_)(l).toBe("1"),(0,r.di)("#❤️-inner-counter","#❤️-inner-display"),c=(e+4).toString(),i=(0,r.dy)("#counters_render_count"),(0,r.l_)(i).toBe(c),i=(0,r.dy)("#inner_counters_render_count"),c=(o+4).toString(),(0,r.l_)(i).toBe(c),(0,r.di)("#🥦-standalone-counter","#🥦-standalone-display"),c=(e+6).toString(),i=(0,r.dy)("#counters_render_count"),(0,r.l_)(i).toBe(c),i=(0,r.dy)("#inner_counters_render_count"),c=(o+4).toString(),(0,r.l_)(i).toBe(c),(0,r.wG)("#conditional-counter",1),(0,r.wG)("#conditional-display",1),t&&(0,r.l_)((0,r.dy)("#conditional-display")).toBe("2"),i=(0,r._8)("❤️💧-shallow-display"),(0,r.di)("#conditional-counter","#conditional-display"),(0,r.l_)(i).toBe((0,r._8)("❤️💧-shallow-display")),(0,r.di)("#❤️-inner-counter","#❤️-inner-display"),(0,r.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),a("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),a("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),a("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),a("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,r.it)("piped subject",(()=>{t&&((0,r.l_)((0,r.dy)("#🪈-pipedSubject")).toBe(""),(0,r.l_)((0,r.dy)("#🪈-pipedSubject-2")).toBe("")),(0,r.V4)("#🥦-subject-increase-counter");const n=(0,r.dy)("#🪈-pipedSubject"),e=(0,r.dy)("#🥦-standalone-display");(0,r.l_)(n).toBe(e),(0,r.l_)((0,r.dy)("#🪈-pipedSubject-2")).toBe((0,r.dy)("#🥦-standalone-display"))}))}));const o=600;function a(t,n,e){const a=(0,r._8)(n),s=(0,r.L7)(t),c=(0,r.L7)(e);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)s.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)c.click();console.timeEnd(`⌚️ outer ${t}`);const i=(Number(a)+o).toString();(0,r.l_)((0,r._8)(n)).toBe(i)}},236:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("destroys",(async()=>{(0,r.l_)((0,r.QX)("#destroyCount")).toBe(1),(0,r.l_)((0,r.QX)("#toggle-destroys")).toBe(1),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(1);let t=Number((0,r.dy)("#destroyCount"));(0,r.V4)("#toggle-destroys");let n=Number((0,r.dy)("#destroyCount"));(0,r.l_)(n).toBe(t+2),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(0),t=n,(0,r.V4)("#toggle-destroys"),n=Number((0,r.dy)("#destroyCount")),(0,r.l_)(n).toBe(t),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(1)}))},835:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("taggedjs-dump",(()=>{(0,r.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,r.L7)("taggedjs-dump-user-textarea");(0,r.l_)(t.value).toBe(""),t.value="{test:22}",(0,r.b$)(t),(0,r.l_)(t.value).toBe("{test:22}");const n=(0,r.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,r.l_)(n.length).toBe(1),(0,r.l_)(n[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,r.b$)(t);const e=(0,r.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,r.l_)(e.length).toBe(2),(0,r.l_)(e[0].innerText).toBe("test"),(0,r.l_)(e[1].innerText).toBe("testb"),t.value="",(0,r.b$)(t)}))}))},157:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("function in props",(async()=>{(0,r.di)("#fun_in_prop1","#fun_in_prop_display"),(0,r.di)("#fun_in_prop2","#fun_in_prop_display"),(0,r.di)("#fun_in_prop3","#fun_in_prop_display"),(0,r.l_)((0,r.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,r.V4)("#toggle-fun-in-child"),(0,r.V4)("#fun-parent-button"),(0,r.V4)("#toggle-fun-in-child"),(0,r.V4)("#fun-parent-button"),(0,r.l_)((0,r.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},774:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("🪞 mirror testing",(()=>{(0,r.wG)("#mirror-counter-display",2),(0,r.wG)("#mirror-counter-button",2);const t=Number((0,r._8)("mirror-counter-display"));(0,r.L7)("mirror-counter-button").click(),(0,r.l_)(t+1).toBe(Number((0,r._8)("mirror-counter-display"))),(0,r.wG)("#mirror-counter-display",2),(0,r.Lo)("#mirror-counter-display")}))},994:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("oneRender",(()=>{(0,r.l_)((0,r.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,r.di)("#👍-counter-button","#👍-counter-display"),(0,r.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,r.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,r.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,r.l_)((0,r.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🧳 props",(()=>{(0,r.it)("test duels",(()=>{(0,r.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,r.it)("child prop communications",(()=>{(0,r.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,r.it)("basics",(()=>{const t=(0,r.dy)("#propsOneLevelFunUpdate-🥩-display"),n=(0,r.dy)("#propsDebug-🥩-change-count-display");(0,r.l_)(n).toBe((Number(t)+1).toString());const e=(0,r.L7)("propsDebug-🥩-0-display").innerHTML,o=(0,r.L7)("propsDebug-🥩-1-display").innerHTML,a=(0,r.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,s=Number(e),c=Number(o),i=Number(a);(0,r.l_)(c).toBe(i),(0,r.l_)(s+2).toBe(c)})),(0,r.it)("letProp",(()=>{(0,r.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,r.dy)("#propsDebug-🥩-0-display")),n=(0,r.IO)("#propsDebug-🥩-2-button")[0]._click();(0,r.l_)(n).toBe("no-data-ever"),(0,r.l_)((0,r.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,r.l_)((0,r.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,r.L7)("propsDebug-🥩-1-button").click()})),(0,r.it)("props as functions",(()=>{const t=Number((0,r._8)("sync-prop-number-display"));(0,r.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,r.L7)("sync-prop-child-button").click(),(0,r.Fr)("#sync-prop-number-display",(t+2).toString()),(0,r.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,r.Fr)("#sync-prop-number-display",(t+2).toString()),(0,r.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("providers",(()=>{(0,r.it)("basics",(()=>{(0,r.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,r.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,r.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,r.it)("inner outer debug",(()=>{(0,r.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,r.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,r.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])}))}))},232:(t,n,e)=>{e.d(n,{v:()=>o});var r=e(717);const o=({renderCount:t,name:n})=>r.dy.dom(a.allStrings21541[0],n,n+"_render_count",t),a={allStrings21541:[[{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"("},{nn:"text",v:0},{nn:"text",tc:" render count "},{nn:"span",at:[["id",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]},{nn:"text",tc:")"}]}]}]]}},451:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("subject",(()=>{const t=(0,r.dZ)("#app-counter-subject-value-display");(0,r.V4)("#app-counter-subject-button");const n=(0,r.dZ)("#app-counter-subject-value-display");(0,r.l_)(Number(t)).toBe(Number(n)-1)}))},168:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🔀 tagSwitching",(()=>{(0,r.it)("0",(()=>{(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(1),(0,r.l_)((0,r.o5)("#tag-switch-dropdown")).toBe(1),(0,r.l_)((0,r.o5)("#tagSwitch-1-hello")).toBe(2),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,r.it)("1",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="1",t._change({target:t}),(0,r.wG)("#tagSwitch-1-hello",5),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("2",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="2",t._change({target:t}),(0,r.wG)("#tagSwitch-1-hello",2),(0,r.wG)("#tagSwitch-2-hello",4),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("3",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="3",t._change({target:t}),(0,r.l_)((0,r.o5)("#tagSwitch-1-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.wG)("#tagSwitch-3-hello",7),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("4",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="",t._change({target:t}),(0,r.wG)("#select-tag-above",1),(0,r.wG)("#tag-switch-dropdown",1),(0,r.wG)("#tagSwitch-1-hello",2),(0,r.wG)("#tagSwitch-2-hello",0),(0,r.wG)("#tagSwitch-3-hello",0)}))}))},78:(t,n,e)=>{e.d(n,{L7:()=>v,VJ:()=>h,V4:()=>i,cS:()=>l,dQ:()=>u,QX:()=>o,yY:()=>j,o5:()=>a,l_:()=>P,wG:()=>S,Fr:()=>k,Lo:()=>_,T_:()=>c,dy:()=>f,_8:()=>b,it:()=>B,WB:()=>d,Sb:()=>p,IO:()=>s,_v:()=>w,di:()=>V,Iq:()=>T,dZ:()=>x,b$:()=>y});var r=e(492);function o(t){return document.querySelectorAll(t).length}const a=o;function s(t){return document.querySelectorAll(t)}function c(t){return s(t).forEach((t=>t.focus()))}function i(t){[...s(t)].forEach((t=>t.click()))}function l(t){i("#"+t)}function u(t,n=0){s(t)[n].click()}function d(t,n){const e=new KeyboardEvent("keydown",{key:n,bubbles:!0});t.dispatchEvent(e)}function p(t,n){const e=new KeyboardEvent("keyup",{key:n,bubbles:!0});t.dispatchEvent(e)}function h(t,n=0){g(s(t)[n])}function g(t){t.change({target:t})}function f(t){let n="";return s(t).forEach((t=>n+=t.innerHTML)),n}function x(t){let n="";return s(t).forEach((t=>n+=t.textContent)),n}function v(t){return document.getElementById(t)}function b(t){const n=document.getElementById(t);return n?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const m=new Event("change",{bubbles:!0,cancelable:!1});function y(t){t.dispatchEvent(m)}function w(t){return new Promise((n=>setTimeout(n,t)))}function S(t,n,e){const r=document.querySelectorAll(t),o=r.length;return e=e||`Expected ${n} elements to match query ${t} but found ${o}`,P(o).toBe(n,e),r}function _(...t){const n=t.reduce(((t,n)=>{const e=document.querySelectorAll(n);return t.push(...e),t}),[]);if(0===n.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const e=n.pop().innerHTML;n.forEach((t=>P(t.innerHTML).toBe(e)))}function k(t,n){P(f(t)).toBe(n)}function C(t,n,{elementCountExpected:e}={elementCountExpected:1},r,o,a=0){P(t.length).toBe(e,(()=>`Expected ${r} to be ${e} elements but is instead ${t.length}`)),P(n.length).toBe(e,(()=>`Expected ${o} to be ${e} elements but is instead ${n.length}`)),t.forEach(((t,n)=>{const e=document.querySelectorAll(o)[n];P(document.body.contains(e)).toBe(!0,`The selected element ${o} is no longer an element on the document body BEFORE clicking ${r}`);let s=Number(e?.innerText);P(typeof t.click).toBe("function"),t.click(),P(e).toBeDefined(),P(document.body.contains(e)).toBe(!0,`The selected element ${o} is no longer an element on the document body AFTER clicking ${r}`);let c=s+1;s=Number(e.innerText),P(document.body.contains(e)).toBe(!0),P(c).toBe(s,(()=>`After click ${r}, counter test ${a+1} of ${a+2} expected ${o} to be value ${c} but it is ${s}`)),t.click(),s=Number(e?.innerText),++c,P(c).toBe(s,(()=>`Counter test ${a+2} of ${a+2} expected ${o} to increase value to ${c} but it is ${s}`))}))}function V(t,n,{elementCountExpected:e}={elementCountExpected:1}){return C(document.querySelectorAll(t),document.querySelectorAll(n),{elementCountExpected:e},t,n)}function T(...t){const[n,e]=t.shift();let r=S(e,1),o=S(n,1);const a=r[0].innerText;C(o,r,{elementCountExpected:1},n,e);let s=2;t.forEach((([t,c],i)=>{r=S(c,1),o=S(t,1);let l=r[0],u=l.innerText;const d=(Number(a)+s).toString();P(u).toBe(d,(()=>`Expected second ${c} increase provider to be increased to ${a} but got ${u}`)),C(o,r,{elementCountExpected:1},n,e,i+2),l=r[0],u=l.innerText;const p=s+2;P(u).toBe((Number(a)+p).toString(),(()=>`Expected ${c} innerText to be ${Number(a)+p} but instead it is ${u}`)),s+=2}))}const J=void 0!==globalThis.vitest,B=J?globalThis.it:r.it,j=J?globalThis.describe:r.y,P=J?globalThis.expect:r.l;J&&globalThis.beforeEach,J&&globalThis.afterEach},492:(t,n,e)=>{e.d(n,{y:()=>i,executeBrowserTests:()=>u,l:()=>l,it:()=>c});let r=null,o=new Map,a=[];const s=void 0!==globalThis.vitest,c=s?globalThis.it:(t,n)=>{const e={name:t,fn:n,suite:r};a.push(e);const s=o.get(r)||[];s.push(e),o.set(r,s)},i=s?globalThis.describe:(t,n)=>{const e=r;r=t,o.set(t,[]),n(),r=e},l=s?globalThis.expect:function(t){const n=((new Error).stack||"").split("\n")[3]||"";return{toBe(e,r){if(t!==e){const o="function"==typeof r?r():r,a=o||`Expected ${JSON.stringify(e)} but got ${JSON.stringify(t)}`,s=new Error(a);throw s.stack=a+"\n"+n+(s.stack?"\n"+s.stack:""),s}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(n){if(!(t>n))throw new Error(`Expected ${t} to be greater than ${n}`)},toHaveLength(n){if(t.length!==n)throw new Error(`Expected length ${n} but got ${t.length}`)},not:{toBe(n){if(t===n)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(n)}`)}}}};async function u(){let t=0,n=0;const e=[];console.log(`🧪 Running ${a.length} tests...\n`);const s=new Map;for(const t of a){const n=t.suite||null,e=s.get(n)||[];e.push(t),s.set(n,e)}for(const[r,o]of s){r&&console.log(`${r}`);for(const a of o){const o=r?"  ":"";try{await a.fn(),t++,console.log(`${o}✅ ${a.name}`)}catch(t){n++,e.push({test:a.name,suite:a.suite,error:t}),console.error(`${o}❌ ${a.name}`),console.error(`${o}   ${t}`)}}r&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${n} failed`),e.length>0&&(console.error("\n❌ Failed Tests:"),e.forEach((({test:t,suite:n,error:e})=>{const r=n?`${n} > ${t}`:t;if(console.error(`\n${r}:`),console.error(e.message),e.stack){e.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),a=[],o.clear(),r=null,0===n}},337:(t,n,e)=>{e.r(n);var r=e(78);function o(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let n=0;n<500;n++)t.value="aaa - "+n,(0,r.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const n=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)n[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const e=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)e[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,r.yY)("☑️ todos",(function(){const t=(0,r.IO)(".new-todo")[0];(0,r.it)("todos add one remove one",(async function(){(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),(0,r.V4)("#todo-view-all-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),(0,r.l_)(t).toBeDefined(),t.value="one",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(1),(0,r.V4)("button.destroy"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0)})),(0,r.it)("todos basic",(async function(){window.location.hash="#/",await(0,r._v)(1),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),t.value="one",(0,r.WB)(t,"Enter"),(0,r.V4)("input.toggle"),(0,r.V4)("button.destroy"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),t.value="one",(0,r.WB)(t,"Enter"),t.value="two",(0,r.WB)(t,"Enter");const n=(0,r.IO)("input.toggle")[1];n.click(),(0,r.l_)(n.checked).toBe(!0),t.value="three",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.V4)("#todo-view-active-link"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.l_)(window.location.hash).toBe("#/active"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(2),(0,r.V4)("#todo-view-completed-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(1),(0,r.V4)("#todo-view-all-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(2),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(1),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(0)})),(0,r.it)("todos editing",(function(){t.value="one",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0);let n=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,r.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(n),(0,r.l_)((0,r.IO)("input.new-todo").length).toBe(1),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(1),(0,r.T_)("input#edit-todo-input");const e=(0,r.IO)("input#edit-todo-input")[0];e.value="two",(0,r.WB)(e,"Enter"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(1),(0,r.l_)((0,r.IO)("input.new-todo").length).toBe(1),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0)})),(0,r.it)("⌚️ todos speedometer",o)}))},702:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("⌚️ watch tests",(()=>{const t=(0,r.dy)("#🍄-slowChangeCount"),n="0"===t;(0,r.it)("basic",(async()=>{const e=Number((0,r._8)("watch-testing-num-display"));(0,r.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("false"),n?((0,r.l_)((0,r.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe("false"),(0,r.l_)((0,r.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,r.l_)((0,r.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,r.l_)(Number((0,r.dy)("#🦷-watchTruth"))).to.be.greaterThan(Number(t)),(0,r.l_)((0,r.dy)("#🦷-watchTruthAsSub")).toBe((0,r.dy)("#🦷-truthSubChangeCount"))),(0,r.V4)("#watch-testing-num-button"),(0,r.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,r.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,r.l_)((0,r.dy)("#🍄‍🟫-subjectChangeCount")).toBe((e+2).toString()),(0,r.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const o=Number((0,r.dy)("#🦷-truthChangeCount"));(0,r.V4)("#🦷-truthChange-button");let a=(o+1).toString();(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("true"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),a=(o+1).toString(),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("false"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),a=(o+2).toString(),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("true"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),(0,r.V4)("#🦷-reset-button");const s=(0,r.dy)("#🦷-watchTruth"),c=(0,r.dy)("#🦷-watchTruthAsSub");(0,r.l_)(c).toBe(s)}))}))},717:(t,n,e)=>{e.d(n,{Ef:()=>T,_i:()=>Ie,xQ:()=>vt,v0:()=>Bn,KU:()=>jn,sj:()=>_r,tg:()=>Qr,IX:()=>ee,tv:()=>ie,uz:()=>zn,_:()=>Yn,G7:()=>se,aj:()=>gt,Ew:()=>Mr,KR:()=>ce,iB:()=>ro,FU:()=>yn,fm:()=>lo,ho:()=>oo,dy:()=>Wr,DE:()=>z,RW:()=>$n,ev:()=>ne,Zx:()=>mn,nc:()=>Gn,J8:()=>Gr,Kf:()=>Ir,a:()=>Hn,td:()=>Tn,SB:()=>In,$q:()=>Nn,fo:()=>An,Ld:()=>to,Te:()=>io,_q:()=>Le,bX:()=>Kr,YP:()=>Ln,Ut:()=>Pn});const r=":tagvar",o=":";function a(t){if(t.startsWith("class."))return"class";const n=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==n?n:!!t.startsWith("style.")&&"style"}const s=new RegExp(r+"(\\d+)"+o,"g");function c(t){return t.search&&t.startsWith(r)?t.search(s):-1}const i=/(:tagvar\d+:)/,l="ondoubleclick",u=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,d=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function p(t){const n=[],e=[],a=[];let s=null,c=-1,l=0;const p=new RegExp(d,"g");for(t=function(t){return t.replace(h,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(t);l<t.length;){const d=p.exec(t);if(!d)break;const[h,f,v]=d,m=h.startsWith("</"),y=h.endsWith("/>");if(l<d.index){const n=t.slice(l,d.index);if(n.trim()){const t=x(n);for(let n of t)n.startsWith(r)&&n.search(i)>=0&&-1===n.search(S)&&(n=r+ ++c+o),g(s,e,n)}}if(l=d.index+h.length,m){s=a.pop()||null;continue}const w=[];let _;for(;null!==(_=u.exec(v));)c=b(_,c,n,w);const k={nn:f};w.length&&(k.at=w),s?(s.ch||(s.ch=[]),s.ch.push(k)):e.push(k),y||(a.push(s),s=k)}if(l<t.length){const n=t.slice(l);if(n.trim()){const t=x(n);for(const n of t)n.startsWith(r)&&++c,g(s,e,n)}}return e}const h=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function g(t,n,e){!function(t,n,e){t?(t.ch||(t.ch=[]),t.ch.push(e)):n.push(e)}(t,n,{nn:"text",tc:f(e)})}function f(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function x(t){return t.split(i).filter(v)}function v(t){return""!==t}function b(t,n,e,c){const i=t[1]||t[3]||t[5];let u=t[2]||t[4]||t[6];if(void 0===i)return n;const d=""!==t[2],p=void 0===u&&d,h=i.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===l.length&&t===l?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(i.slice(0,r.length)===r){const t=r+ ++n+o;return e.push(["at",t]),c.push([t]),n}if(t[0].startsWith(i)&&t[0].slice(i.length,t[0].length).search(/\s+$/)>=0)return c.push([g]),n;const a=t[3];if(a.search(S)>=0){u=a;const t=[g,u];return c.push(t),n}u=r+ ++n+o}d||(u=t[2]);const f=u.split(y).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(s)>=0&&++n})));const x=[g,u],v=a(h);return v&&x.push(v),"style"===g?(c.unshift(x),n):(c.push(x),n)}const m=new RegExp(r+"(\\d+)"+o,"gi"),y=new RegExp("("+r+"\\d+"+o+")","gi"),w=r.slice(0,r.length-1),S=new RegExp(w+"&#x72;(\\d+)"+o,"gi"),_=w+"&#x72;$1"+o;function k(t,n){const e=function(t,n){const e=t;return function(t,n){const e=[];for(let a=0;a<t.length;++a){const s=t[a].replace(m,_);a<n.length?e.push(s+r+a+o):e.push(s)}return function(t,n,e){const a=e.length-n.length;if(a>0)for(let e=a;e>0;--e)t.push(r+(n.length+e-1)+o)}(e,t,n),e}(e,n)}(t,n).join("");return p(e)}const C="";var V,T;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(V||(V={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(T||(T={}));const J={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},B="ch";function j(t,n,e=[],r=[]){const o=t;for(let t=0;t<o.length;t++){const a=[...r,t],s=o[t];if(s.at){const t=s.at;s.at=I(t,n)}if(s.ch){const t=s.ch,r=[...a,B];s.ch=j(t,n,e,r)}t=P(s,n,o,t)}return o}function P(t,n,e,a){if("text"!==t.nn)return a;const c=t;let i,l=c.tc;if(typeof l!==V.string)return a;for(;null!==(i=s.exec(l));){const t=i[1],c=parseInt(t,10);if(!isNaN(c)&&c<n){const t=r+c+o,n=l.slice(i.index+t.length);e.splice(a,1,{nn:"text",v:c}),l=n,s.lastIndex=0}}return c.tc=l,a}function I(t,n){const e=[];for(const o of t){const[t,a,s]=o;if(t.startsWith(r)){const o=parseInt(t.replace(r,""),10);if(!isNaN(o)&&o<n){e.push([{tagJsVar:o}]);continue}}if(typeof a===V.string&&a.startsWith(r)){const o=parseInt(a.replace(r,""),10);if(!isNaN(o)&&o<n){e.push([t,{tagJsVar:o},s]);continue}}e.push(o)}return e}function L(t){return t.length}const E={};function O(t,n){const e=function(t){const n=t.map(L);return n.push(t.length),Number(n.join(""))}(t),r=E[e],o=r&&function(t,n,e){if(e&&e.strings.length===t.length&&e.strings.every(((n,e)=>n===t[e]))&&e.values.length===n.length)return!0;return!1}(t,n,r);if(o)return r.domMetaMap;const a=j(k(t,n),n.length),s={interpolation:void 0,string:void 0,strings:t,values:n,domMetaMap:a};return E[e]=s,a}function D(t,n,e){void 0!==e&&!1!==e&&null!==e?t.setAttribute(n,e):t.removeAttribute(n)}function A(t,n,e,r){switch(r){case"autofocus":return void Tr.push([M,[e]]);case"autoselect":return void Tr.push([H,[e]]);case"style":{const r=t.split(".");return void Tr.push([N,[e,r,n]])}case"class":return void function(t,n,e){const r=t.split(".");if(r.shift(),n){for(const t of r)Tr.push([$,[e,t]]);return}for(const t of r)Tr.push([q,[e,t]])}(t,n,e)}throw new Error(`Invalid special attribute of ${r}. ${t}`)}function N(t,n,e){const r=n[1];t.style[r]=e,t.style.setProperty(r,e)}function $(t,n){t.classList.add(n)}function q(t,n){t.classList.remove(n)}function H(t){t.select()}function M(t){t.focus()}function R(t){if(!t)return!1;switch(t.tagJsType){case J.dom:case J.tag:case J.templater:return!0}return!1}function X(t){const n=t?.tagJsType;return n===J.tagComponent||n===J.stateRender}function z(t){return U(t)&&typeof t.subscribe===T.function}function W(t){return t&&Y(t.then)}function Y(t){return typeof t===T.function}function U(t){return typeof t===T.object&&null!==t}function F(t){return Array.isArray(t)}function Q(t,n){const e=function(t,n,e=[]){const r=t.context;e.push({support:t,renderCount:r.renderCount,provider:n});const o=n.children;for(let t=o.length-1;t>=0;--t){const r=o[t],a=r.context;e.push({support:r,renderCount:a.renderCount,provider:n})}return e}(t,n);return e}function K(t){return t.support}function G(t,n){return Z(t,n)}function Z(t,n){if(null===t||typeof t!==T.object)return t;if(n<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const e=F(t)?[]:Object.create(Object.getPrototypeOf(t));if(F(t))for(let r=0;r<t.length;r++)e[r]=Z(t[r],n-1);else for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=Z(t[r],n-1));return e}function tt(t,n,e){return nt(t,n,e)}function nt(t,n,e){return!(t!==n&&(r=t,o=n,!Y(r)||!Y(o)||r.toString()!==o.toString()))||(e<0||typeof t===T.object&&typeof n===T.object&&(t instanceof Date&&n instanceof Date?t.getTime()===n.getTime():F(t)&&F(n)?function(t,n,e){if(t.length!==n.length)return!1;for(let r=0;r<t.length;r++)if(!nt(t[r],n[r],e-1))return!1;return!0}(t,n,e-1):!F(t)&&!F(n)&&function(t,n,e){const r=Object.keys(t),o=Object.keys(n);if(0===r.length&&0===o.length)return!0;if(r.length!==o.length)return!1;for(const a of r){if(!o.includes(a)||!nt(t[a],n[a],e-1))return!1}return!0}(t,n,e-1)));var r,o}function et(){return yt.stateConfig.support}function rt(t){return yt.stateConfig.support=t}function ot(t){let n=t;for(;n.ownerSupport&&!X(n.templater);)n=n.ownerSupport;return n.context.global.newest||n}function at(...t){return t}function st(t){const n=yt.stateConfig;return n.states[n.statesIndex]=t,++n.statesIndex,t(at)}function ct(t){const n=yt.stateConfig,e=n.statesIndex,r=ot(n.prevSupport).states[e];let o=[];r((function(...t){return o=t,t}));return n.states[n.statesIndex]=t,++n.statesIndex,t((function(...t){return o}))}function it(t){const n=yt.stateConfig;n.handlers.handler=ht,n.handlers.statesHandler=st,n.rearray=[],n.stateArray=[],n.states=[],n.statesIndex=0,rt(t)}function lt(t,n,e){const r=yt.stateConfig;r.rearray=e,r.stateArray=[],r.states=[],r.statesIndex=0,r.handlers.handler=pt,r.handlers.statesHandler=ct,r.prevSupport=n,rt(t)}class ut{}function dt(t){const n=t.callback;if(!n)return t.defaultValue;const[e]=function(t){const[n]=t(ut),[e]=t(n);return[n,e]}(n);return e}function pt(){const t=yt.stateConfig,n=t.rearray[t.stateArray.length];return t.stateArray.push(n),n.defaultValue}function ht(t){const n=yt.stateConfig;let e=t;if(typeof t===T.function&&(e=t()),typeof e===T.function){const t=e;e=function(...n){return t(...n)},e.original=t}const r={get:function(){return dt(r)},defaultValue:e};return n.stateArray.push(r),e}function gt(t){const n=new vt;return n.subscribeWith=n=>{const e=[],r=[],o=(o,a)=>{e[a]=!0,r[a]=o;if(e.length===t.length){for(const t of e)if(!t)return;n(r,s)}},a=[...t],s=a.shift().subscribe((t=>o(t,0))),c=a.map(((t,n)=>t.subscribe((t=>o(t,n+1)))));return s.subscriptions=c,s},n}function ft(t,n,e){const r=vt.globalSubCount$;vt.globalSubCount$.next(r.value+1);const o=function(){o.unsubscribe()};return o.callback=n,o.subscriptions=[],o.unsubscribe=function(){return function(t,n,e){!function(t,n){const e=t.findIndex((t=>t.callback===n));-1!==e&&t.splice(e,1)}(n,e);const r=vt.globalSubCount$;vt.globalSubCount$.next(r.value-1),t.unsubscribe=()=>t;const o=t.subscriptions;for(const t of o)t.unsubscribe();return t}(o,e,n)},o.add=t=>(o.subscriptions.push(t),o),o.next=t=>{n(t,o)},o}function xt(t,n,e){const r=[...n],o=r.shift(),a=t=>{if(r.length)return xt(t,r,e);e(t)};let s=a;const c=o(t,{setHandler:t=>s=t,next:a});s(c)}class vt{constructor(t,n){this.value=t,this.onSubscription=n,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this)}subscribe(t){const n=ft(0,t,this.subscribers),e=this.subscribeWith;if(e){if(this.methods.length){const e=t;t=t=>{xt(t,this.methods,(t=>e(t,n)))}}return e(t)}return this.subscribers.push(n),this.onSubscription&&this.onSubscription(n),n}next(t){this.value=t,this.emit()}emit(){const t=this.value,n=this.subscribers;for(const e of n)e.callback(t,e)}toPromise(){return new Promise((t=>{this.subscribe(((n,e)=>{e.unsubscribe(),t(n)}))}))}toCallback(t){const n=this.subscribe(((e,r)=>{const o=r?.unsubscribe;o?o():setTimeout((()=>n.unsubscribe()),0),t(e)}));return this}pipe(...t){const n=new vt(this.value);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return gt(t.map((t=>{if(z(t))return t;return new vt(t,(n=>(n.next(t),n)))})))}}vt.globalSubCount$=new vt(0);function bt(t){Object.defineProperty(t,"value",{set(n){t._value=n,t.emit()},get:()=>t._value})}const mt=new vt(void 0,(function(t){et()||t.next()})),yt={stateConfig:{stateArray:[],version:Date.now(),handlers:{handler:ht,statesHandler:st}},tagClosed$:mt};function wt(t,n){return St(t.states,n.states)}function St(t,n){for(let e=0;e<t.length;++e){Vt(t[e],n[e])}}let _t;function kt(...t){return _t=t,t}function Ct(){return _t}function Vt(t,n){t(kt,1),n(Ct,2)}function Tt(t,n,e,r){for(let e=t.length-1;e>=0;--e){const r=t[e].get(),o=n[e].callback;o&&o(r)}for(let t=r.length-1;t>=0;--t){Bt.length=0,Jt=0;(0,r[t])(jt),e[t](Pt)}}let Jt=0;const Bt=[];function jt(...t){return Bt.push(t),t}function Pt(...t){return Bt[Jt++]}function It(t){return t.renderCount=t.renderCount||0,t.global={}}function Lt(t,n,e,r,o){const a=e[n],s=a.valueIndex,c=t[s];if(s!==n&&console.log("here is a shifted value",{newValue:c,valueIndex:s}),c===a.value)return;a.tagJsVar.processUpdate(c,r,a,o,t),a.value=c}function Et(t,n){const e=t.context.global.contexts;!function(t,n){const e=n.templater,r=n.templater.tag,o=e.values||r.values,a=t.templater.tag;a.values=o}(t,n),++jr.locks,function(t,n){const e=t.templater.tag.values;let r=0;const o=e.length,a={added:0,removed:0};for(;r<o;)Lt(e,r,n,t,a),++r}(t,e),--jr.locks,Ir()}function Ot(t){return t.map(Dt)}function Dt(t,n){const e=t,r=t?.tagJsType;if(r)switch(r){case J.signal:case J.subscribe:case J.stateRender:return;case J.dom:case J.tag:case J.templater:return Ot(e.values)}return F(t)?Ot(e):G(t,n)}function At(t){return Dt(t,Ae)}function Nt(t){return Dt(t,Ne)}function $t(t,n,e){const r={templater:t,context:n,castedProps:e,appSupport:void 0},o=n.global;return o.blocked=[],o.destroy$=new vt,r}function qt(t,n,e,r){n.appSupport=e;const o=t.props;return o&&(n.propsConfig=function(t,n,e){const r=t.templater;if(r.tagJsType!==J.stateRender){switch(r.propWatch){case Ie.IMMUTABLE:return t.propsConfig={latest:n,castProps:e};case Ie.SHALLOW:return t.propsConfig={latest:n.map(At),castProps:e}}return t.propsConfig={latest:n.map(Nt),castProps:e}}}(n,o,r)),n}function Ht(t,n,e,r,o){const a=$t(t,r,o);return a.ownerSupport=n,qt(t,a,e,o)}function Mt(t,n,e,r){const o=X(n);if(t.tagJsVar=n,o)return void 0===t.global&&It(t),function(t,n,e,r){const o=n.global;if(!o.newest)return void t.processInit(t,n,e,r,void 0,n.placeholder);const a=Ht(t,e,e.appSupport,n);!function(t,n,e){const r=e.global,o=r.newest,a=o.templater.wrapper;let s=n.templater.wrapper,c=!1;const i=n.templater.tagJsType,l=J.stateRender===i||J.renderOnce===i;if(l)c=n.templater.tagJsType===J.renderOnce||oe(o,n);else if(a&&s){const t=o.templater.tag?._innerHTML;t&&(s=n.outerHTML);c=a.original===s.original}const u=n.templater;if(!c)return void function(t,n,e){const r=t.global,o=r.oldest;Zt(o,r),It(t),n.processInit(n,t,e,{added:0,removed:0},void 0,t.placeholder)}(e,u,t);const d=l||function(t,n){const e=n.props,r=t.propsConfig,o=r.latest,a=function(t,n,e){const r=Qe(t,n);if(r)return 11;switch(e){case Ie.NONE:return 1;case Ie.SHALLOW:return De(t,n);case Ie.IMMUTABLE:return Oe(t,n)}return function(t,n){let e=t,r=n;e=[...t],r=[...n||[]];if(!e.every(((t,n)=>function(t,n,e,r){const o=r[n];if(typeof t===T.object){const n={...t},e={...o||{}},r=Object.entries(n).every((([t,r])=>Ee(r,e[t],(()=>{delete n[t],delete e[t]}))));return r}return Ee(t,o,(function(){e.splice(n,1),r.splice(n,1)}))}(t,n,e,r))))return 7;return!1}(t,n)}(e,o,t.templater.propWatch);return a}(o,u);if(!d){return void function(t,n,e,r,o){const a=t.props,s=He(n,e,r,a,o),c=n.propsConfig;c.castProps=s;const i=e.propsConfig;i.latest=c.latest}(u,n,o,t,u.propWatch===Ie.DEEP?Ne:Ae)}if(e.locked)return void r.blocked.push(n);Ye(n),++e.renderCount}(e,a,n)}(n,t,e,r),!0;const a=t.global;if(a){const r=a.newest;if(r)return typeof n===T.function||function(t,n,e,r){let o=e.templater||e;const a=t.templater.tag;a&&a._innerHTML&&(o=e.outerHTML||e._innerHTML.outerHTML);const s=Ht(o,r,r.appSupport,n);Et(t.context.global.oldest,s)}(r,t,n,e),!0}return n.processInit(n,t,e,r,void 0,t.placeholder),!0}function Rt(t,n,e,r){t!==e.value&&xn(e,t,n,r)}function Xt(t,n){const e=n.providers;if(e)for(const t of e)for(let e=t.children.length-1;e>=0;--e){t.children[e].context.global===n&&t.children.splice(e,1)}n.destroy$&&n.destroy$.next(),t.context.renderCount=0}function zt(t,n){for(const e of t){const t=e.lastArray;if(t){zt(t,n);continue}const r=e.value;if(r?.tagJsType===J.subscribe){r.delete(e,n);continue}const o=e.global;if(!o)continue;const a=o.newest,s=o.subscriptions;s&&s.forEach(Yt),X(a.templater)&&Xt(a,o);zt(o.contexts,a)}}function Wt(t,n=[],e=[]){for(const r of t){const t=r.global;if(!t)continue;const o=t.newest;if(o){n.push(o);const r=t.subscriptions;r&&e.push(...r)}const a=t.contexts;a&&Wt(a,n,e)}return{tags:n,subs:e}}function Yt(t){t.unsubscribe()}function Ut(t,n){return!F(t)&&(Ft(n),9)}function Ft(t){Qt(t,t.lastArray)}function Qt(t,n){for(let t=0;t<n.length;++t)nn(n[t]);delete t.lastArray}function Kt(t,n){!function(t,n){for(const e of t){if(e.locked)continue;if(e.withinOwnerElement){const t=e.tagJsVar;if(t&&"host"===t.tagJsType){const n=e.supportOwner;t.delete(e,n)}continue}const t=e.lastArray;if(t){Qt(e,t);continue}const r=e.simpleValueElm;if(r){delete e.simpleValueElm,Lr(r);continue}const o=e.global;if(void 0===o)continue;if(!0===o.deleted)continue;o.deleted=!0;o.oldest&&Kt(o,n)}}(t.contexts,n),function(t){const n=t.htmlDomMeta;for(let t=n.length-1;t>=0;--t){Gt(n[t]),n.splice(t,1)}}(t)}function Gt(t){const n=t.marker;n&&Lr(n);const e=t.domElement;e&&Lr(e)}function Zt(t,n){const e=t.context;n.deleted=!0,e.renderCount=0;const r=[];return zt(n.contexts,t),n.destroy$&&Xt(t,n),Kt(n,r),r}function tn(t,n,e,r){const o=t.length-1,a=n-r,s=a<0||o<a,c=e[n];if(s)return nn(c),1;const i=function(t,n,e,r,o){const a=n&&t!==n.arrayValue;if(a)return nn(e),r.splice(o,1),2;return 0}(c.value.arrayValue,t[n],c,e,n);return i}function nn(t){!function(t,n){if(t){return void Zt(t.oldest,t)}const e=n.simpleValueElm;delete n.simpleValueElm,Lr(e)}(t.global,t)}function en(t,n,e,r,o,a){const s=n.context;s.locked=!0,function(t,n,e,r,o,a){n.tagJsVar.processInit(t,n,e,r,o,a)}(t,e,n,r,o,a),delete s.locked,e.value=t}function rn(t){switch(t){case void 0:case!1:case null:return C}return t}function on(t){return{tagJsType:"simple",value:t,processInit:an,delete:sn,checkValueChange:cn,processUpdate:Rt}}function an(t,n,e,r,o,a){const s=rn(t);a=n.placeholder;const c=n.paint=[$r,[a,s,function(t){n.simpleValueElm=t,delete n.paint}]];Cr.push(c)}function sn(t){const n=t.simpleValueElm;delete t.simpleValueElm,Lr(n)}function cn(t,n){return null!=t&&typeof t===T.object?(sn(n),6):(function(t,n){const e=rn(t);if(n.paint)return void(n.paint[1][1]=e);const r=n.simpleValueElm;Tr.push([Pr,[e,r]])}(t,n),-1)}function ln(t){return{tagJsType:"array",value:t,processInit:un,processUpdate:Rt,checkValueChange:Ut,delete:Ft}}function un(t,n,e,r,o){hn(n,t,e,r,o)}function dn(t){const n=t?.tagJsType;return n?t:function(t){if(F(t))return ln(t);return on(t)}(t)}function pn(t,n,e,r,o,a){const s=document.createTextNode(C),c={value:t,tagJsVar:dn(t),withinOwnerElement:!1,placeholder:s,valueIndex:r.length,valueIndexSetBy:"createAndProcessContextItem"};return a||Cr.push([Or,[o,s]]),en(t,n,c,e,a,o),a&&Jr.push([Dr,[a,s]]),c}function hn(t,n,e,r,o){const a=void 0===t.lastArray;a&&(t.lastArray=[]);const s=t.lastArray;let c=t.placeholder,i=0;const l=[];if(!a){for(let t=0;t<s.length;++t){const e=s[t],r=tn(n,t,s,i);0!==r?2!==r?i+=r:t-=1:l.push(e)}t.lastArray=l}const u=n.length;for(let a=0;a<u;++a){c=gn(n,a,t.lastArray,e,c,r,o).placeholder}}function gn(t,n,e,r,o,a,s){const c=t[n],i=e[n];if(i)return function(t,n,e,r,o,a,s,c){const i=e.length>o;if(i)return Rt(t,r,n,s),n;const l=pn(t,r,s,e,a,c);return e.push(l),l}(c,i,e,r,n,o,a,s);const l=pn(c,r,a,e,o,s);return e.push(l),l}function fn(t,n,e,r,o){const a=t&&t.tagJsType;if(n.tagJsVar=dn(t),a){if(a===J.renderOnce)return;Mt(n,t,e,o)}else{if(F(t))return hn(n,t,e,o),void(n.tagJsVar=ln(t));typeof t!==T.function?r&&function(t,n){n.value=t,n.tagJsVar=on(t);const e=n.placeholder,r=rn(t),o=n.paint=[$r,[e,r,function(t){n.simpleValueElm=t,delete n.paint}]];Cr.push(o)}(t,n):n.value=t}}function xn(t,n,e,r){const o=t.tagJsVar.checkValueChange(n,t,r,e);-1!==o&&fn(n,t,e,o,r)}function vn(t,n,e,r){const o=bn(J.subscribe,t,n,e,r);if(o)return o;const a=e.subContext;return a&&a.hasEmitted?(a.callback=t.callback,a.valuesHandler(a.lastValues),-1):-1}function bn(t,n,e,r,o){if(!n||!n.tagJsType||n.tagJsType!==t){return r.tagJsVar.delete(r,e),fn(n,r,e,99,o),99}}function mn(t,n,e,r,o){return n.hasEmitted=!0,n.contextItem=pn(t,e,r,[],o)}function yn(t,n){let e;return t&&(e=n=document.createTextNode(C),Jr.push([Dr,[t,n]])),{appendMarker:e,insertBefore:n}}function wn(t,n,e,r,o,a,s){const{appendMarker:c,insertBefore:i}=yn(a,s),l=function(t,n,e,r,o){const a=ot(n);let s=function(t){mn(t,u,n,e,r),_n(l),s=function(t){xn(u.contextItem,t,n,{added:0,removed:0}),_n(l)}};function c(t,n){u.lastValues[n]=t,i(u.lastValues)}function i(t){if(wt(a.context.global.newest,a),u.callback){const n=u.callback(...t);s(n)}else s(t[0])}let l=!0;const u={lastValues:[],valueHandler:c,valuesHandler:i,callback:o,subscriptions:[]};return t.forEach(((t,n)=>{l=!0,u.subscriptions.push(t.subscribe((t=>c(t,n)))),l=!1})),u}(t,e,r,i,o);return l.appendMarker=c,n.subContext=l,n.tagJsVar.processUpdate=vn,l}function Sn(t,n){return t.subContext.subscriptions.forEach((t=>t.unsubscribe())),Mr(t,n)}function _n(t){t||yt.stateConfig.support||Ir()}function kn(t,n,e,r,o,a){return wn(t.Observables,n,e,r,t.callback,o,a)}function Cn(t,n,e,r,o,a){const s=t.Observables,c=wn(s,n,e,r,t.callback,o,a);if(!c.hasEmitted){const n=s[0]?.value;c.valueHandler(n||t.withDefault,0)}return c}function Vn(t,n,e,r,o){wn([t],n,e,r,void 0,o)}function Tn(t){return et()?In((()=>Jn(t))):Jn(t)}function Jn(t){let n=t;const e=new Set,r=t=>{e.forEach((n=>n(t)))};return{tagJsType:J.signal,processInit:Vn,processUpdate:(t,n,e,r)=>bn(J.signal,t,n,e,r),get value(){return n},set value(t){n!==t&&(n=t,r(t))},delete:Sn,emit:r,subscribe(t){t(n),e.add(t);const r=()=>e.delete(t);return r.unsubscribe=r,r}}}class Bn extends vt{constructor(t){super(t),this.value=t}subscribe(t){const n=super.subscribe(t);return t(this.value,n),n}}class jn extends vt{constructor(t){super(t),this.value=t,this._value=t,bt(this)}subscribe(t){const n=super.subscribe(t);return t(this._value,n),n}}function Pn(t){return(n,e)=>{e.setHandler((()=>{}));t(n).then((t=>e.next(t)))}}function In(t){return yt.stateConfig.handlers.handler(t)}const Ln=(t,n)=>On(t,n),En=t=>t;const On=(t,n,{init:e,before:r,final:o=En}={})=>{const a=In({pastResult:void 0,values:void 0}),s=a.values;if(void 0===s){if(r&&!r(t))return a.values=t,a.pastResult;const c=(e||n)(t,s);return a.pastResult=o(c),a.values=t,a.pastResult}if(t.every(((t,n)=>t===s[n])))return a.pastResult;if(r&&!r(t))return a.values=t,a.pastResult;const c=n(t,s);return a.pastResult=o(c),s.length=0,s.push(...t),a.pastResult};function Dn(t,n){return Object.defineProperty(n,"noInit",{get(){const n=t();return n.setup.init=()=>{},n}}),Object.defineProperty(n,"asSubject",{get(){const n=t(),e=In((()=>et())),r=In((()=>new Bn(void 0))),o=In((()=>({stateArray:yt.stateConfig.stateArray,states:yt.stateConfig.states}))),a=(t,a)=>(On(t,((t,n)=>{const s=et(),c=a(t,n);if(s!==e){const t=o.stateArray,n=e.context.global.oldest;Tt(t,n.state,o.states,n.states)}r.next(c)}),n.setup),r);return a.setup=n.setup,Dn((()=>a),a),a}}),Object.defineProperty(n,"truthy",{get(){const n=t();return n.setup.before=t=>t.every((t=>t)),n}}),n}function An(t){return et()?In((()=>new vt(t))):new vt(t)}function Nn(t){return yt.stateConfig.handlers.statesHandler(t)}function $n(t){const n=Tn([]),e=Tn(0),r=Tn(0);let o=[],a=0;return r.value=e.value,t(((...t)=>(o=t,n.value))),Ln(o,(()=>{++a,n.value=o,t((()=>o))})),Nn(((o,s)=>{if(a)return t(((...t)=>(s&&1!==s||(n.value=t),n.value))),r.value=e.value,void++e.value;t((()=>n.value))})),++a,n.value}function qn(){return{stateDiff:0,provider:void 0}}Dn((()=>function(t){const n=(n,e)=>On(n,e,t);return n.setup=t,Dn((()=>n),n),n}({})),Ln),An._value=t=>{const n=In((function(){return{stateArray:yt.stateConfig.stateArray,states:yt.stateConfig.states}})),e=et();return In((function(){return new Bn(t).pipe((t=>(Tt(e.state,n.stateArray,e.states,n.states),t)))}))},An.all=function(t){const n=In((()=>({stateArray:yt.stateConfig.stateArray,states:yt.stateConfig.states}))),e=et();return vt.all(t).pipe((t=>(Tt(e.state,n.stateArray,e.states,n.states),t)))};const Hn={create:t=>{const n=In(qn);if(n.stateDiff){let t=n.stateDiff;for(;t--;)In(void 0);return In(void 0)}const e=In((()=>{const e=yt.stateConfig,r=e.stateArray.length,o=t.prototype?new t:t(),a=e.support,s=e.stateArray.length-r,c={constructMethod:t,instance:o,stateDiff:s,owner:a,children:[]};n.provider=c;const i=a.context.global;return(i.providers=i.providers||[]).push(c),n.stateDiff=s,o})),r=t,o=r.compareTo=r.toString();return n.provider.constructMethod.compareTo=o,e},inject:function(t){return In((function(){const n=t,e=n.compareTo=n.compareTo||t.toString(),r=et(),o=[];let a={ownerSupport:r.ownerSupport};for(;a.ownerSupport;){const t=a.ownerSupport.context.global.providers;if(!t){a=a.ownerSupport;continue}const n=t.find((t=>{o.push(t);if(t.constructMethod.compareTo===e)return!0}));if(n){const t=r.context.global;return(t.providers=t.providers||[]).push(n),n.children.push(r),n.instance}a=a.ownerSupport}const s=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${s}. Available providers`,o),new Error(s)}))}};class Mn extends Error{constructor(t,n,e={}){super(t),this.name=Mn.name,this.details={...e,errorCode:n}}}class Rn extends Mn{constructor(t,n){super(t,"state-mismatch-error",n),this.name=Rn.name}}class Xn extends Mn{constructor(t,n){super(t,"sync-callback-error",n),this.name=Xn.name}}function zn(t){const n=et();if(!n)throw Un;return Wn(n,yt.stateConfig,t)}function Wn(t,n,e){const r=n.states;return function(...n){return t.context.renderCount>0?function(t,n,e,...r){const o=t.context.global.newest,a=e(...r);return Ye(o),W(a)&&a.finally((()=>{Ye(o)})),a}(t,r,e,...n):e(...n)}}const Yn=()=>{const t=et();if(!t)throw Un;const n=yt.stateConfig;return function(e){return Wn(t,n,e)}},Un=new Xn("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function Fn(t){++jr.locks,t.forEach(Qn),--jr.locks,Ir()}function Qn(t){const n=t.context.global;n&&Ye(n.newest)}function Kn(t,n,e,r,{resolvePromise:o,resolveValue:a}){if(W(t)){return n.context.locked=!0,t.then(function(t,n){return e=>{if(!0===t.context.global.deleted)return n(e);const r=t.context,o=t.context.global;delete r.locked,wt(t,o.newest);return Fn(Ke(t)),n(e)}}(n,o))}return a(t)}function Gn(t){In((()=>{const n=t(),e=et();return Kn(n,e,e.context.global,0,{resolvePromise:Zn,resolveValue:te})}))}function Zn(t){return t}function te(t){return t}function ne(t){In((function(){et().context.global.destroy$.toCallback(t)}))}function ee(t=[]){return et()?In((()=>re(Jn(t)))):re(Jn(t))}function re(t){const n=["push","pop","splice","shift","unshift"],e=["map","reduce","forEach","every"],r=new Proxy(t,{get(o,a){return isNaN(a)?"length"===a?t.value.length:n.includes(a)?r[s=a]=(...n)=>{const e=t.value[s](...n);return t.emit(t.value),e}:e.includes(a)?t.value[a].bind(t.value):t[a]:t.value[a];var s},set:(n,e,r)=>isNaN(e)?"length"===e?(t.value.length=r,t.emit(t.value),!0):(t[e]=r,!0):(t.value[e]=r,t.emit(t.value),!0)});return r}function oe(t,n){const e=ae(t,n);return!(e||!n.templater.tag?._innerHTML||!ae(t.outerHTML,n))||e}function ae(t,n){const e=t.templater,r=n.templater,o=e?.tag||t,a=r.tag;if(e?.tagJsType===J.stateRender)return e.dom===r.dom;switch(o.tagJsType){case J.dom:return a?.tagJsType===J.dom&&function(t,n){const e=t.dom,r=n.dom;return e===r}(o,a);case J.tag:{const e=function(t,n,e,r){const o=t.strings,a=n.strings;if(o.length!==a.length)return!1;if(!o.every(((t,n)=>a[n].length===t.length)))return!1;const s=e.templater.values||t.values,c=r.templater.values||n.values;return function(t,n){const e=t.length===n.length;if(!e)return!1;const r=n.every((function(n,e){const r=t[e];if(typeof n===T.function&&typeof r===T.function){return!!(n.toString()===r.toString())}return!0}));if(r)return!0;return!1}(s,c)}(o,a,t,n);return e}}throw new Error(`unknown tagJsType of ${o.tagJsType}`)}function se(t,n,e){const r=n.global,o=r?.newest;if(R(t)){return oe(t,o)?(Mt(n,t,o,e),-1):(Zt(o,r),It(n),7)}const a=t?.tagJsType;if(a){return!0===Mt(n,t,r.newest.ownerSupport,e)?-1:88}return ce(n),8}function ce(t){const n=t.global,e=n?.newest;Zt(e,n),delete t.global,t.renderCount=0}function ie(t,n,e,r){const o=t.context.global;o.oldest=t,o.newest=t,++jr.locks;const a=function(t,n,e,r){const o=function(t){const n=t.templater,e=n.tag;if(e.tagJsType===J.dom)return e.dom;const r=e.strings;return O(r,e.values)}(t),a=t.templater.tag,s=a.values,c=[],i=t.context.global;i.contexts=c;const l=yr(o,s,t,n,c,0,e,r);return l}(t,n,e,r);return o.htmlDomMeta=a.dom,--jr.locks,a}function le(t,n,e){const r={value:t,valueIndex:n.length,valueIndexSetBy:"addOneContext",tagJsVar:dn(t),withinOwnerElement:e};return n.push(r),r}function ue(t,n,e){const r=n.global.newest,o=n.placeholder;return r.ownerSupport=t,ie(r,e,void 0,o),r}function de(t){const n={tagJsType:J.templater,processInit:ge,checkValueChange:se};return n.tag=t,t.templater=n,n}function pe(t,n,e){const r=function(t,n,e,r,o){const a={templater:t,context:r,castedProps:o,appSupport:void 0};return a.ownerSupport=n,a.appSupport=e,a}(t,n,n.appSupport,e);return e.global.contexts=[],r}function he(t,n,e,r,o,a){const s=pe(t,e,n);s.ownerSupport=e;const c=ie(s,r,o,o?void 0:a);for(const t of c.dom)t.marker&&(o?Jr.push([Dr,[o,t.marker]]):Cr.push([Or,[a,t.marker]])),t.domElement&&(o?Jr.push([Dr,[o,t.domElement]]):Cr.push([Or,[a,t.domElement]]));return s}function ge(t,n,e,r,o,a){return o?he(t,n,e,r,o,a):ue(e,n,r)}function fe(t,n){const e={tagJsType:J.templater,processInit:ge,processUpdate:Rt,checkValueChange:se,delete:ce,propWatch:t,props:n,key:function(t){return e.arrayValue=t,e}};return e}const xe=[];function ve(t){const n=t.context;return We(t.templater)?Ue(t):ze(t,t,n)}function be(t,n,e){return t.map((function(t){return function(t,n,e,r){if(R(t)||!t)return t;if(!n)return t;return me(t,n,e,r)}(t,n.ownerSupport,n,e)}))}function me(t,n,e,r,o){if(!t)return t;if(t.tagJsType)return t;if(typeof t===T.function)return r<=1?function(t,n,e){const r=t.mem;if(r)return t;const o=function(...t){return function(t,n,e,r){const o=r.context.global,a=o?.newest||r,s=void 0===et(),c=t.apply(n,e),i=function(){const t=a.context;return t.global&&!0!==t.locked?(ve(a),c):c};if(s)return i();return yt.tagClosed$.toCallback(i),c}(o.mem,n,t,e)};return o.original=t,o.mem=t,Object.assign(o,t),o}(t,o,n):t;if(r===Ne)return t;return we(t)?t:F(t)?function(t,n,e,r){for(let o=t.length-1;o>=0;--o){const a=t[o];if(t[o]=me(a,e,n,r+1,t),typeof a===T.function){if(a.mem)continue;ye(r+1,o,a,t,n)}}return t}(t,e,n,r):function(t,n,e,r){const o=Object.keys(t);for(const a of o){const o=t[a],s=me(o,e,n,r+1,t);if(t[a]===s)continue;const c=Object.getOwnPropertyDescriptor(t,a);if(!(c?.get||c?.set)&&(t[a]=s,typeof s===T.function)){if(o.mem)continue;ye(r+1,a,o,t,n)}}return t}(t,e,n,r)}function ye(t,n,e,r,o){if(t>0){const t=o.context.global;r[n].subscription=t.destroy$.toCallback((function(){r[n]=e}))}}function we(t){return typeof t!==T.object||!t||t.tagJsType}function Se(t,n,e,r){const o=n.original,a=t.tagJsType===J.stateRender,s=yt.stateConfig;let c;return rt(e),a?c=t():(c=o(...r),typeof c===T.function&&(c=c())),c.templater=t,t.tag=c,e.state=s.stateArray,e.states=s.states,e}function _e(t,n,e){const r=t.propWatch===Ie.DEEP?Ne:Ae,o=t.props,a=n.propsConfig;let s=a.castProps;const c=e?.propsConfig,i=c?.castProps;i&&(a.castProps=i,s=He(n,e,e.ownerSupport,o,r));return s||be(o,n,0)}function ke(t,n){const e=t.rearray;e.length&&e.length!==t.stateArray.length&&function(t,n,e){const r=`Saved states between renders are inconsistent. Expected ${t.length} states got ${e.stateArray.length}.`,o=n.templater?.wrapper;let a=o;(o?.original||o?.original)&&(a=o.original);const s={oldStates:e.stateArray,newStates:e.rearray,tagFunction:a,templater:n.templater},c=new Rn(r,s);throw console.error(Ce,s),c}(e,n,t)}const Ce="State tracking requires same number of state calls on every render. This error typically occurs when a state call is only reachable behind a condition. Also, wrapping tags that have state, with tag(), often helps when tag is only reachable by a condition.";function Ve(t,n){const e=t.context;++e.renderCount;const r=yt.stateConfig;t.state=r.stateArray,t.states=r.states,e.global.newest=t,ke(r,t),delete r.prevSupport,delete r.support,delete r.stateArray,delete r.states,yt.tagClosed$.next(n)}function Te(t,n,e,r){!function(t,n){const e=n?.state;if(e)return void lt(t,n,e);it(t)}(t,n);const o=t.templater;let a;if(o.tagJsType===J.stateRender){const n=o;a=Ht(o,r,t.appSupport,e),Se(o,n,a)}else{a=(0,o.wrapper)(t,e,n)}return Ve(a,r),a.ownerSupport=t.ownerSupport,a}function Je(t,n,e,r,o,a){It(n);const s=function(t,n,e){const r=fe(Ie.DEEP);r.tagJsType=t.tagJsType;const o=pe(r,e,n);function a(){return r.tag=t(),o}return r.wrapper=a,a.tagJsType=t.tagJsType,a.original=t.original||t,o}(t,n,e);return Te(s,void 0,n),he(s.templater,n,e,r,o,a)}function Be(t,n,e,r,o){const a=Ht(t,e,e.appSupport,n),s=a.propsConfig;if(s){const n=t.tagJsType!==J.tagComponent?[]:_e(t,a);s.castProps=n}return function(t,n,e){const r=ie(t,n,e,void 0);for(const t of r.dom)t.domElement&&Jr.push([Dr,[e,t.domElement]]),t.marker&&Jr.push([Dr,[e,t.marker]]);return t}(Te(a,n.global.newest,n),r,o)}function je(t,n,e,r,o){if(It(n),o){return Be(t,n,e,r,o)}const a=function(t,n,e,r){const o=Ht(t,e,e.appSupport,n),a=o.propsConfig;if(a){const n=t.tagJsType!==J.tagComponent?[]:_e(t,o);a.castProps=n}const s=Te(o,n.global.newest,n);return ie(s,r,void 0,n.placeholder),s}(t,n,e,r);return a}let Pe=0;var Ie;function Le(t,n=Ie.SHALLOW){const e=function(...r){const o=fe(n,r);o.tagJsType=J.tagComponent,o.processInit=je;const a=function(t,n){return function(e,r,o){const a=_e(t,e,o),s=e.ownerSupport,c=Ht(t,s,e.appSupport,r,a);return Se(t,n,c,a)}}(o,e);return a.original=t,o.wrapper=a,o},r=t;return e.original=t,r.tags=xe,r.setUse=yt,r.ValueTypes=J,r.tagIndex=Pe++,xe.push(e),e}function Ee(t,n,e){if(typeof t!==T.function)return!!tt(t,n,Ne)&&4;if(typeof n!==T.function)return!1;const r=n?.original;r&&(n=r);t.original&&(t=t.original);return t.toString()===n.toString()?(e(),5):(e(),6)}function Oe(t,n){const e=t.length;for(let r=0;r<e;++r){if(t[r]!==n[r])return 2}return!1}function De(t,n){const e=t.length;for(let r=0;r<e;++r){const e=t[r],o=n[r];if(F(e)&&F(o)){if(e===o)continue;return 3}if(typeof e!==T.function||typeof o!==T.function)if(typeof e!==T.object){if(e!==o)return 3.3}else if(typeof n===T.object){const t=Object.entries(e);for(const n of t){if(!$e(n,o))return 3.1}}}return!1}!function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(Ie||(Ie={})),Le.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},Le.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},Le.deepPropWatch=Le,Le.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Le.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Le.immutableProps=function(t){return Le(t,Ie.IMMUTABLE)},Le.watchProps=function(t){return Le(t,Ie.SHALLOW)},Object.defineProperty(Le,"renderOnce",{set(t){t.tagJsType=J.renderOnce,t.processInit=Je,t.processUpdate=Rt,t.delete=ce,t.checkValueChange=function(){return-1}}}),Object.defineProperty(Le,"use",{set(t){t.original={setUse:yt,tags:xe},t.tagJsType=J.stateRender,t.processInit=je,t.processUpdate=Rt,t.checkValueChange=se,t.delete=ce}});const Ae=3,Ne=10;function $e([t,n],e){const r=e[t];return typeof n===T.function&&typeof r===T.function||r===n}function qe(t,n,e,r,o,a){return null==t||a>o?n:typeof t===T.function?n.mem?(t.mem=n.mem,n):(t.mem=n,t):we(n)?n:F(n)?function(t,n,e,r,o,a){for(let s=t.length-1;s>=0;--s){const c=t[s],i=n[s];t[s]=qe(i,c,e,r,a,o+1)}return t}(n,t,e,r,a,o):function(t,n,e,r,o,a){const s=Object.keys(t);for(const c of s){const s=t[c],i=qe(n[c],s,e,r,a,o+1);if(s===i)continue;const l=Object.getOwnPropertyDescriptor(t,c)?.set;l||(t[c]=i)}return t}(n,t,e,r,a,o)}function He(t,n,e,r,o,a=-1){const s=n.context.global;if(!s||!s.newest){const n=be(r,t,a);r.push(...n);return t.propsConfig.castProps=n,r}const c=(n=s.newest||n).propsConfig.castProps,i=[];for(let n=0;n<r.length;++n){const s=r[n],l=qe(c[n],s,t,e,o,a+1);i.push(l)}return t.propsConfig.castProps=i,i}function Me(t){const n=t.context,e=n.global,{subs:r,tags:o}=Wt(e.contexts);Re(e);for(const t of o){const n=t.context.global;if(!0===n.deleted)return;Re(n)}e.subscriptions&&r.forEach(Yt),It(n)}function Re(t){t.deleted=!0,Kt(t,[])}function Xe(t,n,e){const r=Te(t,n,e),o=!n||oe(n,r);if(o){if(n){const t=n.templater.tag;if(t&&e.renderCount>0){const e=n?.templater,r=e?.tag;!function(t,n,e){if(t.tagJsType===J.dom){const r=e?.dom;return void(r!==t.dom&&Me(n))}if(e){const r=e.strings;if(r){const e=r?.length;e!==t.strings.length&&Me(n)}}}(t,n,r)}}}else{!function(t,n){const e=t.context.global;let r=-1;const o=e.providers=e.providers||[],a=o.length-1;for(;r++<a;){const t=o[r];let a=-1;const s=t.children.length-1;for(;a++<s;)if(e===t.children[a].context.global)return t.children.splice(a,1),void t.children.push(n)}}(n,r),Me(n);const t=r.context.global;t.oldest=r,t.newest=r}return r.ownerSupport=t.ownerSupport,{support:r,wasLikeTags:o}}function ze(t,n,e){const r=Xe(n,t,e),o=e.global;return r.wasLikeTags?(Et(o.oldest,r.support),r.support):ue(n,e,{added:0,removed:0})}function We(t){return J.templater===t.tagJsType}function Ye(t){const n=t.context,e=n.global,r=We(t.templater);if(n.locked)return e.blocked.push(t),t;if(r){return Ue(t)}n.locked=!0,e.blocked.length&&(t=e.blocked.pop(),e.blocked=[]);const o=ze(e.newest,t,n);return delete n.locked,o}function Ue(t){return Ye(ot(t).context.global.newest)}function Fe(t,n){const e=function(t,n){const e=t.props,r=n.propsConfig,o=r.latest;if(Qe(e,o))return!0;switch(t.propWatch){case Ie.IMMUTABLE:return Oe(e,o);case Ie.SHALLOW:return De(e,o)}return!tt(e,o,Ne)}(t,n);return!!e}function Qe(t,n){return t.length!==n.length}function Ke(t,n=[]){const e=t.context,r=We(t.templater),o=t.ownerSupport;if(e.locked)return n.push(t),n;if(r)return Ke(o,n);const a=t,s=X(a.templater),c=t.templater.tagJsType,i=o&&c!==J.stateRender&&(!s||Fe(a.templater,a)),l=function(t){const n=t.context.global.providers;if(!n)return[];const e=[];for(const t of n){const n=Q(t.owner,t);e.push(...n.map(K))}return e}(a);return n.push(...l),i?(Ke(o,n),s&&n.push(a),n):(n.push(a),n)}function Ge(t,n){const e=n.context.global,r=function(t,n){if(!0!==e.deleted)return function(t,n,e,r){const o=ot(n),a=o.context;a.locked=!0;const s=t.apply(e,r);delete a.locked;return function(t,n){n.context.global;return function(t,n,e){return Fn(Ke(t)),Kn(n,t,0,0,{resolvePromise:nr,resolveValue:er})}(n,t)}(s,o)}(r.tagFunction,r.support,t,n)};return r.tagFunction=t,r.support=n,r}const Ze="no-data-ever",tr="promise-no-data-ever";function nr(){return tr}function er(){return Ze}function rr(t,n,e,r,o,a,s){if(s)return A(t,n,e,s);r(e,t,n)}function or(t,n,e,r){const o=t.appElement;"blur"===n&&(n="focusout");const a="_"+n,s=t.context.global.events;if(!s[n]){const t=function(t){t.originalStopPropagation=t.stopPropagation,ar(t,a,t.target)};s[n]=t,o.addEventListener(n,t)}e[a]=r,e[n]=r}function ar(t,n,e){const r=e[n];if(r){let n=!1;if(t.stopPropagation=function(){n=!0,t.originalStopPropagation.call(t)},r(t),t.defaultPrevented||n)return}const o=e.parentNode;o&&ar(t,n,o)}function sr(t,n,e,r){const o=function(...n){return o.tagFunction(t,n)};o.tagFunction=n,o.support=e,or(e.appSupport,r,t,o)}function cr(t){return null==t||!1===t}function ir(t,n){t.removeAttribute(n)}function lr(t,n,e,r,o){if(e.isNameOnly)return function(t,n,e,r,o,a,s,c){if(e){if(cr(n))return void r.removeAttribute(e);if(typeof e===T.object)if(typeof n===T.object)for(const t in e)t in n||Tr.push([ir,[r,t]]);else for(const t in e)Tr.push([ir,[r,t]])}gr(t,n,r,o,a,s,c)}(o,t,e.value,e.element,n,e.howToSet,[],{added:0,removed:0}),void(e.value=t);const a=e.element;console.log("processAttributeEmit-------",{valueIndex:e.valueIndex,valueIndexSetBy:e.valueIndexSetBy,attrName:e.attrName,newAttrValue:t,isSpecial:e.isSpecial,values:o,contextItem:e}),function(t,n,e,r,o,a,s,c){if(Y(t))return function(t,n,e,r,o,a,s,c){const i=t.templater.wrapper;if((i?.tagJsType||i?.original?.tagJsType)!==J.renderOnce)return xr(s,n,t,r,e);return console.log("callback fun-------",r),fr(n,e,r,o,a,t,c)}(o,t,r,n,s,a,e,c);fr(t,r,n,s,a,o,c)}(t,e.attrName,e,a,n,e.howToSet,e.isSpecial,{added:0,removed:0}),e.value=t}function ur(t,n,e,r,o,a,s,i,l){const u=r.length;function d(r){const a=function(t,n,e){return t.reduce(((t,r)=>{if(c(r)>=0){const r=e++,o=n[r];return t.push(o),t}return t.push(r),t}),[])}(n,r,u).join("");o(e,t,a)}n.forEach((n=>{if(c(n)>=0){const o=r.length,a=dn(n),s={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:a,valueIndex:r.length,valueIndexSetBy:"createDynamicArrayAttribute"};a.processUpdate=function(t,n,e,r,o){d(o)};const c=i[o];s.value=c,r.push(s)}})),d(i)}function dr(t,n,e,r,o,a,s,c,i){const l=dn(n),u={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:l,valueIndex:i,valueIndexSetBy:"createDynamicAttribute"};r.push(u),l.processUpdate=lr,function(t,n,e,r,o,a,s,c){e.element=r,e.howToSet=o,typeof n===T.function?xr(e,n,a,t,r):(e.attrName=t,e.isSpecial=c,rr(t,n,r,o,0,0,c))}(t,n,u,e,o,a,0,c),u.value=n}function pr(t){return U(t)&&"tagJsVar"in t?t.tagJsVar:-1}function hr(t,n,e,r,o,a,s,c,i){const l=pr(n);if(l>=0){const n=t[l],s=le(n,a,!0);if(s.valueIndex=l,s.valueIndexSetBy="processAttribute",s.isAttr=!0,s.element=e,s.isNameOnly=!0,n.tagJsType)return s.tagJsVar=n,s.stateOwner=ot(r),s.supportOwner=r,function(t,n,e){return void n.processInit(t,n,e)}(e,n,s);s.howToSet=o;return s.tagJsVar.processUpdate=lr,void gr(t,n,e,r,o,a,c)}if(Array.isArray(i))return ur(n,i,e,a,o,0,0,t);const u=pr(i);if(u>=0){return dr(n,t[u],e,a,o,r,0,s,u)}return rr(n,i,e,o,0,0,s)}function gr(t,n,e,r,o,s,c){if(!cr(n))if(typeof n!==T.object)0!==n.length&&o(e,n,C);else for(const i in n){const l=n[i];hr(t,i,e,r,o,s,a(i),c,l)}}function fr(t,n,e,r,o,a,s){if(!1!==r)return console.log("special",{attrName:e,newAttrValue:t,special:r}),void A(e,t,n,r);switch(t){case void 0:case!1:case null:return void Tr.push([vr,[n,e]])}if(Y(t))return sr(n,t,a,e);o(n,e,t)}function xr(t,n,e,r,o){n=Ge(n,e);return t.tagJsVar.processUpdate=lr,sr(o,n,e,r)}function vr(t,n){t.removeAttribute(n)}function br(t,n,e,r,o,a,s){const c=document.createTextNode(C),i=le(t,n,o>0);i.placeholder=c,a?Jr.push([Dr,[a,c]]):Cr.push([Or,[s,c]]),en(t,e,i,r,a,s)}const mr=function(){};function yr(t,n,e,r,o,a,s,c){const i=[];s&&void 0===c&&(c=document.createTextNode(C),Jr.push([Dr,[s,c]]),s=void 0);for(let l=0;l<t.length;++l){const u=t[l],d=u.v;if(!isNaN(d)){br(n[o.length],o,e,r,a,s,c);continue}const p={};if(i.push(p),"text"===u.nn){Sr(p,u,s,c);continue}const h=wr(p,u,n,e,o,r,s,c);u.ch&&(p.ch=yr(u.ch,n,e,r,o,a+1,h,c).dom)}return{dom:i,contexts:o}}function wr(t,n,e,r,o,a,s,c){const i=t.domElement=document.createElement(n.nn);if(n.at)for(const t of n.at){const n=t[0],s=t[1];hr(e,n,i,r,D,o,t[2]||!1,a,s)}return s?Jr.push([Dr,[s,i]]):Cr.push([Or,[c,i]]),i}function Sr(t,n,e,r){const o=t,a=o.tc=n.tc;e?Jr.push([Hr,[e,a,function(t){o.domElement=t}]]):Cr.push([qr,[r,a,function(t){o.domElement=t}]])}function _r(t){kr.length&&(kr[kr.length-1].paintRemoves.push(...Vr),Vr=[]),kr.push({promise:t,paintRemoves:Vr}),Vr=[]}let kr=[],Cr=[],Vr=[],Tr=[],Jr=[],Br=[];const jr={locks:0,removeLocks:0};function Pr(t,n){n.textContent=t}function Ir(){if(!(jr.locks>0))return function(){(function(){if(kr.length){const t=kr.map((t=>t.promise.then((()=>{const n=t.paintRemoves;for(const t of n)t[0](...t[1])}))));kr=[];const n=Vr;return Promise.all(t).then((()=>{for(const t of n)t[0](...t[1])}))}for(const t of Vr)t[0](...t[1])})(),Vr=[];for(const t of Tr)t[0](...t[1]);for(const t of Jr)t[0](...t[1]);for(const t of Cr)t[0](...t[1])}(),void function(){Cr=[],Tr=[],Jr=[];const t=Br;Br=[];for(const n of t)n[0](...n[1])}()}function Lr(t){Vr.push([Er,[t]])}function Er(t){t.parentNode.removeChild(t)}function Or(t,n){t.parentNode.insertBefore(n,t)}function Dr(t,n){t.appendChild(n)}const Ar="object"==typeof document&&document.createElement("div");function Nr(t){return Ar.innerHTML=t,document.createTextNode(Ar.innerHTML)}function $r(t,n,e=mr){const r=Nr(n);Or(t,r),e(r)}function qr(t,n,e=mr){Ar.innerHTML=n;const r=document.createTextNode(Ar.textContent);Or(t,r),e(r)}function Hr(t,n,e){Ar.innerHTML=n;const r=document.createTextNode(Ar.textContent);Dr(t,r),e(r)}function Mr(t,n){const e=t.subContext;e.deleted=!0,delete t.subContext;const r=e.appendMarker;if(r&&(Lr(r),delete e.appendMarker),delete t.delete,!e.hasEmitted)return;const o=e.contextItem;return o.tagJsVar.delete(o,n),76}function Rr(t,n,e,r,o,a){const s=t;let c=s.templater;c||(c=de(s));const i=It(n);return o?he(c,n,e,r,o,a):(i.newest=pe(c,e,n),ue(e,n,r))}function Xr(t,n,e,r,o,a){Rr(t.outerHTML,n,e,r,o,a);n.tagJsVar.processUpdate=function(t,n,e,r){xn(e,t?.outerHTML||t,n,r)},t.checkValueChange=zr}function zr(t,n,e){return se(t,n,e)}function Wr(t,...n){const e=function(t,n){const e={values:n,ownerSupport:et(),tagJsType:J.tag,processInit:Rr,processUpdate:Rt,checkValueChange:se,delete:ce,strings:t,key:t=>(e.arrayValue=t,e),setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Xr,e},acceptInnerHTML:function(t){return t.owner=e,e},html:function(t,n){return e.children={strings:t,values:n},e}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n),r=fe(Ie.NONE);return r.tag=e,e.templater=r,e}Wr.dom=function(t,...n){return function(t,n){const e={values:n,ownerSupport:et(),dom:t,tagJsType:J.dom,processInit:Rr,processUpdate:Rt,checkValueChange:se,delete:ce,key:function(t){return e.arrayValue=t,e},setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Xr,e},acceptInnerHTML:function(t){return t.owner=e,e},html:{dom:function(t,n){return e.children={dom:t,values:n},e}}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n)};function Yr(t,n){t.domElement&&n.appendChild(t.domElement),t.marker&&n.appendChild(t.marker)}function Ur(t,n,e){const r=n.global,o=$t(t,n);return qt(t,o,o),o.appElement=e,r.oldest=r.oldest||o,r.newest=o,o}function Fr(t,n,e,r,o,a,s){const c=document.createTextNode(C);xe.push(e.wrapper||{original:e});const i=function(t,n,e,r,o){r.placeholder=n;const a=r.global,s=a.oldest,c=a.newest===s,i=Ht(t,a.newest,a.newest.appSupport,r);c||lt(i,a.newest,s.state);if(t.tagJsType===J.stateRender)return function(t,n,e,r,o){const a=t.wrapper||{original:t};if(!n){const n=Ur(t,r,o);return Ve(n),n}return Se(t,a,e),Ve(e),e}(t,o,i,r,e);const l=t.wrapper,u=l(i,r);return Ve(i),u}(e,c,o,a,s);if(n.isApp=!0,s&&(r.tag=i.templater.tag),!o)throw new Error(`Cannot tagElement, element received is type ${typeof o} and not type Element`);o.destroy=function(){const t=n.events;for(const n in t){const e=t[n];o.removeEventListener(n,e)}n.events={},++jr.locks;const e=Zt(i,n);return--jr.locks,Ir(),e},++jr.locks;const l=function(t,n,e,r,o,a){console.debug("🏷️ Building element into tag...",{element:n,app:o,support:t});const s=ie(t,{added:0,removed:0},n,void 0);e.oldest=t,e.newest=t;let c=r.setUse;if(r.tagJsType!==J.stateRender){const t=o.original;c=t.setUse,t.isApp=!0}n.setUse=c,n.ValueTypes=J,Qr.push({element:n,support:t});const i=document.createDocumentFragment();i.appendChild(a);for(const t of s.dom)Yr(t,i);return console.debug("🏷️ Element Tag DOM built ✅"),i}(i,o,n,e,t,c);return--jr.locks,Ir(),o.appendChild(l),{support:i,tags:xe,ValueTypes:J}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const Qr=[];function Kr(t,n,e){const r=Qr.findIndex((t=>t.element===n));if(r>=0){const t=Qr[r].support;Zt(t,t.context.global),Qr.splice(r,1),console.warn("Found and destroyed app element already rendered to element",{element:n})}let o=()=>c(e);o.propWatch=Ie.NONE,o.tagJsType=J.stateRender,o.processUpdate=Rt,o.props=[e],o.isApp=!0;const a=function(t,n){const e={value:t,valueIndex:0,valueIndexSetBy:"getNewSubject",withinOwnerElement:!1,renderCount:0,global:void 0,tagJsVar:{tagJsType:"templater",checkValueChange:se,delete:ce,processInit:function(){console.debug("do nothing app function")},processUpdate:Rt}},r=It(e);return r.events={},Ur(t,e,n),e}(o,n),s=a.global;it(s.newest);let c=t(e);const i=typeof c==T.function;return i||(X(c)?(s.newest.propsConfig={latest:[e],castProps:[e]},o.propWatch=c.propWatch,o.tagJsType=c.tagJsType,o.wrapper=c.wrapper,o=c):(o.tag=c,c=t)),Fr(t,s,o,c,n,a,i)}function Gr(t){if(!t)return mr;const n=et();if(!n)throw new Error("output must be used in render sync fashion");return(...e)=>{const r=n.ownerSupport;return Zr(e,t,r)}}function Zr(t,n,e){const r=e.context.global.newest;St(r.states,e.states);const o=n(...t);return St(e.states,r.states),Br.push([()=>{r.context.global&&(++jr.locks,ve(r),--jr.locks,Ir())},[]]),o}function to(t,n){const e=et(),r=e?ot(e).states:[];return{tagJsType:J.subscribe,processInit:kn,processUpdate:vn,delete:Sn,callback:n,states:r,Observables:[t]}}function no(t,n,e,r){const o=t.owner._innerHTML;o.processInit=o.oldProcessInit;const a=e.subContext?.contextItem;xn(a,o,n,r)}function eo(t,n,e,r,o,a){n.subContext={},t.processUpdate=no,function(t,n,e,r,o,a){const{appendMarker:s,insertBefore:c}=yn(a,o),i=e.subContext;i.appendMarker=s;const l=t.owner,u=l._innerHTML;u.processInit=u.oldProcessInit,mn(u,i,n,r,c)}(t,e,n,r,a,o)}function ro(){return{tagJsType:"innerHTML",processInit:eo,processUpdate:no,delete:Mr}}function oo(t,n={}){return{tagJsType:J.host,processInit:so,processUpdate:ao,delete:co,options:{callback:t,...n}}}function ao(t,n,e,r){const o=bn(J.host,t,n,e,r);if(o)return o;const a=e.tagJsVar.options,s=e.element;a.callback(s,t,e)}function so(t,n,e){n.options.callback(t,n,e);const r=n.options;if(r.onInit){const t=e.element;r.onInit(t,n,e)}}function co(t){const n=t.tagJsVar,e=n.options;if(e.onDestroy){const r=t.element;Zr([],(function(){return e.onDestroy(r,n,t)}),t.stateOwner)}}function io(t,n,e){return{tagJsType:J.subscribe,processInit:Cn,processUpdate:mr,delete:Sn,callback:e,withDefault:n,states:ot(et()).states,Observables:[t]}}oo.onInit=t=>oo((()=>{}),{onInit:t}),oo.onDestroy=t=>oo((()=>{}),{onDestroy:t});const lo={tagElement:Kr,renderWithSupport:Xe,renderSupport:Ye,renderTagOnly:Te,paint:Ir}},149:(t,n,e)=>{function r({fxIn:t,fxOut:n,outPositionAbsolute:e=!0}){return{in:(n,e)=>o({fxName:t,...n},e),out:(t,r)=>a({fxName:n,outPositionAbsolute:e,...t},r)}}e.d(n,{tw:()=>b,fx:()=>x,rW:()=>f});const o=async({target:t,fxName:n="fadeInUp"},e)=>(t.style.opacity="0",e&&await c(e),t.style.opacity="1",s(n,t)),a=async({target:t,outPositionAbsolute:n=!0,fxName:e="fadeOutUp"},r)=>(n&&function(t){t.style.zIndex=t.style.zIndex||1;const n=t.offsetTop+"px",e=t.offsetLeft+"px",r=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",o=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=n,t.style.left=e,t.style.width=r,t.style.height=o,t.style.position="absolute"}),0)}(t),r&&await c(r),s(e,t));function s(t,n){let e;const r=new Promise((function(t){e=t}));return n.classList.add("animate__animated","animate__"+t),n.addEventListener("animationend",(function r(o){o.target===n&&(n.classList.remove("animate__animated","animate__"+t),n.removeEventListener("animationend",r),e(void 0))})),r}function c(t){return new Promise((n=>{setTimeout(n,t)}))}var i=e(717);const{in:l,out:u}=r({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:d,out:p}=r({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:h,out:g}=r({fxIn:"fadeIn",fxOut:"fadeOut"}),f=({stagger:t=100,fxIn:n,fxOut:e,duration:r="2s",inName:o="fadeInUp",outName:a="fadeOutDown",outPositionAbsolute:s=!1}={})=>{let c=0;const l=v((function(n){n.style.setProperty("--animate-duration",r);const e=t*c++;return l.fxIn({target:n},e).then((()=>{--c}))}),(function(n){n.style.setProperty("--animate-duration",r);const e=t*c++,o=l.fxOut({target:n},e).then((()=>{--c}));return(0,i.sj)(o),o}),n,e,o,a,s);return l.host},x=({fxIn:t,fxOut:n,stagger:e,inName:r="fadeInUp",outName:o="fadeOutDown",duration:a=".2s",outPositionAbsolute:s=!1}={})=>{const c=v((t=>(t.style.setProperty("--animate-duration",a),c.fxIn({target:t},e))),(t=>{t.style.setProperty("--animate-duration",a);const n=c.fxOut({target:t},e);return(0,i.sj)(n),n}),t,n,r,o,s);return c.host};function v(t,n,e,o,a,s,c){if(!e||!o){const t=r({fxIn:a,fxOut:s,outPositionAbsolute:c});e||(e=t.in),o||(o=t.out)}return{fxIn:e,fxOut:o,host:(0,i.ho)((()=>{}),{onInit:t,onDestroy:n})}}function b({fxIn:t,fxOut:n,duration:e=".2s",outPositionAbsolute:o=!1}={duration:".2s",outPositionAbsolute:!1}){if(!t||!n){const e=r({fxIn:"fadeInUp",fxOut:"fadeOutDown",outPositionAbsolute:o});t||(t=e.in),n||(n=e.out)}const a=(0,i.iB)();return i.dy`
    <div oninit=${t} ondestroy=${n} style.--animate-duration=${e}>${a}</div>
  `.acceptInnerHTML(a)}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={exports:{}};return t[r](a,a.exports,e),a.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{e.d(r,{gV:()=>cn,jG:()=>gn,fm:()=>t.fm,KH:()=>xn,bX:()=>t.bX,mK:()=>A});var t=e(717),n=e(232);const o=(0,t._q)((()=>(e=(0,t.fo)(0),r=(0,t.td)(0),o=0,s=0,c=(0,t.$q)((t=>[{renderCount:s,counter:o}]=t({renderCount:s,counter:o}))))=>(++s,t.dy.dom(a.allStrings2265941[1],(0,t.Ld)(e),r,o,(()=>{++o,e.next(o),r.value=o}),(0,n.v)({renderCount:s,name:"insideMultiRender"}))))),a={allStrings2265941:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"div",ch:[{nn:"span",ch:[{nn:"text",tc:"👍"},{nn:"span",at:[["id","👍-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"button",at:[["type","button"],["id","👍-counter-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"++👍"}]}]},{nn:"text",v:3},{nn:"hr"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"insideMultiRender"}]},{nn:"text",v:4}]}],[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var s=e(492);let c=null;function i(t=!0,n,r){null!==c&&(clearTimeout(c),console.debug("🏃 Cleared previous testing to start again..."));c=setTimeout((async()=>{n=n||l.views,console.debug("🏃 Prepare test suites...");const o=await async function(t,n=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let r=0;n&&(await Promise.resolve().then(e.bind(e,451)),++r),t.includes(d.Content)&&(await Promise.resolve().then(e.bind(e,118)),await Promise.resolve().then(e.bind(e,835)),++r),t.includes(d.Counters)&&(await Promise.resolve().then(e.bind(e,428)),++r),t.includes(d.Props)&&(await Promise.resolve().then(e.bind(e,749)),++r),t.includes(d.ProviderDebug)&&(await Promise.resolve().then(e.bind(e,186)),++r),t.includes(d.TagSwitchDebug)&&(await Promise.resolve().then(e.bind(e,168)),++r),t.includes(d.Child)&&(await Promise.resolve().then(e.bind(e,527)),++r),t.includes(d.Arrays)&&(await Promise.resolve().then(e.bind(e,692)),++r),t.includes(d.Mirroring)&&(await Promise.resolve().then(e.bind(e,774)),++r),t.includes(d.WatchTesting)&&(await Promise.resolve().then(e.bind(e,702)),++r),t.includes(d.FunInPropsTag)&&(await Promise.resolve().then(e.bind(e,157)),++r),t.includes(d.AttributeDebug)&&(await Promise.resolve().then(e.bind(e,178)),++r),t.includes(d.OneRender)&&(await Promise.resolve().then(e.bind(e,994)),++r),t.includes(d.Todo)&&(await Promise.resolve().then(e.bind(e,337)),++r),t.includes(d.Destroys)&&(await Promise.resolve().then(e.bind(e,236)),++r),console.debug(`🏃 Running ${r} test suites...`);try{const t=Date.now(),n=await(0,s.executeBrowserTests)(),e=Date.now()-t;return console.info(`✅ tests completed in ${e}ms`),n}catch(t){return console.error("❌ tests failed:",t),!1}}(n,r);t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}const l=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:[]});return JSON.parse(t)}();function u(){localStorage.taggedjs=JSON.stringify(l)}var d;!function(t){t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug"}(d||(d={}));const p=Object.values(d),h=(n=p)=>{const e=[...n].sort(((t,n)=>t.localeCompare(n)));return t.dy.dom(v.allStrings423455[0],e.map((n=>t.dy.dom(v.allStrings423455[1],"view-type-"+n,"view-type-"+n,l.views.includes(n)&&"checked",(()=>function(t,n=!0){l.views.includes(t)?f(t):g.next({type:t,checkTesting:n});u()}(n)),"view-type-"+n,n,`isolated.html#${n}`,`#${n}`).key(n))),n.length>1&&t.dy.dom(v.allStrings423455[2],(()=>n.forEach((t=>{x(t,!1),u()}))),(()=>n.forEach((t=>{f(t),u()})))))};h.tempNote="sections";const g=new t.xQ;function f(t){l.views=l.views.filter((n=>n!==t))}function x(t,n=!0){l.views.push(t),n&&l.autoTest&&i()}const v={allStrings423455:[[{nn:"div",ch:[{nn:"h3",ch:[{nn:"text",tc:"Sections"}]},{nn:"text",tc:"\x3c!-- checkbox menu --\x3e"},{nn:"div",at:[["style","display:flex;gap:1em;flex-wrap:wrap;margin:1em;"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n\n        "},{nn:"text",v:1}]}]}],[{nn:"div",ch:[{nn:"input",at:[["type","checkbox"],["id",{tagJsVar:0},null],["name",{tagJsVar:1},null],[{tagJsVar:2}],["click",{tagJsVar:3},null]]},{nn:"label",at:[["for",{tagJsVar:4},null]],ch:[{nn:"text",tc:"&nbsp;"},{nn:"text",v:5}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;text-decoration:none;"],["href",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🔗"}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"↗️"}]}]}],[{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"&nbsp;all"}]}]},{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"&nbsp;none"}]}]}]]},b=(0,t._q)(((n,e)=>t.dy.dom(m.allStrings19347[0],n,(()=>e(n))))),m={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},y=(0,t._q)(((e,r,o)=>(a="other",s=0,c=0,i=(0,t.$q)((t=>[{other:a,counter:s,renderCount:c}]=t({other:a,counter:s,renderCount:c}))),l=++c,{addArrayItem:u,myFunction:d,deleteItem:p,child:h,array:g}=e)=>t.dy.dom(w.allStrings598669[0],r.function.original?"taggjedjs-wrapped":"nowrap",r.count,h.myChildFunction.original?"taggjedjs-wrapped":"nowrap",d.original?"taggjedjs-wrapped":"nowrap",d,(0,t.J8)(h.myChildFunction),o,k.function,(()=>++s),g.length,g.map((t=>b(t,p).key(t))),u,s,(0,n.v)({renderCount:c,name:"funInProps_tag_child"})))),w={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},S=(0,t._q)((e=>(r=0,o=(0,t.$q)((t=>[r]=t(r))),a=++r,s=(t=>{if("Enter"===t.key){const n=t.target.value.trim();e(n),t.target.value=""}}))=>t.dy.dom(_.allStrings66965[0],s,(t=>{e(t.target.value),t.target.value=""}),e,(0,n.v)({renderCount:r,name:"addArrayComponent"})))),_={allStrings66965:[[{nn:"input",at:[["type","text"],["keyup",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"add by outside"}]},{nn:"text",v:3},{nn:"text",tc:"\n"}]]},k={function:()=>++k.count,count:0},C=(0,t._q)((()=>(e=[],r=0,o=0,a=!0,s="a",c=(()=>++r),i=(0,t.$q)((t=>[{array:e,counter:r,renderCount:o,showChild:a,somethingElse:s}]=t({array:e,counter:r,renderCount:o,showChild:a,somethingElse:s}))),l=++o,u=(t=>{e=e.map((t=>t)),e.push("string"==typeof t?t:"push"+e.length)}),d=(t=>e=e.filter((n=>n!==t))))=>t.dy.dom(V.allStrings360652[0],c,r,(0,n.v)({renderCount:o,name:"funInProps_tag_parent"}),k.function.original?"taggjedjs-wrapped":"nowrap",k.count,(()=>a=!a),e.length,u,a&&y({myFunction:c,array:e,addArrayItem:u,deleteItem:d,child:{myChildFunction:c}},k,c),S(u)))),V={allStrings360652:[[{nn:"button",at:[["id","fun-parent-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🤰 ++parent"}]},{nn:"span",at:[["id","fun_in_prop_display"]],ch:[{nn:"text",v:1}]},{nn:"text",v:2},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"🆎 main:"}]},{nn:"span",at:[["id","main_wrap_state"]],ch:[{nn:"text",v:3}]},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"button",at:[["id","toggle-fun-in-child"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"toggle child"}]},{nn:"text",tc:"array length: "},{nn:"text",v:6},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"reset add"}]},{nn:"hr"},{nn:"text",v:8},{nn:"text",tc:"\n  \n  "},{nn:"text",v:9},{nn:"text",tc:"\n"}]]},T=t._q.immutableProps(((n,e,r)=>(o=!1,a=(0,t.$q)((t=>[o]=t(o))))=>t.dy.dom(B.allStrings172763[0],n.completed,o,o?t.dy.dom(B.allStrings172763[2],n.title,(()=>o=!1),(t=>J(t,(t=>{!function(t,n,e,r){if(0===t.length)return void r.removeItem(n.id);r.updateToByIndex(n,{title:t},e)}(t,n,r,e),o=!1})))):t.dy.dom(B.allStrings172763[1],n.completed&&"✅",(t=>e.toggleItem(n,r)),n.completed&&"checked",(()=>e.toggleItem(n,r)),(()=>o=!o),n.title,(()=>e.removeItemByIndex(r))))));function J(t,n){if("Enter"===t.key){return n(t.target.value.trim()),!0}}const B={allStrings172763:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},j={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},P=t._q.immutableProps(((n,e,r,o)=>t.dy.dom(I.allStrings77156[0],o,o>1&&"s","/"===r,"/active"===r,"/completed"===r,n-o>0&&t.dy.dom(I.allStrings77156[1],(()=>e()))))),I={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const L=()=>window.location.hash.substring(1)||"/",E=()=>{const n=(0,t.SB)((()=>({route:L(),location:window.location}))),e=(0,t.uz)((t=>n.route=L())),r=(0,t.SB)((()=>(t=>{const n=()=>t(L());return window.addEventListener("hashchange",n),n})(e)));return(0,t.ev)((()=>window.removeEventListener("hashchange",r))),n},O=[],D=function(t){function n(n,e,r){return t[r]={...n,...e},t}return{addItem:function(n){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"===t?n:3&n|8).toString(16)})),title:n,completed:!1}),t},removeItem:function(n){return t.filter((t=>t.id!==n))},toggleItem:function(t,e){return n(t,{completed:!t.completed},e)},removeAll:function(){return t=[]},toggleAll:function(n){for(let e=t.length-1;e>=0;--e)t[e]={...t[e],completed:n};return t},removeCompleted:function(){for(let n=t.length-1;n>=0;--n)t[n].completed&&t.splice(n,1);return t},removeItemByIndex:function(n){return t.splice(n,1),t},completeItem:function(t,e){return n(t,{completed:!0},e)},updateItemByIndex:function(n,e){return t[e]={...n},t},updateToByIndex:n}}(O),A=()=>{const n=E().route,e=O.filter((t=>!t.completed)).length,r="/completed"===n,o="/active"===n&&O.filter((t=>!t.completed))||r&&O.filter((t=>t.completed))||O,a=O.length;return t.dy.dom(N.allStrings150746[0],!1,(n=>t._q.renderOnce=()=>t.dy.dom(j.allStrings47860[0],(t=>{J(t,(t=>n.addItem(t)))&&(t.target.value="")})))(D),a>0&&t.dy.dom(N.allStrings150746[1],e<1,(t=>D.toggleAll(t.target.checked)),o.map(((t,n)=>T(t,D,n).key(t.id))),P(a,D.removeCompleted,n,e)))},N={allStrings150746:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},$=(0,t._q)(((e,r,o)=>{let a=0,s=0;return(0,t.$q)((t=>[{counter:a,renderCount:s}]=t({counter:a,renderCount:s}))),++s,t.dy.dom(H.allStrings128026[0],o,(0,t.DE)(o),o instanceof Array,(()=>++a),a,a,(0,n.v)({renderCount:s,name:"innerHtmlTest"}))})),q=(0,t._q)(((n,e)=>(r=0,o=0,a=(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),s=++o)=>t.dy.dom(H.allStrings128026[1],n,e,(()=>++r),r,r,!1))),H={allStrings128026:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"no props test"}]},{nn:"div",at:[["style","border:2px solid purple;"]],ch:[{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectInstance:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectTagArray:"},{nn:"text",v:2}]},{nn:"button",at:[["id","innerHtmlTest-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"increase innerHtmlTest "},{nn:"text",v:4}]},{nn:"span",at:[["id","innerHtmlTest-counter-display"]],ch:[{nn:"text",v:5}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},M=(0,t._q)(((n,e,r)=>t.dy.dom(X.allStrings795052[0],n,e,r))),R=(0,t._q)(((e="childTests")=>(e=0,r=0,o=(0,t.$q)((t=>[{renderCount:e,counter:r}]=t({renderCount:e,counter:r}))),a=++e)=>t.dy.dom(X.allStrings795052[2],M(1,2,t.dy.dom(X.allStrings795052[3],Date.now())),$({},2,t.dy.dom(X.allStrings795052[4],(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest"}))),(()=>{const n=(0,t.iB)();return t.dy.dom(X.allStrings795052[1],11,n,22).acceptInnerHTML(n)})().innerHTML=t.dy.dom(X.allStrings795052[5],(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest-c"})),q(22,t.dy.dom(X.allStrings795052[6],(()=>++r),r,r,(0,n.v)({renderCount:e,name:"innerHtmlPropsTest child"}))),function({child:n}){return t.dy.dom(X.allStrings795052[8],n)}({child:t.dy.dom(X.allStrings795052[7],(()=>++r),r,r)}),(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests"}))));const X={allStrings795052:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"xxxxx"}]},{nn:"div",ch:[{nn:"text",tc:"hello other world "},{nn:"text",v:0},{nn:"text",tc:" - "},{nn:"text",v:1}]},{nn:"div",at:[["style","border:2px solid red;"]],ch:[{nn:"text",tc:"***"},{nn:"text",v:2},{nn:"text",tc:"***"}]}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child as prop"}]},{nn:"text",v:0}]}]]};let z=(0,t.td)(0);const W=(0,t._q)((()=>(e=!0,r=0,o=(0,t.$q)((t=>[{renderCount:r,on:e}]=t({renderCount:r,on:e}))),a=++r)=>t.dy.dom(U.allStrings90445[0],z,e,e&&Y(),(()=>{e=!e,console.log("on is now",e)}),e?"destroy":"restore",(0,n.v)({renderCount:r,name:"destroys"})))),Y=(0,t._q)((()=>(n=(0,t.ev)((()=>{++z.value,console.log("tag onDestroy called",z.value)})),e=console.log("toDestroy render"))=>t.dy.dom(U.allStrings90445[1],t.ho.onDestroy((()=>{++z.value,console.log("toDestroy on destroy called",z.value)}))))),U={allStrings90445:[[{nn:"text",tc:"\n  destroyCount: "},{nn:"span",at:[["id","destroyCount"]],ch:[{nn:"text",v:0}]},{nn:"text",tc:"on/off: "},{nn:"text",v:1},{nn:"text",tc:"\n  \n  "},{nn:"text",v:2},{nn:"button",at:[["id","toggle-destroys"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","destroyable-content"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"will be destroyed"}]}]]};var F=e(149);const Q=(0,t._q)((({score:e,playerIndex:r})=>{let o=0;return(0,t.$q)((t=>[o]=t(o))),++o,t.dy.dom(K.allStrings67878[0],e.frame,`score-data-${r}-${e.frame}-inside-button`,(()=>++e.score),e.score,`score-data-${r}-${e.frame}-inside-display`,e.score,(()=>++o),(0,n.v)({renderCount:o,name:"scoreData"+e.frame}))})),K={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},G=(0,t._q)((()=>(e=(0,t.SB)([]),r=0,o=0,a=(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))))=>{const s=(0,t.IX)(["d","e","f"]),c=(0,t.SB)(["a","b","c"]),i=(0,t.SB)((()=>(0,F.rW)())),l=()=>({name:"Person "+e.length,scores:"0,".repeat(0).split(",").map(((t,n)=>({frame:n+1,score:Math.floor(4*Math.random())+1})))});function u(t){for(let n=0;n<t;++n)s[s.length]=s.length.toString()}return++r,t.dy.dom(tt.allStrings826734[0],(0,t.Ld)(s,(n=>n.map(((n,e)=>t.dy.dom(tt.allStrings826734[1],i,e,o,n,s.length,(()=>s.splice(e,1))).key(n))))),(()=>++o),o,(()=>u(1)),(()=>u(10)),(()=>{setTimeout((()=>{s[s.length]=s.length.toString()}),1e3)}),(()=>{setTimeout((()=>{s.length=0}),1e3)}),c.map(((n,e)=>t.dy.dom(tt.allStrings826734[2],o,e,n,c.length,(()=>c.splice(e,1))).key(n))),(()=>++o),o,(()=>c[c.length]=c.length.toString()),Z({players:e,getNewPlayer:l}),(()=>{e.push(l())}),e.length+1,(()=>{e.push(l()),e.push(l()),e.push(l())}),(()=>{e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l()),e.push(l())}),e.length>0&&t.dy.dom(tt.allStrings826734[3],(0,F.fx)({duration:".1s"}),(()=>e.length=0)),(0,n.v)({renderCount:r,name:"arrayTests.ts"}))})),Z=(0,t._q)((({players:n,getNewPlayer:e})=>{const r=n.map(((r,o)=>function(n,e,r,o){return t.dy.dom(tt.allStrings826734[5],(0,F.fx)({duration:".1s"}),n.name,e,n.scores.map(((n,e)=>t.dy.dom(tt.allStrings826734[6],(0,F.fx)(),`score-data-${e}-${n.frame}-outside-button`,(()=>++n.score),n.score,`score-data-${e}-${n.frame}-outside-display`,n.score,Q({score:n,playerIndex:e})).key(n))),n.edit&&t.dy.dom(tt.allStrings826734[7],(()=>{r.splice(e,1),n.edit=!n.edit})),n.edit&&t.dy.dom(tt.allStrings826734[8],"player-remove-promise-btn-"+e,(async()=>{n.edit=!n.edit,r.splice(e,1)})),"player-edit-btn-"+e,(()=>n.edit=!n.edit),(()=>{r.splice(e,0,o())}))}(r,o,n,e).key(r)));return t.dy.dom(tt.allStrings826734[4],r)}));const tt={allStrings826734:[[{nn:"text",tc:"\x3c!--arrayTests.js--\x3e"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"signal array test"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]},{nn:"div",ch:[{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:2}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"add number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"add 10 number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"add number by delay"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"delay clear array"}]}]}]},{nn:"fieldset",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"simple array test"}]},{nn:"text",v:7},{nn:"div",ch:[{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:9}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"add number"}]}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:11}]},{nn:"button",at:[["id","array-test-push-item"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"push item "},{nn:"text",v:13}]},{nn:"button",at:[["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"push 3 items"}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"push 9 items"}]},{nn:"text",v:16},{nn:"text",tc:"\n\n    "},{nn:"text",v:17},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","border:1px solid black;border-radius:.2em"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"index:"},{nn:"text",v:1},{nn:"text",tc:" counter:"},{nn:"text",v:2},{nn:"text",tc:" content:"},{nn:"text",v:3},{nn:"text",tc:" length:"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]}]}],[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"text",v:0},{nn:"text",tc:" index:"},{nn:"text",v:1},{nn:"text",tc:" x:"},{nn:"text",v:2},{nn:"text",tc:" length:"},{nn:"text",v:3},{nn:"button",at:[["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]}]}],[{nn:"button",at:[[{tagJsVar:0}],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove all"}]}],[{nn:"text",tc:"\x3c!-- playersLoop.js --\x3e"},{nn:"text",v:0},{nn:"text",tc:"\x3c!-- end:playersLoop.js --\x3e"}],[{nn:"div",at:[["style","background-color:black;"],[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",tc:"name:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"index:"},{nn:"text",v:2}]},{nn:"div",at:[["style","background-color:purple;padding:.5em"]],ch:[{nn:"text",tc:"scores:\n        "},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n      "},{nn:"text",v:5},{nn:"button",at:[["id",{tagJsVar:6},null],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"edit"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"add before"}]}]}],[{nn:"div",at:[["class","animate__slow"],[{tagJsVar:0}]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"outer score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6}]}]}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"remove"}]}],[{nn:"button",at:[["id",{tagJsVar:0},null],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove by promise"}]}]]},nt=(0,t._q)(((e="tagSwitchDebug")=>{let r=null,o=0;(0,t.$q)((t=>[{renderCount:o,selectedTag:r}]=t({renderCount:o,selectedTag:r})));let a="select tag below";switch(r){case null:a="null, select tag below";break;case"":a=t.dy.dom(ct.allStrings484932[0]);break;case"1":a=rt({title:"value switch"});break;case"2":a=ot({title:"value switch"});break;case"3":a=at({title:"value switch"})}let s=t.dy.dom(ct.allStrings484932[1]);switch(r){case null:s=t.dy.dom(ct.allStrings484932[2]);break;case"":s=t.dy.dom(ct.allStrings484932[3]);break;case"1":s=rt({title:"tag switch"});break;case"2":s=ot({title:"tag switch"});break;case"3":s=at({title:"tag switch"})}return++o,t.dy.dom(ct.allStrings484932[4],(null===r?"null":void 0===r&&"undefined")||""===r&&"empty-string"||r,(function(t){r=t.target.value,"undefined"===r&&(r=void 0),"null"===r&&(r=null)}),"string"!=typeof r||r.length?{}:{selected:!0},void 0===r?{selected:!0}:{},null===r?{selected:!0}:{},"1"===r?{selected:!0}:{},"2"===r?{selected:!0}:{},"3"===r?{selected:!0}:{},a,s,"3"===r?at({title:"ternary simple"}):rt({title:"ternary simple"}),et({selectedTag:r}),st({selectedTag:r}),(0,n.v)({renderCount:o,name:"tagSwitchDebug"}))})),et=(0,t._q)((({selectedTag:n})=>{const e="3"===n?at({title:"ternaryPropTest"}):rt({title:"ternaryPropTest"});return t.dy.dom(ct.allStrings484932[5],n,e)})),rt=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[6],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),ot=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[7],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),at=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[8],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),st=(0,t._q)((({selectedTag:n},e="arraySwitching")=>{switch(n){case void 0:return t.dy.dom(ct.allStrings484932[9]);case null:return t.dy.dom(ct.allStrings484932[10]);case"":return t.dy.dom(ct.allStrings484932[11]);case"1":return t.dy.dom(ct.allStrings484932[12],rt({title:`tag ${n}`}));case"2":return t.dy.dom(ct.allStrings484932[13],["b","c"].map((e=>t.dy.dom(ct.allStrings484932[14],ot({title:`array ${n} ${e}`})).key(e))));case"3":return t.dy.dom(ct.allStrings484932[15],["d","e","f"].map((e=>t.dy.dom(ct.allStrings484932[16],at({title:`array ${n} ${e}`})).key(e))))}return t.dy.dom(ct.allStrings484932[17])})),ct={allStrings484932:[[{nn:"div",at:[["id","empty-string-1"]]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"null, select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"empty-string, select tag above"}]}],[{nn:"div",at:[["id","selectTag-wrap"]],ch:[{nn:"text",tc:"selectedTag: |"},{nn:"text",v:0},{nn:"text",tc:"|"}]},{nn:"select",at:[["id","tag-switch-dropdown"],["change",{tagJsVar:1},null]],ch:[{nn:"option"},{nn:"text",tc:"\x3c!-- TODO: implement selected attribute ---\x3e"},{nn:"option",at:[["value",""],[{tagJsVar:2}]],ch:[{nn:"text",tc:"empty-string"}]},{nn:"option",at:[["value","undefined"],[{tagJsVar:3}]],ch:[{nn:"text",tc:"undefined"}]},{nn:"option",at:[["value","null"],[{tagJsVar:4}]],ch:[{nn:"text",tc:"null"}]},{nn:"option",at:[["value","1"],[{tagJsVar:5}]],ch:[{nn:"text",tc:"tag 1"}]},{nn:"option",at:[["value","2"],[{tagJsVar:6}]],ch:[{nn:"text",tc:"tag 2"}]},{nn:"option",at:[["value","3"],[{tagJsVar:7}]],ch:[{nn:"text",tc:"tag 3"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],["id","switch-tests-wrap"]],ch:[{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 1 - string | Tag"}]},{nn:"div",ch:[{nn:"text",v:8}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 2 - Tag"}]},{nn:"div",ch:[{nn:"text",v:9}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3 - ternary (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:10}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3.2 - ternary via prop (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:11}]}]},{nn:"div",at:[["style","border:1px solid red;flex-grow:1"],["id","arraySwitching-test-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 4 - arraySwitching"}]},{nn:"div",at:[["id","arraySwitching-wrap"]],ch:[{nn:"text",v:12}]}]}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["id","ternaryPropTest-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:":"},{nn:"text",v:1}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag1"]],ch:[{nn:"div",at:[["id","tagSwitch-1-hello"]],ch:[{nn:"text",tc:"Hello 1 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag2"]],ch:[{nn:"div",at:[["id","tagSwitch-2-hello"]],ch:[{nn:"text",tc:"Hello 2 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag3"]],ch:[{nn:"div",at:[["id","tagSwitch-3-hello"]],ch:[{nn:"text",tc:"Hello 3 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"text",tc:"its an undefined value"}],[{nn:"text",tc:"its a null value"}],[{nn:"text",tc:"space"}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",tc:"nothing to show for in arrays"}]]},it=(0,t._q)((()=>{const n=lt();return t.dy.dom(ut.allStrings156734[0],n,n)})),lt=()=>{let n=0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(ut.allStrings156734[1],n,(()=>++n),n)},ut={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},dt=(e,r)=>t._q.use=(o=(0,t.SB)("statePropDebug.tag.ts"),a=!1,s=0,c=(0,t.$q)((t=>[{edit:a,renderCount:s}]=t({edit:a,renderCount:s}))),i=++s)=>t.dy.dom(pt.allStrings53929[0],e,(()=>a=!a),a,r,(0,n.v)({renderCount:s,name:"statePropDebug-tag"})),pt={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},ht=(0,t._q)(((e="propsDebugMain")=>(e=0,r=0,o=0,a={test:33,x:"y"},s=(0,t.SB)((()=>new Date)),c=JSON.stringify(a,null,2),i=!0,l=(0,t.$q)((t=>[{syncPropNumber:e,propNumber:r,renderCount:o,propsJson:a,date:s,statePropDisplay:i}]=t({syncPropNumber:e,propNumber:r,renderCount:o,propsJson:a,date:s,statePropDisplay:i}))))=>t.dy.dom(bt.allStrings3197847[0],(t=>a=JSON.parse(t.target.value)),c,c,++o,(()=>++r),r,r,xt({propNumber:r,propsJson:a,propNumberChange:t=>{r=t}}),e,(()=>++e),(0,n.v)({renderCount:o,name:"sync_props_callback"}),ft({syncPropNumber:e,propNumberChange:t=>e=t,parentTest:t=>t}),i&&dt(r,t.dy.dom(bt.allStrings3197847[1])),(()=>i=!i),s,function(t){const n=new Date(t),e=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),o=String(n.getDate()).padStart(2,"0"),a=String(n.getHours()).padStart(2,"0"),s=String(n.getMinutes()).padStart(2,"0");return{date:`${e}-${r}-${o}`,time:`${a}:${s}`}}(s).date,(t=>{const n=t.target.value;s=new Date(n)}),gt({date:s})))),gt=(0,t._q)((({date:n})=>t.dy.dom(bt.allStrings3197847[2],n))),ft=(0,t._q)((({syncPropNumber:e,propNumberChange:r,parentTest:o})=>(a=(0,t.SB)("syncPropDebug"),s=0,c=0,i=(0,t.$q)((t=>[{counter:s,renderCount:c}]=t({counter:s,renderCount:c}))))=>(++c,e%2==1&&r(e+=1),t.dy.dom(bt.allStrings3197847[3],e,(()=>r(++e)),s,o(s),(()=>{o(++s)}),(0,n.v)({renderCount:c,name:"child_sync_props_callback"}))))),xt=(0,t._q)((({propNumber:n,propsJson:e,propNumberChange:r})=>(o=(0,t.SB)("propsDebug"),a=0,s=0,c=(0,t.RW)((t=>[n]=t(n))),i=n,l=(0,t.$q)((t=>[{renderCount:a,propNumberChangeCount:s,myPropNumber:i}]=t({renderCount:a,propNumberChangeCount:s,myPropNumber:i}))),u=(0,t.YP)([n],(()=>i=n)),d=(0,t.YP)([i],(()=>++s)))=>t.dy.dom(bt.allStrings3197847[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(d,null,2),(()=>r(++i)),i,i,(()=>++n),n,n,(()=>++a),++a,(()=>++i),i,s,vt({propNumber:i,callback:()=>++i})))),vt=t._q.immutableProps((({propNumber:e,callback:r})=>(o=(0,t.SB)("propFnUpdateTest"),a=0,s=(0,t.$q)((t=>[a]=t(a))))=>(++a,t.dy.dom(bt.allStrings3197847[5],r,e,e,(0,n.v)({renderCount:a,name:"propFnUpdateTest"})))));const bt={allStrings3197847:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},mt=(0,t._q)((n=>t.dy.dom(yt.allStrings248815[0],(()=>n.showDialog=!1),n.showDialog?t.dy.dom(yt.allStrings248815[1],JSON.stringify(n,null,2)):"no dialog"))),yt={allStrings248815:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]};class wt{constructor(){this.tagDebug=0,this.showDialog=!1}}const St=()=>({counter:0});function _t(){return{upper:t.a.create(kt),test:0}}function kt(){return(0,t.SB)("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const Ct=(0,t._q)(((e="providerDebugBase")=>{t.a.create(St);const r=t.a.create(wt),o=t.a.create(_t);let a=0,s=0;return(0,t.$q)((t=>[{propCounter:a,renderCount:s}]=t({propCounter:a,renderCount:s}))),r.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++s,t.dy.dom(Jt.allStrings6601324[0],o.test,o.upper?.test||"?",r.tagDebug||"?",(()=>++o.test),o.test,o.test,(()=>++o.upper.test),o.upper.test,o.upper.test,(()=>++r.tagDebug),r.tagDebug,r.tagDebug,(()=>++a),a,a,(()=>r.showDialog=!0),r.showDialog,Vt({propCounter:a,propCounterChange:t=>{a=t}}),s,(0,n.v)({renderCount:s,name:"providerDebugBase"}),mt(r),!1)})),Vt=(0,t._q)((({propCounter:e,propCounterChange:r,_:o="providerDebug.js@child"})=>{const a=t.a.inject(St),s=t.a.inject(_t),c=t.a.inject(wt),i=t.a.inject(kt);let l=!1,u=0;(0,t.$q)((t=>[{showProProps:l,renderCount:u}]=t({showProProps:l,renderCount:u})));const d=(0,t._)(),p=(0,t.SB)((()=>new t.xQ));return(0,t.nc)((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),p.subscribe((t=>{d((n=>{s.test=t}))()}))})),++u,t.dy.dom(Jt.allStrings6601324[4],(()=>++s.test),s.test,s.test,(()=>++i.test),i.test,i.test,(()=>++a.counter),a.counter,a.counter,(()=>p.next(s.test+1)),s.test,(()=>++c.tagDebug),c.tagDebug,c.tagDebug,(()=>r(++e)),e,e,(()=>c.showDialog=!0),c.showDialog,(()=>l=!l),l?"hide":"show",l&&t.dy.dom(Jt.allStrings6601324[5],(0,F.fx)(),Tt(c)),u,(0,n.v)({renderCount:u,name:"providerDebugInner"}))})),Tt=(0,t._q)((n=>t.dy.dom(Jt.allStrings6601324[6],JSON.stringify(n,null,2)))),Jt={allStrings6601324:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    TODOTODOTODOTODO\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}]]},Bt=(0,t._q)((({label:n,memory:e})=>{let r=!1,o=!1;return(0,t.$q)((t=>[{mouseOverEditShow:r,edit:o}]=t({mouseOverEditShow:r,edit:o}))),t.dy.dom(jt.allStrings140407[0],(()=>r=!0),(()=>r=!1),n,e.counter,r||"false",(()=>++e.counter),o||r?"visible":"hidden",(()=>o=!o))})),jt={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Pt=Date.now(),It=t._q.immutableProps((({appCounterSubject:n},e="countersDebug")=>((0,t.SB)("countersDebug state"),t.dy.dom(At.allStrings9522277[0],(0,t.Ld)(t.xQ.globalSubCount$),(()=>console.info("subs",t.xQ.globalSubs)),(()=>n.next((n.value||0)+1)),(0,t.Ld)(n),n.value,Dt())))),Lt=t._q.deepPropWatch((({propCounter:e,increasePropCounter:r})=>(o=0,a=0,s=0,c=(0,t.$q)((t=>[{elmInitCount:s,otherCounter:o,renderCount:a}]=t({elmInitCount:s,otherCounter:o,renderCount:a}))),i=++a)=>t.dy.dom(At.allStrings9522277[1],t.ho.onInit((()=>++s)),s,r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"inner_counters"})))),Et=t._q.watchProps((({propCounter:e,increasePropCounter:r})=>{let o=0,a=0;return(0,t.$q)((t=>[{otherCounter:o,renderCount:a}]=t({otherCounter:o,renderCount:a}))),++a,t.dy.dom(At.allStrings9522277[2],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"shallow_counters"}))})),Ot=t._q.immutableProps((({propCounter:e,increasePropCounter:r})=>{let o=0,a=0;return(0,t.$q)((t=>[{otherCounter:o,renderCount:a}]=t({otherCounter:o,renderCount:a}))),++a,t.dy.dom(At.allStrings9522277[3],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"immutable_counters"}))})),Dt=()=>t._q.use=(e=0,r=0,o=0,a=0,s=0,c=0,i=0,l=(0,t._)(),u=(0,t.uz)((t=>{t})),d=(()=>{++c}),p=(0,t.SB)((()=>({propCounter:c,increasePropCounter:d}))),h=(0,t.$q)((t=>[{counter:o,renderCount:s,propCounter:c,initCounter:i,immutableProps:p,statesRenderCount:e,statesRenderCount2:r}]=t({counter:o,renderCount:s,propCounter:c,initCounter:i,immutableProps:p,statesRenderCount:e,statesRenderCount2:r}))),g=(0,t.SB)((()=>new t.xQ(o))),f=(0,t.SB)((()=>new t.xQ(0))),x=(0,t.SB)((()=>new t.v0("222"))),v=(()=>{++o,x.next("333-"+o)}),b=t.xQ.all([x,g]),m=t.fo.all([x,g]),y=(0,t.SB)((()=>({counter:0}))),w=(0,t.SB)((()=>Date.now())),S=(0,t.nc)((()=>{++i,console.info("countersDebug.ts: 👉 i should only ever run once"),g.subscribe(l((t=>{o=t}))),g.subscribe(u)})))=>(p.propCounter!==c&&(p={propCounter:c,increasePropCounter:d}),++s,t.dy.dom(At.allStrings9522277[5],i,e,(()=>{++e}),r,(()=>{++r}),(t=>o=Number(t.target.value)||0),d,c,c,v,o,o>1&&t.dy.dom(At.allStrings9522277[6],v,o,o),(()=>g.next(o+1)),(0,t.Ld)(g),(()=>{setTimeout((()=>{f.next(f.value+1)}),10)}),(0,t.Ld)(f),(0,t.Ld)(b,(()=>o)),(0,t.Ld)(m,(()=>o)),!0,Bt({label:"a-a-😻",memory:y}),Bt({label:"b-b-😻",memory:y}),y.counter,(()=>++y.counter),Lt({propCounter:c,increasePropCounter:d}),Et({propCounter:c,increasePropCounter:d}),Ot(p),(({propCounter:e,increasePropCounter:r})=>{let o=0,a=0,s="noWatchPropCounters";return(0,t.$q)((t=>[{otherCounter:o,renderCount:a,noWatchPropCounters:s}]=t({otherCounter:o,renderCount:a,noWatchPropCounters:s}))),++a,t.dy.dom(At.allStrings9522277[4],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"nowatch_counters"}))})({propCounter:c,increasePropCounter:d}),t.ho.onInit((t=>t.innerText=(Date.now()-Pt).toString())),t.ho.onInit((t=>t.innerText=(Date.now()-w).toString())),(0,n.v)({renderCount:s,name:"counters"}))),At={allStrings9522277:[[{nn:"text",tc:"\x3c!--counters--\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"text",tc:"👉 Subscription count:"},{nn:"span",at:[["id","👉-counter-sub-count"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"log subs"}]},{nn:"div",ch:[{nn:"button",at:[["id","counters-app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-display"]],ch:[{nn:"text",v:3}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-subject-display"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],[{tagJsVar:0}]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"text",tc:"🔥 elmInitCount:"},{nn:"span",at:[["id","🔥-init-counter"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️-inner-counter"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"❤️-inner-counter propCounter:"},{nn:"text",v:3}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-inner-display"]],ch:[{nn:"text",v:4}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🤿-deep-counter"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤿 otherCounter:"},{nn:"text",v:6}]},{nn:"span",ch:[{nn:"text",tc:"🤿 "},{nn:"span",at:[["id","🤿-deep-display"]],ch:[{nn:"text",v:7}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:8}]},{nn:"text",v:9},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"text",tc:"initCounter:"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"😱 statesRenderCount:"},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"😱 ++statesRenderCount"}]}]},{nn:"div",ch:[{nn:"text",tc:"😱😱 statesRenderCount2:"},{nn:"text",v:3},{nn:"button",at:[["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"😱😱 ++statesRenderCount2"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"input",at:[["id","set-main-counter-input"],["placeholder","input counter value"],["keyup",{tagJsVar:5},null]]},{nn:"div",ch:[{nn:"button",at:[["id","❤️-increase-counter"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"❤️ propCounter:"},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-counter-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-standalone-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥦 stand alone counters"}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","🥦-standalone-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"text",v:11},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-counter"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🥦&lt;"},{nn:"span",at:[["id","subject-counter-subject-display"]],ch:[{nn:"text",v:13}]},{nn:"text",tc:"&gt;"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-async-counter"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🔀 🥦 ++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🔀 🥦&lt;"},{nn:"span",at:[["id","subject-async-counter-subject-display"]],ch:[{nn:"text",v:15}]},{nn:"text",tc:"&gt;"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 1"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject"]],ch:[{nn:"text",v:16}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 2"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject-2"]],ch:[{nn:"text",v:17}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shared memory"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:.5em"],["class.bold.text-blue",{tagJsVar:18},"class"]],ch:[{nn:"text",v:19},{nn:"text",tc:"\n      "},{nn:"text",v:20}]},{nn:"text",tc:"memory.counter:😻"},{nn:"text",v:21},{nn:"button",at:[["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"increase 😻"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"inner counter"}]},{nn:"text",v:23}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shallow props"}]},{nn:"text",v:24}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"immutable props"}]},{nn:"text",v:25}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"nowatch props"}]},{nn:"text",v:26}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ page load to display in&nbsp;"},{nn:"span",at:[[{tagJsVar:27}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ read in&nbsp;"},{nn:"span",at:[[{tagJsVar:28}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"text",v:29},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","conditional-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"conditional counter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","conditional-display"]],ch:[{nn:"text",v:2}]}]}]}]]},Nt=(0,t._q)((()=>{let n=!0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom($t.allStrings52782[0],5,5,n&&t.dy.dom($t.allStrings52782[1]),n&&t.dy.dom($t.allStrings52782[2]))})),$t={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]};var qt=e(902);const Ht=t._q.deepPropWatch((()=>(n=0,e=0,r=0,o=0,a=!1,s=0,c=0,i=(0,t.$q)((t=>[{stateNum:n,stateNumChangeCount:e,slowChangeCount:r,subjectChangeCount:o,truthChange:a,truthChangeCount:s,truthSubChangeCount:c}]=t({stateNum:n,stateNumChangeCount:e,slowChangeCount:r,subjectChangeCount:o,truthChange:a,truthChangeCount:s,truthSubChangeCount:c}))),l=(0,t.YP)([n],(()=>++e)),u=t.YP.noInit([n],(0,t.uz)((()=>++r))),d=t.YP.asSubject([n],(0,t.uz)((()=>++o))),p=t.YP.truthy([a],(0,t.uz)((()=>++s))),h=t.YP.truthy.asSubject([a],(0,t.uz)((t=>++c))))=>t.dy.dom(Mt.allStrings2187613[0],n,(()=>++n),e,r,u,o,(0,t.Ld)(d),a?"true":"false",p||"false",s,(0,t.Ld)(h),c,(()=>a=!a),a?"true":"false"))),Mt={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},Rt=(0,t._q)((()=>{let n="a",e=!0;return(0,t.$q)((t=>[{selected:n,isOrange:e}]=t({selected:n,isOrange:e}))),t.dy.dom(Xt.allStrings154868[0],(t=>n=t.target.value),["a","b","c"].map((e=>t.dy.dom(Xt.allStrings154868[1],e,e==n?"selected":"",e,e==n?"true":"false").key(e))),(t=>e=t.target.checked),e&&"checked",e?"true":"false",e?"orange":"",e?"black":"",!!e,!!e,e?"background-orange text-black":"",{class:"text-white"+(e?" background-orange":"")})})),Xt={allStrings154868:[[{nn:"input",at:[["id","attr-input-abc"],["placeholder","a b or c"],["change",{tagJsVar:0},null]]},{nn:"select",at:[["id","select-sample-drop-down"]],ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Special Attributes"}]},{nn:"div",ch:[{nn:"input",at:[["type","checkbox"],["id","toggle-backgrounds"],["change",{tagJsVar:2},null],[{tagJsVar:3}]]},{nn:"text",tc:" - "},{nn:"text",v:4}]},{nn:"div",at:[["style","display: flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"ol",ch:[{nn:"li",ch:[{nn:"div",at:[["id","attr-style-strings"],["style.background-color",{tagJsVar:5},"style"],["style.color",{tagJsVar:6},"style"]],ch:[{nn:"text",tc:"style.background-color=&dollar;{'orange'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-class-booleans"],["class.background-orange",{tagJsVar:7},"class"],["class.text-black",{tagJsVar:8},"class"]],ch:[{nn:"text",tc:"class.background-orange=&dollar;{true}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-inline-class"],["class",{tagJsVar:9},null]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange text-black'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-dynamic-inline-class"],[{tagJsVar:10}]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange'} but always white"}]}]}]}]},{nn:"style",ch:[{nn:"text",tc:".background-orange {background-color:orange}\n      .text-black {color:black}\n      .text-white {color:white}"}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],[{tagJsVar:1}]],ch:[{nn:"text",v:2},{nn:"text",tc:" - "},{nn:"text",v:3}]}]]},zt=[{view:d.OneRender,tag:()=>t._q.renderOnce=(e=new t.KU(0),r=0)=>{++r;const s=t.xQ.all([0,"all",4]);return t.dy.dom(a.allStrings2265941[0],(0,t.Ld)(s.pipe((t=>JSON.stringify(t)))),(0,t.Ld)(e),(()=>++e.value),(0,n.v)({renderCount:r,name:"oneRender_tag_ts"}),o())},emoji:"1️⃣"},{view:d.Props,tag:ht,emoji:"🧳"},{view:d.WatchTesting,tag:Ht,emoji:"⌚️"},{view:d.TableDebug,tag:Nt},{view:d.ProviderDebug,tag:Ct},{view:d.TagSwitchDebug,tag:nt,emoji:"🔀"},{view:d.Mirroring,tag:it,emoji:"🪞"},{view:d.Arrays,tag:G,emoji:"⠇"},{view:d.Content,tag:qt.kQ,emoji:"📰",debug:!0},{view:d.Child,tag:R,emoji:"👶"},{view:d.Destroys,tag:W,emoji:"🗑️"},{view:d.FunInPropsTag,tag:C},{view:d.AttributeDebug,tag:Rt,emoji:"🏹"},{view:d.Todo,tag:(0,t._q)(A)},{view:d.Counters,tag:It,emoji:"💯"}],Wt=(0,t._q)(((n,e=l.views)=>{const r=(0,t.SB)((()=>zt.filter((t=>{if(e.includes(t.view))return!0})).map((({view:t,title:e,emoji:r,tag:o,...a})=>({title:e||t,output:t===d.Counters?o({appCounterSubject:n}):o(),view:t,emoji:r,...a}))).sort(((t,n)=>t.view.localeCompare(n.view)))));return t.dy.dom(Ut.allStrings1668984[0],r.map((t=>Yt(t).key(t.view))))})),Yt=n=>{const{emoji:e,view:r,title:o,output:a,debug:s}=n;return t.dy.dom(Ut.allStrings1668984[1],r,e,o,n.contentHide?"none":"",a,"section_"+n.view,(()=>n.contentHide=!n.contentHide),n.contentHide?"grey":"")},Ut={allStrings1668984:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["style","flex:2 2 20em"]],ch:[{nn:"a",at:[["id",{tagJsVar:0},null]],ch:[{nn:"text",tc:"\x3c!-- ⚓️ --\x3e"}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",v:1},{nn:"text",tc:" "},{nn:"text",v:2}]},{nn:"div",at:[["style.display",{tagJsVar:3},"style"]],ch:[{nn:"text",v:4}]},{nn:"div",at:[["style","display:flex;"]],ch:[{nn:"button",at:[["style","flex:1;"],["id",{tagJsVar:5},null],["click",{tagJsVar:6},null],["style.background-color",{tagJsVar:7},"style"]],ch:[{nn:"text",tc:"👁️ hide/show"}]}]}]},{nn:"div",at:[["style","font-size:0.6em;text-align:right;"]],ch:[{nn:"a",at:[["href","#top"]],ch:[{nn:"text",tc:"⏫"}]}]}]}]]},Ft=3e3,Qt=6e3,Kt=(0,t._q)((()=>{let n,e,r=0,o=0,a=0;(0,t.$q)((t=>[{intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a}]=t({intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a})));const s=(0,t._)(),c=()=>++r,i=()=>{console.info("🟢 interval test 0 started..."),a=0,e=setInterval(s((()=>{a+=500,a>=Ft&&(a=0)})),500),console.info("▶️ interval started"),n=setInterval(s((()=>{c()})),Ft)},l=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return(0,t.nc)(i),(0,t.ev)(l),++o,t.dy.dom(Zt.allStrings838008[0],Ft,n,c,r,o,Ft,a,a,(()=>{n||e?l():i()}),n||e?"red":"green",(()=>setTimeout(s((()=>{a+=200})),1e3)))})),Gt=(0,t._q)((()=>{let n,e,r=0,o=0,a=0;(0,t.$q)((t=>[{intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a}]=t({intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a})));const s=(0,t._)(),c=()=>++r;const i=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function l(){if(n)return i();console.info("🟢 interval test 1 started..."),a=0,e=setInterval(s((()=>{a+=500,a>=Qt&&(a=0)})),500),n=setInterval(s((()=>{c(),console.info("slow interval ran")})),Qt)}return(0,t.nc)(l),(0,t.ev)(i),++o,t.dy.dom(Zt.allStrings838008[1],Qt,n,c,r,o,Qt,a,a,l,n?"red":"green")})),Zt={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},tn=(0,t._q)((()=>{let n="tagJsDebug.js",e=!1,r=0;return(0,t.$q)((t=>[{_firstState:n,showIntervals:e,renderCount:r}]=t({_firstState:n,showIntervals:e,renderCount:r}))),++r,t.dy.dom(nn.allStrings77500[0],(()=>e=!e),e&&t.dy.dom(nn.allStrings77500[1],(0,F.fx)(),Kt(),Gt()))})),nn={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};function en(){const t=E(),n=t.route,e=t.location.pathname;if(e&&"counters/"===n)return"counters";if(e&&"content/"===n)return"content";if(e.endsWith("isolated.html"))return"isolated";return e.includes("todo/www")?"todo":"home"}const rn=()=>t._q.use=(n=en())=>t.dy.dom(on.allStrings120829[0],"home"===n?".5":"1","home"===n?void 0:"#/","isolated"===n?".5":"1","isolated"===n?void 0:"isolated.html","counters"===n?".5":"1","counters"===n?void 0:"#counters/","content"===n?".5":"1","content"===n?void 0:"#content/","todo"===n?".5":"1","todo"===n?void 0:"todo/www/"),on={allStrings120829:[[{nn:"div",ch:[{nn:"a",at:[["style.opacity",{tagJsVar:0},"style"],["href",{tagJsVar:1},null]],ch:[{nn:"text",tc:"home"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:2},"style"],["href",{tagJsVar:3},null]],ch:[{nn:"text",tc:"isolated"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:4},"style"],["href",{tagJsVar:5},null]],ch:[{nn:"text",tc:"counters"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:6},"style"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"content"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:8},"style"],["href",{tagJsVar:9},null]],ch:[{nn:"text",tc:"todo app"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["href","https://github.com/AckerApple/taggedjs"],["target","_blank"]],ch:[{nn:"text",tc:"repo"}]}]}]]},an=Date.now();function sn(){return function(n=en()){let e=!1;return(0,t.$q)((t=>[{showHide:e}]=t({showHide:e}))),console.log("🍒 App rendered",an),t.dy.dom(dn.allStrings2805014[0],4,(()=>e=!e),e,e&&un(),rn(),"home"===n&&ln(),"counters"===n&&Dt(),"content"===n&&(0,qt.kQ)())}}sn.isApp=!0;const cn=(0,t._q)(sn),ln=()=>t._q.use=(r=!0,o=0,a=!1,s=null,c=(0,t.SB)((()=>new t.xQ(o))),i=0,l="🟦",u=(0,t.$q)((t=>[{showSections:r,appCounter:o,toggleValue:a,testTimeout:s,renderCount:i,testEmoji:l}]=t({showSections:r,appCounter:o,toggleValue:a,testTimeout:s,renderCount:i,testEmoji:l}))),d=(()=>{a=!a}))=>{const p=(0,t._)(),g=p((t=>l=t?"✅":"❌"));function f(t=!0,n=(()=>{})){l="🟦";s=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const r=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(e.bind(e,566)),await Promise.resolve().then(e.bind(e,451)),await Promise.resolve().then(e.bind(e,118)),await Promise.resolve().then(e.bind(e,835)),await Promise.resolve().then(e.bind(e,428)),await Promise.resolve().then(e.bind(e,749)),await Promise.resolve().then(e.bind(e,168)),await Promise.resolve().then(e.bind(e,692)),await Promise.resolve().then(e.bind(e,774)),await Promise.resolve().then(e.bind(e,994)),await Promise.resolve().then(e.bind(e,157)),await Promise.resolve().then(e.bind(e,178)),await Promise.resolve().then(e.bind(e,236)),await Promise.resolve().then(e.bind(e,702)),await Promise.resolve().then(e.bind(e,527)),await Promise.resolve().then(e.bind(e,186)),await Promise.resolve().then(e.bind(e,337));try{const t=Date.now();if(window.mocha)await new Promise(((t,n)=>{window.mocha.run((e=>{e>0?n(new Error(`${e} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(e.bind(e,492));if(!await t())throw new Error("Tests failed")}const n=Date.now()-t;return console.info(`✅ all tests passed in ${n}ms`),zt.map((t=>{document.getElementById("section_"+t.view).click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();n(r),t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return(0,t.ev)((function(){clearTimeout(s),s=null})),(0,t.nc)((function(){console.info("1️⃣ app init should only run once"),f(!1,g),c.subscribe(p((t=>o=t)))})),++i,t.dy.dom(dn.allStrings2805014[1],(()=>f(!0,g)),l,(()=>{c.next(o+1)}),(()=>++o),o,(0,t.Ld)(c),c.value,(()=>d()),a,(0,n.v)({name:"app",renderCount:i}),(0,t.Ld)(t.xQ.globalSubCount$),h(),(()=>r=!r),r&&Wt(c),tn())},un=(0,t._q)((()=>t.dy.dom(dn.allStrings2805014[2],(0,F.tw)().innerHTML=t.dy.dom(dn.allStrings2805014[3])))),dn={allStrings2805014:[[{nn:"text",tc:"\x3c!--app.js--\x3e"},{nn:"h1",at:[["id","h1-app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - "},{nn:"text",v:0}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"show/hide "},{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n\n\n      "},{nn:"text",v:4},{nn:"text",tc:"\n\n      "},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n    "}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"run tests "},{nn:"text",v:1}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:9},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:10},{nn:"text",tc:")"}]}]}]},{nn:"a",at:[["name","top"],["id","top"]]},{nn:"text",v:11},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"button",at:[["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"toggle sections"}]},{nn:"text",v:13},{nn:"text",tc:"\n\n      "},{nn:"text",v:14}]}],[{nn:"hr"},{nn:"text",v:0},{nn:"hr"}],[{nn:"text",tc:"\n    Hello animated world\n  "}]]};function pn(){l.autoTest=l.autoTest=!l.autoTest,u()}const hn={allStrings62947:[[{nn:"text",tc:"\n  auto testing "},{nn:"input",at:[["type","checkbox"],[{tagJsVar:0}],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"run tests"}]}]]},gn=()=>t._q.use=(e=(0,t.SB)("isolated app state"),r=0,o=0,a=(0,t.SB)((()=>new t.xQ(o))),s=!1,c=(0,t.$q)((t=>[{renderCount:r,appCounter:o,toggleValue:s}]=t({renderCount:r,appCounter:o,toggleValue:s}))),u=(()=>s=!s),d=(0,t._)())=>{const p=E().route.split("/").map((t=>t.trim())).filter((t=>t.length));let g;return p.length&&(g=p),(0,t.nc)((()=>{console.info("1️⃣ app init should only run once"),a.subscribe(d((t=>{o=t})))})),++r,t.dy.dom(fn.allStrings1054570[0],p,rn(),(()=>{a.next(o+1)}),(()=>{++o}),o,(0,t.Ld)(a),a.value,u,s,(f=g,t._q.use=(n=(0,t.nc)((()=>{l.autoTest&&i(!1,f,x)})))=>t.dy.dom(hn.allStrings62947[0],l.autoTest&&"checked",pn,(()=>i(!0,f,x)))),(0,n.v)({name:"app",renderCount:r}),(0,t.Ld)(t.xQ.globalSubCount$),h(g),Wt(a,g),(0,n.v)({renderCount:r,name:"isolatedApp"}));var f,x};g.subscribe((({type:t,checkTesting:n})=>{x(t,n)}));const fn={allStrings1054570:[[{nn:"text",tc:"\x3c!--isolatedApp.js--\x3e"},{nn:"h1",at:[["id","app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - isolated"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"(no HMR)"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"route: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"div",ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"text",tc:" "},{nn:"text",v:9}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:10},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:11},{nn:"text",tc:")"}]}]}]},{nn:"text",v:12},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]}]]};function xn(){const n=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),r=e[0]?.toLowerCase();if(r&&["isolated.html","index-static.html"].includes(r)){const e=Date.now();(0,t.bX)(gn,n,{test:1});const r=Date.now()-e;return void console.info(`⏱️ isolated render in ${r}ms`)}const o=Date.now();(0,t.bX)(cn,n,{test:1});const a=Date.now()-o;console.info(`⏱️ rendered in ${a}ms`)}})();var o=r.gV,a=r.jG,s=r.fm,c=r.KH,i=r.bX,l=r.mK;export{o as App,a as IsolatedApp,s as hmr,c as run,i as tagElement,l as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,