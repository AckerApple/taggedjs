var t={842:(t,e,n)=>{n.r(e),n.d(e,{fxTime:()=>r});var o=n(78);const r=160;function s(t){return new Promise((e=>setTimeout(e,t)))}(0,o.yY)("⠇ array testing",(()=>{(0,o.it)("signal array count and items",(()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);for(let t=0;t<e;t++)(0,o.l_)((0,o.o5)(`#signal-array-item-${t}`)).toBe(1);(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(0)})),(0,o.it)("push signal array button",(()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText),n=(0,o.L7)("push-signal-array-btn");n.click();const r=Number(t.innerText);(0,o.l_)(r).toBe(e+1),(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(1),n.click(),(0,o.l_)(Number(t.innerText)).toBe(e+2),(0,o.l_)((0,o.o5)(`#signal-array-item-${e+1}`)).toBe(1)})),(0,o.it)("arrays counter display matches item counter displays",(()=>{const t=(0,o.L7)("arrays-counter-display"),e=Number(t.innerText),n=(0,o.L7)("signal-array-count"),r=Number(n.innerText);for(let t=0;t<r;t++){const n=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(n).toBeDefined(),(0,o.l_)(Number(n.innerText)).toBe(e)}document.querySelector("#signal-array-increase-counter").click();const s=Number(t.innerText);(0,o.l_)(s).toBe(e+1);for(let t=0;t<r;t++){const e=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(Number(e.innerText)).toBe(s)}})),(0,o.it)("signal array item delete button with animation",(async()=>{const t=(0,o.L7)("signal-array-count");0===Number(t.innerText)&&(0,o.L7)("push-signal-array-btn").click();const e=Number(t.innerText);(0,o.l_)((0,o.o5)("#signal-array-item-0")).toBe(1);(0,o.L7)("signal-array-item-delete-btn-0").click(),await s(r),(0,o.l_)(Number(t.innerText)).toBe(e-1),(0,o.l_)((0,o.o5)("#signal-array-item-"+(e-1))).toBe(0);const n=Number(t.innerText);for(let t=0;t<n;t++){const e=(0,o.o5)(`#signal-array-item-${t}`);(0,o.l_)(e).toBe(1,`Expected only one #signal-array-item-${t} but got ${e}`)}})),(0,o.it)("array basics",(()=>{(0,o.l_)((0,o.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,o.l_)(t.length).toBe(0);const e=(0,o.o5)("#score-data-0-1-inside-button");(0,o.l_)(e).toBe(0),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const n=(0,o.L7)("score-data-0-1-inside-button"),r=(0,o.L7)("score-data-0-1-inside-display");let s=r.innerText;const a=(0,o.L7)("score-data-0-1-outside-button"),c=(0,o.L7)("score-data-0-1-outside-display"),i=c.innerText;(0,o.l_)(s).toBe(i),n.click(),(0,o.l_)(r.innerText).toBe(c.innerText),(0,o.l_)(r).toBe((0,o.L7)("score-data-0-1-inside-display")),(0,o.l_)(s).toBe((Number(r.innerText)-1).toString()),(0,o.l_)(s).toBe((Number(c.innerText)-1).toString()),a.click(),(0,o.l_)(r.innerText).toBe(c.innerText),(0,o.l_)(s).toBe((Number(r.innerText)-2).toString()),(0,o.l_)(s).toBe((Number(c.innerText)-2).toString())})),(0,o.it)("🗑️ deletes",(async()=>{(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(1);const t=(0,o.L7)("player-edit-btn-0")._click();(0,o.l_)(t).toBe("no-data-ever"),(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(1);const e=await(0,o.L7)("player-remove-promise-btn-0")._click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r),await e,(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(0)})),(0,o.it)("add then deletes",(async()=>{(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(2),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(2),(0,o.L7)("player-edit-btn-0").click();const t=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(t).toBe("promise-no-data-ever"),await s(r-10),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("player-edit-btn-0").click();const e=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r+25),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(0),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🏹 special attributes",(()=>{(0,o.it)("style and class tests",(async()=>{(0,o.l_)((0,o.QX)("#attr-input-abc")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-backgrounds")).toBe(1),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,o.L7)("attr-dynamic-inline-class").classList;(0,o.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,o.it)("subscribe attributes colors",(()=>{const t=(0,o.L7)("subscribe-style-dot-bg-color-changer"),e=(0,o.L7)("subscribe-style-bg-color"),n=(0,o.L7)("multiple-subscribe-bg-color"),r=(0,o.L7)("toggle-color-btn"),s=(0,o.L7)("clear-color-btn");(0,o.l_)(t.style.backgroundColor).toBe("red","bgColorChanger should start red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("pink"),(0,o.l_)(r.innerText).toBe("Toggle Color ()"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (red)"),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("green"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (blue)"),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(e.style.backgroundColor).toBe("blue"),(0,o.l_)(n.style.backgroundColor).toBe("purple"),s.click(),(0,o.l_)(t.style.backgroundColor).toBe("","expected no background in bgColorChanger"),(0,o.l_)(e.style.backgroundColor).toBe("","expected no background in subscribeBgColor"),(0,o.l_)(n.style.backgroundColor).toBe("pink")})),(0,o.it)("hide/show attributes affects subscription count",(()=>{const t=(0,o.L7)("toggle-attributes-btn"),e=(0,o.L7)("subscriptions-count"),n=Number(e.innerText);(0,o.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,o.l_)(t.innerText).toBe("Show Attributes");const r=Number(e.innerText),s=n-2;(0,o.l_)(r).toBe(s,`afterHideCount expected(${r}) toBe(${s})`),t.click(),(0,o.l_)(t.innerText).toBe("Hide Attributes");const a=Number(e.innerText);(0,o.l_)(a).toBe(n)})),(0,o.it)("style object converts to individual CSS properties",(()=>{const t=(0,o.L7)("style-object-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("lightgrey"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("4px"),(0,o.l_)(t.style.boxShadow).toBe("none"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,o.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,o.L7)("style-set-property-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("red")}))}))},566:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("elements exists",(()=>{(0,o.l_)((0,o.L7)("h1-app")).toBeDefined();const t=(0,o.L7)("toggle-test");(0,o.l_)(t).toBeDefined(),(0,o.l_)(t.innerText).toBe("toggle test")})),(0,o.it)("toggle test",(()=>{const t=(0,o.L7)("toggle-test");(0,o.l_)(t.innerText).toBe("toggle test"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test")}))},527:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("👶 👧child tests",(()=>{(0,o.it)("child tests",(()=>{(0,o.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,o.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,o.it)("a",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,o.it)("b",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,o.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,o.it)("c",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},405:(t,e,n)=>{n.d(e,{kQ:()=>P,c_:()=>E});var o=n(296);const r=(0,o._q)((({name:t,array:e,included:n,columnNames:r,allColumnNames:c})=>{let i,l=!1,u=!1;const d=(0,o.SB)([]);(0,o.$q)((t=>[{mouseOverEditShow:l,edit:u,editFormula:i}]=t({mouseOverEditShow:l,edit:u,editFormula:i})));return o.dy.dom(a.allStrings431691[0],(function(){const e=r.indexOf(t);e>=0?r.splice(e,1):r.push(t)}),n&&"checked",t,(()=>l=!0),(()=>l=!1),u||l?"visible":"hidden",(()=>u=!u),n&&r.length!==c.length?o.dy.dom(a.allStrings431691[1],(()=>{r.length=0,r.push(...c)})):o.dy.dom(a.allStrings431691[2],(()=>{r.length=0,r.push(t)})),u&&o.dy.dom(a.allStrings431691[3],i&&o.dy.dom(a.allStrings431691[4],(t=>{return n=i,o=t.target.value,n.stringFormula=o,void(n.value=s(o,{array:e}));var n,o}),i.value),d.map((t=>o.dy.dom(a.allStrings431691[5],t.title,(()=>i=t),t.value).key(t))),(()=>{const n=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;d.push({title:"sum",stringFormula:n,value:s(n,{array:e})})})))}));function s(t,e={}){return function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{isNaN,Math,Number,Date,...e})}const a={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},c=(0,o._q)((({array:t,showAll:e,showKids:n,toggleColumnDialog:r,columnNames:s,formatChange:a,allowMaximize:c,everySimpleValue:l})=>o.dy.dom(i.allStrings122184[0],t.length&&o.dy.dom(i.allStrings122184[1],s.map((t=>o.dy.dom(i.allStrings122184[2],r&&"pointer",r,t).key(t)))),t.map((t=>o.dy.dom(i.allStrings122184[3],s.map((r=>o.dy.dom(i.allStrings122184[4],C({value:t[r],showLevels:0,showAll:e,showKids:e||n,isRootDump:!1,formatChange:a,allowMaximize:c})).key(t[r])))).key(t)))))),i={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},l=(0,o._q)((({array:t,showLevels:e,showAll:n,showKids:r,columnNames:s,formatChange:a,toggleColumnDialog:c,allowMaximize:i,everySimpleValue:l})=>o.dy.dom(u.allStrings152127[0],t.map(((t,r)=>{const d=function(t,e){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,e){if(!e)return t;const n={};return e.forEach((e=>{(t.hasOwnProperty(e)||e in t)&&(n[e]=t[e])})),n}(t,e)}(t,s);return o.dy.dom(u.allStrings152127[1],C({value:d,showLevels:e,showAll:n,showKids:!0,isRootDump:!1,formatChange:a,onHeaderClick:c,allowMaximize:i,everySimpleValue:l})).key(r)})))));const u={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},d=(0,o._q)((({showLevels:t,showAll:e,showKids:n,array:s,arrayView:a,formatChange:i,allowMaximize:u,everySimpleValue:d})=>{const h=(0,o.YP)([s,s.length],(()=>s.length?function(t){return t.reduce(((t,e)=>{if(e&&"object"==typeof e){if(Array.isArray(e))return t;Object.keys(e).forEach((e=>{t.includes(e)||t.push(e)}))}return t}),[])}(s):[]));let g;const f=(0,o.YP)([h],(()=>[...h]));let x=!1;const b=(0,o.SB)((()=>"columnDialog"+performance.now()));(0,o.$q)((t=>[{columnNames:g,showColumnDialog:x}]=t({columnNames:g,showColumnDialog:x}))),o.YP.noInit([f.length],(()=>{g||(g=f)}));const v=()=>{x=!x;const t=document.getElementById(b);x?t.showModal():t.close()},y="table"===a?c({showAll:e,showKids:n,array:s,toggleColumnDialog:v,columnNames:g||h,formatChange:i,everySimpleValue:d}):l({array:s,showLevels:t,showAll:e,showKids:n,formatChange:i,columnNames:g||h,toggleColumnDialog:v,allowMaximize:u,everySimpleValue:d});return o.dy.dom(p.allStrings463171[0],y,b,h.map((t=>{const e=void 0===g||g.includes(t);return o.dy.dom(p.allStrings463171[1],r({name:t,array:s,included:e,columnNames:g||f,allColumnNames:h})).key(t)})),v)}));const p={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},h=(0,o._q)((({key:t,value:e,show:n,showAll:r,showKids:s,showLevels:a,formatChange:c,allowMaximize:i,everySimpleValue:l})=>{let u,p,h=!1;(0,o.$q)((t=>[{showLower:u,arrayView:p,maximize:h}]=t({showLower:u,arrayView:p,maximize:h}))),(0,o.RW)((t=>[s]=t(s))),(0,o.RW)((t=>[r]=t(r))),o.YP.noInit([n],(([t])=>u=t)),o.YP.noInit([r],(([t])=>u=t));const f=(0,o.SB)((()=>"maximize-dump-"+performance.now())),x=()=>{h=!h,h&&document.getElementById(f).showModal()},b=r||u||s||null==u&&a>0,v=n=>o.dy.dom(g.allStrings479370[0],(()=>{if(void 0===u)return r=s=u=!b;r=s=u=!u}),t,"table"===p?"bold":"",(()=>p="table"===p?void 0:"table"),"table"===p?"flex":"table",e.length,n&&o.dy.dom(g.allStrings479370[1],x)),y={showLevels:a,showAll:r,showKids:s,formatChange:c,array:e,arrayView:p,allowMaximize:i,everySimpleValue:l};return o.dy.dom(g.allStrings479370[3],v(i),b&&o.dy.dom(g.allStrings479370[2],d(y)),f,h&&v(!1),h&&o.dy.dom(g.allStrings479370[4],d({...y,allowMaximize:!1})),(()=>document.getElementById(f).close()))})),g={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function f(t){var e=document.createElement("textarea");e.value=t,document.body.appendChild(e),e.select(),e.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(e)}function x({key:t,value:e,onHeaderClick:n,everySimpleValue:r}){const s=e.search&&("https://"===e.slice(0,8)||"http://"===e.slice(0,7));let a;return a=r?b({value:e,everySimpleValue:r}):s?v(e):b({value:e}),o.dy.dom(y.allStrings246978[0],t&&o.dy.dom(y.allStrings246978[1],n&&"pointer",n,t),a)}const b=(0,o._q)((({value:t,everySimpleValue:e})=>{const n=[void 0,null,"null"].includes(t),r=t,s=!isNaN(r)&&r>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(r):"";let a=0;(0,o.$q)((t=>[a]=t(a)));let c=t;return e&&(c=e(t)),c=(null===c?"null":!1===c&&"false")||void 0===c&&"undefined"||c,o.dy.dom(y.allStrings246978[2],(()=>{a=Date.now()}),(e=>{if(Date.now()-a>300)return e.preventDefault(),e.stopPropagation(),!0;f(t)}),n?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||n&&"white"||"",s,c)}));const v=t=>o.dy.dom(y.allStrings246978[3],(()=>f(t)),t,t),y={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},m=(0,o._q)((({key:t,showKids:e,show:n,showLevels:r,value:s,showAll:a,onHeaderClick:c,formatChange:i,allowMaximize:l,everySimpleValue:u})=>{let d,p=!1;const h=(0,o.SB)((()=>"maximize-dump-"+performance.now()));(0,o.$q)((t=>[{showLower:d,maximize:p}]=t({showLower:d,maximize:p}))),(0,o.RW)((t=>[e]=t(e))),o.YP.noInit([n],(([t])=>d=t)),o.YP.noInit([a],(([t])=>d=t));const g=!t||e||d||void 0===d&&r>0,f=()=>{p=!p,p&&document.getElementById(h).showModal()},x=n=>o.dy.dom(w.allStrings470244[0],d?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===d)return a=e=d=!(a||e||d);e=d=!d}),t,Object.keys(s).length,n&&o.dy.dom(w.allStrings470244[1],f)),b=t=>o.dy.dom(w.allStrings470244[2],Object.entries(s).map((([n,s])=>o.dy.dom(w.allStrings470244[3],s&&"object"==typeof s?"flex-grow:1;":"flex: 1 1 10em;",C({value:s,key:n,show:d,showAll:a,showLevels:r-1,showKids:a||e,isRootDump:!1,formatChange:i,onHeaderClick:c,allowMaximize:t,everySimpleValue:u})).key(n))));return o.dy.dom(w.allStrings470244[4],t&&x(l),g&&b(l),h,p&&x(!1),p&&b(!1),(()=>document.getElementById(h).close()))})),w={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},_=(0,o._q)((({value:t,format:e,showAll:n,formatChange:r,showAllChange:s})=>o.dy.dom(k.allStrings440833[0],!e||"flex"===e&&o.dy.dom(k.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n?"background-color:#33cd5f;":"background-color:#444444"),(()=>s(n=!n))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e&&"flex"!==e?"background-color:#444444":"background-color:#33cd5f;"),(()=>r(e="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===e?"background-color:#33cd5f;":"background-color:#444444"),(()=>r(e="json")),(()=>function(t){const e=JSON.stringify(t,null,2);f(e)}(t)))));const k={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},C=(0,o._q)((({key:t,value:e,showKids:n=!1,showLevels:r=-1,showAll:s=!1,format:a="flex",formatChange:c=(t=>a=t),isRootDump:i=!0,onHeaderClick:l,allowMaximize:u,everySimpleValue:d})=>{i&&void 0===u&&(u=!0);const p=null===e?"null":typeof e;let h,g=!1;return(0,o.RW)((t=>[a]=t(a))),(0,o.RW)((t=>[s]=t(s))),(0,o.RW)((t=>[r]=t(r))),(0,o.$q)((t=>[{show:g,arrayView:h}]=t({show:g,arrayView:h}))),(0,o.nc)((()=>{(r=r>=0&&r||(-1===r&&!t&&e&&e instanceof Object?2:0))>0&&(g=!0)})),[null,void 0].includes(e)?x({key:t,value:p,onHeaderClick:l,everySimpleValue:d}):["boolean","number","string"].includes(p)?x({key:t,value:e,onHeaderClick:l,everySimpleValue:d}):V({value:e,showKids:n,key:t,onHeaderClick:l,everySimpleValue:d,format:a,isRootDump:i,showAll:s,showAllChange:t=>s=t,formatChange:c,show:g,showLevels:r,allowMaximize:u})}));let S=0;const V=({value:t,showKids:e,key:n,onHeaderClick:r,everySimpleValue:s,format:a,isRootDump:c,showAll:i,showAllChange:l,formatChange:u,show:d,showLevels:p,allowMaximize:g})=>{if(null===t)return e?x({key:n,value:"null",onHeaderClick:r,everySimpleValue:s}):o.dy.dom(B.allStrings306188[0]);const f=Array.isArray(t);return o.dy.dom(B.allStrings306188[2],"taggedjs-dump-"+ ++S,c&&_({value:t,format:a,showAll:i,showAllChange:l,formatChange:u}),"json"===a&&o.dy.dom(B.allStrings306188[1],JSON.stringify(t,null,2))||(f?h({key:n,value:t,show:d,showAll:i,showKids:e,showLevels:p,formatChange:u,allowMaximize:g,everySimpleValue:s}):m({key:n,show:d,showKids:e,showLevels:p,value:t,showAll:i,formatChange:u,onHeaderClick:r,allowMaximize:g,everySimpleValue:s})))},B={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]};var T=n(232);const J=(0,o._q)((()=>{let t="",e=0,n="",r=!1;(0,o.$q)((o=>[{userJsonString:t,renderCount:e,userJson:n,badEval:r}]=o({userJsonString:t,renderCount:e,userJson:n,badEval:r}))),++e;const s=(0,o.SB)((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return o.dy.dom(j.allStrings183632[0],(e=>{t=e.target.value;try{n=function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{}),t=JSON.stringify(n,null,2)}catch(e){r=!0;try{JSON.parse(t)}catch(t){n=Object.getOwnPropertyNames(t).reduce(((e,n)=>(e[n]=t[n])&&e||e),{})}}}),""===n?"":t,""===n?"":o.dy.dom(j.allStrings183632[1],C({value:n})),C(s),(0,T.v)({renderCount:e,name:"dumpContent"}))}));const j={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};var I=n(149);const E=20,L=(0,o._q)((t=>{let e=1,n="white";return(0,o.$q)((t=>[{borderColor:n,width:e}]=t({borderColor:n,width:e}))),o.dy.dom(D.allStrings648439[1],e,n,t,e,(t=>e=Number(t.target.value)),e,(t=>n=t.target.value),""===n?"selected":"","black"===n?"selected":"","blue"===n?"selected":"","white"===n?"selected":"")})),P=(0,o._q)((()=>{const t=(0,o.SB)((()=>new o.v0(0)));let e=0,n=!0,r=!1,s=0,a=E,c=!1;const i=(0,o.SB)((()=>new o.xQ({added:0,removed:0})));(0,o.$q)((t=>[{renderCount:e,orangeToggle:n,boldToggle:r,counter:s,showHideFx:c,staggerBy:a}]=t({renderCount:e,orangeToggle:n,boldToggle:r,counter:s,showHideFx:c,staggerBy:a}))),++e;const l=(0,o.Ld)(t,(()=>o.dy.dom(D.allStrings648439[2],(()=>{++s}),s,(()=>t.next(t.value+1)))));return o.dy.dom(D.allStrings648439[3],s,l,(()=>++s),s,(()=>c=!c),c&&o.dy.dom(D.allStrings648439[4],(0,I.fx)({duration:"10ms"})),c&&o.dy.dom(D.allStrings648439[5],(0,I.fx)({duration:"10ms",stagger:a})),c&&o.dy.dom(D.allStrings648439[6],(0,I.fx)({duration:"10ms",stagger:2*a})),c&&(((t=10)=>{const e=(0,o.iB)();return o.dy.dom(D.allStrings648439[0],(0,I.fx)({stagger:t,duration:".1s"}),e).acceptInnerHTML(e)})(a).innerHTML=O()),(0,o.Ld)(i,(t=>t.added)),(0,o.Ld)(i,(t=>t.removed)),(t=>a=Number(t.target.value)),L(o.dy.dom(D.allStrings648439[7])),J(),(0,T.v)({renderCount:e,name:"content"}),$(),$(),'<script>alert("i should never run but be seen on page")<\/script>',o.dy.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),o.dy.dom(D.allStrings648439[8]),"3px solid orange",n?"3px solid orange":"3px solid green",(()=>n=!n),n,r?{style:"font-weight:bold;"}:{},(()=>r=!r),r?"true":"false",54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",(0,T.v)({renderCount:e,name:"content"}))})),$=()=>o.dy.dom(D.allStrings648439[9],"test0","test1","test3"),O=(0,o._q)((()=>o.dy.dom(D.allStrings648439[10]))),D={allStrings648439:[[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["style",["border-width:",":tagvar0:","px;border-color:",":tagvar1:",";border-style:solid;"]],["id","dynamic-border-element"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"text",tc:"borderWidth:"},{nn:"input",at:[["id","dynamic-border-width"],["type","range"],["min","0"],["max","10"],["step","1"],["value",{tagJsVar:3},null],["change",{tagJsVar:4},null]]},{nn:"text",tc:" - "},{nn:"text",v:5},{nn:"text",tc:"px"}]},{nn:"div",ch:[{nn:"text",tc:"borderColor:"},{nn:"select",at:[["id","dynamic-border-color"],["change",{tagJsVar:6},null]],ch:[{nn:"option",at:[[{tagJsVar:7}],["value",""]]},{nn:"option",at:[[{tagJsVar:8}],["value","black"]],ch:[{nn:"text",tc:"black"}]},{nn:"option",at:[[{tagJsVar:9}],["value","blue"]],ch:[{nn:"text",tc:"blue"}]},{nn:"option",at:[[{tagJsVar:10}],["value","white"]],ch:[{nn:"text",tc:"white"}]}]}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:16},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:17}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:18},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:20},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:23}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:24}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:25},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:26}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:27},{nn:"text",tc:" "},{nn:"text",v:28},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:29},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:34},{nn:"text",tc:"22"},{nn:"text",v:35},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:36},{nn:"text",tc:"__tagVar0"},{nn:"text",v:37},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:38},{nn:"text",tc:'"'}]}]}]},{nn:"text",v:39},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"text",tc:"inner html tag"}]]}},118:(t,e,n)=>{n.r(e);var o=n(78),r=n(405);async function s(t,e,n=5e3){const r=Date.now();for(;Date.now()-r<n;){if((0,o.QX)(t)===e)return await(0,o._v)(50),!0;await(0,o._v)(10)}throw new Error(`Timeout waiting for element count. Expected ${e} elements matching '${t}', but found ${(0,o.QX)(t)}`)}(0,o.yY)("📰 content",(()=>{(0,o.it)("spacing",(()=>{(0,o.l_)((0,o.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,o.it)("style.",(()=>{(0,o.l_)((0,o.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,o.it)("style set as object",(()=>{(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,o.yY)("no parent element tests",(()=>{(0,o.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,o.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,o.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,o.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,o.it)("concat style",(()=>{(0,o.L7)("dynamic-border-width").value=2,(0,o.L7)("dynamic-border-color").value="white",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,o.L7)("dynamic-border-width").value=1,(0,o.L7)("dynamic-border-color").value="blue",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,o.it)("tagvar injections",(()=>{(0,o.l_)((0,o.L7)("inject-tagvar-0").innerText).toBe((0,o.L7)("inject-read-tagvar-0").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-1").innerText).toBe((0,o.L7)("inject-read-tagvar-1").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-2").innerText).toBe((0,o.L7)("inject-read-tagvar-2").innerText)})),(0,o.it)("animates",(async()=>{if(!document.querySelector("#content-toggle-fx"))return void console.warn("⚠️ Skipping animation test - Content view not loaded properly in test environment");(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"Initial state: should have 0 test elements").toBe(0),(0,o.V4)("#content-toggle-fx"),await s("[name=test-the-tester]",3),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After show click: should have 3 test elements").toBe(3);const t=(0,o.QX)(".animate__animated[name=test-the-tester]");(0,o.l_)(t,"After show click: should have at least 1 animating element").toBeGreaterThan(0),await(0,o._v)(r.c_/2),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"During animation: should still have 3 test elements").toBe(3),(0,o.l_)((0,o.dZ)("#outer-html-fx-test"),"During animation: inner html should be rendered").toBe("inner html tag"),await async function(t,e,n=5e3){const r=Date.now();for(;Date.now()-r<n;){if((0,o.QX)(`.animate__animated${t}`)===e)return await(0,o._v)(50),!0;await(0,o._v)(10)}throw new Error(`Timeout waiting for animations to complete. Expected ${e} animating elements matching '.animate__animated${t}', but found ${(0,o.QX)(`.animate__animated${t}`)}`)}("[name=test-the-tester]",0),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After animation complete: should have 3 test elements").toBe(3),(0,o.l_)((0,o.QX)(".animate__animated[name=test-the-tester]"),"After animation complete: should have 0 animating elements").toBe(0),(0,o.V4)("#content-toggle-fx");const e=(0,o.QX)(".animate__animated[name=test-the-tester]");(0,o.l_)(e,"After hide click: should have at least 1 animating element").toBeGreaterThan(0),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After hide click: should still have 3 test elements").toBe(3),await s("[name=test-the-tester]",0),(0,o.l_)((0,o.QX)("[name=test-the-tester]"),"After hide animation: should have 0 test elements").toBe(0),(0,o.l_)((0,o.QX)(".animate__animated[name=test-the-tester]"),"After hide animation: should have 0 animating elements").toBe(0)}))}))},428:(t,e,n)=>{n.r(e),n.d(e,{clickSpeedAmount:()=>r});var o=n(78);(0,o.yY)("💯 counters",(()=>{const t="0"===(0,o.dy)("#🍄-slowChangeCount");(0,o.it)("basics",(()=>{const e=(0,o.L7)("set-main-counter-input");(0,o.l_)(e).toBeDefined(),e.value="0",(0,o.Sb)(e);const n=Number((0,o.dy)("#counters_render_count")),r=Number((0,o.dy)("#inner_counters_render_count"));(0,o.wG)("#conditional-counter",0);const a=(0,o._8)("👉-counter-sub-count");(0,o.di)("#❤️-increase-counter","#❤️-counter-display"),(0,o.l_)((0,o._8)("👉-counter-sub-count")).toBe(a),(0,o.l_)((0,o.dy)("#counters_render_count")).toBe((n+2).toString());let c=(r+2).toString(),i=(0,o.dy)("#inner_counters_render_count");(0,o.l_)(i).toBe(c);const l=(0,o.dy)("#🔥-init-counter");(0,o.l_)(l).toBe("1"),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),c=(n+4).toString(),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(c),i=(0,o.dy)("#inner_counters_render_count"),c=(r+4).toString(),(0,o.l_)(i).toBe(c),(0,o.di)("#🥦-standalone-counter","#🥦-standalone-display"),c=(n+6).toString(),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(c),i=(0,o.dy)("#inner_counters_render_count"),c=(r+4).toString(),(0,o.l_)(i).toBe(c),(0,o.wG)("#conditional-counter",1),(0,o.wG)("#conditional-display",1),t&&(0,o.l_)((0,o.dy)("#conditional-display")).toBe("2"),i=(0,o._8)("❤️💧-shallow-display"),(0,o.di)("#conditional-counter","#conditional-display"),(0,o.l_)(i).toBe((0,o._8)("❤️💧-shallow-display")),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),(0,o.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),s("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),s("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),s("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),s("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,o.it)("piped subject",(()=>{if(t){const t=(0,o.dy)("#🥦-standalone-display"),e=(0,o.dy)("#🪈-pipedSubject");(0,o.l_)(e).toBe(t,`firstRun failure pipe0. Expected "${e}" toBe empty-string`),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe(t,"firstRun failure pipe2")}(0,o.V4)("#🥦-subject-increase-counter");const e=(0,o.dy)("#🪈-pipedSubject"),n=(0,o.dy)("#🥦-standalone-display");(0,o.l_)(e).toBe(n),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe((0,o.dy)("#🥦-standalone-display"))}))}));const r=600;function s(t,e,n){const s=(0,o._8)(e),a=(0,o.L7)(t),c=(0,o.L7)(n);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)a.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)c.click();console.timeEnd(`⌚️ outer ${t}`);const i=(Number(s)+r).toString();(0,o.l_)((0,o._8)(e)).toBe(i)}},236:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("destroys",(async()=>{(0,o.l_)((0,o.QX)("#destroyCount")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-destroys")).toBe(1),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1);let t=Number((0,o.dy)("#destroyCount"));(0,o.V4)("#toggle-destroys");let e=Number((0,o.dy)("#destroyCount"));(0,o.l_)(e).toBe(t+2),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(0),t=e,(0,o.V4)("#toggle-destroys"),e=Number((0,o.dy)("#destroyCount")),(0,o.l_)(e).toBe(t),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1)}))},835:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("taggedjs-dump",(()=>{(0,o.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,o.L7)("taggedjs-dump-user-textarea");(0,o.l_)(t.value).toBe(""),t.value="{test:22}",(0,o.b$)(t),(0,o.l_)(t.value).toBe("{test:22}");const e=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(e.length).toBe(1),(0,o.l_)(e[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,o.b$)(t);const n=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(n.length).toBe(2),(0,o.l_)(n[0].innerText).toBe("test"),(0,o.l_)(n[1].innerText).toBe("testb"),t.value="",(0,o.b$)(t)}))}))},157:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("function in props",(async()=>{(0,o.di)("#fun_in_prop1","#fun_in_prop_display"),(0,o.di)("#fun_in_prop2","#fun_in_prop_display"),(0,o.di)("#fun_in_prop3","#fun_in_prop_display"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},488:(t,e,n)=>{n.r(e);var o=n(78);console.log("INCLUDED!!!"),(0,o.yY)("Injection Test",(()=>{const t=()=>{const t=[];for(let e=0;e<10;e++){const n=(0,o.L7)(`injection-test-item-${e}`);n&&t.push(n)}return t},e=()=>t().map((t=>t.querySelector('input[type="checkbox"]'))),n=()=>e().filter((t=>t?.checked)).length,r=()=>{const n=t();e().forEach(((t,e)=>{t?.checked&&n[e].click()}))};(0,o.HF)((()=>{r()})),(0,o.iu)((()=>{r()})),(0,o.it)("should have injection testing section with all items unchecked initially",(()=>{const n=(0,o.L7)("injection-testing-wrap-host");(0,o.l_)(n).toBeDefined();const r=t();(0,o.l_)(r.length).toBe(10);e().forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)}))})),(0,o.it)("should select individual items when clicked",(()=>{const r=t(),s=e();(0,o.l_)(n()).toBe(0),r[0].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(n()).toBe(1),r[2].click(),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(n()).toBe(2),r[4].click(),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(n()).toBe(3)})),(0,o.it)("should deselect items when clicked again",(()=>{(0,o.l_)(n()).toBe(0);const r=t(),s=e();r[1].click(),r[3].click(),r[5].click(),(0,o.l_)(n()).toBe(3),r[3].click(),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(n()).toBe(2),r[1].click(),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(n()).toBe(1),r[5].click(),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should select multiple items when clicking on different items",(()=>{const r=t(),s=e();r[0].click(),r[2].click(),r[4].click(),r[6].click(),r[8].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(s[6].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[8].checked).toBe(!0),(0,o.l_)(s[9].checked).toBe(!1),(0,o.l_)(n()).toBe(5)})),(0,o.it)("should toggle selection state correctly",(()=>{const n=t(),r=e();n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1)})),(0,o.it)("should maintain selection state across multiple operations",(()=>{const r=t(),s=e();r[1].click(),r[2].click(),r[3].click(),(0,o.l_)(n()).toBe(3),r[7].click(),r[9].click(),(0,o.l_)(n()).toBe(5),r[2].click(),r[7].click(),(0,o.l_)(n()).toBe(3),(0,o.l_)(s[1].checked).toBe(!0),(0,o.l_)(s[2].checked).toBe(!1),(0,o.l_)(s[3].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[9].checked).toBe(!0)})),(0,o.it)("should restore to original unchecked state after test",(()=>{const s=t(),a=e();s.forEach((t=>t.click())),(0,o.l_)(n()).toBe(10),r(),a.forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)})),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should handle rapid clicking without issues",(()=>{const n=t(),r=e();for(let t=0;t<10;t++)n[0].click();(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0)})),(0,o.it)("should update visual indicators when items are selected",(()=>{const e=t();e[0].click();const n=e[0].getAttribute("style")||"";(0,o.l_)(n.includes("background: rgb(76, 175, 80)")).toBe(!0),(0,o.l_)(n.includes("border: 3px solid rgb(51, 51, 51)")).toBe(!0);const r=e[1].getAttribute("style")||"";(0,o.l_)(r.includes("background: rgb(33, 150, 243)")).toBe(!0),(0,o.l_)(r.includes("border: 1px solid rgb(153, 153, 153)")).toBe(!0)}))}))},774:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("🪞 mirror testing",(()=>{(0,o.wG)("#mirror-counter-display",2),(0,o.wG)("#mirror-counter-button",2);const t=Number((0,o._8)("mirror-counter-display"));(0,o.L7)("mirror-counter-button").click(),(0,o.l_)(t+1).toBe(Number((0,o._8)("mirror-counter-display"))),(0,o.wG)("#mirror-counter-display",2),(0,o.Lo)("#mirror-counter-display")}))},994:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("oneRender",(()=>{(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,o.di)("#👍-counter-button","#👍-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,o.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🧳 props",(()=>{(0,o.it)("json",(()=>{const t=(0,o.L7)("props-debug-textarea");(0,o.l_)(t.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')})),(0,o.it)("test duels",(()=>{(0,o.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,o.it)("child prop communications",(()=>{(0,o.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,o.it)("basics",(()=>{const t=(0,o.dy)("#propsOneLevelFunUpdate-🥩-display"),e=(0,o.dy)("#propsDebug-🥩-change-count-display");(0,o.l_)(e).toBe((Number(t)+1).toString());const n=(0,o.L7)("propsDebug-🥩-0-display").innerHTML,r=(0,o.L7)("propsDebug-🥩-1-display").innerHTML,s=(0,o.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,a=Number(n),c=Number(r),i=Number(s);(0,o.l_)(c).toBe(i),(0,o.l_)(a+2).toBe(c)})),(0,o.it)("letProp",(()=>{(0,o.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,o.dy)("#propsDebug-🥩-0-display")),e=(0,o.IO)("#propsDebug-🥩-2-button")[0]._click();(0,o.l_)(e).toBe("no-data-ever"),(0,o.l_)((0,o.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,o.l_)((0,o.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,o.L7)("propsDebug-🥩-1-button").click()})),(0,o.it)("props as functions",(()=>{const t=Number((0,o._8)("sync-prop-number-display"));(0,o.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,o.L7)("sync-prop-child-button").click(),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🫴 providers",(()=>{(0,o.it)("basics",(()=>{(0,o.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,o.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,o.it)("inner outer debug",(()=>{(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,o.yY)("host attributes",(()=>{(0,o.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(255, 0, 0)")||e.borderColor.includes("red");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),t&&(0,o.l_)(t.innerHTML.trim()).toBe("wonderful - parent(red)")})),(0,o.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),e=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e&&(0,o.l_)(t.contains(e)).toBe(!0)})),(0,o.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),e=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,o.wS)(t);const n=window.getComputedStyle(e),r=n.borderColor.includes("blue")||n.borderColor.includes("rgb(0, 0, 255)");(0,o.l_)(r).toBe(!0,`in-cycle-parent should be blue not ${n.borderColor}`)}})),(0,o.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),e=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("purple")||n.borderColor.includes("rgb(128, 0, 128)");(0,o.l_)(r).toBe(!0)}})),(0,o.it)("child2 has correct innerHTML and green border",(()=>{const t=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),t){(0,o.l_)(t.textContent.trim().replace(/\n(\s+)/g," ")).toBe("wonderful too part 2");const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child2 color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select-2"),e=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="orange",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("orange")||n.borderColor.includes("rgb(255, 165, 0)");(0,o.l_)(r).toBe(!0,`in-cycle-child-2 should be orange not ${n.borderColor}`)}}))}))}))},232:(t,e,n)=>{n.d(e,{v:()=>r});var o=n(296);const r=(0,o._q)((({renderCount:t,name:e})=>(r.inputs((n=>[{renderCount:t,name:e}]=n)),(0,o.hi)((0,o.yG)(`(${e} render count`,(t=>22),o.yP.id(`${e}_render_count`)((e=>t)),")")))))},451:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("basic app subject",(()=>{const t=(0,o.dZ)("#app-counter-subject-value-display");(0,o.V4)("#app-counter-subject-button");const e=(0,o.dZ)("#app-counter-subject-value-display");(0,o.l_)(Number(t)).toBe(Number(e)-1)}))},528:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 subscriptions",(()=>{(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1")})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,o.it)("subscribe",(async()=>{(0,o.l_)((0,o._8)("content-subscribe-sub0")).toBe(""),(0,o.l_)((0,o._8)("content-subscribe-sub0-with")).toBe("-1")})),(0,o.yY)("passed in subscription",(()=>{(0,o.it)("increase subscription",(async()=>{const t=(0,o.L7)("passed-in-sub-increase"),e=(0,o.L7)("passed-in-sub-hide-show"),n=(0,o.L7)("passed-in-sub-hideShow-value");(0,o.l_)(n.textContent).toBe(""),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),e.click();let r=(0,o._8)("passed-in-output");(0,o.l_)(n.textContent).toBe("true"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed after hide"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),t.click(),r=(0,o._8)("passed-in-output"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe(`0||${r}||0`),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed third increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),e.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed closing"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,o.it)("host",(()=>{let t=Number((0,o._8)("hostDestroyCount"));(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1),(0,o.cS)("hostHideShow"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1),(0,o.l_)((0,o._8)("hostedContent")).toBe(""),(0,o.cS)("hostHideShow"),(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1)})),(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,o.l_)((0,o.dy)("#content-dom-parse-0-0")).toBe((0,o.dy)("#content-dom-parse-0-1"))})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")}))}))},168:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🔀 tagSwitching",(()=>{(0,o.it)("0",(()=>{(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(1),(0,o.l_)((0,o.o5)("#tag-switch-dropdown")).toBe(1),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(2),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,o.it)("1",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="1",t._change({target:t}),(0,o.wG)("#tagSwitch-1-hello",5),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("2",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="2",t._change({target:t}),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",4),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("3",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="3",t._change({target:t}),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.wG)("#tagSwitch-3-hello",7),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("4",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="",t._change({target:t}),(0,o.wG)("#select-tag-above",1),(0,o.wG)("#tag-switch-dropdown",1),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",0),(0,o.wG)("#tagSwitch-3-hello",0)}))}))},525:(t,e,n)=>{function o(t){const e=((new Error).stack||"").split("\n")[3]||"";return{toBe(n,o){if(t!==n){const r="function"==typeof o?o():o,s=r||`Expected ${JSON.stringify(n)} but got ${JSON.stringify(t)}`,a=new Error(s);throw a.stack=s+"\n"+e+(a.stack?"\n"+a.stack:""),a}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(e){if("number"!=typeof t||!(t>e))throw new Error(`Expected ${t} to be greater than ${e}`)},toHaveLength(e){const n=t;if(!("length"in n)||n.length!==e)throw new Error(`Expected length ${e} but got ${n.length||"undefined"}`)},not:{toBe(e){if(t===e)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(e)}`)}}}}n.d(e,{l:()=>a});const r=void 0!==globalThis.vitest,s=r?globalThis.expect:null;const a=r&&s?function(t,e){if(void 0!==e){const n=s(t);return{toBe(t){try{n.toBe(t)}catch(t){throw new Error(e)}},toBeDefined(){try{n.toBeDefined()}catch(t){throw new Error(e)}},toBeUndefined(){try{n.toBeUndefined()}catch(t){throw new Error(e)}},toBeGreaterThan(t){try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}},toHaveLength(t){try{n.toHaveLength(t)}catch(t){throw new Error(e)}},not:{toBe(t){try{n.not.toBe(t)}catch(t){throw new Error(e)}}},to:{be:{greaterThan:t=>{try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}}}}}}const n=s(t);return{...n,to:{be:{greaterThan:e=>s(t).toBeGreaterThan(e)}},toBe:t=>n.toBe(t)}}:function(t,e){if(void 0!==e){const n=o(t);return{toBe(t){n.toBe(t,e)},toBeDefined(){n.toBeDefined()},toBeUndefined(){n.toBeUndefined()},toBeGreaterThan(t){n.toBeGreaterThan(t)},toHaveLength(t){n.toHaveLength(t)},not:{toBe(t){n.not.toBe(t)}},to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}const n=o(t);return{...n,to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}},78:(t,e,n)=>{n.d(e,{iu:()=>L,HF:()=>E,L7:()=>v,wS:()=>f,VJ:()=>g,V4:()=>l,cS:()=>u,dQ:()=>d,QX:()=>s,yY:()=>I,o5:()=>a,l_:()=>r.l,wG:()=>k,Fr:()=>S,Lo:()=>C,T_:()=>i,dy:()=>x,_8:()=>y,it:()=>j,WB:()=>p,Sb:()=>h,IO:()=>c,_v:()=>_,di:()=>B,Iq:()=>T,dZ:()=>b,b$:()=>w});var o=n(995),r=n(525);function s(t){return document.querySelectorAll(t).length}const a=s;function c(t){return document.querySelectorAll(t)}function i(t){return c(t).forEach((t=>t.focus()))}function l(t){[...c(t)].forEach((t=>t.click()))}function u(t){l("#"+t)}function d(t,e=0){c(t)[e].click()}function p(t,e){const n=new KeyboardEvent("keydown",{key:e,bubbles:!0});t.dispatchEvent(n)}function h(t,e){const n=new KeyboardEvent("keyup",{key:e,bubbles:!0});t.dispatchEvent(n)}function g(t,e=0){f(c(t)[e])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function x(t){let e="";return c(t).forEach((t=>e+=t.innerHTML)),e}function b(t){let e="";return c(t).forEach((t=>e+=t.textContent)),e}function v(t){return document.getElementById(t)}function y(t){const e=document.getElementById(t);return e?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const m=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(m)}function _(t){return new Promise((e=>setTimeout(e,t)))}function k(t,e,n){const o=document.querySelectorAll(t),s=o.length;return n=n||`Expected ${e} elements to match query ${t} but found ${s}`,(0,r.l)(s).toBe(e,n),o}function C(...t){const e=t.reduce(((t,e)=>{const n=document.querySelectorAll(e);return t.push(...n),t}),[]);if(0===e.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const n=e.pop().innerHTML;e.forEach((t=>(0,r.l)(t.innerHTML).toBe(n)))}function S(t,e){(0,r.l)(x(t)).toBe(e)}function V(t,e,{elementCountExpected:n}={elementCountExpected:1},o,s,a=0){(0,r.l)(t.length).toBe(n,(()=>`Expected ${o} to be ${n} elements but is instead ${t.length}`)),(0,r.l)(e.length).toBe(n,(()=>`Expected ${s} to be ${n} elements but is instead ${e.length}`)),t.forEach(((t,e)=>{const n=document.querySelectorAll(s)[e];(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body BEFORE clicking ${o}`);let c=Number(n?.innerText);(0,r.l)(typeof t.click).toBe("function"),t.click(),(0,r.l)(n).toBeDefined(),(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body AFTER clicking ${o}`);let i=c+1;c=Number(n.innerText),(0,r.l)(document.body.contains(n)).toBe(!0),(0,r.l)(i).toBe(c,(()=>`After click ${o}, counter test ${a+1} of ${a+2} expected ${s} to be value ${i} but it is ${c}`)),t.click(),c=Number(n?.innerText),++i,(0,r.l)(i).toBe(c,(()=>`Counter test ${a+2} of ${a+2} expected ${s} to increase value to ${i} but it is ${c}`))}))}function B(t,e,{elementCountExpected:n}={elementCountExpected:1}){return V(document.querySelectorAll(t),document.querySelectorAll(e),{elementCountExpected:n},t,e)}function T(...t){const[e,n]=t.shift();let o=k(n,1),s=k(e,1);const a=o[0].innerText;V(s,o,{elementCountExpected:1},e,n);let c=2;t.forEach((([t,i],l)=>{o=k(i,1),s=k(t,1);let u=o[0],d=u.innerText;const p=(Number(a)+c).toString();(0,r.l)(d).toBe(p,(()=>`Expected second ${i} increase provider to be increased to ${a} but got ${d}`)),V(s,o,{elementCountExpected:1},e,n,l+2),u=o[0],d=u.innerText;const h=c+2;(0,r.l)(d).toBe((Number(a)+h).toString(),(()=>`Expected ${i} innerText to be ${Number(a)+h} but instead it is ${d}`)),c+=2}))}const J=void 0!==globalThis.vitest,j=J?globalThis.it:o.it,I=J?globalThis.describe:o.yY,E=J?globalThis.beforeEach:o.HF,L=J?globalThis.afterEach:o.iu},995:(t,e,n)=>{n.d(e,{HF:()=>u,executeBrowserTests:()=>p,it:()=>i,iu:()=>d,yY:()=>l});n(525);let o=null,r=new Map,s=[],a=new Map;const c=void 0!==globalThis.vitest,i=c?globalThis.it:(t,e)=>{const n={name:t,fn:e,suite:o};s.push(n);const a=r.get(o)||[];a.push(n),r.set(o,a)},l=c?globalThis.describe:(t,e)=>{const n=o;o=t,r.set(t,[]),a.set(t,{beforeEach:[],afterEach:[]}),e(),o=n},u=c?globalThis.beforeEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.beforeEach.push(t),a.set(o,e)},d=c?globalThis.afterEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.afterEach.push(t),a.set(o,e)};async function p(){let t=0,e=0;const n=[];console.log(`🧪 Running ${s.length} tests...\n`);const c=new Map;for(const t of s){const e=t.suite||null,n=c.get(e)||[];n.push(t),c.set(e,n)}for(const[o,r]of c){o&&console.log(`${o}`);for(const s of r){const r=o?"  ":"",c=a.get(s.suite);try{if(c?.beforeEach)for(const t of c.beforeEach)await t();if(await s.fn(),t++,console.log(`${r}✅ ${s.name}`),c?.afterEach)for(const t of c.afterEach)await t()}catch(t){if(e++,n.push({test:s.name,suite:s.suite,error:t}),console.error(`${r}❌ ${s.name}`),console.error(t),c?.afterEach)for(const t of c.afterEach)try{await t()}catch(t){console.error("Error in afterEach hook:",t)}}}o&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${e} failed`),n.length>0&&(console.error("\n❌ Failed Tests:"),n.forEach((({test:t,suite:e,error:n})=>{const o=e?`${e} > ${t}`:t;if(console.error(`\n${o}:`),console.error(n),n.stack){n.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),s=[],r.clear(),a.clear(),o=null,0===e}},337:(t,e,n)=>{n.r(e);var o=n(78);function r(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let e=0;e<500;e++)t.value="aaa - "+e,(0,o.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const e=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)e[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const n=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)n[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,o.yY)("☑️ todos",(function(){const t=(0,o.IO)(".new-todo")[0];(0,o.it)("todos add one remove one",(async function(){(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.l_)(t).toBeDefined(),t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0)})),(0,o.it)("todos basic",(async function(){window.location.hash="#/",await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),(0,o.V4)("input.toggle"),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),t.value="two",(0,o.WB)(t,"Enter");const e=(0,o.IO)("input.toggle")[1];e.click(),(0,o.l_)(e.checked).toBe(!0),t.value="three",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.V4)("#todo-view-active-link"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.l_)(window.location.hash).toBe("#/active"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.V4)("#todo-view-completed-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(0)})),(0,o.it)("todos editing",(function(){t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0);let e=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,o.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(e),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(1),(0,o.T_)("input#edit-todo-input");const n=(0,o.IO)("input#edit-todo-input")[0];n.value="two",(0,o.WB)(n,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0)})),(0,o.it)("⌚️ todos speedometer",r)}))},702:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("⌚️ watch tests",(()=>{const t=(0,o.dy)("#🍄-slowChangeCount"),e="0"===t;(0,o.it)("basic",(async()=>{const n=Number((0,o._8)("watch-testing-num-display"));(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),e?((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,o.l_)(Number((0,o.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe((0,o.dy)("#🦷-truthSubChangeCount"))),(0,o.V4)("#watch-testing-num-button"),(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🍄‍🟫-subjectChangeCount")).toBe((n+2).toString()),(0,o.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const r=Number((0,o.dy)("#🦷-truthChangeCount"));(0,o.V4)("#🦷-truthChange-button");let s=(r+1).toString();(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+1).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+2).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),(0,o.V4)("#🦷-reset-button");const a=(0,o.dy)("#🦷-watchTruth"),c=(0,o.dy)("#🦷-watchTruthAsSub");(0,o.l_)(c).toBe(a)}))}))},296:(t,e,n)=>{n.d(e,{Ef:()=>B,_i:()=>Tn,xQ:()=>Jt,v0:()=>Qo,KU:()=>Go,sj:()=>D,tg:()=>Pr,IX:()=>fr,tv:()=>je,LI:()=>ns,uz:()=>dr,_:()=>hr,G7:()=>ke,aj:()=>Vt,Wq:()=>nt,hi:()=>ls,oB:()=>ps,KX:()=>Lt,iB:()=>qr,FU:()=>Lo,h3:()=>as,fm:()=>fs,ho:()=>Hr,hr:()=>ss,dy:()=>jr,qH:()=>rs,Kn:()=>lt,DE:()=>at,j3:()=>hs,RW:()=>sr,li:()=>is,ol:()=>cs,ev:()=>wn,Zx:()=>Eo,nc:()=>vn,Kw:()=>gs,J8:()=>Or,Kf:()=>W,a:()=>cr,Ys:()=>os,gq:()=>Ut,td:()=>zo,yG:()=>ds,yP:()=>us,SB:()=>bn,$q:()=>rr,fo:()=>or,Ld:()=>Yo,Te:()=>Wo,_q:()=>Jn,bX:()=>$r,aK:()=>jo,YP:()=>Zo,Ut:()=>Ko});const o=":tagvar",r=":";function s(t){if(t.startsWith("class."))return"class";const e=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==e?e:!!t.startsWith("style.")&&"style"}const a=new RegExp(o+"(\\d+)"+r,"g");function c(t){return t.search&&t.startsWith(o)?t.search(a):-1}const i=/(:tagvar\d+:)/,l="ondoubleclick",u=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,d=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function p(t){const e=[],n=[],s=[];let a=null,c=-1,l=0;const p=new RegExp(d,"g");for(t=function(t){return t.replace(h,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(t);l<t.length;){const d=p.exec(t);if(!d)break;const[h,f,b]=d,y=h.startsWith("</"),m=h.endsWith("/>");if(l<d.index){const e=t.slice(l,d.index);if(e.trim()){const t=x(e);for(let e of t)e.startsWith(o)&&e.search(i)>=0&&-1===e.search(_)&&(e=o+ ++c+r),g(a,n,e)}}if(l=d.index+h.length,y){a=s.pop()||null;continue}const w=[];let k;for(;null!==(k=u.exec(b));)c=v(k,c,e,w);const C={nn:f};w.length&&(C.at=w),a?(a.ch||(a.ch=[]),a.ch.push(C)):n.push(C),m||(s.push(a),a=C)}if(l<t.length){const e=t.slice(l);if(e.trim()){const t=x(e);for(const e of t)e.startsWith(o)&&++c,g(a,n,e)}}return n}const h=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function g(t,e,n){!function(t,e,n){t?(t.ch||(t.ch=[]),t.ch.push(n)):e.push(n)}(t,e,{nn:"text",tc:f(n)})}function f(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function x(t){return t.split(i).filter(b)}function b(t){return""!==t}function v(t,e,n,c){const i=t[1]||t[3]||t[5];let u=t[2]||t[4]||t[6];if(void 0===i)return e;const d=""!==t[2],p=void 0===u&&d,h=i.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===l.length&&t===l?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(i.slice(0,o.length)===o){const t=o+ ++e+r;return n.push(["at",t]),c.push([t]),e}if(t[0].startsWith(i)&&t[0].slice(i.length,t[0].length).search(/\s+$/)>=0)return c.push([g]),e;const s=t[3];if(s.search(_)>=0){u=s;const t=[g,u];return c.push(t),e}u=o+ ++e+r}d||(u=t[2]);const f=u.split(m).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(a)>=0&&++e})));const x=[g,u],b=s(h);return b&&x.push(b),"style"===g?(c.unshift(x),e):(c.push(x),e)}const y=new RegExp(o+"(\\d+)"+r,"gi"),m=new RegExp("("+o+"\\d+"+r+")","gi"),w=o.slice(0,o.length-1),_=new RegExp(w+"&#x72;(\\d+)"+r,"gi"),k=w+"&#x72;$1"+r;function C(t,e){const n=function(t,e){const n=t;return function(t,e){const n=[];for(let s=0;s<t.length;++s){const a=t[s].replace(y,k);s<e.length?n.push(a+o+s+r):n.push(a)}return function(t,e,n){const s=n.length-e.length;if(s>0)for(let n=s;n>0;--n)t.push(o+(e.length+n-1)+r)}(n,t,e),n}(n,e)}(t,e).join("");return p(n)}const S="";var V,B;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(V||(V={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(B||(B={}));const T={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},J="ch";function j(t,e,n=[],o=[]){const r=t;for(let t=0;t<r.length;t++){const s=[...o,t],a=r[t];if(a.at){const t=a.at;a.at=E(t,e)}if(a.ch){const t=a.ch,o=[...s,J];a.ch=j(t,e,n,o)}t=I(a,e,r,t)}return r}function I(t,e,n,s){if("text"!==t.nn)return s;const c=t;let i,l=c.tc;if(typeof l!==V.string)return s;for(;null!==(i=a.exec(l));){const t=i[1],c=parseInt(t,10);if(!isNaN(c)&&c<e){const t=o+c+r,e=l.slice(i.index+t.length);n.splice(s,1,{nn:"text",v:c}),l=e,a.lastIndex=0}}return c.tc=l,s}function E(t,e){const n=[];for(const r of t){const[t,s,a]=r;if(t.startsWith(o)){const r=parseInt(t.replace(o,""),10);if(!isNaN(r)&&r<e){n.push([{tagJsVar:r}]);continue}}if(typeof s===V.string&&s.startsWith(o)){const r=parseInt(s.replace(o,""),10);if(!isNaN(r)&&r<e){n.push([t,{tagJsVar:r},a]);continue}}n.push(r)}return n}function L(t){return t.length}const P={};function $(t,e){const n=function(t){const e=t.map(L);return e.push(t.length),Number(e.join(""))}(t),o=P[n],r=o&&function(t,e,n){if(n&&n.strings.length===t.length&&n.strings.every(((e,n)=>e===t[n]))&&n.values.length===e.length)return!0;return!1}(t,e,o);if(r)return o.domMetaMap;const s=j(C(t,e),e.length),a={interpolation:void 0,string:void 0,strings:t,values:e,domMetaMap:s};return P[n]=a,s}const O=function(){};function D(t){N.length&&(N[N.length-1].paintRemoves.push(...q),q=[]),N.push({promise:t,paintRemoves:q}),q=[]}let N=[],A=[],q=[],H=[],M=[],R=[];const U={locks:0,removeLocks:0};function Y(t,e){e.textContent=t}function W(){if(!(U.locks>0))return function(){(function(){if(N.length){const t=N.map((t=>t.promise.then((()=>{const e=t.paintRemoves;for(const t of e)t[0](...t[1])}))));N=[];const e=q;return Promise.all(t).then((()=>{for(const t of e)t[0](...t[1])}))}for(const t of q)t[0](...t[1])})(),q=[];for(const t of H)t[0](...t[1]);for(const t of M)t[0](...t[1]);for(const t of A)t[0](...t[1])}(),void function(){A=[],H=[],M=[];const t=R;R=[];for(const e of t)e[0](...e[1])}()}function X(t,e){q.push([z,[t,e]])}function z(t,e){t.parentNode.removeChild(t)}function F(t,e){t.parentNode.insertBefore(e,t)}function Q(t,e){t.appendChild(e)}const G="object"==typeof document&&document.createElement("div");function K(t){return G.innerHTML=t,document.createTextNode(G.innerHTML)}function Z(t,e,n=O){const o=K(e);F(t,o),n(o)}function tt(t,e,n=O){G.innerHTML=e;const o=document.createTextNode(G.textContent);F(t,o),n(o)}function et(t,e,n){G.innerHTML=e;const o=document.createTextNode(G.textContent);Q(t,o),n(o)}function nt(t,e){const n=ot(t.subContext,e);return delete t.subContext,n}function ot(t,e){t.deleted=!0;const n=t.appendMarker;if(n&&(X(n,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const o=t.contextItem;return o.tagJsVar.destroy(o,e),76}function rt(t){if(!t)return!1;switch(t.tagJsType){case T.dom:case T.tag:case T.templater:return!0}return!1}function st(t){const e=t?.tagJsType;return e===T.tagComponent||e===T.stateRender}function at(t){return lt(t)&&typeof t.subscribe===B.function}function ct(t){return t&&it(t.then)}function it(t){return typeof t===B.function}function lt(t){return typeof t===B.object&&null!==t}function ut(t){return Array.isArray(t)}function dt(t){return t.renderCount=t.renderCount||0,t.state={newer:{state:[],states:[]}},t.global={blocked:[]}}function pt(){return Et.stateConfig.support}function ht(t){return yr(t.context),Et.stateConfig.support=t}function gt(t){const e=t.state;return e&&e.newest&&e.newest?e.newest:t.parentContext?gt(t.parentContext):void 0}function ft(t){let e=t;for(;e.ownerSupport&&!st(e.templater);)e=e.ownerSupport;return e.context.state.newest||e}function xt(...t){return t}function bt(t){const e=Et.stateConfig;return e.states[e.statesIndex]=t,++e.statesIndex,t(xt)}function vt(t){const e=Et.stateConfig,n=e.statesIndex,o=ft(e.prevSupport).context.state.newer.states[n];let r=[];o((function(...t){return r=t,t}));return e.states[e.statesIndex]=t,++e.statesIndex,t((function(...t){return r}))}function yt(t){yr(t);const e=Et.stateConfig;e.handlers.handler=St,e.handlers.statesHandler=bt,e.rearray=[];const n=e.state=[],o=e.states=[];e.statesIndex=0;(t.state=t.state||{}).newer={state:n,states:o}}function mt(t){const e=Et.stateConfig;return e.rearray=t,e.state=[],e.states=[],e.statesIndex=0,e.handlers.handler=Ct,e.handlers.statesHandler=vt,e}function wt(t,e,n){mt(n);Et.stateConfig.prevSupport=e,ht(t)}class _t{}function kt(t){const e=t.callback;if(!e)return t.defaultValue;const[n]=function(t){const[e]=t(_t),[n]=t(e);return[e,n]}(e);return n}function Ct(){const t=Et.stateConfig,e=t.rearray[t.state.length];return t.state.push(e),e.defaultValue}function St(t){const e=Et.stateConfig,n=br();if(!n||!n.state){const t="State requested but TaggedJs is not currently rendering a tag or host";throw console.error(t,{config:e,context:n}),new Error(t)}const o=n.state.newer;e.state=o.state;let r=t;if(typeof t===B.function&&(r=t()),typeof r===B.function){const t=r;r=function(...e){return t(...e)},r.original=t}const s={get:function(){return kt(s)},defaultValue:r};return e.state.push(s),r}function Vt(t){const e=new Jt;return e.subscribeWith=e=>{const n=[],o=[],r=(r,s)=>{n[s]=!0,o[s]=r;if(n.length===t.length){for(const t of n)if(!t)return;e(o,a)}},s=[...t],a=s.shift().subscribe((t=>r(t,0))),c=s.map(((t,e)=>t.subscribe((t=>r(t,e+1)))));return a.subscriptions=c,a},e}function Bt(t,e,n){const o=Jt.globalSubCount$;Jt.globalSubCount$.next(o.value+1);const r=function(){r.unsubscribe()};return r.callback=e,r.subscriptions=[],r.unsubscribe=function(){return function(t,e,n){!function(t,e){const n=t.findIndex((t=>t.callback===e));-1!==n&&t.splice(n,1)}(e,n);const o=Jt.globalSubCount$;Jt.globalSubCount$.next(o.value-1),t.unsubscribe=()=>t;const r=t.subscriptions;for(const t of r)t.unsubscribe();return t}(r,n,e)},r.add=t=>(r.subscriptions.push(t),r),r.next=t=>{e(t,r)},r}function Tt(t,e,n){const o=[...e],r=o.shift(),s=t=>{if(o.length)return Tt(t,o,n);n(t)};let a=s;const c=r(t,{setHandler:t=>a=t,next:s});a(c)}class Jt{constructor(t,e){this.value=t,this.onSubscription=e,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this)}subscribe(t){const e=Bt(0,t,this.subscribers),n=this.subscribeWith;if(n){if(this.methods.length){const n=t;t=t=>{Tt(t,this.methods,(t=>n(t,e)))}}return n(t)}return this.subscribers.push(e),this.onSubscription&&this.onSubscription(e),e}next(t){this.value=t,this.emit()}emit(){const t=this.value,e=this.subscribers;for(const n of e)n.callback(t,n)}toPromise(){return new Promise((t=>{this.subscribe(((e,n)=>{n.unsubscribe(),t(e)}))}))}toCallback(t){const e=this.subscribe(((n,o)=>{const r=o?.unsubscribe;r?r():setTimeout((()=>e.unsubscribe()),0),t(n)}));return this}pipe(...t){const e=new Jt(this.value);return e.setMethods(t),e.subscribeWith=t=>this.subscribe(t),e.next=t=>this.next(t),e}setMethods(t){this.methods=t}static all(t){return Vt(t.map((t=>{if(at(t))return t;return new Jt(t,(e=>(e.next(t),e)))})))}}Jt.globalSubCount$=new Jt(0);function jt(t){Object.defineProperty(t,"value",{set(e){t._value=e,t.emit()},get:()=>t._value})}const It=new Jt(void 0,(function(t){pt()||t.next()})),Et={stateConfig:{state:[],version:Date.now(),handlers:{handler:St,statesHandler:bt}},tagClosed$:It};function Lt(t,e,n){const o=t.tagJsVar.checkValueChange(e,t,n);return 0===o||Cr(e,t,n,o),o}function Pt(t,e,n,o,r){const s=e.context;s.locked=3,n.element=n.element||o,yr(n),n.tagJsVar.processInit(t,n,e,r,o),mr(),n.value=t,delete s.locked}function $t(t){switch(t){case void 0:case!1:case null:return S}return t}function Ot(t,e,n,o){switch(o){case"autofocus":return void H.push([Ht,[n]]);case"autoselect":return void H.push([qt,[n]]);case"style":{const o=t.split(".");return void H.push([Dt,[n,o,e]])}case"class":return void function(t,e,n){const o=t.split(".");if(o.shift(),e){for(const t of o)H.push([Nt,[n,t]]);return}for(const t of o)H.push([At,[n,t]])}(t,e,n)}throw new Error(`Invalid special attribute of ${o}. ${t}`)}function Dt(t,e,n){const o=e[1];t.style[o]=n,t.style.setProperty(o,n)}function Nt(t,e){t.classList.add(e)}function At(t,e){t.classList.remove(e)}function qt(t){t.select()}function Ht(t){t.focus()}function Mt(t,e,n){"object"!=typeof t[e]&&(t[e]={});for(const o in n){const r=n[o];H.push([Xt,[t,e,o,r]])}if(t[e].setProperty)for(const o in n){const r=n[o];H.push([Wt,[t,e,o,r]])}}function Rt(t,e,n){t.setAttribute(e,"")}function Ut(t,e,n){if(lt(n))return Mt(t,e,n);Yt(t,e,n)}function Yt(t,e,n){t[e]=n,void 0!==n&&!1!==n&&null!==n?t.setAttribute(e,n):t.removeAttribute(e)}function Wt(t,e,n,o){t[e].setProperty(n,o)}function Xt(t,e,n,o){t[e][n]=o}function zt(t,e){const n=function(t,e,n=[]){const o=t.context;n.push({support:t,renderCount:o.renderCount,provider:e});const r=e.children;for(let t=r.length-1;t>=0;--t){const o=r[t],s=o.context;n.push({support:o,renderCount:s.renderCount,provider:e})}return n}(t,e);return n}function Ft(t){return t.support}function Qt(t,e){return Gt(t,e)}function Gt(t,e){if(null===t||typeof t!==B.object)return t;if(e<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const n=ut(t)?[]:Object.create(Object.getPrototypeOf(t));if(ut(t))for(let o=0;o<t.length;o++)n[o]=Gt(t[o],e-1);else for(const o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=Gt(t[o],e-1));return n}function Kt(t,e,n){return Zt(t,e,n)}function Zt(t,e,n){return!(t!==e&&(o=t,r=e,!it(o)||!it(r)||o.toString()!==r.toString()))||(n<0||typeof t===B.object&&typeof e===B.object&&(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():ut(t)&&ut(e)?function(t,e,n){if(t.length!==e.length)return!1;for(let o=0;o<t.length;o++)if(!Zt(t[o],e[o],n-1))return!1;return!0}(t,e,n-1):!ut(t)&&!ut(e)&&function(t,e,n){const o=Object.keys(t),r=Object.keys(e);if(0===o.length&&0===r.length)return!0;if(o.length!==r.length)return!1;for(const s of o){if(!r.includes(s)||!Zt(t[s],e[s],n-1))return!1}return!0}(t,e,n-1)));var o,r}function te(t,e){const n=t.length;for(let o=0;o<n;++o){const n=t[o],r=e[o];if(ut(n)&&ut(r)){if(n===r)continue;return 3}if(typeof n!==B.function||typeof r!==B.function)if(typeof n!==B.object){if(n!==r)return 3.3}else if(typeof e===B.object){const t=Object.entries(n);for(const e of t){if(!ee(e,r))return 3.1}}}return!1}function ee([t,e],n){const o=n[t];return typeof e===B.function&&typeof o===B.function||o===e}function ne(t){return t.map(oe)}function oe(t,e){const n=t,o=t?.tagJsType;if(o)switch(o){case T.signal:case T.subscribe:case T.stateRender:return;case T.dom:case T.tag:case T.templater:return ne(n.values)}return ut(t)?ne(n):Qt(t,e)}function re(t){return oe(t,Ln)}function se(t){return oe(t,Pn)}function ae(t,e,n){const o={templater:t,context:e,castedProps:n,appSupport:void 0};return e.global.blocked=[],e.state||(e.state={newer:{state:[],states:[]}}),o}function ce(t,e,n,o){e.appSupport=n;const r=t.props;return r&&(e.propsConfig=function(t,e,n){const o=t.templater;if(o.tagJsType!==T.stateRender){switch(o.propWatch){case Tn.IMMUTABLE:return t.propsConfig={latest:e,castProps:n};case Tn.SHALLOW:return t.propsConfig={latest:e.map(re),castProps:n}}return t.propsConfig={latest:e.map(se),castProps:n}}}(e,r,o)),e}function ie(t,e){const n=e.providers;if(n)for(const t of n)for(let n=t.children.length-1;n>=0;--n){t.children[n].context.global===e&&t.children.splice(n,1)}t.context.destroy$.next(),t.context.renderCount=0}function le(t,e){for(const n of t){const t=n.lastArray;if(t){le(t,e);continue}const o=n.value;if(o?.tagJsType===T.subscribe){o.destroy(n,e),n.deleted=!0;continue}const r=n.global;if(!r)continue;const s=n.state.newest,a=r.subscriptions;a&&a.forEach(de),st(s.templater)&&ie(s,r);le(n.contexts,s),r.deleted=!0}}function ue(t,e=[],n=[]){for(const o of t){const t=o.global;if(!t)continue;const r=o.state.newest;if(r){e.push(r);const o=t.subscriptions;o&&n.push(...o)}const s=o.contexts;s&&ue(s,e,n)}return{tags:e,subs:n}}function de(t){t.unsubscribe()}function pe(t,e,n,o){const r=t.length-1,s=e-o,a=s<0||r<s,c=n[e];if(a)return he(c),1;const i=function(t,e,n,o,r){const s=e&&t!==e.arrayValue;if(s)return he(n),o.splice(r,1),2;return 0}(c.value.arrayValue,t[e],c,n,e);return i}function he(t){!function(t,e){if(t&&e.state?.oldest){return void ye(e.state.oldest,t)}const n=e.simpleValueElm;delete e.simpleValueElm,X(n)}(t.global,t)}function ge(t){fe(t,t.lastArray)}function fe(t,e){for(let t=0;t<e.length;++t)he(e[t]);delete t.lastArray}function xe(t){const e=t.marker;e&&X(e);X(t.domElement,"destroyClone")}function be(t,e){!function(t,e){for(const n of t){if(n.withinOwnerElement){const t=n.tagJsVar;if(t&&"host"===t.tagJsType){const e=n.supportOwner;t.destroy(n,e)}continue}const t=n.lastArray;if(t){fe(n,t);continue}const o=n.simpleValueElm;if(o){delete n.simpleValueElm,X(o);continue}const r=n.global;if(void 0===r)continue;r.deleted=!0;const s=n.state?.oldest;s&&be(n,e)}}(t.contexts,e),ve(t)}function ve(t){!function(t){for(let e=t.length-1;e>=0;--e)xe(t[e]),t.splice(e,1)}(t.htmlDomMeta)}function ye(t,e){const n=t.context;e.deleted=!0,n.renderCount=0;const o=[];return le(n.contexts,t),t.templater.wrapper&&ie(t,e),be(n,o),delete n.state,delete n.contexts,delete n.returnValue,o}function me(t,e){const n=we(t,e);return!(n||!e.templater.tag?._innerHTML||!we(t.outerHTML,e))||n}function we(t,e){const n=t.templater,o=e.templater,r=n?.tag||t,s=o.tag;if(n?.tagJsType===T.stateRender)return n.dom===o.dom;switch(r.tagJsType){case T.dom:return s?.tagJsType===T.dom&&function(t,e){const n=t.dom,o=e.dom;return n===o}(r,s);case T.tag:{const n=function(t,e,n,o){const r=t.strings,s=e.strings;if(r.length!==s.length)return!1;if(!r.every(((t,e)=>s[e].length===t.length)))return!1;const a=n.templater.values||t.values,c=o.templater.values||e.values;return function(t,e){const n=t.length===e.length;if(!n)return!1;const o=e.every((function(e,n){const o=t[n];if(typeof e===B.function&&typeof o===B.function){return!!(e.toString()===o.toString())}return!0}));if(o)return!0;return!1}(a,c)}(r,s,t,e);return n}}throw new Error(`unknown tagJsType of ${r.tagJsType}`)}function _e(t){const e=t.global;ye(t.state.newest,e),function(t){delete t.htmlDomMeta,delete t.contexts,delete t.state,delete t.global,t.renderCount=0}(t)}function ke(t,e){const n=e.global,o=e.state?.newest;if(rt(t)){return me(t,o)?(kr(e,t,o),0):(ye(o,n),dt(e),7)}const r=t?.tagJsType;if(r){return!0===kr(e,t,e.state.newest.ownerSupport)?0:88}return _e(e),8}function Ce(t,e,n,o){const r={value:t,destroy$:new Jt,tagJsVar:jo(t),withinOwnerElement:n,parentContext:o,valueIndex:e.length};return e.push(r),r}function Se(t,e,n,o,r,s,a){const c=document.createTextNode(S),i=Ce(t,e,r>0,o);return i.placeholder=c,i.element=s,s?M.push([Q,[s,c]]):A.push([F,[a,c]]),Pt(t,n,i,s,a),i}function Ve(t,e,n,o,r,s){for(const a of t){const t=a[0],c=a[1],i=a[2]||!1;let l=a.length>1?Ut:Rt;a[3]&&(l=a[3]);const u=lo(t,c,e,n,o,l,o.context.contexts,r,i);"object"==typeof u&&s.push(u)}}function Be(t,e,n,o,r,s,a){const c=[];return e.at&&Ve(e.at,n,t,o,r,c),s?M.push([Q,[s,t]]):A.push([F,[a,t]]),c}function Te(t,e,n,o,r,s,a){const c=n.context.contexts,i=[];s&&void 0===a&&(a=document.createTextNode(S),M.push([Q,[s,a]]),s=void 0);for(let l=0;l<t.length;++l){const u=t[l],d=u.v;if(!isNaN(d)){Se(e[c.length],c,n,o,r,s,a);continue}const p={};if(i.push(p),"text"===u.nn){Je(p,u,s,a);continue}const h=p.domElement=document.createElement(u.nn),g={isAttrs:!0,element:h,parentContext:o,contexts:[],destroy$:new Jt,tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,withinOwnerElement:!0},f=Be(h,u,e,n,g,s,a);g.element=h,g.contexts=f,u.ch&&(p.ch=Te(u.ch,e,n,g,r+1,h,a).dom)}return{dom:i,contexts:c}}function Je(t,e,n,o){const r=t,s=r.tc=e.tc;n?M.push([et,[n,s,function(t){r.domElement=t}]]):A.push([tt,[o,s,function(t){r.domElement=t}]])}function je(t,e,n){const o=t.context;o.state=o.state||{};const r=o.state;r.oldest=t,r.newest=t,o.state.older=o.state.newer,++U.locks;const s=function(t,e,n,o){const r=function(t){const e=t.templater,n=e.tag;if(n.tagJsType===T.dom)return n.dom;const o=n.strings;return $(o,n.values)}(t),s=t.templater.tag,a=s.values,c=[];t.context.contexts=c;const i=Te(r,a,t,e,0,n,o);return i}(t,t.context,e,n);return o.htmlDomMeta=s.dom,--U.locks,s}function Ie(t,e){const n=e.state.newest,o=e.placeholder;return n.ownerSupport=t,je(n,void 0,o),n}function Ee(t){const e={tagJsType:T.templater,processInitAttribute:O,processInit:$e,processUpdate:O,checkValueChange:ke,destroy:O,propWatch:"shallow",key:O};return e.tag=t,t.templater=e,e}function Le(t,e,n){const o=function(t,e,n,o,r){const s={templater:t,context:o,castedProps:r,appSupport:void 0};return s.ownerSupport=e,s.appSupport=n,s}(t,e,e.appSupport,n);return n.contexts=[],o}function Pe(t,e,n,o,r){const s=Le(t,n,e);s.ownerSupport=n;const a=je(s,o,o?void 0:r);for(const t of a.dom)t.marker&&(o?M.push([Q,[o,t.marker]]):A.push([F,[r,t.marker]])),t.domElement&&(o?M.push([Q,[o,t.domElement]]):A.push([F,[r,t.domElement]]));return s}function $e(t,e,n,o,r){return e.state={},r?Pe(t,e,n,r,o):Ie(n,e)}function Oe(t,e,n){return"element"===t?.tagJsType?(e.tagJsVar.processUpdate(t,e,n,[]),e.value=t,0):t===e.value?0:Lt(e,t,n)}function De(t,e){const n={tagJsType:T.templater,processInit:$e,processInitAttribute:O,processUpdate:Oe,checkValueChange:ke,destroy:_e,propWatch:t,props:e,key:function(t){return n.arrayValue=t,n},matchesInjection:t=>n.wrapper===t||n.wrapper?.original===t?.original};return n}const Ne=[];function Ae(t){const e=t.context;return Mn(t.templater)?Un(t):Hn(t,t,e)}function qe(t,e,n){return t.map((function(t){return function(t,e,n,o){if(rt(t)||!t)return t;if(!e)return t;return He(t,e,n,o)}(t,e.ownerSupport,e,n)}))}function He(t,e,n,o,r){if(!t)return t;if(t.tagJsType)return t;if(typeof t===B.function)return o<=1?function(t,e,n){const o=t.mem;if(o)return t;const r=function(...t){return function(t,e,n,o){const r=o.context,s=r.state?.newest||o,a=void 0===pt(),c=t.apply(e,n),i=function(){const t=s.context;return!t.global||t.locked||Ae(s),c};if(a)return i();return Et.tagClosed$.toCallback(i),c}(r.mem,e,t,n)};return r.original=t,r.mem=t,Object.assign(r,t),r}(t,r,e):t;if(o===Pn)return t;return Re(t)?t:ut(t)?function(t,e,n,o){for(let r=t.length-1;r>=0;--r){const s=t[r];if(t[r]=He(s,n,e,o+1,t),typeof s===B.function){if(s.mem)continue;Me(o+1,r,s,t,e)}}return t}(t,n,e,o):function(t,e,n,o){const r=Object.keys(t);for(const s of r){const r=t[s],a=He(r,n,e,o+1,t);if(t[s]===a)continue;const c=Object.getOwnPropertyDescriptor(t,s);if(!(c?.get||c?.set)&&(t[s]=a,typeof a===B.function)){if(r.mem)continue;Me(o+1,s,r,t,e)}}return t}(t,n,e,o)}function Me(t,e,n,o,r){t>0&&(o[e].subscription=r.context.destroy$.toCallback((function(){o[e]=n})))}function Re(t){return typeof t!==B.object||!t||t.tagJsType}function Ue(t,e,n,o){const r=e.original,s=t.tagJsType===T.stateRender,a=Et.stateConfig;let c;return ht(n),s?c=t():(c=r(...o),typeof c===B.function&&void 0===c.tagJsType&&(c=c())),n.context.returnValue=c,c.templater=t,t.tag=c,n.context.state.newer={...a},n}function Ye(t,e,n,o,r){const s=ae(t,o,r);return s.ownerSupport=e,ce(t,s,n,r)}function We(t,e,n){const o=t.propWatch===Tn.DEEP?Pn:Ln,r=t.props,s=e.propsConfig;let a=s.castProps;const c=n?.propsConfig,i=c?.castProps;i&&(s.castProps=i,a=Dn(e,n,n.ownerSupport,r,o));return a||qe(r,e,0)}function Xe(t,e){++t.context.renderCount,ze(),Et.tagClosed$.next(e)}function ze(){!function(){const t=Et.stateConfig,e=t.context;e.state=e.state||{},e.state.newer={...t};const n=t.support;e.state.newest=n}(),function(){const t=Et.stateConfig;delete t.prevSupport,delete t.support,delete t.state,delete t.states,mr()}()}function Fe(t,e,n,o){let r;const s=t.templater;if(s.tagJsType===T.stateRender){const e=s;r=Ye(s,o,t.appSupport,n),Ue(s,e,r)}else{r=(0,s.wrapper)(t,n,e)}return Xe(r,o),r.ownerSupport=t.ownerSupport,r}function Qe(t,e,n,o){return wt(t,e,n.state.older.state),Fe(t,e,n,o)}function Ge(t,e,n,o){return yt(t.context),ht(t),Fe(t,e,n,o)}function Ke(t,e,n,o,r){dt(e);const s=function(t,e,n){const o=De(Tn.DEEP);o.tagJsType=t.tagJsType;const r=Le(o,n,e);function s(){return o.tag=t(),r}return o.wrapper=s,s.tagJsType=t.tagJsType,s.original=t.original||t,r}(t,e,n);return Ge(s,void 0,e),Pe(s.templater,e,n,r,o)}function Ze(t,e,n){const o=Ye(t,n,n.appSupport,e),r=o.propsConfig;if(r){const e=t.tagJsType!==T.tagComponent?[]:We(t,o);r.castProps=e}return Ge(o,e.state.newest,e)}function tn(t,e,n){const o=t.context,r=o.returnValue,s=jo(r);delete o.global;const a={tagJsType:"tag-conversion",processInitAttribute:s.processInitAttribute,processInit:(e,r,a)=>s.processInit(o.returnValue,c,t,n.placeholder),processUpdate:(e,n,r)=>{const i=o.returnValue;if(e?.tagJsType!==o.value.tagJsType||a.checkValueChange(i,c,t))return a.destroy(o,t),void Cr(e,o,r,789);if(c.value.props=e.props,c.inputsHandler=o.inputsHandler,o.inputsHandler){(0,o.inputsHandler)(c.value.props)}s.processUpdate(i,c,t,[]),c.value=i},checkValueChange:(e,n)=>{const r=o.returnValue;return s.checkValueChange(r,c,t)},destroy:(e,n)=>{s.destroy(c,t),delete o.returnValue,o.global={},o.contexts=[],o.htmlDomMeta=[],o.value.destroy(o,n)}},c={value:r,tagJsVar:s,destroy$:new Jt,placeholder:o.placeholder,valueIndex:-1,withinOwnerElement:!0,parentContext:o};return o.tagJsVar=a,s.processInit(r,c,t,n.placeholder),t}function en(t,e,n,o){const r=Ze(t,e,n),s=r.templater.tag;return["dom","html"].includes(s.tagJsType)?function(t,e){const n=je(t,e,void 0);for(const t of n.dom)t.domElement&&M.push([Q,[e,t.domElement]]),t.marker&&M.push([Q,[e,t.marker]]);return t}(r,o):tn(r,0,e)}function nn(t,e,n,o,r){return dt(e),r?en(t,e,n,r):function(t,e,n){const o=Ze(t,e,n),r=o.templater.tag;return["dom","html"].includes(r.tagJsType)?(je(o,void 0,e.placeholder),o):tn(o,0,e)}(t,e,n)}function on(t){++U.locks,t.forEach(rn),--U.locks,W()}function rn(t){const e=t.context;if(!e.global)return void e.tagJsVar.processUpdate(e.value,e,t.ownerSupport,[]);Rn(e.state.newest)}function sn(t,e){for(let n=0;n<t.length;++n){un(t[n],e[n])}}let an;function cn(...t){return an=t,t}function ln(){return an}function un(t,e){t(cn,1),e(ln,2)}function dn(t,e,n,o){for(let n=t.length-1;n>=0;--n){const o=t[n].get(),r=e[n].callback;r&&r(o)}for(let t=o.length-1;t>=0;--t){hn.length=0,pn=0;(0,o[t])(gn),n[t](fn)}}let pn=0;const hn=[];function gn(...t){return hn.push(t),t}function fn(...t){return hn[pn++]}function xn(t,e,{resolvePromise:n,resolveValue:o}){if(ct(t)){return e.context.locked=2,t.then(function(t,e){return n=>{const o=t.context.global,r=t.context;if(delete r.locked,!0===o.deleted)return e(n);!function(t,e){const n=t.context.state,o=e.context.state;sn(n.newer.states,o.newer.states)}(t,r.state.newest);return on(Xn(t)),e(n)}}(e,n))}return o(t)}function bn(t){return Et.stateConfig.handlers.handler(t)}function vn(t){return bn((()=>{const e=t();if(br().global){return xn(e,pt(),{resolvePromise:yn,resolveValue:mn})}})),Jn}function yn(t){return t}function mn(t){return t}function wn(t){return bn((function(){br().destroy$.toCallback(t)})),Jn}let _n=0;const kn=Sn("click"),Cn=Sn("mousedown");function Sn(t){return function(e){const n=dr(e);return bn((()=>{vr().addEventListener(t,n)})),n}}const Vn={get:vr,onclick:kn,click:kn,onClick:kn,mousedown:Cn,onmousedown:Cn,onMouseDown:Cn};function Bn(t,e){Object.defineProperty(Jn,t,{get:()=>e,set:t=>e(t)})}var Tn;function Jn(t,e=Tn.SHALLOW){const n=function(...o){const r=De(e,o);r.tagJsType=T.tagComponent,r.processInit=nn;const s=function(t,e){return function(n,o,r){const s=We(t,n,r),a=n.ownerSupport,c=Ye(t,a,n.appSupport,o,s);return Ue(t,e,c,s)}}(r,n);return s.original=t,r.wrapper=s,r},o=t;n.original=t,o.tags=Ne,o.setUse=Et,o.ValueTypes=T,o.tagIndex=_n++,Ne.push(n);const r=n;return r.inputs=t=>(br().inputsHandler=t,!0),r}function jn(t,e,n){if(Wn(t,e))return 11;switch(n){case Tn.NONE:return 1;case Tn.SHALLOW:return te(t,e);case Tn.IMMUTABLE:return En(t,e)}return function(t,e){let n=t,o=e;n=[...t],o=[...e||[]];if(!n.every(((t,e)=>function(t,e,n,o){const r=o[e];if(typeof t===B.object){const e={...t},n={...r||{}},o=Object.entries(e).every((([t,o])=>In(o,n[t],(()=>{delete e[t],delete n[t]}))));return o}return In(t,r,(function(){n.splice(e,1),o.splice(e,1)}))}(t,e,n,o))))return 7;return!1}(t,e)}function In(t,e,n){if(typeof t!==B.function)return!!Kt(t,e,Pn)&&4;if(typeof e!==B.function)return!1;const o=e?.original;o&&(e=o);t.original&&(t=t.original);return t.toString()===e.toString()?(n(),5):(n(),6)}function En(t,e){const n=t.length;for(let o=0;o<n;++o){if(t[o]!==e[o])return 2}return!1}Bn("onclick",kn),Bn("click",kn),Bn("onMouseDown",Cn),Bn("onmousedown",Cn),Bn("mousedown",Cn),function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(Tn||(Tn={})),Jn.element=Vn,Jn.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},Jn.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},Jn.deepPropWatch=Jn,Jn.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Jn.inject=function(t){const e=br();if(!e)throw new Error("tag.inject can only be called within a tag or host context");let n=e.parentContext;for(;n;){const e=n.contexts;if(e)for(const n of e)if(n.isAttr&&n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;if(n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;n=n.parentContext}const o=`Could not find parent context for tag.inject ${t}`;throw console.error(o,{targetItem:t,context:e}),new Error(o)},Jn.onInit=vn,Jn.onDestroy=wn,Jn.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Jn.immutableProps=function(t){return Jn(t,Tn.IMMUTABLE)},Jn.watchProps=function(t){return Jn(t,Tn.SHALLOW)},Object.defineProperty(Jn,"renderOnce",{set(t){t.tagJsType=T.renderOnce,t.processInit=Ke,t.processUpdate=Oe,t.destroy=_e,t.checkValueChange=function(){return 0}}}),Object.defineProperty(Jn,"use",{set(t){t.original={setUse:Et,tags:Ne},t.tagJsType=T.stateRender,t.processInit=nn,t.processUpdate=Oe,t.checkValueChange=ke,t.destroy=_e}});const Ln=3,Pn=10;function $n(t,e,n,o,r,s){return null==t||s>r?e:typeof t===B.function?e.mem?(t.mem=e.mem,e):(t.mem=e,t):Re(e)?e:ut(e)?function(t,e,n,o,r,s){for(let a=t.length-1;a>=0;--a){const c=t[a],i=e[a];t[a]=$n(i,c,n,o,s,r+1)}return t}(e,t,n,o,s,r):function(t,e,n,o,r,s){const a=Object.keys(t);for(const c of a){const a=t[c],i=$n(e[c],a,n,o,s,r+1);if(a===i)continue;const l=Object.getOwnPropertyDescriptor(t,c)?.set;l||(t[c]=i)}return t}(e,t,n,o,s,r)}function On(t,e,n){const o=n.global,r=n.state.newest,s=r.templater.wrapper;let a=e.templater.wrapper,c=!1;const i=e.templater.tagJsType,l=T.stateRender===i||T.renderOnce===i;if(l)c=e.templater.tagJsType===T.renderOnce||me(r,e);else if(s&&a){const t=r.templater.tag?._innerHTML;t&&(a=e.outerHTML);c=s.original===a.original}const u=e.templater;if(!c)return void function(t,e,n){const o=t.global;ye(t.state.oldest,o),dt(t),e.processInit(e,t,n,t.placeholder)}(n,u,t);const d=l||function(t,e){return jn(e.props,t.propsConfig.latest,t.templater.propWatch)}(r,u);if(d)n.locked?o.blocked.push(e):(Rn(e),++n.renderCount);else{!function(t,e,n,o,r){const s=t.props,a=Dn(e,n,o,s,r),c=e.propsConfig;c.castProps=a;const i=n.propsConfig;i.latest=c.latest}(u,e,r,t,u.propWatch===Tn.DEEP?Pn:Ln)}}function Dn(t,e,n,o,r,s=-1){const a=e.context;if(!a.global||!a.state.newest){const e=qe(o,t,s);o.push(...e);return t.propsConfig.castProps=e,o}const c=(e=a.state.newest||e).propsConfig.castProps,i=[];for(let e=0;e<o.length;++e){const a=o[e],l=$n(c[e],a,t,n,r,s+1);i.push(l)}return t.propsConfig.castProps=i,i}function Nn(t){const e=t.context,n=e.global,{subs:o,tags:r}=ue(e.contexts);An(e);for(const t of r){if(!0===t.context.global.deleted)return;An(t.context)}n.subscriptions&&o.forEach(de),dt(e)}function An(t){t.global.deleted=!0,be(t,[])}function qn(t,e,n){let o;o=function(t){const e=t?.context,n=e?.state;return n?.older?.state}(e)?Qe(t,e,n):Ge(t,e,n);const r=!e||me(e,o);if(r){if(e){const t=e.templater.tag;if(t&&n.renderCount>0){const n=e?.templater,o=n?.tag;!function(t,e,n){if(t.tagJsType===T.dom){const o=n?.dom;return void(o!==t.dom&&Nn(e))}if(n){const o=n.strings;if(o){const n=o?.length;n!==t.strings.length&&Nn(e)}}}(t,e,o)}}}else{!function(t,e){const n=t.context.global;let o=-1;const r=n.providers=n.providers||[],s=r.length-1;for(;o++<s;){const t=r[o];let s=-1;const a=t.children.length-1;for(;s++<a;)if(n===t.children[s].context.global)return t.children.splice(s,1),void t.children.push(e)}}(e,o),Nn(e);const t=o.context;t.state.oldest=o,t.state.newest=o,t.state.older=t.state.newer}return o.ownerSupport=t.ownerSupport,{support:o,wasLikeTags:r}}function Hn(t,e,n){const o=qn(e,t,n);if(o.wasLikeTags){return _r(n.state.oldest,o.support),o.support}return Ie(e,n)}function Mn(t){return T.templater===t.tagJsType}function Rn(t){const e=t.context,n=e.global,o=Mn(t.templater);if(e.locked)return n.blocked.push(t),t;if(o){return Un(t)}e.locked=4,n.blocked.length&&(t=n.blocked.pop(),n.blocked=[]);const r=Hn(e.state.newest,t,e);return delete e.locked,r}function Un(t){return Rn(ft(t).context.state.newest)}function Yn(t,e){if(e.context.global.deleted)return!1;const n=function(t,e){const n=t.props,o=e.propsConfig,r=o.latest;if(Wn(n,r))return!0;switch(t.propWatch){case Tn.IMMUTABLE:return En(n,r);case Tn.SHALLOW:return te(n,r)}return!Kt(n,r,Pn)}(t,e);return!!n}function Wn(t,e){return t.length!==e.length}function Xn(t,e=[]){const n=t.context,o=Mn(t.templater),r=t.ownerSupport;if(n.locked)return e.push(t),e;if(o)return Xn(r,e);if(!0===t.context.global.deleted)return e;const s=t,a=st(s.templater),c=t.templater.tagJsType,i=r&&c!==T.stateRender&&(!a||Yn(s.templater,s)),l=function(t){const e=t.context.global.providers;if(!e)return[];const n=[];for(const t of e){const e=zt(t.owner,t);n.push(...e.map(Ft))}return n}(s);return e.push(...l),i?(Xn(r,e),a&&e.push(s),e):(e.push(s),e)}function zn(t,e){const n=e.context.global,o=function(t,e){if(!0!==n.deleted)return function(t,e,n,o){const r=ft(e),s=r.context;s.locked=1;const a=t.apply(n,o);delete s.locked;return function(t,e){if(e.context.global.deleted)return;return on(Xn(e)),xn(t,e,{resolvePromise:Gn,resolveValue:Kn})}(a,r)}(o.tagFunction,o.support,t,e)};return o.tagFunction=t,o.support=e,o}const Fn="no-data-ever",Qn="promise-no-data-ever";function Gn(){return Qn}function Kn(){return Fn}function Zn(t,e,n){const o=n[e];if(o){let e=!1;if(t.originalStopPropagation=t.stopPropagation,t.stopPropagation=function(){e=!0,t.originalStopPropagation.call(t),t.stopPropagation=t.originalStopPropagation,delete t.originalStopPropagation},o(t),t.defaultPrevented||e)return}const r=n.parentNode;r&&Zn(t,e,r)}function to(t,e,n,o){const r=t.appElement,s=function(t){"blur"===t&&(t="focusout");return"_"+t}(e);"blur"===e&&(e="focusout");const a=t.context.global.events;if(!a[e]){const t=function(t){Zn(t,s,t.target)};a[e]=t,r.addEventListener(e,t)}n[s]=o,n[e]=o}function eo(t,e,n,o){const r=function(...e){return r.tagFunction(t,e)};r.tagFunction=e,r.support=n,to(n.appSupport,o,t,r)}function no(t){return null==t||!1===t}function oo(t,e,n,o,r,a,c){if(!no(e))if(typeof e!==B.object)0!==e.length&&r(n,e,S);else for(const r in e){const i=s(r);lo(r,e[r],t,n,o,Ut,a,c,i)}}function ro(t,e){t.removeAttribute(e)}function so(t,e,n,o){const r=e,s=t;if(s?.tagJsType){const o=e.value;return o?.tagJsType?void o.checkValueChange(s,e,n):(s.isAttr=!0,yr(e),s.processInitAttribute(r.attrName,t,r.element,s,r,n,Ut),mr(),void(r.tagJsVar=s))}if(r.isNameOnly)return function(t,e,n,o,r,s,a,c){if(n){if(no(e)||""===e)return void o.removeAttribute(n);if(typeof n===B.object)if(typeof e===B.object)for(const t in n)t in e||H.push([ro,[o,t]]);else for(const t in n)H.push([ro,[o,t]])}oo(t,e,o,r,s,a,c)}(o,t,r.value,r.element,n,r.howToSet,[],r.parentContext),void(r.value=t);const a=r.element;!function(t,e,n,o,r,s,a){if(it(t))return function(t,e,n,o,r,s,a){const c=t.templater.wrapper;if((c?.tagJsType||c?.original?.tagJsType)!==T.renderOnce)return po(a,e,t,o,n);return uo(e,n,o,r,s,t)}(r,t,o,e,a,s,n);uo(t,o,e,a,s,r)}(t,r.attrName,r,a,n,r.howToSet,r.isSpecial),e.value=t}function ao(t,e,n,o,r,s,a){const i=o.length;function l(o){const s=function(t,e,n){return t.reduce(((t,o)=>{if(c(o)>=0){const o=n++,r=e[o];return t.push(r),t}return t.push(o),t}),[])}(e,o,i).join("");r(n,t,s)}return e.forEach((e=>{if(c(e)>=0){const r=o.length,c=jo(e),i={isAttr:!0,element:n,attrName:t,withinOwnerElement:!0,tagJsVar:c,valueIndex:o.length,parentContext:a,destroy$:new Jt};c.processUpdate=function(t,e,n,o){l(o)};const u=s[r];i.value=u,o.push(i)}})),l(s),o}function co(t,e,n,o,r,s,a,c,i,l){const u=jo(e),d={isAttr:!0,element:n,attrName:t,withinOwnerElement:!0,tagJsVar:u,destroy$:new Jt,valueIndex:i,parentContext:r};return o.push(d),u.processUpdate=so,function(t,e,n,o,r,s,a,c){if(n.element=o,n.howToSet=r,typeof e===B.function)return po(n,e,s,t,o);if(n.attrName=t,n.isSpecial=a,e?.tagJsType)return void function(t,e,n,o,r){e.processInitAttribute(t,e,r,e,n,o,Ut),n.tagJsVar=e}(t,e,n,s,o);go(t,e,o,r,a,n)}(t,e,d,n,s,a,c),d.value=e,d}function io(t){return lt(t)&&"tagJsVar"in t?t.tagJsVar:-1}function lo(t,e,n,o,r,s,a,c,i){const l=io(t),u=l>=0;let d=n[l];e?.tagJsType&&(d=e);const p=d;if(p?.tagJsType)return function(t,e,n,o,r,s,a,c,i){const l=Ce(t,e||[],!0,n);return l.element=c,l.valueIndex=r,l.isAttr=!0,l.isNameOnly=i,l.stateOwner=ft(s),l.supportOwner=s,yr(l),o.processInitAttribute(a,t,c,o,l,s,Ut),mr(),l.oldTagJsVar=l.tagJsVar,l.tagJsVar=o,l}(e,a,c,p,l,r,t,o,u);if(u){const t=Ce(d,a,!0,c);t.valueIndex=l,t.isAttr=!0,t.element=o,t.isNameOnly=!0,t.howToSet=s;return t.tagJsVar.processUpdate=so,oo(n,d,o,r,s,a,c),t}if(Array.isArray(e))return ao(t,e,o,a,s,n,r.context);const h=io(e);if(h>=0){return co(t,n[h],o,a,c,s,r,i,h)}return go(t,e,o,s,i,c)}function uo(t,e,n,o,r,s){if(!1===o){switch(t){case void 0:case!1:case null:return void H.push([ho,[e,n]])}if(it(t))return eo(e,t,s,n);r(e,n,t)}else Ot(n,t,e,o)}function po(t,e,n,o,r){e=zn(e,n);return t.tagJsVar.processUpdate=so,eo(r,e,n,o)}function ho(t,e){t.removeAttribute(e)}function go(t,e,n,o,r,s){return r?Ot(t,e,n,r):"function"==typeof e?function(t,e,n,o,r){const s=t(),a={tagJsType:"dynamic-attr",checkValueChange:(e,n,o)=>{const r=t();return c.tagJsVar.checkValueChange(r,c,o)},processInit:O,processInitAttribute:O,destroy:(t,e)=>{c.tagJsVar.destroy(c,e)},processUpdate:(e,n,o,r)=>{const s=t();c.tagJsVar.processUpdate(s,c,o,r),c.value=s}},c={isAttr:!0,element:o,parentContext:e,value:s,tagJsVar:jo(s),valueIndex:-1,withinOwnerElement:!0,destroy$:new Jt},i={isAttr:!0,contexts:[c],element:o,parentContext:e,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Jt};return c.tagJsVar.processInitAttribute(n,s,o,c.tagJsVar,c,{},r),i}(e,s,t,n,o):void o(n,t,e)}function fo(t,e,n,o,r,s){const a=e.tagJsVar,c=t;if(a.checkValueChange(c,e,n)>0){a.destroy(e,n),o.removeAttribute(r);const c=jo(t);return c.isAttr=!0,c.processInitAttribute(r,t,o,c,e,n,s),void(e.tagJsVar=c)}}function xo(t,e,n,o,r,a,c){o.destroy=bo,o.checkValueChange=_o,o.processUpdate=(e,o,r)=>fo(e,o,r,n,t,c);const i=s(t);go(t,e,n,c,i,r),r.tagJsVar=o}function bo(t){const e=t.element,n=t.attrName;e.removeAttribute(n)}function vo(t){return{tagJsType:"simple",value:t,processInitAttribute:xo,processInit:mo,destroy:wo,checkValueChange:ko,processUpdate:yo}}function yo(t,e,n){return t===e.value?0:Lt(e,t,n)}function mo(t,e,n,o){const r=$t(t);o=e.placeholder;const s=e.paint=[Z,[o,r,function(t){e.simpleValueElm=t,delete e.paint}]];A.push(s)}function wo(t){const e=t.simpleValueElm;delete t.simpleValueElm,X(e,"deleteSimpleValue")}function _o(t,e){return null==t||t===e.value?0:6}function ko(t,e){return null!=t&&typeof t===B.object?(wo(e),6):(function(t,e){const n=$t(t);if(e.paint)return void(e.paint[1][1]=n);const o=e.simpleValueElm;H.push([Y,[n,o]])}(t,e),0)}function Co(t,e){return ut(t)?0:(ge(e),9)}function So(t,e,n,o){const r=void 0===t.lastArray;r&&(t.lastArray=[]);const s=t.lastArray;let a=t.placeholder,c=0;const i=[];if(!r){for(let t=0;t<s.length;++t){const n=s[t],o=pe(e,t,s,c);0!==o?2!==o?c+=o:t-=1:i.push(n)}t.lastArray=i}const l=e.length;for(let r=0;r<l;++r){a=Vo(e,r,t.lastArray,n,a,o).placeholder}}function Vo(t,e,n,o,r,s){const a=t[e],c=n[e];if(c)return function(t,e,n,o,r,s,a){const c=n.length>r;if(c)return Oe(t,e,o),e;const i=Io(t,o,n,s,a);return n.push(i),i}(a,c,n,o,e,r,s);const i=Io(a,o,n,r,s);return n.push(i),i}function Bo(t){return{tagJsType:"array",value:t,processInitAttribute:O,processInit:Jo,processUpdate:To,checkValueChange:Co,destroy:ge}}function To(t,e,n){0===Oe(t,e,n)&&So(e,t,n)}function Jo(t,e,n,o,r){So(e,t,n,r)}function jo(t){const e=t?.tagJsType;return e?t:function(t){if(ut(t))return Bo(t);return vo(t)}(t)}function Io(t,e,n,o,r){const s=document.createTextNode(S),a={value:t,tagJsVar:jo(t),withinOwnerElement:!1,placeholder:s,destroy$:new Jt,parentContext:e.context,valueIndex:n.length};return r||(a.placeholder=o),Pt(t,e,a,r,o),r&&M.push([Q,[r,s]]),a}function Eo(t,e,n,o){return e.hasEmitted=!0,e.contextItem=Io(t,n,[],o)}function Lo(t,e){let n;return t&&(n=e=document.createTextNode(S),M.push([Q,[t,e]])),{appendMarker:n,insertBefore:e}}function Po(t,e,n){if(t===e.value)return;if(0===Sr(t,e,n)&&t.callback){Ho(t,e.subContext)}}function $o(t,e,n,o,r){const s=t.Observables,{appendMarker:a,insertBefore:c}=Lo(r,o);let i=function(t,e,o){Eo(t,o,n,c),Ao(e),i=o.tagJsVar.onOutput=function(t,e,o){const r=o.contextItem;Lt(r,t,n),r.tagJsVar.processUpdate(t,r,n,[t]),r.value=t,Ao(e)}};const l=Oo(s,n,((t,e,n)=>i(t,e,n)),t,e);return l.appendMarker=a,e.subContext=l,t.processUpdate=Po,t.onOutput=i,l}function Oo(t,e,n,o,r){function s(t,e){i.lastValues[e]={value:t,tagJsVar:jo(t),oldTagJsVar:i.lastValues[e]?.tagJsVar},a(i.lastValues,e)}function a(t,e){const o=i.tagJsVar,s=o?.callback;if(s){yr(r);const e=o.callback(...t.map((t=>t.value)));return n(e,c,i),void mr()}n(t[e].value,c,i)}let c=!0;const i={lastValues:[],subValueHandler:s,valuesHandler:a,tagJsVar:o,subscriptions:[]};return t.forEach(((t,e)=>{c=!0,i.subscriptions.push(t.subscribe((t=>s(t,e)))),c=!1})),o.onOutput=n,i}function Do(t){t.subContext.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function No(t,e){const n=t.subContext;return Do(t),ot(n,e)}function Ao(t){t||Et.stateConfig.support||W()}function qo(t,e,n,o,r){const s=$o(t,e,n,o,r);return s.hasEmitted||Ho(t,s),s}function Ho(t,e){const n=t.Observables[0];if(!e.hasEmitted)return"withDefault"in t?void e.subValueHandler(t.withDefault,0):"value"in n?void e.subValueHandler(n.value,0):void 0;const o=e.lastValues[0].value;e.subValueHandler(o,0)}function Mo(t,e,n,o,r){$o({tagJsType:T.subscribe,states:[],Observables:[t]},e,n,void 0,r)}function Ro(t,e,n,o,r,a){e.destroy=Do;const c=s(t),i=function(e,o){go(t,e,n,Ut,c,r),Ao(o)},l=Oo(e.Observables,0,i,e,r);return r.subContext=l,r.value=e,r.tagJsVar=e,e.processUpdate=function(e,o,s){return fo(e,r,s,n,t,Ut)},{subContext:l,onOutput:i}}function Uo(t,e,n,o,r,s){const{subContext:a}=Ro(t,e,n,0,r);a.hasEmitted||function(t,e){const n=e.tagJsVar,o=n.onOutput;if(o===O)throw new Error("blankhandler not converted");const r=t.Observables;let s=r[0]?.value||t.withDefault;t.callback&&(s=t.callback(s));o(s,!0,e)}(e,a)}function Yo(t,e){return{onOutput:O,tagJsType:T.subscribe,processInitAttribute:Ro,processInit:$o,checkValueChange:Xo,processUpdate:Sr,destroy:No,callback:e,Observables:[t]}}function Wo(t,e,n){return{onOutput:O,tagJsType:T.subscribe,processInitAttribute:Uo,processInit:qo,checkValueChange:Xo,processUpdate:O,destroy:No,callback:n,withDefault:e,Observables:[t]}}function Xo(t,e){if(!t?.tagJsType)return 1;const n=t.Observables;if(!n)return 2;const o=e.value.Observables;if(!o||o.length!==n.length)return 3;return n.every(((t,e)=>t===o[e]))?0:4}function zo(t){return pt()?bn((()=>Fo(t))):Fo(t)}function Fo(t){let e=t;const n=new Set,o=t=>{n.forEach((e=>e(t)))};return{tagJsType:T.signal,checkValueChange:Xo,processInitAttribute:O,processInit:Mo,processUpdate:Po,get value(){return e},set value(t){e!==t&&(e=t,o(t))},destroy:No,emit:o,subscribe(t){t(e),n.add(t);const o=()=>n.delete(t);return o.unsubscribe=o,o}}}Yo.all=function(t,e){return Yo(Jt.all(t),e)};class Qo extends Jt{constructor(t){super(t),this.value=t}subscribe(t){const e=super.subscribe(t);return t(this.value,e),e}}class Go extends Jt{constructor(t){super(t),this.value=t,this._value=t,jt(this)}subscribe(t){const e=super.subscribe(t);return t(this._value,e),e}}function Ko(t){return(e,n)=>{n.setHandler((()=>{}));t(e).then((t=>n.next(t)))}}const Zo=(t,e)=>er(t,e),tr=t=>t;const er=(t,e,{init:n,before:o,final:r=tr}={})=>{const s=bn({pastResult:void 0,values:void 0}),a=s.values;if(void 0===a){if(o&&!o(t))return s.values=t,s.pastResult;const c=(n||e)(t,a);return s.pastResult=r(c),s.values=t,s.pastResult}if(t.every(((t,e)=>t===a[e])))return s.pastResult;if(o&&!o(t))return s.values=t,s.pastResult;const c=e(t,a);return s.pastResult=r(c),a.length=0,a.push(...t),s.pastResult};function nr(t,e){return Object.defineProperty(e,"noInit",{get(){const e=t();return e.setup.init=()=>{},e}}),Object.defineProperty(e,"asSubject",{get(){const e=t(),n=bn((()=>pt())),o=bn((()=>new Qo(void 0))),r=bn((()=>({state:Et.stateConfig.state,states:Et.stateConfig.states}))),s=(t,s)=>(er(t,((t,e)=>{const a=pt(),c=s(t,e);if(a!==n){const t=r.state,e=n.context.state.older;dn(t,e.state,r.states,e.states)}o.next(c)}),e.setup),o);return s.setup=e.setup,nr((()=>s),s),s}}),Object.defineProperty(e,"truthy",{get(){const e=t();return e.setup.before=t=>t.every((t=>t)),e}}),e}function or(t){return pt()?bn((()=>new Jt(t))):new Jt(t)}function rr(t){return Et.stateConfig.handlers.statesHandler(t)}function sr(t){const e=zo([]),n=zo(0),o=zo(0);let r=[],s=0;return o.value=n.value,t(((...t)=>(r=t,e.value))),Zo(r,(()=>{++s,e.value=r,t((()=>r))})),rr(((r,a)=>{if(s)return t(((...t)=>(a&&1!==a||(e.value=t),e.value))),o.value=n.value,void++n.value;t((()=>e.value))})),++s,e.value}function ar(){return{stateDiff:0,provider:void 0}}nr((()=>function(t){const e=(e,n)=>er(e,n,t);return e.setup=t,nr((()=>e),e),e}({})),Zo),or._value=t=>{const e=bn((function(){return{state:Et.stateConfig.state,states:Et.stateConfig.states}})),n=pt();return bn((function(){return new Qo(t).pipe((t=>{const o=n.context.state.newer;return dn(o.state,e.state,o.states,e.states),t}))}))},or.all=function(t){const e=bn((()=>({state:Et.stateConfig.state,states:Et.stateConfig.states}))),n=pt();return Jt.all(t).pipe((t=>{const o=n.context.state.newer;return o&&dn(o.state,e.state,o.states,e.states),t}))};const cr={create:t=>{const e=bn(ar);if(e.stateDiff){let t=e.stateDiff;for(;t--;)bn(void 0);return bn(void 0)}const n=bn((()=>{const n=Et.stateConfig,o=n.state.length,r=t.prototype?new t:t(),s=n.support,a=n.state.length-o,c={constructMethod:t,instance:r,stateDiff:a,owner:s,children:[]};e.provider=c;const i=s.context.global;return(i.providers=i.providers||[]).push(c),e.stateDiff=a,r})),o=t,r=o.compareTo=o.toString();return e.provider.constructMethod.compareTo=r,n},inject:function(t){return bn((function(){const e=t,n=e.compareTo=e.compareTo||t.toString(),o=pt(),r=[];let s={ownerSupport:o.ownerSupport};for(;s.ownerSupport;){const t=s.ownerSupport.context.global.providers;if(!t){s=s.ownerSupport;continue}const e=t.find((t=>{r.push(t);if(t.constructMethod.compareTo===n)return!0}));if(e){const t=o.context.global;return(t.providers=t.providers||[]).push(e),e.children.push(o),e.instance}s=s.ownerSupport}const a=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${a}. Available providers`,r),new Error(a)}))}};class ir extends Error{constructor(t,e,n={}){super(t),this.name=ir.name,this.details={...n,errorCode:e}}}class lr extends ir{constructor(t,e){super(t,"sync-callback-error",e),this.name=lr.name}}function ur(t,e,n,...o){const r=n(...o),s=gt(t);return s&&(Rn(s),ct(r)&&r.finally((()=>{Rn(s)}))),r}function dr(t){const e=br(),n=bn({callback:t}),o=bn((()=>pr(e,Et.stateConfig,n)));return n.callback=t,o}function pr(t,e,n){const o=e.states;return function(...e){return ur(t,o,n.callback,...e)}}const hr=()=>{const t=br();if(!t)throw gr;const e=Et.stateConfig;return function(n){return pr(t,e,{callback:n})}},gr=new lr("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function fr(t=[]){return pt()?bn((()=>xr(Fo(t)))):xr(Fo(t))}function xr(t){const e=["push","pop","splice","shift","unshift"],n=["map","reduce","forEach","every"],o=new Proxy(t,{get(r,s){return isNaN(s)?"length"===s?t.value.length:e.includes(s)?o[a=s]=(...e)=>{const n=t.value[a](...e);return t.emit(t.value),n}:n.includes(s)?t.value[s].bind(t.value):t[s]:t.value[s];var a},set:(e,n,o)=>isNaN(n)?"length"===n?(t.value.length=o,t.emit(t.value),!0):(t[n]=o,!0):(t.value[n]=o,t.emit(t.value),!0)});return o}function br(){return Et.stateConfig.context}function vr(){return br().element}function yr(t){return Et.stateConfig.context=t}function mr(){delete Et.stateConfig.context}function wr(t,e,n,o){const r=n[e];if(r.deleted)return;const s=t[r.valueIndex],a=r.tagJsVar;yr(r),a.processUpdate(s,r,o,t),mr(),r.value=s}function _r(t,e){const n=t.context.contexts;!function(t,e){const n=e.templater,o=e.templater.tag,r=n.values||o.values,s=t.templater.tag;s.values=r}(t,e),++U.locks,function(t,e){const n=t.templater.tag.values;let o=0;const r=n.length;for(;o<r;)wr(n,o,e,t),++o}(t,n),--U.locks,W()}function kr(t,e,n){if(st(e))return void 0===t.global&&dt(t),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,function(t,e,n){if(!e.state.newest)return void t.processInit(t,e,n,e.placeholder);const o=Ye(t,n,n.appSupport,e);On(n,o,e)}(e,t,n),!0;if(t.global){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e;const o=t.state.newest;if(o)return typeof e===B.function||function(t,e,n,o){let r=n.templater||n;const s=t.templater.tag;s&&s._innerHTML&&(r=n.outerHTML||n._innerHTML.outerHTML);const a=Ye(r,o,o.appSupport,e);_r(t.context.state.oldest,a)}(o,t,e,n),!0}return e.processInit(e,t,n,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,!0}function Cr(t,e,n,o){const r=t&&t.tagJsType;if(r){if(r===T.renderOnce)return;kr(e,t,n)}else{if(ut(t))return So(e,t,n),e.oldTagJsVar=e.tagJsVar,void(e.tagJsVar=Bo(t));typeof t!==B.function?o&&function(t,e){e.value=t,e.oldTagJsVar=e.tagJsVar,e.tagJsVar=vo(t);const n=e.placeholder,o=$t(t),r=e.paint=[Z,[n,o,function(t){e.simpleValueElm=t,delete e.paint}]];A.push(r)}(t,e):e.value=t}}function Sr(t,e,n){const o=e.subContext,r=Vr(T.subscribe,t,n,e);return r||(o&&o.hasEmitted?(o.tagJsVar=t,o.valuesHandler(o.lastValues,0),0):0)}function Vr(t,e,n,o){if(!e||!e.tagJsType||e.tagJsType!==t){return o.tagJsVar.destroy(o,n),Cr(e,o,n,99),99}}function Br(t,e,n,o,r){const s=t;let a=s.templater;if(a||(a=Ee(s)),dt(e),r)return Pe(a,e,n,r,o);return(e.state=e.state||{}).newest=Le(a,n,e),Ie(n,e)}function Tr(t,e,n,o,r){Br(t.outerHTML,e,n,o,r);e.tagJsVar.processUpdate=function(t,e,n){Lt(e,t?.outerHTML||t,n)},t.checkValueChange=Jr}function Jr(t,e){return ke(t,e)}function jr(t,...e){const n=function(t,e){const n={values:e,ownerSupport:pt(),tagJsType:T.tag,processInitAttribute:O,processInit:Br,processUpdate:Oe,checkValueChange:ke,destroy:_e,strings:t,key:t=>(n.arrayValue=t,n),setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Tr,n},acceptInnerHTML:function(t){return t.owner=n,n},html:function(t,e){return n.children={strings:t,values:e},n}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}(t,e),o=De(Tn.NONE);return o.tag=n,n.templater=o,n}jr.dom=function(t,...e){return function(t,e){const n={values:e,ownerSupport:pt(),dom:t,tagJsType:T.dom,processInitAttribute:O,processInit:Br,processUpdate:Oe,checkValueChange:ke,destroy:_e,key:function(t){return n.arrayValue=t,n},setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Tr,n},acceptInnerHTML:function(t){return t.owner=n,n},html:{dom:function(t,e){return n.children={dom:t,values:e},n}}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}(t,e)};function Ir(t,e){t.domElement&&e.appendChild(t.domElement),t.marker&&e.appendChild(t.marker)}function Er(t,e,n){const o=ae(t,e);return ce(t,o,o),o.appElement=n,e.state.oldest||(e.state.oldest=o,e.state.older=e.state.newer),e.state.newest=o,o}function Lr(t,e,n,o,r,s,a){const c=document.createTextNode(S);Ne.push(n.wrapper||{original:n});const i=function(t,e,n,o,r){o.placeholder=e;const s=o.state.oldest,a=o.state.newest,c=a===s,i=Ye(t,a,a.appSupport,o);if(!c){wt(i,a,o.state.older.state)}if(t.tagJsType===T.stateRender)return function(t,e,n,o,r){const s=t.wrapper||{original:t};if(!e){const e=Er(t,o,r);return Xe(e),e}return Ue(t,s,n),Xe(n),n}(t,r,i,o,n);const l=t.wrapper,u=l(i,o);return Xe(i),u}(n,c,r,s,a);if(e.isApp=!0,a&&(o.tag=i.templater.tag),!r)throw new Error(`Cannot tagElement, element received is type ${typeof r} and not type Element`);r.destroy=function(){const t=e.events;for(const e in t){const n=t[e];r.removeEventListener(e,n)}e.events={},++U.locks;const n=ye(i,e);return--U.locks,W(),n},++U.locks;const l=function(t,e,n,o,r,s){const a=je(t,e,void 0),c=t.context;c.state.oldest=t,c.state.newest=t,c.state.older=c.state.newer;let i=o.setUse;if(o.tagJsType!==T.stateRender){const t=r.original;i=t.setUse,t.isApp=!0}e.setUse=i,e.ValueTypes=T,Pr.push({element:e,support:t});const l=document.createDocumentFragment();l.appendChild(s);for(const t of a.dom)Ir(t,l);return l}(i,r,0,n,t,c);return--U.locks,W(),r.appendChild(l),{support:i,tags:Ne,ValueTypes:T}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const Pr=[];function $r(t,e,n){const o=Pr.findIndex((t=>t.element===e));if(o>=0){const t=Pr[o].support;ye(t,t.context.global),Pr.splice(o,1),console.warn("Found and destroyed app element already rendered to element",{element:e})}let r=()=>i(n);r.propWatch=Tn.NONE,r.tagJsType=T.stateRender,r.processUpdate=Oe,r.props=[n],r.isApp=!0;const s=function(t,e){const n={tagJsType:"templater",checkValueChange:ke,destroy:_e,processInitAttribute:O,processInit:function(){console.debug("do nothing app function")},processUpdate:Oe},o={value:t,valueIndex:0,destroy$:new Jt,withinOwnerElement:!1,renderCount:0,global:void 0,state:{},tagJsVar:n},r=dt(o);return r.events={},Er(t,o,e),o}(r,e),a=s.global,c=s.state.newest;yt(c.context),ht(c);let i=t(n);const l=typeof i==B.function;return l||(st(i)?(s.state.newest.propsConfig={latest:[n],castProps:[n]},r.propWatch=i.propWatch,r.tagJsType=i.tagJsType,r.wrapper=i.wrapper,r=i):(r.tag=i,i=t)),Lr(t,a,r,i,e,s,l)}function Or(t){if(!t)return O;const e=pt();if(!e)throw new Error("output must be used in render sync fashion");return(...n)=>{const o=e.ownerSupport;return Dr(n,t,o.context)}}function Dr(t,e,n){const o=n.state,r=o.newest,s=o.newer.states,a=o.older.states;sn(s,a);const c=e(...t);return sn(a,s),R.push([()=>{const t=r.context.global;void 0===t||!0===t.deleted||(++U.locks,Ae(r),--U.locks,W())},[]]),c}function Nr(t,e,n){const o=t.owner._innerHTML;o.processInit=o.oldProcessInit;const r=e.subContext?.contextItem;Lt(r,o,n)}function Ar(t,e,n,o,r){e.subContext={},t.processUpdate=Nr,function(t,e,n,o,r){const{appendMarker:s,insertBefore:a}=Lo(r,o),c=n.subContext;c.appendMarker=s;const i=t.owner,l=i._innerHTML;l.processInit=l.oldProcessInit,Eo(l,c,e,a)}(t,n,e,o,r)}function qr(){return{tagJsType:"innerHTML",checkValueChange:()=>0,processInitAttribute:O,processInit:Ar,processUpdate:Nr,destroy:nt}}function Hr(t,e={}){const n={tagJsType:T.host,processInitAttribute:Rr,checkValueChange:()=>0,processInit:Ur,processUpdate:Mr,destroy:Yr,options:{callback:t,...e},matchesInjection(e){const n=e?.options?.callback;return n===t}},o=(...n)=>({...o,options:{arguments:n,...e,callback:t}});return Object.assign(o,n),o}function Mr(t,e,n){const o=Vr(T.host,t,n,e);if(o)return o;const r=e.tagJsVar.options,s=t;mt(e.state.newer.state);const a=s.options.arguments||r.arguments||[];e.returnValue=s.options.callback(...a),ze()}function Rr(t,e,n,o,r){return Ur(o,r)}function Ur(t,e){const n=e.element,o=e.state={};yt(e),function(t,e,n,o){const r=e.options.arguments||[],s=e.options.callback(...r);n.returnValue=s;const a=e.options;a.onInit&&a.onInit(t,e,n,o)}(n,t,e,o),ze()}function Yr(t){const e=t,n=e.tagJsVar,o=n.options;if(e.destroy$.subscribers.length&&(yr(t),Dr([],e.destroy$.next.bind(e.destroy$),t),mr()),o.onDestroy){const r=e.element;Dr([],(function(){yr(t);const s=o.onDestroy(r,n,e,e.state);return mr(),s}),t.stateOwner.context)}}Hr.onInit=t=>Hr((()=>{}),{onInit:t}),Hr.onDestroy=t=>Hr((()=>{}),{onDestroy:t});const Wr=t=>{function e(e){return function(n){const o=Fr(t,t.elementFunctions);return o.listeners.push([e,n]),o}}function n(e,n){return function(o){const r=Fr(t,t.elementFunctions);return r.attributes.push([e,o,!1,n]),r}}return{onClick:e("click"),onChange:e("onchange"),attr:function(e,n){const o=Fr(t,t.elementFunctions);return o.attributes.push([e,n]),o},style:n("style",Ut),class:n("class",Xr),id:n("id",Ut),placeholder:n("placeholder",Ut),value:n("value",Ut),type:n("type",Ut)}};function Xr(t,e,n){lt(n)?Object.entries(n).forEach((([e,n])=>{n?t.classList.add(e):t.classList.remove(e)})):Yt(t,e,n)}function zr(t){return Fr({tagJsType:"element",processInitAttribute:O,processInit:Zr,destroy:Kr,processUpdate:Gr,checkValueChange:Qr,tagName:t,innerHTML:[],attributes:[],listeners:[],elementFunctions:Wr},Wr)}function Fr(t,e){const n=(...t)=>{const e={...n};return e.attributes=[...n.attributes],e.listeners=[...n.listeners],e.innerHTML=t,e};return Object.assign(n,t),Object.assign(n,Wr(n)),n.attributes=[...t.attributes],n.listeners=[...t.listeners],n}function Qr(t){return t&&"element"===t.tagJsType?0:1}function Gr(t,e,n){if(Qr(t))return Kr(e,n),void Cr(t,e,n,789);if(e.inputsHandler){(0,e.inputsHandler)(t.props)}e.contexts.forEach((t=>{t.tagJsVar.processUpdate(t.value,t,n)}))}function Kr(t,e){t.contexts.forEach((t=>t.tagJsVar.destroy(t,e))),ve(t),delete t.htmlDomMeta}function Zr(t,e,n,o){e.contexts=[];const r=ts(t,e,n,e.contexts);A.push([F,[o,r]]);const s={nn:t.tagName,domElement:r,at:t.attributes};return e.htmlDomMeta=[s],r}function ts(t,e,n,o){const r=document.createElement(t.tagName);return e.element=r,Ve(t.attributes,[],r,n,e,o),t.innerHTML.forEach((t=>{switch(typeof t){case"string":case"number":return function(t,e){const n=document.createTextNode(t);return M.push([Q,[e,n]]),n}(t,r);case"function":{if("element"===t.tagJsType){const s=ts(t,e,n,o);return void M.push([Q,[r,s]])}const s=[],a={parentContext:e,contexts:s,tagJsVar:{tagJsType:"dynamic-text",checkValueChange:()=>0,processInit:O,processInitAttribute:O,destroy:(t,e)=>{s.forEach((t=>t.tagJsVar.destroy(t,e)))},processUpdate:(e,n,o,r)=>{const s=t(),a=c.tagJsVar.processUpdate(s,c,o,r);return c.value=s,a}},valueIndex:-1,withinOwnerElement:!0,destroy$:new Jt};o.push(a);const c=es(t(),e,a.contexts,r,n);return c}}if("element"!==t.tagJsType)es(t,e,o,r,n);else{const s=ts(t,e,n,o);M.push([Q,[r,s]])}})),t.listeners.forEach((t=>{to(n.appSupport,t[0],r,((...e)=>{const o=t[1](...e);return on([ft(n)]),o}))})),r}function es(t,e,n,o,r){const s=jo(t),a={value:t,parentContext:e,tagJsVar:s,valueIndex:-1,withinOwnerElement:!0,destroy$:new Jt};return n.push(a),a.placeholder=document.createTextNode(""),M.push([Q,[o,a.placeholder]]),s.processInit(t,a,r,a.placeholder),a}const ns=zr("button"),os=zr("select"),rs=zr("input"),ss=zr("hr"),as=zr("h3"),cs=zr("ol"),is=zr("li"),ls=zr("div"),us=zr("span"),ds=(zr("strong"),zr("small")),ps=zr("fieldset"),hs=zr("legend"),gs=zr("option"),fs={tagElement:$r,renderWithSupport:qn,renderSupport:Rn,firstTagRender:Ge,reRenderTag:Qe,paint:W}},149:(t,e,n)=>{function o({fxIn:t,fxOut:e,outPositionAbsolute:n=!0}){return{in:(e,n)=>r({fxName:t,...e},n),out:(t,o)=>s({fxName:e,outPositionAbsolute:n,...t},o)}}n.d(e,{tw:()=>v,fx:()=>x,rW:()=>f});const r=async({target:t,fxName:e="fadeInUp"},n)=>(t.style.opacity="0",n&&await c(n),t.style.opacity="1",a(e,t)),s=async({target:t,outPositionAbsolute:e=!0,fxName:n="fadeOutUp"},o)=>(e&&function(t){t.style.zIndex=t.style.zIndex||1;const e=t.offsetTop+"px",n=t.offsetLeft+"px",o=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",r=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=e,t.style.left=n,t.style.width=o,t.style.height=r,t.style.position="absolute"}),0)}(t),o&&await c(o),a(n,t));function a(t,e){let n;const o=new Promise((function(t){n=t}));return e.classList.add("animate__animated","animate__"+t),e.addEventListener("animationend",(function o(r){r.target===e&&(e.classList.remove("animate__animated","animate__"+t),e.removeEventListener("animationend",o),n(void 0))})),o}function c(t){return new Promise((e=>{setTimeout(e,t)}))}var i=n(296);const{in:l,out:u}=o({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:d,out:p}=o({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:h,out:g}=o({fxIn:"fadeIn",fxOut:"fadeOut"}),f=({stagger:t=100,fxIn:e,fxOut:n,duration:o="2s",inName:r="fadeInUp",outName:s="fadeOutDown",outPositionAbsolute:a=!1}={})=>{let c=0;const l=b((function(e){e.style.setProperty("--animate-duration",o);const n=t*c++;return l.fxIn({target:e},n).then((()=>{--c}))}),(function(e){e.style.setProperty("--animate-duration",o);const n=t*c++,r=l.fxOut({target:e},n).then((()=>{--c}));return(0,i.sj)(r),r}),e,n,r,s,a);return l.host},x=({fxIn:t,fxOut:e,stagger:n,inName:o="fadeInUp",outName:r="fadeOutDown",duration:s=".2s",outPositionAbsolute:a=!1}={})=>{const c=b((t=>(t.style.setProperty("--animate-duration",s),c.fxIn({target:t},n))),(t=>{t.style.setProperty("--animate-duration",s);const e=c.fxOut({target:t},n);return(0,i.sj)(e),e}),t,e,o,r,a);return c.host};function b(t,e,n,r,s,a,c){if(!n||!r){const t=o({fxIn:s,fxOut:a,outPositionAbsolute:c});n||(n=t.in),r||(r=t.out)}return{fxIn:n,fxOut:r,host:(0,i.ho)((()=>{}),{onInit:t,onDestroy:e})}}function v({fxIn:t,fxOut:e,duration:n=".2s",outPositionAbsolute:r=!1}={duration:".2s",outPositionAbsolute:!1}){if(!t||!e){const n=o({fxIn:"fadeInUp",fxOut:"fadeOutDown",outPositionAbsolute:r});t||(t=n.in),e||(e=n.out)}const s=(0,i.iB)();return i.dy`
    <div oninit=${t} ondestroy=${e} style.--animate-duration=${n}>${s}</div>
  `.acceptInnerHTML(s)}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={exports:{}};return t[o](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.d(o,{gV:()=>Mn,jG:()=>zn,fm:()=>t.fm,KH:()=>Qn,bX:()=>t.bX,mK:()=>D});var t=n(296),e=n(232);const r=(0,t._q)((()=>(n=(0,t.fo)(0),o=(0,t.td)(0),r=0,a=0,c=(0,t.$q)((t=>[{renderCount:a,counter:r}]=t({renderCount:a,counter:r}))))=>(++a,t.dy.dom(s.allStrings2265941[1],(0,t.Ld)(n),o,r,(()=>{++r,n.next(r),o.value=r}),(0,e.v)({renderCount:a,name:"insideMultiRender"}))))),s={allStrings2265941:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"div",ch:[{nn:"span",ch:[{nn:"text",tc:"👍"},{nn:"span",at:[["id","👍-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"button",at:[["type","button"],["id","👍-counter-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"++👍"}]}]},{nn:"text",v:3},{nn:"hr"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"insideMultiRender"}]},{nn:"text",v:4}]}],[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var a=n(995);let c=null;function i(t=!0,e,o){null!==c&&(clearTimeout(c),console.debug("🏃 Cleared previous testing to start again..."));c=setTimeout((async()=>{e=e||u.views,console.debug("🏃 Prepare test suites...");const r=await async function(t,e=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let o=0;e&&(await Promise.resolve().then(n.bind(n,451)),++o),t.includes(l.Content)&&(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835)),++o),t.includes(l.Subscriptions)&&(await Promise.resolve().then(n.bind(n,528)),++o),t.includes(l.Counters)&&(await Promise.resolve().then(n.bind(n,428)),++o),t.includes(l.Props)&&(await Promise.resolve().then(n.bind(n,749)),++o),t.includes(l.ProviderDebug)&&(await Promise.resolve().then(n.bind(n,186)),await Promise.resolve().then(n.bind(n,488)),++o),t.includes(l.TagSwitchDebug)&&(await Promise.resolve().then(n.bind(n,168)),++o),t.includes(l.Child)&&(await Promise.resolve().then(n.bind(n,527)),++o),t.includes(l.Arrays)&&(await Promise.resolve().then(n.bind(n,842)),++o),t.includes(l.Mirroring)&&(await Promise.resolve().then(n.bind(n,774)),++o),t.includes(l.WatchTesting)&&(await Promise.resolve().then(n.bind(n,702)),++o),t.includes(l.FunInPropsTag)&&(await Promise.resolve().then(n.bind(n,157)),++o),t.includes(l.AttributeDebug)&&(await Promise.resolve().then(n.bind(n,178)),++o),t.includes(l.OneRender)&&(await Promise.resolve().then(n.bind(n,994)),++o),t.includes(l.Todo)&&(await Promise.resolve().then(n.bind(n,337)),++o),t.includes(l.Destroys)&&(await Promise.resolve().then(n.bind(n,236)),++o),t.includes(l.Basic)&&(await Promise.resolve().then(n.bind(n,566)),++o),console.debug(`🏃 Running ${o} test suites...`);try{const t=Date.now(),e=await(0,a.executeBrowserTests)(),n=Date.now()-t;return console.info(`✅ tests completed in ${n}ms`),e}catch(t){return console.error("❌ tests failed:",t),!1}}(e,o);t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var l;!function(t){t.Basic="basic",t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug",t.Subscriptions="subscriptions"}(l||(l={}));const u=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(l)});return JSON.parse(t)}();function d(){localStorage.taggedjs=JSON.stringify(u)}const p=Object.values(l),h=(e=p)=>{const n=[...e].sort(((t,e)=>t.localeCompare(e)));return t.dy.dom(b.allStrings435254[0],n.map((e=>t.dy.dom(b.allStrings435254[1],"view-type-"+e,"view-type-"+e,u.views.includes(e)&&"checked",(()=>function(t,e=!0){u.views.includes(t)?f(t):g.next({type:t,checkTesting:e});d()}(e)),"view-type-"+e,e,`isolated.html#${e}`,`#${e}`).key(e))),e.length>1&&t.dy.dom(b.allStrings435254[2],(()=>e.forEach((t=>{x(t,!1),d()}))),(()=>e.forEach((t=>{f(t),d()})))))};h.tempNote="sections";const g=new t.xQ;function f(t){u.views=u.views.filter((e=>e!==t))}function x(t,e=!0){u.views.push(t),e&&u.autoTest&&i()}const b={allStrings435254:[[{nn:"div",ch:[{nn:"h3",ch:[{nn:"text",tc:"Sections"}]},{nn:"text",tc:"\x3c!-- checkbox menu --\x3e"},{nn:"div",at:[["style","display:flex;gap:1em;flex-wrap:wrap;margin:1em;"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n\n        "},{nn:"text",v:1}]}]}],[{nn:"div",at:[["style","flex:0 0 auto;min-width:150px;white-space:nowrap;"]],ch:[{nn:"input",at:[["type","checkbox"],["id",{tagJsVar:0},null],["name",{tagJsVar:1},null],[{tagJsVar:2}],["click",{tagJsVar:3},null]]},{nn:"label",at:[["for",{tagJsVar:4},null]],ch:[{nn:"text",tc:"&nbsp;"},{nn:"text",v:5}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;text-decoration:none;"],["href",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🔗"}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"↗️"}]}]}],[{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"&nbsp;all"}]}]},{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"&nbsp;none"}]}]}]]},v=(0,t._q)(((e,n)=>t.dy.dom(y.allStrings19347[0],e,(()=>n(e))))),y={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},m=(0,t._q)(((n,o,r)=>(s="other",a=0,c=0,i=(0,t.$q)((t=>[{other:s,counter:a,renderCount:c}]=t({other:s,counter:a,renderCount:c}))),l=++c,{addArrayItem:u,myFunction:d,deleteItem:p,child:h,array:g}=n)=>t.dy.dom(w.allStrings598669[0],o.function.original?"taggjedjs-wrapped":"nowrap",o.count,h.myChildFunction.original?"taggjedjs-wrapped":"nowrap",d.original?"taggjedjs-wrapped":"nowrap",d,(0,t.J8)(h.myChildFunction),r,C.function,(()=>++a),g.length,g.map((t=>v(t,p).key(t))),u,a,(0,e.v)({renderCount:c,name:"funInProps_tag_child"})))),w={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},_=(0,t._q)((n=>(o=0,r=(0,t.$q)((t=>[o]=t(o))),s=++o,a=(t=>{if("Enter"===t.key){const e=t.target.value.trim();n(e),t.target.value=""}}))=>t.dy.dom(k.allStrings66965[0],a,(t=>{n(t.target.value),t.target.value=""}),n,(0,e.v)({renderCount:o,name:"addArrayComponent"})))),k={allStrings66965:[[{nn:"input",at:[["type","text"],["keyup",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"add by outside"}]},{nn:"text",v:3},{nn:"text",tc:"\n"}]]},C={function:()=>++C.count,count:0},S=(0,t._q)((()=>(n=[],o=0,r=0,s=!0,a="a",c=(()=>++o),i=(0,t.$q)((t=>[{array:n,counter:o,renderCount:r,showChild:s,somethingElse:a}]=t({array:n,counter:o,renderCount:r,showChild:s,somethingElse:a}))),l=++r,u=(t=>{n=n.map((t=>t)),n.push("string"==typeof t?t:"push"+n.length)}),d=(t=>n=n.filter((e=>e!==t))))=>t.dy.dom(V.allStrings360652[0],c,o,(0,e.v)({renderCount:r,name:"funInProps_tag_parent"}),C.function.original?"taggjedjs-wrapped":"nowrap",C.count,(()=>s=!s),n.length,u,s&&m({myFunction:c,array:n,addArrayItem:u,deleteItem:d,child:{myChildFunction:c}},C,c),_(u)))),V={allStrings360652:[[{nn:"button",at:[["id","fun-parent-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🤰 ++parent"}]},{nn:"span",at:[["id","fun_in_prop_display"]],ch:[{nn:"text",v:1}]},{nn:"text",v:2},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"🆎 main:"}]},{nn:"span",at:[["id","main_wrap_state"]],ch:[{nn:"text",v:3}]},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"button",at:[["id","toggle-fun-in-child"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"toggle child"}]},{nn:"text",tc:"array length: "},{nn:"text",v:6},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"reset add"}]},{nn:"hr"},{nn:"text",v:8},{nn:"text",tc:"\n  \n  "},{nn:"text",v:9},{nn:"text",tc:"\n"}]]},B=t._q.immutableProps(((e,n,o)=>(r=!1,s=(0,t.$q)((t=>[r]=t(r))))=>t.dy.dom(J.allStrings349976[0],e.completed,r,r?t.dy.dom(J.allStrings349976[2],e.title,(()=>r=!1),(t=>T(t,(t=>{!function(t,e,n,o){if(0===t.length)return void o.removeItem(e.id);o.updateToByIndex(e,{title:t},n)}(t,e,o,n),r=!1})))):t.dy.dom(J.allStrings349976[1],e.completed&&"✅",(t=>n.toggleItem(e,o)),e.completed&&"checked",(()=>n.toggleItem(e,o)),(()=>r=!r),e.title,(()=>n.removeItemByIndex(o))))));function T(t,e){if("Enter"===t.key){return e(t.target.value.trim()),!0}}const J={allStrings349976:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🗑️ destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},j={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},I=t._q.immutableProps(((e,n,o,r)=>t.dy.dom(E.allStrings77156[0],r,r>1&&"s","/"===o,"/active"===o,"/completed"===o,e-r>0&&t.dy.dom(E.allStrings77156[1],(()=>n()))))),E={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const L=()=>window.location.hash.substring(1)||"/",P=()=>{const e=(0,t.SB)((()=>({route:L(),location:window.location}))),n=(0,t.uz)((t=>e.route=L())),o=(0,t.SB)((()=>(t=>{const e=()=>t(L());return window.addEventListener("hashchange",e),e})(n)));return(0,t.ev)((()=>window.removeEventListener("hashchange",o))),e},$=[],O=function(t){function e(e,n,o){return t[o]={...e,...n},t}return{addItem:function(e){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})),title:e,completed:!1}),t},removeItem:function(e){return t.filter((t=>t.id!==e))},toggleItem:function(t,n){return e(t,{completed:!t.completed},n)},removeAll:function(){return t=[]},toggleAll:function(e){for(let n=t.length-1;n>=0;--n)t[n]={...t[n],completed:e};return t},removeCompleted:function(){for(let e=t.length-1;e>=0;--e)t[e].completed&&t.splice(e,1);return t},removeItemByIndex:function(e){return t.splice(e,1),t},completeItem:function(t,n){return e(t,{completed:!0},n)},updateItemByIndex:function(e,n){return t[n]={...e},t},updateToByIndex:e}}($),D=()=>{const e=P().route,n=$.filter((t=>!t.completed)).length,o="/completed"===e,r="/active"===e&&$.filter((t=>!t.completed))||o&&$.filter((t=>t.completed))||$,s=$.length,a=r.map(((t,e)=>B(t,O,e).key(t.id)));return t.dy.dom(N.allStrings143180[0],!1,(e=>t._q.renderOnce=()=>t.dy.dom(j.allStrings47860[0],(t=>{T(t,(t=>e.addItem(t)))&&(t.target.value="")})))(O),s>0&&t.dy.dom(N.allStrings143180[1],n<1?1:0,(t=>O.toggleAll(t.target.checked)),a,I(s,O.removeCompleted,e,n)))},N={allStrings143180:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},A=(0,t._q)(((n,o,r)=>{let s=0,a=0;return(0,t.$q)((t=>[{counter:s,renderCount:a}]=t({counter:s,renderCount:a}))),++a,t.dy.dom(H.allStrings128026[0],r,(0,t.DE)(r),r instanceof Array,(()=>++s),s,s,(0,e.v)({renderCount:a,name:"innerHtmlTest"}))})),q=(0,t._q)(((e,n)=>(o=0,r=0,s=(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),a=++r)=>t.dy.dom(H.allStrings128026[1],e,n,(()=>++o),o,o,!1))),H={allStrings128026:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"no props test"}]},{nn:"div",at:[["style","border:2px solid purple;"]],ch:[{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectInstance:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectTagArray:"},{nn:"text",v:2}]},{nn:"button",at:[["id","innerHtmlTest-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"increase innerHtmlTest "},{nn:"text",v:4}]},{nn:"span",at:[["id","innerHtmlTest-counter-display"]],ch:[{nn:"text",v:5}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},M=(0,t._q)(((e,n,o)=>t.dy.dom(U.allStrings795052[0],e,n,o))),R=(0,t._q)(((n="childTests")=>(n=0,o=0,r=(0,t.$q)((t=>[{renderCount:n,counter:o}]=t({renderCount:n,counter:o}))),s=++n)=>t.dy.dom(U.allStrings795052[2],M(1,2,t.dy.dom(U.allStrings795052[3],Date.now())),A({},2,t.dy.dom(U.allStrings795052[4],(()=>++o),o,n,o,(0,e.v)({renderCount:n,name:"childTests-innerHtmlTest"}))),(()=>{const e=(0,t.iB)();return t.dy.dom(U.allStrings795052[1],11,e,22).acceptInnerHTML(e)})().innerHTML=t.dy.dom(U.allStrings795052[5],(()=>++o),o,n,o,(0,e.v)({renderCount:n,name:"childTests-innerHtmlTest-c"})),q(22,t.dy.dom(U.allStrings795052[6],(()=>++o),o,o,(0,e.v)({renderCount:n,name:"innerHtmlPropsTest child"}))),function({child:e}){return t.dy.dom(U.allStrings795052[8],e)}({child:t.dy.dom(U.allStrings795052[7],(()=>++o),o,o)}),(()=>++o),o,n,o,(0,e.v)({renderCount:n,name:"childTests"}))));const U={allStrings795052:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"xxxxx"}]},{nn:"div",ch:[{nn:"text",tc:"hello other world "},{nn:"text",v:0},{nn:"text",tc:" - "},{nn:"text",v:1}]},{nn:"div",at:[["style","border:2px solid red;"]],ch:[{nn:"text",tc:"***"},{nn:"text",v:2},{nn:"text",tc:"***"}]}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child as prop"}]},{nn:"text",v:0}]}]]};let Y=(0,t.td)(0);const W=(0,t._q)((()=>(n=!0,o=0,r=(0,t.$q)((t=>[{renderCount:o,on:n}]=t({renderCount:o,on:n}))),s=++o)=>t.dy.dom(z.allStrings72990[0],Y,n,n&&X(),(()=>{n=!n}),n?"destroy":"restore",(0,e.v)({renderCount:o,name:"destroys"})))),X=(0,t._q)((()=>(e=(0,t.ev)((()=>{++Y.value})))=>t.dy.dom(z.allStrings72990[1],t.ho.onDestroy((()=>{++Y.value}))))),z={allStrings72990:[[{nn:"text",tc:"\n  destroyCount: "},{nn:"span",at:[["id","destroyCount"]],ch:[{nn:"text",v:0}]},{nn:"text",tc:"on/off: "},{nn:"text",v:1},{nn:"text",tc:"\n  \n  "},{nn:"text",v:2},{nn:"button",at:[["id","toggle-destroys"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","destroyable-content"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"will be destroyed"}]}]]};var F=n(149);const Q=(0,t._q)((({score:n,playerIndex:o})=>{let r=0;return(0,t.$q)((t=>[r]=t(r))),++r,t.dy.dom(G.allStrings67878[0],n.frame,`score-data-${o}-${n.frame}-inside-button`,(()=>++n.score),n.score,`score-data-${o}-${n.frame}-inside-display`,n.score,(()=>++r),(0,e.v)({renderCount:r,name:"scoreData"+n.frame}))})),G={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},K=(0,t._q)((()=>(n=(0,t.SB)([]),o=0,r=0,s=(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))))=>{const a=(0,t.IX)(["d","e","f"]),c=(0,t.SB)(["a","b","c"]),i=(0,t.SB)((()=>(0,F.rW)({stagger:10,duration:".1s"}))),l=()=>({name:"Person "+n.length,scores:"0,".repeat(0).split(",").map(((t,e)=>({frame:e+1,score:Math.floor(4*Math.random())+1})))});function u(t){for(let e=0;e<t;++e)a[a.length]=a.length.toString()}return++o,t.dy.dom(tt.allStrings873968[0],r,a.length,(0,t.Ld)(a,(e=>e.map(((e,n)=>t.dy.dom(tt.allStrings873968[1],i,`signal-array-item-${n}`,n,`signal-array-item-counter-display-${n}`,r,e,a.length,`signal-array-item-delete-btn-${n}`,(()=>{a.splice(n,1)}),(()=>++r),r).key(e))))),(()=>++r),r,(()=>u(1)),(()=>u(10)),(()=>{setTimeout((()=>{a[a.length]=a.length.toString()}),1e3)}),(()=>{setTimeout((()=>{a.length=0}),1e3)}),c.map(((e,n)=>t.dy.dom(tt.allStrings873968[2],r,n,e,c.length,(()=>{c.splice(n,1)})).key(e))),(()=>++r),r,(()=>c[c.length]=c.length.toString()),Z({players:n,getNewPlayer:l}),(()=>{n.push(l())}),n.length+1,(()=>{n.push(l()),n.push(l()),n.push(l())}),(()=>{n.push(l()),n.push(l()),n.push(l()),n.push(l()),n.push(l()),n.push(l()),n.push(l()),n.push(l()),n.push(l())}),n.length>0&&t.dy.dom(tt.allStrings873968[3],(0,F.fx)({duration:".1s"}),(()=>n.length=0)),(0,e.v)({renderCount:o,name:"arrayTests.ts"}))})),Z=(0,t._q)((({players:e,getNewPlayer:n})=>{const o=e.map(((o,r)=>function(e,n,o,r){return t.dy.dom(tt.allStrings873968[5],(0,F.fx)({duration:".1s"}),e.name,n,e.scores.map(((e,n)=>t.dy.dom(tt.allStrings873968[6],(0,F.fx)(),`score-data-${n}-${e.frame}-outside-button`,(()=>++e.score),e.score,`score-data-${n}-${e.frame}-outside-display`,e.score,Q({score:e,playerIndex:n})).key(e))),e.edit&&t.dy.dom(tt.allStrings873968[7],(()=>{o.splice(n,1),e.edit=!e.edit})),e.edit&&t.dy.dom(tt.allStrings873968[8],"player-remove-promise-btn-"+n,(async()=>{e.edit=!e.edit,o.splice(n,1)})),"player-edit-btn-"+n,(()=>e.edit=!e.edit),(()=>{o.splice(n,0,r())}))}(o,r,e,n).key(o)));return t.dy.dom(tt.allStrings873968[4],o)}));const tt={allStrings873968:[[{nn:"text",tc:"\x3c!--arrayTests.js--\x3e"},{nn:"span",ch:[{nn:"text",tc:"count display:"},{nn:"span",at:[["id","arrays-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"signal array test "},{nn:"sup",at:[["id","signal-array-count"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"button",at:[["type","button"],["id","signal-array-increase-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:4}]},{nn:"button",at:[["type","button"],["id","push-signal-array-btn"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"add number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"add 10 number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"add number by delay"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"delay clear array"}]}]}]},{nn:"fieldset",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"simple array test"}]},{nn:"text",v:9},{nn:"div",ch:[{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:11}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"add number"}]}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:13}]},{nn:"button",at:[["id","array-test-push-item"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"push item "},{nn:"text",v:15}]},{nn:"button",at:[["click",{tagJsVar:16},null]],ch:[{nn:"text",tc:"push 3 items"}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"push 9 items"}]},{nn:"text",v:18},{nn:"text",tc:"\n\n    "},{nn:"text",v:19},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","border:1px solid black;border-radius:.2em"],[{tagJsVar:0}],["id",{tagJsVar:1},null]],ch:[{nn:"text",tc:"index:"},{nn:"text",v:2},{nn:"text",tc:" counter:"},{nn:"span",at:[["id",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",tc:" content:"},{nn:"text",v:5},{nn:"text",tc:" length:"},{nn:"text",v:6},{nn:"button",at:[["id",{tagJsVar:7},null],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:10}]}]}],[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"text",v:0},{nn:"text",tc:" index:"},{nn:"text",v:1},{nn:"text",tc:" x:"},{nn:"text",v:2},{nn:"text",tc:" length:"},{nn:"text",v:3},{nn:"button",at:[["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]}]}],[{nn:"button",at:[[{tagJsVar:0}],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove all"}]}],[{nn:"text",tc:"\x3c!-- playersLoop.js --\x3e"},{nn:"text",v:0},{nn:"text",tc:"\x3c!-- end:playersLoop.js --\x3e"}],[{nn:"div",at:[["style","background-color:black;"],[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",tc:"name:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"index:"},{nn:"text",v:2}]},{nn:"div",at:[["style","background-color:purple;padding:.5em"]],ch:[{nn:"text",tc:"scores:\n        "},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n      "},{nn:"text",v:5},{nn:"button",at:[["id",{tagJsVar:6},null],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"edit"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"add before"}]}]}],[{nn:"div",at:[["class","animate__slow"],[{tagJsVar:0}]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"outer score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6}]}]}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"remove"}]}],[{nn:"button",at:[["id",{tagJsVar:0},null],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove by promise"}]}]]},et=(0,t._q)(((n="tagSwitchDebug")=>{let o=null,r=0;(0,t.$q)((t=>[{renderCount:r,selectedTag:o}]=t({renderCount:r,selectedTag:o})));let s="select tag below";switch(o){case null:s="null, select tag below";break;case"":s=t.dy.dom(ct.allStrings484932[0]);break;case"1":s=ot({title:"value switch"});break;case"2":s=rt({title:"value switch"});break;case"3":s=st({title:"value switch"})}let a=t.dy.dom(ct.allStrings484932[1]);switch(o){case null:a=t.dy.dom(ct.allStrings484932[2]);break;case"":a=t.dy.dom(ct.allStrings484932[3]);break;case"1":a=ot({title:"tag switch"});break;case"2":a=rt({title:"tag switch"});break;case"3":a=st({title:"tag switch"})}return++r,t.dy.dom(ct.allStrings484932[4],(null===o?"null":void 0===o&&"undefined")||""===o&&"empty-string"||o,(function(t){o=t.target.value,"undefined"===o&&(o=void 0),"null"===o&&(o=null)}),"string"!=typeof o||o.length?{}:{selected:!0},void 0===o?{selected:!0}:{},null===o?{selected:!0}:{},"1"===o?{selected:!0}:{},"2"===o?{selected:!0}:{},"3"===o?{selected:!0}:{},s,a,"3"===o?st({title:"ternary simple"}):ot({title:"ternary simple"}),nt({selectedTag:o}),at({selectedTag:o}),(0,e.v)({renderCount:r,name:"tagSwitchDebug"}))})),nt=(0,t._q)((({selectedTag:e})=>{const n="3"===e?st({title:"ternaryPropTest"}):ot({title:"ternaryPropTest"});return t.dy.dom(ct.allStrings484932[5],e,n)})),ot=(0,t._q)((({title:n})=>{let o=0,r=0;return(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),++r,t.dy.dom(ct.allStrings484932[6],n,(()=>++o),o,(0,e.v)({renderCount:r,name:"tag1"}))})),rt=(0,t._q)((({title:n})=>{let o=0,r=0;return(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),++r,t.dy.dom(ct.allStrings484932[7],n,(()=>++o),o,(0,e.v)({renderCount:r,name:"tag1"}))})),st=(0,t._q)((({title:n})=>{let o=0,r=0;return(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))),++r,t.dy.dom(ct.allStrings484932[8],n,(()=>++o),o,(0,e.v)({renderCount:r,name:"tag1"}))})),at=(0,t._q)((({selectedTag:e},n="arraySwitching")=>{switch(e){case void 0:return t.dy.dom(ct.allStrings484932[9]);case null:return t.dy.dom(ct.allStrings484932[10]);case"":return t.dy.dom(ct.allStrings484932[11]);case"1":return t.dy.dom(ct.allStrings484932[12],ot({title:`tag ${e}`}));case"2":return t.dy.dom(ct.allStrings484932[13],["b","c"].map((n=>t.dy.dom(ct.allStrings484932[14],rt({title:`array ${e} ${n}`})).key(n))));case"3":return t.dy.dom(ct.allStrings484932[15],["d","e","f"].map((n=>t.dy.dom(ct.allStrings484932[16],st({title:`array ${e} ${n}`})).key(n))))}return t.dy.dom(ct.allStrings484932[17])})),ct={allStrings484932:[[{nn:"div",at:[["id","empty-string-1"]]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"null, select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"empty-string, select tag above"}]}],[{nn:"div",at:[["id","selectTag-wrap"]],ch:[{nn:"text",tc:"selectedTag: |"},{nn:"text",v:0},{nn:"text",tc:"|"}]},{nn:"select",at:[["id","tag-switch-dropdown"],["change",{tagJsVar:1},null]],ch:[{nn:"option"},{nn:"text",tc:"\x3c!-- TODO: implement selected attribute ---\x3e"},{nn:"option",at:[["value",""],[{tagJsVar:2}]],ch:[{nn:"text",tc:"empty-string"}]},{nn:"option",at:[["value","undefined"],[{tagJsVar:3}]],ch:[{nn:"text",tc:"undefined"}]},{nn:"option",at:[["value","null"],[{tagJsVar:4}]],ch:[{nn:"text",tc:"null"}]},{nn:"option",at:[["value","1"],[{tagJsVar:5}]],ch:[{nn:"text",tc:"tag 1"}]},{nn:"option",at:[["value","2"],[{tagJsVar:6}]],ch:[{nn:"text",tc:"tag 2"}]},{nn:"option",at:[["value","3"],[{tagJsVar:7}]],ch:[{nn:"text",tc:"tag 3"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],["id","switch-tests-wrap"]],ch:[{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 1 - string | Tag"}]},{nn:"div",ch:[{nn:"text",v:8}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 2 - Tag"}]},{nn:"div",ch:[{nn:"text",v:9}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3 - ternary (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:10}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3.2 - ternary via prop (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:11}]}]},{nn:"div",at:[["style","border:1px solid red;flex-grow:1"],["id","arraySwitching-test-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 4 - arraySwitching"}]},{nn:"div",at:[["id","arraySwitching-wrap"]],ch:[{nn:"text",v:12}]}]}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["id","ternaryPropTest-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:":"},{nn:"text",v:1}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag1"]],ch:[{nn:"div",at:[["id","tagSwitch-1-hello"]],ch:[{nn:"text",tc:"Hello 1 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag2"]],ch:[{nn:"div",at:[["id","tagSwitch-2-hello"]],ch:[{nn:"text",tc:"Hello 2 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag3"]],ch:[{nn:"div",at:[["id","tagSwitch-3-hello"]],ch:[{nn:"text",tc:"Hello 3 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"text",tc:"its an undefined value"}],[{nn:"text",tc:"its a null value"}],[{nn:"text",tc:"space"}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",tc:"nothing to show for in arrays"}]]},it=(0,t._q)((()=>{const e=lt();return t.dy.dom(ut.allStrings156734[0],e,e)})),lt=()=>{let e=0;return(0,t.$q)((t=>[e]=t(e))),t.dy.dom(ut.allStrings156734[1],e,(()=>++e),e)},ut={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},dt=(n,o)=>t._q.use=(r=(0,t.SB)("statePropDebug.tag.ts"),s=!1,a=0,c=(0,t.$q)((t=>[{edit:s,renderCount:a}]=t({edit:s,renderCount:a}))),i=++a)=>t.dy.dom(pt.allStrings53929[0],n,(()=>s=!s),s,o,(0,e.v)({renderCount:a,name:"statePropDebug-tag"})),pt={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},ht=(0,t._q)(((n="propsDebugMain")=>(n=0,o=0,r=0,s={test:33,x:"y"},a=(0,t.SB)((()=>new Date)),c=JSON.stringify(s,null,2),i=!0,l=(0,t.$q)((t=>[{syncPropNumber:n,propNumber:o,renderCount:r,propsJson:s,date:a,statePropDisplay:i}]=t({syncPropNumber:n,propNumber:o,renderCount:r,propsJson:s,date:a,statePropDisplay:i}))))=>t.dy.dom(vt.allStrings3197847[0],(t=>s=JSON.parse(t.target.value)),c,c,++r,(()=>++o),o,o,xt({propNumber:o,propsJson:s,propNumberChange:t=>{o=t}}),n,(()=>++n),(0,e.v)({renderCount:r,name:"sync_props_callback"}),ft({syncPropNumber:n,propNumberChange:t=>n=t,parentTest:t=>t}),i&&dt(o,t.dy.dom(vt.allStrings3197847[1])),(()=>i=!i),a,function(t){const e=new Date(t),n=e.getFullYear(),o=String(e.getMonth()+1).padStart(2,"0"),r=String(e.getDate()).padStart(2,"0"),s=String(e.getHours()).padStart(2,"0"),a=String(e.getMinutes()).padStart(2,"0");return{date:`${n}-${o}-${r}`,time:`${s}:${a}`}}(a).date,(t=>{const e=t.target.value;a=new Date(e)}),gt({date:a})))),gt=(0,t._q)((({date:e})=>t.dy.dom(vt.allStrings3197847[2],e))),ft=(0,t._q)((({syncPropNumber:n,propNumberChange:o,parentTest:r})=>(s=(0,t.SB)("syncPropDebug"),a=0,c=0,i=(0,t.$q)((t=>[{counter:a,renderCount:c}]=t({counter:a,renderCount:c}))))=>(++c,n%2==1&&o(n+=1),t.dy.dom(vt.allStrings3197847[3],n,(()=>o(++n)),a,r(a),(()=>{r(++a)}),(0,e.v)({renderCount:c,name:"child_sync_props_callback"}))))),xt=(0,t._q)((({propNumber:e,propsJson:n,propNumberChange:o})=>(r=(0,t.SB)("propsDebug"),s=0,a=0,c=(0,t.RW)((t=>[e]=t(e))),i=e,l=(0,t.$q)((t=>[{renderCount:s,propNumberChangeCount:a,myPropNumber:i}]=t({renderCount:s,propNumberChangeCount:a,myPropNumber:i}))),u=(0,t.YP)([e],(()=>i=e)),d=(0,t.YP)([i],(()=>++a)))=>t.dy.dom(vt.allStrings3197847[4],(t=>{const e=JSON.parse(t.target.value);Object.assign(n,e)}),JSON.stringify(n,null,2),JSON.stringify(n,null,2),JSON.stringify(d,null,2),(()=>o(++i)),i,i,(()=>++e),e,e,(()=>++s),++s,(()=>++i),i,a,bt({propNumber:i,callback:()=>++i})))),bt=t._q.immutableProps((({propNumber:n,callback:o})=>(r=(0,t.SB)("propFnUpdateTest"),s=0,a=(0,t.$q)((t=>[s]=t(s))))=>(++s,t.dy.dom(vt.allStrings3197847[5],o,n,n,(0,e.v)({renderCount:s,name:"propFnUpdateTest"})))));const vt={allStrings3197847:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},yt=(0,t._q)((e=>t.dy.dom(mt.allStrings248805[0],(()=>e.showDialog=!1),e.showDialog?t.dy.dom(mt.allStrings248805[1],JSON.stringify(e,null,2)):"no dialog"))),mt={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]},wt=(0,t.ho)(((e,n)=>({selected:e,targets:(0,t.SB)([])}))),_t=(0,t.ho)((e=>{const n=t._q.inject(wt);t._q.onInit((()=>n.targets.push(e))).onDestroy((()=>{const t=n.targets.findIndex((t=>t===e));-1!==t&&n.targets.splice(t,1)})).element.onclick((()=>{const t=n.selected.findIndex((t=>t===e));-1!==t?n.selected.splice(t,1):n.selected.push(e)}))})),kt=(0,t._q)((()=>{const e=(0,t.SB)((()=>[0,1,2,3,4,5,6,7,8,9].map((t=>({id:t}))))),n=(0,t.SB)([]),o=wt(n,(t=>{n.length=0,n.push(...t)}));return t.dy.dom(Ct.allStrings171524[0],n.length,o,e.map((e=>t.dy.dom(Ct.allStrings171524[1],`injection-test-item-${e.id}`,_t(e),n.includes(e)?"#4CAF50":"#2196F3",n.includes(e)?"3px solid #333":"1px solid #999",{checked:!!n.includes(e)},e.id))),n.length>0?n.map((t=>t.id)).join(", "):"No items selected. Click to select items.")})),Ct={allStrings171524:[[{nn:"div",at:[["style","padding: 20px;"]],ch:[{nn:"h2",ch:[{nn:"text",tc:"Injection Test"}]},{nn:"text",tc:"selected: "},{nn:"text",v:0},{nn:"div",at:[["style","\n          border: 2px solid #666;\n          gap:1em;\n          background: #f0f0f0;\n          padding: 20px;\n          min-height: 300px;\n          position: relative;\n          user-select: none;\n          display:flex;flex-wrap:wrap;\n        "],["id","injection-testing-wrap-host"],[{tagJsVar:1}]],ch:[{nn:"text",v:2}]},{nn:"div",at:[["style","margin-top: 20px; padding: 10px; background: #333; color: white;"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Selected Items:"}]},{nn:"p",ch:[{nn:"text",v:3}]}]},{nn:"div",at:[["style","margin-top: 10px; color: #666;"]],ch:[{nn:"small",ch:[{nn:"strong",ch:[{nn:"text",tc:"Instructions:"}]},{nn:"br"},{nn:"text",tc:"- Click to select/deselect items"},{nn:"br"},{nn:"text",tc:"- Click on empty space to deselect all"},{nn:"br"},{nn:"text",tc:"- Selected items will be highlighted in green"}]}]}]}],[{nn:"div",at:[["style","\n              display: inline-block;\n              color: black;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: bold;\n              cursor: pointer;\n              transition: background 0.3s;\n              "],["id",{tagJsVar:0},null],[{tagJsVar:1}],["style.background",{tagJsVar:2},"style"],["style.border",{tagJsVar:3},"style"]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:4}]]},{nn:"text",tc:"Item "},{nn:"text",v:5}]}]]};class St{constructor(){this.tagDebug=0,this.showDialog=!1}}const Vt=()=>({counter:0});function Bt(){return{upper:t.a.create(Tt),test:0}}function Tt(){return(0,t.SB)("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const Jt=(0,t._q)(((n="providerDebugBase")=>{t.a.create(Vt);const o=t.a.create(St),r=t.a.create(Bt);let s=0,a=0;return(0,t.$q)((t=>[{propCounter:s,renderCount:a}]=t({propCounter:s,renderCount:a}))),o.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++a,t.dy.dom(Nt.allStrings6857929[0],r.test,r.upper?.test||"?",o.tagDebug||"?",(()=>++r.test),r.test,r.test,(()=>++r.upper.test),r.upper.test,r.upper.test,(()=>++o.tagDebug),o.tagDebug,o.tagDebug,(()=>++s),s,s,(()=>o.showDialog=!0),o.showDialog,jt({propCounter:s,propCounterChange:t=>{s=t}}),a,(0,e.v)({renderCount:a,name:"providerDebugBase"}),yt(o),Dt())})),jt=(0,t._q)((({propCounter:n,propCounterChange:o,_:r="providerDebug.js@child"})=>{const s=t.a.inject(Vt),a=t.a.inject(Bt),c=t.a.inject(St),i=t.a.inject(Tt);let l=!1,u=0;(0,t.$q)((t=>[{showProProps:l,renderCount:u}]=t({showProProps:l,renderCount:u})));const d=(0,t._)(),p=(0,t.SB)((()=>new t.xQ));return(0,t.nc)((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),p.subscribe((t=>{d((e=>{a.test=t}))()}))})),++u,t.dy.dom(Nt.allStrings6857929[4],(()=>++a.test),a.test,a.test,(()=>++i.test),i.test,i.test,(()=>++s.counter),s.counter,s.counter,(()=>p.next(a.test+1)),a.test,(()=>++c.tagDebug),c.tagDebug,c.tagDebug,(()=>o(++n)),n,n,(()=>c.showDialog=!0),c.showDialog,(()=>l=!l),l?"hide":"show",l&&t.dy.dom(Nt.allStrings6857929[5],(0,F.fx)(),It(c)),u,(0,e.v)({renderCount:u,name:"providerDebugInner"}))})),It=(0,t._q)((e=>t.dy.dom(Nt.allStrings6857929[6],JSON.stringify(e,null,2)))),Et=(0,t.ho)(((e="red")=>{const n=t._q.element.get();n.style.border="2px solid "+e,n.style.display="flex",n.style.gap="1em";return{color:e,title:"inCycleParent"}})),Lt=(0,t.ho)(((e="green")=>{const n=t._q.inject(Et),o=t._q.element.get();o.style.border="2px solid "+e,o.style.flex="1",o.innerHTML=`wonderful - parent(${n.color})`})),Pt=(0,t.ho)(((e="green")=>{const n=t._q.element.get();n.style.border="2px solid "+e,n.style.flex="1"})),$t=(0,t.ho)(((e="green")=>{t._q.element.get().style.color=e})),Ot=["red","blue","green","purple","orange"],Dt=(0,t._q)((()=>{let e="red",n="green",o="green",r=!1;return(0,t.$q)((t=>[{cycleColorParent:e,cycleColorChild:n,cycleColorChild2:o,hideShowCycles:r}]=t({cycleColorParent:e,cycleColorChild:n,cycleColorChild2:o,hideShowCycles:r}))),t.dy.dom(Nt.allStrings6857929[7],!r,(t=>r=!r),!r&&t.dy.dom(Nt.allStrings6857929[8],(t=>e=t.target.value),Ot.map((n=>t.dy.dom(Nt.allStrings6857929[9],n,e===n,n).key(n))),(t=>n=t.target.value),Ot.map((e=>t.dy.dom(Nt.allStrings6857929[10],e,n===e,e).key(e))),(t=>o=t.target.value),Ot.map((e=>t.dy.dom(Nt.allStrings6857929[11],e,o===e,e).key(e))),kt(),Et(e),Lt(n),Pt(o),$t(o)))})),Nt={allStrings6857929:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}],[{nn:"fieldset",at:[["id","in-cycle-context-comms"]],ch:[{nn:"legend",ch:[{nn:"label",ch:[{nn:"input",at:[["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"text",tc:"In-Cycle Context Communication"}]}]},{nn:"text",v:2}]}],[{nn:"div",at:[["style","margin-bottom: 1em"],["id","fieldset-body-wrap"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:2},null]],ch:[{nn:"text",v:3}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",at:[["id","drag-drop-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Drag Selection Testing"}]},{nn:"text",v:6}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:7}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:8}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",tc:"wonderful too\n            "},{nn:"text",v:9},{nn:"span",ch:[{nn:"text",tc:"part 2"},{nn:"text",v:10}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},At=(0,t._q)((({label:e,memory:n})=>{let o=!1,r=!1;return(0,t.$q)((t=>[{mouseOverEditShow:o,edit:r}]=t({mouseOverEditShow:o,edit:r}))),t.dy.dom(qt.allStrings140407[0],(()=>o=!0),(()=>o=!1),e,n.counter,o||"false",(()=>++n.counter),r||o?"visible":"hidden",(()=>r=!r))})),qt={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Ht=Date.now(),Mt=t._q.immutableProps((({appCounterSubject:e},n="countersDebug")=>((0,t.SB)("countersDebug state"),t.dy.dom(Xt.allStrings9522277[0],(0,t.Ld)(t.xQ.globalSubCount$),(()=>console.info("subs",t.xQ.globalSubs)),(()=>e.next((e.value||0)+1)),(0,t.Ld)(e),e.value,Wt())))),Rt=t._q.deepPropWatch((({propCounter:n,increasePropCounter:o})=>(r=0,s=0,a=0,c=(0,t.$q)((t=>[{elmInitCount:a,otherCounter:r,renderCount:s}]=t({elmInitCount:a,otherCounter:r,renderCount:s}))),i=++s)=>t.dy.dom(Xt.allStrings9522277[1],t.ho.onInit((()=>++a)),a,o,n,n,(()=>++r),r,r,s,(0,e.v)({renderCount:s,name:"inner_counters"})))),Ut=t._q.watchProps((({propCounter:n,increasePropCounter:o})=>{let r=0,s=0;return(0,t.$q)((t=>[{otherCounter:r,renderCount:s}]=t({otherCounter:r,renderCount:s}))),++s,t.dy.dom(Xt.allStrings9522277[2],o,n,n,(()=>++r),r,r,s,(0,e.v)({renderCount:s,name:"shallow_counters"}))})),Yt=t._q.immutableProps((({propCounter:n,increasePropCounter:o})=>{let r=0,s=0;return(0,t.$q)((t=>[{otherCounter:r,renderCount:s}]=t({otherCounter:r,renderCount:s}))),++s,t.dy.dom(Xt.allStrings9522277[3],o,n,n,(()=>++r),r,r,s,(0,e.v)({renderCount:s,name:"immutable_counters"}))})),Wt=()=>t._q.use=(n=0,o=0,r=0,s=0,a=0,c=0,i=0,l=(0,t._)(),u=(0,t.uz)((t=>{t})),d=(()=>{++c}),p=(0,t.SB)((()=>({propCounter:c,increasePropCounter:d}))),h=(0,t.$q)((t=>[{counter:r,renderCount:a,propCounter:c,initCounter:i,immutableProps:p,statesRenderCount:n,statesRenderCount2:o}]=t({counter:r,renderCount:a,propCounter:c,initCounter:i,immutableProps:p,statesRenderCount:n,statesRenderCount2:o}))),g=(0,t.SB)((()=>new t.xQ(r))),f=(0,t.SB)((()=>new t.xQ(0))),x=(0,t.SB)((()=>new t.v0("222"))),b=(()=>{++r,x.next("333-"+r)}),v=t.xQ.all([x,g]),y=t.fo.all([x,g]),m=(0,t.SB)((()=>({counter:0}))),w=(0,t.SB)((()=>Date.now())),_=(0,t.nc)((()=>{++i,console.info("countersDebug.ts: 👉 i should only ever run once"),g.subscribe(l((t=>{r=t}))),g.subscribe(u)})))=>(p.propCounter!==c&&(p={propCounter:c,increasePropCounter:d}),++a,t.dy.dom(Xt.allStrings9522277[5],i,n,(()=>{++n}),o,(()=>{++o}),(t=>r=Number(t.target.value)||0),d,c,c,b,r,r>1&&t.dy.dom(Xt.allStrings9522277[6],b,r,r),(()=>g.next(r+1)),(0,t.Ld)(g),(()=>{setTimeout((()=>{f.next(f.value+1)}),10)}),(0,t.Ld)(f),(0,t.Ld)(v,(()=>r)),(0,t.Ld)(y,(()=>r)),!0,At({label:"a-a-😻",memory:m}),At({label:"b-b-😻",memory:m}),m.counter,(()=>++m.counter),Rt({propCounter:c,increasePropCounter:d}),Ut({propCounter:c,increasePropCounter:d}),Yt(p),(({propCounter:n,increasePropCounter:o})=>{let r=0,s=0,a="noWatchPropCounters";return(0,t.$q)((t=>[{otherCounter:r,renderCount:s,noWatchPropCounters:a}]=t({otherCounter:r,renderCount:s,noWatchPropCounters:a}))),++s,t.dy.dom(Xt.allStrings9522277[4],o,n,n,(()=>++r),r,r,s,(0,e.v)({renderCount:s,name:"nowatch_counters"}))})({propCounter:c,increasePropCounter:d}),t.ho.onInit((t=>t.innerText=(Date.now()-Ht).toString())),t.ho.onInit((t=>t.innerText=(Date.now()-w).toString())),(0,e.v)({renderCount:a,name:"counters"}))),Xt={allStrings9522277:[[{nn:"text",tc:"\x3c!--counters--\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"text",tc:"👉 Subscription count:"},{nn:"span",at:[["id","👉-counter-sub-count"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"log subs"}]},{nn:"div",ch:[{nn:"button",at:[["id","counters-app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-display"]],ch:[{nn:"text",v:3}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-subject-display"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],[{tagJsVar:0}]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"text",tc:"🔥 elmInitCount:"},{nn:"span",at:[["id","🔥-init-counter"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️-inner-counter"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"❤️-inner-counter propCounter:"},{nn:"text",v:3}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-inner-display"]],ch:[{nn:"text",v:4}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🤿-deep-counter"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤿 otherCounter:"},{nn:"text",v:6}]},{nn:"span",ch:[{nn:"text",tc:"🤿 "},{nn:"span",at:[["id","🤿-deep-display"]],ch:[{nn:"text",v:7}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:8}]},{nn:"text",v:9},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"text",tc:"initCounter:"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"😱 statesRenderCount:"},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"😱 ++statesRenderCount"}]}]},{nn:"div",ch:[{nn:"text",tc:"😱😱 statesRenderCount2:"},{nn:"text",v:3},{nn:"button",at:[["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"😱😱 ++statesRenderCount2"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"input",at:[["id","set-main-counter-input"],["placeholder","input counter value"],["keyup",{tagJsVar:5},null]]},{nn:"div",ch:[{nn:"button",at:[["id","❤️-increase-counter"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"❤️ propCounter:"},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-counter-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-standalone-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥦 stand alone counters"}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","🥦-standalone-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"text",v:11},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-counter"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🥦&lt;"},{nn:"span",at:[["id","subject-counter-subject-display"]],ch:[{nn:"text",v:13}]},{nn:"text",tc:"&gt;"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-async-counter"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🔀 🥦 ++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🔀 🥦&lt;"},{nn:"span",at:[["id","subject-async-counter-subject-display"]],ch:[{nn:"text",v:15}]},{nn:"text",tc:"&gt;"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 1"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject"]],ch:[{nn:"text",v:16}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 2"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject-2"]],ch:[{nn:"text",v:17}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shared memory"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:.5em"],["class.bold.text-blue",{tagJsVar:18},"class"]],ch:[{nn:"text",v:19},{nn:"text",tc:"\n      "},{nn:"text",v:20}]},{nn:"text",tc:"memory.counter:😻"},{nn:"text",v:21},{nn:"button",at:[["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"increase 😻"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"inner counter"}]},{nn:"text",v:23}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shallow props"}]},{nn:"text",v:24}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"immutable props"}]},{nn:"text",v:25}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"nowatch props"}]},{nn:"text",v:26}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ page load to display in&nbsp;"},{nn:"span",at:[[{tagJsVar:27}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ read in&nbsp;"},{nn:"span",at:[[{tagJsVar:28}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"text",v:29},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","conditional-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"conditional counter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","conditional-display"]],ch:[{nn:"text",v:2}]}]}]}]]},zt=(0,t._q)((()=>{let e=!0;return(0,t.$q)((t=>[e]=t(e))),t.dy.dom(Ft.allStrings52782[0],5,5,e&&t.dy.dom(Ft.allStrings52782[1]),e&&t.dy.dom(Ft.allStrings52782[2]))})),Ft={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]};var Qt=n(405);const Gt=t._q.deepPropWatch((()=>(e=0,n=0,o=0,r=0,s=!1,a=0,c=0,i=(0,t.$q)((t=>[{stateNum:e,stateNumChangeCount:n,slowChangeCount:o,subjectChangeCount:r,truthChange:s,truthChangeCount:a,truthSubChangeCount:c}]=t({stateNum:e,stateNumChangeCount:n,slowChangeCount:o,subjectChangeCount:r,truthChange:s,truthChangeCount:a,truthSubChangeCount:c}))),l=(0,t.YP)([e],(()=>++n)),u=t.YP.noInit([e],(0,t.uz)((()=>++o))),d=t.YP.asSubject([e],(0,t.uz)((()=>++r))),p=t.YP.truthy([s],(0,t.uz)((()=>++a))),h=t.YP.truthy.asSubject([s],(0,t.uz)((t=>++c))))=>t.dy.dom(Kt.allStrings2187613[0],e,(()=>++e),n,o,u,r,(0,t.Ld)(d),s?"true":"false",p||"false",a,(0,t.Ld)(h),c,(()=>s=!s),s?"true":"false"))),Kt={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},Zt=(0,t._q)((()=>{const e=new t.xQ,n=new t.v0("purple"),o=new t.v0("green");let r=!1;return t.oB.style("flex-grow:1")((0,t.j3)("subscribe attributes",(()=>`- shouldHideAttributes: ${r}`)),(()=>r?"":t.hi.style("display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em").id("subscribe-attributes-wrap")((()=>`shouldHideAttributes: ${r}`),t.hi.style("display:flex;flex-wrap:wrap;gap:1em")(t.oB.style("flex-grow:1")((0,t.j3)("subscribe special attribute"),t.yP.id("subscribe-style-dot-bg-color-changer").style((0,t.Te)(e,"red",(t=>({backgroundColor:t}))))("background color changer")),t.oB.style("flex-grow:1")((0,t.j3)("subscribe style attribute"),t.yP.id("subscribe-style-bg-color").style((0,t.Te)(e,"red",(t=>`background-color:${t}`)))("subscribe bg color")),t.oB.style("flex-grow:1")((0,t.j3)("sometimes subscribe style attribute"),t.yP.id("multiple-subscribe-bg-color").style((()=>"blue"===e.value&&(0,t.Ld)(n,(t=>"background-color:"+t))||"red"===e.value&&(0,t.Ld)(o,(t=>"background-color:"+t))||"background-color:pink;"))("multiple subscribe bg color"))))),t.LI.id("toggle-color-btn").type("button").onClick((()=>{const t=e.value;e.next("red"===t?"blue":"red")}))("Toggle Color (",(0,t.Ld)(e),")"),t.LI.id("toggle-attributes-btn").type("button").onClick((()=>{r=!r}))((()=>r?"Show":"Hide")," Attributes"),t.LI.onClick((()=>e.next(""))).id("clear-color-btn").type("button")("Clear Color"),"subscriptions: ",t.yP.id("subscriptions-count")((0,t.Te)(t.xQ.globalSubCount$,t.xQ.globalSubCount$.value)))})),te=(0,t._q)((()=>{let e="a",n=!0;return(0,t.hi)(t.qH.id("attr-input-abc").placeholder("a b or c").onChange((t=>e=t.target.value)),t.Ys.id("select-sample-drop-down")(["a","b","c"].map((n=>t.dy.dom(ee.allStrings200687[0],n,n==e?"selected":"",n,n==e?"true":"false").key(n)))),t.hr,(0,t.h3)("Special Attributes"),(0,t.hi)(t.qH.type("checkbox").id("toggle-backgrounds").onChange((t=>n=t.target.checked)).attr("checked",(()=>n&&"checked")),(()=>" - toggle backgrounds:"+(n?"true":"false"))),t.hi.style("display: flex;flex-wrap:wrap;gap:1em")((0,t.ol)((0,t.li)(t.hi.id("attr-style-strings").style((()=>({backgroundColor:n?"orange":"",color:n?"black":""})))("style.background-color=${'orange'}")),(0,t.li)(t.hi.id("attr-class-booleans").class((()=>({"background-orange":!!n,"text-black":!!n})))((()=>`class.background-orange=${n}`))),(0,t.li)(t.hi.id("attr-inline-class").class((()=>n?"background-orange text-black":""))("class=${'background-orange text-black'}")),(0,t.li)(t.hi.id("attr-dynamic-inline-class").class((()=>"text-white"+(n?" background-orange":"")))("class=${'background-orange'} but always white")))),t.oB.style("margin-top: 1em")((0,t.j3)("style object attribute"),t.hi.id("style-object-test").style((()=>({backgroundColor:n?"orange":"lightgrey",padding:"10px",border:"2px solid black",borderRadius:n?"8px":"4px",boxShadow:n?"2px 2px 4px rgba(0,0,0,0.3)":"none"})))("Style object test"),t.hi.id("style-set-property-test").style((()=>({"background-color":n?"red":"blue",color:"white",padding:"5px","margin-top":"10px"})))("style property test")),Zt())})),ee={allStrings200687:[[{nn:"option",at:[["value",{tagJsVar:0},null],[{tagJsVar:1}]],ch:[{nn:"text",v:2},{nn:"text",tc:" - "},{nn:"text",v:3}]}]]},ne=(0,t._q)((()=>{let e=0,n=0,o=!0;return(0,t.$q)((t=>[e,n,o]=t(e,n,o))),n++,t.dy.dom(se.allStrings135382[0],e,n,(()=>e++),(()=>o=!o),o?"Hide":"Show",o&&oe(e))})),oe=(0,t._q)((e=>{let n=0,o="red";return oe.inputs((t=>[e]=t)),(0,t.hi)((()=>`color: ${o}`),t.Ys.onChange((t=>o=t.target.value))(t.Kw.value("red")("red"),t.Kw.value("green")("green")),(()=>re(e)),t.yP.style((()=>"color:"+o))("hello my span world"),t.hi.style((()=>"color:"+o))("hello my div world"),t.LI.onClick((()=>++n))("click me"),(0,t.hi)((()=>`click counts ${n}`)),(0,t.hi)((()=>`parent counter: ${e}`)),(0,t.hi)((()=>`combined counters: ${n+e}`)))})),re=(0,t._q)((e=>{re.inputs((t=>[e]=t));let n=0;return[(0,t.hi)("hello array bolt 0"),(0,t.hi)("hello array bolt 1"),(0,t.hi)("innerCounter: ",(t=>n)),(0,t.hi)((()=>`parent counter: ${e}`)),t.LI.onClick((()=>++n))("inner counter")]})),se={allStrings135382:[[{nn:"div",ch:[{nn:"h2",ch:[{nn:"text",tc:"Basic Component"}]},{nn:"p",ch:[{nn:"text",tc:"Counter: "},{nn:"text",v:0}]},{nn:"p",ch:[{nn:"text",tc:"Render Count: "},{nn:"text",v:1}]},{nn:"button",at:[["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"Increment Counter"}]},{nn:"button",at:[["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"Toggle Div ("},{nn:"text",v:4},{nn:"text",tc:")"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}]]};var ae=function(t,e){return ae=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},ae(t,e)};function ce(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}ae(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function ie(t,e,n,o){return new(n||(n=Promise))((function(r,s){function a(t){try{i(o.next(t))}catch(t){s(t)}}function c(t){try{i(o.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,c)}i((o=o.apply(t,e||[])).next())}))}function le(t,e){var n,o,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(i){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(s=0)),s;)try{if(n=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,o=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){s.label=c[1];break}if(6===c[0]&&s.label<r[1]){s.label=r[1],r=c;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(c);break}r[2]&&s.ops.pop(),s.trys.pop();continue}c=e.call(t,s)}catch(t){c=[6,t],o=0}finally{n=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,i])}}}Object.create;function ue(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function de(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,s=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(o=s.next()).done;)a.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return a}function pe(t,e,n){if(n||2===arguments.length)for(var o,r=0,s=e.length;r<s;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))}function he(t){return this instanceof he?(this.v=t,this):new he(t)}function ge(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(t,e||[]),s=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),a("next"),a("throw"),a("return",(function(t){return function(e){return Promise.resolve(e).then(t,l)}})),o[Symbol.asyncIterator]=function(){return this},o;function a(t,e){r[t]&&(o[t]=function(e){return new Promise((function(n,o){s.push([t,e,n,o])>1||c(t,e)}))},e&&(o[t]=e(o[t])))}function c(t,e){try{(n=r[t](e)).value instanceof he?Promise.resolve(n.value.v).then(i,l):u(s[0][2],n)}catch(t){u(s[0][3],t)}var n}function i(t){c("next",t)}function l(t){c("throw",t)}function u(t,e){t(e),s.shift(),s.length&&c(s[0][0],s[0][1])}}function fe(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=ue(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(o,r){(function(t,e,n,o){Promise.resolve(o).then((function(e){t({value:e,done:n})}),e)})(o,r,(e=t[n](e)).done,e.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function xe(t){return"function"==typeof t}function be(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var ve=be((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function ye(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var me=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,o,r;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var a=ue(s),c=a.next();!c.done;c=a.next()){c.value.remove(this)}}catch(e){t={error:e}}finally{try{c&&!c.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}else s.remove(this);var i=this.initialTeardown;if(xe(i))try{i()}catch(t){r=t instanceof ve?t.errors:[t]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var u=ue(l),d=u.next();!d.done;d=u.next()){var p=d.value;try{ke(p)}catch(t){r=null!=r?r:[],t instanceof ve?r=pe(pe([],de(r)),de(t.errors)):r.push(t)}}}catch(t){n={error:t}}finally{try{d&&!d.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}}if(r)throw new ve(r)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)ke(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&ye(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&ye(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),we=me.EMPTY;function _e(t){return t instanceof me||t&&"closed"in t&&xe(t.remove)&&xe(t.add)&&xe(t.unsubscribe)}function ke(t){xe(t)?t():t.unsubscribe()}var Ce={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Se={setTimeout:function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var r=Se.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,pe([t,e],de(n))):setTimeout.apply(void 0,pe([t,e],de(n)))},clearTimeout:function(t){var e=Se.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function Ve(t){Se.setTimeout((function(){var e=Ce.onUnhandledError;if(!e)throw t;e(t)}))}function Be(){}var Te=Je("C",void 0,void 0);function Je(t,e,n){return{kind:t,value:e,error:n}}var je=null;function Ie(t){if(Ce.useDeprecatedSynchronousErrorHandling){var e=!je;if(e&&(je={errorThrown:!1,error:null}),t(),e){var n=je,o=n.errorThrown,r=n.error;if(je=null,o)throw r}}else t()}var Ee=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,_e(e)&&e.add(n)):n.destination=Ae,n}return ce(e,t),e.create=function(t,e,n){return new Oe(t,e,n)},e.prototype.next=function(t){this.isStopped?Ne(function(t){return Je("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?Ne(Je("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?Ne(Te,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(me),Le=Function.prototype.bind;function Pe(t,e){return Le.call(t,e)}var $e=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){De(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){De(t)}else De(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){De(t)}},t}(),Oe=function(t){function e(e,n,o){var r,s,a=t.call(this)||this;xe(e)||!e?r={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=o?o:void 0}:a&&Ce.useDeprecatedNextContext?((s=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},r={next:e.next&&Pe(e.next,s),error:e.error&&Pe(e.error,s),complete:e.complete&&Pe(e.complete,s)}):r=e;return a.destination=new $e(r),a}return ce(e,t),e}(Ee);function De(t){var e;Ce.useDeprecatedSynchronousErrorHandling?(e=t,Ce.useDeprecatedSynchronousErrorHandling&&je&&(je.errorThrown=!0,je.error=e)):Ve(t)}function Ne(t,e){var n=Ce.onStoppedNotification;n&&Se.setTimeout((function(){return n(t,e)}))}var Ae={closed:!0,next:Be,error:function(t){throw t},complete:Be},qe="function"==typeof Symbol&&Symbol.observable||"@@observable";function He(t){return t}function Me(t){return 0===t.length?He:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var Re=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var o,r=this,s=(o=t)&&o instanceof Ee||function(t){return t&&xe(t.next)&&xe(t.error)&&xe(t.complete)}(o)&&_e(o)?t:new Oe(t,e,n);return Ie((function(){var t=r,e=t.operator,n=t.source;s.add(e?e.call(s,n):n?r._subscribe(s):r._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=Ue(e))((function(e,o){var r=new Oe({next:function(e){try{t(e)}catch(t){o(t),r.unsubscribe()}},error:o,complete:e});n.subscribe(r)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[qe]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Me(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=Ue(t))((function(t,n){var o;e.subscribe((function(t){return o=t}),(function(t){return n(t)}),(function(){return t(o)}))}))},t.create=function(e){return new t(e)},t}();function Ue(t){var e;return null!==(e=null!=t?t:Ce.Promise)&&void 0!==e?e:Promise}var Ye=be((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),We=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return ce(e,t),e.prototype.lift=function(t){var e=new Xe(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new Ye},e.prototype.next=function(t){var e=this;Ie((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var r=ue(e.currentObservers),s=r.next();!s.done;s=r.next()){s.value.next(t)}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;Ie((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;Ie((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,o=n.hasError,r=n.isStopped,s=n.observers;return o||r?we:(this.currentObservers=null,s.push(t),new me((function(){e.currentObservers=null,ye(s,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,o=e.thrownError,r=e.isStopped;n?t.error(o):r&&t.complete()},e.prototype.asObservable=function(){var t=new Re;return t.source=this,t},e.create=function(t,e){return new Xe(t,e)},e}(Re),Xe=function(t){function e(e,n){var o=t.call(this)||this;return o.destination=e,o.source=n,o}return ce(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:we},e}(We);function ze(t){return function(e){if(function(t){return xe(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Fe(t,e,n,o,r){return new Qe(t,e,n,o,r)}var Qe=function(t){function e(e,n,o,r,s,a){var c=t.call(this,e)||this;return c.onFinalize=s,c.shouldUnsubscribe=a,c._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,c._error=r?function(t){try{r(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=o?function(){try{o()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return ce(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(Ee);var Ge=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Ke(t){return xe(null==t?void 0:t.then)}function Ze(t){return xe(t[qe])}function tn(t){return Symbol.asyncIterator&&xe(null==t?void 0:t[Symbol.asyncIterator])}function en(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var nn="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function on(t){return xe(null==t?void 0:t[nn])}function rn(t){return ge(this,arguments,(function(){var e,n,o;return le(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,he(e.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,he(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,he(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function sn(t){return xe(null==t?void 0:t.getReader)}function an(t){if(t instanceof Re)return t;if(null!=t){if(Ze(t))return r=t,new Re((function(t){var e=r[qe]();if(xe(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Ge(t))return o=t,new Re((function(t){for(var e=0;e<o.length&&!t.closed;e++)t.next(o[e]);t.complete()}));if(Ke(t))return n=t,new Re((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,Ve)}));if(tn(t))return cn(t);if(on(t))return e=t,new Re((function(t){var n,o;try{for(var r=ue(e),s=r.next();!s.done;s=r.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}t.complete()}));if(sn(t))return cn(rn(t))}var e,n,o,r;throw en(t)}function cn(t){return new Re((function(e){(function(t,e){var n,o,r,s;return ie(this,void 0,void 0,(function(){var a,c;return le(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=fe(t),i.label=1;case 1:return[4,n.next()];case 2:if((o=i.sent()).done)return[3,4];if(a=o.value,e.next(a),e.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=i.sent(),r={error:c},[3,11];case 6:return i.trys.push([6,,9,10]),o&&!o.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(r)throw r.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(t,e).catch((function(t){return e.error(t)}))}))}function ln(t,e,n,o,r){void 0===o&&(o=0),void 0===r&&(r=!1);var s=e.schedule((function(){n(),r?t.add(this.schedule(null,o)):this.unsubscribe()}),o);if(t.add(s),!r)return s}function un(t,e,n){return void 0===n&&(n=1/0),xe(e)?un((function(n,o){return function(t,e){return ze((function(n,o){var r=0;n.subscribe(Fe(o,(function(n){o.next(t.call(e,n,r++))})))}))}((function(t,r){return e(n,t,o,r)}))(an(t(n,o)))}),n):("number"==typeof e&&(n=e),ze((function(e,o){return function(t,e,n,o,r,s,a,c){var i=[],l=0,u=0,d=!1,p=function(){!d||i.length||l||e.complete()},h=function(t){return l<o?g(t):i.push(t)},g=function(t){s&&e.next(t),l++;var c=!1;an(n(t,u++)).subscribe(Fe(e,(function(t){null==r||r(t),s?h(t):e.next(t)}),(function(){c=!0}),void 0,(function(){if(c)try{l--;for(var t=function(){var t=i.shift();a?ln(e,a,(function(){return g(t)})):g(t)};i.length&&l<o;)t();p()}catch(t){e.error(t)}})))};return t.subscribe(Fe(e,h,(function(){d=!0,p()}))),function(){null==c||c()}}(e,o,t,n)})))}function dn(){return void 0===(t=1)&&(t=1/0),un(He,t);var t}function pn(t){return t[t.length-1]}function hn(t){return(e=pn(t))&&xe(e.schedule)?t.pop():void 0;var e}function gn(t,e){return void 0===e&&(e=0),ze((function(n,o){n.subscribe(Fe(o,(function(n){return ln(o,t,(function(){return o.next(n)}),e)}),(function(){return ln(o,t,(function(){return o.complete()}),e)}),(function(n){return ln(o,t,(function(){return o.error(n)}),e)})))}))}function fn(t,e){return void 0===e&&(e=0),ze((function(n,o){o.add(t.schedule((function(){return n.subscribe(o)}),e))}))}function xn(t,e){if(!t)throw new Error("Iterable cannot be null");return new Re((function(n){ln(n,e,(function(){var o=t[Symbol.asyncIterator]();ln(n,e,(function(){o.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function bn(t,e){if(null!=t){if(Ze(t))return function(t,e){return an(t).pipe(fn(e),gn(e))}(t,e);if(Ge(t))return function(t,e){return new Re((function(n){var o=0;return e.schedule((function(){o===t.length?n.complete():(n.next(t[o++]),n.closed||this.schedule())}))}))}(t,e);if(Ke(t))return function(t,e){return an(t).pipe(fn(e),gn(e))}(t,e);if(tn(t))return xn(t,e);if(on(t))return function(t,e){return new Re((function(n){var o;return ln(n,e,(function(){o=t[nn](),ln(n,e,(function(){var t,e,r;try{e=(t=o.next()).value,r=t.done}catch(t){return void n.error(t)}r?n.complete():n.next(e)}),0,!0)})),function(){return xe(null==o?void 0:o.return)&&o.return()}}))}(t,e);if(sn(t))return function(t,e){return xn(rn(t),e)}(t,e)}throw en(t)}function vn(){for(var t,e,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return dn()((t=n,(e=hn(n))?bn(t,e):an(t)))}function yn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=hn(t);return ze((function(e,o){(n?vn(t,e,n):vn(t,e)).subscribe(o)}))}const mn=(0,t._q)((()=>{const e=(0,t.SB)((()=>new t.xQ)),n=(0,t.SB)((()=>new t.v0(3))),o=(0,t.SB)((()=>new t.v0(["a","b","c"]))),r=(0,t.SB)((()=>new t.v0(0))),s=(0,t.SB)((()=>new t.v0(1)));return t.dy.dom(Sn.allStrings678527[0],(0,t.Ld)(e),(0,t.Ld)(o,(e=>e.map((e=>t.dy.dom(Sn.allStrings678527[1],e).key(e))))),(0,t.Ld)(o,(e=>e.map((e=>t.dy.dom(Sn.allStrings678527[2],e,e).key(e))))),(0,t.Te)(e,-1),(0,t.Ld)(r),(0,t.Ld)(r,(()=>55)),Cn(),(0,t.Ld)((0,t.aj)([r,s]).pipe((t=>t[1]))),(0,t.Ld)((0,t.aj)([r,s]).pipe((0,t.Ut)((e=>Promise.resolve(t.dy.dom(Sn.allStrings678527[3])))))),wn({sub0:e,sub1:n}))})),wn=(0,t._q)((({sub0:e,sub1:n})=>{let o=!1;const r=(0,t.SB)((()=>new We));return(0,t.$q)((t=>[o]=t(o))),t.dy.dom(Sn.allStrings678527[4],(0,t.Ld)(e),(()=>e.next((e.value||0)+1)),(()=>r.next(e.value=(e.value||0)+1)),(()=>o=!o),o?"show":"hide",o,o&&(0,t.Ld)(e),o&&(0,t.Ld)(e,_n),o&&(0,t.Ld)(e,kn),(0,t.Ld)(n,kn),(0,t.Ld)(r,kn),(0,t.Ld)(r.pipe(yn(33)),kn),(0,t.Ld)(r.pipe(yn(void 0)),(t=>kn(t))),(0,t.Ld)(r,(t=>kn(t))))})),_n=e=>t.dy.dom(Sn.allStrings678527[5],e),kn=(0,t._q)((e=>t.dy.dom(Sn.allStrings678527[6],e))),Cn=(0,t._q)((()=>{let e=!0,n=0,o=0;return(0,t.$q)((t=>[{hideShow:e,destroyCount:n,clickCounter:o}]=t({hideShow:e,destroyCount:n,clickCounter:o}))),t.dy.dom(Sn.allStrings678527[7],e&&t.dy.dom(Sn.allStrings678527[8],(0,t.ho)((()=>t._q.element.get().innerHTML=Date.now().toString()),{onDestroy:()=>++n}),(()=>++o),o),(()=>e=!e),n)})),Sn={allStrings678527:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:1}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:2}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:4}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:7}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:8}]}]}]}]}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:9}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]},Vn=[{view:l.Basic,tag:ne,emoji:"🔢"},{view:l.OneRender,tag:()=>t._q.renderOnce=(n=new t.KU(0),o=0)=>{++o;const a=t.xQ.all([0,"all",4]);return t.dy.dom(s.allStrings2265941[0],(0,t.Ld)(a.pipe((t=>JSON.stringify(t)))),(0,t.Ld)(n),(()=>++n.value),(0,e.v)({renderCount:o,name:"oneRender_tag_ts"}),r())},emoji:"1️⃣"},{view:l.Props,tag:ht,emoji:"🧳"},{view:l.WatchTesting,tag:Gt,emoji:"⌚️"},{view:l.TableDebug,tag:zt},{view:l.ProviderDebug,tag:Jt},{view:l.TagSwitchDebug,tag:et,emoji:"🔀"},{view:l.Mirroring,tag:it,emoji:"🪞"},{view:l.Arrays,tag:K,emoji:"⠇"},{view:l.Content,tag:Qt.kQ,emoji:"📰",debug:!0},{view:l.Child,tag:R,emoji:"👶"},{view:l.Destroys,tag:W,emoji:"🗑️"},{view:l.FunInPropsTag,tag:S},{view:l.AttributeDebug,tag:te,emoji:"🏹"},{view:l.Todo,tag:(0,t._q)(D)},{view:l.Counters,tag:Mt,emoji:"💯"},{view:l.Subscriptions,tag:mn,emoji:"📡"}],Bn=(0,t._q)(((e,n=u.views)=>{const o=(0,t.SB)((()=>Vn.filter((t=>{if(n.includes(t.view))return!0})).map((({view:t,title:n,emoji:o,tag:r,...s})=>({title:n||t,output:t===l.Counters?r({appCounterSubject:e}):r(),view:t,emoji:o,...s}))).sort(((t,e)=>t.view.localeCompare(e.view)))));return t.dy.dom(Jn.allStrings1912996[0],o.map((t=>Tn(t).key(t.view))))})),Tn=e=>{const{emoji:n,view:o,title:r,output:s,debug:a}=e;return t.dy.dom(Jn.allStrings1912996[1],o,n,r,e.contentHide?"none":"",s,"section_"+e.view,(()=>e.contentHide=!e.contentHide),e.contentHide?"grey":"")},Jn={allStrings1912996:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["style","flex:2 2 20em"]],ch:[{nn:"a",at:[["id",{tagJsVar:0},null]],ch:[{nn:"text",tc:"\x3c!-- ⚓️ --\x3e"}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",v:1},{nn:"text",tc:" "},{nn:"text",v:2}]},{nn:"div",at:[["id","many-section-contents"],["style.display",{tagJsVar:3},"style"]],ch:[{nn:"text",v:4}]},{nn:"div",at:[["style","display:flex;"]],ch:[{nn:"button",at:[["style","flex:1;"],["id",{tagJsVar:5},null],["click",{tagJsVar:6},null],["style.background-color",{tagJsVar:7},"style"]],ch:[{nn:"text",tc:"👁️ hide/show"}]}]}]},{nn:"div",at:[["style","font-size:0.6em;text-align:right;"]],ch:[{nn:"a",at:[["href","#top"]],ch:[{nn:"text",tc:"⏫"}]}]}]}]]},jn=3e3,In=6e3,En=(0,t._q)((()=>{let e,n,o=0,r=0,s=0;(0,t.$q)((t=>[{intervalCount:o,intervalId:e,intervalId2:n,renderCounter:r,currentTime:s}]=t({intervalCount:o,intervalId:e,intervalId2:n,renderCounter:r,currentTime:s})));const a=(0,t._)(),c=()=>++o,i=()=>{console.info("🟢 interval test 0 started..."),s=0,n=setInterval(a((()=>{s+=500,s>=jn&&(s=0)})),500),console.info("▶️ interval started"),e=setInterval(a((()=>{c()})),jn)},l=()=>{clearInterval(e),clearInterval(n),e=void 0,n=void 0,console.info("🛑 interval test 0 stopped")};return(0,t.nc)(i),(0,t.ev)(l),++r,t.dy.dom(Pn.allStrings838008[0],jn,e,c,o,r,jn,s,s,(()=>{e||n?l():i()}),e||n?"red":"green",(()=>setTimeout(a((()=>{s+=200})),1e3)))})),Ln=(0,t._q)((()=>{let e,n,o=0,r=0,s=0;(0,t.$q)((t=>[{intervalCount:o,intervalId:e,intervalId2:n,renderCounter:r,currentTime:s}]=t({intervalCount:o,intervalId:e,intervalId2:n,renderCounter:r,currentTime:s})));const a=(0,t._)(),c=()=>++o;const i=()=>{clearInterval(e),clearInterval(n),e=void 0,n=void 0,console.info("🔴 interval 1 stopped")};function l(){if(e)return i();console.info("🟢 interval test 1 started..."),s=0,n=setInterval(a((()=>{s+=500,s>=In&&(s=0)})),500),e=setInterval(a((()=>{c(),console.info("slow interval ran")})),In)}return(0,t.nc)(l),(0,t.ev)(i),++r,t.dy.dom(Pn.allStrings838008[1],In,e,c,o,r,In,s,s,l,e?"red":"green")})),Pn={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},$n=(0,t._q)((()=>{let e="tagJsDebug.js",n=!1,o=0;return(0,t.$q)((t=>[{_firstState:e,showIntervals:n,renderCount:o}]=t({_firstState:e,showIntervals:n,renderCount:o}))),++o,t.dy.dom(On.allStrings77500[0],(()=>n=!n),n&&t.dy.dom(On.allStrings77500[1],(0,F.fx)(),En(),Ln()))})),On={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};function Dn(){const t=P(),e=t.route,n=t.location.pathname;if(n&&"counters/"===e)return"counters";if(n&&"content/"===e)return"content";if(n.endsWith("isolated.html"))return"isolated";return n.includes("todo/www")?"todo":"home"}const Nn=()=>t._q.use=(e=Dn())=>t.dy.dom(An.allStrings120829[0],"home"===e?".5":"1","home"===e?void 0:"#/","isolated"===e?".5":"1","isolated"===e?void 0:"isolated.html","counters"===e?".5":"1","counters"===e?void 0:"#counters/","content"===e?".5":"1","content"===e?void 0:"#content/","todo"===e?".5":"1","todo"===e?void 0:"todo/www/"),An={allStrings120829:[[{nn:"div",ch:[{nn:"a",at:[["style.opacity",{tagJsVar:0},"style"],["href",{tagJsVar:1},null]],ch:[{nn:"text",tc:"home"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:2},"style"],["href",{tagJsVar:3},null]],ch:[{nn:"text",tc:"isolated"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:4},"style"],["href",{tagJsVar:5},null]],ch:[{nn:"text",tc:"counters"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:6},"style"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"content"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:8},"style"],["href",{tagJsVar:9},null]],ch:[{nn:"text",tc:"todo app"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["href","https://github.com/AckerApple/taggedjs"],["target","_blank"]],ch:[{nn:"text",tc:"repo"}]}]}]]},qn=Date.now();function Hn(){return function(e=Dn()){let n=!1;return(0,t.$q)((t=>[{showHide:n}]=t({showHide:n}))),console.log("🍒 App rendered",qn),t.dy.dom(Yn.allStrings2804559[0],4,(()=>n=!n),n,n&&Un(),Nn(),"home"===e&&Rn(),"counters"===e&&Wt(),"content"===e&&(0,Qt.kQ)())}}Hn.isApp=!0;const Mn=(0,t._q)(Hn),Rn=()=>t._q.use=(o=!0,r=0,s=!1,a=null,c=(0,t.SB)((()=>new t.xQ(r))),i=0,l="🟦",u=(0,t.$q)((t=>[{showSections:o,appCounter:r,toggleValue:s,testTimeout:a,renderCount:i,testEmoji:l}]=t({showSections:o,appCounter:r,toggleValue:s,testTimeout:a,renderCount:i,testEmoji:l}))),d=(()=>{s=!s}))=>{const p=(0,t._)(),g=p((t=>l=t?"✅":"❌"));function f(t=!0,e=(()=>{})){l="🟦";a=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const o=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(n.bind(n,566)),await Promise.resolve().then(n.bind(n,451)),await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835)),await Promise.resolve().then(n.bind(n,528)),await Promise.resolve().then(n.bind(n,428)),await Promise.resolve().then(n.bind(n,749)),await Promise.resolve().then(n.bind(n,168)),await Promise.resolve().then(n.bind(n,842)),await Promise.resolve().then(n.bind(n,774)),await Promise.resolve().then(n.bind(n,994)),await Promise.resolve().then(n.bind(n,157)),await Promise.resolve().then(n.bind(n,178)),await Promise.resolve().then(n.bind(n,236)),await Promise.resolve().then(n.bind(n,702)),await Promise.resolve().then(n.bind(n,527)),await Promise.resolve().then(n.bind(n,186)),await Promise.resolve().then(n.bind(n,337));try{const t=Date.now();if(window.mocha)await new Promise(((t,e)=>{window.mocha.run((n=>{n>0?e(new Error(`${n} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(n.bind(n,995));if(!await t())throw new Error("Tests failed")}const e=Date.now()-t;return console.info(`✅ all tests passed in ${e}ms`),Vn.map((t=>{document.getElementById("section_"+t.view).click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();e(o),t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return(0,t.ev)((function(){clearTimeout(a),a=null})),(0,t.nc)((function(){console.info("1️⃣ app init should only run once"),f(!1,g),c.subscribe(p((t=>r=t)))})),++i,t.dy.dom(Yn.allStrings2804559[1],(()=>f(!0,g)),l,(()=>{c.next(r+1)}),(()=>++r),r,(0,t.Ld)(c),c.value,(()=>d()),s,(0,e.v)({name:"app",renderCount:i}),(0,t.Ld)(t.xQ.globalSubCount$),h(),(()=>o=!o),o&&Bn(c),$n())},Un=(0,t._q)((()=>t.dy.dom(Yn.allStrings2804559[2],(0,F.tw)().innerHTML=t.dy.dom(Yn.allStrings2804559[3])))),Yn={allStrings2804559:[[{nn:"text",tc:"\x3c!--app.js--\x3e"},{nn:"h1",at:[["id","h1-app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - "},{nn:"text",v:0}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"show/hide "},{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n\n\n      "},{nn:"text",v:4},{nn:"text",tc:"\n\n      "},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n    "}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"run tests "},{nn:"text",v:1}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:9},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:10},{nn:"text",tc:")"}]}]}]},{nn:"a",at:[["name","top"],["id","top"]]},{nn:"text",v:11},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"button",at:[["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"toggle sections"}]},{nn:"text",v:13},{nn:"text",tc:"\n\n      "},{nn:"text",v:14}]}],[{nn:"hr"},{nn:"text",v:0},{nn:"hr"}],[{nn:"text",tc:"\n    Hello animated world\n  "}]]};function Wn(){u.autoTest=u.autoTest=!u.autoTest,d()}const Xn={allStrings62947:[[{nn:"text",tc:"\n  auto testing "},{nn:"input",at:[["type","checkbox"],[{tagJsVar:0}],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"run tests"}]}]]},zn=()=>t._q.use=(n=(0,t.SB)("isolated app state"),o=0,r=0,s=(0,t.SB)((()=>new t.xQ(r))),a=!1,c=(0,t.$q)((t=>[{renderCount:o,appCounter:r,toggleValue:a}]=t({renderCount:o,appCounter:r,toggleValue:a}))),l=(()=>a=!a),d=(0,t._)())=>{const p=P().route.split("/").map((t=>t.trim())).filter((t=>t.length));let g;return p.length&&(g=p),(0,t.nc)((()=>{console.info("1️⃣ app init should only run once"),s.subscribe(d((t=>{r=t})))})),++o,t.dy.dom(Fn.allStrings1054570[0],p,Nn(),(()=>{s.next(r+1)}),(()=>{++r}),r,(0,t.Ld)(s),s.value,l,a,(f=g,t._q.use=(e=(0,t.nc)((()=>{u.autoTest&&i(!1,f,x)})))=>t.dy.dom(Xn.allStrings62947[0],u.autoTest&&"checked",Wn,(()=>i(!0,f,x)))),(0,e.v)({name:"app",renderCount:o}),(0,t.Ld)(t.xQ.globalSubCount$),h(g),Bn(s,g),(0,e.v)({renderCount:o,name:"isolatedApp"}));var f,x};g.subscribe((({type:t,checkTesting:e})=>{x(t,e)}));const Fn={allStrings1054570:[[{nn:"text",tc:"\x3c!--isolatedApp.js--\x3e"},{nn:"h1",at:[["id","app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - isolated"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"(no HMR)"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"route: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"div",ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"text",tc:" "},{nn:"text",v:9}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:10},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:11},{nn:"text",tc:")"}]}]}]},{nn:"text",v:12},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]}]]};function Qn(){const e=document.getElementsByTagName("app")[0],n=window.location.pathname.split("/").filter((t=>t)),o=n[0]?.toLowerCase();if(o&&["isolated.html","index-static.html"].includes(o)){const n=Date.now();(0,t.bX)(zn,e,{test:1});const o=Date.now()-n;return void console.info(`⏱️ isolated render in ${o}ms`)}const r=Date.now();(0,t.bX)(Mn,e,{test:1});const s=Date.now()-r;console.info(`⏱️ rendered in ${s}ms`)}})();var r=o.gV,s=o.jG,a=o.fm,c=o.KH,i=o.bX,l=o.mK;export{r as App,s as IsolatedApp,a as hmr,c as run,i as tagElement,l as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,