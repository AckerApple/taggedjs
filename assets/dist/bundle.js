var t={902:(t,n,e)=>{e.d(n,{kQ:()=>Yt,c_:()=>zt});var r=e(347);const o=(0,r._q)((({name:t,array:n,included:e,columnNames:o,allColumnNames:c})=>{let l,i=!1,u=!1;const d=(0,r.SB)([]);(0,r.$q)((t=>[{mouseOverEditShow:i,edit:u,editFormula:l}]=t({mouseOverEditShow:i,edit:u,editFormula:l})));return r.dy.dom(s.allStrings431691[0],(function(){const n=o.indexOf(t);n>=0?o.splice(n,1):o.push(t)}),e&&"checked",t,(()=>i=!0),(()=>i=!1),u||i?"visible":"hidden",(()=>u=!u),e&&o.length!==c.length?r.dy.dom(s.allStrings431691[1],(()=>{o.length=0,o.push(...c)})):r.dy.dom(s.allStrings431691[2],(()=>{o.length=0,o.push(t)})),u&&r.dy.dom(s.allStrings431691[3],l&&r.dy.dom(s.allStrings431691[4],(t=>{return e=l,r=t.target.value,e.stringFormula=r,void(e.value=a(r,{array:n}));var e,r}),l.value),d.map((t=>r.dy.dom(s.allStrings431691[5],t.title,(()=>l=t),t.value).key(t))),(()=>{const e=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;d.push({title:"sum",stringFormula:e,value:a(e,{array:n})})})))}));function a(t,n={}){return function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{isNaN,Math,Number,Date,...n})}const s={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},c=(0,r._q)((({array:t,showAll:n,showKids:e,toggleColumnDialog:o,columnNames:a,formatChange:s,allowMaximize:c,everySimpleValue:i})=>r.dy.dom(l.allStrings122184[0],t.length&&r.dy.dom(l.allStrings122184[1],a.map((t=>r.dy.dom(l.allStrings122184[2],o&&"pointer",o,t).key(t)))),t.map((t=>r.dy.dom(l.allStrings122184[3],a.map((o=>r.dy.dom(l.allStrings122184[4],C({value:t[o],showLevels:0,showAll:n,showKids:n||e,isRootDump:!1,formatChange:s,allowMaximize:c})).key(t[o])))).key(t)))))),l={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},i=(0,r._q)((({array:t,showLevels:n,showAll:e,showKids:o,columnNames:a,formatChange:s,toggleColumnDialog:c,allowMaximize:l,everySimpleValue:i})=>r.dy.dom(u.allStrings152127[0],t.map(((t,o)=>{const d=function(t,n){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,n){if(!n)return t;const e={};return n.forEach((n=>{(t.hasOwnProperty(n)||n in t)&&(e[n]=t[n])})),e}(t,n)}(t,a);return r.dy.dom(u.allStrings152127[1],C({value:d,showLevels:n,showAll:e,showKids:!0,isRootDump:!1,formatChange:s,onHeaderClick:c,allowMaximize:l,everySimpleValue:i})).key(o)})))));const u={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},d=(0,r._q)((({showLevels:t,showAll:n,showKids:e,array:a,arrayView:s,formatChange:l,allowMaximize:u,everySimpleValue:d})=>{const h=(0,r.YP)([a,a.length],(()=>a.length?function(t){return t.reduce(((t,n)=>{if(n&&"object"==typeof n){if(Array.isArray(n))return t;Object.keys(n).forEach((n=>{t.includes(n)||t.push(n)}))}return t}),[])}(a):[]));let g;const f=(0,r.YP)([h],(()=>[...h]));let x=!1;const b=(0,r.SB)((()=>"columnDialog"+performance.now()));(0,r.$q)((t=>[{columnNames:g,showColumnDialog:x}]=t({columnNames:g,showColumnDialog:x}))),r.YP.noInit([f.length],(()=>{g||(g=f)}));const v=()=>{x=!x;const t=document.getElementById(b);x?t.showModal():t.close()},y="table"===s?c({showAll:n,showKids:e,array:a,toggleColumnDialog:v,columnNames:g||h,formatChange:l,everySimpleValue:d}):i({array:a,showLevels:t,showAll:n,showKids:e,formatChange:l,columnNames:g||h,toggleColumnDialog:v,allowMaximize:u,everySimpleValue:d});return r.dy.dom(p.allStrings463171[0],y,b,h.map((t=>{const n=void 0===g||g.includes(t);return r.dy.dom(p.allStrings463171[1],o({name:t,array:a,included:n,columnNames:g||f,allColumnNames:h})).key(t)})),v)}));const p={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},h=(0,r._q)((({key:t,value:n,show:e,showAll:o,showKids:a,showLevels:s,formatChange:c,allowMaximize:l,everySimpleValue:i})=>{let u,p,h=!1;(0,r.$q)((t=>[{showLower:u,arrayView:p,maximize:h}]=t({showLower:u,arrayView:p,maximize:h}))),(0,r.RW)((t=>[a]=t(a))),(0,r.RW)((t=>[o]=t(o))),r.YP.noInit([e],(([t])=>u=t)),r.YP.noInit([o],(([t])=>u=t));const f=(0,r.SB)((()=>"maximize-dump-"+performance.now())),x=()=>{h=!h,h&&document.getElementById(f).showModal()},b=o||u||a||null==u&&s>0,v=e=>r.dy.dom(g.allStrings479370[0],(()=>{if(void 0===u)return o=a=u=!b;o=a=u=!u}),t,"table"===p?"bold":"",(()=>p="table"===p?void 0:"table"),"table"===p?"flex":"table",n.length,e&&r.dy.dom(g.allStrings479370[1],x)),y={showLevels:s,showAll:o,showKids:a,formatChange:c,array:n,arrayView:p,allowMaximize:l,everySimpleValue:i};return r.dy.dom(g.allStrings479370[3],v(l),b&&r.dy.dom(g.allStrings479370[2],d(y)),f,h&&v(!1),h&&r.dy.dom(g.allStrings479370[4],d({...y,allowMaximize:!1})),(()=>document.getElementById(f).close()))})),g={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function f(t){var n=document.createElement("textarea");n.value=t,document.body.appendChild(n),n.select(),n.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(n)}function x({key:t,value:n,onHeaderClick:e,everySimpleValue:o}){const a=n.search&&("https://"===n.slice(0,8)||"http://"===n.slice(0,7));let s;return s=o?b({value:n,everySimpleValue:o}):a?v(n):b({value:n}),r.dy.dom(y.allStrings246978[0],t&&r.dy.dom(y.allStrings246978[1],e&&"pointer",e,t),s)}const b=(0,r._q)((({value:t,everySimpleValue:n})=>{const e=[void 0,null,"null"].includes(t),o=t,a=!isNaN(o)&&o>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(o):"";let s=0;(0,r.$q)((t=>[s]=t(s)));let c=t;return n&&(c=n(t)),c=(null===c?"null":!1===c&&"false")||void 0===c&&"undefined"||c,r.dy.dom(y.allStrings246978[2],(()=>{s=Date.now()}),(n=>{if(Date.now()-s>300)return n.preventDefault(),n.stopPropagation(),!0;f(t)}),e?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||e&&"white"||"",a,c)}));const v=t=>r.dy.dom(y.allStrings246978[3],(()=>f(t)),t,t),y={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},m=(0,r._q)((({key:t,showKids:n,show:e,showLevels:o,value:a,showAll:s,onHeaderClick:c,formatChange:l,allowMaximize:i,everySimpleValue:u})=>{let d,p=!1;const h=(0,r.SB)((()=>"maximize-dump-"+performance.now()));(0,r.$q)((t=>[{showLower:d,maximize:p}]=t({showLower:d,maximize:p}))),(0,r.RW)((t=>[n]=t(n))),r.YP.noInit([e],(([t])=>d=t)),r.YP.noInit([s],(([t])=>d=t));const g=!t||n||d||void 0===d&&o>0,f=()=>{p=!p,p&&document.getElementById(h).showModal()},x=e=>r.dy.dom(w.allStrings470244[0],d?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===d)return s=n=d=!(s||n||d);n=d=!d}),t,Object.keys(a).length,e&&r.dy.dom(w.allStrings470244[1],f)),b=t=>r.dy.dom(w.allStrings470244[2],Object.entries(a).map((([e,a])=>r.dy.dom(w.allStrings470244[3],a&&"object"==typeof a?"flex-grow:1;":"flex: 1 1 10em;",C({value:a,key:e,show:d,showAll:s,showLevels:o-1,showKids:s||n,isRootDump:!1,formatChange:l,onHeaderClick:c,allowMaximize:t,everySimpleValue:u})).key(e))));return r.dy.dom(w.allStrings470244[4],t&&x(i),g&&b(i),h,p&&x(!1),p&&b(!1),(()=>document.getElementById(h).close()))})),w={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},_=(0,r._q)((({value:t,format:n,showAll:e,formatChange:o,showAllChange:a})=>r.dy.dom(S.allStrings440833[0],!n||"flex"===n&&r.dy.dom(S.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e?"background-color:#33cd5f;":"background-color:#444444"),(()=>a(e=!e))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n&&"flex"!==n?"background-color:#444444":"background-color:#33cd5f;"),(()=>o(n="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===n?"background-color:#33cd5f;":"background-color:#444444"),(()=>o(n="json")),(()=>function(t){const n=JSON.stringify(t,null,2);f(n)}(t)))));const S={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},C=(0,r._q)((({key:t,value:n,showKids:e=!1,showLevels:o=-1,showAll:a=!1,format:s="flex",formatChange:c=(t=>s=t),isRootDump:l=!0,onHeaderClick:i,allowMaximize:u,everySimpleValue:d})=>{l&&void 0===u&&(u=!0);const p=null===n?"null":typeof n;let h,g=!1;return(0,r.RW)((t=>[s]=t(s))),(0,r.RW)((t=>[a]=t(a))),(0,r.RW)((t=>[o]=t(o))),(0,r.$q)((t=>[{show:g,arrayView:h}]=t({show:g,arrayView:h}))),(0,r.nc)((()=>{(o=o>=0&&o||(-1===o&&!t&&n&&n instanceof Object?2:0))>0&&(g=!0)})),[null,void 0].includes(n)?x({key:t,value:p,onHeaderClick:i,everySimpleValue:d}):["boolean","number","string"].includes(p)?x({key:t,value:n,onHeaderClick:i,everySimpleValue:d}):V({value:n,showKids:e,key:t,onHeaderClick:i,everySimpleValue:d,format:s,isRootDump:l,showAll:a,showAllChange:t=>a=t,formatChange:c,show:g,showLevels:o,allowMaximize:u})}));let k=0;const V=({value:t,showKids:n,key:e,onHeaderClick:o,everySimpleValue:a,format:s,isRootDump:c,showAll:l,showAllChange:i,formatChange:u,show:d,showLevels:p,allowMaximize:g})=>{if(null===t)return n?x({key:e,value:"null",onHeaderClick:o,everySimpleValue:a}):r.dy.dom(T.allStrings306188[0]);const f=Array.isArray(t);return r.dy.dom(T.allStrings306188[2],"taggedjs-dump-"+ ++k,c&&_({value:t,format:s,showAll:l,showAllChange:i,formatChange:u}),"json"===s&&r.dy.dom(T.allStrings306188[1],JSON.stringify(t,null,2))||(f?h({key:e,value:t,show:d,showAll:l,showKids:n,showLevels:p,formatChange:u,allowMaximize:g,everySimpleValue:a}):m({key:e,show:d,showKids:n,showLevels:p,value:t,showAll:l,formatChange:u,onHeaderClick:o,allowMaximize:g,everySimpleValue:a})))},T={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]};var J=e(232);const B=(0,r._q)((()=>{let t="",n=0,e="",o=!1;(0,r.$q)((r=>[{userJsonString:t,renderCount:n,userJson:e,badEval:o}]=r({userJsonString:t,renderCount:n,userJson:e,badEval:o}))),++n;const a=(0,r.SB)((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return r.dy.dom(j.allStrings183632[0],(n=>{t=n.target.value;try{e=function(t,n){if(!t)return t;return n=new Proxy(n,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(n)}(t,{}),t=JSON.stringify(e,null,2)}catch(n){o=!0;try{JSON.parse(t)}catch(t){e=Object.getOwnPropertyNames(t).reduce(((n,e)=>(n[e]=t[e])&&n||n),{})}}}),""===e?"":t,""===e?"":r.dy.dom(j.allStrings183632[1],C({value:e})),C(a),(0,J.v)({renderCount:n,name:"dumpContent"}))}));const j={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};var I=function(t,n){return I=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},I(t,n)};function L(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}I(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function E(t,n,e,r){return new(e||(e=Promise))((function(o,a){function s(t){try{l(r.next(t))}catch(t){a(t)}}function c(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,c)}l((r=r.apply(t,n||[])).next())}))}function P(t,n){var e,r,o,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=c(0),s.throw=c(1),s.return=c(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function c(c){return function(l){return function(c){if(e)throw new TypeError("Generator is already executing.");for(;s&&(s=0,c[0]&&(a=0)),a;)try{if(e=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){a.label=c[1];break}if(6===c[0]&&a.label<o[1]){a.label=o[1],o=c;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(c);break}o[2]&&a.ops.pop(),a.trys.pop();continue}c=n.call(t,a)}catch(t){c=[6,t],r=0}finally{e=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}}Object.create;function O(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function A(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,a=e.call(t),s=[];try{for(;(void 0===n||n-- >0)&&!(r=a.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return s}function D(t,n,e){if(e||2===arguments.length)for(var r,o=0,a=n.length;o<a;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function N(t){return this instanceof N?(this.v=t,this):new N(t)}function $(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),a=[];return r=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",(function(t){return function(n){return Promise.resolve(n).then(t,i)}})),r[Symbol.asyncIterator]=function(){return this},r;function s(t,n){o[t]&&(r[t]=function(n){return new Promise((function(e,r){a.push([t,n,e,r])>1||c(t,n)}))},n&&(r[t]=n(r[t])))}function c(t,n){try{(e=o[t](n)).value instanceof N?Promise.resolve(e.value.v).then(l,i):u(a[0][2],e)}catch(t){u(a[0][3],t)}var e}function l(t){c("next",t)}function i(t){c("throw",t)}function u(t,n){t(n),a.shift(),a.length&&c(a[0][0],a[0][1])}}function q(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=O(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){(function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)})(r,o,(n=t[e](n)).done,n.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function H(t){return"function"==typeof t}function M(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}var R=M((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function W(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var z=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,r,o;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=O(a),c=s.next();!c.done;c=s.next()){c.value.remove(this)}}catch(n){t={error:n}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}else a.remove(this);var l=this.initialTeardown;if(H(l))try{l()}catch(t){o=t instanceof R?t.errors:[t]}var i=this._finalizers;if(i){this._finalizers=null;try{for(var u=O(i),d=u.next();!d.done;d=u.next()){var p=d.value;try{U(p)}catch(t){o=null!=o?o:[],t instanceof R?o=D(D([],A(o)),A(t.errors)):o.push(t)}}}catch(t){e={error:t}}finally{try{d&&!d.done&&(r=u.return)&&r.call(u)}finally{if(e)throw e.error}}}if(o)throw new R(o)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)U(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&W(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&W(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}(),X=z.EMPTY;function Y(t){return t instanceof z||t&&"closed"in t&&H(t.remove)&&H(t.add)&&H(t.unsubscribe)}function U(t){H(t)?t():t.unsubscribe()}var F={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Q={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=Q.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,D([t,n],A(e))):setTimeout.apply(void 0,D([t,n],A(e)))},clearTimeout:function(t){var n=Q.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function G(t){Q.setTimeout((function(){var n=F.onUnhandledError;if(!n)throw t;n(t)}))}function K(){}var Z=tt("C",void 0,void 0);function tt(t,n,e){return{kind:t,value:n,error:e}}var nt=null;function et(t){if(F.useDeprecatedSynchronousErrorHandling){var n=!nt;if(n&&(nt={errorThrown:!1,error:null}),t(),n){var e=nt,r=e.errorThrown,o=e.error;if(nt=null,r)throw o}}else t()}var rt=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,Y(n)&&n.add(e)):e.destination=ut,e}return L(n,t),n.create=function(t,n,e){return new ct(t,n,e)},n.prototype.next=function(t){this.isStopped?it(function(t){return tt("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?it(tt("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?it(Z,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(z),ot=Function.prototype.bind;function at(t,n){return ot.call(t,n)}var st=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){lt(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){lt(t)}else lt(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){lt(t)}},t}(),ct=function(t){function n(n,e,r){var o,a,s=t.call(this)||this;H(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:s&&F.useDeprecatedNextContext?((a=Object.create(n)).unsubscribe=function(){return s.unsubscribe()},o={next:n.next&&at(n.next,a),error:n.error&&at(n.error,a),complete:n.complete&&at(n.complete,a)}):o=n;return s.destination=new st(o),s}return L(n,t),n}(rt);function lt(t){var n;F.useDeprecatedSynchronousErrorHandling?(n=t,F.useDeprecatedSynchronousErrorHandling&&nt&&(nt.errorThrown=!0,nt.error=n)):G(t)}function it(t,n){var e=F.onStoppedNotification;e&&Q.setTimeout((function(){return e(t,n)}))}var ut={closed:!0,next:K,error:function(t){throw t},complete:K},dt="function"==typeof Symbol&&Symbol.observable||"@@observable";function pt(t){return t}function ht(t){return 0===t.length?pt:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var gt=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,a=(r=t)&&r instanceof rt||function(t){return t&&H(t.next)&&H(t.error)&&H(t.complete)}(r)&&Y(r)?t:new ct(t,n,e);return et((function(){var t=o,n=t.operator,e=t.source;a.add(n?n.call(a,e):e?o._subscribe(a):o._trySubscribe(a))})),a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=ft(n))((function(n,r){var o=new ct({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[dt]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return ht(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=ft(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function ft(t){var n;return null!==(n=null!=t?t:F.Promise)&&void 0!==n?n:Promise}var xt=M((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),bt=function(t){function n(){var n=t.call(this)||this;return n.closed=!1,n.currentObservers=null,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return L(n,t),n.prototype.lift=function(t){var n=new vt(this,this);return n.operator=t,n},n.prototype._throwIfClosed=function(){if(this.closed)throw new xt},n.prototype.next=function(t){var n=this;et((function(){var e,r;if(n._throwIfClosed(),!n.isStopped){n.currentObservers||(n.currentObservers=Array.from(n.observers));try{for(var o=O(n.currentObservers),a=o.next();!a.done;a=o.next()){a.value.next(t)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}}))},n.prototype.error=function(t){var n=this;et((function(){if(n._throwIfClosed(),!n.isStopped){n.hasError=n.isStopped=!0,n.thrownError=t;for(var e=n.observers;e.length;)e.shift().error(t)}}))},n.prototype.complete=function(){var t=this;et((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var n=t.observers;n.length;)n.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var n=this,e=this,r=e.hasError,o=e.isStopped,a=e.observers;return r||o?X:(this.currentObservers=null,a.push(t),new z((function(){n.currentObservers=null,W(a,t)})))},n.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new gt;return t.source=this,t},n.create=function(t,n){return new vt(t,n)},n}(gt),vt=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return L(n,t),n.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},n.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},n.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},n.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:X},n}(bt);function yt(t){return function(n){if(function(t){return H(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function mt(t,n,e,r,o){return new wt(t,n,e,r,o)}var wt=function(t){function n(n,e,r,o,a,s){var c=t.call(this,n)||this;return c.onFinalize=a,c.shouldUnsubscribe=s,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return L(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(rt);var _t=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function St(t){return H(null==t?void 0:t.then)}function Ct(t){return H(t[dt])}function kt(t){return Symbol.asyncIterator&&H(null==t?void 0:t[Symbol.asyncIterator])}function Vt(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Tt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Jt(t){return H(null==t?void 0:t[Tt])}function Bt(t){return $(this,arguments,(function(){var n,e,r;return P(this,(function(o){switch(o.label){case 0:n=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,N(n.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,N(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,N(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function jt(t){return H(null==t?void 0:t.getReader)}function It(t){if(t instanceof gt)return t;if(null!=t){if(Ct(t))return o=t,new gt((function(t){var n=o[dt]();if(H(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(_t(t))return r=t,new gt((function(t){for(var n=0;n<r.length&&!t.closed;n++)t.next(r[n]);t.complete()}));if(St(t))return e=t,new gt((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,G)}));if(kt(t))return Lt(t);if(Jt(t))return n=t,new gt((function(t){var e,r;try{for(var o=O(n),a=o.next();!a.done;a=o.next()){var s=a.value;if(t.next(s),t.closed)return}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}t.complete()}));if(jt(t))return Lt(Bt(t))}var n,e,r,o;throw Vt(t)}function Lt(t){return new gt((function(n){(function(t,n){var e,r,o,a;return E(this,void 0,void 0,(function(){var s,c;return P(this,(function(l){switch(l.label){case 0:l.trys.push([0,5,6,11]),e=q(t),l.label=1;case 1:return[4,e.next()];case 2:if((r=l.sent()).done)return[3,4];if(s=r.value,n.next(s),n.closed)return[2];l.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=l.sent(),o={error:c},[3,11];case 6:return l.trys.push([6,,9,10]),r&&!r.done&&(a=e.return)?[4,a.call(e)]:[3,8];case 7:l.sent(),l.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))}))})(t,n).catch((function(t){return n.error(t)}))}))}function Et(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var a=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(a),!o)return a}function Pt(t,n,e){return void 0===e&&(e=1/0),H(n)?Pt((function(e,r){return function(t,n){return yt((function(e,r){var o=0;e.subscribe(mt(r,(function(e){r.next(t.call(n,e,o++))})))}))}((function(t,o){return n(e,t,r,o)}))(It(t(e,r)))}),e):("number"==typeof n&&(e=n),yt((function(n,r){return function(t,n,e,r,o,a,s,c){var l=[],i=0,u=0,d=!1,p=function(){!d||l.length||i||n.complete()},h=function(t){return i<r?g(t):l.push(t)},g=function(t){a&&n.next(t),i++;var c=!1;It(e(t,u++)).subscribe(mt(n,(function(t){null==o||o(t),a?h(t):n.next(t)}),(function(){c=!0}),void 0,(function(){if(c)try{i--;for(var t=function(){var t=l.shift();s?Et(n,s,(function(){return g(t)})):g(t)};l.length&&i<r;)t();p()}catch(t){n.error(t)}})))};return t.subscribe(mt(n,h,(function(){d=!0,p()}))),function(){null==c||c()}}(n,r,t,e)})))}function Ot(){return void 0===(t=1)&&(t=1/0),Pt(pt,t);var t}function At(t){return t[t.length-1]}function Dt(t){return(n=At(t))&&H(n.schedule)?t.pop():void 0;var n}function Nt(t,n){return void 0===n&&(n=0),yt((function(e,r){e.subscribe(mt(r,(function(e){return Et(r,t,(function(){return r.next(e)}),n)}),(function(){return Et(r,t,(function(){return r.complete()}),n)}),(function(e){return Et(r,t,(function(){return r.error(e)}),n)})))}))}function $t(t,n){return void 0===n&&(n=0),yt((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function qt(t,n){if(!t)throw new Error("Iterable cannot be null");return new gt((function(e){Et(e,n,(function(){var r=t[Symbol.asyncIterator]();Et(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function Ht(t,n){if(null!=t){if(Ct(t))return function(t,n){return It(t).pipe($t(n),Nt(n))}(t,n);if(_t(t))return function(t,n){return new gt((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(St(t))return function(t,n){return It(t).pipe($t(n),Nt(n))}(t,n);if(kt(t))return qt(t,n);if(Jt(t))return function(t,n){return new gt((function(e){var r;return Et(e,n,(function(){r=t[Tt](),Et(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return H(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(jt(t))return function(t,n){return qt(Bt(t),n)}(t,n)}throw Vt(t)}function Mt(){for(var t,n,e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return Ot()((t=e,(n=Dt(e))?Ht(t,n):It(t)))}function Rt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Dt(t);return yt((function(n,r){(e?Mt(t,n,e):Mt(t,n)).subscribe(r)}))}var Wt=e(149);const zt=20,Xt=(0,r._q)((t=>{let n=1,e="white";return(0,r.$q)((t=>[{borderColor:e,width:n}]=t({borderColor:e,width:n}))),r.dy.dom(tn.allStrings1340763[2],n,e,t,n,(t=>n=Number(t.target.value)),n,(t=>e=t.target.value),""===e?"selected":"","black"===e?"selected":"","blue"===e?"selected":"","white"===e?"selected":"")})),Yt=(0,r._q)((()=>{const t=(0,r.SB)((()=>new r.xQ)),n=(0,r.SB)((()=>new r.v0(3))),e=(0,r.SB)((()=>new r.v0(["a","b","c"]))),o=(0,r.SB)((()=>new r.v0(0))),a=(0,r.SB)((()=>new r.v0(1)));let s=0,c=!0,l=!1,i=0,u=zt,d=!1;const p=(0,r.SB)((()=>new r.xQ({added:0,removed:0})));(0,r.$q)((t=>[{renderCount:s,orangeToggle:c,boldToggle:l,counter:i,showHideFx:d,staggerBy:u}]=t({renderCount:s,orangeToggle:c,boldToggle:l,counter:i,showHideFx:d,staggerBy:u}))),++s;const h=(0,r.Ld)(o,(()=>r.dy.dom(tn.allStrings1340763[3],(()=>{++i}),i,(()=>o.next(o.value+1)))));return r.dy.dom(tn.allStrings1340763[4],i,h,(()=>++i),i,(()=>d=!d),d&&r.dy.dom(tn.allStrings1340763[5],(0,Wt.fx)({duration:"10ms"})),d&&r.dy.dom(tn.allStrings1340763[6],(0,Wt.fx)({duration:"10ms",stagger:u})),d&&r.dy.dom(tn.allStrings1340763[7],(0,Wt.fx)({duration:"10ms",stagger:2*u})),d&&(((t=10)=>{const n=(0,r.iB)();return r.dy.dom(tn.allStrings1340763[1],(0,Wt.fx)({stagger:t,duration:".1s"}),n).acceptInnerHTML(n)})(u).innerHTML=Kt()),(0,r.Ld)(p,(t=>t.added)),(0,r.Ld)(p,(t=>t.removed)),(t=>u=Number(t.target.value)),Xt(r.dy.dom(tn.allStrings1340763[8])),B(),(0,J.v)({renderCount:s,name:"ContentDebug"}),Ut(),Ft({sub0:t,sub1:n}),Ut(),'<script>alert("i should never run but be seen on page")<\/script>',r.dy.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),r.dy.dom(tn.allStrings1340763[9]),"3px solid orange",c?"3px solid orange":"3px solid green",(()=>c=!c),c,l?{style:"font-weight:bold;"}:{},(()=>l=!l),l?"true":"false",54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",(0,r.Ld)(t),(0,r.Ld)(e,(t=>t.map((t=>r.dy.dom(tn.allStrings1340763[10],t).key(t))))),(0,r.Ld)(e,(t=>t.map((t=>r.dy.dom(tn.allStrings1340763[11],t,t).key(t))))),(0,r.Te)(t,-1),(0,r.Ld)(o),(0,r.Ld)(o,(()=>55)),Zt(),(0,r.Ld)((0,r.aj)([o,a]).pipe((t=>t[1]))),(0,r.Ld)((0,r.aj)([o,a]).pipe((0,r.Ut)((t=>Promise.resolve(r.dy.dom(tn.allStrings1340763[12])))))),(0,J.v)({renderCount:s,name:"ContentDebug"}))}));function Ut(){return r.dy.dom(tn.allStrings1340763[13],"test0","test1","test3")}const Ft=(0,r._q)((({sub0:t,sub1:n})=>{let e=!1;const o=(0,r.SB)((()=>new bt));return(0,r.$q)((t=>[e]=t(e))),r.dy.dom(tn.allStrings1340763[14],(0,r.Ld)(t),(()=>t.next((t.value||0)+1)),(()=>o.next(t.value=(t.value||0)+1)),(()=>e=!e),e?"show":"hide",e,e&&(0,r.Ld)(t),e&&(0,r.Ld)(t,Qt),e&&(0,r.Ld)(t,Gt),(0,r.Ld)(n,Gt),(0,r.Ld)(o,Gt),(0,r.Ld)(o.pipe(Rt(33)),Gt),(0,r.Ld)(o.pipe(Rt(void 0)),(t=>Gt(t))),(0,r.Ld)(o,(t=>Gt(t))))})),Qt=t=>r.dy.dom(tn.allStrings1340763[15],t),Gt=(0,r._q)((t=>r.dy.dom(tn.allStrings1340763[16],t))),Kt=(0,r._q)((()=>r.dy.dom(tn.allStrings1340763[17]))),Zt=(0,r._q)((()=>{let t=!0,n=0,e=0;return(0,r.$q)((r=>[{hideShow:t,destroyCount:n,clickCounter:e}]=r({hideShow:t,destroyCount:n,clickCounter:e}))),r.dy.dom(tn.allStrings1340763[18],t&&r.dy.dom(tn.allStrings1340763[19],(0,r.ho)((()=>r._q.getElement().innerHTML=Date.now().toString()),{onDestroy:()=>++n}),(()=>++e),e),(()=>t=!t),n)})),tn={allStrings1340763:[[{nn:"div",at:[[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"div",at:[["style",["border-width:",":tagvar0:","px;border-color:",":tagvar1:",";border-style:solid;"]],["id","dynamic-border-element"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"text",tc:"borderWidth:"},{nn:"input",at:[["id","dynamic-border-width"],["type","range"],["min","0"],["max","10"],["step","1"],["value",{tagJsVar:3},null],["change",{tagJsVar:4},null]]},{nn:"text",tc:" - "},{nn:"text",v:5},{nn:"text",tc:"px"}]},{nn:"div",ch:[{nn:"text",tc:"borderColor:"},{nn:"select",at:[["id","dynamic-border-color"],["change",{tagJsVar:6},null]],ch:[{nn:"option",at:[[{tagJsVar:7}],["value",""]]},{nn:"option",at:[[{tagJsVar:8}],["value","black"]],ch:[{nn:"text",tc:"black"}]},{nn:"option",at:[[{tagJsVar:9}],["value","blue"]],ch:[{nn:"text",tc:"blue"}]},{nn:"option",at:[[{tagJsVar:10}],["value","white"]],ch:[{nn:"text",tc:"white"}]}]}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:16}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:17},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:18}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:20},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:22},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:23},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:24}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:25}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:26},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:27}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:28},{nn:"text",tc:" "},{nn:"text",v:29},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:34},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:35},{nn:"text",tc:"22"},{nn:"text",v:36},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:37},{nn:"text",tc:"__tagVar0"},{nn:"text",v:38},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:39},{nn:"text",tc:'"'}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:40}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:41}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:42}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:43}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:44}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:45}]}]},{nn:"text",v:46},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:47}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:48}]}]}]}]}]},{nn:"text",v:49},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"text",tc:"inner html tag"}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]}},842:(t,n,e)=>{e.r(n),e.d(n,{fxTime:()=>o});var r=e(78);const o=160;function a(t){return new Promise((n=>setTimeout(n,t)))}(0,r.yY)("⠇ array testing",(()=>{(0,r.it)("signal array count and items",(()=>{const t=(0,r.L7)("signal-array-count"),n=Number(t.innerText);for(let t=0;t<n;t++)(0,r.l_)((0,r.o5)(`#signal-array-item-${t}`)).toBe(1);(0,r.l_)((0,r.o5)(`#signal-array-item-${n}`)).toBe(0)})),(0,r.it)("push signal array button",(()=>{const t=(0,r.L7)("signal-array-count"),n=Number(t.innerText),e=(0,r.L7)("push-signal-array-btn");e.click();const o=Number(t.innerText);(0,r.l_)(o).toBe(n+1),(0,r.l_)((0,r.o5)(`#signal-array-item-${n}`)).toBe(1),e.click(),(0,r.l_)(Number(t.innerText)).toBe(n+2),(0,r.l_)((0,r.o5)(`#signal-array-item-${n+1}`)).toBe(1)})),(0,r.it)("arrays counter display matches item counter displays",(()=>{const t=(0,r.L7)("arrays-counter-display"),n=Number(t.innerText),e=(0,r.L7)("signal-array-count"),o=Number(e.innerText);for(let t=0;t<o;t++){const e=(0,r.L7)(`signal-array-item-counter-display-${t}`);(0,r.l_)(e).toBeDefined(),(0,r.l_)(Number(e.innerText)).toBe(n)}document.querySelector("#signal-array-increase-counter").click();const a=Number(t.innerText);(0,r.l_)(a).toBe(n+1);for(let t=0;t<o;t++){const n=(0,r.L7)(`signal-array-item-counter-display-${t}`);(0,r.l_)(Number(n.innerText)).toBe(a)}})),(0,r.it)("signal array item delete button with animation",(async()=>{const t=(0,r.L7)("signal-array-count");0===Number(t.innerText)&&(0,r.L7)("push-signal-array-btn").click();const n=Number(t.innerText);(0,r.l_)((0,r.o5)("#signal-array-item-0")).toBe(1);(0,r.L7)("signal-array-item-delete-btn-0").click(),await a(o),(0,r.l_)(Number(t.innerText)).toBe(n-1),(0,r.l_)((0,r.o5)("#signal-array-item-"+(n-1))).toBe(0);const e=Number(t.innerText);for(let t=0;t<e;t++){const n=(0,r.o5)(`#signal-array-item-${t}`);(0,r.l_)(n).toBe(1,`Expected only one #signal-array-item-${t} but got ${n}`)}})),(0,r.it)("array basics",(()=>{(0,r.l_)((0,r.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,r.l_)(t.length).toBe(0);const n=(0,r.o5)("#score-data-0-1-inside-button");(0,r.l_)(n).toBe(0),(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const e=(0,r.L7)("score-data-0-1-inside-button"),o=(0,r.L7)("score-data-0-1-inside-display");let a=o.innerText;const s=(0,r.L7)("score-data-0-1-outside-button"),c=(0,r.L7)("score-data-0-1-outside-display"),l=c.innerText;(0,r.l_)(a).toBe(l),e.click(),(0,r.l_)(o.innerText).toBe(c.innerText),(0,r.l_)(o).toBe((0,r.L7)("score-data-0-1-inside-display")),(0,r.l_)(a).toBe((Number(o.innerText)-1).toString()),(0,r.l_)(a).toBe((Number(c.innerText)-1).toString()),s.click(),(0,r.l_)(o.innerText).toBe(c.innerText),(0,r.l_)(a).toBe((Number(o.innerText)-2).toString()),(0,r.l_)(a).toBe((Number(c.innerText)-2).toString())})),(0,r.it)("🗑️ deletes",(async()=>{(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(0),(0,r.l_)((0,r.o5)("#player-edit-btn-0")).toBe(1);const t=(0,r.L7)("player-edit-btn-0")._click();(0,r.l_)(t).toBe("no-data-ever"),(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(1);const n=await(0,r.L7)("player-remove-promise-btn-0")._click();(0,r.l_)(n).toBe("promise-no-data-ever"),await a(o),await n,(0,r.l_)((0,r.o5)("#player-remove-promise-btn-0")).toBe(0),(0,r.l_)((0,r.o5)("#player-edit-btn-0")).toBe(0)})),(0,r.it)("add then deletes",(async()=>{(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1),(0,r.L7)("array-test-push-item").click(),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(2),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(2),(0,r.L7)("player-edit-btn-0").click();const t=await(0,r.L7)("player-remove-promise-btn-0").click();(0,r.l_)(t).toBe("promise-no-data-ever"),await a(o-10),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(1),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(1),(0,r.L7)("player-edit-btn-0").click();const n=await(0,r.L7)("player-remove-promise-btn-0").click();(0,r.l_)(n).toBe("promise-no-data-ever"),await a(o+25),(0,r.l_)((0,r.o5)("#score-data-0-1-inside-button")).toBe(0),(0,r.l_)((0,r.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🏹 special attributes",(()=>{(0,r.it)("style and class tests",(async()=>{(0,r.l_)((0,r.QX)("#attr-input-abc")).toBe(1),(0,r.l_)((0,r.QX)("#toggle-backgrounds")).toBe(1),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,r.L7)("attr-dynamic-inline-class").classList;(0,r.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,r.V4)("#toggle-backgrounds"),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,r.V4)("#toggle-backgrounds"),(0,r.l_)((0,r.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,r.l_)(new Array(...(0,r.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,r.l_)(new Array(...(0,r.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,r.it)("subscribe attributes colors",(()=>{const t=(0,r.L7)("subscribe-style-dot-bg-color-changer"),n=(0,r.L7)("subscribe-style-bg-color"),e=(0,r.L7)("multiple-subscribe-bg-color"),o=(0,r.L7)("toggle-color-btn"),a=(0,r.L7)("clear-color-btn");(0,r.l_)(t.style.backgroundColor).toBe("red"),(0,r.l_)(n.style.backgroundColor).toBe("red"),(0,r.l_)(e.style.backgroundColor).toBe("pink"),(0,r.l_)(o.innerText).toBe("Toggle Color ()"),o.click(),(0,r.l_)(o.innerText).toBe("Toggle Color (red)"),(0,r.l_)(t.style.backgroundColor).toBe("red"),(0,r.l_)(n.style.backgroundColor).toBe("red"),(0,r.l_)(e.style.backgroundColor).toBe("green"),o.click(),(0,r.l_)(o.innerText).toBe("Toggle Color (blue)"),(0,r.l_)(t.style.backgroundColor).toBe("blue"),(0,r.l_)(n.style.backgroundColor).toBe("blue"),(0,r.l_)(e.style.backgroundColor).toBe("purple"),a.click(),(0,r.l_)(t.style.backgroundColor).toBe(""),(0,r.l_)(n.style.backgroundColor).toBe(""),(0,r.l_)(e.style.backgroundColor).toBe("pink")})),(0,r.it)("hide/show attributes affects subscription count",(()=>{const t=(0,r.L7)("toggle-attributes-btn"),n=(0,r.L7)("subscriptions-count"),e=Number(n.innerText);(0,r.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,r.l_)(t.innerText).toBe("Show Attributes");const o=Number(n.innerText);(0,r.l_)(o).toBe(e-2),t.click(),(0,r.l_)(t.innerText).toBe("Hide Attributes");const a=Number(n.innerText);(0,r.l_)(a).toBe(e)})),(0,r.it)("style object converts to individual CSS properties",(()=>{const t=(0,r.L7)("style-object-test"),n=(0,r.L7)("toggle-backgrounds");(0,r.l_)(n.checked).toBe(!0),(0,r.l_)(t.style.backgroundColor).toBe("orange"),(0,r.l_)(t.style.padding).toBe("10px"),(0,r.l_)(t.style.border).toBe("2px solid black"),(0,r.l_)(t.style.borderRadius).toBe("8px"),(0,r.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("lightgray"),(0,r.l_)(t.style.padding).toBe("10px"),(0,r.l_)(t.style.border).toBe("2px solid black"),(0,r.l_)(t.style.borderRadius).toBe("4px"),(0,r.l_)(t.style.boxShadow).toBe("none"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("orange"),(0,r.l_)(t.style.borderRadius).toBe("8px"),(0,r.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,r.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,r.L7)("style-set-property-test"),n=(0,r.L7)("toggle-backgrounds");(0,r.l_)(n.checked).toBe(!0),(0,r.l_)(t.style.backgroundColor).toBe("red"),(0,r.l_)(t.style.color).toBe("white"),(0,r.l_)(t.style.padding).toBe("5px"),(0,r.l_)(t.style.marginTop).toBe("10px"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("blue"),(0,r.l_)(t.style.color).toBe("white"),(0,r.l_)(t.style.padding).toBe("5px"),(0,r.l_)(t.style.marginTop).toBe("10px"),n.click(),(0,r.l_)(t.style.backgroundColor).toBe("red")}))}))},566:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("elements exists",(()=>{(0,r.l_)((0,r.L7)("h1-app")).toBeDefined();const t=(0,r.L7)("toggle-test");(0,r.l_)(t).toBeDefined(),(0,r.l_)(t.innerText).toBe("toggle test")})),(0,r.it)("toggle test",(()=>{const t=(0,r.L7)("toggle-test");(0,r.l_)(t.innerText).toBe("toggle test"),t.click(),(0,r.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,r.l_)(t.innerText).toBe("toggle test");const n=(0,r.L7)("props-debug-textarea");(0,r.l_)(n.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')}))},527:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("👶 👧child tests",(()=>{(0,r.it)("child tests",(()=>{(0,r.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,r.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,r.it)("a",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,r.it)("b",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,r.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,r.it)("c",(()=>{(0,r.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},118:(t,n,e)=>{e.r(n);var r=e(78),o=e(902);console.log("📄 content.test.ts: Loading... window.describe available?",typeof window.describe);let a=0;async function s(t,n,e=5e3){const o=Date.now();for(;Date.now()-o<e;){if((0,r.QX)(t)===n)return await(0,r._v)(50),!0;await(0,r._v)(10)}throw new Error(`Timeout waiting for element count. Expected ${n} elements matching '${t}', but found ${(0,r.QX)(t)}`)}(0,r.yY)("📰 content",(()=>{(0,r.it)("basic",(()=>{(0,r.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,r.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,r.l_)((0,r.dy)("#content-dom-parse-0-0")).toBe((0,r.dy)("#content-dom-parse-0-1"))})),(0,r.it)("html",(()=>{(0,r.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,r.it)("spacing",(()=>{(0,r.l_)((0,r.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,r.l_)((0,r.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,r.l_)((0,r.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,r.it)("style.",(()=>{(0,r.l_)((0,r.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.l_)((0,r.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,r.V4)("#toggle-border-orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,r.V4)("#toggle-border-orange"),(0,r.l_)((0,r.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,r.it)("style set as object",(()=>{(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,r.V4)("#toggle-bold"),(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,r.V4)("#toggle-bold"),(0,r.l_)((0,r.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,r.yY)("no parent element tests",(()=>{(0,r.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,r.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,r.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,r.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,r.it)("subscribe",(async()=>{a>0?console.warn("⏭️ skipped test that only passes the first time"):((0,r.l_)((0,r._8)("content-subscribe-sub0")).toBe(""),(0,r.l_)((0,r._8)("content-subscribe-sub0-with")).toBe("-1"))})),(0,r.yY)("passed in subscription",(()=>{(0,r.it)("increase subscription",(async()=>{const t=(0,r.L7)("passed-in-sub-increase"),n=(0,r.L7)("passed-in-sub-hide-show"),e=(0,r.L7)("passed-in-sub-hideShow-value");(0,r.l_)(e.textContent).toBe(""),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2"),n.click();let o=(0,r._8)("passed-in-output");(0,r.l_)(e.textContent).toBe("true"),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${o}||1`,"failed after hide"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${o}||2`),t.click(),o=(0,r._8)("passed-in-output"),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe(`0||${o}||0`),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${o}||1`,"failed third increase"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${o}||2`),n.click(),(0,r.l_)((0,r._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,r.l_)((0,r._8)("passed-in-sub-ex1")).toBe("1||||1","failed closing"),(0,r.l_)((0,r._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,r.it)("increase runs",(()=>{++a})),(0,r.it)("concat style",(()=>{(0,r.L7)("dynamic-border-width").value=2,(0,r.L7)("dynamic-border-color").value="white",(0,r.VJ)("#dynamic-border-width"),(0,r.VJ)("#dynamic-border-color"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,r.L7)("dynamic-border-width").value=1,(0,r.L7)("dynamic-border-color").value="blue",(0,r.VJ)("#dynamic-border-width"),(0,r.VJ)("#dynamic-border-color"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,r.l_)((0,r.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,r.it)("tagvar injections",(()=>{(0,r.l_)((0,r.L7)("inject-tagvar-0").innerText).toBe((0,r.L7)("inject-read-tagvar-0").innerText),(0,r.l_)((0,r.L7)("inject-tagvar-1").innerText).toBe((0,r.L7)("inject-read-tagvar-1").innerText),(0,r.l_)((0,r.L7)("inject-tagvar-2").innerText).toBe((0,r.L7)("inject-read-tagvar-2").innerText)})),(0,r.it)("animates",(async()=>{if(!document.querySelector("#content-toggle-fx"))return void console.warn("⚠️ Skipping animation test - Content view not loaded properly in test environment");(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"Initial state: should have 0 test elements").toBe(0),(0,r.V4)("#content-toggle-fx"),await s("[name=test-the-tester]",3),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After show click: should have 3 test elements").toBe(3);const t=(0,r.QX)(".animate__animated[name=test-the-tester]");(0,r.l_)(t,"After show click: should have at least 1 animating element").toBeGreaterThan(0),await(0,r._v)(o.c_/2),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"During animation: should still have 3 test elements").toBe(3),(0,r.l_)((0,r.dZ)("#outer-html-fx-test"),"During animation: inner html should be rendered").toBe("inner html tag"),await async function(t,n,e=5e3){const o=Date.now();for(;Date.now()-o<e;){if((0,r.QX)(`.animate__animated${t}`)===n)return await(0,r._v)(50),!0;await(0,r._v)(10)}throw new Error(`Timeout waiting for animations to complete. Expected ${n} animating elements matching '.animate__animated${t}', but found ${(0,r.QX)(`.animate__animated${t}`)}`)}("[name=test-the-tester]",0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After animation complete: should have 3 test elements").toBe(3),(0,r.l_)((0,r.QX)(".animate__animated[name=test-the-tester]"),"After animation complete: should have 0 animating elements").toBe(0),(0,r.V4)("#content-toggle-fx");const n=(0,r.QX)(".animate__animated[name=test-the-tester]");(0,r.l_)(n,"After hide click: should have at least 1 animating element").toBeGreaterThan(0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After hide click: should still have 3 test elements").toBe(3),await s("[name=test-the-tester]",0),(0,r.l_)((0,r.QX)("[name=test-the-tester]"),"After hide animation: should have 0 test elements").toBe(0),(0,r.l_)((0,r.QX)(".animate__animated[name=test-the-tester]"),"After hide animation: should have 0 animating elements").toBe(0)})),(0,r.it)("host",(()=>{let t=Number((0,r._8)("hostDestroyCount"));(0,r.l_)(isNaN(Number((0,r._8)("hostedContent")))).toBe(!1),(0,r.cS)("hostHideShow"),(0,r.l_)(Number((0,r._8)("hostDestroyCount"))).toBe(t+1),(0,r.l_)((0,r._8)("hostedContent")).toBe(""),(0,r.cS)("hostHideShow"),(0,r.l_)(isNaN(Number((0,r._8)("hostedContent")))).toBe(!1),(0,r.l_)(Number((0,r._8)("hostDestroyCount"))).toBe(t+1)}))}))},428:(t,n,e)=>{e.r(n),e.d(n,{clickSpeedAmount:()=>o});var r=e(78);(0,r.yY)("💯 counters",(()=>{const t="0"===(0,r.dy)("#🍄-slowChangeCount");(0,r.it)("basics",(()=>{const n=(0,r.L7)("set-main-counter-input");(0,r.l_)(n).toBeDefined(),n.value="0",(0,r.Sb)(n);const e=Number((0,r.dy)("#counters_render_count")),o=Number((0,r.dy)("#inner_counters_render_count"));(0,r.wG)("#conditional-counter",0);const s=(0,r._8)("👉-counter-sub-count");(0,r.di)("#❤️-increase-counter","#❤️-counter-display"),(0,r.l_)((0,r._8)("👉-counter-sub-count")).toBe(s),(0,r.l_)((0,r.dy)("#counters_render_count")).toBe((e+2).toString());let c=(o+2).toString(),l=(0,r.dy)("#inner_counters_render_count");(0,r.l_)(l).toBe(c);const i=(0,r.dy)("#🔥-init-counter");(0,r.l_)(i).toBe("1"),(0,r.di)("#❤️-inner-counter","#❤️-inner-display"),c=(e+4).toString(),l=(0,r.dy)("#counters_render_count"),(0,r.l_)(l).toBe(c),l=(0,r.dy)("#inner_counters_render_count"),c=(o+4).toString(),(0,r.l_)(l).toBe(c),(0,r.di)("#🥦-standalone-counter","#🥦-standalone-display"),c=(e+6).toString(),l=(0,r.dy)("#counters_render_count"),(0,r.l_)(l).toBe(c),l=(0,r.dy)("#inner_counters_render_count"),c=(o+4).toString(),(0,r.l_)(l).toBe(c),(0,r.wG)("#conditional-counter",1),(0,r.wG)("#conditional-display",1),t&&(0,r.l_)((0,r.dy)("#conditional-display")).toBe("2"),l=(0,r._8)("❤️💧-shallow-display"),(0,r.di)("#conditional-counter","#conditional-display"),(0,r.l_)(l).toBe((0,r._8)("❤️💧-shallow-display")),(0,r.di)("#❤️-inner-counter","#❤️-inner-display"),(0,r.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),a("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),a("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),a("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),a("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,r.it)("piped subject",(()=>{if(t){const t=(0,r.dy)("#🥦-standalone-display"),n=(0,r.dy)("#🪈-pipedSubject");(0,r.l_)(n).toBe(t,`firstRun failure pipe0. Expected "${n}" toBe empty-string`),(0,r.l_)((0,r.dy)("#🪈-pipedSubject-2")).toBe(t,"firstRun failure pipe2")}(0,r.V4)("#🥦-subject-increase-counter");const n=(0,r.dy)("#🪈-pipedSubject"),e=(0,r.dy)("#🥦-standalone-display");(0,r.l_)(n).toBe(e),(0,r.l_)((0,r.dy)("#🪈-pipedSubject-2")).toBe((0,r.dy)("#🥦-standalone-display"))}))}));const o=600;function a(t,n,e){const a=(0,r._8)(n),s=(0,r.L7)(t),c=(0,r.L7)(e);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)s.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)c.click();console.timeEnd(`⌚️ outer ${t}`);const l=(Number(a)+o).toString();(0,r.l_)((0,r._8)(n)).toBe(l)}},236:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("destroys",(async()=>{(0,r.l_)((0,r.QX)("#destroyCount")).toBe(1),(0,r.l_)((0,r.QX)("#toggle-destroys")).toBe(1),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(1);let t=Number((0,r.dy)("#destroyCount"));(0,r.V4)("#toggle-destroys");let n=Number((0,r.dy)("#destroyCount"));(0,r.l_)(n).toBe(t+2),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(0),t=n,(0,r.V4)("#toggle-destroys"),n=Number((0,r.dy)("#destroyCount")),(0,r.l_)(n).toBe(t),(0,r.l_)((0,r.QX)("#destroyable-content")).toBe(1)}))},835:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("taggedjs-dump",(()=>{(0,r.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,r.L7)("taggedjs-dump-user-textarea");(0,r.l_)(t.value).toBe(""),t.value="{test:22}",(0,r.b$)(t),(0,r.l_)(t.value).toBe("{test:22}");const n=(0,r.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,r.l_)(n.length).toBe(1),(0,r.l_)(n[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,r.b$)(t);const e=(0,r.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,r.l_)(e.length).toBe(2),(0,r.l_)(e[0].innerText).toBe("test"),(0,r.l_)(e[1].innerText).toBe("testb"),t.value="",(0,r.b$)(t)}))}))},157:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("function in props",(async()=>{(0,r.di)("#fun_in_prop1","#fun_in_prop_display"),(0,r.di)("#fun_in_prop2","#fun_in_prop_display"),(0,r.di)("#fun_in_prop3","#fun_in_prop_display"),(0,r.l_)((0,r.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,r.V4)("#toggle-fun-in-child"),(0,r.V4)("#fun-parent-button"),(0,r.V4)("#toggle-fun-in-child"),(0,r.V4)("#fun-parent-button"),(0,r.l_)((0,r.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},774:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("🪞 mirror testing",(()=>{(0,r.wG)("#mirror-counter-display",2),(0,r.wG)("#mirror-counter-button",2);const t=Number((0,r._8)("mirror-counter-display"));(0,r.L7)("mirror-counter-button").click(),(0,r.l_)(t+1).toBe(Number((0,r._8)("mirror-counter-display"))),(0,r.wG)("#mirror-counter-display",2),(0,r.Lo)("#mirror-counter-display")}))},994:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("oneRender",(()=>{(0,r.l_)((0,r.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,r.di)("#👍-counter-button","#👍-counter-display"),(0,r.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,r.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,r.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,r.l_)((0,r.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🧳 props",(()=>{(0,r.it)("test duels",(()=>{(0,r.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,r.it)("child prop communications",(()=>{(0,r.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,r.it)("basics",(()=>{const t=(0,r.dy)("#propsOneLevelFunUpdate-🥩-display"),n=(0,r.dy)("#propsDebug-🥩-change-count-display");(0,r.l_)(n).toBe((Number(t)+1).toString());const e=(0,r.L7)("propsDebug-🥩-0-display").innerHTML,o=(0,r.L7)("propsDebug-🥩-1-display").innerHTML,a=(0,r.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,s=Number(e),c=Number(o),l=Number(a);(0,r.l_)(c).toBe(l),(0,r.l_)(s+2).toBe(c)})),(0,r.it)("letProp",(()=>{(0,r.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,r.dy)("#propsDebug-🥩-0-display")),n=(0,r.IO)("#propsDebug-🥩-2-button")[0]._click();(0,r.l_)(n).toBe("no-data-ever"),(0,r.l_)((0,r.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,r.l_)((0,r.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,r.L7)("propsDebug-🥩-1-button").click()})),(0,r.it)("props as functions",(()=>{const t=Number((0,r._8)("sync-prop-number-display"));(0,r.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,r.L7)("sync-prop-child-button").click(),(0,r.Fr)("#sync-prop-number-display",(t+2).toString()),(0,r.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,r.Fr)("#sync-prop-number-display",(t+2).toString()),(0,r.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🫴 providers",(()=>{(0,r.it)("basics",(()=>{(0,r.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,r.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,r.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,r.it)("inner outer debug",(()=>{(0,r.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,r.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,r.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,r.yY)("host attributes",(()=>{(0,r.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,r.l_)(t).toBeDefined(),t){const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(255, 0, 0)")||n.borderColor.includes("red");(0,r.l_)(e).toBe(!0),(0,r.l_)(n.borderWidth).toBe("2px"),(0,r.l_)(n.borderStyle).toBe("solid")}})),(0,r.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,r.l_)(t).toBeDefined(),t){const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(0, 128, 0)")||n.borderColor.includes("green");(0,r.l_)(e).toBe(!0),(0,r.l_)(n.borderWidth).toBe("2px"),(0,r.l_)(n.borderStyle).toBe("solid")}})),(0,r.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,r.l_)(t).toBeDefined(),t&&(0,r.l_)(t.innerHTML.trim()).toBe("wonderful - parent(red)")})),(0,r.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),n=document.getElementById("in-cycle-child");(0,r.l_)(t).toBeDefined(),(0,r.l_)(n).toBeDefined(),t&&n&&(0,r.l_)(t.contains(n)).toBe(!0)})),(0,r.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),n=document.getElementById("in-cycle-parent");if((0,r.l_)(t).toBeDefined(),(0,r.l_)(n).toBeDefined(),t&&n){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,r.wS)(t);const e=window.getComputedStyle(n),o=e.borderColor.includes("blue")||e.borderColor.includes("rgb(0, 0, 255)");(0,r.l_)(o).toBe(!0,`in-cycle-parent should be blue not ${e.borderColor}`)}})),(0,r.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),n=document.getElementById("in-cycle-child");if((0,r.l_)(t).toBeDefined(),(0,r.l_)(n).toBeDefined(),t&&n){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0}));const e=window.getComputedStyle(n),o=e.borderColor.includes("purple")||e.borderColor.includes("rgb(128, 0, 128)");(0,r.l_)(o).toBe(!0)}})),(0,r.it)("child2 has correct innerHTML and green border",(()=>{const t=document.getElementById("in-cycle-child-2");if((0,r.l_)(t).toBeDefined(),t){(0,r.l_)(t.textContent.trim().replace(/\n(\s+)/g," ")).toBe("wonderful too part 2");const n=window.getComputedStyle(t),e=n.borderColor.includes("rgb(0, 128, 0)")||n.borderColor.includes("green");(0,r.l_)(e).toBe(!0),(0,r.l_)(n.borderWidth).toBe("2px"),(0,r.l_)(n.borderStyle).toBe("solid")}})),(0,r.it)("child2 color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select-2"),n=document.getElementById("in-cycle-child-2");if((0,r.l_)(t).toBeDefined(),(0,r.l_)(n).toBeDefined(),t&&n){t.value="orange",t.dispatchEvent(new Event("change",{bubbles:!0}));const e=window.getComputedStyle(n),o=e.borderColor.includes("orange")||e.borderColor.includes("rgb(255, 165, 0)");(0,r.l_)(o).toBe(!0,`in-cycle-child-2 should be orange not ${e.borderColor}`)}}))}))}))},232:(t,n,e)=>{e.d(n,{v:()=>o});var r=e(347);const o=({renderCount:t,name:n})=>r.dy.dom(a.allStrings21541[0],n,n+"_render_count",t),a={allStrings21541:[[{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"("},{nn:"text",v:0},{nn:"text",tc:" render count "},{nn:"span",at:[["id",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]},{nn:"text",tc:")"}]}]}]]}},451:(t,n,e)=>{e.r(n);var r=e(78);(0,r.it)("basic app subject",(()=>{const t=(0,r.dZ)("#app-counter-subject-value-display");(0,r.V4)("#app-counter-subject-button");const n=(0,r.dZ)("#app-counter-subject-value-display");(0,r.l_)(Number(t)).toBe(Number(n)-1)}))},168:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("🔀 tagSwitching",(()=>{(0,r.it)("0",(()=>{(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(1),(0,r.l_)((0,r.o5)("#tag-switch-dropdown")).toBe(1),(0,r.l_)((0,r.o5)("#tagSwitch-1-hello")).toBe(2),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,r.it)("1",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="1",t._change({target:t}),(0,r.wG)("#tagSwitch-1-hello",5),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("2",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="2",t._change({target:t}),(0,r.wG)("#tagSwitch-1-hello",2),(0,r.wG)("#tagSwitch-2-hello",4),(0,r.l_)((0,r.o5)("#tagSwitch-3-hello")).toBe(0),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("3",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="3",t._change({target:t}),(0,r.l_)((0,r.o5)("#tagSwitch-1-hello")).toBe(0),(0,r.l_)((0,r.o5)("#tagSwitch-2-hello")).toBe(0),(0,r.wG)("#tagSwitch-3-hello",7),(0,r.l_)((0,r.o5)("#select-tag-above")).toBe(0)})),(0,r.it)("4",(()=>{const t=(0,r.L7)("tag-switch-dropdown");t.value="",t._change({target:t}),(0,r.wG)("#select-tag-above",1),(0,r.wG)("#tag-switch-dropdown",1),(0,r.wG)("#tagSwitch-1-hello",2),(0,r.wG)("#tagSwitch-2-hello",0),(0,r.wG)("#tagSwitch-3-hello",0)}))}))},525:(t,n,e)=>{function r(t){const n=((new Error).stack||"").split("\n")[3]||"";return{toBe(e,r){if(t!==e){const o="function"==typeof r?r():r,a=o||`Expected ${JSON.stringify(e)} but got ${JSON.stringify(t)}`,s=new Error(a);throw s.stack=a+"\n"+n+(s.stack?"\n"+s.stack:""),s}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(n){if("number"!=typeof t||!(t>n))throw new Error(`Expected ${t} to be greater than ${n}`)},toHaveLength(n){const e=t;if(!("length"in e)||e.length!==n)throw new Error(`Expected length ${n} but got ${e.length||"undefined"}`)},not:{toBe(n){if(t===n)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(n)}`)}}}}e.d(n,{l:()=>s});const o=void 0!==globalThis.vitest,a=o?globalThis.expect:null;const s=o&&a?function(t,n){if(void 0!==n){const e=a(t);return{toBe(t){try{e.toBe(t)}catch(t){throw new Error(n)}},toBeDefined(){try{e.toBeDefined()}catch(t){throw new Error(n)}},toBeUndefined(){try{e.toBeUndefined()}catch(t){throw new Error(n)}},toBeGreaterThan(t){try{e.toBeGreaterThan(t)}catch(t){throw new Error(n)}},toHaveLength(t){try{e.toHaveLength(t)}catch(t){throw new Error(n)}},not:{toBe(t){try{e.not.toBe(t)}catch(t){throw new Error(n)}}},to:{be:{greaterThan:t=>{try{e.toBeGreaterThan(t)}catch(t){throw new Error(n)}}}}}}const e=a(t);return{...e,to:{be:{greaterThan:n=>a(t).toBeGreaterThan(n)}},toBe:t=>e.toBe(t)}}:function(t,n){if(void 0!==n){const e=r(t);return{toBe(t){e.toBe(t,n)},toBeDefined(){e.toBeDefined()},toBeUndefined(){e.toBeUndefined()},toBeGreaterThan(t){e.toBeGreaterThan(t)},toHaveLength(t){e.toHaveLength(t)},not:{toBe(t){e.not.toBe(t)}},to:{be:{greaterThan:t=>{e.toBeGreaterThan(t)}}}}}const e=r(t);return{...e,to:{be:{greaterThan:t=>{e.toBeGreaterThan(t)}}}}}},78:(t,n,e)=>{e.d(n,{L7:()=>v,wS:()=>f,VJ:()=>g,V4:()=>i,cS:()=>u,dQ:()=>d,QX:()=>a,yY:()=>I,o5:()=>s,l_:()=>o.l,wG:()=>S,Fr:()=>k,Lo:()=>C,T_:()=>l,dy:()=>x,_8:()=>y,it:()=>j,WB:()=>p,Sb:()=>h,IO:()=>c,_v:()=>_,di:()=>T,Iq:()=>J,dZ:()=>b,b$:()=>w});var r=e(995),o=e(525);function a(t){return document.querySelectorAll(t).length}const s=a;function c(t){return document.querySelectorAll(t)}function l(t){return c(t).forEach((t=>t.focus()))}function i(t){[...c(t)].forEach((t=>t.click()))}function u(t){i("#"+t)}function d(t,n=0){c(t)[n].click()}function p(t,n){const e=new KeyboardEvent("keydown",{key:n,bubbles:!0});t.dispatchEvent(e)}function h(t,n){const e=new KeyboardEvent("keyup",{key:n,bubbles:!0});t.dispatchEvent(e)}function g(t,n=0){f(c(t)[n])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function x(t){let n="";return c(t).forEach((t=>n+=t.innerHTML)),n}function b(t){let n="";return c(t).forEach((t=>n+=t.textContent)),n}function v(t){return document.getElementById(t)}function y(t){const n=document.getElementById(t);return n?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const m=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(m)}function _(t){return new Promise((n=>setTimeout(n,t)))}function S(t,n,e){const r=document.querySelectorAll(t),a=r.length;return e=e||`Expected ${n} elements to match query ${t} but found ${a}`,(0,o.l)(a).toBe(n,e),r}function C(...t){const n=t.reduce(((t,n)=>{const e=document.querySelectorAll(n);return t.push(...e),t}),[]);if(0===n.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const e=n.pop().innerHTML;n.forEach((t=>(0,o.l)(t.innerHTML).toBe(e)))}function k(t,n){(0,o.l)(x(t)).toBe(n)}function V(t,n,{elementCountExpected:e}={elementCountExpected:1},r,a,s=0){(0,o.l)(t.length).toBe(e,(()=>`Expected ${r} to be ${e} elements but is instead ${t.length}`)),(0,o.l)(n.length).toBe(e,(()=>`Expected ${a} to be ${e} elements but is instead ${n.length}`)),t.forEach(((t,n)=>{const e=document.querySelectorAll(a)[n];(0,o.l)(document.body.contains(e)).toBe(!0,`The selected element ${a} is no longer an element on the document body BEFORE clicking ${r}`);let c=Number(e?.innerText);(0,o.l)(typeof t.click).toBe("function"),t.click(),(0,o.l)(e).toBeDefined(),(0,o.l)(document.body.contains(e)).toBe(!0,`The selected element ${a} is no longer an element on the document body AFTER clicking ${r}`);let l=c+1;c=Number(e.innerText),(0,o.l)(document.body.contains(e)).toBe(!0),(0,o.l)(l).toBe(c,(()=>`After click ${r}, counter test ${s+1} of ${s+2} expected ${a} to be value ${l} but it is ${c}`)),t.click(),c=Number(e?.innerText),++l,(0,o.l)(l).toBe(c,(()=>`Counter test ${s+2} of ${s+2} expected ${a} to increase value to ${l} but it is ${c}`))}))}function T(t,n,{elementCountExpected:e}={elementCountExpected:1}){return V(document.querySelectorAll(t),document.querySelectorAll(n),{elementCountExpected:e},t,n)}function J(...t){const[n,e]=t.shift();let r=S(e,1),a=S(n,1);const s=r[0].innerText;V(a,r,{elementCountExpected:1},n,e);let c=2;t.forEach((([t,l],i)=>{r=S(l,1),a=S(t,1);let u=r[0],d=u.innerText;const p=(Number(s)+c).toString();(0,o.l)(d).toBe(p,(()=>`Expected second ${l} increase provider to be increased to ${s} but got ${d}`)),V(a,r,{elementCountExpected:1},n,e,i+2),u=r[0],d=u.innerText;const h=c+2;(0,o.l)(d).toBe((Number(s)+h).toString(),(()=>`Expected ${l} innerText to be ${Number(s)+h} but instead it is ${d}`)),c+=2}))}const B=void 0!==globalThis.vitest,j=B?globalThis.it:r.it,I=B?globalThis.describe:r.y;B&&globalThis.beforeEach,B&&globalThis.afterEach},995:(t,n,e)=>{e.d(n,{executeBrowserTests:()=>i,it:()=>c,y:()=>l});e(525);let r=null,o=new Map,a=[];const s=void 0!==globalThis.vitest,c=s?globalThis.it:(t,n)=>{const e={name:t,fn:n,suite:r};a.push(e);const s=o.get(r)||[];s.push(e),o.set(r,s)},l=s?globalThis.describe:(t,n)=>{const e=r;r=t,o.set(t,[]),n(),r=e};async function i(){let t=0,n=0;const e=[];console.log(`🧪 Running ${a.length} tests...\n`);const s=new Map;for(const t of a){const n=t.suite||null,e=s.get(n)||[];e.push(t),s.set(n,e)}for(const[r,o]of s){r&&console.log(`${r}`);for(const a of o){const o=r?"  ":"";try{await a.fn(),t++,console.log(`${o}✅ ${a.name}`)}catch(t){n++,e.push({test:a.name,suite:a.suite,error:t}),console.error(`${o}❌ ${a.name}`),console.error(t)}}r&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${n} failed`),e.length>0&&(console.error("\n❌ Failed Tests:"),e.forEach((({test:t,suite:n,error:e})=>{const r=n?`${n} > ${t}`:t;if(console.error(`\n${r}:`),console.error(e),e.stack){e.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),a=[],o.clear(),r=null,0===n}},337:(t,n,e)=>{e.r(n);var r=e(78);function o(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let n=0;n<500;n++)t.value="aaa - "+n,(0,r.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const n=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)n[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const e=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)e[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,r.yY)("☑️ todos",(function(){const t=(0,r.IO)(".new-todo")[0];(0,r.it)("todos add one remove one",(async function(){(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),(0,r.V4)("#todo-view-all-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),(0,r.l_)(t).toBeDefined(),t.value="one",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(1),(0,r.V4)("button.destroy"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0)})),(0,r.it)("todos basic",(async function(){window.location.hash="#/",await(0,r._v)(1),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),t.value="one",(0,r.WB)(t,"Enter"),(0,r.V4)("input.toggle"),(0,r.V4)("button.destroy"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(0),t.value="one",(0,r.WB)(t,"Enter"),t.value="two",(0,r.WB)(t,"Enter");const n=(0,r.IO)("input.toggle")[1];n.click(),(0,r.l_)(n.checked).toBe(!0),t.value="three",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.V4)("#todo-view-active-link"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.l_)(window.location.hash).toBe("#/active"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(2),(0,r.V4)("#todo-view-completed-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(1),(0,r.V4)("#todo-view-all-link"),await(0,r._v)(1),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(3),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(2),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(1),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input.toggle").length).toBe(0)})),(0,r.it)("todos editing",(function(){t.value="one",(0,r.WB)(t,"Enter"),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0);let n=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,r.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(n),(0,r.l_)((0,r.IO)("input.new-todo").length).toBe(1),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(1),(0,r.T_)("input#edit-todo-input");const e=(0,r.IO)("input#edit-todo-input")[0];e.value="two",(0,r.WB)(e,"Enter"),(0,r.l_)((0,r.IO)("button.destroy").length).toBe(1),(0,r.l_)((0,r.IO)("input.new-todo").length).toBe(1),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0),(0,r.dQ)("button.destroy"),(0,r.l_)((0,r.IO)("input#edit-todo-input").length).toBe(0)})),(0,r.it)("⌚️ todos speedometer",o)}))},702:(t,n,e)=>{e.r(n);var r=e(78);(0,r.yY)("⌚️ watch tests",(()=>{const t=(0,r.dy)("#🍄-slowChangeCount"),n="0"===t;(0,r.it)("basic",(async()=>{const e=Number((0,r._8)("watch-testing-num-display"));(0,r.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("false"),n?((0,r.l_)((0,r.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe("false"),(0,r.l_)((0,r.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,r.l_)((0,r.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,r.l_)(Number((0,r.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,r.l_)((0,r.dy)("#🦷-watchTruthAsSub")).toBe((0,r.dy)("#🦷-truthSubChangeCount"))),(0,r.V4)("#watch-testing-num-button"),(0,r.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,r.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,r.l_)((0,r.dy)("#🍄‍🟫-subjectChangeCount")).toBe((e+2).toString()),(0,r.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const o=Number((0,r.dy)("#🦷-truthChangeCount"));(0,r.V4)("#🦷-truthChange-button");let a=(o+1).toString();(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("true"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),a=(o+1).toString(),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("false"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),a=(o+2).toString(),(0,r.l_)((0,r.dy)("#🦷-truthChange")).toBe("true"),(0,r.l_)((0,r.dy)("#🦷-watchTruth")).toBe(a),(0,r.l_)((0,r.dy)("#🦷-truthChangeCount")).toBe(a),(0,r.V4)("#🦷-truthChange-button"),(0,r.V4)("#🦷-reset-button");const s=(0,r.dy)("#🦷-watchTruth"),c=(0,r.dy)("#🦷-watchTruthAsSub");(0,r.l_)(c).toBe(s)}))}))},347:(t,n,e)=>{e.d(n,{Ef:()=>T,_i:()=>ne,xQ:()=>Tt,v0:()=>Er,KU:()=>Pr,sj:()=>D,tg:()=>yo,IX:()=>to,tv:()=>Jn,uz:()=>Xr,_:()=>Ur,G7:()=>wn,aj:()=>Ct,Wq:()=>et,KR:()=>_n,iB:()=>ko,FU:()=>xr,fm:()=>Io,ho:()=>Vo,dy:()=>fo,Kn:()=>it,DE:()=>st,RW:()=>Rr,ev:()=>Zr,Zx:()=>fr,nc:()=>Qr,J8:()=>wo,Kf:()=>X,a:()=>zr,td:()=>Ir,SB:()=>Ar,$q:()=>Mr,fo:()=>Hr,Ld:()=>Jr,Te:()=>Br,_q:()=>ee,bX:()=>mo,YP:()=>Dr,Ut:()=>Or});const r=":tagvar",o=":";function a(t){if(t.startsWith("class."))return"class";const n=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==n?n:!!t.startsWith("style.")&&"style"}const s=new RegExp(r+"(\\d+)"+o,"g");function c(t){return t.search&&t.startsWith(r)?t.search(s):-1}const l=/(:tagvar\d+:)/,i="ondoubleclick",u=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,d=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function p(t){const n=[],e=[],a=[];let s=null,c=-1,i=0;const p=new RegExp(d,"g");for(t=function(t){return t.replace(h,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(t);i<t.length;){const d=p.exec(t);if(!d)break;const[h,f,b]=d,y=h.startsWith("</"),m=h.endsWith("/>");if(i<d.index){const n=t.slice(i,d.index);if(n.trim()){const t=x(n);for(let n of t)n.startsWith(r)&&n.search(l)>=0&&-1===n.search(_)&&(n=r+ ++c+o),g(s,e,n)}}if(i=d.index+h.length,y){s=a.pop()||null;continue}const w=[];let S;for(;null!==(S=u.exec(b));)c=v(S,c,n,w);const C={nn:f};w.length&&(C.at=w),s?(s.ch||(s.ch=[]),s.ch.push(C)):e.push(C),m||(a.push(s),s=C)}if(i<t.length){const n=t.slice(i);if(n.trim()){const t=x(n);for(const n of t)n.startsWith(r)&&++c,g(s,e,n)}}return e}const h=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function g(t,n,e){!function(t,n,e){t?(t.ch||(t.ch=[]),t.ch.push(e)):n.push(e)}(t,n,{nn:"text",tc:f(e)})}function f(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function x(t){return t.split(l).filter(b)}function b(t){return""!==t}function v(t,n,e,c){const l=t[1]||t[3]||t[5];let u=t[2]||t[4]||t[6];if(void 0===l)return n;const d=""!==t[2],p=void 0===u&&d,h=l.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===i.length&&t===i?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(l.slice(0,r.length)===r){const t=r+ ++n+o;return e.push(["at",t]),c.push([t]),n}if(t[0].startsWith(l)&&t[0].slice(l.length,t[0].length).search(/\s+$/)>=0)return c.push([g]),n;const a=t[3];if(a.search(_)>=0){u=a;const t=[g,u];return c.push(t),n}u=r+ ++n+o}d||(u=t[2]);const f=u.split(m).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(s)>=0&&++n})));const x=[g,u],b=a(h);return b&&x.push(b),"style"===g?(c.unshift(x),n):(c.push(x),n)}const y=new RegExp(r+"(\\d+)"+o,"gi"),m=new RegExp("("+r+"\\d+"+o+")","gi"),w=r.slice(0,r.length-1),_=new RegExp(w+"&#x72;(\\d+)"+o,"gi"),S=w+"&#x72;$1"+o;function C(t,n){const e=function(t,n){const e=t;return function(t,n){const e=[];for(let a=0;a<t.length;++a){const s=t[a].replace(y,S);a<n.length?e.push(s+r+a+o):e.push(s)}return function(t,n,e){const a=e.length-n.length;if(a>0)for(let e=a;e>0;--e)t.push(r+(n.length+e-1)+o)}(e,t,n),e}(e,n)}(t,n).join("");return p(e)}const k="";var V,T;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(V||(V={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(T||(T={}));const J={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},B="ch";function j(t,n,e=[],r=[]){const o=t;for(let t=0;t<o.length;t++){const a=[...r,t],s=o[t];if(s.at){const t=s.at;s.at=L(t,n)}if(s.ch){const t=s.ch,r=[...a,B];s.ch=j(t,n,e,r)}t=I(s,n,o,t)}return o}function I(t,n,e,a){if("text"!==t.nn)return a;const c=t;let l,i=c.tc;if(typeof i!==V.string)return a;for(;null!==(l=s.exec(i));){const t=l[1],c=parseInt(t,10);if(!isNaN(c)&&c<n){const t=r+c+o,n=i.slice(l.index+t.length);e.splice(a,1,{nn:"text",v:c}),i=n,s.lastIndex=0}}return c.tc=i,a}function L(t,n){const e=[];for(const o of t){const[t,a,s]=o;if(t.startsWith(r)){const o=parseInt(t.replace(r,""),10);if(!isNaN(o)&&o<n){e.push([{tagJsVar:o}]);continue}}if(typeof a===V.string&&a.startsWith(r)){const o=parseInt(a.replace(r,""),10);if(!isNaN(o)&&o<n){e.push([t,{tagJsVar:o},s]);continue}}e.push(o)}return e}function E(t){return t.length}const P={};function O(t,n){const e=function(t){const n=t.map(E);return n.push(t.length),Number(n.join(""))}(t),r=P[e],o=r&&function(t,n,e){if(e&&e.strings.length===t.length&&e.strings.every(((n,e)=>n===t[e]))&&e.values.length===n.length)return!0;return!1}(t,n,r);if(o)return r.domMetaMap;const a=j(C(t,n),n.length),s={interpolation:void 0,string:void 0,strings:t,values:n,domMetaMap:a};return P[e]=s,a}const A=function(){};function D(t){N.length&&(N[N.length-1].paintRemoves.push(...q),q=[]),N.push({promise:t,paintRemoves:q}),q=[]}let N=[],$=[],q=[],H=[],M=[],R=[];const W={locks:0,removeLocks:0};function z(t,n){n.textContent=t}function X(){if(!(W.locks>0))return function(){(function(){if(N.length){const t=N.map((t=>t.promise.then((()=>{const n=t.paintRemoves;for(const t of n)t[0](...t[1])}))));N=[];const n=q;return Promise.all(t).then((()=>{for(const t of n)t[0](...t[1])}))}for(const t of q)t[0](...t[1])})(),q=[];for(const t of H)t[0](...t[1]);for(const t of M)t[0](...t[1]);for(const t of $)t[0](...t[1])}(),void function(){$=[],H=[],M=[];const t=R;R=[];for(const n of t)n[0](...n[1])}()}function Y(t,n){q.push([U,[t,n]])}function U(t,n){t.parentNode.removeChild(t)}function F(t,n){t.parentNode.insertBefore(n,t)}function Q(t,n){t.appendChild(n)}const G="object"==typeof document&&document.createElement("div");function K(t){return G.innerHTML=t,document.createTextNode(G.innerHTML)}function Z(t,n,e=A){const r=K(n);F(t,r),e(r)}function tt(t,n,e=A){G.innerHTML=n;const r=document.createTextNode(G.textContent);F(t,r),e(r)}function nt(t,n,e){G.innerHTML=n;const r=document.createTextNode(G.textContent);Q(t,r),e(r)}function et(t,n){const e=rt(t.subContext,n);return delete t.subContext,e}function rt(t,n){t.deleted=!0;const e=t.appendMarker;if(e&&(Y(e,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const r=t.contextItem;return r.tagJsVar.delete(r,n),76}function ot(t){if(!t)return!1;switch(t.tagJsType){case J.dom:case J.tag:case J.templater:return!0}return!1}function at(t){const n=t?.tagJsType;return n===J.tagComponent||n===J.stateRender}function st(t){return it(t)&&typeof t.subscribe===T.function}function ct(t){return t&&lt(t.then)}function lt(t){return typeof t===T.function}function it(t){return typeof t===T.object&&null!==t}function ut(t){return Array.isArray(t)}function dt(t){return t.renderCount=t.renderCount||0,t.global={}}function pt(){return jt.stateConfig.support}function ht(t){return jt.stateConfig.support=t}function gt(t){let n=t;for(;n.ownerSupport&&!at(n.templater);)n=n.ownerSupport;return n.context.global.newest||n}function ft(...t){return t}function xt(t){const n=jt.stateConfig;return n.states[n.statesIndex]=t,++n.statesIndex,t(ft)}function bt(t){const n=jt.stateConfig,e=n.statesIndex,r=gt(n.prevSupport).states[e];let o=[];r((function(...t){return o=t,t}));return n.states[n.statesIndex]=t,++n.statesIndex,t((function(...t){return o}))}function vt(t){const n=jt.stateConfig;n.handlers.handler=St,n.handlers.statesHandler=xt,n.rearray=[],n.stateArray=[],n.states=[],n.statesIndex=0,ht(t)}function yt(t,n,e){const r=jt.stateConfig;r.rearray=e,r.stateArray=[],r.states=[],r.statesIndex=0,r.handlers.handler=_t,r.handlers.statesHandler=bt,r.prevSupport=n,ht(t)}class mt{}function wt(t){const n=t.callback;if(!n)return t.defaultValue;const[e]=function(t){const[n]=t(mt),[e]=t(n);return[n,e]}(n);return e}function _t(){const t=jt.stateConfig,n=t.rearray[t.stateArray.length];return t.stateArray.push(n),n.defaultValue}function St(t){const n=jt.stateConfig;let e=t;if(typeof t===T.function&&(e=t()),typeof e===T.function){const t=e;e=function(...n){return t(...n)},e.original=t}const r={get:function(){return wt(r)},defaultValue:e};return n.stateArray.push(r),e}function Ct(t){const n=new Tt;return n.subscribeWith=n=>{const e=[],r=[],o=(o,a)=>{e[a]=!0,r[a]=o;if(e.length===t.length){for(const t of e)if(!t)return;n(r,s)}},a=[...t],s=a.shift().subscribe((t=>o(t,0))),c=a.map(((t,n)=>t.subscribe((t=>o(t,n+1)))));return s.subscriptions=c,s},n}function kt(t,n,e){const r=Tt.globalSubCount$;Tt.globalSubCount$.next(r.value+1);const o=function(){o.unsubscribe()};return o.callback=n,o.subscriptions=[],o.unsubscribe=function(){return function(t,n,e){!function(t,n){const e=t.findIndex((t=>t.callback===n));-1!==e&&t.splice(e,1)}(n,e);const r=Tt.globalSubCount$;Tt.globalSubCount$.next(r.value-1),t.unsubscribe=()=>t;const o=t.subscriptions;for(const t of o)t.unsubscribe();return t}(o,e,n)},o.add=t=>(o.subscriptions.push(t),o),o.next=t=>{n(t,o)},o}function Vt(t,n,e){const r=[...n],o=r.shift(),a=t=>{if(r.length)return Vt(t,r,e);e(t)};let s=a;const c=o(t,{setHandler:t=>s=t,next:a});s(c)}class Tt{constructor(t,n){this.value=t,this.onSubscription=n,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this)}subscribe(t){const n=kt(0,t,this.subscribers),e=this.subscribeWith;if(e){if(this.methods.length){const e=t;t=t=>{Vt(t,this.methods,(t=>e(t,n)))}}return e(t)}return this.subscribers.push(n),this.onSubscription&&this.onSubscription(n),n}next(t){this.value=t,this.emit()}emit(){const t=this.value,n=this.subscribers;for(const e of n)e.callback(t,e)}toPromise(){return new Promise((t=>{this.subscribe(((n,e)=>{e.unsubscribe(),t(n)}))}))}toCallback(t){const n=this.subscribe(((e,r)=>{const o=r?.unsubscribe;o?o():setTimeout((()=>n.unsubscribe()),0),t(e)}));return this}pipe(...t){const n=new Tt(this.value);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return Ct(t.map((t=>{if(st(t))return t;return new Tt(t,(n=>(n.next(t),n)))})))}}Tt.globalSubCount$=new Tt(0);function Jt(t){Object.defineProperty(t,"value",{set(n){t._value=n,t.emit()},get:()=>t._value})}const Bt=new Tt(void 0,(function(t){pt()||t.next()})),jt={stateConfig:{stateArray:[],version:Date.now(),handlers:{handler:St,statesHandler:xt}},tagClosed$:Bt};function It(t,n,e){const r=t.tagJsVar.checkValueChange(n,t,e);return-1===r||lo(n,t,e,r),r}function Lt(t,n,e,r,o){const a=n.context;a.locked=!0,e.element=r,ro(e),function(t,n,e,r,o){n.tagJsVar.processInit(t,n,e,r,o)}(t,e,n,r,o),oo(),delete a.locked,e.value=t}function Et(t){switch(t){case void 0:case!1:case null:return k}return t}function Pt(t,n,e){return t===n.value?-1:It(n,t,e)}function Ot(t,n,e){"object"!=typeof t[n]&&(t[n]={});for(const r in e)H.push([$t,[t,n,r,e[r]]]);if(t[n].setProperty)for(const r in e)H.push([Nt,[t,n,r,e[r]]])}function At(t,n,e){t.setAttribute(n,"")}function Dt(t,n,e){if(void 0!==e&&!1!==e&&null!==e)return it(e)?Ot(t,n,e):void t.setAttribute(n,e);t.removeAttribute(n)}function Nt(t,n,e,r){t[n].setProperty(e,r)}function $t(t,n,e,r){t[n][e]=r}function qt(t,n,e,r){switch(r){case"autofocus":return void H.push([zt,[e]]);case"autoselect":return void H.push([Wt,[e]]);case"style":{const r=t.split(".");return void H.push([Ht,[e,r,n]])}case"class":return void function(t,n,e){const r=t.split(".");if(r.shift(),n){for(const t of r)H.push([Mt,[e,t]]);return}for(const t of r)H.push([Rt,[e,t]])}(t,n,e)}throw new Error(`Invalid special attribute of ${r}. ${t}`)}function Ht(t,n,e){const r=n[1];t.style[r]=e,t.style.setProperty(r,e)}function Mt(t,n){t.classList.add(n)}function Rt(t,n){t.classList.remove(n)}function Wt(t){t.select()}function zt(t){t.focus()}function Xt(t,n){const e=function(t,n,e=[]){const r=t.context;e.push({support:t,renderCount:r.renderCount,provider:n});const o=n.children;for(let t=o.length-1;t>=0;--t){const r=o[t],a=r.context;e.push({support:r,renderCount:a.renderCount,provider:n})}return e}(t,n);return e}function Yt(t){return t.support}function Ut(t,n){return Ft(t,n)}function Ft(t,n){if(null===t||typeof t!==T.object)return t;if(n<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const e=ut(t)?[]:Object.create(Object.getPrototypeOf(t));if(ut(t))for(let r=0;r<t.length;r++)e[r]=Ft(t[r],n-1);else for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=Ft(t[r],n-1));return e}function Qt(t,n,e){return Gt(t,n,e)}function Gt(t,n,e){return!(t!==n&&(r=t,o=n,!lt(r)||!lt(o)||r.toString()!==o.toString()))||(e<0||typeof t===T.object&&typeof n===T.object&&(t instanceof Date&&n instanceof Date?t.getTime()===n.getTime():ut(t)&&ut(n)?function(t,n,e){if(t.length!==n.length)return!1;for(let r=0;r<t.length;r++)if(!Gt(t[r],n[r],e-1))return!1;return!0}(t,n,e-1):!ut(t)&&!ut(n)&&function(t,n,e){const r=Object.keys(t),o=Object.keys(n);if(0===r.length&&0===o.length)return!0;if(r.length!==o.length)return!1;for(const a of r){if(!o.includes(a)||!Gt(t[a],n[a],e-1))return!1}return!0}(t,n,e-1)));var r,o}function Kt(t,n){const e=t.length;for(let r=0;r<e;++r){const e=t[r],o=n[r];if(ut(e)&&ut(o)){if(e===o)continue;return 3}if(typeof e!==T.function||typeof o!==T.function)if(typeof e!==T.object){if(e!==o)return 3.3}else if(typeof n===T.object){const t=Object.entries(e);for(const n of t){if(!Zt(n,o))return 3.1}}}return!1}function Zt([t,n],e){const r=e[t];return typeof n===T.function&&typeof r===T.function||r===n}function tn(t){return t.map(nn)}function nn(t,n){const e=t,r=t?.tagJsType;if(r)switch(r){case J.signal:case J.subscribe:case J.stateRender:return;case J.dom:case J.tag:case J.templater:return tn(e.values)}return ut(t)?tn(e):Ut(t,n)}function en(t){return nn(t,se)}function rn(t){return nn(t,ce)}function on(t,n,e){const r={templater:t,context:n,castedProps:e,appSupport:void 0},o=n.global;return o.blocked=[],o.destroy$=new Tt,r}function an(t,n,e,r){n.appSupport=e;const o=t.props;return o&&(n.propsConfig=function(t,n,e){const r=t.templater;if(r.tagJsType!==J.stateRender){switch(r.propWatch){case ne.IMMUTABLE:return t.propsConfig={latest:n,castProps:e};case ne.SHALLOW:return t.propsConfig={latest:n.map(en),castProps:e}}return t.propsConfig={latest:n.map(rn),castProps:e}}}(n,o,r)),n}function sn(t,n){const e=n.providers;if(e)for(const t of e)for(let e=t.children.length-1;e>=0;--e){t.children[e].context.global===n&&t.children.splice(e,1)}n.destroy$&&n.destroy$.next(),t.context.renderCount=0}function cn(t,n){for(const e of t){const t=e.lastArray;if(t){cn(t,n);continue}const r=e.value;if(r?.tagJsType===J.subscribe){r.delete(e,n),e.deleted=!0;continue}const o=e.global;if(!o)continue;const a=o.newest,s=o.subscriptions;s&&s.forEach(un),at(a.templater)&&sn(a,o);cn(e.contexts,a)}}function ln(t,n=[],e=[]){for(const r of t){const t=r.global;if(!t)continue;const o=t.newest;if(o){n.push(o);const r=t.subscriptions;r&&e.push(...r)}const a=r.contexts;a&&ln(a,n,e)}return{tags:n,subs:e}}function un(t){t.unsubscribe()}function dn(t,n,e,r){const o=t.length-1,a=n-r,s=a<0||o<a,c=e[n];if(s)return pn(c),1;const l=function(t,n,e,r,o){const a=n&&t!==n.arrayValue;if(a)return pn(e),r.splice(o,1),2;return 0}(c.value.arrayValue,t[n],c,e,n);return l}function pn(t){!function(t,n){if(t){return void vn(t.oldest,t)}const e=n.simpleValueElm;delete n.simpleValueElm,Y(e)}(t.global,t)}function hn(t,n){return ut(t)?-1:(gn(n),9)}function gn(t){fn(t,t.lastArray)}function fn(t,n){for(let t=0;t<n.length;++t)pn(n[t]);delete t.lastArray}function xn(t,n){const e=t.global;!function(t,n){for(const e of t){if(e.locked)continue;if(e.withinOwnerElement){const t=e.tagJsVar;if(t&&"host"===t.tagJsType){const n=e.supportOwner;t.delete(e,n)}continue}const t=e.lastArray;if(t){fn(e,t);continue}const r=e.simpleValueElm;if(r){delete e.simpleValueElm,Y(r);continue}const o=e.global;if(void 0===o)continue;if(!0===o.deleted)continue;o.deleted=!0;o.oldest&&xn(e,n)}}(t.contexts,n),function(t){const n=t.htmlDomMeta;for(let t=n.length-1;t>=0;--t){bn(n[t]),n.splice(t,1)}}(e)}function bn(t){const n=t.marker;n&&Y(n);const e=t.domElement;e&&Y(e,"destroyClone")}function vn(t,n){const e=t.context;n.deleted=!0,e.renderCount=0;const r=[];return cn(e.contexts,t),n.destroy$&&sn(t,n),xn(e,r),r}function yn(t,n){const e=mn(t,n);return!(e||!n.templater.tag?._innerHTML||!mn(t.outerHTML,n))||e}function mn(t,n){const e=t.templater,r=n.templater,o=e?.tag||t,a=r.tag;if(e?.tagJsType===J.stateRender)return e.dom===r.dom;switch(o.tagJsType){case J.dom:return a?.tagJsType===J.dom&&function(t,n){const e=t.dom,r=n.dom;return e===r}(o,a);case J.tag:{const e=function(t,n,e,r){const o=t.strings,a=n.strings;if(o.length!==a.length)return!1;if(!o.every(((t,n)=>a[n].length===t.length)))return!1;const s=e.templater.values||t.values,c=r.templater.values||n.values;return function(t,n){const e=t.length===n.length;if(!e)return!1;const r=n.every((function(n,e){const r=t[e];if(typeof n===T.function&&typeof r===T.function){return!!(n.toString()===r.toString())}return!0}));if(r)return!0;return!1}(s,c)}(o,a,t,n);return e}}throw new Error(`unknown tagJsType of ${o.tagJsType}`)}function wn(t,n){const e=n.global,r=e?.newest;if(ot(t)){return yn(t,r)?(co(n,t,r),-1):(vn(r,e),dt(n),7)}const o=t?.tagJsType;if(o){return!0===co(n,t,e.newest.ownerSupport)?-1:88}return _n(n),8}function _n(t){const n=t.global,e=n?.newest;vn(e,n),delete t.global,t.renderCount=0}function Sn(t,n,e,r){const o={value:t,valueIndex:n.length,tagJsVar:hr(t),withinOwnerElement:e,parentContext:r};return n.push(o),o}function Cn(t,n,e,r,o,a,s){const c=document.createTextNode(k),l=Sn(t,n,o>0,r);return l.placeholder=c,a?M.push([Q,[a,c]]):$.push([F,[s,c]]),Lt(t,e,l,a,s),l}function kn(t,n,e,r,o,a,s,c){const l=t.domElement=document.createElement(n.nn),i=[];if(n.at)for(const t of n.at){const n=t[0],s=t[1],c=t[2]||!1,u=Ue(e,n,l,r,t.length>1?Dt:At,o,a,c,s);"object"==typeof u&&i.push(u)}return s?M.push([Q,[s,l]]):$.push([F,[c,l]]),{domElement:l,attributeContexts:i}}function Vn(t,n,e,r,o,a,s,c){const l=[];s&&void 0===c&&(c=document.createTextNode(k),M.push([Q,[s,c]]),s=void 0);for(let i=0;i<t.length;++i){const u=t[i],d=u.v;if(!isNaN(d)){Cn(n[o.length],o,e,r,a,s,c);continue}const p={};if(l.push(p),"text"===u.nn){Tn(p,u,s,c);continue}const h={isAttrs:!0,element:void 0,parentContext:r,contexts:[],tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,withinOwnerElement:!0},{attributeContexts:g,domElement:f}=kn(p,u,n,e,o,h,s,c);h.element=f,h.contexts=g,u.ch&&(p.ch=Vn(u.ch,n,e,h,o,a+1,f,c).dom)}return{dom:l,contexts:o}}function Tn(t,n,e,r){const o=t,a=o.tc=n.tc;e?M.push([nt,[e,a,function(t){o.domElement=t}]]):$.push([tt,[r,a,function(t){o.domElement=t}]])}function Jn(t,n,e){const r=t.context.global;r.oldest=t,r.newest=t,++W.locks;const o=function(t,n,e,r){const o=function(t){const n=t.templater,e=n.tag;if(e.tagJsType===J.dom)return e.dom;const r=e.strings;return O(r,e.values)}(t),a=t.templater.tag,s=a.values,c=[];t.context.contexts=c;const l=Vn(o,s,t,n,c,0,e,r);return l}(t,t.context,n,e);return r.htmlDomMeta=o.dom,--W.locks,o}function Bn(t,n){const e=n.global.newest,r=n.placeholder;return e.ownerSupport=t,Jn(e,void 0,r),e}function jn(t){const n={tagJsType:J.templater,processInit:En,checkValueChange:wn};return n.tag=t,t.templater=n,n}function In(t,n,e){const r=function(t,n,e,r,o){const a={templater:t,context:r,castedProps:o,appSupport:void 0};return a.ownerSupport=n,a.appSupport=e,a}(t,n,n.appSupport,e);return e.contexts=[],r}function Ln(t,n,e,r,o){const a=In(t,e,n);a.ownerSupport=e;const s=Jn(a,r,r?void 0:o);for(const t of s.dom)t.marker&&(r?M.push([Q,[r,t.marker]]):$.push([F,[o,t.marker]])),t.domElement&&(r?M.push([Q,[r,t.domElement]]):$.push([F,[o,t.domElement]]));return a}function En(t,n,e,r,o){return r?Ln(t,n,e,r,o):Bn(e,n)}function Pn(t,n){const e={tagJsType:J.templater,processInit:En,processInitAttribute:A,processUpdate:Pt,checkValueChange:wn,delete:_n,propWatch:t,props:n,key:function(t){return e.arrayValue=t,e},matchesInjection:t=>e.wrapper===t||e.wrapper?.original===t?.original};return e}const On=[];function An(t){const n=t.context;return fe(t.templater)?be(t):ge(t,t,n)}function Dn(t,n,e){return t.map((function(t){return function(t,n,e,r){if(ot(t)||!t)return t;if(!n)return t;return Nn(t,n,e,r)}(t,n.ownerSupport,n,e)}))}function Nn(t,n,e,r,o){if(!t)return t;if(t.tagJsType)return t;if(typeof t===T.function)return r<=1?function(t,n,e){const r=t.mem;if(r)return t;const o=function(...t){return function(t,n,e,r){const o=r.context.global,a=o?.newest||r,s=void 0===pt(),c=t.apply(n,e),l=function(){const t=a.context;return t.global&&!0!==t.locked?(An(a),c):c};if(s)return l();return jt.tagClosed$.toCallback(l),c}(o.mem,n,t,e)};return o.original=t,o.mem=t,Object.assign(o,t),o}(t,o,n):t;if(r===ce)return t;return qn(t)?t:ut(t)?function(t,n,e,r){for(let o=t.length-1;o>=0;--o){const a=t[o];if(t[o]=Nn(a,e,n,r+1,t),typeof a===T.function){if(a.mem)continue;$n(r+1,o,a,t,n)}}return t}(t,e,n,r):function(t,n,e,r){const o=Object.keys(t);for(const a of o){const o=t[a],s=Nn(o,e,n,r+1,t);if(t[a]===s)continue;const c=Object.getOwnPropertyDescriptor(t,a);if(!(c?.get||c?.set)&&(t[a]=s,typeof s===T.function)){if(o.mem)continue;$n(r+1,a,o,t,n)}}return t}(t,e,n,r)}function $n(t,n,e,r,o){if(t>0){const t=o.context.global;r[n].subscription=t.destroy$.toCallback((function(){r[n]=e}))}}function qn(t){return typeof t!==T.object||!t||t.tagJsType}function Hn(t,n,e,r){const o=n.original,a=t.tagJsType===J.stateRender,s=jt.stateConfig;let c;return ht(e),a?c=t():(c=o(...r),typeof c===T.function&&(c=c())),c.templater=t,t.tag=c,e.state=s.stateArray,e.states=s.states,e}function Mn(t,n,e,r,o){const a=on(t,r,o);return a.ownerSupport=n,an(t,a,e,o)}function Rn(t,n,e){const r=t.propWatch===ne.DEEP?ce:se,o=t.props,a=n.propsConfig;let s=a.castProps;const c=e?.propsConfig,l=c?.castProps;l&&(a.castProps=l,s=ue(n,e,e.ownerSupport,o,r));return s||Dn(o,n,0)}class Wn extends Error{constructor(t,n,e={}){super(t),this.name=Wn.name,this.details={...e,errorCode:n}}}class zn extends Wn{constructor(t,n){super(t,"state-mismatch-error",n),this.name=zn.name}}class Xn extends Wn{constructor(t,n){super(t,"sync-callback-error",n),this.name=Xn.name}}function Yn(t,n){const e=t.rearray;e.length&&e.length!==t.stateArray.length&&function(t,n,e){const r=`Saved states between renders are inconsistent. Expected ${t.length} states got ${e.stateArray.length}.`,o=n.templater?.wrapper;let a=o;(o?.original||o?.original)&&(a=o.original);const s={oldStates:e.stateArray,newStates:e.rearray,tagFunction:a,templater:n.templater},c=new zn(r,s);throw console.error(Un,s),c}(e,n,t)}const Un="State tracking requires same number of state calls on every render. This error typically occurs when a state call is only reachable behind a condition. Also, wrapping tags that have state, with tag(), often helps when tag is only reachable by a condition.";function Fn(t,n){const e=t.context;++e.renderCount;const r=jt.stateConfig;t.state=r.stateArray,t.states=r.states,e.global.newest=t,Yn(r,t),delete r.prevSupport,delete r.support,delete r.stateArray,delete r.states,jt.tagClosed$.next(n)}function Qn(t,n,e,r){!function(t,n){const e=n?.state;if(e)return void yt(t,n,e);vt(t)}(t,n);const o=t.templater;let a;if(o.tagJsType===J.stateRender){const n=o;a=Mn(o,r,t.appSupport,e),Hn(o,n,a)}else{a=(0,o.wrapper)(t,e,n)}return Fn(a,r),a.ownerSupport=t.ownerSupport,a}function Gn(t,n,e,r,o){dt(n);const a=function(t,n,e){const r=Pn(ne.DEEP);r.tagJsType=t.tagJsType;const o=In(r,e,n);function a(){return r.tag=t(),o}return r.wrapper=a,a.tagJsType=t.tagJsType,a.original=t.original||t,o}(t,n,e);return Qn(a,void 0,n),Ln(a.templater,n,e,r,o)}function Kn(t,n,e,r){const o=Mn(t,e,e.appSupport,n),a=o.propsConfig;if(a){const n=t.tagJsType!==J.tagComponent?[]:Rn(t,o);a.castProps=n}return function(t,n){const e=Jn(t,n,void 0);for(const t of e.dom)t.domElement&&M.push([Q,[n,t.domElement]]),t.marker&&M.push([Q,[n,t.marker]]);return t}(Qn(o,n.global.newest,n),r)}function Zn(t,n,e,r){if(dt(n),r){return Kn(t,n,e,r)}const o=function(t,n,e){const r=Mn(t,e,e.appSupport,n),o=r.propsConfig;if(o){const n=t.tagJsType!==J.tagComponent?[]:Rn(t,r);o.castProps=n}const a=Qn(r,n.global.newest,n);return Jn(a,void 0,n.placeholder),a}(t,n,e);return o}let te=0;var ne;function ee(t,n=ne.SHALLOW){const e=function(...r){const o=Pn(n,r);o.tagJsType=J.tagComponent,o.processInit=Zn;const a=function(t,n){return function(e,r,o){const a=Rn(t,e,o),s=e.ownerSupport,c=Mn(t,s,e.appSupport,r,a);return Hn(t,n,c,a)}}(o,e);return a.original=t,o.wrapper=a,o},r=t;return e.original=t,r.tags=On,r.setUse=jt,r.ValueTypes=J,r.tagIndex=te++,On.push(e),e}function re(t,n,e){if(ye(t,n))return 11;switch(e){case ne.NONE:return 1;case ne.SHALLOW:return Kt(t,n);case ne.IMMUTABLE:return ae(t,n)}return function(t,n){let e=t,r=n;e=[...t],r=[...n||[]];if(!e.every(((t,n)=>function(t,n,e,r){const o=r[n];if(typeof t===T.object){const n={...t},e={...o||{}},r=Object.entries(n).every((([t,r])=>oe(r,e[t],(()=>{delete n[t],delete e[t]}))));return r}return oe(t,o,(function(){e.splice(n,1),r.splice(n,1)}))}(t,n,e,r))))return 7;return!1}(t,n)}function oe(t,n,e){if(typeof t!==T.function)return!!Qt(t,n,ce)&&4;if(typeof n!==T.function)return!1;const r=n?.original;r&&(n=r);t.original&&(t=t.original);return t.toString()===n.toString()?(e(),5):(e(),6)}function ae(t,n){const e=t.length;for(let r=0;r<e;++r){if(t[r]!==n[r])return 2}return!1}!function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(ne||(ne={})),ee.getElement=function(){return eo().element},ee.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},ee.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},ee.deepPropWatch=ee,ee.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},ee.inject=function(t){const n=eo();if(!n)throw new Error("tag.inject can only be called within a tag or host context");let e=n.parentContext;for(;e;){if(e.isAttrs){const n=e.contexts;for(const e of n)if(e.tagJsVar?.matchesInjection&&e.tagJsVar.matchesInjection(t))return e.returnValue}if(e.tagJsVar?.matchesInjection&&e.tagJsVar.matchesInjection(t))return e.returnValue;e=e.parentContext}const r=`Could not find parent context for tag.inject ${t}`;throw console.error(r,{targetItem:t,context:n}),new Error(r)},ee.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},ee.immutableProps=function(t){return ee(t,ne.IMMUTABLE)},ee.watchProps=function(t){return ee(t,ne.SHALLOW)},Object.defineProperty(ee,"renderOnce",{set(t){t.tagJsType=J.renderOnce,t.processInit=Gn,t.processUpdate=Pt,t.delete=_n,t.checkValueChange=function(){return-1}}}),Object.defineProperty(ee,"use",{set(t){t.original={setUse:jt,tags:On},t.tagJsType=J.stateRender,t.processInit=Zn,t.processUpdate=Pt,t.checkValueChange=wn,t.delete=_n}});const se=3,ce=10;function le(t,n,e,r,o,a){return null==t||a>o?n:typeof t===T.function?n.mem?(t.mem=n.mem,n):(t.mem=n,t):qn(n)?n:ut(n)?function(t,n,e,r,o,a){for(let s=t.length-1;s>=0;--s){const c=t[s],l=n[s];t[s]=le(l,c,e,r,a,o+1)}return t}(n,t,e,r,a,o):function(t,n,e,r,o,a){const s=Object.keys(t);for(const c of s){const s=t[c],l=le(n[c],s,e,r,a,o+1);if(s===l)continue;const i=Object.getOwnPropertyDescriptor(t,c)?.set;i||(t[c]=l)}return t}(n,t,e,r,a,o)}function ie(t,n,e){const r=e.global,o=r.newest,a=o.templater.wrapper;let s=n.templater.wrapper,c=!1;const l=n.templater.tagJsType,i=J.stateRender===l||J.renderOnce===l;if(i)c=n.templater.tagJsType===J.renderOnce||yn(o,n);else if(a&&s){const t=o.templater.tag?._innerHTML;t&&(s=n.outerHTML);c=a.original===s.original}const u=n.templater;if(!c)return void function(t,n,e){const r=t.global,o=r.oldest;vn(o,r),dt(t),n.processInit(n,t,e,void 0,t.placeholder)}(e,u,t);const d=i||function(t,n){return re(n.props,t.propsConfig.latest,t.templater.propWatch)}(o,u);if(d)e.locked?r.blocked.push(n):(xe(n),++e.renderCount);else{!function(t,n,e,r,o){const a=t.props,s=ue(n,e,r,a,o),c=n.propsConfig;c.castProps=s;const l=e.propsConfig;l.latest=c.latest}(u,n,o,t,u.propWatch===ne.DEEP?ce:se)}}function ue(t,n,e,r,o,a=-1){const s=n.context.global;if(!s||!s.newest){const n=Dn(r,t,a);r.push(...n);return t.propsConfig.castProps=n,r}const c=(n=s.newest||n).propsConfig.castProps,l=[];for(let n=0;n<r.length;++n){const s=r[n],i=le(c[n],s,t,e,o,a+1);l.push(i)}return t.propsConfig.castProps=l,l}function de(t){const n=t.context,e=n.global,{subs:r,tags:o}=ln(n.contexts);pe(n);for(const t of o){if(!0===t.context.global.deleted)return;pe(t.context)}e.subscriptions&&r.forEach(un),dt(n)}function pe(t){t.global.deleted=!0,xn(t,[])}function he(t,n,e){const r=Qn(t,n,e),o=!n||yn(n,r);if(o){if(n){const t=n.templater.tag;if(t&&e.renderCount>0){const e=n?.templater,r=e?.tag;!function(t,n,e){if(t.tagJsType===J.dom){const r=e?.dom;return void(r!==t.dom&&de(n))}if(e){const r=e.strings;if(r){const e=r?.length;e!==t.strings.length&&de(n)}}}(t,n,r)}}}else{!function(t,n){const e=t.context.global;let r=-1;const o=e.providers=e.providers||[],a=o.length-1;for(;r++<a;){const t=o[r];let a=-1;const s=t.children.length-1;for(;a++<s;)if(e===t.children[a].context.global)return t.children.splice(a,1),void t.children.push(n)}}(n,r),de(n);const t=r.context.global;t.oldest=r,t.newest=r}return r.ownerSupport=t.ownerSupport,{support:r,wasLikeTags:o}}function ge(t,n,e){const r=he(n,t,e),o=e.global;return r.wasLikeTags?(so(o.oldest,r.support),r.support):Bn(n,e)}function fe(t){return J.templater===t.tagJsType}function xe(t){const n=t.context,e=n.global,r=fe(t.templater);if(n.locked)return e.blocked.push(t),t;if(r){return be(t)}n.locked=!0,e.blocked.length&&(t=e.blocked.pop(),e.blocked=[]);const o=ge(e.newest,t,n);return delete n.locked,o}function be(t){return xe(gt(t).context.global.newest)}function ve(t,n){const e=function(t,n){const e=t.props,r=n.propsConfig,o=r.latest;if(ye(e,o))return!0;switch(t.propWatch){case ne.IMMUTABLE:return ae(e,o);case ne.SHALLOW:return Kt(e,o)}return!Qt(e,o,ce)}(t,n);return!!e}function ye(t,n){return t.length!==n.length}function me(t,n=[]){const e=t.context,r=fe(t.templater),o=t.ownerSupport;if(e.locked)return n.push(t),n;if(r)return me(o,n);const a=t,s=at(a.templater),c=t.templater.tagJsType,l=o&&c!==J.stateRender&&(!s||ve(a.templater,a)),i=function(t){const n=t.context.global.providers;if(!n)return[];const e=[];for(const t of n){const n=Xt(t.owner,t);e.push(...n.map(Yt))}return e}(a);return n.push(...i),l?(me(o,n),s&&n.push(a),n):(n.push(a),n)}function we(t){++W.locks,t.forEach(_e),--W.locks,X()}function _e(t){const n=t.context.global;n&&xe(n.newest)}function Se(t,n){for(let e=0;e<t.length;++e){Te(t[e],n[e])}}let Ce;function ke(...t){return Ce=t,t}function Ve(){return Ce}function Te(t,n){t(ke,1),n(Ve,2)}function Je(t,n,e,r){for(let e=t.length-1;e>=0;--e){const r=t[e].get(),o=n[e].callback;o&&o(r)}for(let t=r.length-1;t>=0;--t){je.length=0,Be=0;(0,r[t])(Ie),e[t](Le)}}let Be=0;const je=[];function Ie(...t){return je.push(t),t}function Le(...t){return je[Be++]}function Ee(t,n,e,r,{resolvePromise:o,resolveValue:a}){if(ct(t)){return n.context.locked=!0,t.then(function(t,n){return e=>{if(!0===t.context.global.deleted)return n(e);const r=t.context,o=t.context.global;var a,s;delete r.locked,a=t,s=o.newest,Se(a.states,s.states);return we(me(t)),n(e)}}(n,o))}return a(t)}function Pe(t,n){const e=n.context.global,r=function(t,n){if(!0!==e.deleted)return function(t,n,e,r){const o=gt(n),a=o.context;a.locked=!0;const s=t.apply(e,r);delete a.locked;return function(t,n){n.context.global;return function(t,n,e){return we(me(t)),Ee(n,t,0,0,{resolvePromise:De,resolveValue:Ne})}(n,t)}(s,o)}(r.tagFunction,r.support,t,n)};return r.tagFunction=t,r.support=n,r}const Oe="no-data-ever",Ae="promise-no-data-ever";function De(){return Ae}function Ne(){return Oe}function $e(t,n,e,r){const o=t.appElement;"blur"===n&&(n="focusout");const a="_"+n,s=t.context.global.events;if(!s[n]){const t=function(t){t.originalStopPropagation=t.stopPropagation,qe(t,a,t.target)};s[n]=t,o.addEventListener(n,t)}e[a]=r,e[n]=r}function qe(t,n,e){const r=e[n];if(r){let n=!1;if(t.stopPropagation=function(){n=!0,t.originalStopPropagation.call(t)},r(t),t.defaultPrevented||n)return}const o=e.parentNode;o&&qe(t,n,o)}function He(t,n,e,r){const o=function(...n){return o.tagFunction(t,n)};o.tagFunction=n,o.support=e,$e(e.appSupport,r,t,o)}function Me(t){return null==t||!1===t}function Re(t,n){t.removeAttribute(n)}function We(t,n,e,r){const o=n,a=t;if(a?.tagJsType){const r=n.value;return r?.tagJsType?void r.checkValueChange(a,n,e):(a.isAttr=!0,ro(n),a.processInitAttribute(o.attrName,t,o.element,a,o,e),oo(),void(o.tagJsVar=a))}if(o.isNameOnly)return function(t,n,e,r,o,a,s,c){if(e){if(Me(n))return void r.removeAttribute(e);if(typeof e===T.object)if(typeof n===T.object)for(const t in e)t in n||H.push([Re,[r,t]]);else for(const t in e)H.push([Re,[r,t]])}Fe(t,n,r,o,a,s,c)}(r,t,o.value,o.element,e,o.howToSet,[],o.parentContext),void(o.value=t);const s=o.element;!function(t,n,e,r,o,a,s){if(lt(t))return function(t,n,e,r,o,a,s){const c=t.templater.wrapper;if((c?.tagJsType||c?.original?.tagJsType)!==J.renderOnce)return Ge(s,n,t,r,e);return Qe(n,e,r,o,a,t)}(o,t,r,n,s,a,e);Qe(t,r,n,s,a,o)}(t,o.attrName,o,s,e,o.howToSet,o.isSpecial),n.value=t}function ze(t,n,e,r,o,a,s){const l=r.length;function i(r){const a=function(t,n,e){return t.reduce(((t,r)=>{if(c(r)>=0){const r=e++,o=n[r];return t.push(o),t}return t.push(r),t}),[])}(n,r,l).join("");o(e,t,a)}return n.forEach((n=>{if(c(n)>=0){const o=r.length,c=hr(n),l={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:c,valueIndex:r.length,parentContext:s};c.processUpdate=function(t,n,e,r){i(r)};const u=a[o];l.value=u,r.push(l)}})),i(a),r}function Xe(t,n,e,r,o,a,s,c,l){const i=hr(n),u={isAttr:!0,element:e,attrName:t,withinOwnerElement:!0,tagJsVar:i,valueIndex:l,parentContext:o};return r.push(u),i.processUpdate=We,function(t,n,e,r,o,a,s){if(e.element=r,e.howToSet=o,typeof n===T.function)return Ge(e,n,a,t,r);if(e.attrName=t,e.isSpecial=s,n?.tagJsType)return void function(t,n,e,r,o){n.processInitAttribute(t,n,o,n,e,r),e.tagJsVar=n}(t,n,e,a,r);Ze(t,n,r,o,s)}(t,n,u,e,a,s,c),u.value=n,u}function Ye(t){return it(t)&&"tagJsVar"in t?t.tagJsVar:-1}function Ue(t,n,e,r,o,a,s,c,l){const i=Ye(n),u=i>=0,d=t[i],p=d;if(p?.tagJsType)return function(t,n,e,r,o,a,s,c,l){const i=Sn(t,n,!0,e);return i.element=c,i.valueIndex=o,i.isAttr=!0,i.isNameOnly=l,i.stateOwner=gt(a),i.supportOwner=a,ro(i),r.processInitAttribute(s,r,c,r,i,a),oo(),i.oldTagJsVar=i.tagJsVar,i.tagJsVar=r,i}(l,a,s,p,i,r,n,e,u);if(u){const n=Sn(d,a,!0,s);n.valueIndex=i,n.isAttr=!0,n.element=e,n.isNameOnly=!0,n.howToSet=o;return n.tagJsVar.processUpdate=We,Fe(t,d,e,r,o,a,s),n}if(Array.isArray(l))return ze(n,l,e,a,o,t,r.context);const h=Ye(l);if(h>=0){return Xe(n,t[h],e,a,s,o,r,c,h)}Ze(n,l,e,o,c)}function Fe(t,n,e,r,o,s,c){if(!Me(n))if(typeof n!==T.object)0!==n.length&&o(e,n,k);else for(const o in n){Ue(t,o,e,r,Dt,s,c,a(o),n[o])}}function Qe(t,n,e,r,o,a){if(!1===r){switch(t){case void 0:case!1:case null:return void H.push([Ke,[n,e]])}if(lt(t))return He(n,t,a,e);o(n,e,t)}else qt(e,t,n,r)}function Ge(t,n,e,r,o){n=Pe(n,e);return t.tagJsVar.processUpdate=We,He(o,n,e,r)}function Ke(t,n){t.removeAttribute(n)}function Ze(t,n,e,r,o){if(o)return qt(t,n,e,o);r(e,t,n)}function tr(t,n,e,r,o){const a=n.tagJsVar,s=t;if(a.checkValueChange(s,n,e)>=0){a.delete(n,e),r.removeAttribute(o);const s=hr(t);s.isAttr=!0,s.processInitAttribute(o,t,r,s,n,e),n.tagJsVar=s}}function nr(t,n,e,r,o){r.delete=er,r.checkValueChange=sr,o.tagJsVar=r,o.tagJsVar.processUpdate=(n,r,o)=>{tr(n,r,o,e,t)};const s=a(t);Ze(t,n,e,Dt,s)}function er(t){const n=t.element,e=t.attrName;n.removeAttribute(e)}function rr(t){return{tagJsType:"simple",value:t,processInitAttribute:nr,processInit:or,delete:ar,checkValueChange:cr,processUpdate:Pt}}function or(t,n,e,r,o){const a=Et(t);o=n.placeholder;const s=n.paint=[Z,[o,a,function(t){n.simpleValueElm=t,delete n.paint}]];$.push(s)}function ar(t){const n=t.simpleValueElm;delete t.simpleValueElm,Y(n,"deleteSimpleValue")}function sr(t,n){return null==t||!(typeof t===T.object)?-1:6}function cr(t,n){return null!=t&&typeof t===T.object?(ar(n),6):(function(t,n){const e=Et(t);if(n.paint)return void(n.paint[1][1]=e);const r=n.simpleValueElm;H.push([z,[e,r]])}(t,n),-1)}function lr(t,n,e,r){const o=void 0===t.lastArray;o&&(t.lastArray=[]);const a=t.lastArray;let s=t.placeholder,c=0;const l=[];if(!o){for(let t=0;t<a.length;++t){const e=a[t],r=dn(n,t,a,c);0!==r?2!==r?c+=r:t-=1:l.push(e)}t.lastArray=l}const i=n.length;for(let o=0;o<i;++o){s=ir(n,o,t.lastArray,e,s,r).placeholder}}function ir(t,n,e,r,o,a){const s=t[n],c=e[n];if(c)return function(t,n,e,r,o,a,s){const c=e.length>o;if(c)return Pt(t,n,r),n;const l=gr(t,r,e,a,s);return e.push(l),l}(s,c,e,r,n,o,a);const l=gr(s,r,e,o,a);return e.push(l),l}function ur(t){return{tagJsType:"array",value:t,processInitAttribute:A,processInit:pr,processUpdate:dr,checkValueChange:hn,delete:gn}}function dr(t,n,e){-1===Pt(t,n,e)&&lr(n,t,e)}function pr(t,n,e,r){lr(n,t,e,r)}function hr(t){const n=t?.tagJsType;return n?t:function(t){if(ut(t))return ur(t);return rr(t)}(t)}function gr(t,n,e,r,o){const a=document.createTextNode(k),s={value:t,tagJsVar:hr(t),withinOwnerElement:!1,placeholder:a,parentContext:n.context,valueIndex:e.length};return o||$.push([F,[r,a]]),Lt(t,n,s,o,r),o&&M.push([Q,[o,a]]),s}function fr(t,n,e,r){return n.hasEmitted=!0,n.contextItem=gr(t,e,[],r)}function xr(t,n){let e;return t&&(e=n=document.createTextNode(k),M.push([Q,[t,n]])),{appendMarker:e,insertBefore:n}}function br(t,n,e){if(t===n.value)return;if(-1===io(t,n,e)&&t.callback){Cr(t,n.subContext)}}function vr(t,n,e,r,o){const a=t.Observables,{appendMarker:s,insertBefore:c}=xr(r,o);let l=function(t,n,r){fr(t,r,e,c),_r(n),l=r.tagJsVar.onOutput=function(t,n,r){const o=r.contextItem;It(o,t,e),o.tagJsVar.processUpdate(t,o,e,[t]),_r(n)}};const i=yr(a,e,((t,n,e)=>l(t,n,e)),t);return i.appendMarker=s,n.subContext=i,t.processUpdate=br,t.onOutput=l,i}function yr(t,n,e,r){function o(t,n){c.lastValues[n]={value:t,tagJsVar:hr(t),oldTagJsVar:c.lastValues[n]?.tagJsVar},a(c.lastValues,n)}function a(t,n){const r=c.tagJsVar;if(r?.callback){const n=r.callback(...t.map((t=>t.value)));e(n,s,c)}else e(t[n].value,s,c)}let s=!0;const c={lastValues:[],subValueHandler:o,valuesHandler:a,tagJsVar:r,subscriptions:[]};return t.forEach(((t,n)=>{s=!0,c.subscriptions.push(t.subscribe((t=>o(t,n)))),s=!1})),r.onOutput=e,c}function mr(t){t.subContext.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function wr(t,n){const e=t.subContext;return mr(t),rt(e,n)}function _r(t){t||jt.stateConfig.support||X()}function Sr(t,n,e,r,o){const a=vr(t,n,e,r,o);return a.hasEmitted||Cr(t,a),a}function Cr(t,n){const e=t.Observables[0];if(!n.hasEmitted)return"withDefault"in t?void n.subValueHandler(t.withDefault,0):"value"in e?void n.subValueHandler(e.value,0):void 0;const r=n.lastValues[0].value;n.subValueHandler(r,0)}function kr(t,n,e,r){vr({tagJsType:J.subscribe,states:[],Observables:[t]},n,e,r)}function Vr(t,n,e,r,o,s){n.delete=mr;const c=a(t),l=function(n,r){Ze(t,n,e,Dt,c),_r(r)},i=yr(n.Observables,0,l,n);return o.subContext=i,o.value=n,o.tagJsVar=n,o.tagJsVar.processUpdate=function(n,r,a){tr(n,o,a,e,t)},{subContext:i,onOutput:l}}function Tr(t,n,e,r,o,a){const{subContext:s}=Vr(t,n,e,0,o);s.hasEmitted||function(t,n){const e=n.tagJsVar,r=e.onOutput;if(r===A)throw new Error("blankhandler not converted");const o=t.Observables;let a=o[0]?.value||t.withDefault;t.callback&&(a=t.callback(a));r(a,!0,n)}(n,s)}function Jr(t,n){const e=pt(),r=e?gt(e).states:[];return{onOutput:A,tagJsType:J.subscribe,processInitAttribute:Vr,processInit:vr,checkValueChange:jr,processUpdate:io,delete:wr,callback:n,states:r,Observables:[t]}}function Br(t,n,e){return{onOutput:A,tagJsType:J.subscribe,processInitAttribute:Tr,processInit:Sr,checkValueChange:jr,processUpdate:A,delete:wr,callback:e,withDefault:n,states:gt(pt()).states,Observables:[t]}}function jr(t,n){if(!t?.tagJsType)return 1;const e=t.Observables;if(!e)return 2;const r=n.value.Observables;if(!r||r.length!==e.length)return 3;return e.every(((t,n)=>t===r[n]))?-1:4}function Ir(t){return pt()?Ar((()=>Lr(t))):Lr(t)}function Lr(t){let n=t;const e=new Set,r=t=>{e.forEach((n=>n(t)))};return{tagJsType:J.signal,checkValueChange:jr,processInitAttribute:A,processInit:kr,processUpdate:br,get value(){return n},set value(t){n!==t&&(n=t,r(t))},delete:wr,emit:r,subscribe(t){t(n),e.add(t);const r=()=>e.delete(t);return r.unsubscribe=r,r}}}class Er extends Tt{constructor(t){super(t),this.value=t}subscribe(t){const n=super.subscribe(t);return t(this.value,n),n}}class Pr extends Tt{constructor(t){super(t),this.value=t,this._value=t,Jt(this)}subscribe(t){const n=super.subscribe(t);return t(this._value,n),n}}function Or(t){return(n,e)=>{e.setHandler((()=>{}));t(n).then((t=>e.next(t)))}}function Ar(t){return jt.stateConfig.handlers.handler(t)}const Dr=(t,n)=>$r(t,n),Nr=t=>t;const $r=(t,n,{init:e,before:r,final:o=Nr}={})=>{const a=Ar({pastResult:void 0,values:void 0}),s=a.values;if(void 0===s){if(r&&!r(t))return a.values=t,a.pastResult;const c=(e||n)(t,s);return a.pastResult=o(c),a.values=t,a.pastResult}if(t.every(((t,n)=>t===s[n])))return a.pastResult;if(r&&!r(t))return a.values=t,a.pastResult;const c=n(t,s);return a.pastResult=o(c),s.length=0,s.push(...t),a.pastResult};function qr(t,n){return Object.defineProperty(n,"noInit",{get(){const n=t();return n.setup.init=()=>{},n}}),Object.defineProperty(n,"asSubject",{get(){const n=t(),e=Ar((()=>pt())),r=Ar((()=>new Er(void 0))),o=Ar((()=>({stateArray:jt.stateConfig.stateArray,states:jt.stateConfig.states}))),a=(t,a)=>($r(t,((t,n)=>{const s=pt(),c=a(t,n);if(s!==e){const t=o.stateArray,n=e.context.global.oldest;Je(t,n.state,o.states,n.states)}r.next(c)}),n.setup),r);return a.setup=n.setup,qr((()=>a),a),a}}),Object.defineProperty(n,"truthy",{get(){const n=t();return n.setup.before=t=>t.every((t=>t)),n}}),n}function Hr(t){return pt()?Ar((()=>new Tt(t))):new Tt(t)}function Mr(t){return jt.stateConfig.handlers.statesHandler(t)}function Rr(t){const n=Ir([]),e=Ir(0),r=Ir(0);let o=[],a=0;return r.value=e.value,t(((...t)=>(o=t,n.value))),Dr(o,(()=>{++a,n.value=o,t((()=>o))})),Mr(((o,s)=>{if(a)return t(((...t)=>(s&&1!==s||(n.value=t),n.value))),r.value=e.value,void++e.value;t((()=>n.value))})),++a,n.value}function Wr(){return{stateDiff:0,provider:void 0}}qr((()=>function(t){const n=(n,e)=>$r(n,e,t);return n.setup=t,qr((()=>n),n),n}({})),Dr),Hr._value=t=>{const n=Ar((function(){return{stateArray:jt.stateConfig.stateArray,states:jt.stateConfig.states}})),e=pt();return Ar((function(){return new Er(t).pipe((t=>(Je(e.state,n.stateArray,e.states,n.states),t)))}))},Hr.all=function(t){const n=Ar((()=>({stateArray:jt.stateConfig.stateArray,states:jt.stateConfig.states}))),e=pt();return Tt.all(t).pipe((t=>(Je(e.state,n.stateArray,e.states,n.states),t)))};const zr={create:t=>{const n=Ar(Wr);if(n.stateDiff){let t=n.stateDiff;for(;t--;)Ar(void 0);return Ar(void 0)}const e=Ar((()=>{const e=jt.stateConfig,r=e.stateArray.length,o=t.prototype?new t:t(),a=e.support,s=e.stateArray.length-r,c={constructMethod:t,instance:o,stateDiff:s,owner:a,children:[]};n.provider=c;const l=a.context.global;return(l.providers=l.providers||[]).push(c),n.stateDiff=s,o})),r=t,o=r.compareTo=r.toString();return n.provider.constructMethod.compareTo=o,e},inject:function(t){return Ar((function(){const n=t,e=n.compareTo=n.compareTo||t.toString(),r=pt(),o=[];let a={ownerSupport:r.ownerSupport};for(;a.ownerSupport;){const t=a.ownerSupport.context.global.providers;if(!t){a=a.ownerSupport;continue}const n=t.find((t=>{o.push(t);if(t.constructMethod.compareTo===e)return!0}));if(n){const t=r.context.global;return(t.providers=t.providers||[]).push(n),n.children.push(r),n.instance}a=a.ownerSupport}const s=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${s}. Available providers`,o),new Error(s)}))}};function Xr(t){const n=pt();if(!n)throw Fr;return Yr(n,jt.stateConfig,t)}function Yr(t,n,e){const r=n.states;return function(...n){return t.context.renderCount>0?function(t,n,e,...r){const o=t.context.global.newest,a=e(...r);return xe(o),ct(a)&&a.finally((()=>{xe(o)})),a}(t,r,e,...n):e(...n)}}const Ur=()=>{const t=pt();if(!t)throw Fr;const n=jt.stateConfig;return function(e){return Yr(t,n,e)}},Fr=new Xn("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function Qr(t){Ar((()=>{const n=t(),e=pt();return Ee(n,e,e.context.global,0,{resolvePromise:Gr,resolveValue:Kr})}))}function Gr(t){return t}function Kr(t){return t}function Zr(t){Ar((function(){pt().context.global.destroy$.toCallback(t)}))}function to(t=[]){return pt()?Ar((()=>no(Lr(t)))):no(Lr(t))}function no(t){const n=["push","pop","splice","shift","unshift"],e=["map","reduce","forEach","every"],r=new Proxy(t,{get(o,a){return isNaN(a)?"length"===a?t.value.length:n.includes(a)?r[s=a]=(...n)=>{const e=t.value[s](...n);return t.emit(t.value),e}:e.includes(a)?t.value[a].bind(t.value):t[a]:t.value[a];var s},set:(n,e,r)=>isNaN(e)?"length"===e?(t.value.length=r,t.emit(t.value),!0):(t[e]=r,!0):(t.value[e]=r,t.emit(t.value),!0)});return r}function eo(){return jt.stateConfig.context}function ro(t){return jt.stateConfig.context=t}function oo(){delete jt.stateConfig.context}function ao(t,n,e,r){const o=e[n];if(o.deleted)return;const a=t[o.valueIndex],s=o.tagJsVar;ro(o),s.processUpdate(a,o,r,t),oo(),o.value=a}function so(t,n){const e=t.context.contexts;!function(t,n){const e=n.templater,r=n.templater.tag,o=e.values||r.values,a=t.templater.tag;a.values=o}(t,n),++W.locks,function(t,n){const e=t.templater.tag.values;let r=0;const o=e.length;for(;r<o;)ao(e,r,n,t),++r}(t,e),--W.locks,X()}function co(t,n,e){if(at(n))return void 0===t.global&&dt(t),function(t,n,e){const r=n.global;if(!r.newest)return void t.processInit(t,n,e,void 0,n.placeholder);const o=Mn(t,e,e.appSupport,n);ie(e,o,n)}(n,t,e),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n,!0;const r=t.global;if(r){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n;const o=r.newest;if(o)return typeof n===T.function||function(t,n,e,r){let o=e.templater||e;const a=t.templater.tag;a&&a._innerHTML&&(o=e.outerHTML||e._innerHTML.outerHTML);const s=Mn(o,r,r.appSupport,n);so(t.context.global.oldest,s)}(o,t,n,e),!0}return n.processInit(n,t,e,void 0,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=n,!0}function lo(t,n,e,r){const o=t&&t.tagJsType;if(o){if(o===J.renderOnce)return;co(n,t,e)}else{if(ut(t))return lr(n,t,e),n.oldTagJsVar=n.tagJsVar,void(n.tagJsVar=ur(t));typeof t!==T.function?r&&function(t,n){n.value=t,n.oldTagJsVar=n.tagJsVar,n.tagJsVar=rr(t);const e=n.placeholder,r=Et(t),o=n.paint=[Z,[e,r,function(t){n.simpleValueElm=t,delete n.paint}]];$.push(o)}(t,n):n.value=t}}function io(t,n,e){const r=n.subContext,o=uo(J.subscribe,t,e,n);return o||(r&&r.hasEmitted?(r.tagJsVar=t,r.valuesHandler(r.lastValues,0),-1):-1)}function uo(t,n,e,r){if(!n||!n.tagJsType||n.tagJsType!==t){return r.tagJsVar.delete(r,e),lo(n,r,e,99),99}}function po(t,n,e,r,o){const a=t;let s=a.templater;s||(s=jn(a));const c=dt(n);return r?Ln(s,n,e,r,o):(c.newest=In(s,e,n),Bn(e,n))}function ho(t,n,e,r,o){po(t.outerHTML,n,e,r,o);n.tagJsVar.processUpdate=function(t,n,e){It(n,t?.outerHTML||t,e)},t.checkValueChange=go}function go(t,n){return wn(t,n)}function fo(t,...n){const e=function(t,n){const e={values:n,ownerSupport:pt(),tagJsType:J.tag,processInitAttribute:A,processInit:po,processUpdate:Pt,checkValueChange:wn,delete:_n,strings:t,key:t=>(e.arrayValue=t,e),setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=ho,e},acceptInnerHTML:function(t){return t.owner=e,e},html:function(t,n){return e.children={strings:t,values:n},e}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n),r=Pn(ne.NONE);return r.tag=e,e.templater=r,e}fo.dom=function(t,...n){return function(t,n){const e={values:n,ownerSupport:pt(),dom:t,tagJsType:J.dom,processInitAttribute:A,processInit:po,processUpdate:Pt,checkValueChange:wn,delete:_n,key:function(t){return e.arrayValue=t,e},setHTML:function(t){return t.outerHTML=e,e._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=ho,e},acceptInnerHTML:function(t){return t.owner=e,e},html:{dom:function(t,n){return e.children={dom:t,values:n},e}}};return Object.defineProperty(e,"innerHTML",{set:t=>e.setHTML(t)}),e}(t,n)};function xo(t,n){t.domElement&&n.appendChild(t.domElement),t.marker&&n.appendChild(t.marker)}function bo(t,n,e){const r=n.global,o=on(t,n);return an(t,o,o),o.appElement=e,r.oldest=r.oldest||o,r.newest=o,o}function vo(t,n,e,r,o,a,s){const c=document.createTextNode(k);On.push(e.wrapper||{original:e});const l=function(t,n,e,r,o){r.placeholder=n;const a=r.global,s=a.oldest,c=a.newest===s,l=Mn(t,a.newest,a.newest.appSupport,r);c||yt(l,a.newest,s.state);if(t.tagJsType===J.stateRender)return function(t,n,e,r,o){const a=t.wrapper||{original:t};if(!n){const n=bo(t,r,o);return Fn(n),n}return Hn(t,a,e),Fn(e),e}(t,o,l,r,e);const i=t.wrapper,u=i(l,r);return Fn(l),u}(e,c,o,a,s);if(n.isApp=!0,s&&(r.tag=l.templater.tag),!o)throw new Error(`Cannot tagElement, element received is type ${typeof o} and not type Element`);o.destroy=function(){const t=n.events;for(const n in t){const e=t[n];o.removeEventListener(n,e)}n.events={},++W.locks;const e=vn(l,n);return--W.locks,X(),e},++W.locks;const i=function(t,n,e,r,o,a){console.debug("🏷️ Building element into tag...",{element:n,app:o,support:t});const s=Jn(t,n,void 0);e.oldest=t,e.newest=t;let c=r.setUse;if(r.tagJsType!==J.stateRender){const t=o.original;c=t.setUse,t.isApp=!0}n.setUse=c,n.ValueTypes=J,yo.push({element:n,support:t});const l=document.createDocumentFragment();l.appendChild(a);for(const t of s.dom)xo(t,l);return console.debug("🏷️ Element Tag DOM built ✅"),l}(l,o,n,e,t,c);return--W.locks,X(),o.appendChild(i),{support:l,tags:On,ValueTypes:J}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const yo=[];function mo(t,n,e){const r=yo.findIndex((t=>t.element===n));if(r>=0){const t=yo[r].support;vn(t,t.context.global),yo.splice(r,1),console.warn("Found and destroyed app element already rendered to element",{element:n})}let o=()=>c(e);o.propWatch=ne.NONE,o.tagJsType=J.stateRender,o.processUpdate=Pt,o.props=[e],o.isApp=!0;const a=function(t,n){const e={value:t,valueIndex:0,withinOwnerElement:!1,renderCount:0,global:void 0,tagJsVar:{tagJsType:"templater",checkValueChange:wn,delete:_n,processInitAttribute:A,processInit:function(){console.debug("do nothing app function")},processUpdate:Pt}},r=dt(e);return r.events={},bo(t,e,n),e}(o,n),s=a.global;vt(s.newest);let c=t(e);const l=typeof c==T.function;return l||(at(c)?(s.newest.propsConfig={latest:[e],castProps:[e]},o.propWatch=c.propWatch,o.tagJsType=c.tagJsType,o.wrapper=c.wrapper,o=c):(o.tag=c,c=t)),vo(t,s,o,c,n,a,l)}function wo(t){if(!t)return A;const n=pt();if(!n)throw new Error("output must be used in render sync fashion");return(...e)=>{const r=n.ownerSupport;return _o(e,t,r)}}function _o(t,n,e){const r=e.context.global.newest;Se(r.states,e.states);const o=n(...t);return Se(e.states,r.states),R.push([()=>{r.context.global&&(++W.locks,An(r),--W.locks,X())},[]]),o}function So(t,n,e){const r=t.owner._innerHTML;r.processInit=r.oldProcessInit;const o=n.subContext?.contextItem;It(o,r,e)}function Co(t,n,e,r,o){n.subContext={},t.processUpdate=So,function(t,n,e,r,o){const{appendMarker:a,insertBefore:s}=xr(o,r),c=e.subContext;c.appendMarker=a;const l=t.owner,i=l._innerHTML;i.processInit=i.oldProcessInit,fr(i,c,n,s)}(t,e,n,o,r)}function ko(){return{tagJsType:"innerHTML",checkValueChange:()=>-1,processInitAttribute:A,processInit:Co,processUpdate:So,delete:et}}function Vo(t,n={}){const e={tagJsType:J.host,processInitAttribute:Jo,checkValueChange:()=>-1,processInit:Bo,processUpdate:To,delete:jo,options:{callback:t,...n},matchesInjection:n=>n?.options?.callback===t},r=function(...t){return r.options.arguments=t,r};return Object.assign(r,e),r}function To(t,n,e){const r=uo(J.host,t,e,n);if(r)return r;const o=n.tagJsVar.options,a=t,s=a.options.arguments||o.arguments||[];n.returnValue=a.options.callback(...s)}function Jo(t,n,e,r,o){return Bo(n,o)}function Bo(t,n){const e=n.element,r=n.state={};ro(n),function(t,n,e,r){const o=n.options.arguments||[],a=n.options.callback(...o);e.returnValue=a;const s=n.options;s.onInit&&s.onInit(t,n,e,r)}(e,t,n,r),oo()}function jo(t){const n=t,e=n.tagJsVar,r=e.options;if(r.onDestroy){const o=n.element;_o([],(function(){ro(t);const a=r.onDestroy(o,e,n,n.state);return oo(),a}),t.stateOwner)}}Vo.onInit=t=>Vo((()=>{}),{onInit:t}),Vo.onDestroy=t=>Vo((()=>{}),{onDestroy:t});const Io={tagElement:mo,renderWithSupport:he,renderSupport:xe,renderTagOnly:Qn,paint:X}},149:(t,n,e)=>{function r({fxIn:t,fxOut:n,outPositionAbsolute:e=!0}){return{in:(n,e)=>o({fxName:t,...n},e),out:(t,r)=>a({fxName:n,outPositionAbsolute:e,...t},r)}}e.d(n,{tw:()=>v,fx:()=>x,rW:()=>f});const o=async({target:t,fxName:n="fadeInUp"},e)=>(t.style.opacity="0",e&&await c(e),t.style.opacity="1",s(n,t)),a=async({target:t,outPositionAbsolute:n=!0,fxName:e="fadeOutUp"},r)=>(n&&function(t){t.style.zIndex=t.style.zIndex||1;const n=t.offsetTop+"px",e=t.offsetLeft+"px",r=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",o=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=n,t.style.left=e,t.style.width=r,t.style.height=o,t.style.position="absolute"}),0)}(t),r&&await c(r),s(e,t));function s(t,n){let e;const r=new Promise((function(t){e=t}));return n.classList.add("animate__animated","animate__"+t),n.addEventListener("animationend",(function r(o){o.target===n&&(n.classList.remove("animate__animated","animate__"+t),n.removeEventListener("animationend",r),e(void 0))})),r}function c(t){return new Promise((n=>{setTimeout(n,t)}))}var l=e(347);const{in:i,out:u}=r({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:d,out:p}=r({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:h,out:g}=r({fxIn:"fadeIn",fxOut:"fadeOut"}),f=({stagger:t=100,fxIn:n,fxOut:e,duration:r="2s",inName:o="fadeInUp",outName:a="fadeOutDown",outPositionAbsolute:s=!1}={})=>{let c=0;const i=b((function(n){n.style.setProperty("--animate-duration",r);const e=t*c++;return i.fxIn({target:n},e).then((()=>{--c}))}),(function(n){n.style.setProperty("--animate-duration",r);const e=t*c++,o=i.fxOut({target:n},e).then((()=>{--c}));return(0,l.sj)(o),o}),n,e,o,a,s);return i.host},x=({fxIn:t,fxOut:n,stagger:e,inName:r="fadeInUp",outName:o="fadeOutDown",duration:a=".2s",outPositionAbsolute:s=!1}={})=>{const c=b((t=>(t.style.setProperty("--animate-duration",a),c.fxIn({target:t},e))),(t=>{t.style.setProperty("--animate-duration",a);const n=c.fxOut({target:t},e);return(0,l.sj)(n),n}),t,n,r,o,s);return c.host};function b(t,n,e,o,a,s,c){if(!e||!o){const t=r({fxIn:a,fxOut:s,outPositionAbsolute:c});e||(e=t.in),o||(o=t.out)}return{fxIn:e,fxOut:o,host:(0,l.ho)((()=>{}),{onInit:t,onDestroy:n})}}function v({fxIn:t,fxOut:n,duration:e=".2s",outPositionAbsolute:o=!1}={duration:".2s",outPositionAbsolute:!1}){if(!t||!n){const e=r({fxIn:"fadeInUp",fxOut:"fadeOutDown",outPositionAbsolute:o});t||(t=e.in),n||(n=e.out)}const a=(0,l.iB)();return l.dy`
    <div oninit=${t} ondestroy=${n} style.--animate-duration=${e}>${a}</div>
  `.acceptInnerHTML(a)}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={exports:{}};return t[r](a,a.exports,e),a.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{e.d(r,{gV:()=>xn,jG:()=>_n,fm:()=>t.fm,KH:()=>Cn,bX:()=>t.bX,mK:()=>D});var t=e(347),n=e(232);const o=(0,t._q)((()=>(e=(0,t.fo)(0),r=(0,t.td)(0),o=0,s=0,c=(0,t.$q)((t=>[{renderCount:s,counter:o}]=t({renderCount:s,counter:o}))))=>(++s,t.dy.dom(a.allStrings2265941[1],(0,t.Ld)(e),r,o,(()=>{++o,e.next(o),r.value=o}),(0,n.v)({renderCount:s,name:"insideMultiRender"}))))),a={allStrings2265941:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"div",ch:[{nn:"span",ch:[{nn:"text",tc:"👍"},{nn:"span",at:[["id","👍-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"button",at:[["type","button"],["id","👍-counter-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"++👍"}]}]},{nn:"text",v:3},{nn:"hr"},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"insideMultiRender"}]},{nn:"text",v:4}]}],[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var s=e(995);let c=null;function l(t=!0,n,r){null!==c&&(clearTimeout(c),console.debug("🏃 Cleared previous testing to start again..."));c=setTimeout((async()=>{n=n||u.views,console.debug("🏃 Prepare test suites...");const o=await async function(t,n=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let r=0;n&&(await Promise.resolve().then(e.bind(e,451)),++r),t.includes(i.Content)&&(await Promise.resolve().then(e.bind(e,118)),await Promise.resolve().then(e.bind(e,835)),++r),t.includes(i.Counters)&&(await Promise.resolve().then(e.bind(e,428)),++r),t.includes(i.Props)&&(await Promise.resolve().then(e.bind(e,749)),++r),t.includes(i.ProviderDebug)&&(await Promise.resolve().then(e.bind(e,186)),++r),t.includes(i.TagSwitchDebug)&&(await Promise.resolve().then(e.bind(e,168)),++r),t.includes(i.Child)&&(await Promise.resolve().then(e.bind(e,527)),++r),t.includes(i.Arrays)&&(await Promise.resolve().then(e.bind(e,842)),++r),t.includes(i.Mirroring)&&(await Promise.resolve().then(e.bind(e,774)),++r),t.includes(i.WatchTesting)&&(await Promise.resolve().then(e.bind(e,702)),++r),t.includes(i.FunInPropsTag)&&(await Promise.resolve().then(e.bind(e,157)),++r),t.includes(i.AttributeDebug)&&(await Promise.resolve().then(e.bind(e,178)),++r),t.includes(i.OneRender)&&(await Promise.resolve().then(e.bind(e,994)),++r),t.includes(i.Todo)&&(await Promise.resolve().then(e.bind(e,337)),++r),t.includes(i.Destroys)&&(await Promise.resolve().then(e.bind(e,236)),++r),console.debug(`🏃 Running ${r} test suites...`);try{const t=Date.now(),n=await(0,s.executeBrowserTests)(),e=Date.now()-t;return console.info(`✅ tests completed in ${e}ms`),n}catch(t){return console.error("❌ tests failed:",t),!1}}(n,r);t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var i;!function(t){t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug"}(i||(i={}));const u=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(i)});return JSON.parse(t)}();function d(){localStorage.taggedjs=JSON.stringify(u)}const p=Object.values(i),h=(n=p)=>{const e=[...n].sort(((t,n)=>t.localeCompare(n)));return t.dy.dom(b.allStrings428820[0],e.map((n=>t.dy.dom(b.allStrings428820[1],"view-type-"+n,"view-type-"+n,u.views.includes(n)&&"checked",(()=>function(t,n=!0){u.views.includes(t)?f(t):g.next({type:t,checkTesting:n});d()}(n)),"view-type-"+n,n,`isolated.html#${n}`,`#${n}`).key(n))),n.length>1&&t.dy.dom(b.allStrings428820[2],(()=>n.forEach((t=>{x(t,!1),d()}))),(()=>n.forEach((t=>{f(t),d()})))))};h.tempNote="sections";const g=new t.xQ;function f(t){u.views=u.views.filter((n=>n!==t))}function x(t,n=!0){u.views.push(t),n&&u.autoTest&&l()}const b={allStrings428820:[[{nn:"div",ch:[{nn:"h3",ch:[{nn:"text",tc:"Sections"}]},{nn:"text",tc:"\x3c!-- checkbox menu --\x3e"},{nn:"div",at:[["style","display:flex;gap:1em;flex-wrap:wrap;margin:1em;"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n\n        "},{nn:"text",v:1}]}]}],[{nn:"div",at:[["style","flex:1;white-space:nowrap;"]],ch:[{nn:"input",at:[["type","checkbox"],["id",{tagJsVar:0},null],["name",{tagJsVar:1},null],[{tagJsVar:2}],["click",{tagJsVar:3},null]]},{nn:"label",at:[["for",{tagJsVar:4},null]],ch:[{nn:"text",tc:"&nbsp;"},{nn:"text",v:5}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;text-decoration:none;"],["href",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🔗"}]},{nn:"text",tc:"&nbsp;"},{nn:"a",at:[["style","font-size:.6em;"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"↗️"}]}]}],[{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"&nbsp;all"}]}]},{nn:"div",ch:[{nn:"label",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"&nbsp;none"}]}]}]]},v=(0,t._q)(((n,e)=>t.dy.dom(y.allStrings19347[0],n,(()=>e(n))))),y={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},m=(0,t._q)(((e,r,o)=>(a="other",s=0,c=0,l=(0,t.$q)((t=>[{other:a,counter:s,renderCount:c}]=t({other:a,counter:s,renderCount:c}))),i=++c,{addArrayItem:u,myFunction:d,deleteItem:p,child:h,array:g}=e)=>t.dy.dom(w.allStrings598669[0],r.function.original?"taggjedjs-wrapped":"nowrap",r.count,h.myChildFunction.original?"taggjedjs-wrapped":"nowrap",d.original?"taggjedjs-wrapped":"nowrap",d,(0,t.J8)(h.myChildFunction),o,C.function,(()=>++s),g.length,g.map((t=>v(t,p).key(t))),u,s,(0,n.v)({renderCount:c,name:"funInProps_tag_child"})))),w={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},_=(0,t._q)((e=>(r=0,o=(0,t.$q)((t=>[r]=t(r))),a=++r,s=(t=>{if("Enter"===t.key){const n=t.target.value.trim();e(n),t.target.value=""}}))=>t.dy.dom(S.allStrings66965[0],s,(t=>{e(t.target.value),t.target.value=""}),e,(0,n.v)({renderCount:r,name:"addArrayComponent"})))),S={allStrings66965:[[{nn:"input",at:[["type","text"],["keyup",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"add by outside"}]},{nn:"text",v:3},{nn:"text",tc:"\n"}]]},C={function:()=>++C.count,count:0},k=(0,t._q)((()=>(e=[],r=0,o=0,a=!0,s="a",c=(()=>++r),l=(0,t.$q)((t=>[{array:e,counter:r,renderCount:o,showChild:a,somethingElse:s}]=t({array:e,counter:r,renderCount:o,showChild:a,somethingElse:s}))),i=++o,u=(t=>{e=e.map((t=>t)),e.push("string"==typeof t?t:"push"+e.length)}),d=(t=>e=e.filter((n=>n!==t))))=>t.dy.dom(V.allStrings360652[0],c,r,(0,n.v)({renderCount:o,name:"funInProps_tag_parent"}),C.function.original?"taggjedjs-wrapped":"nowrap",C.count,(()=>a=!a),e.length,u,a&&m({myFunction:c,array:e,addArrayItem:u,deleteItem:d,child:{myChildFunction:c}},C,c),_(u)))),V={allStrings360652:[[{nn:"button",at:[["id","fun-parent-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🤰 ++parent"}]},{nn:"span",at:[["id","fun_in_prop_display"]],ch:[{nn:"text",v:1}]},{nn:"text",v:2},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"🆎 main:"}]},{nn:"span",at:[["id","main_wrap_state"]],ch:[{nn:"text",v:3}]},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"button",at:[["id","toggle-fun-in-child"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"toggle child"}]},{nn:"text",tc:"array length: "},{nn:"text",v:6},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"reset add"}]},{nn:"hr"},{nn:"text",v:8},{nn:"text",tc:"\n  \n  "},{nn:"text",v:9},{nn:"text",tc:"\n"}]]},T=t._q.immutableProps(((n,e,r)=>(o=!1,a=(0,t.$q)((t=>[o]=t(o))))=>t.dy.dom(B.allStrings172763[0],n.completed,o,o?t.dy.dom(B.allStrings172763[2],n.title,(()=>o=!1),(t=>J(t,(t=>{!function(t,n,e,r){if(0===t.length)return void r.removeItem(n.id);r.updateToByIndex(n,{title:t},e)}(t,n,r,e),o=!1})))):t.dy.dom(B.allStrings172763[1],n.completed&&"✅",(t=>e.toggleItem(n,r)),n.completed&&"checked",(()=>e.toggleItem(n,r)),(()=>o=!o),n.title,(()=>e.removeItemByIndex(r))))));function J(t,n){if("Enter"===t.key){return n(t.target.value.trim()),!0}}const B={allStrings172763:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},j={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},I=t._q.immutableProps(((n,e,r,o)=>t.dy.dom(L.allStrings77156[0],o,o>1&&"s","/"===r,"/active"===r,"/completed"===r,n-o>0&&t.dy.dom(L.allStrings77156[1],(()=>e()))))),L={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const E=()=>window.location.hash.substring(1)||"/",P=()=>{const n=(0,t.SB)((()=>({route:E(),location:window.location}))),e=(0,t.uz)((t=>n.route=E())),r=(0,t.SB)((()=>(t=>{const n=()=>t(E());return window.addEventListener("hashchange",n),n})(e)));return(0,t.ev)((()=>window.removeEventListener("hashchange",r))),n},O=[],A=function(t){function n(n,e,r){return t[r]={...n,...e},t}return{addItem:function(n){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var n=16*Math.random()|0;return("x"===t?n:3&n|8).toString(16)})),title:n,completed:!1}),t},removeItem:function(n){return t.filter((t=>t.id!==n))},toggleItem:function(t,e){return n(t,{completed:!t.completed},e)},removeAll:function(){return t=[]},toggleAll:function(n){for(let e=t.length-1;e>=0;--e)t[e]={...t[e],completed:n};return t},removeCompleted:function(){for(let n=t.length-1;n>=0;--n)t[n].completed&&t.splice(n,1);return t},removeItemByIndex:function(n){return t.splice(n,1),t},completeItem:function(t,e){return n(t,{completed:!0},e)},updateItemByIndex:function(n,e){return t[e]={...n},t},updateToByIndex:n}}(O),D=()=>{const n=P().route,e=O.filter((t=>!t.completed)).length,r="/completed"===n,o="/active"===n&&O.filter((t=>!t.completed))||r&&O.filter((t=>t.completed))||O,a=O.length;return t.dy.dom(N.allStrings150746[0],!1,(n=>t._q.renderOnce=()=>t.dy.dom(j.allStrings47860[0],(t=>{J(t,(t=>n.addItem(t)))&&(t.target.value="")})))(A),a>0&&t.dy.dom(N.allStrings150746[1],e<1,(t=>A.toggleAll(t.target.checked)),o.map(((t,n)=>T(t,A,n).key(t.id))),I(a,A.removeCompleted,n,e)))},N={allStrings150746:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},$=(0,t._q)(((e,r,o)=>{let a=0,s=0;return(0,t.$q)((t=>[{counter:a,renderCount:s}]=t({counter:a,renderCount:s}))),++s,t.dy.dom(H.allStrings128026[0],o,(0,t.DE)(o),o instanceof Array,(()=>++a),a,a,(0,n.v)({renderCount:s,name:"innerHtmlTest"}))})),q=(0,t._q)(((n,e)=>(r=0,o=0,a=(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),s=++o)=>t.dy.dom(H.allStrings128026[1],n,e,(()=>++r),r,r,!1))),H={allStrings128026:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"no props test"}]},{nn:"div",at:[["style","border:2px solid purple;"]],ch:[{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectInstance:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"isSubjectTagArray:"},{nn:"text",v:2}]},{nn:"button",at:[["id","innerHtmlTest-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"increase innerHtmlTest "},{nn:"text",v:4}]},{nn:"span",at:[["id","innerHtmlTest-counter-display"]],ch:[{nn:"text",v:5}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},M=(0,t._q)(((n,e,r)=>t.dy.dom(W.allStrings795052[0],n,e,r))),R=(0,t._q)(((e="childTests")=>(e=0,r=0,o=(0,t.$q)((t=>[{renderCount:e,counter:r}]=t({renderCount:e,counter:r}))),a=++e)=>t.dy.dom(W.allStrings795052[2],M(1,2,t.dy.dom(W.allStrings795052[3],Date.now())),$({},2,t.dy.dom(W.allStrings795052[4],(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest"}))),(()=>{const n=(0,t.iB)();return t.dy.dom(W.allStrings795052[1],11,n,22).acceptInnerHTML(n)})().innerHTML=t.dy.dom(W.allStrings795052[5],(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests-innerHtmlTest-c"})),q(22,t.dy.dom(W.allStrings795052[6],(()=>++r),r,r,(0,n.v)({renderCount:e,name:"innerHtmlPropsTest child"}))),function({child:n}){return t.dy.dom(W.allStrings795052[8],n)}({child:t.dy.dom(W.allStrings795052[7],(()=>++r),r,r)}),(()=>++r),r,e,r,(0,n.v)({renderCount:e,name:"childTests"}))));const W={allStrings795052:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"xxxxx"}]},{nn:"div",ch:[{nn:"text",tc:"hello other world "},{nn:"text",v:0},{nn:"text",tc:" - "},{nn:"text",v:1}]},{nn:"div",at:[["style","border:2px solid red;"]],ch:[{nn:"text",tc:"***"},{nn:"text",v:2},{nn:"text",tc:"***"}]}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}],[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child as prop"}]},{nn:"text",v:0}]}]]};let z=(0,t.td)(0);const X=(0,t._q)((()=>(e=!0,r=0,o=(0,t.$q)((t=>[{renderCount:r,on:e}]=t({renderCount:r,on:e}))),a=++r)=>t.dy.dom(U.allStrings72990[0],z,e,e&&Y(),(()=>{e=!e}),e?"destroy":"restore",(0,n.v)({renderCount:r,name:"destroys"})))),Y=(0,t._q)((()=>(n=(0,t.ev)((()=>{++z.value})))=>t.dy.dom(U.allStrings72990[1],t.ho.onDestroy((()=>{++z.value}))))),U={allStrings72990:[[{nn:"text",tc:"\n  destroyCount: "},{nn:"span",at:[["id","destroyCount"]],ch:[{nn:"text",v:0}]},{nn:"text",tc:"on/off: "},{nn:"text",v:1},{nn:"text",tc:"\n  \n  "},{nn:"text",v:2},{nn:"button",at:[["id","toggle-destroys"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","destroyable-content"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"will be destroyed"}]}]]};var F=e(149);const Q=(0,t._q)((({score:e,playerIndex:r})=>{let o=0;return(0,t.$q)((t=>[o]=t(o))),++o,t.dy.dom(G.allStrings67878[0],e.frame,`score-data-${r}-${e.frame}-inside-button`,(()=>++e.score),e.score,`score-data-${r}-${e.frame}-inside-display`,e.score,(()=>++o),(0,n.v)({renderCount:o,name:"scoreData"+e.frame}))})),G={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},K=(0,t._q)((()=>(e=(0,t.SB)([]),r=0,o=0,a=(0,t.$q)((t=>[{counter:o,renderCount:r}]=t({counter:o,renderCount:r}))))=>{const s=(0,t.IX)(["d","e","f"]),c=(0,t.SB)(["a","b","c"]),l=(0,t.SB)((()=>(0,F.rW)({stagger:10,duration:".1s"}))),i=()=>({name:"Person "+e.length,scores:"0,".repeat(0).split(",").map(((t,n)=>({frame:n+1,score:Math.floor(4*Math.random())+1})))});function u(t){for(let n=0;n<t;++n)s[s.length]=s.length.toString()}return++r,t.dy.dom(tt.allStrings873968[0],o,s.length,(0,t.Ld)(s,(n=>n.map(((n,e)=>t.dy.dom(tt.allStrings873968[1],l,`signal-array-item-${e}`,e,`signal-array-item-counter-display-${e}`,o,n,s.length,`signal-array-item-delete-btn-${e}`,(()=>{s.splice(e,1)}),(()=>++o),o).key(n))))),(()=>++o),o,(()=>u(1)),(()=>u(10)),(()=>{setTimeout((()=>{s[s.length]=s.length.toString()}),1e3)}),(()=>{setTimeout((()=>{s.length=0}),1e3)}),c.map(((n,e)=>t.dy.dom(tt.allStrings873968[2],o,e,n,c.length,(()=>{c.splice(e,1)})).key(n))),(()=>++o),o,(()=>c[c.length]=c.length.toString()),Z({players:e,getNewPlayer:i}),(()=>{e.push(i())}),e.length+1,(()=>{e.push(i()),e.push(i()),e.push(i())}),(()=>{e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i()),e.push(i())}),e.length>0&&t.dy.dom(tt.allStrings873968[3],(0,F.fx)({duration:".1s"}),(()=>e.length=0)),(0,n.v)({renderCount:r,name:"arrayTests.ts"}))})),Z=(0,t._q)((({players:n,getNewPlayer:e})=>{const r=n.map(((r,o)=>function(n,e,r,o){return t.dy.dom(tt.allStrings873968[5],(0,F.fx)({duration:".1s"}),n.name,e,n.scores.map(((n,e)=>t.dy.dom(tt.allStrings873968[6],(0,F.fx)(),`score-data-${e}-${n.frame}-outside-button`,(()=>++n.score),n.score,`score-data-${e}-${n.frame}-outside-display`,n.score,Q({score:n,playerIndex:e})).key(n))),n.edit&&t.dy.dom(tt.allStrings873968[7],(()=>{r.splice(e,1),n.edit=!n.edit})),n.edit&&t.dy.dom(tt.allStrings873968[8],"player-remove-promise-btn-"+e,(async()=>{n.edit=!n.edit,r.splice(e,1)})),"player-edit-btn-"+e,(()=>n.edit=!n.edit),(()=>{r.splice(e,0,o())}))}(r,o,n,e).key(r)));return t.dy.dom(tt.allStrings873968[4],r)}));const tt={allStrings873968:[[{nn:"text",tc:"\x3c!--arrayTests.js--\x3e"},{nn:"span",ch:[{nn:"text",tc:"count display:"},{nn:"span",at:[["id","arrays-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"signal array test "},{nn:"sup",at:[["id","signal-array-count"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:2}]},{nn:"div",ch:[{nn:"button",at:[["type","button"],["id","signal-array-increase-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:4}]},{nn:"button",at:[["type","button"],["id","push-signal-array-btn"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"add number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"add 10 number"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"add number by delay"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"delay clear array"}]}]}]},{nn:"fieldset",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"simple array test"}]},{nn:"text",v:9},{nn:"div",ch:[{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:11}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"add number"}]}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:13}]},{nn:"button",at:[["id","array-test-push-item"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"push item "},{nn:"text",v:15}]},{nn:"button",at:[["click",{tagJsVar:16},null]],ch:[{nn:"text",tc:"push 3 items"}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"push 9 items"}]},{nn:"text",v:18},{nn:"text",tc:"\n\n    "},{nn:"text",v:19},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","border:1px solid black;border-radius:.2em"],[{tagJsVar:0}],["id",{tagJsVar:1},null]],ch:[{nn:"text",tc:"index:"},{nn:"text",v:2},{nn:"text",tc:" counter:"},{nn:"span",at:[["id",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]},{nn:"text",tc:" content:"},{nn:"text",v:5},{nn:"text",tc:" length:"},{nn:"text",v:6},{nn:"button",at:[["id",{tagJsVar:7},null],["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"++counter "},{nn:"text",v:10}]}]}],[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"text",v:0},{nn:"text",tc:" index:"},{nn:"text",v:1},{nn:"text",tc:" x:"},{nn:"text",v:2},{nn:"text",tc:" length:"},{nn:"text",v:3},{nn:"button",at:[["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🗑️ delete me"}]}]}],[{nn:"button",at:[[{tagJsVar:0}],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove all"}]}],[{nn:"text",tc:"\x3c!-- playersLoop.js --\x3e"},{nn:"text",v:0},{nn:"text",tc:"\x3c!-- end:playersLoop.js --\x3e"}],[{nn:"div",at:[["style","background-color:black;"],[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",tc:"name:"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"text",tc:"index:"},{nn:"text",v:2}]},{nn:"div",at:[["style","background-color:purple;padding:.5em"]],ch:[{nn:"text",tc:"scores:\n        "},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n      "},{nn:"text",v:5},{nn:"button",at:[["id",{tagJsVar:6},null],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"edit"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"add before"}]}]}],[{nn:"div",at:[["class","animate__slow"],[{tagJsVar:0}]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"outer score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6}]}]}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"remove"}]}],[{nn:"button",at:[["id",{tagJsVar:0},null],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"remove by promise"}]}]]},nt=(0,t._q)(((e="tagSwitchDebug")=>{let r=null,o=0;(0,t.$q)((t=>[{renderCount:o,selectedTag:r}]=t({renderCount:o,selectedTag:r})));let a="select tag below";switch(r){case null:a="null, select tag below";break;case"":a=t.dy.dom(ct.allStrings484932[0]);break;case"1":a=rt({title:"value switch"});break;case"2":a=ot({title:"value switch"});break;case"3":a=at({title:"value switch"})}let s=t.dy.dom(ct.allStrings484932[1]);switch(r){case null:s=t.dy.dom(ct.allStrings484932[2]);break;case"":s=t.dy.dom(ct.allStrings484932[3]);break;case"1":s=rt({title:"tag switch"});break;case"2":s=ot({title:"tag switch"});break;case"3":s=at({title:"tag switch"})}return++o,t.dy.dom(ct.allStrings484932[4],(null===r?"null":void 0===r&&"undefined")||""===r&&"empty-string"||r,(function(t){r=t.target.value,"undefined"===r&&(r=void 0),"null"===r&&(r=null)}),"string"!=typeof r||r.length?{}:{selected:!0},void 0===r?{selected:!0}:{},null===r?{selected:!0}:{},"1"===r?{selected:!0}:{},"2"===r?{selected:!0}:{},"3"===r?{selected:!0}:{},a,s,"3"===r?at({title:"ternary simple"}):rt({title:"ternary simple"}),et({selectedTag:r}),st({selectedTag:r}),(0,n.v)({renderCount:o,name:"tagSwitchDebug"}))})),et=(0,t._q)((({selectedTag:n})=>{const e="3"===n?at({title:"ternaryPropTest"}):rt({title:"ternaryPropTest"});return t.dy.dom(ct.allStrings484932[5],n,e)})),rt=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[6],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),ot=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[7],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),at=(0,t._q)((({title:e})=>{let r=0,o=0;return(0,t.$q)((t=>[{counter:r,renderCount:o}]=t({counter:r,renderCount:o}))),++o,t.dy.dom(ct.allStrings484932[8],e,(()=>++r),r,(0,n.v)({renderCount:o,name:"tag1"}))})),st=(0,t._q)((({selectedTag:n},e="arraySwitching")=>{switch(n){case void 0:return t.dy.dom(ct.allStrings484932[9]);case null:return t.dy.dom(ct.allStrings484932[10]);case"":return t.dy.dom(ct.allStrings484932[11]);case"1":return t.dy.dom(ct.allStrings484932[12],rt({title:`tag ${n}`}));case"2":return t.dy.dom(ct.allStrings484932[13],["b","c"].map((e=>t.dy.dom(ct.allStrings484932[14],ot({title:`array ${n} ${e}`})).key(e))));case"3":return t.dy.dom(ct.allStrings484932[15],["d","e","f"].map((e=>t.dy.dom(ct.allStrings484932[16],at({title:`array ${n} ${e}`})).key(e))))}return t.dy.dom(ct.allStrings484932[17])})),ct={allStrings484932:[[{nn:"div",at:[["id","empty-string-1"]]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"null, select tag above"}]}],[{nn:"div",at:[["id","select-tag-above"]],ch:[{nn:"text",tc:"empty-string, select tag above"}]}],[{nn:"div",at:[["id","selectTag-wrap"]],ch:[{nn:"text",tc:"selectedTag: |"},{nn:"text",v:0},{nn:"text",tc:"|"}]},{nn:"select",at:[["id","tag-switch-dropdown"],["change",{tagJsVar:1},null]],ch:[{nn:"option"},{nn:"text",tc:"\x3c!-- TODO: implement selected attribute ---\x3e"},{nn:"option",at:[["value",""],[{tagJsVar:2}]],ch:[{nn:"text",tc:"empty-string"}]},{nn:"option",at:[["value","undefined"],[{tagJsVar:3}]],ch:[{nn:"text",tc:"undefined"}]},{nn:"option",at:[["value","null"],[{tagJsVar:4}]],ch:[{nn:"text",tc:"null"}]},{nn:"option",at:[["value","1"],[{tagJsVar:5}]],ch:[{nn:"text",tc:"tag 1"}]},{nn:"option",at:[["value","2"],[{tagJsVar:6}]],ch:[{nn:"text",tc:"tag 2"}]},{nn:"option",at:[["value","3"],[{tagJsVar:7}]],ch:[{nn:"text",tc:"tag 3"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],["id","switch-tests-wrap"]],ch:[{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 1 - string | Tag"}]},{nn:"div",ch:[{nn:"text",v:8}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 2 - Tag"}]},{nn:"div",ch:[{nn:"text",v:9}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3 - ternary (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:10}]}]},{nn:"div",at:[["style","border:1px solid blue;flex-grow:1"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 3.2 - ternary via prop (only 1 or 3 shows)"}]},{nn:"div",ch:[{nn:"text",v:11}]}]},{nn:"div",at:[["style","border:1px solid red;flex-grow:1"],["id","arraySwitching-test-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Test 4 - arraySwitching"}]},{nn:"div",at:[["id","arraySwitching-wrap"]],ch:[{nn:"text",v:12}]}]}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["id","ternaryPropTest-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:":"},{nn:"text",v:1}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag1"]],ch:[{nn:"div",at:[["id","tagSwitch-1-hello"]],ch:[{nn:"text",tc:"Hello 1 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag2"]],ch:[{nn:"div",at:[["id","tagSwitch-2-hello"]],ch:[{nn:"text",tc:"Hello 2 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"div",at:[["style","border:1px solid orange;"],["id","tag3"]],ch:[{nn:"div",at:[["id","tagSwitch-3-hello"]],ch:[{nn:"text",tc:"Hello 3 "},{nn:"text",v:0},{nn:"text",tc:" World"}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"increase "},{nn:"text",v:2}]},{nn:"text",v:3}]}],[{nn:"text",tc:"its an undefined value"}],[{nn:"text",tc:"its a null value"}],[{nn:"text",tc:"space"}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",v:0}],[{nn:"text",tc:"nothing to show for in arrays"}]]},lt=(0,t._q)((()=>{const n=it();return t.dy.dom(ut.allStrings156734[0],n,n)})),it=()=>{let n=0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(ut.allStrings156734[1],n,(()=>++n),n)},ut={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},dt=(e,r)=>t._q.use=(o=(0,t.SB)("statePropDebug.tag.ts"),a=!1,s=0,c=(0,t.$q)((t=>[{edit:a,renderCount:s}]=t({edit:a,renderCount:s}))),l=++s)=>t.dy.dom(pt.allStrings53929[0],e,(()=>a=!a),a,r,(0,n.v)({renderCount:s,name:"statePropDebug-tag"})),pt={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},ht=(0,t._q)(((e="propsDebugMain")=>(e=0,r=0,o=0,a={test:33,x:"y"},s=(0,t.SB)((()=>new Date)),c=JSON.stringify(a,null,2),l=!0,i=(0,t.$q)((t=>[{syncPropNumber:e,propNumber:r,renderCount:o,propsJson:a,date:s,statePropDisplay:l}]=t({syncPropNumber:e,propNumber:r,renderCount:o,propsJson:a,date:s,statePropDisplay:l}))))=>t.dy.dom(vt.allStrings3197847[0],(t=>a=JSON.parse(t.target.value)),c,c,++o,(()=>++r),r,r,xt({propNumber:r,propsJson:a,propNumberChange:t=>{r=t}}),e,(()=>++e),(0,n.v)({renderCount:o,name:"sync_props_callback"}),ft({syncPropNumber:e,propNumberChange:t=>e=t,parentTest:t=>t}),l&&dt(r,t.dy.dom(vt.allStrings3197847[1])),(()=>l=!l),s,function(t){const n=new Date(t),e=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),o=String(n.getDate()).padStart(2,"0"),a=String(n.getHours()).padStart(2,"0"),s=String(n.getMinutes()).padStart(2,"0");return{date:`${e}-${r}-${o}`,time:`${a}:${s}`}}(s).date,(t=>{const n=t.target.value;s=new Date(n)}),gt({date:s})))),gt=(0,t._q)((({date:n})=>t.dy.dom(vt.allStrings3197847[2],n))),ft=(0,t._q)((({syncPropNumber:e,propNumberChange:r,parentTest:o})=>(a=(0,t.SB)("syncPropDebug"),s=0,c=0,l=(0,t.$q)((t=>[{counter:s,renderCount:c}]=t({counter:s,renderCount:c}))))=>(++c,e%2==1&&r(e+=1),t.dy.dom(vt.allStrings3197847[3],e,(()=>r(++e)),s,o(s),(()=>{o(++s)}),(0,n.v)({renderCount:c,name:"child_sync_props_callback"}))))),xt=(0,t._q)((({propNumber:n,propsJson:e,propNumberChange:r})=>(o=(0,t.SB)("propsDebug"),a=0,s=0,c=(0,t.RW)((t=>[n]=t(n))),l=n,i=(0,t.$q)((t=>[{renderCount:a,propNumberChangeCount:s,myPropNumber:l}]=t({renderCount:a,propNumberChangeCount:s,myPropNumber:l}))),u=(0,t.YP)([n],(()=>l=n)),d=(0,t.YP)([l],(()=>++s)))=>t.dy.dom(vt.allStrings3197847[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(d,null,2),(()=>r(++l)),l,l,(()=>++n),n,n,(()=>++a),++a,(()=>++l),l,s,bt({propNumber:l,callback:()=>++l})))),bt=t._q.immutableProps((({propNumber:e,callback:r})=>(o=(0,t.SB)("propFnUpdateTest"),a=0,s=(0,t.$q)((t=>[a]=t(a))))=>(++a,t.dy.dom(vt.allStrings3197847[5],r,e,e,(0,n.v)({renderCount:a,name:"propFnUpdateTest"})))));const vt={allStrings3197847:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},yt=(0,t._q)((n=>t.dy.dom(mt.allStrings248805[0],(()=>n.showDialog=!1),n.showDialog?t.dy.dom(mt.allStrings248805[1],JSON.stringify(n,null,2)):"no dialog"))),mt={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]};class wt{constructor(){this.tagDebug=0,this.showDialog=!1}}const _t=()=>({counter:0});function St(){return{upper:t.a.create(Ct),test:0}}function Ct(){return(0,t.SB)("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const kt=(0,t._q)(((e="providerDebugBase")=>{t.a.create(_t);const r=t.a.create(wt),o=t.a.create(St);let a=0,s=0;return(0,t.$q)((t=>[{propCounter:a,renderCount:s}]=t({propCounter:a,renderCount:s}))),r.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++s,t.dy.dom(Pt.allStrings6842045[0],o.test,o.upper?.test||"?",r.tagDebug||"?",(()=>++o.test),o.test,o.test,(()=>++o.upper.test),o.upper.test,o.upper.test,(()=>++r.tagDebug),r.tagDebug,r.tagDebug,(()=>++a),a,a,(()=>r.showDialog=!0),r.showDialog,Vt({propCounter:a,propCounterChange:t=>{a=t}}),s,(0,n.v)({renderCount:s,name:"providerDebugBase"}),yt(r),Et())})),Vt=(0,t._q)((({propCounter:e,propCounterChange:r,_:o="providerDebug.js@child"})=>{const a=t.a.inject(_t),s=t.a.inject(St),c=t.a.inject(wt),l=t.a.inject(Ct);let i=!1,u=0;(0,t.$q)((t=>[{showProProps:i,renderCount:u}]=t({showProProps:i,renderCount:u})));const d=(0,t._)(),p=(0,t.SB)((()=>new t.xQ));return(0,t.nc)((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),p.subscribe((t=>{d((n=>{s.test=t}))()}))})),++u,t.dy.dom(Pt.allStrings6842045[4],(()=>++s.test),s.test,s.test,(()=>++l.test),l.test,l.test,(()=>++a.counter),a.counter,a.counter,(()=>p.next(s.test+1)),s.test,(()=>++c.tagDebug),c.tagDebug,c.tagDebug,(()=>r(++e)),e,e,(()=>c.showDialog=!0),c.showDialog,(()=>i=!i),i?"hide":"show",i&&t.dy.dom(Pt.allStrings6842045[5],(0,F.fx)(),Tt(c)),u,(0,n.v)({renderCount:u,name:"providerDebugInner"}))})),Tt=(0,t._q)((n=>t.dy.dom(Pt.allStrings6842045[6],JSON.stringify(n,null,2)))),Jt=(0,t.ho)(((n="red")=>{const e=t._q.getElement();return e.style.border="2px solid "+n,e.style.display="flex",e.style.gap="1em",{color:n,title:"inCycleParent"}})),Bt=(0,t.ho)(((n="green")=>{const e=t._q.inject(Jt),r=t._q.getElement();r.style.border="2px solid "+n,r.style.flex="1",r.innerHTML=`wonderful - parent(${e.color})`})),jt=(0,t.ho)(((n="green")=>{const e=t._q.getElement();e.style.border="2px solid "+n,e.style.flex="1"})),It=(0,t.ho)(((n="green")=>{t._q.getElement().style.color=n})),Lt=["red","blue","green","purple","orange"],Et=(0,t._q)((()=>{let n="red",e="green",r="green",o=!1;return(0,t.$q)((t=>[{cycleColorParent:n,cycleColorChild:e,cycleColorChild2:r,hideShowCycles:o}]=t({cycleColorParent:n,cycleColorChild:e,cycleColorChild2:r,hideShowCycles:o}))),t.dy.dom(Pt.allStrings6842045[7],!o,(t=>o=!o),!o&&t.dy.dom(Pt.allStrings6842045[8],(t=>n=t.target.value),Lt.map((e=>t.dy.dom(Pt.allStrings6842045[9],e,n===e,e).key(e))),(t=>e=t.target.value),Lt.map((n=>t.dy.dom(Pt.allStrings6842045[10],n,e===n,n).key(n))),(t=>r=t.target.value),Lt.map((n=>t.dy.dom(Pt.allStrings6842045[11],n,r===n,n).key(n))),Jt(n),Bt(e),jt(r),It(r)))})),Pt={allStrings6842045:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}],[{nn:"fieldset",at:[["id","in-cycle-context-comms"]],ch:[{nn:"legend",ch:[{nn:"label",ch:[{nn:"input",at:[["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"text",tc:"In-Cycle Context Communication"}]}]},{nn:"text",v:2}]}],[{nn:"div",at:[["style","margin-bottom: 1em"],["id","fieldset-body-wrap"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:2},null]],ch:[{nn:"text",v:3}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:6}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:7}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",tc:"wonderful too\n            "},{nn:"text",v:8},{nn:"span",ch:[{nn:"text",tc:"part 2"},{nn:"text",v:9}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},Ot=(0,t._q)((({label:n,memory:e})=>{let r=!1,o=!1;return(0,t.$q)((t=>[{mouseOverEditShow:r,edit:o}]=t({mouseOverEditShow:r,edit:o}))),t.dy.dom(At.allStrings140407[0],(()=>r=!0),(()=>r=!1),n,e.counter,r||"false",(()=>++e.counter),o||r?"visible":"hidden",(()=>o=!o))})),At={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Dt=Date.now(),Nt=t._q.immutableProps((({appCounterSubject:n},e="countersDebug")=>((0,t.SB)("countersDebug state"),t.dy.dom(Rt.allStrings9522277[0],(0,t.Ld)(t.xQ.globalSubCount$),(()=>console.info("subs",t.xQ.globalSubs)),(()=>n.next((n.value||0)+1)),(0,t.Ld)(n),n.value,Mt())))),$t=t._q.deepPropWatch((({propCounter:e,increasePropCounter:r})=>(o=0,a=0,s=0,c=(0,t.$q)((t=>[{elmInitCount:s,otherCounter:o,renderCount:a}]=t({elmInitCount:s,otherCounter:o,renderCount:a}))),l=++a)=>t.dy.dom(Rt.allStrings9522277[1],t.ho.onInit((()=>++s)),s,r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"inner_counters"})))),qt=t._q.watchProps((({propCounter:e,increasePropCounter:r})=>{let o=0,a=0;return(0,t.$q)((t=>[{otherCounter:o,renderCount:a}]=t({otherCounter:o,renderCount:a}))),++a,t.dy.dom(Rt.allStrings9522277[2],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"shallow_counters"}))})),Ht=t._q.immutableProps((({propCounter:e,increasePropCounter:r})=>{let o=0,a=0;return(0,t.$q)((t=>[{otherCounter:o,renderCount:a}]=t({otherCounter:o,renderCount:a}))),++a,t.dy.dom(Rt.allStrings9522277[3],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"immutable_counters"}))})),Mt=()=>t._q.use=(e=0,r=0,o=0,a=0,s=0,c=0,l=0,i=(0,t._)(),u=(0,t.uz)((t=>{t})),d=(()=>{++c}),p=(0,t.SB)((()=>({propCounter:c,increasePropCounter:d}))),h=(0,t.$q)((t=>[{counter:o,renderCount:s,propCounter:c,initCounter:l,immutableProps:p,statesRenderCount:e,statesRenderCount2:r}]=t({counter:o,renderCount:s,propCounter:c,initCounter:l,immutableProps:p,statesRenderCount:e,statesRenderCount2:r}))),g=(0,t.SB)((()=>new t.xQ(o))),f=(0,t.SB)((()=>new t.xQ(0))),x=(0,t.SB)((()=>new t.v0("222"))),b=(()=>{++o,x.next("333-"+o)}),v=t.xQ.all([x,g]),y=t.fo.all([x,g]),m=(0,t.SB)((()=>({counter:0}))),w=(0,t.SB)((()=>Date.now())),_=(0,t.nc)((()=>{++l,console.info("countersDebug.ts: 👉 i should only ever run once"),g.subscribe(i((t=>{o=t}))),g.subscribe(u)})))=>(p.propCounter!==c&&(p={propCounter:c,increasePropCounter:d}),++s,t.dy.dom(Rt.allStrings9522277[5],l,e,(()=>{++e}),r,(()=>{++r}),(t=>o=Number(t.target.value)||0),d,c,c,b,o,o>1&&t.dy.dom(Rt.allStrings9522277[6],b,o,o),(()=>g.next(o+1)),(0,t.Ld)(g),(()=>{setTimeout((()=>{f.next(f.value+1)}),10)}),(0,t.Ld)(f),(0,t.Ld)(v,(()=>o)),(0,t.Ld)(y,(()=>o)),!0,Ot({label:"a-a-😻",memory:m}),Ot({label:"b-b-😻",memory:m}),m.counter,(()=>++m.counter),$t({propCounter:c,increasePropCounter:d}),qt({propCounter:c,increasePropCounter:d}),Ht(p),(({propCounter:e,increasePropCounter:r})=>{let o=0,a=0,s="noWatchPropCounters";return(0,t.$q)((t=>[{otherCounter:o,renderCount:a,noWatchPropCounters:s}]=t({otherCounter:o,renderCount:a,noWatchPropCounters:s}))),++a,t.dy.dom(Rt.allStrings9522277[4],r,e,e,(()=>++o),o,o,a,(0,n.v)({renderCount:a,name:"nowatch_counters"}))})({propCounter:c,increasePropCounter:d}),t.ho.onInit((t=>t.innerText=(Date.now()-Dt).toString())),t.ho.onInit((t=>t.innerText=(Date.now()-w).toString())),(0,n.v)({renderCount:s,name:"counters"}))),Rt={allStrings9522277:[[{nn:"text",tc:"\x3c!--counters--\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"text",tc:"👉 Subscription count:"},{nn:"span",at:[["id","👉-counter-sub-count"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"log subs"}]},{nn:"div",ch:[{nn:"button",at:[["id","counters-app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-display"]],ch:[{nn:"text",v:3}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counters-subject-display"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"],[{tagJsVar:0}]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"text",tc:"🔥 elmInitCount:"},{nn:"span",at:[["id","🔥-init-counter"]],ch:[{nn:"text",v:1}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️-inner-counter"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"❤️-inner-counter propCounter:"},{nn:"text",v:3}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-inner-display"]],ch:[{nn:"text",v:4}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🤿-deep-counter"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤿 otherCounter:"},{nn:"text",v:6}]},{nn:"span",ch:[{nn:"text",tc:"🤿 "},{nn:"span",at:[["id","🤿-deep-display"]],ch:[{nn:"text",v:7}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:8}]},{nn:"text",v:9},{nn:"text",tc:"\n"}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"text",tc:"initCounter:"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"text",tc:"😱 statesRenderCount:"},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"😱 ++statesRenderCount"}]}]},{nn:"div",ch:[{nn:"text",tc:"😱😱 statesRenderCount2:"},{nn:"text",v:3},{nn:"button",at:[["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"😱😱 ++statesRenderCount2"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"input",at:[["id","set-main-counter-input"],["placeholder","input counter value"],["keyup",{tagJsVar:5},null]]},{nn:"div",ch:[{nn:"button",at:[["id","❤️-increase-counter"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"❤️ propCounter:"},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"❤️ "},{nn:"span",at:[["id","❤️-counter-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-standalone-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥦 stand alone counters"}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","🥦-standalone-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"text",v:11},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-counter"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🥦&lt;"},{nn:"span",at:[["id","subject-counter-subject-display"]],ch:[{nn:"text",v:13}]},{nn:"text",tc:"&gt;"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","🥦-subject-increase-async-counter"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🔀 🥦 ++subject&lt;&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🔀 🥦&lt;"},{nn:"span",at:[["id","subject-async-counter-subject-display"]],ch:[{nn:"text",v:15}]},{nn:"text",tc:"&gt;"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 1"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject"]],ch:[{nn:"text",v:16}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🪈 pipedSubject 2"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🪈-pipedSubject-2"]],ch:[{nn:"text",v:17}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shared memory"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:.5em"],["class.bold.text-blue",{tagJsVar:18},"class"]],ch:[{nn:"text",v:19},{nn:"text",tc:"\n      "},{nn:"text",v:20}]},{nn:"text",tc:"memory.counter:😻"},{nn:"text",v:21},{nn:"button",at:[["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"increase 😻"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"inner counter"}]},{nn:"text",v:23}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"shallow props"}]},{nn:"text",v:24}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"immutable props"}]},{nn:"text",v:25}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"nowatch props"}]},{nn:"text",v:26}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ page load to display in&nbsp;"},{nn:"span",at:[[{tagJsVar:27}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"div",at:[["style","font-size:0.8em;opacity:0.8"]],ch:[{nn:"text",tc:"⌚️ read in&nbsp;"},{nn:"span",at:[[{tagJsVar:28}]],ch:[{nn:"text",tc:"-"}]},{nn:"text",tc:"ms"}]},{nn:"text",v:29},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","conditional-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"conditional counter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🥦 "},{nn:"span",at:[["id","conditional-display"]],ch:[{nn:"text",v:2}]}]}]}]]},Wt=(0,t._q)((()=>{let n=!0;return(0,t.$q)((t=>[n]=t(n))),t.dy.dom(zt.allStrings52782[0],5,5,n&&t.dy.dom(zt.allStrings52782[1]),n&&t.dy.dom(zt.allStrings52782[2]))})),zt={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]};var Xt=e(902);const Yt=t._q.deepPropWatch((()=>(n=0,e=0,r=0,o=0,a=!1,s=0,c=0,l=(0,t.$q)((t=>[{stateNum:n,stateNumChangeCount:e,slowChangeCount:r,subjectChangeCount:o,truthChange:a,truthChangeCount:s,truthSubChangeCount:c}]=t({stateNum:n,stateNumChangeCount:e,slowChangeCount:r,subjectChangeCount:o,truthChange:a,truthChangeCount:s,truthSubChangeCount:c}))),i=(0,t.YP)([n],(()=>++e)),u=t.YP.noInit([n],(0,t.uz)((()=>++r))),d=t.YP.asSubject([n],(0,t.uz)((()=>++o))),p=t.YP.truthy([a],(0,t.uz)((()=>++s))),h=t.YP.truthy.asSubject([a],(0,t.uz)((t=>++c))))=>t.dy.dom(Ut.allStrings2187613[0],n,(()=>++n),e,r,u,o,(0,t.Ld)(d),a?"true":"false",p||"false",s,(0,t.Ld)(h),c,(()=>a=!a),a?"true":"false"))),Ut={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},Ft=(0,t._q)((()=>{const n=(0,t.SB)((()=>new t.xQ)),e=(0,t.SB)((()=>new t.v0("purple"))),r=(0,t.SB)((()=>new t.v0("green")));let o=!1;return(0,t.$q)((t=>[{shouldHideAttributes:o}]=t({shouldHideAttributes:o}))),t.dy.dom(Qt.allStrings219820[0],o?"":t.dy.dom(Qt.allStrings219820[1],(0,t.Te)(n,"red"),(0,t.Te)(n,"red",(t=>"background-color:"+t)),"blue"===n.value&&(0,t.Ld)(e,(t=>"background-color:"+t))||"red"===n.value&&(0,t.Ld)(r,(t=>"background-color:"+t))||"background-color:pink;"),(()=>{const t=n.value;n.next("red"===t?"blue":"red")}),(0,t.Ld)(n),(()=>o=!o),o?"Show":"Hide",(()=>n.next("")),(0,t.Te)(t.xQ.globalSubCount$,t.xQ.globalSubCount$.value))})),Qt={allStrings219820:[[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe attributes"}]},{nn:"text",v:0},{nn:"button",at:[["id","toggle-color-btn"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"Toggle Color ("},{nn:"text",v:2},{nn:"text",tc:")"}]},{nn:"button",at:[["id","toggle-attributes-btn"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4},{nn:"text",tc:" Attributes"}]},{nn:"button",at:[["id","clear-color-btn"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"Clear Color"}]},{nn:"text",tc:"subscriptions: "},{nn:"span",at:[["id","subscriptions-count"]],ch:[{nn:"text",v:6}]}]}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"],["id","subscribe-attributes-wrap"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe special attribute"}]},{nn:"span",at:[["id","subscribe-style-dot-bg-color-changer"],["style.background-color",{tagJsVar:0},"style"]],ch:[{nn:"text",tc:"background color changer"}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe style attribute"}]},{nn:"span",at:[["style",{tagJsVar:1},null],["id","subscribe-style-bg-color"]],ch:[{nn:"text",tc:"subscribe bg color"}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"sometimes subscribe style attribute"}]},{nn:"span",at:[["style",{tagJsVar:2},null],["id","multiple-subscribe-bg-color"]],ch:[{nn:"text",tc:"multiple subscribe bg color"}]}]}]}]}]]},Gt=(0,t._q)((()=>{let n="a",e=!0;return(0,t.$q)((t=>[{selected:n,isOrange:e}]=t({selected:n,isOrange:e}))),t.dy.dom(Kt.allStrings214806[0],(t=>n=t.target.value),["a","b","c"].map((e=>t.dy.dom(Kt.allStrings214806[1],e,e==n?"selected":"",e,e==n?"true":"false").key(e))),(t=>e=t.target.checked),e&&"checked",e?"true":"false",e?"orange":"",e?"black":"",!!e,!!e,e?"background-orange text-black":"",{class:"text-white"+(e?" background-orange":"")},{backgroundColor:e?"orange":"lightgray",padding:"10px",border:"2px solid black",borderRadius:e?"8px":"4px",boxShadow:e?"2px 2px 4px rgba(0,0,0,0.3)":"none"},{"background-color":e?"red":"blue",color:"white",padding:"5px","margin-top":"10px"},Ft())})),Kt={allStrings214806:[[{nn:"input",at:[["id","attr-input-abc"],["placeholder","a b or c"],["change",{tagJsVar:0},null]]},{nn:"select",at:[["id","select-sample-drop-down"]],ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Special Attributes"}]},{nn:"div",ch:[{nn:"input",at:[["type","checkbox"],["id","toggle-backgrounds"],["change",{tagJsVar:2},null],[{tagJsVar:3}]]},{nn:"text",tc:" - toggle backgrounds:"},{nn:"text",v:4}]},{nn:"div",at:[["style","display: flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"ol",ch:[{nn:"li",ch:[{nn:"div",at:[["id","attr-style-strings"],["style.background-color",{tagJsVar:5},"style"],["style.color",{tagJsVar:6},"style"]],ch:[{nn:"text",tc:"style.background-color=&dollar;{'orange'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-class-booleans"],["class.background-orange",{tagJsVar:7},"class"],["class.text-black",{tagJsVar:8},"class"]],ch:[{nn:"text",tc:"class.background-orange=&dollar;{true}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-inline-class"],["class",{tagJsVar:9},null]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange text-black'}"}]}]},{nn:"li",ch:[{nn:"div",at:[["id","attr-dynamic-inline-class"],[{tagJsVar:10}]],ch:[{nn:"text",tc:"class=&dollar;{'background-orange'} but always white"}]}]}]}]},{nn:"fieldset",at:[["style","margin-top: 1em"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"style object attribute"}]},{nn:"div",at:[["style",{tagJsVar:11},null],["id","style-object-test"]],ch:[{nn:"text",tc:"Style object test"}]},{nn:"div",at:[["style",{tagJsVar:12},null],["id","style-set-property-test"]],ch:[{nn:"text",tc:"style property test"}]}]},{nn:"style",ch:[{nn:"text",tc:".background-orange {background-color:orange}\n      .text-black {color:black}\n      .text-white {color:white}"}]},{nn:"text",v:13},{nn:"text",tc:"\n  "}],[{nn:"option",at:[["value",{tagJsVar:0},null],[{tagJsVar:1}]],ch:[{nn:"text",v:2},{nn:"text",tc:" - "},{nn:"text",v:3}]}]]},Zt=[{view:i.OneRender,tag:()=>t._q.renderOnce=(e=new t.KU(0),r=0)=>{++r;const s=t.xQ.all([0,"all",4]);return t.dy.dom(a.allStrings2265941[0],(0,t.Ld)(s.pipe((t=>JSON.stringify(t)))),(0,t.Ld)(e),(()=>++e.value),(0,n.v)({renderCount:r,name:"oneRender_tag_ts"}),o())},emoji:"1️⃣"},{view:i.Props,tag:ht,emoji:"🧳"},{view:i.WatchTesting,tag:Yt,emoji:"⌚️"},{view:i.TableDebug,tag:Wt},{view:i.ProviderDebug,tag:kt},{view:i.TagSwitchDebug,tag:nt,emoji:"🔀"},{view:i.Mirroring,tag:lt,emoji:"🪞"},{view:i.Arrays,tag:K,emoji:"⠇"},{view:i.Content,tag:Xt.kQ,emoji:"📰",debug:!0},{view:i.Child,tag:R,emoji:"👶"},{view:i.Destroys,tag:X,emoji:"🗑️"},{view:i.FunInPropsTag,tag:k},{view:i.AttributeDebug,tag:Gt,emoji:"🏹"},{view:i.Todo,tag:(0,t._q)(D)},{view:i.Counters,tag:Nt,emoji:"💯"}],tn=(0,t._q)(((n,e=u.views)=>{const r=(0,t.SB)((()=>Zt.filter((t=>{if(e.includes(t.view))return!0})).map((({view:t,title:e,emoji:r,tag:o,...a})=>({title:e||t,output:t===i.Counters?o({appCounterSubject:n}):o(),view:t,emoji:r,...a}))).sort(((t,n)=>t.view.localeCompare(n.view)))));return t.dy.dom(en.allStrings1671448[0],r.map((t=>nn(t).key(t.view))))})),nn=n=>{const{emoji:e,view:r,title:o,output:a,debug:s}=n;return t.dy.dom(en.allStrings1671448[1],r,e,o,n.contentHide?"none":"",a,"section_"+n.view,(()=>n.contentHide=!n.contentHide),n.contentHide?"grey":"")},en={allStrings1671448:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["style","flex:2 2 20em"]],ch:[{nn:"a",at:[["id",{tagJsVar:0},null]],ch:[{nn:"text",tc:"\x3c!-- ⚓️ --\x3e"}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",v:1},{nn:"text",tc:" "},{nn:"text",v:2}]},{nn:"div",at:[["id","many-section-contents"],["style.display",{tagJsVar:3},"style"]],ch:[{nn:"text",v:4}]},{nn:"div",at:[["style","display:flex;"]],ch:[{nn:"button",at:[["style","flex:1;"],["id",{tagJsVar:5},null],["click",{tagJsVar:6},null],["style.background-color",{tagJsVar:7},"style"]],ch:[{nn:"text",tc:"👁️ hide/show"}]}]}]},{nn:"div",at:[["style","font-size:0.6em;text-align:right;"]],ch:[{nn:"a",at:[["href","#top"]],ch:[{nn:"text",tc:"⏫"}]}]}]}]]},rn=3e3,on=6e3,an=(0,t._q)((()=>{let n,e,r=0,o=0,a=0;(0,t.$q)((t=>[{intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a}]=t({intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a})));const s=(0,t._)(),c=()=>++r,l=()=>{console.info("🟢 interval test 0 started..."),a=0,e=setInterval(s((()=>{a+=500,a>=rn&&(a=0)})),500),console.info("▶️ interval started"),n=setInterval(s((()=>{c()})),rn)},i=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return(0,t.nc)(l),(0,t.ev)(i),++o,t.dy.dom(cn.allStrings838008[0],rn,n,c,r,o,rn,a,a,(()=>{n||e?i():l()}),n||e?"red":"green",(()=>setTimeout(s((()=>{a+=200})),1e3)))})),sn=(0,t._q)((()=>{let n,e,r=0,o=0,a=0;(0,t.$q)((t=>[{intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a}]=t({intervalCount:r,intervalId:n,intervalId2:e,renderCounter:o,currentTime:a})));const s=(0,t._)(),c=()=>++r;const l=()=>{clearInterval(n),clearInterval(e),n=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function i(){if(n)return l();console.info("🟢 interval test 1 started..."),a=0,e=setInterval(s((()=>{a+=500,a>=on&&(a=0)})),500),n=setInterval(s((()=>{c(),console.info("slow interval ran")})),on)}return(0,t.nc)(i),(0,t.ev)(l),++o,t.dy.dom(cn.allStrings838008[1],on,n,c,r,o,on,a,a,i,n?"red":"green")})),cn={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},ln=(0,t._q)((()=>{let n="tagJsDebug.js",e=!1,r=0;return(0,t.$q)((t=>[{_firstState:n,showIntervals:e,renderCount:r}]=t({_firstState:n,showIntervals:e,renderCount:r}))),++r,t.dy.dom(un.allStrings77500[0],(()=>e=!e),e&&t.dy.dom(un.allStrings77500[1],(0,F.fx)(),an(),sn()))})),un={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};function dn(){const t=P(),n=t.route,e=t.location.pathname;if(e&&"counters/"===n)return"counters";if(e&&"content/"===n)return"content";if(e.endsWith("isolated.html"))return"isolated";return e.includes("todo/www")?"todo":"home"}const pn=()=>t._q.use=(n=dn())=>t.dy.dom(hn.allStrings120829[0],"home"===n?".5":"1","home"===n?void 0:"#/","isolated"===n?".5":"1","isolated"===n?void 0:"isolated.html","counters"===n?".5":"1","counters"===n?void 0:"#counters/","content"===n?".5":"1","content"===n?void 0:"#content/","todo"===n?".5":"1","todo"===n?void 0:"todo/www/"),hn={allStrings120829:[[{nn:"div",ch:[{nn:"a",at:[["style.opacity",{tagJsVar:0},"style"],["href",{tagJsVar:1},null]],ch:[{nn:"text",tc:"home"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:2},"style"],["href",{tagJsVar:3},null]],ch:[{nn:"text",tc:"isolated"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:4},"style"],["href",{tagJsVar:5},null]],ch:[{nn:"text",tc:"counters"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:6},"style"],["href",{tagJsVar:7},null]],ch:[{nn:"text",tc:"content"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["style.opacity",{tagJsVar:8},"style"],["href",{tagJsVar:9},null]],ch:[{nn:"text",tc:"todo app"}]},{nn:"text",tc:"&nbsp;-&nbsp;"},{nn:"a",at:[["href","https://github.com/AckerApple/taggedjs"],["target","_blank"]],ch:[{nn:"text",tc:"repo"}]}]}]]},gn=Date.now();function fn(){return function(n=dn()){let e=!1;return(0,t.$q)((t=>[{showHide:e}]=t({showHide:e}))),console.log("🍒 App rendered",gn),t.dy.dom(yn.allStrings2805014[0],4,(()=>e=!e),e,e&&vn(),pn(),"home"===n&&bn(),"counters"===n&&Mt(),"content"===n&&(0,Xt.kQ)())}}fn.isApp=!0;const xn=(0,t._q)(fn),bn=()=>t._q.use=(r=!0,o=0,a=!1,s=null,c=(0,t.SB)((()=>new t.xQ(o))),l=0,i="🟦",u=(0,t.$q)((t=>[{showSections:r,appCounter:o,toggleValue:a,testTimeout:s,renderCount:l,testEmoji:i}]=t({showSections:r,appCounter:o,toggleValue:a,testTimeout:s,renderCount:l,testEmoji:i}))),d=(()=>{a=!a}))=>{const p=(0,t._)(),g=p((t=>i=t?"✅":"❌"));function f(t=!0,n=(()=>{})){i="🟦";s=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const r=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(e.bind(e,566)),await Promise.resolve().then(e.bind(e,451)),await Promise.resolve().then(e.bind(e,118)),await Promise.resolve().then(e.bind(e,835)),await Promise.resolve().then(e.bind(e,428)),await Promise.resolve().then(e.bind(e,749)),await Promise.resolve().then(e.bind(e,168)),await Promise.resolve().then(e.bind(e,842)),await Promise.resolve().then(e.bind(e,774)),await Promise.resolve().then(e.bind(e,994)),await Promise.resolve().then(e.bind(e,157)),await Promise.resolve().then(e.bind(e,178)),await Promise.resolve().then(e.bind(e,236)),await Promise.resolve().then(e.bind(e,702)),await Promise.resolve().then(e.bind(e,527)),await Promise.resolve().then(e.bind(e,186)),await Promise.resolve().then(e.bind(e,337));try{const t=Date.now();if(window.mocha)await new Promise(((t,n)=>{window.mocha.run((e=>{e>0?n(new Error(`${e} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(e.bind(e,995));if(!await t())throw new Error("Tests failed")}const n=Date.now()-t;return console.info(`✅ all tests passed in ${n}ms`),Zt.map((t=>{document.getElementById("section_"+t.view).click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();n(r),t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return(0,t.ev)((function(){clearTimeout(s),s=null})),(0,t.nc)((function(){console.info("1️⃣ app init should only run once"),f(!1,g),c.subscribe(p((t=>o=t)))})),++l,t.dy.dom(yn.allStrings2805014[1],(()=>f(!0,g)),i,(()=>{c.next(o+1)}),(()=>++o),o,(0,t.Ld)(c),c.value,(()=>d()),a,(0,n.v)({name:"app",renderCount:l}),(0,t.Ld)(t.xQ.globalSubCount$),h(),(()=>r=!r),r&&tn(c),ln())},vn=(0,t._q)((()=>t.dy.dom(yn.allStrings2805014[2],(0,F.tw)().innerHTML=t.dy.dom(yn.allStrings2805014[3])))),yn={allStrings2805014:[[{nn:"text",tc:"\x3c!--app.js--\x3e"},{nn:"h1",at:[["id","h1-app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - "},{nn:"text",v:0}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"show/hide "},{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n\n\n      "},{nn:"text",v:4},{nn:"text",tc:"\n\n      "},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n    "}],[{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"run tests "},{nn:"text",v:1}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:9},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:10},{nn:"text",tc:")"}]}]}]},{nn:"a",at:[["name","top"],["id","top"]]},{nn:"text",v:11},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"button",at:[["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"toggle sections"}]},{nn:"text",v:13},{nn:"text",tc:"\n\n      "},{nn:"text",v:14}]}],[{nn:"hr"},{nn:"text",v:0},{nn:"hr"}],[{nn:"text",tc:"\n    Hello animated world\n  "}]]};function mn(){u.autoTest=u.autoTest=!u.autoTest,d()}const wn={allStrings62947:[[{nn:"text",tc:"\n  auto testing "},{nn:"input",at:[["type","checkbox"],[{tagJsVar:0}],["change",{tagJsVar:1},null]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"run tests"}]}]]},_n=()=>t._q.use=(e=(0,t.SB)("isolated app state"),r=0,o=0,a=(0,t.SB)((()=>new t.xQ(o))),s=!1,c=(0,t.$q)((t=>[{renderCount:r,appCounter:o,toggleValue:s}]=t({renderCount:r,appCounter:o,toggleValue:s}))),i=(()=>s=!s),d=(0,t._)())=>{const p=P().route.split("/").map((t=>t.trim())).filter((t=>t.length));let g;return p.length&&(g=p),(0,t.nc)((()=>{console.info("1️⃣ app init should only run once"),a.subscribe(d((t=>{o=t})))})),++r,t.dy.dom(Sn.allStrings1054570[0],p,pn(),(()=>{a.next(o+1)}),(()=>{++o}),o,(0,t.Ld)(a),a.value,i,s,(f=g,t._q.use=(n=(0,t.nc)((()=>{u.autoTest&&l(!1,f,x)})))=>t.dy.dom(wn.allStrings62947[0],u.autoTest&&"checked",mn,(()=>l(!0,f,x)))),(0,n.v)({name:"app",renderCount:r}),(0,t.Ld)(t.xQ.globalSubCount$),h(g),tn(a,g),(0,n.v)({renderCount:r,name:"isolatedApp"}));var f,x};g.subscribe((({type:t,checkTesting:n})=>{x(t,n)}));const Sn={allStrings1054570:[[{nn:"text",tc:"\x3c!--isolatedApp.js--\x3e"},{nn:"h1",at:[["id","app"]],ch:[{nn:"text",tc:"🏷️ TaggedJs - isolated"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"(no HMR)"}]},{nn:"div",at:[["style","opacity:.6"]],ch:[{nn:"text",tc:"route: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"div",ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"direct app tests"}]},{nn:"button",at:[["id","app-counter-subject-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"🍒 ++app subject"}]},{nn:"button",at:[["id","app-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍒 ++app"}]},{nn:"span",ch:[{nn:"text",tc:"🍒 "},{nn:"span",at:[["id","app-counter-display"]],ch:[{nn:"text",v:4}]}]},{nn:"span",ch:[{nn:"text",tc:"🍒$&lt;"},{nn:"span",at:[["id","app-counter-subject-display"]],ch:[{nn:"text",v:5}]},{nn:"text",tc:"&gt;"}]},{nn:"span",ch:[{nn:"text",tc:"🍒$.value&lt;"},{nn:"span",at:[["id","app-counter-subject-value-display"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:"&gt;"}]},{nn:"button",at:[["id","toggle-test"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"toggle test "},{nn:"text",v:8}]}]},{nn:"text",tc:" "},{nn:"text",v:9}]},{nn:"div",at:[["style","display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"]],ch:[{nn:"text",v:10},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(subscription count: "},{nn:"text",v:11},{nn:"text",tc:")"}]}]}]},{nn:"text",v:12},{nn:"div",at:[["id","tagDebug-fx-wrap"]],ch:[{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]}]]};function Cn(){const n=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),r=e[0]?.toLowerCase();if(r&&["isolated.html","index-static.html"].includes(r)){const e=Date.now();(0,t.bX)(_n,n,{test:1});const r=Date.now()-e;return void console.info(`⏱️ isolated render in ${r}ms`)}const o=Date.now();(0,t.bX)(xn,n,{test:1});const a=Date.now()-o;console.info(`⏱️ rendered in ${a}ms`)}})();var o=r.gV,a=r.jG,s=r.fm,c=r.KH,l=r.bX,i=r.mK;export{o as App,a as IsolatedApp,s as hmr,c as run,l as tagElement,i as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,