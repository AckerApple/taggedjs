var t={842:(t,e,n)=>{n.r(e),n.d(e,{fxTime:()=>r});var o=n(78);const r=160;function s(t){return new Promise((e=>setTimeout(e,t)))}(0,o.yY)("⠇ array testing",(()=>{(0,o.it)("signal array count and items",(()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);(0,o.l_)(e).toBe(3);for(let t=0;t<e;t++)(0,o.l_)((0,o.o5)(`#signal-array-item-${t}`)).toBe(1);(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(0)})),(0,o.it)("push signal array button",(async()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText),n=(0,o.L7)("push-signal-array-btn");(0,o.l_)(e).toBe(3),n.click();const a=Number(t.innerText);(0,o.l_)(a).toBe(e+1),(0,o.l_)((0,o.o5)(`#signal-array-item-${e}`)).toBe(1),n.click(),(0,o.l_)(Number(t.innerText)).toBe(e+2),(0,o.l_)((0,o.o5)(`#signal-array-item-${e+1}`)).toBe(1),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(5),(0,o.V4)("#signal-array-item-delete-btn-3"),(0,o.V4)("#signal-array-item-delete-btn-4"),await s(2*r),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(3)})),(0,o.it)("arrays counter display matches item counter displays",(()=>{const t=(0,o.L7)("arrays-counter-display"),e=Number(t.innerText),n=(0,o.L7)("signal-array-count"),r=Number(n.innerText);for(let t=0;t<r;t++){const n=(0,o.L7)(`signal-array-item-counter-display-${t}`);(0,o.l_)(n).toBeDefined(),(0,o.l_)(Number(n.innerText)).toBe(e)}document.querySelector("#signal-array-increase-counter").click();const s=Number(t.innerText);(0,o.l_)(s).toBe(e+1);for(let t=0;t<r;t++){const e=`signal-array-item-counter-display-${t}`,n=(0,o.L7)(e),r=Number(n.innerText);(0,o.l_)(r).toBe(s,`Index ${t} ID ${e} has ${r} but need toBe ${s} like #signal-array-increase-counter`)}})),(0,o.it)("signal array item delete button with animation",(async()=>{const t=(0,o.L7)("signal-array-count"),e=Number(t.innerText);(0,o.l_)(e).toBe(3),0===e&&(0,o.L7)("push-signal-array-btn").click();const n=Number(t.innerText);(0,o.l_)((0,o.o5)("#signal-array-item-0")).toBe(1);(0,o.L7)("signal-array-item-delete-btn-0").click(),await s(r),(0,o.l_)(Number((0,o.L7)("signal-array-count").innerText)).toBe(2);const a=Number(t.innerText),i=n-1;(0,o.l_)(a).toBe(i,`#signal-array-count has ${a} but expected ${i}`);const c=(0,o.o5)("#signal-array-item-2");(0,o.l_)(c).toBe(0,`Expected signal array item 2 but got ${c}`);const l=Number(t.innerText);for(let t=0;t<l;t++){const e=(0,o.o5)(`#signal-array-item-${t}`);(0,o.l_)(e).toBe(1,`Expected only one #signal-array-item-${t} but got ${e}`)}})),(0,o.it)("array basics",(()=>{(0,o.l_)((0,o.o5)("#array-test-push-item")).toBe(1);const t=document.querySelectorAll("#score-data-0-1-outside-button");(0,o.l_)(t.length).toBe(0);const e=(0,o.o5)("#score-data-0-1-inside-button");(0,o.l_)(e).toBe(0),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1,"score data inside button bad"),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1,"score data outside button bad");const n=(0,o.L7)("score-data-0-1-inside-button"),r=(0,o.L7)("score-data-0-1-inside-display");let s=r.innerText;const a=(0,o.L7)("score-data-0-1-outside-button"),i=(0,o.L7)("score-data-0-1-outside-display"),c=i.innerText;(0,o.l_)(s).toBe(c),n.click(),(0,o.l_)(r.innerText).toBe(i.innerText),(0,o.l_)(r).toBe((0,o.L7)("score-data-0-1-inside-display")),(0,o.l_)(s).toBe((Number(r.innerText)-1).toString()),(0,o.l_)(s).toBe((Number(i.innerText)-1).toString()),a.click(),(0,o.l_)(r.innerText).toBe(i.innerText),(0,o.l_)(s).toBe((Number(r.innerText)-2).toString()),(0,o.l_)(s).toBe((Number(i.innerText)-2).toString())})),(0,o.it)("🗑️ deletes",(async()=>{(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(1);const t=(0,o.L7)("player-edit-btn-0")._click();(0,o.l_)(t).toBe("no-data-ever"),(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(1);const e=await(0,o.L7)("player-remove-promise-btn-0")._click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r),await e,(0,o.l_)((0,o.o5)("#player-remove-promise-btn-0")).toBe(0,"Expected element not to exist #player-remove-promise-btn-0"),(0,o.l_)((0,o.o5)("#player-edit-btn-0")).toBe(0)})),(0,o.it)("add then deletes",(async()=>{(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("array-test-push-item").click(),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(2),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(2),(0,o.L7)("player-edit-btn-0").click();const t=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(t).toBe("promise-no-data-ever"),await s(r-10),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(1),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(1),(0,o.L7)("player-edit-btn-0").click();const e=await(0,o.L7)("player-remove-promise-btn-0").click();(0,o.l_)(e).toBe("promise-no-data-ever"),await s(r+25),(0,o.l_)((0,o.o5)("#score-data-0-1-inside-button")).toBe(0),(0,o.l_)((0,o.o5)("#score-data-0-1-outside-button")).toBe(0)}))}))},178:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🏹 special attributes",(()=>{(0,o.it)("style and class tests",(async()=>{(0,o.l_)((0,o.QX)("#attr-input-abc")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-backgrounds")).toBe(1),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0);const t=(0,o.L7)("attr-dynamic-inline-class").classList;(0,o.l_)(new Array(...t).includes("background-orange")).toBe(!0),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe(""),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!1),(0,o.V4)("#toggle-backgrounds"),(0,o.l_)((0,o.L7)("attr-style-strings").style.backgroundColor).toBe("orange"),(0,o.l_)(new Array(...(0,o.L7)("attr-class-booleans").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-inline-class").classList).includes("background-orange")).toBe(!0),(0,o.l_)(new Array(...(0,o.L7)("attr-dynamic-inline-class").classList).includes("background-orange")).toBe(!0)})),(0,o.it)("subscribe attributes colors",(()=>{const t=(0,o.L7)("subscribe-style-dot-bg-color-changer"),e=(0,o.L7)("subscribe-style-bg-color"),n=(0,o.L7)("multiple-subscribe-bg-color"),r=(0,o.L7)("toggle-color-btn"),s=(0,o.L7)("clear-color-btn");(0,o.l_)(t.style.backgroundColor).toBe("red","bgColorChanger should start red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("pink"),(0,o.l_)(r.innerText).toBe("Toggle Color ()"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (red)"),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(e.style.backgroundColor).toBe("red"),(0,o.l_)(n.style.backgroundColor).toBe("green"),r.click(),(0,o.l_)(r.innerText).toBe("Toggle Color (blue)"),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(e.style.backgroundColor).toBe("blue"),(0,o.l_)(n.style.backgroundColor).toBe("purple"),s.click(),(0,o.l_)(t.style.backgroundColor).toBe("","expected no background in bgColorChanger"),(0,o.l_)(e.style.backgroundColor).toBe("","expected no background in subscribeBgColor"),(0,o.l_)(n.style.backgroundColor).toBe("pink")})),(0,o.it)("hide/show attributes affects subscription count",(()=>{const t=(0,o.L7)("toggle-attributes-btn"),e=(0,o.L7)("subscriptions-count"),n=Number(e.innerText);(0,o.l_)(t.innerText).toBe("Hide Attributes"),t.click(),(0,o.l_)(t.innerText).toBe("Show Attributes");const r=Number(e.innerText),s=n-2;(0,o.l_)(r).toBe(s,`afterHideCount expected(${r}) toBe(${s})`),t.click(),(0,o.l_)(t.innerText).toBe("Hide Attributes");const a=Number(e.innerText);(0,o.l_)(a).toBe(n)})),(0,o.it)("style object converts to individual CSS properties",(()=>{const t=(0,o.L7)("style-object-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("lightgrey"),(0,o.l_)(t.style.padding).toBe("10px"),(0,o.l_)(t.style.border).toBe("2px solid black"),(0,o.l_)(t.style.borderRadius).toBe("4px"),(0,o.l_)(t.style.boxShadow).toBe("none"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("orange"),(0,o.l_)(t.style.borderRadius).toBe("8px"),(0,o.l_)(t.style.boxShadow).toBe("rgba(0, 0, 0, 0.3) 2px 2px 4px")})),(0,o.it)("style object with kebab-case properties uses setProperty",(()=>{const t=(0,o.L7)("style-set-property-test"),e=(0,o.L7)("toggle-backgrounds");(0,o.l_)(e.checked).toBe(!0),(0,o.l_)(t.style.backgroundColor).toBe("red"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("blue"),(0,o.l_)(t.style.color).toBe("white"),(0,o.l_)(t.style.padding).toBe("5px"),(0,o.l_)(t.style.marginTop).toBe("10px"),e.click(),(0,o.l_)(t.style.backgroundColor).toBe("red")}))}))},566:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("elements exists",(()=>{(0,o.l_)((0,o.L7)("h1-app")).toBeDefined();const t=(0,o.L7)("toggle-test");(0,o.l_)(t).toBeDefined(),(0,o.l_)(t.innerText).toBe("toggle test")})),(0,o.it)("toggle test",(()=>{const t=(0,o.L7)("toggle-test");(0,o.l_)(t.innerText).toBe("toggle test"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test true"),t.click(),(0,o.l_)(t.innerText).toBe("toggle test")}))},527:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("👶 👧child tests",(()=>{(0,o.it)("child tests",(()=>{(0,o.di)("#innerHtmlPropsTest-button","#innerHtmlPropsTest-display"),(0,o.di)("#innerHtmlTest-counter-button","#innerHtmlTest-counter-display")})),(0,o.it)("a",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button","#innerHtmlTest-childTests-display"])})),(0,o.it)("b",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#child-as-prop-test-button","#child-as-prop-test-display"]),(0,o.di)("#innerHtmlPropsTest-childTests-button","#innerHtmlPropsTest-childTests-display")})),(0,o.it)("c",(()=>{(0,o.Iq)(["#childTests-button","#childTests-display"],["#innerHtmlTest-childTests-button-c","#innerHtmlTest-childTests-display-c"])}))}))},118:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 content",(()=>{(0,o.it)("spacing",(()=>{(0,o.l_)((0,o.dy)("#hello-big-dom-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-big-string-world")).toBe("hello <b>big</b> world"),(0,o.l_)((0,o.dy)("#hello-spacing-dom-world")).toBe("54 hello worlds")})),(0,o.it)("style.",(()=>{(0,o.l_)((0,o.IO)("#style-simple-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-var-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid green"),(0,o.V4)("#toggle-border-orange"),(0,o.l_)((0,o.IO)("#style-toggle-border-orange")[0].style.border).toBe("3px solid orange")})),(0,o.it)("style set as object",(()=>{(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe(""),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("bold"),(0,o.V4)("#toggle-bold"),(0,o.l_)((0,o.IO)("#style-toggle-bold")[0].style.fontWeight).toBe("")})),(0,o.yY)("no parent element tests",(()=>{(0,o.it)("no immediate parent",(()=>{const t=document.getElementById("noParentTagFieldset");(0,o.l_)(t?.innerText).toBe("No Parent Test\ncontent1\ntest0\ncontent2\ntest1\ncontent3\ntest3\ncontent4")})),(0,o.it)("multiple no parent - ensure dynamic content rendered in order",(()=>{const t=document.getElementById("noParentTagFieldset").parentNode.innerHTML.replace(/(^(.|\n)+<hr id="noParentsTest2-start">|)/g,"").replace(/<hr id="noParentsTest2-end">(.|\n)*/g,"").trim();(0,o.l_)(t).toBe("<hr>content1<hr>test0<hr>content2<hr>test1<hr>content3<hr>test3<hr>content4<hr>")}))})),(0,o.it)("concat style",(()=>{(0,o.L7)("dynamic-border-width").value=2,(0,o.L7)("dynamic-border-color").value="white",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("white"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("2px"),(0,o.L7)("dynamic-border-width").value=1,(0,o.L7)("dynamic-border-color").value="blue",(0,o.VJ)("#dynamic-border-width"),(0,o.VJ)("#dynamic-border-color"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderColor).toBe("blue"),(0,o.l_)((0,o.L7)("dynamic-border-element").style.borderWidth).toBe("1px")})),(0,o.it)("tagvar injections",(()=>{(0,o.l_)((0,o.L7)("inject-tagvar-0").innerText).toBe((0,o.L7)("inject-read-tagvar-0").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-1").innerText).toBe((0,o.L7)("inject-read-tagvar-1").innerText),(0,o.l_)((0,o.L7)("inject-tagvar-2").innerText).toBe((0,o.L7)("inject-read-tagvar-2").innerText)}))}))},428:(t,e,n)=>{n.r(e),n.d(e,{clickSpeedAmount:()=>s});var o=n(78);let r=0;(0,o.yY)("💯 counters",(()=>{const t=0===r;++r,(0,o.it)("basics",(()=>{const e=(0,o.L7)("set-main-counter-input");(0,o.l_)(e).toBeDefined(),e.value="0",(0,o.Sb)(e);Number((0,o.dy)("#counters_render_count")),Number((0,o.dy)("#inner_counters_render_count"));(0,o.wG)("#conditional-counter",0);const n=(0,o._8)("👉-counter-sub-count");(0,o.di)("#❤️-increase-counter","#❤️-counter-display"),(0,o.l_)((0,o._8)("👉-counter-sub-count")).toBe(n);const r=(0,o.dy)("#counters_render_count");(0,o.l_)(r).toBe("1",`expected render count ${r} to be 1`);let s="1",i=(0,o.dy)("#inner_counters_render_count");(0,o.l_)(i).toBe(s,`Expected renderCount ${i} to be ${s}`);const c=(0,o.dy)("#🔥-init-counter");(0,o.l_)(c).toBe("1",`#🔥-init-counter to be 1 but it's ${c}`),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(s,"#counters_render_count fail"),i=(0,o.dy)("#inner_counters_render_count"),(0,o.l_)(i).toBe(s),(0,o.di)("#🥦-standalone-counter","#🥦-standalone-display"),i=(0,o.dy)("#counters_render_count"),(0,o.l_)(i).toBe(s,"#counters_render_count failed"),i=(0,o.dy)("#inner_counters_render_count"),(0,o.l_)(i).toBe(s,"#inner_counters_render_count failed"),(0,o.wG)("#conditional-counter",1),(0,o.wG)("#conditional-display",1),t&&(0,o.l_)((0,o.dy)("#conditional-display")).toBe("2"),i=(0,o._8)("❤️💧-shallow-display"),(0,o.di)("#conditional-counter","#conditional-display"),(0,o.l_)(i).toBe((0,o._8)("❤️💧-shallow-display")),(0,o.di)("#❤️-inner-counter","#❤️-inner-display"),(0,o.di)("#❤️💧-shallow-counter","#❤️💧-shallow-display"),a("🤿-deep-counter","🤿-deep-display","❤️-inner-counter"),a("💧-shallow-counter","💧-shallow-display","❤️💧-shallow-display"),a("🪨-immutable-counter","🪨-immutable-display","❤️🪨-immutable-counter"),a("🚫-nowatch-counter","🚫-nowatch-display","❤️🚫-nowatch-counter")})),(0,o.it)("counters.test piped subject",(()=>{if(t){(0,o.dy)("#🥦-standalone-display");const t=(0,o.dy)("#🪈-pipedSubject");(0,o.l_)(t).toBe("",`firstRun failure pipe0. Expected "${t}" toBe empty-string`);const e=(0,o.dy)("#🪈-pipedSubject-2");(0,o.l_)(e).toBe("","firstRun failure pipe2 expected toBe empty-string");const n=(0,o.dy)("#🪈-pipedSubject-3");(0,o.l_)(n).toBe("","firstRun failure pipe3 expected toBe empty-string")}(0,o.V4)("#🥦-subject-increase-counter");const e=(0,o.dy)("#🪈-pipedSubject"),n=(0,o.dy)("#🥦-standalone-display");(0,o.l_)(e).toBe(n),(0,o.l_)((0,o.dy)("#🪈-pipedSubject-2")).toBe((0,o.dy)("#🥦-standalone-display"))}))}));const s=600;function a(t,e,n){const r=(0,o._8)(e),a=(0,o.L7)(t),i=(0,o.L7)(n);console.time(`⌚️ ${t}`);for(let t=0;t<600;t++)a.click();console.timeEnd(`⌚️ ${t}`),console.time(`⌚️ outer ${t}`);for(let t=0;t<600;t++)i.click();console.timeEnd(`⌚️ outer ${t}`);const c=(Number(r)+s).toString();(0,o.l_)((0,o._8)(e)).toBe(c)}},236:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("destroys",(async()=>{(0,o.l_)((0,o.QX)("#destroyCount")).toBe(1),(0,o.l_)((0,o.QX)("#toggle-destroys")).toBe(1);const t=(0,o.QX)("#destroyable-content");(0,o.l_)(t).toBe(1,"Expected #destroyable-content to be defined");let e=Number((0,o.dy)("#destroyCount"));(0,o.V4)("#toggle-destroys");let n=Number((0,o.dy)("#destroyCount"));const r=e+1;(0,o.l_)(n).toBe(r,`Expected #destroyCount.innerHTML to be ${r} but it is ${n}`);const s=(0,o.QX)("#destroyable-content");(0,o.l_)(s).toBe(0,"Expected #destroyable-content to not exist"),e=n,(0,o.V4)("#toggle-destroys"),n=Number((0,o.dy)("#destroyCount")),(0,o.l_)(n).toBe(e),(0,o.l_)((0,o.QX)("#destroyable-content")).toBe(1)}))},835:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("taggedjs-dump",(()=>{(0,o.it)("starts with nothing THEN becomes object THEN object with array",(()=>{const t=(0,o.L7)("taggedjs-dump-user-textarea");(0,o.l_)(t.value).toBe(""),t.value="{test:22}",(0,o.b$)(t),(0,o.l_)(t.value).toBe("{test:22}");const e=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(e.length).toBe(1),(0,o.l_)(e[0].innerText).toBe("test"),t.value="{test:22, ace:[22, {testb:33}, 55]}",(0,o.b$)(t);const n=(0,o.IO)("#taggedjs-dump-user-result .taggedjs-simple-label");(0,o.l_)(n.length).toBe(2),(0,o.l_)(n[0].innerText).toBe("test"),(0,o.l_)(n[1].innerText).toBe("testb"),t.value="",(0,o.b$)(t)}))}))},157:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("function in props",(async()=>{(0,o.di)("#fun_in_prop1","#fun_in_prop_display"),(0,o.di)("#fun_in_prop2","#fun_in_prop_display"),(0,o.di)("#fun_in_prop3","#fun_in_prop_display"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.V4)("#toggle-fun-in-child"),(0,o.V4)("#fun-parent-button"),(0,o.l_)((0,o.dy)("#main_wrap_state")).toBe("taggjedjs-wrapped")}))},488:(t,e,n)=>{n.r(e);var o=n(78);console.log("INCLUDED!!!"),(0,o.yY)("Injection Test",(()=>{const t=()=>{const t=[];for(let e=0;e<10;e++){const n=(0,o.L7)(`injection-test-item-${e}`);n&&t.push(n)}return t},e=()=>t().map((t=>t.querySelector('input[type="checkbox"]'))),n=()=>e().filter((t=>t?.checked)).length,r=()=>{const n=t();e().forEach(((t,e)=>{t?.checked&&n[e].click()}))};(0,o.HF)((()=>{r()})),(0,o.iu)((()=>{r()})),(0,o.it)("should have injection testing section with all items unchecked initially",(()=>{const n=(0,o.L7)("injection-testing-wrap-host");(0,o.l_)(n).toBeDefined();const r=t();(0,o.l_)(r.length).toBe(10);e().forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)}))})),(0,o.it)("should select individual items when clicked",(()=>{const r=t(),s=e();(0,o.l_)(n()).toBe(0),r[0].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(n()).toBe(1),r[2].click(),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(n()).toBe(2),r[4].click(),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(n()).toBe(3)})),(0,o.it)("should deselect items when clicked again",(()=>{(0,o.l_)(n()).toBe(0);const r=t(),s=e();r[1].click(),r[3].click(),r[5].click(),(0,o.l_)(n()).toBe(3),r[3].click(),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(n()).toBe(2),r[1].click(),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(n()).toBe(1),r[5].click(),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should select multiple items when clicking on different items",(()=>{const r=t(),s=e();r[0].click(),r[2].click(),r[4].click(),r[6].click(),r[8].click(),(0,o.l_)(s[0].checked).toBe(!0),(0,o.l_)(s[1].checked).toBe(!1),(0,o.l_)(s[2].checked).toBe(!0),(0,o.l_)(s[3].checked).toBe(!1),(0,o.l_)(s[4].checked).toBe(!0),(0,o.l_)(s[5].checked).toBe(!1),(0,o.l_)(s[6].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[8].checked).toBe(!0),(0,o.l_)(s[9].checked).toBe(!1),(0,o.l_)(n()).toBe(5)})),(0,o.it)("should toggle selection state correctly",(()=>{const n=t(),r=e();n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0),n[0].click(),(0,o.l_)(r[0].checked).toBe(!1)})),(0,o.it)("should maintain selection state across multiple operations",(()=>{const r=t(),s=e();r[1].click(),r[2].click(),r[3].click(),(0,o.l_)(n()).toBe(3),r[7].click(),r[9].click(),(0,o.l_)(n()).toBe(5),r[2].click(),r[7].click(),(0,o.l_)(n()).toBe(3),(0,o.l_)(s[1].checked).toBe(!0),(0,o.l_)(s[2].checked).toBe(!1),(0,o.l_)(s[3].checked).toBe(!0),(0,o.l_)(s[7].checked).toBe(!1),(0,o.l_)(s[9].checked).toBe(!0)})),(0,o.it)("should restore to original unchecked state after test",(()=>{const s=t(),a=e();s.forEach((t=>t.click())),(0,o.l_)(n()).toBe(10),r(),a.forEach((t=>{(0,o.l_)(t?.checked).toBe(!1)})),(0,o.l_)(n()).toBe(0)})),(0,o.it)("should handle rapid clicking without issues",(()=>{const n=t(),r=e();for(let t=0;t<10;t++)n[0].click();(0,o.l_)(r[0].checked).toBe(!1),n[0].click(),(0,o.l_)(r[0].checked).toBe(!0)})),(0,o.it)("should update visual indicators when items are selected",(()=>{const e=t();e[0].click();const n=e[0].getAttribute("style")||"";(0,o.l_)(n.includes("background: rgb(76, 175, 80)")).toBe(!0),(0,o.l_)(n.includes("border: 3px solid rgb(51, 51, 51)")).toBe(!0);const r=e[1].getAttribute("style")||"";(0,o.l_)(r.includes("background: rgb(33, 150, 243)")).toBe(!0),(0,o.l_)(r.includes("border: 1px solid rgb(153, 153, 153)")).toBe(!0)}))}))},774:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("🪞 mirror testing",(()=>{(0,o.wG)("#mirror-counter-display",2),(0,o.wG)("#mirror-counter-button",2);const t=Number((0,o._8)("mirror-counter-display"));(0,o.L7)("mirror-counter-button").click(),(0,o.l_)(t+1).toBe(Number((0,o._8)("mirror-counter-display"))),(0,o.wG)("#mirror-counter-display",2),(0,o.Lo)("#mirror-counter-display")}))},994:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("oneRender",(()=>{(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1"),(0,o.di)("#👍-counter-button","#👍-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-display"),(0,o.di)("#👍🔨-counter-button","#👍🔨-counter-subject-display"),(0,o.di)("#👍🔨-counter-button","#📡-signal-counter-display"),(0,o.l_)((0,o.dy)("#oneRender_tag_ts_render_count")).toBe("1")}))},749:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🧳 props",(()=>{(0,o.it)("json",(()=>{const t=(0,o.L7)("props-debug-textarea");(0,o.l_)(t.value.replace(/\s/g,"")).toBe('{"test":33,"x":"y"}')})),(0,o.it)("test duels",(()=>{(0,o.Iq)(["#propsDebug-🥩-0-button","#propsDebug-🥩-0-display"],["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"])})),(0,o.it)("child prop communications",(()=>{(0,o.Iq)(["#propsDebug-🥩-1-button","#propsDebug-🥩-1-display"],["#propsOneLevelFunUpdate-🥩-button","#propsOneLevelFunUpdate-🥩-display"])})),(0,o.it)("basics",(()=>{const t=(0,o.dy)("#propsOneLevelFunUpdate-🥩-display"),e=(0,o.dy)("#propsDebug-🥩-change-count-display");(0,o.l_)(e).toBe((Number(t)+1).toString());const n=(0,o.L7)("propsDebug-🥩-0-display").innerHTML,r=(0,o.L7)("propsDebug-🥩-1-display").innerHTML,s=(0,o.L7)("propsOneLevelFunUpdate-🥩-display").innerHTML,a=Number(n),i=Number(r),c=Number(s);(0,o.l_)(i).toBe(c),(0,o.l_)(a+2).toBe(i)})),(0,o.it)("letProp",(()=>{(0,o.Lo)("#propsDebug-🥩-0-display","#propsDebug-🥩-let-prop-display");const t=Number((0,o.dy)("#propsDebug-🥩-0-display")),e=(0,o.IO)("#propsDebug-🥩-2-button")[0]._click();(0,o.l_)(e).toBe("no-data-ever"),(0,o.l_)((0,o.dy)("#propsDebug-🥩-0-display")).toBe(t.toString()),(0,o.l_)((0,o.dy)("#propsDebug-🥩-let-prop-display")).toBe((t+1).toString()),(0,o.L7)("propsDebug-🥩-1-button").click()})),(0,o.it)("props as functions",(()=>{const t=Number((0,o._8)("sync-prop-number-display"));(0,o.Lo)("#sync-prop-number-display","#sync-prop-child-display"),(0,o.L7)("sync-prop-child-button").click(),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.di)("#nothing-prop-counter-button","#nothing-prop-counter-display"),(0,o.Fr)("#sync-prop-number-display",(t+2).toString()),(0,o.Lo)("#sync-prop-counter-display","#nothing-prop-counter-display")}))}))},186:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🫴 providers",(()=>{(0,o.it)("basics",(()=>{(0,o.Iq)(["#increase-provider-🍌-0-button","#increase-provider-🍌-0-display"],["#increase-provider-🍌-1-button","#increase-provider-🍌-1-display"]),(0,o.Iq)(["#increase-provider-upper-🌹-0-button","#increase-provider-upper-🌹-0-display"],["#increase-provider-upper-🌹-1-button","#increase-provider-upper-🌹-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"])})),(0,o.it)("inner outer debug",(()=>{(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"]),(0,o.Iq)(["#increase-provider-🍀-0-button","#increase-provider-🍀-0-display"],["#increase-provider-🍀-1-button","#increase-provider-🍀-1-display"]),(0,o.Iq)(["#increase-prop-🐷-0-button","#increase-prop-🐷-0-display"],["#increase-prop-🐷-1-button","#increase-prop-🐷-1-display"])})),(0,o.yY)("host attributes",(()=>{(0,o.it)("parent has red border",(()=>{const t=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(255, 0, 0)")||e.borderColor.includes("red");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has green border",(()=>{const t=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),t){const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child has correct innerHTML",(()=>{const t=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),t&&(0,o.l_)(t.innerHTML.trim()).toBe("wonderful - parent(red)")})),(0,o.it)("parent contains child element",(()=>{const t=document.getElementById("in-cycle-parent"),e=document.getElementById("in-cycle-child");(0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e&&(0,o.l_)(t.contains(e)).toBe(!0)})),(0,o.it)("parent color changes when select is changed",(async()=>{const t=document.getElementById("parent-color-select"),e=document.getElementById("in-cycle-parent");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="blue",t.dispatchEvent(new Event("change",{bubbles:!0})),(0,o.wS)(t);const n=window.getComputedStyle(e),r=n.borderColor.includes("blue")||n.borderColor.includes("rgb(0, 0, 255)");(0,o.l_)(r).toBe(!0,`in-cycle-parent should be blue not ${n.borderColor}`)}})),(0,o.it)("child color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select"),e=document.getElementById("in-cycle-child");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="purple",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("purple")||n.borderColor.includes("rgb(128, 0, 128)");(0,o.l_)(r).toBe(!0)}})),(0,o.it)("child2 has correct innerHTML and green border",(()=>{const t=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),t){(0,o.l_)(t.textContent.trim().replace(/\n(\s+)/g," ")).toBe("wonderful too part 2");const e=window.getComputedStyle(t),n=e.borderColor.includes("rgb(0, 128, 0)")||e.borderColor.includes("green");(0,o.l_)(n).toBe(!0),(0,o.l_)(e.borderWidth).toBe("2px"),(0,o.l_)(e.borderStyle).toBe("solid")}})),(0,o.it)("child2 color changes when select is changed",(async()=>{const t=document.getElementById("child-color-select-2"),e=document.getElementById("in-cycle-child-2");if((0,o.l_)(t).toBeDefined(),(0,o.l_)(e).toBeDefined(),t&&e){t.value="orange",t.dispatchEvent(new Event("change",{bubbles:!0}));const n=window.getComputedStyle(e),r=n.borderColor.includes("orange")||n.borderColor.includes("rgb(255, 165, 0)");(0,o.l_)(r).toBe(!0,`in-cycle-child-2 should be orange not ${n.borderColor}`)}}))}))}))},451:(t,e,n)=>{n.r(e);var o=n(78);(0,o.it)("basic app subject",(()=>{const t=Number((0,o.dZ)("#app-counter-subject-value-display"));(0,o.V4)("#app-counter-subject-button");const e=Number((0,o.dZ)("#app-counter-subject-value-display"));(0,o.l_)(t).toBe(e-1,`Expected #app-counter-subject-value-display to be ${e-1} but it is ${t}`)}))},528:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("📰 subscriptions",(()=>{(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1")})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")})),(0,o.it)("subscribe",(async()=>{(0,o.l_)((0,o._8)("content-subscribe-sub0")).toBe(""),(0,o.l_)((0,o._8)("content-subscribe-sub0-with")).toBe("-1")})),(0,o.yY)("passed in subscription",(()=>{(0,o.it)("increase subscription",(async()=>{const t=(0,o.L7)("passed-in-sub-increase"),e=(0,o.L7)("passed-in-sub-hide-show"),n=(0,o.L7)("passed-in-sub-hideShow-value");(0,o.l_)(n.textContent).toBe(""),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed before increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),t.click(),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0"),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe("1||||1","failed first increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2"),e.click();let r=(0,o._8)("passed-in-output");(0,o.l_)(n.textContent).toBe("true"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe("0||||0");const s="0||||0",a="1||||1",i=(0,o._8)("passed-in-sub-ex1"),c=`1||your fun number ${r}||1`;(0,o.l_)(i).toBe(c,`failed after hide expected #passed-in-sub-ex1 to be ${c} but its ${i}`),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),t.click(),r=(0,o._8)("passed-in-output"),(0,o.l_)((0,o._8)("passed-in-sub-ex0")).toBe(`0||${r}||0`),(0,o.l_)((0,o._8)("passed-in-sub-ex1")).toBe(`1||your fun number ${r}||1`,"failed third increase"),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe(`2||your tag number ${r}||2`),e.click();const l=(0,o._8)("passed-in-sub-ex0");(0,o.l_)(l).toBe(s,`Lest click check expected #passed-in-sub-ex0 to be ${s} but it is ${l}`);const u=(0,o._8)("passed-in-sub-ex1");(0,o.l_)(u).toBe(a,`Failed closing expected #passed-in-sub-ex1 ${u} to be ${a} but it is ${u}`),(0,o.l_)((0,o._8)("passed-in-sub-ex2")).toBe("2||||2")}))})),(0,o.it)("host",(()=>{let t=Number((0,o._8)("hostDestroyCount"));(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1,"hostedContent html not as expected"),(0,o.cS)("hostHideShow"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1,"host destroy mismatch"),(0,o.l_)((0,o._8)("hostedContent")).toBe(""),(0,o.cS)("hostHideShow"),(0,o.l_)(isNaN(Number((0,o._8)("hostedContent")))).toBe(!1,"hostedContent check 2 not right"),(0,o.l_)(Number((0,o._8)("hostDestroyCount"))).toBe(t+1,"host destroy mismatch 2")})),(0,o.it)("basic",(()=>{(0,o.Lo)("#content-subject-pipe-display0","#content-subject-pipe-display1"),(0,o.Lo)("#content-combineLatest-pipe-display0","#content-combineLatest-pipe-display1"),(0,o.l_)((0,o.dy)("#content-dom-parse-0-0")).toBe((0,o.dy)("#content-dom-parse-0-1"))})),(0,o.it)("html",(()=>{(0,o.Lo)("#content-combineLatest-pipeHtml-display0","#content-combineLatest-pipeHtml-display1")}))}))},168:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("🔀 tagSwitching",(()=>{(0,o.it)("0",(()=>{(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(1),(0,o.l_)((0,o.o5)("#tag-switch-dropdown")).toBe(1),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(2),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0)})),(0,o.it)("1",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="1",t.onchange({target:t}),(0,o.l_)((0,o.o5)("#tagSwitch-2-hello")).toBe(0),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0),(0,o.wG)("#tagSwitch-1-hello",5)})),(0,o.it)("2",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="2",t.onchange({target:t}),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",4),(0,o.l_)((0,o.o5)("#tagSwitch-3-hello")).toBe(0),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("3",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="3",t.onchange({target:t}),(0,o.l_)((0,o.L7)("selectTag-display").textContent).toBe("3"),(0,o.l_)((0,o.o5)("#tagSwitch-1-hello")).toBe(0);const e=(0,o.o5)("#tagSwitch-2-hello");(0,o.l_)(e).toBe(0,`Expected no #tagSwitch-2-hello but got ${e}`),(0,o.wG)("#tagSwitch-3-hello",7),(0,o.l_)((0,o.o5)("#select-tag-above")).toBe(0)})),(0,o.it)("4",(()=>{const t=(0,o.L7)("tag-switch-dropdown");t.value="",t.onchange({target:t}),(0,o.wG)("#select-tag-above",1),(0,o.wG)("#tag-switch-dropdown",1),(0,o.wG)("#tagSwitch-1-hello",2),(0,o.wG)("#tagSwitch-2-hello",0),(0,o.wG)("#tagSwitch-3-hello",0)}))}))},525:(t,e,n)=>{function o(t){const e=((new Error).stack||"").split("\n")[3]||"";return{toBe(n,o){if(t!==n){const r="function"==typeof o?o():o,s=r||`Expected ${JSON.stringify(n)} but got ${JSON.stringify(t)}`,a=new Error(s);throw a.stack=s+"\n"+e+(a.stack?"\n"+a.stack:""),a}},toBeDefined(){if(void 0===t)throw new Error("Expected value to be defined but got undefined")},toBeUndefined(){if(void 0!==t)throw new Error(`Expected value to be undefined but got ${JSON.stringify(t)}`)},toBeGreaterThan(e,n){if("number"!=typeof t||!(t>e))throw new Error(`Expected ${t} to be greater than ${e}\n\n${n}`)},toHaveLength(e){const n=t;if(!("length"in n)||n.length!==e)throw new Error(`Expected length ${e} but got ${n.length||"undefined"}`)},not:{toBe(e){if(t===e)throw new Error(`Expected ${JSON.stringify(t)} not to be ${JSON.stringify(e)}`)}}}}n.d(e,{l:()=>a});const r=void 0!==globalThis.vitest,s=r?globalThis.expect:null;const a=r&&s?function(t,e){if(void 0!==e){const n=s(t);return{toBe(t){try{n.toBe(t)}catch(t){throw new Error(e)}},toBeDefined(){try{n.toBeDefined()}catch(t){throw new Error(e)}},toBeUndefined(){try{n.toBeUndefined()}catch(t){throw new Error(e)}},toBeGreaterThan(t){try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}},toHaveLength(t){try{n.toHaveLength(t)}catch(t){throw new Error(e)}},not:{toBe(t){try{n.not.toBe(t)}catch(t){throw new Error(e)}}},to:{be:{greaterThan:t=>{try{n.toBeGreaterThan(t)}catch(t){throw new Error(e)}}}}}}const n=s(t);return{...n,to:{be:{greaterThan:e=>s(t).toBeGreaterThan(e)}},toBe:t=>n.toBe(t)}}:function(t,e){if(void 0!==e){const n=o(t);return{toBe(t){n.toBe(t,e)},toBeDefined(){n.toBeDefined()},toBeUndefined(){n.toBeUndefined()},toHaveLength(t){n.toHaveLength(t)},not:{toBe(t){n.not.toBe(t)}},to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}const n=o(t);return{...n,to:{be:{greaterThan:t=>{n.toBeGreaterThan(t)}}}}}},78:(t,e,n)=>{n.d(e,{iu:()=>L,HF:()=>E,L7:()=>y,wS:()=>f,VJ:()=>g,V4:()=>l,cS:()=>u,dQ:()=>d,QX:()=>s,yY:()=>I,o5:()=>a,l_:()=>r.l,wG:()=>k,Fr:()=>S,Lo:()=>_,T_:()=>c,dy:()=>b,_8:()=>x,it:()=>j,WB:()=>p,Sb:()=>h,IO:()=>i,_v:()=>C,di:()=>B,Iq:()=>V,dZ:()=>m,b$:()=>w});var o=n(995),r=n(525);function s(t){return document.querySelectorAll(t).length}const a=s;function i(t){return document.querySelectorAll(t)}function c(t){return i(t).forEach((t=>t.focus()))}function l(t){[...i(t)].forEach((t=>t.click()))}function u(t){l("#"+t)}function d(t,e=0){i(t)[e].click()}function p(t,e){const n=new KeyboardEvent("keydown",{key:e,bubbles:!0});t.dispatchEvent(n)}function h(t,e){const n=new KeyboardEvent("keyup",{key:e,bubbles:!0});t.dispatchEvent(n)}function g(t,e=0){f(i(t)[e])}function f(t){t.dispatchEvent(new Event("change",{bubbles:!0}))}function b(t){let e="";return i(t).forEach((t=>e+=t.innerHTML)),e}function m(t){let e="";return i(t).forEach((t=>e+=t.textContent)),e}function y(t){return document.getElementById(t)}function x(t){const e=document.getElementById(t);return e?.innerHTML||""}new Event("focusout",{bubbles:!0,cancelable:!1});const v=new Event("change",{bubbles:!0,cancelable:!1});function w(t){t.dispatchEvent(v)}function C(t){return new Promise((e=>setTimeout(e,t)))}function k(t,e,n){const o=document.querySelectorAll(t),s=o.length;return n=n||`Expected ${e} elements to match query ${t} but found ${s}`,(0,r.l)(s).toBe(e,n),o}function _(...t){const e=t.reduce(((t,e)=>{const n=document.querySelectorAll(e);return t.push(...n),t}),[]);if(0===e.length)throw new Error("Expected elements to be present in expectMatchedHtml() query but found none");const n=e.pop().innerHTML;e.forEach((t=>(0,r.l)(t.innerHTML).toBe(n)))}function S(t,e){(0,r.l)(b(t)).toBe(e)}function T(t,e,{elementCountExpected:n}={elementCountExpected:1},o,s,a=0){(0,r.l)(t.length).toBe(n,(()=>`Expected ${o} to be ${n} elements but is instead ${t.length}`)),(0,r.l)(e.length).toBe(n,(()=>`Expected ${s} to be ${n} elements but is instead ${e.length}`)),t.forEach(((t,e)=>{const n=document.querySelectorAll(s)[e];(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body BEFORE clicking ${o}`);let i=Number(n?.innerText);(0,r.l)(typeof t.click).toBe("function"),t.click(),(0,r.l)(n).toBeDefined(),(0,r.l)(document.body.contains(n)).toBe(!0,`The selected element ${s} is no longer an element on the document body AFTER clicking ${o}`);let c=i+1;i=Number(n.innerText),(0,r.l)(document.body.contains(n)).toBe(!0),(0,r.l)(c).toBe(i,(()=>`After click ${o}, counter test ${a+1} of ${a+2} expected ${s} to be value ${c} but it is ${i}`)),t.click(),i=Number(n?.innerText),++c,(0,r.l)(c).toBe(i,(()=>`Counter test ${a+2} of ${a+2} expected ${s} to increase value to ${c} but it is ${i}`))}))}function B(t,e,{elementCountExpected:n}={elementCountExpected:1}){return T(document.querySelectorAll(t),document.querySelectorAll(e),{elementCountExpected:n},t,e)}function V(...t){const[e,n]=t.shift();let o=k(n,1),s=k(e,1);const a=o[0].innerText;T(s,o,{elementCountExpected:1},e,n);let i=2;t.forEach((([t,c],l)=>{o=k(c,1),s=k(t,1);let u=o[0],d=u.innerText;const p=(Number(a)+i).toString();(0,r.l)(d).toBe(p,(()=>`Expected second ${c} increase provider to be increased to ${a} but got ${d}`)),T(s,o,{elementCountExpected:1},e,n,l+2),u=o[0],d=u.innerText;const h=i+2;(0,r.l)(d).toBe((Number(a)+h).toString(),(()=>`Expected ${c} innerText to be ${Number(a)+h} but instead it is ${d}`)),i+=2}))}const J=void 0!==globalThis.vitest,j=J?globalThis.it:o.it,I=J?globalThis.describe:o.yY,E=J?globalThis.beforeEach:o.HF,L=J?globalThis.afterEach:o.iu},995:(t,e,n)=>{n.d(e,{HF:()=>u,executeBrowserTests:()=>p,it:()=>c,iu:()=>d,yY:()=>l});n(525);let o=null,r=new Map,s=[],a=new Map;const i=void 0!==globalThis.vitest,c=i?globalThis.it:(t,e)=>{const n={name:t,fn:e,suite:o};s.push(n);const a=r.get(o)||[];a.push(n),r.set(o,a)},l=i?globalThis.describe:(t,e)=>{const n=o;o=t,r.set(t,[]),a.set(t,{beforeEach:[],afterEach:[]}),e(),o=n},u=i?globalThis.beforeEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.beforeEach.push(t),a.set(o,e)},d=i?globalThis.afterEach:t=>{const e=a.get(o)||{beforeEach:[],afterEach:[]};e.afterEach.push(t),a.set(o,e)};async function p(){let t=0,e=0;const n=[];console.log(`🧪 Running ${s.length} tests...\n`);const i=new Map;for(const t of s){const e=t.suite||null,n=i.get(e)||[];n.push(t),i.set(e,n)}for(const[o,r]of i){o&&console.log(`${o}`);for(const s of r){const r=o?"  ":"",i=a.get(s.suite);try{if(i?.beforeEach)for(const t of i.beforeEach)await t();if(await s.fn(),t++,console.log(`${r}✅ ${s.name}`),i?.afterEach)for(const t of i.afterEach)await t()}catch(t){if(e++,n.push({test:s.name,suite:s.suite,error:t}),console.error(`${r}❌ ${s.name}`),console.error(t),i?.afterEach)for(const t of i.afterEach)try{await t()}catch(t){console.error("Error in afterEach hook:",t)}}}o&&console.log("")}return console.log(`\n📊 Test Results: ${t} passed, ${e} failed`),n.length>0&&(console.error("\n❌ Failed Tests:"),n.forEach((({test:t,suite:e,error:n})=>{const o=e?`${e} > ${t}`:t;if(console.error(`\n${o}:`),console.error(n),n.stack){n.stack.split("\n").forEach((t=>{t.includes(".ts:")&&!t.includes("node_modules")&&console.error(t.trim())}))}}))),s=[],r.clear(),a.clear(),o=null,0===e}},337:(t,e,n)=>{n.r(e);var o=n(78);function r(){console.time("☀️-speedometer-all"),console.time("🆕 speedometer-adding");const t=document.querySelector(".new-todo");for(let e=0;e<500;e++)t.value="aaa - "+e,(0,o.WB)(t,"Enter");console.timeEnd("🆕 speedometer-adding"),console.time("✏️ speedometer-editing");const e=document.querySelectorAll(".toggle");for(let t=0;t<500;t++)e[t].click();console.timeEnd("✏️ speedometer-editing"),console.time("🗑️ speedometer-deleting");const n=document.querySelectorAll(".destroy");for(let t=499;t>=0;t--)n[t].click();console.timeEnd("🗑️ speedometer-deleting"),console.timeEnd("☀️-speedometer-all")}(0,o.yY)("☑️ todos",(function(){const t=(0,o.IO)(".new-todo")[0];(0,o.it)("todos add one remove one",(async function(){(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),(0,o.l_)(t).toBeDefined(),t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0)})),(0,o.it)("todos basic",(async function(){window.location.hash="#/",await(0,o._v)(1),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),(0,o.V4)("input.toggle"),(0,o.V4)("button.destroy"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(0),t.value="one",(0,o.WB)(t,"Enter"),t.value="two",(0,o.WB)(t,"Enter");const e=(0,o.IO)("input.toggle")[1];e.click(),(0,o.l_)(e.checked).toBe(!0),t.value="three",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.V4)("#todo-view-active-link"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.l_)(window.location.hash).toBe("#/active"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.V4)("#todo-view-completed-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.V4)("#todo-view-all-link"),await(0,o._v)(1),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(3),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(2),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(1),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input.toggle").length).toBe(0)})),(0,o.it)("todos editing",(function(){t.value="one",(0,o.WB)(t,"Enter"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0);let e=new MouseEvent("dblclick",{bubbles:!0,cancelable:!0,view:window});(0,o.IO)('label[data-testid="todo-item-label"]')[0].dispatchEvent(e),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(1),(0,o.T_)("input#edit-todo-input");const n=(0,o.IO)("input#edit-todo-input")[0];n.value="two",(0,o.WB)(n,"Enter"),(0,o.l_)((0,o.IO)("button.destroy").length).toBe(1),(0,o.l_)((0,o.IO)("input.new-todo").length).toBe(1),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0),(0,o.dQ)("button.destroy"),(0,o.l_)((0,o.IO)("input#edit-todo-input").length).toBe(0)})),(0,o.it)("⌚️ todos speedometer",r)}))},702:(t,e,n)=>{n.r(e);var o=n(78);(0,o.yY)("⌚️ watch tests",(()=>{const t=(0,o.dy)("#🍄-slowChangeCount"),e="0"===t;(0,o.it)("basic",(async()=>{const n=Number((0,o._8)("watch-testing-num-display"));(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),e?((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(""),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe("")):((0,o.l_)((0,o.dy)("#🍄-watchPropNumSlow")).toBe(t),(0,o.l_)(Number((0,o.dy)("#🦷-watchTruth"))).toBeGreaterThan(Number(t)),(0,o.l_)((0,o.dy)("#🦷-watchTruthAsSub")).toBe((0,o.dy)("#🦷-truthSubChangeCount"))),(0,o.V4)("#watch-testing-num-button"),(0,o.Lo)("#watch-testing-num-display","#🍄-slowChangeCount"),(0,o.Lo)("#🍄-watchPropNumSlow","#🍄-slowChangeCount"),(0,o.l_)((0,o.dy)("#🍄‍🟫-subjectChangeCount")).toBe((n+2).toString()),(0,o.Lo)("#🍄‍🟫-subjectChangeCount","#🍄‍🟫-watchPropNumSubject");const r=Number((0,o.dy)("#🦷-truthChangeCount"));(0,o.V4)("#🦷-truthChange-button");let s=(r+1).toString();(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+1).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("false"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),s=(r+2).toString(),(0,o.l_)((0,o.dy)("#🦷-truthChange")).toBe("true"),(0,o.l_)((0,o.dy)("#🦷-watchTruth")).toBe(s),(0,o.l_)((0,o.dy)("#🦷-truthChangeCount")).toBe(s),(0,o.V4)("#🦷-truthChange-button"),(0,o.V4)("#🦷-reset-button");const a=(0,o.dy)("#🦷-watchTruth"),i=(0,o.dy)("#🦷-watchTruthAsSub");(0,o.l_)(i).toBe(a)}))}))}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={exports:{}};return t[o](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.d(o,{gV:()=>su,jG:()=>lu,fm:()=>Ps,KH:()=>uu,bX:()=>zr,mK:()=>yi});const t=":tagvar",e=":";function r(t){if(t.startsWith("class."))return"class";const e=function(t){switch(t){case"autoselect":return"autoselect";case"autofocus":return"autofocus"}return!1}(t);return!1!==e?e:!!t.startsWith("style.")&&"style"}const s=new RegExp(t+"(\\d+)"+e,"g");function a(e){return e.search&&e.startsWith(t)?e.search(s):-1}const i=/(:tagvar\d+:)/,c="ondoubleclick",l=/([:_a-zA-Z0-9\-.]+)\s*(?:=\s*"([^"]*)"|=\s*(\S+))?/g,u=/<\/?([a-zA-Z0-9-]+)((?:\s+[a-zA-Z_:*][\w:.-]*(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s"'=<>`]+))?)+\s*|\s*)\/?>/g;function d(n){const o=[],r=[],s=[];let a=null,c=-1,d=0;const g=new RegExp(u,"g");for(n=function(t){return t.replace(p,(function(t){return t.replace(/\[l t\]/g,"[l&nbsp;t]").replace(/\[g t\]/g,"[g&nbsp;t]").replace(/</g,"[l t]").replace(/>/g,"[g t]")}))}(n);d<n.length;){const u=g.exec(n);if(!u)break;const[p,b,y]=u,x=p.startsWith("</"),v=p.endsWith("/>");if(d<u.index){const o=n.slice(d,u.index);if(o.trim()){const n=f(o);for(let o of n)o.startsWith(t)&&o.search(i)>=0&&-1===o.search(w)&&(o=t+ ++c+e),h(a,r,o)}}if(d=u.index+p.length,x){a=s.pop()||null;continue}const C=[];let k;for(;null!==(k=l.exec(y));)c=m(k,c,o,C);const _={nn:b};C.length&&(_.at=C),a?(a.ch||(a.ch=[]),a.ch.push(_)):r.push(_),v||(s.push(a),a=_)}if(d<n.length){const e=n.slice(d);if(e.trim()){const n=f(e);for(const e of n)e.startsWith(t)&&++c,h(a,r,e)}}return r}const p=new RegExp("(\x3c!--[\\s\\S]*?--\x3e)","g");function h(t,e,n){!function(t,e,n){t?(t.ch||(t.ch=[]),t.ch.push(n)):e.push(n)}(t,e,{nn:"text",tc:g(n)})}function g(t){return t.replace(/(\[l t\]!--[\s\S]*?--\[g t\])/g,(function(t){return t.replace(/\[l t\]/g,"<").replace(/\[g t\]/g,">").replace(/\[l&nbsp;t\]/g,"[l t]").replace(/\[g&nbsp;t\]/g,"[g t]")}))}function f(t){return t.split(i).filter(b)}function b(t){return""!==t}function m(n,o,a,i){const l=n[1]||n[3]||n[5];let u=n[2]||n[4]||n[6];if(void 0===l)return o;const d=""!==n[2],p=void 0===u&&d,h=l.toLowerCase(),g=h.startsWith("on")?function(t){if(t.startsWith("on"))return t.length===c.length&&t===c?"dblclick":t.slice(2,t.length);return t}(h):h;if(p){if(l.slice(0,t.length)===t){const n=t+ ++o+e;return a.push(["at",n]),i.push([n]),o}if(n[0].startsWith(l)&&n[0].slice(l.length,n[0].length).search(/\s+$/)>=0)return i.push([g]),o;const r=n[3];if(r.search(w)>=0){u=r;const t=[g,u];return i.push(t),o}u=t+ ++o+e}d||(u=n[2]);const f=u.split(x).filter((t=>t.length>0));f.length>1&&(u=f,f.forEach((t=>{t.search(s)>=0&&++o})));const b=[g,u],m=r(h);return m&&b.push(m),"style"===g?(i.unshift(b),o):(i.push(b),o)}const y=new RegExp(t+"(\\d+)"+e,"gi"),x=new RegExp("("+t+"\\d+"+e+")","gi"),v=t.slice(0,t.length-1),w=new RegExp(v+"&#x72;(\\d+)"+e,"gi"),C=v+"&#x72;$1"+e;function k(n,o){const r=function(n,o){const r=n;return function(n,o){const r=[];for(let s=0;s<n.length;++s){const a=n[s].replace(y,C);s<o.length?r.push(a+t+s+e):r.push(a)}return function(n,o,r){const s=r.length-o.length;if(s>0)for(let r=s;r>0;--r)n.push(t+(o.length+r-1)+e)}(r,n,o),r}(r,o)}(n,o).join("");return d(r)}const _="";var S,T;!function(t){t.string="string",t.number="number",t.boolean="boolean",t[void 0]="undefined"}(S||(S={})),function(t){t.function="function",t.date="date",t.unknown="unknown",t.object="object"}(T||(T={}));const B={tag:"html",dom:"dom",templater:"templater",tagComponent:"tagComponent",tagArray:"tagArray",host:"host",subscribe:"subscribe",signal:"signal",renderOnce:"renderOnce",stateRender:"stateRender",version:Date.now()},V="ch";function J(t,e,n=[],o=[]){const r=t;for(let t=0;t<r.length;t++){const s=[...o,t],a=r[t];if(a.at){const t=a.at;a.at=I(t,e)}if(a.ch){const t=a.ch,o=[...s,V];a.ch=J(t,e,n,o)}t=j(a,e,r,t)}return r}function j(n,o,r,a){if("text"!==n.nn)return a;const i=n;let c,l=i.tc;if(typeof l!==S.string)return a;for(;null!==(c=s.exec(l));){const n=c[1],i=parseInt(n,10);if(!isNaN(i)&&i<o){const n=t+i+e,o=l.slice(c.index+n.length);r.splice(a,1,{nn:"text",v:i}),l=o,s.lastIndex=0}}return i.tc=l,a}function I(e,n){const o=[];for(const r of e){const[e,s,a]=r;if(e.startsWith(t)){const r=parseInt(e.replace(t,""),10);if(!isNaN(r)&&r<n){o.push([{tagJsVar:r}]);continue}}if(typeof s===S.string&&s.startsWith(t)){const r=parseInt(s.replace(t,""),10);if(!isNaN(r)&&r<n){o.push([e,{tagJsVar:r},a]);continue}}o.push(r)}return o}function E(t){return t.length}const L={};function P(t,e){const n=function(t){const e=t.map(E);return e.push(t.length),Number(e.join(""))}(t),o=L[n],r=o&&function(t,e,n){if(n&&n.strings.length===t.length&&n.strings.every(((e,n)=>e===t[n]))&&n.values.length===e.length)return!0;return!1}(t,e,o);if(r)return o.domMetaMap;const s=J(k(t,e),e.length),a={interpolation:void 0,string:void 0,strings:t,values:e,domMetaMap:s};return L[n]=a,s}const D=function(){};let O=[];const N=[];let $=[],A=[],H=[];const M={locks:0,removeLocks:0};function R(t,e){e.textContent=t}function U(){if(!(M.locks>0))return function(){const t=N.length;(function(){for(const t of N)t[0](...t[1])})(),N.splice(0,t);for(const t of $)t[0](...t[1]);for(const t of A)t[0](...t[1]);for(const t of O)t[0](...t[1])}(),void function(){O=[],$=[],A=[];const t=H;H=[];for(const e of t)e[0](...e[1])}()}function W(t,e){N.push([z,[t,e]])}function z(t,e){t||console.info("no element by",e);t.parentNode.removeChild(t)}function F(t,e,n){t.parentNode.insertBefore(e,t)}function Y(t,e){t.appendChild(e)}const X="object"==typeof document&&document.createElement("div");function q(t){return X.innerHTML=t,document.createTextNode(X.innerHTML)}function G(t,e,n=D,o){const r=q(e);F(t,r),n(r)}function K(t,e,n=D){X.innerHTML=e;const o=document.createTextNode(X.textContent);F(t,o),n(o)}function Q(t,e,n){X.innerHTML=e;const o=document.createTextNode(X.textContent);Y(t,o),n(o)}function Z(t,e){++t.updateCount;const n=tt(t.subContext,e);return delete t.subContext,n}function tt(t,e){t.deleted=!0;const n=t.appendMarker;if(n&&(W(n,"deleteSubContext"),delete t.appendMarker),!t.hasEmitted)return;const o=t.contextItem;return o.tagJsVar.destroy(o,e),76}function et(t){if(!t)return!1;switch(t.tagJsType){case B.dom:case B.tag:case B.templater:return!0}return!1}function nt(t){const e=t?.tagJsType;return e===B.tagComponent||e===B.stateRender}function ot(t){return at(t)&&typeof t.subscribe===T.function}function rt(t){return t&&st(t.then)}function st(t){return typeof t===T.function}function at(t){return typeof t===T.object&&null!==t}function it(t){return Array.isArray(t)}function ct(t){return t.renderCount=t.renderCount||0,t.state={newer:{state:[],states:[]}},t.global={blocked:[]}}function lt(){return Jt.stateConfig.support}function ut(t){return Tr(t.context),Jt.stateConfig.support=t}function dt(t){const e=t.state;return e&&e.newest&&e.newest?e.newest:t.parentContext?dt(t.parentContext):void 0}function pt(t){let e=t;for(;e.ownerSupport&&!nt(e.templater);)e=e.ownerSupport;const n=e.context.state;return n&&n.newest||e}function ht(...t){return t}function gt(t){const e=Jt.stateConfig;return e.states[e.statesIndex]=t,++e.statesIndex,t(ht)}function ft(t){const e=Jt.stateConfig,n=e.statesIndex,o=pt(e.prevSupport).context.state.newer.states[n];let r=[];o((function(...t){return r=t,t}));return e.states[e.statesIndex]=t,++e.statesIndex,t((function(...t){return r}))}function bt(t){Tr(t);const e=Jt.stateConfig;e.handlers.handler=Ct,e.handlers.statesHandler=gt,e.rearray=[];const n=e.state=[],o=e.states=[];e.statesIndex=0;(t.state=t.state||{}).newer={state:n,states:o}}function mt(t){const e=Jt.stateConfig;return e.rearray=t,e.state=[],e.states=[],e.statesIndex=0,e.handlers.handler=wt,e.handlers.statesHandler=ft,e}function yt(t,e,n){mt(n);Jt.stateConfig.prevSupport=e,ut(t)}class xt{}function vt(t){const e=t.callback;if(!e)return t.defaultValue;const[n]=function(t){const[e]=t(xt),[n]=t(e);return[e,n]}(e);return n}function wt(){const t=Jt.stateConfig,e=t.rearray[t.state.length];return t.state.push(e),e.defaultValue}function Ct(t){const e=Jt.stateConfig,n=_r();if(!n||!n.state){const t="State requested but TaggedJs is not currently rendering a tag or host";throw console.error(t,{config:e,context:n}),new Error(t)}const o=n.state.newer;e.state=o.state;let r=t;if(typeof t===T.function&&(r=t()),typeof r===T.function){const t=r;r=function(...e){return t(...e)},r.original=t}const s={get:function(){return vt(s)},defaultValue:r};return e.state.push(s),r}function kt(t){const e=new Tt;return e.subscribeWith=e=>{const n=[],o=[],r=(r,s)=>{n[s]=!0,o[s]=r;if(n.length===t.length){for(const t of n)if(!t)return;e(o,a)}},s=[...t],a=s.shift().subscribe((t=>r(t,0))),i=s.map(((t,e)=>t.subscribe((t=>r(t,e+1)))));return a.subscriptions=i,a},e}function _t(t,e,n){const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value+1);const r=function(){r.unsubscribe()};return r.callback=e,r.subscriptions=[],r.unsubscribe=function(){return function(t,e,n){!function(t,e){const n=t.findIndex((t=>t.callback===e));-1!==n&&t.splice(n,1)}(e,n);const o=Tt.globalSubCount$;Tt.globalSubCount$.next(o.value-1),t.unsubscribe=()=>t;const r=t.subscriptions;for(const t of r)t.unsubscribe();return t}(r,n,e)},r.add=t=>(r.subscriptions.push(t),r),r.next=t=>{e(t,r)},r}function St(t,e,n){const o=[...e],r=o.shift(),s=t=>{if(o.length)return St(t,o,n);n(t)};let a=s;const i=r(t,{setHandler:t=>a=t,next:s});a(i)}class Tt{constructor(t,e){this.onSubscription=e,this.methods=[],this.isSubject=!0,this.subscribers=[],this.set=this.next.bind(this),arguments.length>0&&(this.value=t)}subscribe(t){const e=_t(0,t,this.subscribers),n=this.subscribeWith;if(n){if(this.methods.length){const n=t;t=t=>{St(t,this.methods,(t=>n(t,e)))}}return n(t)}return this.subscribers.push(e),this.onSubscription&&this.onSubscription(e),e}next(t){this.value=t,this.emit()}emit(){const t=this.value,e=this.subscribers;for(const n of e)n.callback(t,n)}toPromise(){return new Promise((t=>{this.subscribe(((e,n)=>{n.unsubscribe(),t(e)}))}))}toCallback(t){const e=this.subscribe(((n,o)=>{const r=o?.unsubscribe;r?r():setTimeout((()=>e.unsubscribe()),0),t(n)}));return this}pipe(...t){const e=[];"value"in this&&e.push(this.value);const n=new Tt(...e);return n.setMethods(t),n.subscribeWith=t=>this.subscribe(t),n.next=t=>this.next(t),n}setMethods(t){this.methods=t}static all(t){return kt(t.map((t=>{if(ot(t))return t;return new Tt(t,(e=>(e.next(t),e)))})))}}Tt.globalSubCount$=new Tt(0);function Bt(t){Object.defineProperty(t,"value",{set(e){t._value=e,t.emit()},get:()=>t._value})}const Vt=new Tt(void 0,(function(t){lt()||t.next()})),Jt={stateConfig:{state:[],version:Date.now(),handlers:{handler:Ct,statesHandler:gt}},tagClosed$:Vt};function jt(t,e,n){const o=t.tagJsVar.hasValueChanged(e,t,n);return 0===o||Ir(e,t,n,o),o}function It(t,e,n,o,r){const s=e.context;s.locked=3,n.element=n.element||o,Tr(n),n.tagJsVar.processInit(t,n,e,r,o),Br(),n.value=t,delete s.locked}function Et(t){switch(t){case void 0:case!1:case null:return _}return t}function Lt(t,e,n,o){switch(o){case"autofocus":return void $.push([$t,[n]]);case"autoselect":return void $.push([Nt,[n]]);case"style":{const o=t.split(".");return void $.push([Pt,[n,o,e]])}case"class":return void function(t,e,n){const o=t.split(".");if(o.shift(),e){for(const t of o)$.push([Dt,[n,t]]);return}for(const t of o)$.push([Ot,[n,t]])}(t,e,n)}throw new Error(`Invalid special attribute of ${o}. ${t}`)}function Pt(t,e,n){const o=e[1];t.style[o]=n,t.style.setProperty(o,n)}function Dt(t,e){t.classList.add(e)}function Ot(t,e){t.classList.remove(e)}function Nt(t){t.select()}function $t(t){t.focus()}function At(t,e,n){"object"!=typeof t[e]&&(t[e]={});for(const o in n){const r=n[o];$.push([zt,[t,e,o,r]])}if(t[e].setProperty)for(const o in n){const r=n[o];$.push([Wt,[t,e,o,r]])}}function Ht(t,e,n){t.setAttribute(e,"")}function Mt(t,e,n){if(at(n))return At(t,e,n);Ut(t,e,n)}function Rt(t,e,n){t[e]=!!n}function Ut(t,e,n){t[e]=n,void 0!==n&&!1!==n&&null!==n?t.setAttribute(e,n):t.removeAttribute(e)}function Wt(t,e,n,o){t[e].setProperty(n,o)}function zt(t,e,n,o){t[e][n]=o}function Ft(t,e){const n=function(t,e,n=[]){const o=t.context;n.push({support:t,renderCount:o.renderCount,provider:e});const r=e.children;for(let t=r.length-1;t>=0;--t){const o=r[t],s=o.context;n.push({support:o,renderCount:s.renderCount,provider:e})}return n}(t,e);return n}function Yt(t){return t.support}function Xt(t,e){return qt(t,e)}function qt(t,e){if(null===t||typeof t!==T.object)return t;if(e<0)return t;if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);const n=it(t)?[]:Object.create(Object.getPrototypeOf(t));if(it(t))for(let o=0;o<t.length;o++)n[o]=qt(t[o],e-1);else for(const o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=qt(t[o],e-1));return n}function Gt(t,e,n){return Kt(t,e,n)}function Kt(t,e,n){return!(t!==e&&(o=t,r=e,!st(o)||!st(r)||o.toString()!==r.toString()))||(n<0||typeof t===T.object&&typeof e===T.object&&(t instanceof Date&&e instanceof Date?t.getTime()===e.getTime():it(t)&&it(e)?function(t,e,n){if(t.length!==e.length)return!1;for(let o=0;o<t.length;o++)if(!Kt(t[o],e[o],n-1))return!1;return!0}(t,e,n-1):!it(t)&&!it(e)&&function(t,e,n){const o=Object.keys(t),r=Object.keys(e);if(0===o.length&&0===r.length)return!0;if(o.length!==r.length)return!1;for(const s of o){if(!r.includes(s)||!Kt(t[s],e[s],n-1))return!1}return!0}(t,e,n-1)));var o,r}function Qt(t,e){const n=t.length;for(let o=0;o<n;++o){const n=t[o],r=e[o];if(it(n)&&it(r)){if(n===r)continue;return 3}if(typeof n!==T.function||typeof r!==T.function)if(typeof n!==T.object){if(n!==r)return 3.3}else if(typeof e===T.object){const t=Object.entries(n);for(const e of t){if(!Zt(e,r))return 3.1}}}return!1}function Zt([t,e],n){const o=n[t];return typeof e===T.function&&typeof o===T.function||o===e}function te(t){return t.map(ee)}function ee(t,e){const n=t,o=t?.tagJsType;if(o)switch(o){case B.signal:case B.subscribe:case B.stateRender:return;case B.dom:case B.tag:case B.templater:return te(n.values)}return it(t)?te(n):Xt(t,e)}function ne(t){return ee(t,Qn)}function oe(t){return ee(t,Zn)}function re(t,e,n){const o={templater:t,context:e,castedProps:n,appSupport:void 0};return e.global.blocked=[],e.state||(e.state={newer:{state:[],states:[]}}),o}function se(t,e,n,o){e.appSupport=n;const r=t.props;return r&&(e.propsConfig=function(t,e,n){const o=t.templater;if(o.tagJsType!==B.stateRender){switch(o.propWatch){case zn.IMMUTABLE:return t.propsConfig={latest:e,castProps:n};case zn.SHALLOW:return t.propsConfig={latest:e.map(ne),castProps:n}}return t.propsConfig={latest:e.map(oe),castProps:n}}}(e,r,o)),e}function ae(t,e){const n=e.providers;if(n)for(const t of n)for(let n=t.children.length-1;n>=0;--n){t.children[n].context.global===e&&t.children.splice(n,1)}t.context.destroy$.next(),t.context.renderCount=0}function ie(t,e){for(const n of t){const t=n.lastArray;if(t){ie(t,e);continue}const o=n.value;if(o?.tagJsType===B.subscribe){o.destroy(n,e),n.deleted=!0;continue}const r=n.global;if(!r)continue;const s=n.state.newest,a=r.subscriptions;a&&a.forEach(le),nt(s.templater)&&ae(s,r);ie(n.contexts,s),r.deleted=!0}}function ce(t,e=[],n=[]){for(const o of t){const t=o.global;if(!t)continue;const r=o.state.newest;if(r){e.push(r);const o=t.subscriptions;o&&n.push(...o)}const s=o.contexts;s&&ce(s,e,n)}return{tags:e,subs:n}}function le(t){t.unsubscribe()}function ue(t,e,n,o){const r=t.length-1,s=e-o,a=s<0||r<s,i=n[e];if(a)return de(i),1;const c=function(t,e,n,o,r){const s=e&&t!==e.arrayValue;if(s)return de(n),o.splice(r,1),2;return 0}(i.value.arrayValue,t[e],i,n,e);return c}function de(t){!function(t,e){if(t&&e.state?.oldest){return void me(e.state.oldest,t)}e.tagJsVar.destroy(e,{})}(t.global,t)}function pe(t){++t.updateCount;he(t,t.lastArray)}function he(t,e){for(let t=0;t<e.length;++t)de(e[t]);delete t.lastArray}function ge(t){const e=t.marker;e&&W(e,"destroyMarker");W(t.domElement,"destroyClone")}function fe(t,e){!function(t,e){for(const n of t){if(n.withinOwnerElement){const t=n.tagJsVar;if(t&&"host"===t.tagJsType){const o=n.supportOwner,r=t.destroy(n,o);rt(r)&&e.push(r)}continue}const t=n.lastArray;if(t){he(n,t);continue}const o=n.simpleValueElm;if(o){delete n.simpleValueElm,W(o,"smartRemoveByContext");continue}const r=n.global;if(void 0===r)continue;r.deleted=!0;const s=n.state?.oldest;s&&fe(n,e)}}(t.contexts,e),be(t)}function be(t){!function(t){for(let e=t.length-1;e>=0;--e)ge(t[e]),t.splice(e,1)}(t.htmlDomMeta)}function me(t,e){const n=t.context;e.deleted=!0,n.renderCount=0;const o=[];return ie(n.contexts,t),t.templater.wrapper&&ae(t,e),fe(n,o),delete n.state,delete n.contexts,delete n.returnValue,o}function ye(t,e){const n=xe(t,e);return!(n||!e.templater.tag?._innerHTML||!xe(t.outerHTML,e))||n}function xe(t,e){const n=t.templater,o=e.templater,r=n?.tag||t,s=o.tag;if(n?.tagJsType===B.stateRender)return n.dom===o.dom;switch(r.tagJsType){case B.dom:return s?.tagJsType===B.dom&&function(t,e){const n=t.dom,o=e.dom;return n===o}(r,s);case B.tag:{const n=function(t,e,n,o){const r=t.strings,s=e.strings;if(r.length!==s.length)return!1;if(!r.every(((t,e)=>s[e].length===t.length)))return!1;const a=n.templater.values||t.values,i=o.templater.values||e.values;return function(t,e){const n=t.length===e.length;if(!n)return!1;const o=e.every((function(e,n){const o=t[n];if(typeof e===T.function&&typeof o===T.function){return!!(e.toString()===o.toString())}return!0}));if(o)return!0;return!1}(a,i)}(r,s,t,e);return n}}throw new Error(`unknown tagJsType of ${r.tagJsType}`)}function ve(t){++t.updateCount;const e=t.global;me(t.state.newest,e),function(t){t.htmlDomMeta=[],delete t.contexts,delete t.state,delete t.global,t.renderCount=0}(t)}function we(t,e){const n=e.global,o=e.state?.newest;if(et(t)){return ye(t,o)?(jr(e,t,o),0):(me(o,n),ct(e),7)}const r=t?.tagJsType;if(r){return!0===jr(e,t,e.state.newest.ownerSupport)?0:88}return ve(e),8}function Ce(t,e,n,o){const r={updateCount:0,value:t,destroy$:new Tt,tagJsVar:Fo(t),withinOwnerElement:n,parentContext:o,valueIndex:e.length};return e.push(r),r}function ke(t,e,n,o,r,s,a){const i=document.createTextNode(_),c=Ce(t,e,r>0,o);return c.placeholder=i,c.element=s,s?A.push([Y,[s,i]]):O.push([F,[a,i,"attachDynamicDom.attachDynamicDom"]]),It(t,n,c,s,a),c}function _e(t,e,n,o,r,s){for(const a of t){const t=a[0],i=a[1],c=a[2]||!1;let l=a.length>1?Mt:Ht;a[3]&&(l=a[3]);const u=Bo(t,i,e,n,o,l,o.context.contexts,r,c);"object"==typeof u&&s.push(u)}}function Se(t,e,n,o,r,s,a){const i=[];return e.at&&_e(e.at,n,t,o,r,i),s?A.push([Y,[s,t,"appendToAttachDomElement"]]):O.push([F,[a,t,"insertBeforeAttachDomElement"]]),i}function Te(t,e,n,o,r,s,a){const i=n.context.contexts,c=[];s&&void 0===a&&(a=document.createTextNode(_),A.push([Y,[s,a]]),s=void 0);for(let l=0;l<t.length;++l){const u=t[l],d=u.v;if(!isNaN(d)){ke(e[i.length],i,n,o,r,s,a);continue}const p={};if(c.push(p),"text"===u.nn){Be(p,u,s,a);continue}const h=p.domElement=document.createElement(u.nn),g={updateCount:0,isAttrs:!0,element:h,parentContext:o,contexts:[],destroy$:new Tt,tagJsVar:{tagJsType:"new-parent-context"},valueIndex:-1,withinOwnerElement:!0},f=Se(h,u,e,n,g,s,a);g.element=h,g.contexts=f,u.ch&&(p.ch=Te(u.ch,e,n,g,r+1,h,a).dom)}return{dom:c,contexts:i}}function Be(t,e,n,o){const r=t,s=r.tc=e.tc;n?A.push([Q,[n,s,function(t){r.domElement=t}]]):O.push([K,[o,s,function(t){r.domElement=t}]])}function Ve(t,e,n){const o=t.context;o.state=o.state||{};const r=o.state;r.oldest=t,r.newest=t,o.state.older=o.state.newer,++M.locks;const s=function(t,e,n,o){const r=function(t){const e=t.templater,n=e.tag;if(n.tagJsType===B.dom)return n.dom;const o=n.strings;return P(o,n.values)}(t),s=t.templater.tag,a=s.values,i=[];t.context.contexts=i;const c=Te(r,a,t,e,0,n,o);return c}(t,t.context,e,n);return o.htmlDomMeta=s.dom,--M.locks,s}function Je(t,e){const n=e.state.newest,o=e.placeholder;return n.ownerSupport=t,Ve(n,void 0,o),n}function je(t){const e={tagJsType:B.templater,processInitAttribute:D,processInit:Le,processUpdate:D,hasValueChanged:we,destroy:D,propWatch:"shallow",key:D};return e.tag=t,t.templater=e,e}function Ie(t,e,n){const o=function(t,e,n,o,r){const s={templater:t,context:o,castedProps:r,appSupport:void 0};return s.ownerSupport=e,s.appSupport=n,s}(t,e,e.appSupport,n);return n.contexts=[],o}function Ee(t,e,n,o,r){const s=Ie(t,n,e);s.ownerSupport=n;const a=Ve(s,o,o?void 0:r);for(const t of a.dom)t.marker&&(o?A.push([Y,[o,t.marker]]):O.push([F,[r,t.marker,"subMarker"]])),t.domElement&&(o?A.push([Y,[o,t.domElement,"subAppendTo"]]):O.push([F,[r,t.domElement,"subInsertBefore"]]));return s}function Le(t,e,n,o,r){return e.state={},r?Ee(t,e,n,r,o):Je(n,e)}function Pe(t,e,n){++e.updateCount;const o=e.tagJsVar.tagJsType;return o&&["tag-conversion","element"].includes(o)?(e.tagJsVar.processUpdate(t,e,n,[]),e.value=t,0):t===e.value?0:jt(e,t,n)}function De(t,e){const n={tagJsType:B.templater,processInit:Le,processInitAttribute:D,processUpdate:Pe,hasValueChanged:we,destroy:ve,propWatch:t,props:e,key:function(t){return n.arrayValue=t,n},matchesInjection:t=>n.wrapper===t||n.wrapper?.original===t?.original};return n}const Oe=[];function Ne(t){const e=t.context;return io(t.templater)?lo(t):ao(t,t,e)}function $e(t,e,n){return t.map((function(t){return function(t,e,n,o){if(et(t)||!t)return t;if(!e)return t;return Ae(t,e,n,o)}(t,e.ownerSupport,e,n)}))}function Ae(t,e,n,o,r){if(!t)return t;if(t.tagJsType)return t;if(typeof t===T.function)return o<=1?function(t,e,n){const o=t.mem;if(o)return t;const r=function(...t){return function(t,e,n,o){const r=o.context,s=r.state?.newest||o,a=void 0===lt(),i=t.apply(e,n),c=function(){const t=s.context,e=t.global;return t.locked?i:e?(Ne(s),i):(r.tagJsVar.processUpdate(r.value,r,o,[]),i)};if(a)return c();return Jt.tagClosed$.toCallback(c),i}(r.mem,e,t,n)};return r.original=t,r.mem=t,Object.assign(r,t),r}(t,r,e):t;if(o===Zn)return t;return Me(t)?t:it(t)?function(t,e,n,o){for(let r=t.length-1;r>=0;--r){const s=t[r];if(t[r]=Ae(s,n,e,o+1,t),typeof s===T.function){if(s.mem)continue;He(o+1,r,s,t,e)}}return t}(t,n,e,o):function(t,e,n,o){const r=Object.keys(t);for(const s of r){const r=t[s],a=Ae(r,n,e,o+1,t);if(t[s]===a)continue;const i=Object.getOwnPropertyDescriptor(t,s);if(!(i?.get||i?.set)&&(t[s]=a,typeof a===T.function)){if(r.mem)continue;He(o+1,s,r,t,e)}}return t}(t,n,e,o)}function He(t,e,n,o,r){t>0&&(o[e].subscription=r.context.destroy$.toCallback((function(){o[e]=n})))}function Me(t){return typeof t!==T.object||!t||t.tagJsType}function Re(t,e,n,o){const r=e.original,s=t.tagJsType===B.stateRender,a=Jt.stateConfig;let i;return ut(n),s?i=t():(i=r(...o),typeof i===T.function&&void 0===i.tagJsType&&(i=i())),n.context.returnValue=i,i.templater=t,t.tag=i,n.context.state.newer={...a},n}function Ue(t,e,n,o,r){const s=re(t,o,r);return s.ownerSupport=e,se(t,s,n,r)}function We(t,e,n){const o=t.propWatch===zn.DEEP?Zn:Qn,r=t.props,s=e.propsConfig;let a=s.castProps;const i=n?.propsConfig,c=i?.castProps;c&&(s.castProps=c,a=no(e,n,n.ownerSupport,r,o));return a||$e(r,e,0)}function ze(t,e){++t.context.renderCount,Fe(),Jt.tagClosed$.next(e)}function Fe(t){!function(t){const e=Jt.stateConfig,n=t||e.context;n.state=n.state||{},n.state.newer={...e};const o=e.support;n.state.newest=o}(t),function(){const t=Jt.stateConfig;delete t.prevSupport,delete t.support,delete t.state,delete t.states,Br()}()}function Ye(t,e,n,o){let r;const s=t.templater;if(s.tagJsType===B.stateRender){const e=s;r=Ue(s,o,t.appSupport,n),Re(s,e,r)}else{r=(0,s.wrapper)(t,n,e)}return ze(r,o),r.ownerSupport=t.ownerSupport,r}function Xe(t,e,n,o){return yt(t,e,n.state.older.state),Ye(t,e,n,o)}function qe(t,e,n,o){return bt(t.context),ut(t),Ye(t,e,n,o)}function Ge(t,e,n,o,r){ct(e);const s=function(t,e,n){const o=De(zn.DEEP);o.tagJsType=t.tagJsType;const r=Ie(o,n,e);function s(){return o.tag=t(),r}return o.wrapper=s,s.tagJsType=t.tagJsType,s.original=t.original||t,r}(t,e,n);return qe(s,void 0,e),Ee(s.templater,e,n,r,o)}function Ke(t,e,n,o,r){const s=Ko(t,e,n,o,r);return s.hasEmitted||Qe(t,s),s}function Qe(t,e){const n=t.Observables[0];if(!e.hasEmitted)return"withDefault"in t?void e.subValueHandler(t.withDefault,0):"value"in n?void e.subValueHandler(n.value,0):void 0;const o=e.lastValues[0].value;e.subValueHandler(o,0)}function Ze(t,e,n,o,r,s){const a=e.tagJsVar,i=t;if(a.hasValueChanged(i,e,n)>0){a.destroy(e,n),o.removeAttribute(r);const i=Fo(t);return i.isAttr=!0,i.processInitAttribute(r,t,o,i,e,n,s),void(e.tagJsVar=i)}}function tn(t,e,n,o,s,a){e.destroy=Zo;const i=r(t),c=function(e,o){Io(t,e,n,Mt,i,s),er(o)},l=Qo(e.Observables,a,c,e,s);return s.subContext=l,s.value=e,s.tagJsVar=e,e.processUpdate=function(e,o,r){return Ze(e,s,r,n,t,Mt)},{subContext:l,onOutput:c}}function en(t,e,n,o,r,s){const{subContext:a}=tn(t,e,n,0,r,s);a.hasEmitted||function(t,e){const n=e.tagJsVar,o=n.onOutput,r=t.Observables;let s=r[0]?.value||t.withDefault;t.callback&&(s=t.callback(s));o(s,!0,e)}(e,a)}function nn(t,e,n){return{onOutput:D,tagJsType:B.subscribe,processInitAttribute:en,processInit:Ke,hasValueChanged:on,processUpdate:D,destroy:tr,callback:n,withDefault:e,Observables:[t]}}function on(t,e){if(!t?.tagJsType)return 1;const n=t.Observables;if(!n)return 2;const o=e.value.Observables;if(!o||o.length!==n.length)return 3;return n.every(((t,e)=>t===o[e]))?0:4}function rn(t,e){return{onOutput:D,tagJsType:B.subscribe,processInitAttribute:tn,processInit:Ko,hasValueChanged:on,processUpdate:Lr,destroy:tr,callback:e,Observables:[t]}}function sn(t,e,n){++e.updateCount;const o=t.owner._innerHTML;o.processInit=o.oldProcessInit;const r=e.subContext?.contextItem;jt(r,o,n)}function an(t,e,n,o,r){e.subContext={},t.processUpdate=sn,function(t,e,n,o,r){const{appendMarker:s,insertBefore:a}=qo(r,o),i=n.subContext;i.appendMarker=s;const c=t.owner,l=c._innerHTML;l.processInit=l.oldProcessInit,Xo(l,i,e,a)}(t,n,e,o,r)}function cn(){return{tagJsType:"innerHTML",hasValueChanged:()=>0,processInitAttribute:D,processInit:an,processUpdate:sn,destroy:Z}}function ln(t,e){for(let n=0;n<t.length;++n){hn(t[n],e[n])}}let un;function dn(...t){return un=t,t}function pn(){return un}function hn(t,e){t(dn,1),e(pn,2)}function gn(t,e,n,o){for(let n=t.length-1;n>=0;--n){const o=t[n].get(),r=e[n].callback;r&&r(o)}for(let t=o.length-1;t>=0;--t){bn.length=0,fn=0;(0,o[t])(mn),n[t](yn)}}rn.all=function(t,e){return rn(Tt.all(t),e)};let fn=0;const bn=[];function mn(...t){return bn.push(t),t}function yn(...t){return bn[fn++]}function xn(t,e,n){const o=n.state,r=o.newer.states,s=o.older?o.older.states:r,a=o.newest;ln(r,s);const i=e(...t);return ln(s,r),H.push([()=>{const t=a.context.global;void 0===t||!0===t.deleted||(++M.locks,Ne(a),--M.locks,U())},[]]),i}function vn(t,e={}){const n={tagJsType:B.host,processInitAttribute:Cn,hasValueChanged:()=>0,processInit:kn,processUpdate:wn,destroy:_n,options:{callback:t,...e},matchesInjection(e){const n=e?.options?.callback;return n===t}},o=(...n)=>({...o,options:{arguments:n,...e,callback:t}});return Object.assign(o,n),o}function wn(t,e,n){const o=Er(B.host,t,n,e);if(o)return o;const r=e.tagJsVar.options,s=t;!function(t){mt(t.state.newer.state)}(e);const a=s.options.arguments||r.arguments||[];e.returnValue=s.options.callback(...a),Fe(e)}function Cn(t,e,n,o,r){return kn(o,r)}function kn(t,e){const n=e.element,o=e.state={};bt(e),function(t,e,n,o){const r=e.options.arguments||[],s=e.options.callback(...r);n.returnValue=s;const a=e.options;a.onInit&&a.onInit(t,e,n,o)}(n,t,e,o),Fe()}function _n(t){++t.updateCount;const e=t,n=e.tagJsVar,o=n.options;if(e.destroy$.subscribers.length&&(Tr(t),xn([],e.destroy$.next.bind(e.destroy$),t),Br()),o.onDestroy){const r=e.element;return xn([],(function(){Tr(t);const s=o.onDestroy(r,n,e,e.state);return Br(),s}),t.stateOwner.context)}}function Sn(t,e,n){const o=t.context,r=o.toRender||o.returnValue,s=Fo(r);delete o.global;const a={updateCount:0,value:r,tagJsVar:s,destroy$:new Tt,placeholder:o.placeholder,valueIndex:-1,withinOwnerElement:!0,parentContext:o,contexts:[]},i=function(t,e,n,o){const r={tagJsType:"tag-conversion",processInitAttribute:D,processInit:(r,s,a)=>{const i=t.toRender||t.returnValue;return e.tagJsVar.processInit(i,e,n,o.placeholder)},processUpdate:(o,s,a)=>{++t.updateCount,++s.updateCount;const i=t.toRender||t.returnValue,c=t.value.tagJsType,l=o?.tagJsType,u=l!==c,d=function(t,e){const n=e.state?.newest;if(et(t))return ye(t,n)?0:7;const o=t?.tagJsType;return o?t.wrapper?.original===e.value.wrapper?.original?0:88:8}(o,t);if(d||u||r.hasValueChanged(i,t,n))return r.destroy(t,n),void Ir(o,t,a,789);if(e.value.props=$e(o.props,a,1),e.updatesHandler=t.updatesHandler,t.updatesHandler){(0,t.updatesHandler)(e.value.props)}e.tagJsVar.processUpdate(i,e,n,[]),e.value=i},hasValueChanged:(o,r)=>{const s=t.toRender||t.returnValue;return e.tagJsVar.hasValueChanged(s,e,n)},destroy:(o,r)=>{++t.updateCount;const s=e.tagJsVar.destroy(e,n);return rt(s)?s.then((()=>{const e=Vn(t,r);return U(),e})):Vn(t,r)}};return r}(o,a,t,n);return o.tagJsVar=i,s.processInit(r,a,t,n.placeholder),t}function Tn(t,e,n){const o=Ue(t,n,n.appSupport,e),r=o.propsConfig;if(r){const e=t.tagJsType!==B.tagComponent?[]:We(t,o);r.castProps=e}return qe(o,e.state.newest,e)}function Bn(t,e,n){const o=Tn(t,e,n),r=o.templater.tag;return["dom","html"].includes(r.tagJsType)?(Ve(o,void 0,e.placeholder),o):Sn(o,0,e)}function Vn(t,e){delete t.returnValue,delete t.toRender,delete t.global,t.contexts=[],t.htmlDomMeta=[],delete t.updatesHandler}function Jn(t,e,n,o){const r=Tn(t,e,n),s=r.templater.tag;return["dom","html"].includes(s.tagJsType)?function(t,e){const n=Ve(t,e,void 0);for(const t of n.dom)t.domElement&&A.push([Y,[e,t.domElement]]),t.marker&&A.push([Y,[e,t.marker]]);return t}(r,o):Sn(r,0,e)}vn.onInit=t=>vn((()=>{}),{onInit:t}),vn.onDestroy=t=>vn((()=>{}),{onDestroy:t});function jn(t,e,n,o,r){return ct(e),r?Jn(t,e,n,r):Bn(t,e,n)}function In(t){++M.locks,t.forEach(En),--M.locks,U()}function En(t){const e=t.context;if(!e.global)return void e.tagJsVar.processUpdate(e.value,e,t.ownerSupport,[]);co(e.state.newest)}function Ln(t,e,{resolvePromise:n,resolveValue:o}){if(rt(t)){return e.context.locked=2,t.then(function(t,e){return n=>{const o=t.context.global,r=t.context;if(delete r.locked,!0===o.deleted)return e(n);!function(t,e){const n=t.context.state,o=e.context.state;ln(n.newer.states,o.newer.states)}(t,r.state.newest);return In(uo(t)),e(n)}}(e,n))}return o(t)}function Pn(t){return Jt.stateConfig.handlers.handler(t)}function Dn(t){return Pn((()=>{const e=t();if(_r().global){return Ln(e,lt(),{resolvePromise:On,resolveValue:Nn})}})),Fn}function On(t){return t}function Nn(t){return t}function $n(t){return Pn((function(){_r().destroy$.toCallback(t)})),Fn}let An=0;const Hn=Rn("click"),Mn=Rn("mousedown");function Rn(t){return function(e){const n=xr(e);return Pn((()=>{Sr().addEventListener(t,n)})),n}}const Un={get:Sr,onclick:Hn,click:Hn,onClick:Hn,mousedown:Mn,onmousedown:Mn,onMouseDown:Mn};function Wn(t,e){Object.defineProperty(Fn,t,{get:()=>e,set:t=>e(t)})}var zn;function Fn(t,e=zn.SHALLOW){const n=function(...o){const r=De(e,o);r.tagJsType=B.tagComponent,r.processInit=jn,r.hasValueChanged=we;const s=function(t,e){return function(n,o,r){const s=We(t,n,r),a=n.ownerSupport,i=Ue(t,a,n.appSupport,o,s);return Re(t,e,i,s)}}(r,n);return s.original=t,r.wrapper=s,r},o=t;n.original=t,o.tags=Oe,o.setUse=Jt,o.ValueTypes=B,o.tagIndex=An++,Oe.push(n);const r=n;return r.updates=r.inputs=t=>(_r().updatesHandler=t,!0),r}function Yn(t,e){const n=e.context.global;if(n&&n.deleted)return!1;const o=function(t,e){const n=t.props,o=e.propsConfig,r=o.latest;if(Xn(n,r))return!0;switch(t.propWatch){case zn.IMMUTABLE:return Kn(n,r);case zn.SHALLOW:return Qt(n,r)}return!Gt(n,r,Zn)}(t,e);return!!o}function Xn(t,e){return t.length!==e.length}function qn(t,e,n){if(Xn(t,e))return 11;switch(n){case zn.NONE:return 1;case zn.SHALLOW:return Qt(t,e);case zn.IMMUTABLE:return Kn(t,e)}return function(t,e){let n=t,o=e;n=[...t],o=[...e||[]];if(!n.every(((t,e)=>function(t,e,n,o){const r=o[e];if(typeof t===T.object){const e={...t},n={...r||{}},o=Object.entries(e).every((([t,o])=>Gn(o,n[t],(()=>{delete e[t],delete n[t]}))));return o}return Gn(t,r,(function(){n.splice(e,1),o.splice(e,1)}))}(t,e,n,o))))return 7;return!1}(t,e)}function Gn(t,e,n){if(typeof t!==T.function)return!!Gt(t,e,Zn)&&4;if(typeof e!==T.function)return!1;const o=e?.original;o&&(e=o);t.original&&(t=t.original);return t.toString()===e.toString()?(n(),5):(n(),6)}function Kn(t,e){const n=t.length;for(let o=0;o<n;++o){if(t[o]!==e[o])return 2}return!1}Wn("onclick",Hn),Wn("click",Hn),Wn("onMouseDown",Mn),Wn("onmousedown",Mn),Wn("mousedown",Mn),function(t){t.DEEP="deep",t.SHALLOW="shallow",t.NONE="none",t.IMMUTABLE="immutable"}(zn||(zn={})),Fn.element=Un,Fn.renderOnce=function(){throw new Error("Do not call tag.renderOnce as a function but instead set it as: `(props) => tag.renderOnce = () => html`` `")},Fn.use=function(){throw new Error("Do not call tag.use as a function but instead set it as: `(props) => tag.use = (use) => html`` `")},Fn.deepPropWatch=Fn,Fn.route=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Fn.inject=function(t){const e=_r();if(!e)throw new Error("tag.inject can only be called within a tag or host context");let n=e.parentContext;for(;n;){const e=n.contexts;if(e)for(const n of e)if(n.isAttr&&n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;if(n.tagJsVar?.matchesInjection&&n.tagJsVar.matchesInjection(t))return n.returnValue;n=n.parentContext}const o=`Could not find parent context for tag.inject ${t}`;throw console.error(o,{targetItem:t,context:e}),new Error(o)},Fn.onInit=Dn,Fn.onDestroy=$n,Fn.app=function(t){throw new Error("Do not call tag.route as a function but instead set it as: `tag.route = (routeProps: RouteProps) => (state) => html`` `")},Fn.immutableProps=function(t){return Fn(t,zn.IMMUTABLE)},Fn.watchProps=function(t){return Fn(t,zn.SHALLOW)},Object.defineProperty(Fn,"renderOnce",{set(t){t.tagJsType=B.renderOnce,t.processInit=Ge,t.processUpdate=Pe,t.destroy=ve,t.hasValueChanged=function(){return 0}}}),Object.defineProperty(Fn,"use",{set(t){t.original={setUse:Jt,tags:Oe},t.tagJsType=B.stateRender,t.processInit=jn,t.processUpdate=Pe,t.hasValueChanged=we,t.destroy=ve}});const Qn=3,Zn=10;function to(t,e,n,o,r,s){return null==t||s>r?e:typeof t===T.function?e.mem?(t.mem=e.mem,e):(t.mem=e,t):Me(e)?e:it(e)?function(t,e,n,o,r,s){for(let a=t.length-1;a>=0;--a){const i=t[a],c=e[a];t[a]=to(c,i,n,o,s,r+1)}return t}(e,t,n,o,s,r):function(t,e,n,o,r,s){const a=Object.keys(t);for(const i of a){const a=t[i],c=to(e[i],a,n,o,s,r+1);if(a===c)continue;const l=Object.getOwnPropertyDescriptor(t,i)?.set;l||(t[i]=c)}return t}(e,t,n,o,s,r)}function eo(t,e,n){const o=n.global,r=n.state.newest,s=r.templater.wrapper;let a=e.templater.wrapper,i=!1;const c=e.templater.tagJsType,l=B.stateRender===c||B.renderOnce===c;if(l)i=e.templater.tagJsType===B.renderOnce||ye(r,e);else if(s&&a){const t=r.templater.tag?._innerHTML;t&&(a=e.outerHTML);i=s.original===a.original}const u=e.templater;if(!i)return void function(t,e,n){const o=t.global;me(t.state.oldest,o),ct(t),e.processInit(e,t,n,t.placeholder)}(n,u,t);const d=l||function(t,e){return qn(e.props,t.propsConfig.latest,t.templater.propWatch)}(r,u);if(d)n.locked?o.blocked.push(e):(co(e),++n.renderCount);else{!function(t,e,n,o,r){const s=t.props,a=no(e,n,o,s,r),i=e.propsConfig;i.castProps=a;const c=n.propsConfig;c.latest=i.latest}(u,e,r,t,u.propWatch===zn.DEEP?Zn:Qn)}}function no(t,e,n,o,r,s=-1){const a=e.context;if(!a.global||!a.state.newest){const e=$e(o,t,s);o.push(...e);return t.propsConfig.castProps=e,o}const i=(e=a.state.newest||e).propsConfig.castProps,c=[];for(let e=0;e<o.length;++e){const a=o[e],l=to(i[e],a,t,n,r,s+1);c.push(l)}return t.propsConfig.castProps=c,c}function oo(t){const e=t.context,n=e.global,{subs:o,tags:r}=ce(e.contexts);ro(e);for(const t of r){if(!0===t.context.global.deleted)return;ro(t.context)}n.subscriptions&&o.forEach(le),ct(e)}function ro(t){t.global.deleted=!0,fe(t,[])}function so(t,e,n){let o;delete n.toRender,o=function(t){const e=t?.context,n=e?.state;return n?.older?.state}(e)?Xe(t,e,n):qe(t,e,n);const r=!e||ye(e,o);if(r){if(e){const t=e.templater.tag;if(t&&n.renderCount>0){const n=e?.templater,o=n?.tag;!function(t,e,n){if(t.tagJsType===B.dom){const o=n?.dom;return void(o!==t.dom&&oo(e))}if(n){const o=n.strings;if(o){const n=o?.length;n!==t.strings.length&&oo(e)}}}(t,e,o)}}}else{!function(t,e){const n=t.context.global;let o=-1;const r=n.providers=n.providers||[],s=r.length-1;for(;o++<s;){const t=r[o];let s=-1;const a=t.children.length-1;for(;s++<a;)if(n===t.children[s].context.global)return t.children.splice(s,1),void t.children.push(e)}}(e,o),oo(e);const t=o.context;t.state.oldest=o,t.state.newest=o,t.state.older=t.state.newer}return o.ownerSupport=t.ownerSupport,{support:o,wasLikeTags:r}}function ao(t,e,n){const o=so(e,t,n);if(o.wasLikeTags){return Jr(n.state.oldest,o.support),o.support}return Je(e,n)}function io(t){return B.templater===t.tagJsType}function co(t){const e=t.context,n=e.global,o=io(t.templater);if(e.locked)return n.blocked.push(t),t;if(o){return lo(t)}e.locked=4,n.blocked.length&&(t=n.blocked.pop(),n.blocked=[]);const r=ao(e.state.newest,t,e);return delete e.locked,r}function lo(t){return co(pt(t).context.state.newest)}function uo(t,e=[]){const n=t.context,o=io(t.templater),r=t.ownerSupport;if(n.locked)return e.push(t),e;if(o)return uo(r,e);const s=t.context.global;if(s&&!0===s.deleted)return e;const a=t,i=nt(a.templater),c=t.templater.tagJsType,l=r&&c!==B.stateRender&&(!i||Yn(a.templater,a));if(a.context.global){const t=function(t){const e=t.context.global.providers;if(!e)return[];const n=[];for(const t of e){const e=Ft(t.owner,t);n.push(...e.map(Yt))}return n}(a);e.push(...t)}return l?(uo(r,e),i&&e.push(a),e):(e.push(a),e)}function po(t,e){const n=e.context.global,o=function(t,e){if(!0!==n.deleted)return function(t,e,n,o){const r=pt(e),s=r.context;s.locked=1;const a=t.apply(n,o);delete s.locked;return function(t,e){const n=e.context.global;if(n?.deleted)return;const o=uo(e);return In(o),Ln(t,e,{resolvePromise:fo,resolveValue:bo})}(a,r)}(o.tagFunction,o.support,t,e)};return o.tagFunction=t,o.support=e,o}const ho="no-data-ever",go="promise-no-data-ever";function fo(){return go}function bo(){return ho}function mo(t,e,n){const o=n[e];if(o){let e=!1;if(t.originalStopPropagation=t.stopPropagation,t.stopPropagation=function(){e=!0,t.originalStopPropagation.call(t),t.stopPropagation=t.originalStopPropagation,delete t.originalStopPropagation},o(t),t.defaultPrevented||e)return}const r=n.parentNode;r&&mo(t,e,r)}function yo(t,e,n,o){const r=t.appElement,s=function(t){"blur"===t&&(t="focusout");return"_"+t}(e);"blur"===e&&(e="focusout");const a=t.context.events;if(!a[e]){const t=function(t){mo(t,s,t.target)};a[e]=t,r.addEventListener(e,t)}n[s]=o,n[e]=o}function xo(t,e,n,o){const r=function(...e){return r.tagFunction(t,e)};r.tagFunction=e,r.support=n,yo(n.appSupport,o,t,r)}function vo(t){return null==t||!1===t}function wo(t,e,n,o,s,a,i){if(!vo(e))if(typeof e!==T.object)0!==e.length&&s(n,e,_);else for(const s in e){const c=r(s);Bo(s,e[s],t,n,o,Mt,a,i,c)}}function Co(t,e){t.removeAttribute(e)}function ko(t,e,n,o){const r=e,s=t;if(s?.tagJsType){const o=e.value;return o?.tagJsType?void o.hasValueChanged(s,e,n):(s.isAttr=!0,Tr(e),s.processInitAttribute(r.attrName,t,r.element,s,r,n,Mt),Br(),void(r.tagJsVar=s))}if(r.isNameOnly)return function(t,e,n,o,r,s,a,i){if(n){if(vo(e)||""===e)return void o.removeAttribute(n);if(typeof n===T.object)if(typeof e===T.object)for(const t in n)t in e||$.push([Co,[o,t]]);else for(const t in n)$.push([Co,[o,t]])}wo(t,e,o,r,s,a,i)}(o,t,r.value,r.element,n,r.howToSet,[],r.parentContext),void(r.value=t);const a=r.element;!function(t,e,n,o,r,s,a){if(st(t))return function(t,e,n,o,r,s,a){const i=t.templater.wrapper,c=(i?.tagJsType||i?.original?.tagJsType)===B.renderOnce;if(!c)return Jo(a,e,t,o,n);return Vo(e,n,o,r,s,t)}(r,t,o,e,a,s,n);Vo(t,o,e,a,s,r)}(t,r.attrName,r,a,n,r.howToSet,r.isSpecial),e.value=t}function _o(t,e,n,o,r,s,i){const c=o.length;function l(o){const s=function(t,e,n){return t.reduce(((t,o)=>{if(a(o)>=0){const o=n++,r=e[o];return t.push(r),t}return t.push(o),t}),[])}(e,o,c).join("");r(n,t,s)}return e.forEach((e=>{if(a(e)>=0){const r=o.length,a=Fo(e),c={updateCount:0,isAttr:!0,element:n,attrName:t,withinOwnerElement:!0,tagJsVar:a,valueIndex:o.length,parentContext:i,destroy$:new Tt};a.processUpdate=function(t,e,n,o){++e.updateCount,l(o)};const u=s[r];c.value=u,o.push(c)}})),l(s),o}function So(t,e,n,o,r,s,a,i,c,l){const u=Fo(e),d={updateCount:0,isAttr:!0,element:n,attrName:t,howToSet:s,value:e,withinOwnerElement:!0,tagJsVar:u,destroy$:new Tt,valueIndex:c,parentContext:r};return o.push(d),u.processUpdate=ko,function(t,e,n,o,r,s,a,i){if(n.element=o,n.howToSet=r,typeof e===T.function)return Jo(n,e,s,t,o);if(n.attrName=t,n.isSpecial=a,e?.tagJsType)return function(t,e,n,o,r){e.processInitAttribute(t,e,r,e,n,o,Mt),n.tagJsVar=e}(t,e,n,s,o);Io(t,e,o,r,a,n)}(t,e,d,n,s,a,i),d.value=e,d}function To(t){return at(t)&&"tagJsVar"in t?t.tagJsVar:-1}function Bo(t,e,n,o,r,s,a,i,c){const l=To(t);let u=l>=0||void 0===e&&"string"!=typeof t,d=n[l];e?.tagJsType?d=e:t?.tagJsType&&(u=!0,d=t,e=t);const p=d;if(p?.tagJsType)return function(t,e,n,o,r,s,a,i,c){const l=Ce(t,e||[],!0,n);return l.element=i,l.valueIndex=r,l.isAttr=!0,l.isNameOnly=c,l.stateOwner=pt(s),l.supportOwner=s,Tr(l),o.processInitAttribute(a,t,i,o,l,s,Mt),Br(),l.oldTagJsVar=l.tagJsVar,l.tagJsVar=o,l}(e,a,i,p,l,r,t,o,u);if(u){-1===l&&u&&(d=t);const e=Ce(d,a,!0,i);e.valueIndex=l,e.isAttr=!0,e.element=o,e.isNameOnly=!0,e.howToSet=s;return e.tagJsVar.processUpdate=ko,wo(n,d,o,r,s,a,i),e}if(Array.isArray(e))return _o(t,e,o,a,s,n,r.context);const h=To(e);if(h>=0){return So(t,n[h],o,a,i,s,r,c,h)}return Io(t,e,o,s,c,i)}function Vo(t,e,n,o,r,s){if(!1===o){switch(t){case void 0:case!1:case null:return void $.push([jo,[e,n]])}if(st(t))return xo(e,t,s,n);r(e,n,t)}else Lt(n,t,e,o)}function Jo(t,e,n,o,r){e=po(e,n);return t.tagJsVar.processUpdate=ko,xo(r,e,n,o)}function jo(t,e){t.removeAttribute(e)}function Io(t,e,n,o,r,s){return r?Lt(t,e,n,r):"function"==typeof e?function(t,e,n,o,r){const s=t(),a={tagJsType:"dynamic-attr",hasValueChanged:(e,n,o)=>{const r=t();return i.tagJsVar.hasValueChanged(r,i,o)},processInit:D,processInitAttribute:D,destroy:(t,e)=>{i.tagJsVar.destroy(i,e)},processUpdate:(t,e,n,o)=>{++e.updateCount;const r=t();i.tagJsVar.processUpdate(r,i,n,o),i.value=r}},i={updateCount:0,isAttr:!0,element:o,parentContext:e,value:s,tagJsVar:Fo(s),valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt},c={updateCount:0,isAttr:!0,contexts:[i],element:o,parentContext:e,value:t,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};return i.tagJsVar.processInitAttribute(n,s,o,i.tagJsVar,i,{},r),c}(e,s,t,n,o):void o(n,t,e)}function Eo(t,e,n,o,s,a,i){o.destroy=Lo,o.hasValueChanged=$o,o.processUpdate=(e,o,r)=>Ze(e,o,r,n,t,i);const c=r(t);Io(t,e,n,i,c,s),s.tagJsVar=o}function Lo(t){const e=t.element,n=t.attrName;e.removeAttribute(n)}function Po(t){return{tagJsType:"simple",value:t,processInitAttribute:Eo,processInit:Oo,destroy:No,hasValueChanged:Ao,processUpdate:Do}}function Do(t,e,n){return t===e.value?0:jt(e,t,n)}function Oo(t,e,n,o,r){const s=Et(t);o=e.placeholder;const a=e.paint=[G,[o,s,function(t){e.simpleValueElm=t,delete e.paint},"processSimpleValueInit"]];O.push(a)}function No(t){if(!t.simpleValueElm&&t.paint)return void(t.paint[0]=D);const e=t.simpleValueElm;delete t.simpleValueElm,W(e,"deleteSimpleValue")}function $o(t,e){return null==t||t===e.value?0:6}function Ao(t,e){return null!=t&&typeof t===T.object?(No(e),6):(function(t,e){const n=Et(t);if(e.paint)return void(e.paint[1][1]=n);const o=e.simpleValueElm;$.push([R,[n,o]])}(t,e),0)}function Ho(t,e){return it(t)?0:(pe(e),9)}function Mo(t,e,n,o){const r=void 0===t.lastArray;r&&(t.lastArray=[]);const s=t.lastArray;let a=t.placeholder,i=0;const c=[];if(!r){for(let t=0;t<s.length;++t){const n=s[t],o=ue(e,t,s,i);0!==o?2!==o?i+=o:t-=1:c.push(n)}t.lastArray=c}const l=e.length;for(let r=0;r<l;++r){a=Ro(e,r,t.lastArray,n,a,o).placeholder}}function Ro(t,e,n,o,r,s){const a=t[e],i=n[e];if(i)return function(t,e,n,o,r,s,a){const i=n.length>r;if(i)return Pe(t,e,o),e;const c=Yo(t,o,n,s,a);return n.push(c),c}(a,i,n,o,e,r,s);const c=Yo(a,o,n,r,s);return n.push(c),c}function Uo(t){return{tagJsType:"array",value:t,processInitAttribute:D,processInit:zo,processUpdate:Wo,hasValueChanged:Ho,destroy:pe}}function Wo(t,e,n){++e.updateCount;0===Pe(t,e,n)&&Mo(e,t,n)}function zo(t,e,n,o,r){Mo(e,t,n,r)}function Fo(t){const e=t?.tagJsType;return e?t:function(t){if(it(t))return Uo(t);return Po(t)}(t)}function Yo(t,e,n,o,r){const s=document.createTextNode(_),a={updateCount:0,value:t,tagJsVar:Fo(t),withinOwnerElement:!1,placeholder:s,destroy$:new Tt,parentContext:e.context,valueIndex:n.length};return r||(a.placeholder=o),It(t,e,a,r,o),r&&A.push([Y,[r,s]]),a}function Xo(t,e,n,o){return e.hasEmitted=!0,e.contextItem=Yo(t,n,[],o)}function qo(t,e){let n;return t&&(n=e=document.createTextNode(_),A.push([Y,[t,e]])),{appendMarker:n,insertBefore:e}}function Go(t,e,n){const o=Lr(t,e,n);if(!0!==e.hasEmitted){const t=e.value.Observables;if(!t)return;if(!("value"in t[0]))return}if(0===o&&t.callback){Qe(t,e.subContext)}}function Ko(t,e,n,o,r){const s=t.Observables,{appendMarker:a,insertBefore:i}=qo(r,o);let c=function(t,e,o){Xo(t,o,n,i),er(e),c=o.tagJsVar.onOutput=function(t,e,o){const r=o.contextItem;jt(r,t,n),r.tagJsVar.processUpdate(t,r,n,[t]),r.value=t,er(e)}};const l=Qo(s,n,((t,e,n)=>c(t,e,n)),t,e);return l.appendMarker=a,e.subContext=l,t.processUpdate=Go,t.onOutput=c,l}function Qo(t,e,n,o,r){function s(t,e){c.lastValues[e]={value:t,tagJsVar:Fo(t),oldTagJsVar:c.lastValues[e]?.tagJsVar},a(c.lastValues,e)}function a(t,e){const o=c.tagJsVar,s=o?.callback;if(s){Tr(r);const e=o.callback(...t.map((t=>t.value)));return n(e,i,c),void Br()}n(t[e].value,i,c)}let i=!0;const c={lastValues:[],subValueHandler:s,valuesHandler:a,tagJsVar:o,subscriptions:[]};return t.forEach(((t,e)=>{i=!0,c.subscriptions.push(t.subscribe((t=>s(t,e)))),i=!1})),o.onOutput=n,c}function Zo(t){const e=t.subContext;if(!e)return;e.subscriptions.forEach((t=>t.unsubscribe())),delete t.subContext}function tr(t,e){++t.updateCount;const n=t.subContext;return Zo(t),tt(n,e)}function er(t){t||Jt.stateConfig.support||U()}function nr(t,e,n,o,r){Ko({tagJsType:B.subscribe,states:[],Observables:[t]},e,n,o,r)}function or(t){return lt()?Pn((()=>rr(t))):rr(t)}function rr(t){let e=t;const n=new Set,o=t=>{n.forEach((e=>e(t)))};return{tagJsType:B.signal,hasValueChanged:on,processInitAttribute:D,processInit:nr,processUpdate:Go,get value(){return e},set value(t){e!==t&&(e=t,o(t))},destroy:tr,emit:o,subscribe(t){t(e),n.add(t);const o=()=>n.delete(t);return o.unsubscribe=o,o}}}class sr extends Tt{constructor(t){super(t),this.value=t}subscribe(t){const e=super.subscribe(t);return t(this.value,e),e}}class ar extends Tt{constructor(t){super(t),this.value=t,this._value=t,Bt(this)}subscribe(t){const e=super.subscribe(t);return t(this._value,e),e}}const ir=(t,e)=>lr(t,e),cr=t=>t;const lr=(t,e,{init:n,before:o,final:r=cr}={})=>{const s=Pn({pastResult:void 0,values:void 0}),a=s.values;if(void 0===a){if(o&&!o(t))return s.values=t,s.pastResult;const i=(n||e)(t,a);return s.pastResult=r(i),s.values=t,s.pastResult}if(t.every(((t,e)=>t===a[e])))return s.pastResult;if(o&&!o(t))return s.values=t,s.pastResult;const i=e(t,a);return s.pastResult=r(i),a.length=0,a.push(...t),s.pastResult};function ur(t,e){return Object.defineProperty(e,"noInit",{get(){const e=t();return e.setup.init=()=>{},e}}),Object.defineProperty(e,"asSubject",{get(){const e=t(),n=Pn((()=>lt())),o=Pn((()=>new sr(void 0))),r=Pn((()=>({state:Jt.stateConfig.state,states:Jt.stateConfig.states}))),s=(t,s)=>(lr(t,((t,e)=>{const a=lt(),i=s(t,e);if(a!==n){const t=r.state,e=n.context.state.older;gn(t,e.state,r.states,e.states)}o.next(i)}),e.setup),o);return s.setup=e.setup,ur((()=>s),s),s}}),Object.defineProperty(e,"truthy",{get(){const e=t();return e.setup.before=t=>t.every((t=>t)),e}}),e}function dr(t){return lt()?Pn((()=>new Tt(t))):new Tt(t)}function pr(t){return Jt.stateConfig.handlers.statesHandler(t)}function hr(t){const e=or([]),n=or(0),o=or(0);let r=[],s=0;return o.value=n.value,t(((...t)=>(r=t,e.value))),ir(r,(()=>{++s,e.value=r,t((()=>r))})),pr(((r,a)=>{if(s)return t(((...t)=>(a&&1!==a||(e.value=t),e.value))),o.value=n.value,void++n.value;t((()=>e.value))})),++s,e.value}function gr(){return{stateDiff:0,provider:void 0}}ur((()=>function(t){const e=(e,n)=>lr(e,n,t);return e.setup=t,ur((()=>e),e),e}({})),ir),dr._value=t=>{const e=Pn((function(){return{state:Jt.stateConfig.state,states:Jt.stateConfig.states}})),n=lt();return Pn((function(){return new sr(t).pipe((t=>{const o=n.context.state.newer;return gn(o.state,e.state,o.states,e.states),t}))}))},dr.all=function(t){const e=Pn((()=>({state:Jt.stateConfig.state,states:Jt.stateConfig.states}))),n=lt();return Tt.all(t).pipe((t=>{const o=n.context.state.newer;return o&&gn(o.state,e.state,o.states,e.states),t}))};const fr={create:t=>{const e=Pn(gr);if(e.stateDiff){let t=e.stateDiff;for(;t--;)Pn(void 0);return Pn(void 0)}const n=Pn((()=>{const n=Jt.stateConfig,o=n.state.length,r=t.prototype?new t:t(),s=n.support,a=n.state.length-o,i={constructMethod:t,instance:r,stateDiff:a,owner:s,children:[]};e.provider=i;const c=s.context.global;return(c.providers=c.providers||[]).push(i),e.stateDiff=a,r})),o=t,r=o.compareTo=o.toString();return e.provider.constructMethod.compareTo=r,n},inject:function(t){return Pn((function(){const e=t,n=e.compareTo=e.compareTo||t.toString(),o=lt(),r=[];let s={ownerSupport:o.ownerSupport};for(;s.ownerSupport;){const t=s.ownerSupport.context.global.providers;if(!t){s=s.ownerSupport;continue}const e=t.find((t=>{r.push(t);if(t.constructMethod.compareTo===n)return!0}));if(e){const t=o.context.global;return(t.providers=t.providers||[]).push(e),e.children.push(o),e.instance}s=s.ownerSupport}const a=`Could not inject provider: ${t.name} ${t}`;throw console.warn(`${a}. Available providers`,r),new Error(a)}))}};class br extends Error{constructor(t,e,n={}){super(t),this.name=br.name,this.details={...n,errorCode:e}}}class mr extends br{constructor(t,e){super(t,"sync-callback-error",e),this.name=mr.name}}function yr(t,e,n,...o){const r=n(...o),s=dt(t);return s&&(s.context.global?co(s):t.tagJsVar.processUpdate(t.value,t,s,[]),rt(r)&&r.finally((()=>{t.global?co(s):t.tagJsVar.processUpdate(t.value,t,s,[])}))),r}function xr(t){const e=_r(),n=Pn({callback:t}),o=Pn((()=>vr(e,Jt.stateConfig,n)));return n.callback=t,o}function vr(t,e,n){const o=e.states;return function(...e){return yr(t,o,n.callback,...e)}}const wr=()=>{const t=_r();if(!t)throw Cr;const e=Jt.stateConfig;return function(n){return vr(t,e,{callback:n})}},Cr=new mr("callback() was called outside of synchronous rendering. Use `callback = callbackMaker()` to create a callback that could be called out of sync with rendering");function kr(t){const e=["push","pop","splice","shift","unshift"],n=["map","reduce","forEach","every"],o=new Proxy(t,{get(r,s){return isNaN(s)?"length"===s?t.value.length:e.includes(s)?o[a=s]=(...e)=>{const n=t.value[a](...e);return t.emit(t.value),n}:n.includes(s)?t.value[s].bind(t.value):t[s]:t.value[s];var a},set:(e,n,o)=>isNaN(n)?"length"===n?(t.value.length=o,t.emit(t.value),!0):(t[n]=o,!0):(t.value[n]=o,t.emit(t.value),!0)});return o}function _r(){return Jt.stateConfig.context}function Sr(){return _r().element}function Tr(t){return Jt.stateConfig.context=t}function Br(){delete Jt.stateConfig.context}function Vr(t,e,n,o){const r=n[e];if(r.deleted)return;const s=t[r.valueIndex],a=r.tagJsVar;Tr(r),a.processUpdate(s,r,o,t),Br(),r.value=s}function Jr(t,e){const n=t.context.contexts;!function(t,e){const n=e.templater,o=e.templater.tag,r=n.values||o.values,s=t.templater.tag;s.values=r}(t,e),++M.locks,function(t,e){const n=t.templater.tag.values;let o=0;const r=n.length;for(;o<r;)Vr(n,o,e,t),++o}(t,n),--M.locks,U()}function jr(t,e,n){if(nt(e))return void 0===t.global&&ct(t),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,function(t,e,n){if(!e.state.newest)return void t.processInit(t,e,n,e.placeholder);const o=Ue(t,n,n.appSupport,e);eo(n,o,e)}(e,t,n),!0;if(t.global){t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e;const o=t.state.newest;if(o)return typeof e===T.function||function(t,e,n,o){let r=n.templater||n;const s=t.templater.tag;s&&s._innerHTML&&(r=n.outerHTML||n._innerHTML.outerHTML);const a=Ue(r,o,o.appSupport,e);Jr(t.context.state.oldest,a)}(o,t,e,n),!0}return e.processInit(e,t,n,t.placeholder),t.oldTagJsVar=t.tagJsVar,t.tagJsVar=e,!0}function Ir(t,e,n,o){const r=t&&t.tagJsType;if(r){if(r===B.renderOnce)return;jr(e,t,n)}else{if(it(t))return Mo(e,t,n),e.oldTagJsVar=e.tagJsVar,void(e.tagJsVar=Uo(t));typeof t!==T.function?o&&function(t,e){e.value=t,e.oldTagJsVar=e.tagJsVar,e.tagJsVar=Po(t);const n=e.placeholder,o=Et(t),r=e.paint=[G,[n,o,function(t){e.simpleValueElm=t,delete e.paint},"processNowRegularValue"]];O.push(r)}(t,e):e.value=t}}function Er(t,e,n,o){if(!e||!e.tagJsType||e.tagJsType!==t){return o.tagJsVar.destroy(o,n),Ir(e,o,n,99),99}}function Lr(t,e,n){const o=e.subContext,r=Er(B.subscribe,t,n,e);return r||(o&&o.hasEmitted?(o.tagJsVar=t,o.valuesHandler(o.lastValues,0),0):0)}function Pr(t,e,n,o,r){const s=t;let a=s.templater;if(a||(a=je(s)),ct(e),r)return Ee(a,e,n,r,o);return(e.state=e.state||{}).newest=Ie(a,n,e),Je(n,e)}function Dr(t,e,n,o,r){Pr(t.outerHTML,e,n,o,r);e.tagJsVar.processUpdate=function(t,e,n){jt(e,t?.outerHTML||t,n)},t.hasValueChanged=Or}function Or(t,e){return we(t,e)}function Nr(t,e){const n={values:e,ownerSupport:lt(),tagJsType:B.tag,processInitAttribute:D,processInit:Pr,processUpdate:Pe,hasValueChanged:we,destroy:ve,strings:t,key:t=>$r(t,n),setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Dr,n},acceptInnerHTML:function(t){return t.owner=n,n},html:function(t,e){return n.children={strings:t,values:e},n}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}function $r(t,e){return $r(t,e),e.arrayValue=t,e}function Ar(t,...e){const n=Nr(t,e),o=De(zn.NONE);return o.tag=n,n.templater=o,n}Ar.dom=function(t,...e){return function(t,e){const n={values:e,ownerSupport:lt(),dom:t,tagJsType:B.dom,processInitAttribute:D,processInit:Pr,processUpdate:Pe,hasValueChanged:we,destroy:ve,key:function(t){return n.arrayValue=t,n},setHTML:function(t){return t.outerHTML=n,n._innerHTML=t,t.oldProcessInit=t.processInit,t.processInit=Dr,n},acceptInnerHTML:function(t){return t.owner=n,n},html:{dom:function(t,e){return n.children={dom:t,values:e},n}}};return Object.defineProperty(n,"innerHTML",{set:t=>n.setHTML(t)}),n}(t,e)};function Hr(t,e,n,o,r,s){const a=t.context;a.state.oldest=t,a.state.newest=t,a.state.older=a.state.newer;const i=t.templater.tag;if(!["dom","html"].includes(i.tagJsType)){a.contexts=[];const e=document.createDocumentFragment();e.appendChild(s);Bn(t.templater,a,t);return e}const c=Ve(t,e,void 0);let l=o.setUse;if(o.tagJsType!==B.stateRender){const t=r.original;l=t.setUse,t.isApp=!0}return e.setUse=l,e.ValueTypes=B,Wr.push({element:e,support:t}),function(t,e){const n=document.createDocumentFragment();n.appendChild(t);for(const t of e.dom)Mr(t,n);return n}(s,c)}function Mr(t,e){t.domElement&&e.appendChild(t.domElement),t.marker&&e.appendChild(t.marker)}function Rr(t,e,n){const o=re(t,e);return se(t,o,o),o.appElement=n,e.state.oldest||(e.state.oldest=o,e.state.older=e.state.newer),e.state.newest=o,o}function Ur(t,e,n,o,r,s,a){const i=document.createTextNode(_);Oe.push(n.wrapper||{original:n}),s.placeholder=i;const c=function(t,e,n,o,r){o.placeholder=e;const s=o.state.oldest,a=o.state.newest,i=a===s,c=Ue(t,a,a.appSupport,o);if(!i){yt(c,a,o.state.older.state)}if(t.tagJsType===B.stateRender)return function(t,e,n,o,r){const s=t.wrapper||{original:t};if(!e){const e=Rr(t,o,r);return ze(e),e}return Re(t,s,n),ze(n),n}(t,r,c,o,n);const l=t.wrapper,u=l(c,o);return ze(c),u}(n,i,r,s,a);if(e.isApp=!0,a&&(o.tag=c.templater.tag),!r)throw new Error(`Cannot tagElement, element received is type ${typeof r} and not type Element`);r.destroy=function(){const t=s.events;for(const e in t){const n=t[e];r.removeEventListener(e,n)}s.events={},++M.locks;const n=me(c,e);return--M.locks,U(),n},++M.locks;const l=Hr(c,r,0,n,t,i);return--M.locks,U(),r.appendChild(l),{support:c,tags:Oe,ValueTypes:B}}"object"==typeof document&&(document.taggedJs&&console.warn("🏷️🏷️ Multiple versions of taggedjs are loaded. May cause issues."),document.taggedJs=!0);const Wr=[];function zr(t,e,n){const o=Wr.findIndex((t=>t.element===e));if(o>=0){const t=Wr[o].support;me(t,t.context.global),Wr.splice(o,1),console.warn("Found and destroyed app element already rendered to element",{element:e})}let r=()=>c(n);r.propWatch=zn.NONE,r.tagJsType=B.stateRender,r.processUpdate=Pe,r.props=[n],r.isApp=!0;const s=function(t,e){const n={tagJsType:"templater",hasValueChanged:we,destroy:ve,processInitAttribute:D,processInit:function(){console.debug("do nothing app function")},processUpdate:Pe},o={updateCount:0,value:t,valueIndex:0,destroy$:new Tt,withinOwnerElement:!1,renderCount:0,global:void 0,state:{},tagJsVar:n};return ct(o),o.events={},Rr(t,o,e),o}(r,e),a=s.global,i=s.state.newest;bt(i.context),ut(i);let c=t(n);const l=typeof c==T.function;return l||(nt(c)?(s.state.newest.propsConfig={latest:[n],castProps:[n]},r.propWatch=c.propWatch,r.tagJsType=c.tagJsType,r.wrapper=c.wrapper,r=c):(r.tag=c,c=t)),Ur(t,a,r,c,e,s,l)}function Fr(t,e,n){function o(t){return o.toCallback(t)}return o.toCallback=n,t.listeners.push([e,o]),t.allListeners.push([e,o]),t}function Yr(t,e){return t.attributes.push(e),Gr(e[0])?qr(e[0],t):Gr(e[1])&&qr(e[1],t),t}function Xr(t){function e(e){return function(n){return function(t,e,n){return Fr(ls(t,t.elementFunctions),e,n)}(t,e,n)}}const n={onClick:e("click"),onChange:e("onchange"),onKeyup:e("onkeyup"),attr:(...e)=>function(t,e){const n=ls(t,t.elementFunctions);return n.attributes.push(e),Gr(e[0])?qr(e[0],n):Gr(e[1])&&qr(e[1],n),n}(t,e),key:function(t){return this.arrayValue=t,this}};return n}function qr(t,e){e.contexts||(e.contexts=[]),e.contexts.push(t)}function Gr(t){return Array.isArray(t)||st(t)||t?.tagJsType}function Kr(t,e){return(n,o)=>Yr(n,[t,o,!1,e])}function Qr(t){return(e,n)=>Fr(e,t,n)}const Zr={checked:Kr("checked",Rt),selected:Kr("selected",Rt),class:Kr("class",(function(t,e,n){at(n)?Object.entries(n).forEach((([e,n])=>{n?t.classList.add(e):t.classList.remove(e)})):Ut(t,e,n)})),onClick:Qr("click"),onChange:Qr("onchange"),onKeyup:Qr("onkeyup")};function ts(t,e,n,o,r,s){t.forEach((t=>{const a=typeof t;switch(a){case"string":case"boolean":case"number":return ns(t,r,s)}if(null==t)return ns(t,r,s);if("element"!==t.tagJsType)return"function"===a?function(t,e,n,o,r,s){const a=[],i={updateCount:0,parentContext:n,contexts:a,value:t,htmlDomMeta:[],tagJsVar:{tagJsType:"dynamic-text",hasValueChanged:()=>0,processInit:D,processInitAttribute:D,destroy:(t,e)=>{++i.updateCount,a.forEach((t=>t.tagJsVar.destroy(t,e)))},processUpdate:(t,e,n,o)=>{++i.updateCount;const r=t(c),s=c.tagJsVar.processUpdate(r,c,n,o);return c.value=r,e.value=t,s}},valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};r.push(i);const c=es(t(),n,i.contexts,e,o,s);return c}(t,r,e,n,o,s):es(t,e,o,r,n,s);{const a=os(t,e,n,o);O.push([s,[r,a]]);e.htmlDomMeta.push({nn:a.tagName,domElement:a,at:[]})}}))}function es(t,e,n,o,r,s){const a=Fo(t),i={updateCount:0,value:t,parentContext:e,tagJsVar:a,valueIndex:-1,withinOwnerElement:!0,destroy$:new Tt};return n.push(i),i.placeholder=document.createTextNode(""),O.push([s,[o,i.placeholder]]),a.processInit(t,i,r,i.placeholder),i}function ns(t,e,n){const o=Et(t),r=document.createTextNode(o);return O.push([n,[e,r]]),r}function os(t,e,n,o){const r=document.createElement(t.tagName);return e.element=r,_e(t.attributes,[],r,n,e,o),ts(t.innerHTML,e,n,o,r,Y),t.listeners.forEach(((e,o)=>{yo(n.appSupport,e[0],r,((...e)=>{const r=t.listeners[o][1],s=pt(n),a=s.context.updateCount,i=r(...e);return a===s.context.updateCount&&In([s]),rt(i)?i.then((()=>(In([s.context.state.newest]),"promise-no-data-ever"))):"no-data-ever"}))})),r}function rs(t,e){++t.updateCount;const n=t.contexts,o=[];if(n.length&&(ss(n,e,o),o.length))return Promise.all(o).then((()=>{++M.locks,be(t),t.htmlDomMeta=[],--M.locks,U()}));be(t),t.htmlDomMeta=[]}function ss(t,e,n){const o=t[0],r=o.tagJsVar.destroy(o,e);return rt(r)?n.push(r.then((()=>{if(t.length>1)return ss(t.slice(1,t.length),e,n)}))):(o.htmlDomMeta&&(be(o),delete o.htmlDomMeta),t.length>1?ss(t.slice(1,t.length),e,n):void 0)}function as(t,e,n){++e.updateCount;if(is(t,e))return rs(e,n),void Ir(t,e,n,789);if(e.updatesHandler){(0,e.updatesHandler)(t.props)}const o=e.contexts,r=t.contexts||[],s=e.tagJsVar.allListeners;t.allListeners.forEach(((t,e)=>{s[e][1].toCallback=t[1].toCallback})),o.forEach(((t,e)=>{t.tagJsVar.processUpdate(r[e],t,n)}))}function is(t,e){if(e.value===t)return 0;return!t||"element"!==t.tagJsType?1:0}function cs(t){const e=ls({tagJsType:"element",processInitAttribute:D,processInit:us,destroy:rs,processUpdate:as,hasValueChanged:is,tagName:t,innerHTML:[],attributes:[],listeners:[],allListeners:[],elementFunctions:Xr},Xr);return e.tagName=t,e}function ls(t,e){const n=(...t)=>{const e={...n};var o,r;return e.attributes=[...n.attributes],e.listeners=[...n.listeners],e.allListeners=[...n.allListeners],t.length>0&&"object"==typeof t[0]&&!Array.isArray(t[0])&&!t[0].tagJsType&&(o=e,r=t[0],Object.entries(r).reduce(((t,[e,n])=>e in Zr?Zr[e](o,n):Yr(o,[e,n,!1,Mt])),o),t.splice(0,1)),e.innerHTML=t,t.forEach((t=>{if(Gr(t)){if("element"===t.tagJsType)return e.allListeners.push(...t.allListeners),void(t.contexts&&(e.contexts?e.contexts.push(...t.contexts):e.contexts=t.contexts));n=t,(o=e).contexts||(o.contexts=[]),o.contexts.push(n)}var n,o})),e};return Object.assign(n,t),Object.assign(n,Xr(n)),n.attributes=[...t.attributes],n.listeners=[...t.listeners],n.allListeners=[...t.allListeners],n}function us(t,e,n,o){e.contexts=[],e.htmlDomMeta=[];const r=os(t,e,n,e.contexts);O.push([F,[o,r,"designElement.processInit"]]);const s={nn:t.tagName,domElement:r,at:t.attributes};return e.htmlDomMeta=[s],r}const ds=function(){const t=ls({tagJsType:"element",processInitAttribute:D,processInit:ps,destroy:hs,processUpdate:as,hasValueChanged:is,tagName:"no-element",innerHTML:[],attributes:[],listeners:[],allListeners:[],elementFunctions:Xr});return t.tagName="no-element",t}();function ps(t,e,n,o){e.contexts=[],e.htmlDomMeta=[],ts(t.innerHTML,e,n,e.contexts,o,F)}function hs(t,e){++t.updateCount;const n=t.contexts,o=[];if(n.length&&(ss(n,e,o),o.length))return Promise.all(o).then((()=>{console.log("context",{context:t,contexts:n}),++M.locks,be(t),t.htmlDomMeta=[],--M.locks,U()}))}const gs=cs("button"),fs=cs("select"),bs=cs("option"),ms=cs("input"),ys=(cs("html"),cs("head"),cs("title"),cs("meta"),cs("link"),cs("body"),cs("noscript"),cs("hr")),xs=cs("h1"),vs=cs("h2"),ws=cs("h3"),Cs=(cs("h4"),cs("h5"),cs("h6"),cs("ol")),ks=cs("li"),_s=cs("div"),Ss=cs("fieldset"),Ts=cs("legend"),Bs=(cs("table"),cs("tr"),cs("td"),cs("th"),cs("p")),Vs=cs("a"),Js=cs("span"),js=cs("strong"),Is=cs("small"),Es=cs("label"),Ls=cs("sup"),Ps={tagElement:zr,renderWithSupport:so,renderSupport:co,firstTagRender:qe,reRenderTag:Xe,paint:U},Ds=()=>window.location.hash.substring(1)||"/",Os=t=>{const e=()=>t(Ds());return window.addEventListener("hashchange",e),e},Ns=()=>{const t=Pn((()=>({route:Ds(),location:window.location}))),e=xr((e=>t.route=Ds())),n=Pn((()=>Os(e)));return $n((()=>window.removeEventListener("hashchange",n))),t},$s=()=>{const t={route:Ds(),location:window.location},e=xr((e=>{t.route=Ds(),o.next(t)})),n=Os(e);$n((()=>window.removeEventListener("hashchange",n)));const o=new sr(t);return o};const As=()=>rn($s(),(t=>{const e=function(t){const e=t.route,n=t.location.pathname;return n&&"counters/"===e?"counters":n&&"content/"===e?"content":n.endsWith("isolated.html")?"isolated":n.includes("todo/www")?"todo":"home"}(t);return _s(Vs({"style.opacity":t=>"home"===e?".5":"1",href:t=>"home"===e?void 0:"#/"},"home")," - ",Vs({"style.opacity":t=>"isolated"===e?".5":"1",href:t=>"isolated"===e?void 0:"isolated.html"},"isolated")," - ",Vs({"style.opacity":t=>"counters"===e?".5":"1",href:t=>"counters"===e?void 0:"#counters/"},"counters")," - ",Vs({"style.opacity":t=>"content"===e?".5":"1",href:t=>"content"===e?void 0:"#content/"},"content")," - ",Vs({"style.opacity":t=>"todo"===e?".5":"1",href:t=>"todo"===e?void 0:"todo/www/"},"todo app")," - ",Vs({href:"https://github.com/AckerApple/taggedjs",target:"_blank"},"repo"))}));const Hs=Fn((({label:t,memory:e})=>{let n=!1,o=!1;return pr((t=>[{mouseOverEditShow:n,edit:o}]=t({mouseOverEditShow:n,edit:o}))),Ar.dom(Ms.allStrings140407[0],(()=>n=!0),(()=>n=!1),t,e.counter,n||"false",(()=>++e.counter),o||n?"visible":"hidden",(()=>o=!o))})),Ms={allStrings140407:[[{nn:"text",tc:"\x3c!-- mouseOverTag --\x3e"},{nn:"div",at:[["style","background-color:purple;padding:.2em;flex:1"],["mouseover",{tagJsVar:0},null],["mouseout",{tagJsVar:1},null]],ch:[{nn:"text",tc:"mouseover - "},{nn:"text",v:2},{nn:"text",tc:":"},{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4},{nn:"button",at:[["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"++counter"}]},{nn:"a",at:[["style.visibility",{tagJsVar:6},"style"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]}]}]]},Rs=Fn((({renderCount:t,name:e})=>(Rs.updates((n=>[{renderCount:t,name:e}]=n)),_s(Is(`(${e} render count`,Js({id:`${e}_render_count`},(e=>t)),")"))))),Us=Date.now(),Ws=Fn((()=>_s("hello complex world"))),zs=Fn.immutableProps((({appCounterSubject:t},e="countersDebug")=>_s("\x3c!--counters--\x3e",Ws(),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},_s("👉 Subscription count:",Js({id:"👉-counter-sub-count"},rn(Tt.globalSubCount$))),gs({onClick:()=>console.info("subs",Tt.globalSubs)},"log subs"),_s(gs({id:"counters-app-counter-subject-button",onClick:()=>t.next((t.value||0)+1)},"🍒 ++app subject"),Js("🍒 ",Js({id:"app-counters-display"},rn(t))),Js("🍒 ",Js({id:"app-counters-subject-display"},t.value)))),Gs()))),Fs=Fn.deepPropWatch((({propCounter:t,increasePropCounter:e})=>(n=0,o=0,r=0,s=++o)=>(Fs.updates((n=>{[{propCounter:t,increasePropCounter:e}]=n})),_s(_s.attr(vn.onInit((()=>++r)))({style:"display:flex;flex-wrap:wrap;gap:1em;"},_s({style:"border:1px dashed black;padding:1em;"},"🔥 elmInitCount:",Js({id:"🔥-init-counter"},(t=>r))),_s({style:"border:1px dashed black;padding:1em;"},gs({id:"❤️-inner-counter",onClick:e},"❤️-inner-counter propCounter:",(e=>t)),Js("❤️ ",Js({id:"❤️-inner-display"},(e=>t)))),_s({style:"border:1px dashed black;padding:1em;"},gs({id:"🤿-deep-counter",onClick:()=>++n},"🤿 otherCounter:",(t=>n)),Js("🤿 ",Js({id:"🤿-deep-display"},(t=>n))))),_s("renderCount:",(t=>o)),(t=>Rs({renderCount:o,name:"inner_counters"})))))),Ys=Fn.watchProps((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0;return pr((t=>[{otherCounter:n,renderCount:o}]=t({otherCounter:n,renderCount:o}))),++o,Ar.dom(Ks.allStrings9732807[0],e,t,t,(()=>++n),n,n,o,Rs({renderCount:o,name:"shallow_counters"}))})),Xs=Fn.immutableProps((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0;return pr((t=>[{otherCounter:n,renderCount:o}]=t({otherCounter:n,renderCount:o}))),++o,Ar.dom(Ks.allStrings9732807[1],e,t,t,(()=>++n),n,n,o,Rs({renderCount:o,name:"immutable_counters"}))})),qs=Fn((({propCounter:t,increasePropCounter:e})=>{let n=0,o=0,r="noWatchPropCounters";return pr((t=>[{otherCounter:n,renderCount:o,noWatchPropCounters:r}]=t({otherCounter:n,renderCount:o,noWatchPropCounters:r}))),++o,Ar.dom(Ks.allStrings9732807[2],e,t,t,(()=>++n),n,n,o,Rs({renderCount:o,name:"nowatch_counters"}))})),Gs=Fn((()=>(t=0,e=0,n=0,o=0,r=0,s=0,a=0,i=wr(),c=xr((t=>{t})),l=(()=>{++s}),u={propCounter:s,increasePropCounter:l},d=new Tt(n),p=new Tt(0),h=new Tt,g=new sr("222"),f=(()=>{++n,g.next("333-"+n)}),b=Tt.all([g,d]),m=dr.all([g,d]),y=dr.all([g,d,h]),x={counter:0},v=Date.now())=>(++a,console.info("countersDebug.ts: 👉 i should only ever run once"),d.subscribe(i((t=>{n=t}))),d.subscribe(c),u.propCounter!==s&&(u={propCounter:s,increasePropCounter:l}),++r,_s(_s("initCounter:",(t=>a)),_s("😱 statesRenderCount:",(e=>t),gs({type:"button",onClick:()=>{++t}},"😱 ++statesRenderCount")),_s("😱😱 statesRenderCount2:",(t=>e),gs({type:"button",onClick:()=>{++e}},"😱😱 ++statesRenderCount2")),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},ms({id:"set-main-counter-input",placeholder:"input counter value",onKeyup:t=>n=Number(t.target.value)||0}),_s(gs({id:"❤️-increase-counter",onClick:l},"❤️ propCounter:",(t=>s)),Js("❤️ ",Js({id:"❤️-counter-display"},(t=>s)))),_s(gs({id:"🥦-standalone-counter",onClick:f},"🥦 stand alone counters"),Js("🥦 ",Js({id:"🥦-standalone-display"},(t=>n)))),(t=>n>1&&_s(gs({id:"conditional-counter",onClick:f},"conditional counter:",(t=>n)))),Js("🥦 ",Js({id:"conditional-display"},(t=>n)))),_s(gs({id:"🥦-subject-increase-counter",onClick:()=>d.next(n+1)},"++subject<>"),Js("🥦<",Js({id:"subject-counter-subject-display"},rn(d)),">")),_s(gs({id:"🥦-subject-increase-async-counter",onClick:()=>{setTimeout((()=>{p.next(p.value+1)}),10)}},"🔀 🥦 ++subject<>"),Js("🔀 🥦<",Js({id:"subject-async-counter-subject-display"},rn(p)),">")),Ss(Ts("🪈 pipedSubject 1"),_s(Is(Js({id:"🪈-pipedSubject"},rn(b,(()=>n)))))),Ss(Ts("🪈 pipedSubject 2"),_s(Is(Js({id:"🪈-pipedSubject-2"},rn(m,(()=>n)))))),Ss(Ts("🪈 pipedSubject 3"),_s(Is(Js({id:"🪈-pipedSubject-3"},rn(y,(t=>"hello world")))))),Ss(Ts("shared memory"),_s({class:{bold:!0,"text-blue":!0},style:"display:flex;flex-wrap:wrap;gap:.5em"},(t=>Hs({label:"a-a-😻",memory:x})),(t=>Hs({label:"b-b-😻",memory:x}))),"memory.counter:😻",(t=>x.counter),gs({onClick:()=>++x.counter},"increase 😻")),Ss(Ts("inner counter"),(t=>Fs({propCounter:s,increasePropCounter:l}))),Ss(Ts("shallow props"),(t=>Ys({propCounter:s,increasePropCounter:l}))),Ss(Ts("immutable props"),(t=>Xs(u))),Ss(Ts("nowatch props"),(t=>qs({propCounter:s,increasePropCounter:l}))),_s({style:"font-size:0.8em;opacity:0.8"},"⌚️ page load to display in ",Js.attr(vn.onInit((t=>t.innerText=(Date.now()-Us).toString())))("-"),"ms"),_s({style:"font-size:0.8em;opacity:0.8"},"⌚️ read in ",Js.attr(vn.onInit((t=>t.innerText=(Date.now()-v).toString())))("-"),"ms"),(t=>Rs({renderCount:r,name:"counters"})))))),Ks={allStrings9732807:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️💧-shallow-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️💧 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️💧 "},{nn:"span",at:[["id","❤️💧-shallow-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","💧-shallow-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"💧 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"💧 "},{nn:"span",at:[["id","💧-shallow-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🪨-immutable-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🪨 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🪨 "},{nn:"span",at:[["id","❤️🪨-immutable-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🪨-immutable-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🪨 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🪨 "},{nn:"span",at:[["id","🪨-immutable-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","❤️🚫-nowatch-counter"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"❤️🚫 propCounter:"},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"❤️🚫 "},{nn:"span",at:[["id","❤️🚫-nowatch-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",at:[["style","border:1px dashed black;padding:1em;"]],ch:[{nn:"button",at:[["id","🚫-nowatch-counter"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🚫 otherCounter:"},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🚫 "},{nn:"span",at:[["id","🚫-nowatch-display"]],ch:[{nn:"text",v:5}]}]}]}]},{nn:"div",ch:[{nn:"text",tc:"renderCount:"},{nn:"text",v:6}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},Qs=Fn((({name:t,array:e,included:n,columnNames:o,allColumnNames:r})=>{let s,a=!1,i=!1;const c=Pn([]);pr((t=>[{mouseOverEditShow:a,edit:i,editFormula:s}]=t({mouseOverEditShow:a,edit:i,editFormula:s})));return Ar.dom(ta.allStrings431691[0],(function(){const e=o.indexOf(t);e>=0?o.splice(e,1):o.push(t)}),n&&"checked",t,(()=>a=!0),(()=>a=!1),i||a?"visible":"hidden",(()=>i=!i),n&&o.length!==r.length?Ar.dom(ta.allStrings431691[1],(()=>{o.length=0,o.push(...r)})):Ar.dom(ta.allStrings431691[2],(()=>{o.length=0,o.push(t)})),i&&Ar.dom(ta.allStrings431691[3],s&&Ar.dom(ta.allStrings431691[4],(t=>{return n=s,o=t.target.value,n.stringFormula=o,void(n.value=Zs(o,{array:e}));var n,o}),s.value),c.map((t=>Ar.dom(ta.allStrings431691[5],t.title,(()=>s=t),t.value).key(t))),(()=>{const n=`\n      array.reduce((all, item) => {\n        const value = item['${t}']\n        return isNaN(value) ? all : (all + value)\n      }, 0)\n    `;c.push({title:"sum",stringFormula:n,value:Zs(n,{array:e})})})))}));function Zs(t,e={}){return function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{isNaN,Math,Number,Date,...e})}const ta={allStrings431691:[[{nn:"a",at:[["style","cursor:pointer;"],["click",{tagJsVar:0},null]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:1}]]},{nn:"text",tc:"&nbsp;"},{nn:"text",v:2}]},{nn:"div",at:[["mouseover",{tagJsVar:3},null],["mouseout",{tagJsVar:4},null]],ch:[{nn:"a",at:[["style.visibility",{tagJsVar:5},"style"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚙️&nbsp;"}]},{nn:"text",v:7}]},{nn:"text",v:8},{nn:"text",tc:"\n  "}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"all"}]}]}],[{nn:"a",at:[["style","color:blue;"],["click",{tagJsVar:0},null]],ch:[{nn:"small",ch:[{nn:"text",tc:"only"}]}]}],[{nn:"div",at:[["style","width:100%;padding:0.3em;"]],ch:[{nn:"div",at:[["style","font-size:0.7em;text-align:center;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"Column Settings"}]}]},{nn:"div",ch:[{nn:"text",v:0},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"sum"}]}]}]}],[{nn:"div",at:[["style","padding:0.3em;"]],ch:[{nn:"strong",ch:[{nn:"text",tc:"edit formula"}]}]},{nn:"textarea",at:[["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"div",ch:[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"✏️"}]}]},{nn:"div",ch:[{nn:"text",v:2}]}]}]]},ea=Fn((({array:t,showAll:e,showKids:n,toggleColumnDialog:o,columnNames:r,formatChange:s,allowMaximize:a,everySimpleValue:i})=>Ar.dom(na.allStrings122184[0],t.length&&Ar.dom(na.allStrings122184[1],r.map((t=>Ar.dom(na.allStrings122184[2],o&&"pointer",o,t).key(t)))),t.map((t=>Ar.dom(na.allStrings122184[3],r.map((o=>Ar.dom(na.allStrings122184[4],ya({value:t[o],showLevels:0,showAll:e,showKids:e||n,isRootDump:!1,formatChange:s,allowMaximize:a})).key(t[o])))).key(t)))))),na={allStrings122184:[[{nn:"text",tc:"\x3c!-- array table --\x3e\x3c!-- overflow-y: scroll; --\x3e"},{nn:"div",at:[["style","max-height: 800px;max-width:100vw;overflow: scroll;"]],ch:[{nn:"table",at:[["cellpadding","2"],["cellspacing","2"],["border","0"]],ch:[{nn:"text",v:0},{nn:"tbody",ch:[{nn:"text",v:1}]}]}]}],[{nn:"thead",at:[["style","position: sticky;top: 0;font-size: 0.8em;"]],ch:[{nn:"tr",ch:[{nn:"text",v:0}]}]}],[{nn:"th",at:[["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"tr",ch:[{nn:"text",v:0}]}],[{nn:"td",ch:[{nn:"text",v:0}]}]]},oa=Fn((({array:t,showLevels:e,showAll:n,showKids:o,columnNames:r,formatChange:s,toggleColumnDialog:a,allowMaximize:i,everySimpleValue:c})=>Ar.dom(ra.allStrings152127[0],t.map(((t,o)=>{const l=function(t,e){if(["string","number","boolean"].includes(typeof t))return t;if(Array.isArray(t))return t;return function(t,e){if(!e)return t;const n={};return e.forEach((e=>{(t.hasOwnProperty(e)||e in t)&&(n[e]=t[e])})),n}(t,e)}(t,r);return Ar.dom(ra.allStrings152127[1],ya({value:l,showLevels:e,showAll:n,showKids:!0,isRootDump:!1,formatChange:s,onHeaderClick:a,allowMaximize:i,everySimpleValue:c})).key(o)})))));const ra={allStrings152127:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"text",tc:"\n  "}],[{nn:"text",v:0}]]},sa=Fn((({showLevels:t,showAll:e,showKids:n,array:o,arrayView:r,formatChange:s,allowMaximize:a,everySimpleValue:i})=>{const c=ir([o,o.length],(()=>o.length?function(t){return t.reduce(((t,e)=>{if(e&&"object"==typeof e){if(Array.isArray(e))return t;Object.keys(e).forEach((e=>{t.includes(e)||t.push(e)}))}return t}),[])}(o):[]));let l;const u=ir([c],(()=>[...c]));let d=!1;const p=Pn((()=>"columnDialog"+performance.now()));pr((t=>[{columnNames:l,showColumnDialog:d}]=t({columnNames:l,showColumnDialog:d}))),ir.noInit([u.length],(()=>{l||(l=u)}));const h=()=>{d=!d;const t=document.getElementById(p);d?t.showModal():t.close()},g="table"===r?ea({showAll:e,showKids:n,array:o,toggleColumnDialog:h,columnNames:l||c,formatChange:s,everySimpleValue:i}):oa({array:o,showLevels:t,showAll:e,showKids:n,formatChange:s,columnNames:l||c,toggleColumnDialog:h,allowMaximize:a,everySimpleValue:i});return Ar.dom(aa.allStrings463171[0],g,p,c.map((t=>{const e=void 0===l||l.includes(t);return Ar.dom(aa.allStrings463171[1],Qs({name:t,array:o,included:e,columnNames:l||u,allColumnNames:c})).key(t)})),h)}));const aa={allStrings463171:[[{nn:"text",tc:"\n    "},{nn:"text",v:0},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:1},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em;background-color:#666;color:white;"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"Column Modifier"}]},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"text",v:2},{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"div",at:[["style","display:flex;justify-content: space-between;flex-wrap:wrap"],["class","hover-bg-warning"]],ch:[{nn:"text",v:0}]}]]},ia=Fn((({key:t,value:e,show:n,showAll:o,showKids:r,showLevels:s,formatChange:a,allowMaximize:i,everySimpleValue:c})=>{let l,u,d=!1;pr((t=>[{showLower:l,arrayView:u,maximize:d}]=t({showLower:l,arrayView:u,maximize:d}))),hr((t=>[r]=t(r))),hr((t=>[o]=t(o))),ir.noInit([n],(([t])=>l=t)),ir.noInit([o],(([t])=>l=t));const p=Pn((()=>"maximize-dump-"+performance.now())),h=()=>{d=!d,d&&document.getElementById(p).showModal()},g=o||l||r||null==l&&s>0,f=n=>Ar.dom(ca.allStrings479370[0],(()=>{if(void 0===l)return o=r=l=!g;o=r=l=!l}),t,"table"===u?"bold":"",(()=>u="table"===u?void 0:"table"),"table"===u?"flex":"table",e.length,n&&Ar.dom(ca.allStrings479370[1],h)),b={showLevels:s,showAll:o,showKids:r,formatChange:a,array:e,arrayView:u,allowMaximize:i,everySimpleValue:c};return Ar.dom(ca.allStrings479370[3],f(i),g&&Ar.dom(ca.allStrings479370[2],sa(b)),p,d&&f(!1),d&&Ar.dom(ca.allStrings479370[4],sa({...b,allowMaximize:!1})),(()=>document.getElementById(p).close()))})),ca={allStrings479370:[[{nn:"div",at:[["class","taggedjs-array-label"]],ch:[{nn:"a",at:[["style","flex-grow:1"],["click",{tagJsVar:0},null]],ch:[{nn:"strong",ch:[{nn:"text",v:1}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"a",at:[["style","text-decoration:underline;"],["style.font-weight",{tagJsVar:2},"style"],["click",{tagJsVar:3},null]],ch:[{nn:"text",v:4}]}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"["},{nn:"text",v:5},{nn:"text",tc:"]"}]},{nn:"text",v:6}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"text",tc:"\x3c!-- array displays wrap --\x3e"},{nn:"div",at:[["class","taggedjs-array-body"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- array --\x3e"},{nn:"div",at:[["class","taggedjs-array-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close array"}]}]}]}],[{nn:"div",at:[["style","text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em"]],ch:[{nn:"text",v:0}]}]]};function la(t){var e=document.createElement("textarea");e.value=t,document.body.appendChild(e),e.select(),e.setSelectionRange(0,99999),document.execCommand("copy"),document.body.removeChild(e)}function ua({key:t,value:e,onHeaderClick:n,everySimpleValue:o}){const r=e.search&&("https://"===e.slice(0,8)||"http://"===e.slice(0,7));let s;return s=o?da({value:e,everySimpleValue:o}):r?pa(e):da({value:e}),Ar.dom(ha.allStrings246978[0],t&&Ar.dom(ha.allStrings246978[1],n&&"pointer",n,t),s)}const da=Fn((({value:t,everySimpleValue:e})=>{const n=[void 0,null,"null"].includes(t),o=t,r=!isNaN(o)&&o>1e9?function(t){return t>9467028e5?"Milliseconds > Unix epoch:\n"+new Date(t).toLocaleString():"Seconds > Unix epoch:\n"+new Date(1e3*t).toLocaleString()}(o):"";let s=0;pr((t=>[s]=t(s)));let a=t;return e&&(a=e(t)),a=(null===a?"null":!1===a&&"false")||void 0===a&&"undefined"||a,Ar.dom(ha.allStrings246978[2],(()=>{s=Date.now()}),(e=>{if(Date.now()-s>300)return e.preventDefault(),e.stopPropagation(),!0;la(t)}),n?"rgba(0,0,0,.5)":"",(!0===t?"#28a54c":!1===t&&"#e42112")||n&&"white"||"",r,a)}));const pa=t=>Ar.dom(ha.allStrings246978[3],(()=>la(t)),t,t),ha={allStrings246978:[[{nn:"div",at:[["style","font-size:75%;flex:1 1 10em;color:#111111"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n      "},{nn:"text",v:1}]}],[{nn:"div",at:[["class","taggedjs-simple-label"],["style.cursor",{tagJsVar:0},"style"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["style","cursor:pointer;"],["class","hover-bg-warning active-bg-energized"],["mousedown",{tagJsVar:0},null],["mouseup",{tagJsVar:1},null],["style.background-color",{tagJsVar:2},"style"],["style.color",{tagJsVar:3},"style"],["title",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}],[{nn:"a",at:[["click",{tagJsVar:0},null],["href",{tagJsVar:1},null],["target","_blank"],["class","hover-bg-warning active-bg-energized"],["title","tap to copy"]],ch:[{nn:"text",v:2}]}]]},ga=Fn((({key:t,showKids:e,show:n,showLevels:o,value:r,showAll:s,onHeaderClick:a,formatChange:i,allowMaximize:c,everySimpleValue:l})=>{let u,d=!1;const p=Pn((()=>"maximize-dump-"+performance.now()));pr((t=>[{showLower:u,maximize:d}]=t({showLower:u,maximize:d}))),hr((t=>[e]=t(e))),ir.noInit([n],(([t])=>u=t)),ir.noInit([s],(([t])=>u=t));const h=!t||e||u||void 0===u&&o>0,g=()=>{d=!d,d&&document.getElementById(p).showModal()},f=n=>Ar.dom(fa.allStrings470244[0],u?"border-bottom-width:1px;border-bottom-style:solid;border-color:black;":"",(()=>{if(void 0===u)return s=e=u=!(s||e||u);e=u=!u}),t,Object.keys(r).length,n&&Ar.dom(fa.allStrings470244[1],g)),b=t=>Ar.dom(fa.allStrings470244[2],Object.entries(r).map((([n,r])=>Ar.dom(fa.allStrings470244[3],r&&"object"==typeof r?"flex-grow:1;":"flex: 1 1 10em;",ya({value:r,key:n,show:u,showAll:s,showLevels:o-1,showKids:s||e,isRootDump:!1,formatChange:i,onHeaderClick:a,allowMaximize:t,everySimpleValue:l})).key(n))));return Ar.dom(fa.allStrings470244[4],t&&f(c),h&&b(c),p,d&&f(!1),d&&b(!1),(()=>document.getElementById(p).close()))})),fa={allStrings470244:[[{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object-label"]],ch:[{nn:"a",at:[["click",{tagJsVar:1},null]],ch:[{nn:"strong",ch:[{nn:"text",v:2}]},{nn:"sup",at:[["style","opacity:80%;font-size:75%;padding-left:0.4em"]],ch:[{nn:"text",tc:"{"},{nn:"text",v:3},{nn:"text",tc:"}"}]}]},{nn:"text",v:4}]}],[{nn:"text",tc:"\n        &nbsp;"},{nn:"a",at:[["click",{tagJsVar:0},null]],ch:[{nn:"span",at:[["style","width:10px;height:10px;border:1px solid white;border-top-width:3px;display:inline-block;"]]}]}],[{nn:"div",at:[["class","taggedjs-object-body-wrap"]],ch:[{nn:"text",v:0}]}],[{nn:"text",tc:"\x3c!-- recurse --\x3e"},{nn:"div",at:[["style",{tagJsVar:0},null],["class","taggedjs-object"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "}]}],[{nn:"div",at:[["style","flex: 1 1 10em;text-align:left;"]],ch:[{nn:"div",at:[["class","taggedjs-object-wrap"]],ch:[{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\x3c!-- maximize --\x3e"},{nn:"dialog",at:[["style","padding:0"],["id",{tagJsVar:2},null],["class","dump-dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["style","width:100%"],["type","button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🅧 close object"}]}]}]}]}]}]]},ba=Fn((({value:t,format:e,showAll:n,formatChange:o,showAllChange:r})=>Ar.dom(ma.allStrings440833[0],!e||"flex"===e&&Ar.dom(ma.allStrings440833[1],"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(n?"background-color:#33cd5f;":"background-color:#444444"),(()=>r(n=!n))),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+(e&&"flex"!==e?"background-color:#444444":"background-color:#33cd5f;"),(()=>o(e="flex")),"margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"+("json"===e?"background-color:#33cd5f;":"background-color:#444444"),(()=>o(e="json")),(()=>function(t){const e=JSON.stringify(t,null,2);la(e)}(t)))));const ma={allStrings440833:[[{nn:"style",ch:[{nn:"text",tc:"dialog.dump-dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.7); /* Set a semi-transparent black background */\n      }\n\n      .child-margin-xxs {margin:0.2em;}\n      \n      .taggedjs-dump .hover-bg-warning:hover {background-color:#fcf8e3}\n      .taggedjs-dump .hover-bg-balanced:hover {background-color:#33cd5f}\n      .taggedjs-dump .active-bg-energized:active {background-color:#ffc900}\n      .taggedjs-dump .bg-dark {background-color:#444444}\n      .taggedjs-dump .bg-balanced {background-color:#33cd5f}\n      \n      .taggedjs-dump .taggedjs-object {margin:0.2em;padding:0.2em;overflow:auto;display:flex;flex-wrap:wrap;}\n      .taggedjs-dump .taggedjs-object-label {\n        padding:0.2em;display:flex;justify-content:space-between;font-size:65%;color:white;\n        border-color:white;flex-grow:1;\n        background-color:#387ef5;\n      }\n\n      .taggedjs-dump .taggedjs-simple-label {\n        border-bottom-width:1px;border-bottom-style:solid;border-color:black;font-size:65%;border-color:white;line-height: 95%;font-weight:bold;\n      }\n\n      .taggedjs-dump .taggedjs-object-body-wrap {\n        display:flex;flex-wrap:wrap\n      }\n\n      .taggedjs-dump .taggedjs-object-wrap {\n        font-size:90%;color:#111111;background-color:#d9edf7;border:1px solid black;border-radius:5px;flex-direction: column;display:flex;\n      }\n      \n      .taggedjs-dump .taggedjs-array-label {\n        padding:0.2em;display:flex;justify-content:space-between;flex-grow:1;font-size:65%;border-color:white;color:white;background-color:#ef473a;\n      }\n\n      .taggedjs-dump .taggedjs-array-body {\n        text-align:left;display:flex;flex-wrap:wrap;margin:0.2em;gap:0.2em\n      }\n      \n      .taggedjs-dump .taggedjs-array-wrap {\n        color:#111111;background-color:#f2dede;border:1px solid black;border-radius:5px;flex-direction: column;display:flex\n      }"}]},{nn:"div",at:[["style","width: 100%;line-height: 90%;"]],ch:[{nn:"div",at:[["style","position:relative;"]],ch:[{nn:"div",at:[["style","display:flex;font-size:50%;position:absolute;top:-18px;right:-6px"]],ch:[{nn:"text",v:0},{nn:"a",at:[["style",{tagJsVar:1},null],["class","hover-bg-balanced"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"flex"}]},{nn:"a",at:[["style",{tagJsVar:3},null],["class","hover-bg-balanced"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"json"}]},{nn:"a",at:[["style","margin:1px;border-radius:5px;color:white;align-items:center;display:flex;padding-left:0.2em;padding-right:0.2em;"],["class","bg-dark hover-bg-balanced active-bg-energized"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"copy"}]}]}]}]}],[{nn:"a",at:[["style",{tagJsVar:0},null],["class","hover-bg-balanced"],["click",{tagJsVar:1},null],["title","hide/show all sub objects"]],ch:[{nn:"text",tc:"👁"}]}]]},ya=Fn((({key:t,value:e,showKids:n=!1,showLevels:o=-1,showAll:r=!1,format:s="flex",formatChange:a=(t=>s=t),isRootDump:i=!0,onHeaderClick:c,allowMaximize:l,everySimpleValue:u})=>{i&&void 0===l&&(l=!0);const d=null===e?"null":typeof e;let p,h=!1;return hr((t=>[s]=t(s))),hr((t=>[r]=t(r))),hr((t=>[o]=t(o))),pr((t=>[{show:h,arrayView:p}]=t({show:h,arrayView:p}))),Dn((()=>{(o=o>=0&&o||(-1===o&&!t&&e&&e instanceof Object?2:0))>0&&(h=!0)})),[null,void 0].includes(e)?ua({key:t,value:d,onHeaderClick:c,everySimpleValue:u}):["boolean","number","string"].includes(d)?ua({key:t,value:e,onHeaderClick:c,everySimpleValue:u}):va({value:e,showKids:n,key:t,onHeaderClick:c,everySimpleValue:u,format:s,isRootDump:i,showAll:r,showAllChange:t=>r=t,formatChange:a,show:h,showLevels:o,allowMaximize:l})}));let xa=0;const va=({value:t,showKids:e,key:n,onHeaderClick:o,everySimpleValue:r,format:s,isRootDump:a,showAll:i,showAllChange:c,formatChange:l,show:u,showLevels:d,allowMaximize:p})=>{if(null===t)return e?ua({key:n,value:"null",onHeaderClick:o,everySimpleValue:r}):Ar.dom(wa.allStrings306188[0]);const h=Array.isArray(t);return Ar.dom(wa.allStrings306188[2],"taggedjs-dump-"+ ++xa,a&&ba({value:t,format:s,showAll:i,showAllChange:c,formatChange:l}),"json"===s&&Ar.dom(wa.allStrings306188[1],JSON.stringify(t,null,2))||(h?ia({key:n,value:t,show:u,showAll:i,showKids:e,showLevels:d,formatChange:l,allowMaximize:p,everySimpleValue:r}):ga({key:n,show:u,showKids:e,showLevels:d,value:t,showAll:i,formatChange:l,onHeaderClick:o,allowMaximize:p,everySimpleValue:r})))},wa={allStrings306188:[[{nn:"text",tc:"no kids"}],[{nn:"textarea",at:[["style","width:100%;height:25vh;min-height:400px;color:white;background-color:black;"],["disabled"],["wrap","off"]],ch:[{nn:"text",v:0}]}],[{nn:"div",at:[["id",{tagJsVar:0},null],["class","taggedjs-dump"]],ch:[{nn:"text",v:1},{nn:"text",tc:"\n      "},{nn:"text",v:2}]}]]},Ca=Fn((()=>{let t="",e=0,n="",o=!1;pr((r=>[{userJsonString:t,renderCount:e,userJson:n,badEval:o}]=r({userJsonString:t,renderCount:e,userJson:n,badEval:o}))),++e;const r=Pn((()=>({showLevels:15,showAll:!0,value:{test:{anotherOne:22},arrayTest:[{name:"something",location:{street:"4361"}},{name:"in this",location:{street:"2235"}},{name:"world",location:{street:"4785"}}]}})));return Ar.dom(ka.allStrings183632[0],(e=>{t=e.target.value;try{n=function(t,e){if(!t)return t;return e=new Proxy(e,{has:()=>!0}),new Function("with(this) { return ("+t+")}").call(e)}(t,{}),t=JSON.stringify(n,null,2)}catch(e){o=!0;try{JSON.parse(t)}catch(t){n=Object.getOwnPropertyNames(t).reduce(((e,n)=>(e[n]=t[n])&&e||e),{})}}}),""===n?"":t,""===n?"":Ar.dom(ka.allStrings183632[1],ya({value:n})),ya(r),Rs({renderCount:e,name:"dumpContent"}))}));const ka={allStrings183632:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;align-item:center;justify-content: center;gap:.5em;padding:.5em;"]],ch:[{nn:"textarea",at:[["style","min-width:300px;min-height:400px;flex:1"],["id","taggedjs-dump-user-textarea"],["wrap","off"],["placeholder","paste json here"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"text",v:2}]},{nn:"div",at:[["style","max-width:900px"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["style","flex:1;min-width:110px;width:100%;max-width:900px;background-color:rgba(255,255,255,.5);min-width:300px"],["id","taggedjs-dump-user-result"]],ch:[{nn:"text",v:0}]}]]};function _a({fxIn:t,fxOut:e,outPositionAbsolute:n=!0}){return{in:(e,n)=>Sa({fxName:t,...e},n),out:(t,o)=>Ta({fxName:e,outPositionAbsolute:n,...t},o)}}const Sa=async({target:t,fxName:e="fadeInUp"},n)=>(t.style.opacity="0",n&&await Va(n),t.style.opacity="1",Ba(e,t)),Ta=async({target:t,outPositionAbsolute:e=!0,fxName:n="fadeOutUp"},o)=>(e&&function(t){t.style.zIndex=t.style.zIndex||1;const e=t.offsetTop+"px",n=t.offsetLeft+"px",o=t.clientWidth+(t.offsetWidth-t.clientWidth)+1+"px",r=t.clientHeight+(t.offsetHeight-t.clientHeight)+1+"px";setTimeout((()=>{t.style.top=e,t.style.left=n,t.style.width=o,t.style.height=r,t.style.position="absolute"}),0)}(t),o&&await Va(o),Ba(n,t));function Ba(t,e){let n;const o=new Promise((function(t){n=t}));return e.classList.add("animate__animated","animate__"+t),e.addEventListener("animationend",(function o(r){r.target===e&&(e.classList.remove("animate__animated","animate__"+t),e.removeEventListener("animationend",o),n(void 0))})),o}function Va(t){return new Promise((e=>{setTimeout(e,t)}))}const{in:Ja,out:ja}=_a({fxIn:"fadeInUp",fxOut:"fadeOutDown"}),{in:Ia,out:Ea}=_a({fxIn:"fadeInDown",fxOut:"fadeOutUp"}),{in:La,out:Pa}=_a({fxIn:"fadeIn",fxOut:"fadeOut"}),Da=({fxIn:t,fxOut:e,stagger:n,inName:o="fadeInUp",outName:r="fadeOutDown",duration:s=".2s",outPositionAbsolute:a=!1}={})=>{const i=Oa((t=>(t.style.setProperty("--animate-duration",s),i.fxIn({target:t},n))),(t=>{t.style.setProperty("--animate-duration",s);const e=i.fxOut({target:t},n);return e}),t,e,o,r,a);return i.host};function Oa(t,e,n,o,r,s,a){if(!n||!o){const t=_a({fxIn:r,fxOut:s,outPositionAbsolute:a});n||(n=t.in),o||(o=t.out)}return{fxIn:n,fxOut:o,host:vn((()=>{}),{onInit:t,onDestroy:e})}}const Na=Fn((t=>{Na.updates((e=>[t]=e));let e=1,n="white";return _s(_s({id:"dynamic-border-element",style:t=>`border-width:${e}px;border-color:${n};border-style:solid;`},t),_s("borderWidth:",ms({id:"dynamic-border-width",type:"range",min:"0",max:"10",step:"1",value:t=>e,onChange:t=>e=Number(t.target.value)})," - ",(t=>e),"px"),_s("borderColor:",fs({id:"dynamic-border-color",onChange:t=>n=t.target.value},bs({value:"",selected:t=>""===n}),bs({value:"black",selected:t=>"black"===n},"black"),bs({value:"blue",selected:t=>"blue"===n},"blue"),bs({value:"white",selected:t=>"white"===n},"white"))))})),$a=Fn((()=>{const t=Pn((()=>new sr(0)));let e=0,n=!0,o=!1,r=0,s=20,a=!1;const i=Pn((()=>new Tt({added:0,removed:0})));pr((t=>[{renderCount:e,orangeToggle:n,boldToggle:o,counter:r,showHideFx:a,staggerBy:s}]=t({renderCount:e,orangeToggle:n,boldToggle:o,counter:r,showHideFx:a,staggerBy:s}))),++e;const c=rn(t,(()=>Ar.dom(Ma.allStrings647663[1],(()=>{++r}),r,(()=>t.next(t.value+1)))));return Ar.dom(Ma.allStrings647663[2],r,c,(()=>++r),r,(()=>a=!a),a&&Ar.dom(Ma.allStrings647663[3],Da({duration:"10ms"})),a&&Ar.dom(Ma.allStrings647663[4],Da({duration:"10ms",stagger:s})),a&&Ar.dom(Ma.allStrings647663[5],Da({duration:"10ms",stagger:2*s})),a&&(((t=10)=>{const e=cn();return Ar.dom(Ma.allStrings647663[0],Da({stagger:t,duration:".1s"}),e).acceptInnerHTML(e)})(s).innerHTML=Ha()),rn(i,(t=>t.added)),rn(i,(t=>t.removed)),(t=>s=Number(t.target.value)),Na(Ar.dom(Ma.allStrings647663[6])),Ca(),Rs({renderCount:e,name:"content"}),Aa(),Aa(),'<script>alert("i should never run but be seen on page")<\/script>',Ar.dom([{nn:"b",ch:[{nn:"text",tc:"big"}]}]),Ar.dom(Ma.allStrings647663[7]),"3px solid orange",n?"3px solid orange":"3px solid green",(()=>n=!n),n,o?{style:"font-weight:bold;"}:{},(()=>o=!o),o?"true":"false",54,"hello",0,!1,null,void 0,!0,"{","}","{","}","<div>hello</div>",Rs({renderCount:e,name:"content"}))})),Aa=()=>Ar.dom(Ma.allStrings647663[8],"test0","test1","test3"),Ha=Fn((()=>Ar.dom(Ma.allStrings647663[9]))),Ma={allStrings647663:[[{nn:"div",at:[["id","outer-html-fx-test"],[{tagJsVar:0}],["style.border","1px solid orange","style"]],ch:[{nn:"text",v:1}]}],[{nn:"button",at:[["type","button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"increase inside "},{nn:"text",v:1}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase vs0"}]}],[{nn:"text",tc:"\x3c!-- content-debug-testing --\x3e"},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject click "},{nn:"span",at:[["id","pipe-counter-click-display"]],ch:[{nn:"text",v:0}]}]},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase outside "},{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"hide show"}]},{nn:"button",at:[["id","content-toggle-fx"],["type","button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"toggle hideshow fx"}]},{nn:"text",v:5},{nn:"text",tc:"\n      "},{nn:"text",v:6},{nn:"text",tc:"\n      "},{nn:"text",v:7},{nn:"text",tc:"\n      "},{nn:"text",v:8},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"added: "},{nn:"span",at:[["id","content-fx-added"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:"&nbsp;\n          removed: "},{nn:"span",at:[["id","content-fx-removed"]],ch:[{nn:"text",v:10}]}]},{nn:"div",ch:[{nn:"text",tc:"staggerBy:"},{nn:"input",at:[["type","range"],["min","10"],["max","300"],["step","1"],["change",{tagJsVar:11},null]]}]}]},{nn:"hr"},{nn:"text",v:12}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Dump Content"}]},{nn:"text",v:13},{nn:"text",tc:"\n      "},{nn:"text",v:14}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"No Parent Test"}]},{nn:"text",v:15}]},{nn:"hr",at:[["id","noParentsTest2-start"]]},{nn:"text",v:16},{nn:"hr",at:[["id","noParentsTest2-end"]]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"injection test"}]},{nn:"div",at:[["id","injection-test"]],ch:[{nn:"text",tc:"injection test "},{nn:"text",v:17}]},{nn:"div",at:[["id","hello-big-dom-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:18},{nn:"text",tc:" world"}]},{nn:"div",at:[["id","hello-big-string-world"]],ch:[{nn:"text",tc:"hello "},{nn:"text",v:19},{nn:"text",tc:" world"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"tagvar injection"}]},{nn:"div",ch:[{nn:"div",at:[["id","inject-tagvar-0"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-0"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]},{nn:"div",at:[["id","inject-tagvar-1"]],ch:[{nn:"text",tc:"&#58;tagvarx0x&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-1"]],ch:[{nn:"text",tc:":tagvarx0x:"}]},{nn:"div",at:[["id","inject-tagvar-2"]],ch:[{nn:"text",tc:"&#58;tagvar0&#58;"}]},{nn:"text",tc:"==="},{nn:"div",at:[["id","inject-read-tagvar-2"]],ch:[{nn:"text",tc:":tagva&#x72;0:"}]}]}]},{nn:"div",at:[["id","style-simple-border-orange"],["style.border","3px solid orange","style"]],ch:[{nn:"text",tc:"simple orange border"}]},{nn:"div",at:[["id","style-var-border-orange"],["style.border",{tagJsVar:20},"style"]],ch:[{nn:"text",tc:"var orange border"}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-border-orange"],["style.border",{tagJsVar:21},"style"]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-border-orange"],["click",{tagJsVar:22},null]],ch:[{nn:"text",tc:"orange toggle "},{nn:"text",v:23}]}]},{nn:"div",ch:[{nn:"div",at:[["id","style-toggle-bold"],[{tagJsVar:24}]],ch:[{nn:"text",tc:"toggle orange border"}]},{nn:"button",at:[["id","toggle-bold"],["click",{tagJsVar:25},null]],ch:[{nn:"text",tc:"bold toggle "},{nn:"text",v:26}]}]},{nn:"div",at:[["id","hello-spacing-dom-world"]],ch:[{nn:"text",v:27},{nn:"text",tc:" "},{nn:"text",v:28},{nn:"text",tc:" worlds"}]}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"zero test"}]},{nn:"text",tc:'P.0 You should see "0" here => "'},{nn:"text",v:29},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you cannot see false values --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"false test"}]},{nn:"text",tc:'P.1 You should see "" here => "'},{nn:"text",v:30},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"null test"}]},{nn:"text",tc:'P.2 You should see "" here => "'},{nn:"text",v:31},{nn:"text",tc:'"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"undefined test"}]},{nn:"text",tc:'P.3 You should see "" here => "'},{nn:"text",v:32},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can see true booleans --\x3e"},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"true test"}]},{nn:"text",tc:'P.4 You should see "true" here => "'},{nn:"text",v:33},{nn:"text",tc:'"'}]}]},{nn:"text",tc:"\x3c!--proof you can try to use the tagVar syntax --\x3e"},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.5 You should see "{22}" here => "'},{nn:"text",v:34},{nn:"text",tc:"22"},{nn:"text",v:35},{nn:"text",tc:'"'}]}]},{nn:"fieldset",ch:[{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:'P.6 You should see "'},{nn:"text",v:36},{nn:"text",tc:"__tagVar0"},{nn:"text",v:37},{nn:"text",tc:'" here => "{__tagVar0}"'}]}]},{nn:"div",at:[["style","flex-grow:1"]],ch:[{nn:"text",tc:"should be a safe string no html&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-0"]],ch:[{nn:"text",tc:'"&lt;div&gt;hello&lt;/div&gt;"'}]},{nn:"text",tc:"&nbsp;\n        here =>&nbsp;"},{nn:"span",at:[["id","content-dom-parse-0-1"]],ch:[{nn:"text",tc:'"'},{nn:"text",v:38},{nn:"text",tc:'"'}]}]}]},{nn:"text",v:39},{nn:"text",tc:"\n  "}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 0"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 1"}]}],[{nn:"div",at:[["name","test-the-tester"],[{tagJsVar:0}]],ch:[{nn:"text",tc:"test the tester - 2"}]}],[{nn:"text",tc:"\n        test the tester2\n      "}],[{nn:"b",ch:[{nn:"text",tc:"big"}]}],[{nn:"hr"},{nn:"text",tc:"content1"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"text",tc:"content2"},{nn:"hr"},{nn:"text",v:1},{nn:"hr"},{nn:"text",tc:"content3"},{nn:"hr"},{nn:"text",v:2},{nn:"hr"},{nn:"text",tc:"content4"},{nn:"hr"}],[{nn:"text",tc:"inner html tag"}]]};let Ra=0;const Ua=Fn((()=>{const t=new ar(0);++Ra;const e=Tt.all([0,"all",4]);if(Ra>1)throw new Error("issue started!");return ds(rn(e.pipe((t=>JSON.stringify(t)))),_s(Js("👍",Js({id:"👍-counter-display"},rn(t,(t=>t)))),gs({type:"button",id:"👍-counter-button",onClick:()=>{++t.value}},"++👍")),(t=>Rs({renderCount:1,name:"oneRender_tag_ts"})),ys,Ss(Ts("insideMultiRender"),(t=>Wa())))})),Wa=Fn((()=>(t=dr(0),e=or(0),n=0,o=0,r=pr((t=>[{renderCount:o,counter:n}]=t({renderCount:o,counter:n}))))=>(++o,Ar.dom(za.allStrings2277686[0],rn(t),e,n,(()=>{++n,t.next(n),e.value=n}),Rs({renderCount:o,name:"insideMultiRender"}))))),za={allStrings2277686:[[{nn:"div",ch:[{nn:"text",tc:"👍🔨 sub counter-subject-display:"},{nn:"span",at:[["id","👍🔨-counter-subject-display"]],ch:[{nn:"text",v:0}]}]},{nn:"div",ch:[{nn:"text",tc:"👍📡 signal counter:"},{nn:"span",at:[["id","📡-signal-counter-display"]],ch:[{nn:"text",v:1}]}]},{nn:"br"},{nn:"span",ch:[{nn:"text",tc:"👍🔨 sub counter"},{nn:"span",at:[["id","👍🔨-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"br"},{nn:"button",at:[["type","button"],["id","👍🔨-counter-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"++👍👍"}]},{nn:"text",v:4},{nn:"text",tc:"\n"}]]};var Fa=n(995);let Ya=null;function Xa(t=!0,e,o){null!==Ya&&(clearTimeout(Ya),console.debug("🏃 Cleared previous testing to start again..."));Ya=setTimeout((async()=>{e=e||Ga.views,console.debug("🏃 Prepare test suites...");const r=await async function(t,e=!0){console.log("🏃 runIsolatedTests: Loading tests for views:",t);let o=0;e&&(await Promise.resolve().then(n.bind(n,451)),++o),t.includes(qa.Content)&&(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835)),++o),t.includes(qa.Subscriptions)&&(await Promise.resolve().then(n.bind(n,528)),++o),t.includes(qa.Counters)&&(await Promise.resolve().then(n.bind(n,428)),++o),t.includes(qa.Props)&&(await Promise.resolve().then(n.bind(n,749)),++o),t.includes(qa.ProviderDebug)&&(await Promise.resolve().then(n.bind(n,186)),await Promise.resolve().then(n.bind(n,488)),++o),t.includes(qa.TagSwitchDebug)&&(await Promise.resolve().then(n.bind(n,168)),++o),t.includes(qa.Child)&&(await Promise.resolve().then(n.bind(n,527)),++o),t.includes(qa.Arrays)&&(await Promise.resolve().then(n.bind(n,842)),++o),t.includes(qa.Mirroring)&&(await Promise.resolve().then(n.bind(n,774)),++o),t.includes(qa.WatchTesting)&&(await Promise.resolve().then(n.bind(n,702)),++o),t.includes(qa.FunInPropsTag)&&(await Promise.resolve().then(n.bind(n,157)),++o),t.includes(qa.AttributeDebug)&&(await Promise.resolve().then(n.bind(n,178)),++o),t.includes(qa.OneRender)&&(await Promise.resolve().then(n.bind(n,994)),++o),t.includes(qa.Todo)&&(await Promise.resolve().then(n.bind(n,337)),++o),t.includes(qa.Destroys)&&(await Promise.resolve().then(n.bind(n,236)),++o),t.includes(qa.Basic)&&(await Promise.resolve().then(n.bind(n,566)),++o),console.debug(`🏃 Running ${o} test suites...`);try{const t=Date.now(),e=await(0,Fa.executeBrowserTests)(),n=Date.now()-t;return console.info(`✅ tests completed in ${n}ms`),e}catch(t){return console.error("❌ tests failed:",t),!1}}(e,o);t&&(r?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}var qa;!function(t){t.Basic="basic",t.Destroys="destroys",t.Todo="todo",t.FunInPropsTag="funInPropsTag",t.OneRender="oneRender",t.WatchTesting="watchTesting",t.Mirroring="mirroring",t.Content="content",t.Arrays="arrays",t.Counters="counters",t.TableDebug="tableDebug",t.Props="props",t.Child="child",t.TagSwitchDebug="tagSwitchDebug",t.ProviderDebug="providerDebug",t.AttributeDebug="attributeDebug",t.Subscriptions="subscriptions"}(qa||(qa={}));const Ga=function(){const t=localStorage.taggedjs||JSON.stringify({autoTest:!0,views:Object.values(qa)});return JSON.parse(t)}();function Ka(){localStorage.taggedjs=JSON.stringify(Ga)}const Qa=Object.values(qa),Za=Fn(((t=Qa)=>{const e=[...t].sort(((t,e)=>t.localeCompare(e))).map((t=>({type:t,meta:Fl.find((e=>e.view===t))})));return _s(ws("᭟ Sections"),_s({style:"display:flex;gap:1em;flex-wrap:wrap;margin:1em;"},(t=>e.map((({meta:t,type:e})=>_s({style:"flex:0 0 auto;min-width:150px;white-space:nowrap;"},ms({name:t=>"view-type-"+e,type:"checkbox",id:t=>"view-type-"+e,checked:t=>Ga.views.includes(e),onClick:()=>function(t,e=!0){Ga.views.includes(t)?ei(t):ti.next({type:t,checkTesting:e});Ka()}(e)}),(e=>t?.emoji?t.emoji+" ":null),Es({for:t=>"view-type-"+e}," ",(t=>e))," ",Vs({href:t=>`isolated.html#${e}`,style:"font-size:.6em;text-decoration:none;"},"🔗")," ",Vs({href:t=>`#${e}`,style:"font-size:.6em;"},"↗️")).key(e)))),(e=>t.length>1&&[_s(Es({onClick:()=>t.forEach((t=>{ni(t,!1),Ka()}))}," all")),_s(Es({onClick:()=>t.forEach((t=>{ei(t),Ka()}))}," none"))])))}));const ti=new Tt;function ei(t){Ga.views=Ga.views.filter((e=>e!==t))}function ni(t,e=!0){Ga.views.push(t),e&&Ga.autoTest&&Xa()}const oi=Fn(((t,e)=>Ar.dom(ri.allStrings19347[0],t,(()=>e(t))))),ri={allStrings19347:[[{nn:"div",at:[["style","border:1px solid black;"]],ch:[{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"delete"}]}]}]]},si=Fn(((t,e,n)=>(o="other",r=0,s=0,a=pr((t=>[{other:o,counter:r,renderCount:s}]=t({other:o,counter:r,renderCount:s}))),i=++s,{addArrayItem:c,myFunction:l,deleteItem:u,child:d,array:p}=t)=>Ar.dom(ai.allStrings598669[0],e.function.original?"taggjedjs-wrapped":"nowrap",e.count,d.myChildFunction.original?"taggjedjs-wrapped":"nowrap",l.original?"taggjedjs-wrapped":"nowrap",l,function(t){if(!t)return D;const e=lt();if(!e)throw new Error("output must be used in render sync fashion");return(...n)=>{const o=e.ownerSupport;return xn(n,t,o.context)}}(d.myChildFunction),n,ci.function,(()=>++r),p.length,p.map((t=>oi(t,u).key(t))),c,r,Rs({renderCount:s,name:"funInProps_tag_child"})))),ai={allStrings598669:[[{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"mainFunction:"}]},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"span",ch:[{nn:"text",v:1}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"childFunction:"}]},{nn:"text",v:2}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"myFunction:"}]},{nn:"text",v:3}]},{nn:"button",at:[["id","fun_in_prop1"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🤰 ++object argument"}]},{nn:"button",at:[["id","fun_in_prop2"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🤰 ++child.myChildFunction"}]},{nn:"button",at:[["id","fun_in_prop3"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"+🤰 +argument"}]},{nn:"button",at:[["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🆎 ++main"}]},{nn:"button",at:[["click",{tagJsVar:8},null]],ch:[{nn:"text",tc:"++me"}]},{nn:"div",ch:[{nn:"text",tc:"child array length: "},{nn:"text",v:9},{nn:"text",tc:"\n    "},{nn:"text",v:10},{nn:"button",at:[["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"addArrayItem"}]}]},{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",ch:[{nn:"text",v:12}]}]},{nn:"text",v:13},{nn:"text",tc:"\n"}]]},ii=Fn((t=>(e=0,n=++e,o=(e=>{if("Enter"===e.key){const n=e.target.value.trim();t(n),e.target.value=""}}))=>[ms({type:"text",onKeyup:o,onChange:e=>{t(e.target.value),e.target.value=""}}),gs({type:"button",onClick:t},"add by outside"),t=>Rs({renderCount:e,name:"addArrayComponent"})])),ci={function:()=>++ci.count,count:0},li=Fn((()=>(t=[],e=0,n=0,o=!0,r="a",s=(()=>++e),a=++n,i=(e=>{t=t.map((t=>t)),t.push("string"==typeof e?e:"push"+t.length)}),c=(e=>t=t.filter((t=>t!==e))))=>_s(gs({id:"fun-parent-button",onClick:s},"🤰 ++parent"),Js({id:"fun_in_prop_display"},(t=>e)),(t=>Rs({renderCount:n,name:"funInProps_tag_parent"})),_s(js("🆎 main:"),Js({id:"main_wrap_state"},(t=>ci.function.original?"taggjedjs-wrapped":"nowrap")),":",(t=>ci.count)),gs({id:"toggle-fun-in-child",type:"button",onClick:()=>o=!o},"toggle child"),"array length: ",t.length,gs({onClick:i},"reset add"),ys(),(e=>o&&si({myFunction:s,array:t,addArrayItem:i,deleteItem:c,child:{myChildFunction:s}},ci,s)),(t=>ii(i))))),ui=Fn.immutableProps(((t,e,n)=>(o=!1,r=pr((t=>[o]=t(o))))=>Ar.dom(pi.allStrings349976[0],t.completed,o,o?Ar.dom(pi.allStrings349976[2],t.title,(()=>o=!1),(r=>di(r,(r=>{!function(t,e,n,o){if(0===t.length)return void o.removeItem(e.id);o.updateToByIndex(e,{title:t},n)}(r,t,n,e),o=!1})))):Ar.dom(pi.allStrings349976[1],t.completed&&"✅",(o=>e.toggleItem(t,n)),t.completed&&"checked",(()=>e.toggleItem(t,n)),(()=>o=!o),t.title,(()=>e.removeItemByIndex(n))))));function di(t,e){if("Enter"===t.key){return e(t.target.value.trim()),!0}}const pi={allStrings349976:[[{nn:"li",at:[["class.completed",{tagJsVar:0},"class"],["class.editing",{tagJsVar:1},"class"]],ch:[{nn:"text",v:2}]}],[{nn:"div",at:[["class","view"]],ch:[{nn:"text",v:0},{nn:"input",at:[["type","button"],["click",{tagJsVar:1},null],["value","toggle"]]},{nn:"input",at:[["class","toggle"],["type","checkbox"],[{tagJsVar:2}],["change",{tagJsVar:3},null]]},{nn:"label",at:[["data-testid","todo-item-label"],["dblclick",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["class","destroy"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🗑️ destroy"}]}]}],[{nn:"div",at:[["class","input-container"]],ch:[{nn:"input",at:[["id","edit-todo-input"],["type","text"],["autofocus"],["class","edit"],["value",{tagJsVar:0},null],["blur",{tagJsVar:1},null],["keydown",{tagJsVar:2},null]]},{nn:"label",at:[["class","visually-hidden"],["htmlfor","todo-input"]],ch:[{nn:"text",tc:"Edit Todo Input"}]}]}]]},hi={allStrings47860:[[{nn:"header",at:[["class","header"],["data-testid","header"]],ch:[{nn:"h1",ch:[{nn:"text",tc:"todos"}]},{nn:"input",at:[["autofocus"],["class","new-todo"],["placeholder","What needs to be done?"],["keydown",{tagJsVar:0},null]]}]}]]},gi=Fn.immutableProps(((t,e,n,o)=>Ar.dom(fi.allStrings77156[0],o,o>1&&"s","/"===n,"/active"===n,"/completed"===n,t-o>0&&Ar.dom(fi.allStrings77156[1],(()=>e()))))),fi={allStrings77156:[[{nn:"footer",at:[["class","footer"],["data-testid","footer"]],ch:[{nn:"span",at:[["class","todo-count"]],ch:[{nn:"text",v:0},{nn:"text",tc:" item"},{nn:"text",v:1},{nn:"text",tc:" left!"}]},{nn:"ul",at:[["class","filters"]],ch:[{nn:"li",ch:[{nn:"a",at:[["id","todo-view-all-link"],["class.selected",{tagJsVar:2},"class"],["href","#/"]],ch:[{nn:"text",tc:"All"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-active-link"],["class.selected",{tagJsVar:3},"class"],["href","#/active"]],ch:[{nn:"text",tc:"Active"}]}]},{nn:"li",ch:[{nn:"a",at:[["id","todo-view-completed-link"],["class.selected",{tagJsVar:4},"class"],["href","#/completed"]],ch:[{nn:"text",tc:"Completed"}]}]}]},{nn:"text",v:5}]}],[{nn:"button",at:[["class","clear-completed"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"Clear completed"}]}]]};const bi=[],mi=function(t){function e(e,n,o){return t[o]={...e,...n},t}return{addItem:function(e){return t.push({id:"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})),title:e,completed:!1}),t},removeItem:function(e){return t.filter((t=>t.id!==e))},toggleItem:function(t,n){return e(t,{completed:!t.completed},n)},removeAll:function(){return t=[]},toggleAll:function(e){for(let n=t.length-1;n>=0;--n)t[n]={...t[n],completed:e};return t},removeCompleted:function(){for(let e=t.length-1;e>=0;--e)t[e].completed&&t.splice(e,1);return t},removeItemByIndex:function(e){return t.splice(e,1),t},completeItem:function(t,n){return e(t,{completed:!0},n)},updateItemByIndex:function(e,n){return t[n]={...e},t},updateToByIndex:e}}(bi),yi=()=>{const t=Ns().route,e=bi.filter((t=>!t.completed)).length,n="/completed"===t,o="/active"===t&&bi.filter((t=>!t.completed))||n&&bi.filter((t=>t.completed))||bi,r=bi.length,s=o.map(((t,e)=>ui(t,mi,e).key(t.id)));return Ar.dom(xi.allStrings143180[0],!1,(t=>Fn.renderOnce=()=>Ar.dom(hi.allStrings47860[0],(e=>{const n=di(e,(e=>t.addItem(e)));n&&(e.target.value="")})))(mi),r>0&&Ar.dom(xi.allStrings143180[1],e<1?1:0,(t=>mi.toggleAll(t.target.checked)),s,gi(r,mi.removeCompleted,t,e)))},xi={allStrings143180:[[{nn:"text",tc:"\n        "},{nn:"text",v:0},{nn:"text",tc:"\n        "},{nn:"text",v:1},{nn:"text",tc:"\n        "},{nn:"text",v:2},{nn:"text",tc:"\n    "}],[{nn:"main",at:[["class","main"]],ch:[{nn:"div",at:[["class","toggle-all-container"]],ch:[{nn:"input",at:[["id","toggle-all"],["class","toggle-all"],["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"label",at:[["class","toggle-all-label"],["for","toggle-all"]],ch:[{nn:"text",tc:"Toggle All Input"}]}]},{nn:"ul",at:[["class","todo-list show-priority"]],ch:[{nn:"text",v:2}]}]},{nn:"text",v:3},{nn:"text",tc:"\n        "}]]},vi=Fn(((t,e,n)=>{let o=0;return vi.updates((o=>[t,e,n]=o)),Ss({id:"innerHtmlTests-1"},Ts("no props test"),_s({style:"border:2px solid purple;"},(t=>n)),_s((t=>`isSubjectInstance:${ot(n)}`)),_s((t=>`isSubjectTagArray:${n instanceof Array}`)),gs({id:"innerHtmlTest-counter-button",onClick:()=>++o},(t=>`increase innerHtmlTest ${o}`)),Js({id:"innerHtmlTest-counter-display"},(t=>o)),(t=>Rs({renderCount:1,name:"innerHtmlTest"})))})),wi=Fn(((t,e)=>(n=0,o=0,r=pr((t=>[{counter:n,renderCount:o}]=t({counter:n,renderCount:o}))),s=++o)=>Ar.dom(Ci.allStrings127090[0],t,e,(()=>++n),n,n,!1))),Ci={allStrings127090:[[{nn:"text",tc:"\x3c!--innerHtmlTests.js--\x3e"},{nn:"fieldset",at:[["id","innerHtmlTests-2"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"innerHTML Props: "},{nn:"text",v:0}]},{nn:"text",v:1},{nn:"button",at:[["id","innerHtmlPropsTest-button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"increase innerHtmlPropsTest "},{nn:"text",v:3}]},{nn:"span",at:[["id","innerHtmlPropsTest-display"]],ch:[{nn:"text",v:4}]},{nn:"text",v:5}]}]]},ki=Fn(((t,e,n)=>(ki.updates((o=>[t,e,n]=o)),Ss(Ts("xxxxx"),_s("hello other world",(e=>t)," - ",(t=>e)),_s({style:"border:2px solid red;"},"***",(t=>n),"***"))))),_i=Fn(((t="childTests")=>(t=0,e=0,n=pr((n=>[{renderCount:t,counter:e}]=n({renderCount:t,counter:e}))),o=++t)=>Ar.dom(Ti.allStrings801974[1],ki(1,2,Ar.dom(Ti.allStrings801974[2],Date.now())),vi({},2,Ar.dom(Ti.allStrings801974[3],(()=>++e),e,t,e,Rs({renderCount:t,name:"childTests-innerHtmlTest"}))),(()=>{const t=cn();return Ar.dom(Ti.allStrings801974[0],11,t,22).acceptInnerHTML(t)})().innerHTML=Ar.dom(Ti.allStrings801974[4],(()=>++e),e,t,e,Rs({renderCount:t,name:"childTests-innerHtmlTest-c"})),wi(22,Ar.dom(Ti.allStrings801974[5],(()=>++e),e,e,Rs({renderCount:t,name:"innerHtmlPropsTest child"}))),Si({child:Ar.dom(Ti.allStrings801974[6],(()=>++e),e,e)}),(()=>++e),e,t,e,Rs({renderCount:t,name:"childTests"})))),Si=Fn((({child:t})=>(Si.updates((e=>[{child:t}]=e)),Ss(Ts("child as prop"),(e=>t))))),Ti={allStrings801974:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"noTagTest"}]},{nn:"text",v:0},{nn:"text",tc:"---"},{nn:"text",v:1},{nn:"text",tc:"+++"},{nn:"text",v:2}]}],[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","children-test"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"childTests"}]},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:0},{nn:"hr"},{nn:"hr"},{nn:"hr"},{nn:"text",v:1},{nn:"text",tc:"\n    \n    "},{nn:"text",v:2},{nn:"text",tc:"\n\n    "},{nn:"text",v:3},{nn:"text",tc:"\n\n    "},{nn:"text",v:4},{nn:"hr"},{nn:"button",at:[["id","childTests-button"],["click",{tagJsVar:5},null]],ch:[{nn:"text",tc:"🐮 increase childTests outside "},{nn:"text",v:6},{nn:"text",tc:" - "},{nn:"text",v:7}]},{nn:"span",at:[["id","childTests-display"]],ch:[{nn:"text",v:8}]},{nn:"text",v:9}]}],[{nn:"div",ch:[{nn:"hr"},{nn:"text",tc:"abc-123-"},{nn:"text",v:0},{nn:"hr"}]}],[{nn:"b",ch:[{nn:"text",tc:"Field set body A"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (A) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body C"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlTest-childTests-button-c"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (C) increase childTests inside "},{nn:"text",v:1},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"span",at:[["id","innerHtmlTest-childTests-display-c"]],ch:[{nn:"text",v:3}]},{nn:"text",v:4},{nn:"text",tc:"\n    "}],[{nn:"b",ch:[{nn:"text",tc:"Field set body B"}]},{nn:"hr"},{nn:"button",at:[["id","innerHtmlPropsTest-childTests-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 (B) increase childTests inside "},{nn:"text",v:1}]},{nn:"span",at:[["id","innerHtmlPropsTest-childTests-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"text",tc:"\n    "}],[{nn:"text",tc:"\n      hello child as prop test"},{nn:"button",at:[["id","child-as-prop-test-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐮 child as prop "},{nn:"text",v:1}]},{nn:"span",at:[["id","child-as-prop-test-display"]],ch:[{nn:"text",v:2}]}]]};let Bi=or(0);const Vi=Fn((()=>(t=!0,e=0,n=++e)=>_s("destroyCount: ",Js({id:"destroyCount"},(t=>Bi)),"on/off: ",(e=>t),(e=>t&&Ji()),gs({id:"toggle-destroys",type:"button",onClick:()=>{t=!t}},(e=>t?"destroy":"restore")),(()=>Rs({renderCount:e,name:"destroys"}))))),Ji=Fn((()=>(t=$n((()=>++Bi.value)))=>_s.attr(vn.onDestroy((()=>{++Bi.value})))({id:"destroyable-content",style:"border:1px solid orange;"},"will be destroyed"))),ji=Fn((({score:t,playerIndex:e})=>{let n=0;return pr((t=>[n]=t(n))),++n,Ar.dom(Ii.allStrings67878[0],t.frame,`score-data-${e}-${t.frame}-inside-button`,(()=>++t.score),t.score,`score-data-${e}-${t.frame}-inside-display`,t.score,(()=>++n),Rs({renderCount:n,name:"scoreData"+t.frame}))})),Ii={allStrings67878:[[{nn:"text",tc:"\n    frame:"},{nn:"text",v:0},{nn:"text",tc:":"},{nn:"button",at:[["id",{tagJsVar:1},null],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"inner score button ++"},{nn:"text",v:3}]},{nn:"span",at:[["id",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]},{nn:"button",at:[["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"increase renderCount"}]},{nn:"text",v:7},{nn:"text",tc:"\n  "}]]},Ei=Fn((()=>{const t=[];let e=0;const n=function(t=[]){return lt()?Pn((()=>kr(rr(t)))):kr(rr(t))}(["d","e","f"]),o=["a","b","c"],r=(({stagger:t=100,fxIn:e,fxOut:n,duration:o="2s",inName:r="fadeInUp",outName:s="fadeOutDown",outPositionAbsolute:a=!1}={})=>{let i=0;const c=Oa((function(e){e.style.setProperty("--animate-duration",o);const n=t*i++;return c.fxIn({target:e},n).then((()=>{--i}))}),(function(e){e.style.setProperty("--animate-duration",o);const n=t*i++;return c.fxOut({target:e},n).then((()=>{--i}))}),e,n,r,s,a);return c.host})({stagger:10,duration:".1s"}),s=()=>({name:"Person "+t.length,scores:"0,".repeat(0).split(",").map(((t,e)=>({frame:e+1,score:Math.floor(4*Math.random())+1})))}),a=e=>{const n=t[e];t.splice(e,1),n.edit=!n.edit};function i(t){for(let e=0;e<t;++e)n[n.length]=n.length.toString()}return _s(Js("count display:",Js({id:"arrays-counter-display"},(t=>e))),Ss(Ts("signal array test ",Ls({id:"signal-array-count"},(t=>n.length))),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},rn(n,(t=>t.map(((t,o)=>_s({attr:r,id:t=>`signal-array-item-${o}`,style:"border:1px solid black;border-radius:.2em"},"index:",(t=>o)," counter:",Js({id:t=>`signal-array-item-counter-display-${o}`},(t=>e))," content:",(e=>t)," length:",(t=>n.length),gs({id:`signal-array-item-delete-btn-${o}`,onClick:()=>{n.splice(o,1)}},"🗑️ delete subscribe"),gs({type:"button",onClick:()=>++e},"++counter ",(t=>e))).key(t))))),_s(gs({type:"button",id:"signal-array-increase-counter",onClick:()=>++e},"++counter ",(t=>e)),gs({type:"button",id:"push-signal-array-btn",onClick:()=>i(1)},"add number"),gs({type:"button",onClick:()=>i(10)},"add 10 number"),gs({type:"button",onClick:()=>{setTimeout((()=>{n[n.length]=n.length.toString()}),1e3)}},"add number by delay"),gs({type:"button",onClick:()=>{setTimeout((()=>{n.length=0}),1e3)}},"delay clear array")))),Ss({style:"display:flex;flex-wrap:wrap;gap:1em"},Ts("simple array test - length:",(t=>o.length)),(t=>o.map(((t,n)=>_s("counter:",(t=>e)," index:",(t=>n)," x:",(e=>t)," length:",(t=>o.length),gs({onClick:()=>{o.splice(n,1)}},"🗑️ delete simple")).key(t)))),_s(gs({type:"button",onClick:()=>++e},"++counter ",(t=>e)),gs({type:"button",onClick:()=>o[o.length]=o.length.toString()},"add number"))),Ss(Ts("game with players"),_s({style:"display:flex;flex-wrap:wrap;gap:1em"},_s("players count:",(e=>t.length)),(e=>t.map(((e,n)=>Li(e,n,t,s,a).key(e.name))))),gs({id:"array-test-push-item",onClick:()=>{t.push(s())}},"push item ",t.length+1),gs({onClick:()=>{t.push(s()),t.push(s()),t.push(s())}},"push 3 items"),gs({onClick:()=>{t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s()),t.push(s())}},"push 9 items"),(e=>t.length>0&&gs({attr:Da({duration:".1s"}),onClick:()=>t.length=0},"remove all"))),(t=>Rs({renderCount:1,name:"arrayTests.ts"})))})),Li=Fn(((t,e,n,o,r)=>(Li.updates((s=>{[t,e,n,o,r]=s})),_s({style:"background-color:black;",attr:Da({duration:".1s"})},_s((e=>`name:${t.name}`)),_s((t=>`index:${e}`)),_s({style:"background-color:purple;padding:.5em"},"scores:",(e=>t.scores.map(((t,e)=>Pi(e,t).key(t))))),(n=>t.edit&&gs({onClick:()=>{r(e)}},"remove")),(n=>t.edit&&gs({id:t=>`player-remove-promise-btn-${e}`,onClick:async()=>(t.edit=!t.edit,r(e),"player-remove-promise-btn-xx")},"remove by promise")),gs({id:t=>`player-edit-btn-${e}`,onClick:()=>t.edit=!t.edit},"edit"),gs({onClick:()=>{n.splice(e,0,o())}},"add before"))))),Pi=Fn(((t,e)=>_s({class:"animate__slow",attr:Da({duration:".1s"})},Ss(Ts(gs({id:n=>`score-data-${t}-${e.frame}-outside-button`,onClick:()=>++e.score},(t=>`outer score button ++${e.score}`)),Js({id:n=>`score-data-${t}-${e.frame}-outside-display`},(t=>e.score))),(n=>ji({score:e,playerIndex:t})))))),Di=Fn(((t="tagSwitchDebug")=>{let e=null;return _s(_s({id:"selectTag-wrap"},"selectedTag: |",Js({id:"selectTag-display"},(()=>(null===e?"null":void 0===e&&"undefined")||""===e&&"empty-string"||e)),"|"),fs({id:"tag-switch-dropdown",onChange:function(t){e=t.target.value,"undefined"===e&&(e=void 0),"null"===e&&(e=null)}},bs(),bs({value:"",selected:()=>"string"!=typeof e||e.length?{}:{selected:!0}},"empty-string"),bs({value:"undefined",selected:()=>void 0===e?{selected:!0}:{}},"undefined"),bs({value:"null",selected:()=>null===e},"null"),bs({value:"1",selected:()=>"1"===e},"tag 1"),bs({value:"2",selected:()=>"2"===e},"tag 2"),bs({value:"3",selected:()=>"3"===e},"tag 3")),_s({id:"switch-tests-wrap",style:"display:flex;flex-wrap:wrap;gap:1em;"},_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 1 - string | Tag"),_s((()=>{switch(e){case null:return"null, select tag below";case"":return _s({id:"empty-string-1"});case"1":return Ni({title:"value switch"});case"2":return $i({title:"value switch"});case"3":return Ai({title:"value switch"})}return"select tag below"}))),_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 2 - Tag"),_s((()=>{switch(e){case null:return _s({id:"select-tag-above"},"null, select tag above");case"":return _s({id:"select-tag-above"},"empty-string, select tag above");case"1":return Ni({title:"tag switch"});case"2":return $i({title:"tag switch"});case"3":return Ai({title:"tag switch"})}return _s({id:"select-tag-above"},"select tag above")}))),_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 3 - ternary (only 1 or 3 shows)"),_s((()=>"3"===e?Ai({title:"ternary simple"}):Ni({title:"ternary simple"})))),_s({style:"border:1px solid blue;flex-grow:1"},ws("Test 3.2 - ternary via prop (only 1 or 3 shows)"),_s((()=>Oi({selectedTag:e})))),_s({id:"arraySwitching-test-wrap",style:"border:1px solid red;flex-grow:1"},ws("Test 4 - arraySwitching"),_s({id:"arraySwitching-wrap"},(()=>Hi({selectedTag:e}))))),(()=>Rs({renderCount:1,name:"tagSwitchDebug"})))})),Oi=Fn((({selectedTag:t})=>(Oi.inputs((e=>[{selectedTag:t}]=e)),_s({id:"ternaryPropTest-wrap"},(()=>`${t}:`),(e=>"3"===t?Ai({title:"ternaryPropTest"}):Ni({title:"ternaryPropTest"})))))),Ni=Fn((({title:t})=>{let e=0;return Ni.inputs((e=>[{title:t}]=e)),_s({id:"tag1",style:"border:1px solid orange;"},_s({id:"tagSwitch-1-hello"},(()=>`Hello 1 ${t} World`)),gs({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Rs({renderCount:1,name:"tag1"})))})),$i=Fn((({title:t})=>{let e=0;return _s({id:"tag2",style:"border:1px solid orange;"},_s({id:"tagSwitch-2-hello"},(()=>`Hello 2 ${t} World`)),gs({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Rs({renderCount:1,name:"tag1"})))})),Ai=Fn((({title:t})=>{let e=0;return Ai.inputs((e=>[{title:t}]=e)),_s({id:"tag3",style:"border:1px solid orange;"},_s({id:"tagSwitch-3-hello"},(()=>`Hello 3 ${t} World`)),gs({onClick:()=>++e},(()=>`increase ${e}`)),(()=>Rs({renderCount:1,name:"tag1"})))})),Hi=({selectedTag:t})=>{switch(t){case void 0:return"its an undefined value";case null:return"its a null value";case"":return"space";case"1":return Ni({title:`tag ${t}`});case"2":return["b","c"].map((e=>$i({title:`array ${t} ${e}`}).key(e)));case"3":return["d","e","f"].map((e=>Ai({title:`array ${t} ${e}`}).key(e)))}return"nothing to show for in arrays"},Mi=Fn((()=>{const t=Ri();return Ar.dom(Ui.allStrings156734[0],t,t)})),Ri=()=>{let t=0;return pr((e=>[t]=e(t))),Ar.dom(Ui.allStrings156734[1],t,(()=>++t),t)},Ui={allStrings156734:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter0"}]},{nn:"text",v:0}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"counter1"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\n    counter:"},{nn:"span",ch:[{nn:"text",tc:"🪞"},{nn:"span",at:[["id","mirror-counter-display"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","mirror-counter-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},Wi=(t,e)=>Fn.use=(n=Pn("statePropDebug.tag.ts"),o=!1,r=0,s=pr((t=>[{edit:o,renderCount:r}]=t({edit:o,renderCount:r}))),a=++r)=>Ar.dom(zi.allStrings53929[0],t,(()=>o=!o),o,e,Rs({renderCount:r,name:"statePropDebug-tag"})),zi={allStrings53929:[[{nn:"text",tc:"\n  propCounter:"},{nn:"text",v:0},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"edit "},{nn:"text",v:2}]},{nn:"text",tc:"child: "},{nn:"text",v:3},{nn:"text",tc:"\n  "},{nn:"text",v:4},{nn:"text",tc:"\n"}]]},Fi=Fn(((t="propsDebugMain")=>(t=0,e=0,n=0,o={test:33,x:"y"},r=Pn((()=>new Date)),s=JSON.stringify(o,null,2),a=!0,i=pr((s=>[{syncPropNumber:t,propNumber:e,renderCount:n,propsJson:o,date:r,statePropDisplay:a}]=s({syncPropNumber:t,propNumber:e,renderCount:n,propsJson:o,date:r,statePropDisplay:a}))))=>Ar.dom(Ki.allStrings3198315[0],(t=>o=JSON.parse(t.target.value)),s,s,++n,(()=>++e),e,e,qi({propNumber:e,propsJson:o,propNumberChange:t=>{e=t}}),t,(()=>++t),Rs({renderCount:n,name:"sync_props_callback"}),Xi({syncPropNumber:t,propNumberChange:e=>t=e,parentTest:t=>t}),a&&Wi(e,Ar.dom(Ki.allStrings3198315[1])),(()=>a=!a),r,function(t){const e=new Date(t),n=e.getFullYear(),o=String(e.getMonth()+1).padStart(2,"0"),r=String(e.getDate()).padStart(2,"0"),s=String(e.getHours()).padStart(2,"0"),a=String(e.getMinutes()).padStart(2,"0");return{date:`${n}-${o}-${r}`,time:`${s}:${a}`}}(r).date,(t=>{const e=t.target.value;r=new Date(e)}),Yi({date:r})))),Yi=Fn((({date:t})=>Ar.dom(Ki.allStrings3198315[2],t))),Xi=Fn((({syncPropNumber:t,propNumberChange:e,parentTest:n})=>(o=Pn("syncPropDebug"),r=0,s=0,a=pr((t=>[{counter:r,renderCount:s}]=t({counter:r,renderCount:s}))))=>(++s,t%2==1&&e(t+=1),Ar.dom(Ki.allStrings3198315[3],t,(()=>e(++t)),r,n(r),(()=>{n(++r)}),Rs({renderCount:s,name:"child_sync_props_callback"}))))),qi=Fn((({propNumber:t,propsJson:e,propNumberChange:n})=>(o=Pn("propsDebug"),r=0,s=0,a=hr((e=>[t]=e(t))),i=t,c=pr((t=>[{renderCount:r,propNumberChangeCount:s,myPropNumber:i}]=t({renderCount:r,propNumberChangeCount:s,myPropNumber:i}))),l=ir([t],(()=>i=t)),u=ir([i],(()=>++s)))=>Ar.dom(Ki.allStrings3198315[4],(t=>{const n=JSON.parse(t.target.value);Object.assign(e,n)}),JSON.stringify(e,null,2),JSON.stringify(e,null,2),JSON.stringify(u,null,2),(()=>n(++i)),i,i,(()=>++t),t,t,(()=>++r),++r,(()=>++i),i,s,Gi({propNumber:i,callback:()=>++i})))),Gi=Fn.immutableProps((({propNumber:t,callback:e})=>(n=Pn("propFnUpdateTest"),o=0,r=pr((t=>[o]=t(o))))=>(++o,Ar.dom(Ki.allStrings3198315[5],e,t,t,Rs({renderCount:o,name:"propFnUpdateTest"})))));const Ki={allStrings3198315:[[{nn:"div",at:[["style","display:flex;flex-wrap:wrap"],["id","textareawrap"]],ch:[{nn:"textarea",at:[["style","height:200px;font-size:0.6em;width:100%;max-width:400px"],["id","props-debug-textarea"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(renderCount:"},{nn:"text",v:3},{nn:"text",tc:")"}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-0-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🥩 propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-0-display"]],ch:[{nn:"text",v:6}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"child"}]},{nn:"text",v:7}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"sync props callback"}]},{nn:"text",tc:"🥡 syncPropNumber: "},{nn:"span",at:[["id","sync-prop-number-display"]],ch:[{nn:"text",v:8}]},{nn:"button",at:[["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🥡 ++"}]},{nn:"text",v:10},{nn:"hr"},{nn:"text",v:11}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"state prop"}]},{nn:"text",v:12},{nn:"hr"},{nn:"button",at:[["click",{tagJsVar:13},null]],ch:[{nn:"text",tc:"hide/show"}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"date prop"}]},{nn:"text",tc:"date:"},{nn:"text",v:14},{nn:"input",at:[["type","date"],["value",{tagJsVar:15},null],["change",{tagJsVar:16},null]]},{nn:"hr"},{nn:"text",v:17}]}],[{nn:"text",tc:"child innerHtml 👶"}],[{nn:"text",tc:"date:"},{nn:"text",v:0}],[{nn:"text",tc:"\x3c!--syncPropDebug html--\x3e"},{nn:"div",ch:[{nn:"text",tc:"🥡 child syncPropNumber:"},{nn:"span",at:[["id","sync-prop-child-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","sync-prop-child-button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"🥡 ++"}]}]},{nn:"div",ch:[{nn:"div",ch:[{nn:"text",tc:"counter:"},{nn:"span",at:[["id","sync-prop-counter-display"]],ch:[{nn:"text",v:2}]}]},{nn:"text",tc:"parentTest"},{nn:"span",at:[["id","nothing-prop-counter-display"]],ch:[{nn:"text",v:3}]},{nn:"button",at:[["id","nothing-prop-counter-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"++"}]}]},{nn:"text",v:5},{nn:"text",tc:"\n  "}],[{nn:"text",tc:"\x3c!--propsDebug.js--\x3e"},{nn:"h3",ch:[{nn:"text",tc:"Props Json"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;;max-width:400px"],["wrap","off"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]},{nn:"pre",ch:[{nn:"text",v:2}]},{nn:"text",tc:'\x3c!--<div style="display:flex;flex-wrap:wrap"></div>--\x3e'},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Props Number"}]},{nn:"textarea",at:[["style","font-size:0.6em;height:200px;width:100%;color:white;"],["wrap","off"],["disabled"]],ch:[{nn:"text",v:3}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-1-button"],["click",{tagJsVar:4},null]],ch:[{nn:"text",tc:"🐄 🥩 my propNumber "},{nn:"text",v:5}]},{nn:"span",at:[["id","propsDebug-🥩-1-display"]],ch:[{nn:"text",v:6}]}]},{nn:"div",ch:[{nn:"button",at:[["id","propsDebug-🥩-2-button"],["click",{tagJsVar:7},null]],ch:[{nn:"text",tc:"🐄 🥩 local letProp propNumber "},{nn:"text",v:8}]},{nn:"span",at:[["id","propsDebug-🥩-let-prop-display"]],ch:[{nn:"text",v:9}]}]},{nn:"button",at:[["title","test of increasing render count and nothing else"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"renderCount "},{nn:"text",v:11}]},{nn:"button",at:[["click",{tagJsVar:12},null],["title","only changes number locally but if change by parent than that is the number"]],ch:[{nn:"text",tc:"🐄 🥩 local set myPropNumber "},{nn:"text",v:13}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(propNumberChangeCount:"},{nn:"span",at:[["id","propsDebug-🥩-change-count-display"]],ch:[{nn:"text",v:14}]},{nn:"text",tc:")"}]}]},{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Fn update test"}]},{nn:"text",v:15},{nn:"text",tc:"    \n"}],[{nn:"button",at:[["id","propsOneLevelFunUpdate-🥩-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🐄 🥩 local & 1-parent increase "},{nn:"text",v:1}]},{nn:"span",at:[["id","propsOneLevelFunUpdate-🥩-display"]],ch:[{nn:"text",v:2}]},{nn:"text",v:3},{nn:"small",at:[["style","opacity:.5"]],ch:[{nn:"text",tc:"the count here and within parent increases but not in parent parent"}]}]]},Qi=Fn((t=>Ar.dom(Zi.allStrings248805[0],(()=>t.showDialog=!1),t.showDialog?Ar.dom(Zi.allStrings248805[1],JSON.stringify(t,null,2)):"no dialog"))),Zi={allStrings248805:[[{nn:"dialog",at:[["style","padding:0"],["id","provider_debug_dialog"],["mousedown","var r = this.getBoundingClientRect();(r.top<=event.clientY&&event.clientY<=r.top+r.height&&r.left<=event.clientX&&event.clientX<=r.left+r.width) || this.close()"],["dragstart","const {e,dt,t} = {t:this,e:event,dt:event.dataTransfer};const d=t.drag=t.drag||{x:0,y:0};d.initX=d.x;d.startX=event.clientX-t.offsetLeft;d.startY=event.clientY-t.offsetTop;t.ondragover=e.target.ondragover=(e)=>e.preventDefault();dt.effectAllowed='move';dt.dropEffect='move'"],["drag","const {t,e,dt,d}={e:event,dt:event.dataTransfer,d:this.drag}; if(e.clientX===0) return;d.x = d.x + e.offsetX - d.startX; d.y = d.y + e.offsetY - d.startY; this.style.left = d.x + 'px'; this.style.top = d.y+'px';"],["dragend","const {t,e,d}={t:this,e:event,d:this.drag};if (d.initX === d.x) {d.x=d.x+e.offsetX-(d.startX-d.x);d.y=d.y+e.offsetY-(d.startY-d.y);this.style.transform=translate3d(d.x+'px', d.y+'px', 0)};this.draggable=false"],["close",{tagJsVar:0},null]],ch:[{nn:"div",at:[["style","padding:.25em"],["mousedown","this.parentNode.draggable=true"]],ch:[{nn:"text",tc:"dialog title"}]},{nn:"text",v:1},{nn:"div",at:[["style","padding:.25em"]],ch:[{nn:"button",at:[["type","button"],["click","provider_debug_dialog.close()"]],ch:[{nn:"text",tc:"🅧 close"}]}]}]}],[{nn:"textarea",at:[["wrap","off"]],ch:[{nn:"text",v:0}]}]]},tc=vn(((t,e)=>({selected:t,targets:Pn([])}))),ec=vn((t=>{const e=Fn.inject(tc);Fn.onInit((()=>e.targets.push(t))).onDestroy((()=>{const n=e.targets.findIndex((e=>e===t));-1!==n&&e.targets.splice(n,1)})).element.onclick((()=>{const n=e.selected.findIndex((e=>e===t));-1!==n?e.selected.splice(n,1):e.selected.push(t)}))})),nc=Fn((()=>{const t=Pn((()=>[0,1,2,3,4,5,6,7,8,9].map((t=>({id:t}))))),e=Pn([]),n=tc(e,(t=>{e.length=0,e.push(...t)}));return Ar.dom(oc.allStrings171524[0],e.length,n,t.map((t=>Ar.dom(oc.allStrings171524[1],`injection-test-item-${t.id}`,ec(t),e.includes(t)?"#4CAF50":"#2196F3",e.includes(t)?"3px solid #333":"1px solid #999",{checked:!!e.includes(t)},t.id))),e.length>0?e.map((t=>t.id)).join(", "):"No items selected. Click to select items.")})),oc={allStrings171524:[[{nn:"div",at:[["style","padding: 20px;"]],ch:[{nn:"h2",ch:[{nn:"text",tc:"Injection Test"}]},{nn:"text",tc:"selected: "},{nn:"text",v:0},{nn:"div",at:[["style","\n          border: 2px solid #666;\n          gap:1em;\n          background: #f0f0f0;\n          padding: 20px;\n          min-height: 300px;\n          position: relative;\n          user-select: none;\n          display:flex;flex-wrap:wrap;\n        "],["id","injection-testing-wrap-host"],[{tagJsVar:1}]],ch:[{nn:"text",v:2}]},{nn:"div",at:[["style","margin-top: 20px; padding: 10px; background: #333; color: white;"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Selected Items:"}]},{nn:"p",ch:[{nn:"text",v:3}]}]},{nn:"div",at:[["style","margin-top: 10px; color: #666;"]],ch:[{nn:"small",ch:[{nn:"strong",ch:[{nn:"text",tc:"Instructions:"}]},{nn:"br"},{nn:"text",tc:"- Click to select/deselect items"},{nn:"br"},{nn:"text",tc:"- Click on empty space to deselect all"},{nn:"br"},{nn:"text",tc:"- Selected items will be highlighted in green"}]}]}]}],[{nn:"div",at:[["style","\n              display: inline-block;\n              color: black;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              font-weight: bold;\n              cursor: pointer;\n              transition: background 0.3s;\n              "],["id",{tagJsVar:0},null],[{tagJsVar:1}],["style.background",{tagJsVar:2},"style"],["style.border",{tagJsVar:3},"style"]],ch:[{nn:"input",at:[["type","checkbox"],[{tagJsVar:4}]]},{nn:"text",tc:"Item "},{nn:"text",v:5}]}]]};class rc{constructor(){this.tagDebug=0,this.showDialog=!1}}const sc=()=>({counter:0});function ac(){return{upper:fr.create(ic),test:0}}function ic(){return Pn("ensure states in providers are stable"),{name:"upperTagDebugProvider",test:0}}const cc=Fn(((t="providerDebugBase")=>{fr.create(sc);const e=fr.create(rc),n=fr.create(ac);let o=0,r=0;return pr((t=>[{propCounter:o,renderCount:r}]=t({propCounter:o,renderCount:r}))),e.showDialog&&document.getElementById("provider_debug_dialog").showModal(),++r,Ar.dom(mc.allStrings6857929[0],n.test,n.upper?.test||"?",e.tagDebug||"?",(()=>++n.test),n.test,n.test,(()=>++n.upper.test),n.upper.test,n.upper.test,(()=>++e.tagDebug),e.tagDebug,e.tagDebug,(()=>++o),o,o,(()=>e.showDialog=!0),e.showDialog,lc({propCounter:o,propCounterChange:t=>{o=t}}),r,Rs({renderCount:r,name:"providerDebugBase"}),Qi(e),bc())})),lc=Fn((({propCounter:t,propCounterChange:e,_:n="providerDebug.js@child"})=>{const o=fr.inject(sc),r=fr.inject(ac),s=fr.inject(rc),a=fr.inject(ic);let i=!1,c=0;pr((t=>[{showProProps:i,renderCount:c}]=t({showProProps:i,renderCount:c})));const l=wr(),u=Pn((()=>new Tt));return Dn((()=>{console.info("providerDebug.ts: 👉 👉 i should only ever run once"),u.subscribe((t=>{l((e=>{r.test=t}))()}))})),++c,Ar.dom(mc.allStrings6857929[4],(()=>++r.test),r.test,r.test,(()=>++a.test),a.test,a.test,(()=>++o.counter),o.counter,o.counter,(()=>u.next(r.test+1)),r.test,(()=>++s.tagDebug),s.tagDebug,s.tagDebug,(()=>e(++t)),t,t,(()=>s.showDialog=!0),s.showDialog,(()=>i=!i),i?"hide":"show",i&&Ar.dom(mc.allStrings6857929[5],Da(),uc(s)),c,Rs({renderCount:c,name:"providerDebugInner"}))})),uc=Fn((t=>Ar.dom(mc.allStrings6857929[6],JSON.stringify(t,null,2)))),dc=vn(((t="red")=>{const e=Fn.element.get();e.style.border="2px solid "+t,e.style.display="flex",e.style.gap="1em";return{color:t,title:"inCycleParent"}})),pc=vn(((t="green")=>{const e=Fn.inject(dc),n=Fn.element.get();n.style.border="2px solid "+t,n.style.flex="1",n.innerHTML=`wonderful - parent(${e.color})`})),hc=vn(((t="green")=>{const e=Fn.element.get();e.style.border="2px solid "+t,e.style.flex="1"})),gc=vn(((t="green")=>{Fn.element.get().style.color=t})),fc=["red","blue","green","purple","orange"],bc=Fn((()=>{let t="red",e="green",n="green",o=!1;return pr((r=>[{cycleColorParent:t,cycleColorChild:e,cycleColorChild2:n,hideShowCycles:o}]=r({cycleColorParent:t,cycleColorChild:e,cycleColorChild2:n,hideShowCycles:o}))),Ar.dom(mc.allStrings6857929[7],!o,(t=>o=!o),!o&&Ar.dom(mc.allStrings6857929[8],(e=>t=e.target.value),fc.map((e=>Ar.dom(mc.allStrings6857929[9],e,t===e,e).key(e))),(t=>e=t.target.value),fc.map((t=>Ar.dom(mc.allStrings6857929[10],t,e===t,t).key(t))),(t=>n=t.target.value),fc.map((t=>Ar.dom(mc.allStrings6857929[11],t,n===t,t).key(t))),nc(),dc(t),pc(e),hc(n),gc(n)))})),mc={allStrings6857929:[[{nn:"text",tc:"\x3c!--providerDebug.js--\x3e"},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.test sugar-daddy-77"}]},{nn:"text",tc:":"},{nn:"text",v:0}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"provider.upper?.test"}]},{nn:"text",tc:":"},{nn:"text",v:1}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"providerClass.tagDebug"}]},{nn:"text",tc:":"},{nn:"text",v:2}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-0-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-0-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-0-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"🌹 "},{nn:"span",at:[["id","increase-provider-upper-🌹-0-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-0-button"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:10}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-0-display"]],ch:[{nn:"text",v:11}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-0-button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in parent "},{nn:"text",v:13}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-0-display"]],ch:[{nn:"text",v:14}]}]}]},{nn:"button",at:[["click",{tagJsVar:15},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:16}]}]},{nn:"hr"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"text",v:17}]},{nn:"hr"},{nn:"text",tc:"renderCount outer:"},{nn:"span",at:[["name","render_count_outer"]],ch:[{nn:"text",v:18}]},{nn:"text",v:19},{nn:"text",tc:"\n\n    "},{nn:"text",v:20},{nn:"text",tc:"\n\n    "},{nn:"text",v:21},{nn:"text",tc:"\n  "}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-0-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-0-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",tc:"statue:"},{nn:"text",v:3}]},{nn:"text",v:4},{nn:"hr"},{nn:"text",v:5},{nn:"text",tc:"\n"}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-1-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-switch-🌹-2-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🌹 increase switch.provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-switch-🌹-2-display"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@child--\x3e"},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍌-1-button"],["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"🍌 increase provider.test "},{nn:"text",v:1}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","increase-provider-🍌-1-display"]],ch:[{nn:"text",v:2}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-upper-🌹-1-button"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"🌹 increase upper.provider.test "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"🌹"},{nn:"span",at:[["id","increase-provider-upper-🌹-1-display"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-arrow-provider-⚡️-1-button"],["click",{tagJsVar:6},null]],ch:[{nn:"text",tc:"⚡️ increase upper.provider.test "},{nn:"text",v:7}]},{nn:"span",ch:[{nn:"text",tc:"⚡️"},{nn:"span",at:[["id","increase-arrow-provider-⚡️-1-display"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","subject-increase-counter"],["click",{tagJsVar:9},null]],ch:[{nn:"text",tc:"🍌 subject increase:"}]},{nn:"span",ch:[{nn:"text",tc:"🍌 "},{nn:"span",at:[["id","subject-counter-display"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-provider-🍀-1-button"],["click",{tagJsVar:11},null]],ch:[{nn:"text",tc:"🍀 increase provider class "},{nn:"text",v:12}]},{nn:"span",ch:[{nn:"text",tc:"🍀 "},{nn:"span",at:[["id","increase-provider-🍀-1-display"]],ch:[{nn:"text",v:13}]}]}]},{nn:"div",ch:[{nn:"button",at:[["id","increase-prop-🐷-1-button"],["click",{tagJsVar:14},null]],ch:[{nn:"text",tc:"🐷 ++propCounter in child "},{nn:"text",v:15}]},{nn:"span",ch:[{nn:"text",tc:"🐷 "},{nn:"span",at:[["id","increase-prop-🐷-1-display"]],ch:[{nn:"text",v:16}]}]}]},{nn:"button",at:[["click",{tagJsVar:17},null]],ch:[{nn:"text",tc:"💬 toggle dialog "},{nn:"text",v:18}]},{nn:"button",at:[["click",{tagJsVar:19},null]],ch:[{nn:"text",v:20},{nn:"text",tc:" provider as props"}]},{nn:"text",v:21},{nn:"div",ch:[{nn:"text",tc:"renderCount inner:"},{nn:"text",v:22},{nn:"text",tc:"\n      "},{nn:"text",v:23}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"hr"},{nn:"h3",ch:[{nn:"text",tc:"Provider as Props"}]},{nn:"text",v:1}]}],[{nn:"text",tc:"\x3c!--providerDebug.js@TestProviderAsProps--\x3e"},{nn:"textarea",at:[["style","width:100%;font-size:0.6em"],["wrap","off"],["rows","20"]],ch:[{nn:"text",v:0}]}],[{nn:"fieldset",at:[["id","in-cycle-context-comms"]],ch:[{nn:"legend",ch:[{nn:"label",ch:[{nn:"input",at:[["type","checkbox"],["checked",{tagJsVar:0},null],["change",{tagJsVar:1},null]]},{nn:"text",tc:"In-Cycle Context Communication"}]}]},{nn:"text",v:2}]}],[{nn:"div",at:[["style","margin-bottom: 1em"],["id","fieldset-body-wrap"]],ch:[{nn:"label",ch:[{nn:"text",tc:"Parent Color: "},{nn:"select",at:[["id","parent-color-select"],["change",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color: "},{nn:"select",at:[["id","child-color-select"],["change",{tagJsVar:2},null]],ch:[{nn:"text",v:3}]}]},{nn:"label",at:[["style","margin-left: 1em"]],ch:[{nn:"text",tc:"Child Color2: "},{nn:"select",at:[["id","child-color-select-2"],["change",{tagJsVar:4},null]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",at:[["id","drag-drop-wrap"]],ch:[{nn:"h3",ch:[{nn:"text",tc:"Drag Selection Testing"}]},{nn:"text",v:6}]},{nn:"div",at:[["id","in-cycle-parent"],[{tagJsVar:7}]],ch:[{nn:"div",at:[["id","in-cycle-child"],[{tagJsVar:8}]]},{nn:"div",at:[["id","in-cycle-child-2"]],ch:[{nn:"text",tc:"wonderful too\n            "},{nn:"text",v:9},{nn:"span",ch:[{nn:"text",tc:"part 2"},{nn:"text",v:10}]}]}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}],[{nn:"option",at:[["value",{tagJsVar:0},null],["selected",{tagJsVar:1},null]],ch:[{nn:"text",v:2}]}]]},yc=Fn((()=>{let t=!0;return pr((e=>[t]=e(t))),Ar.dom(xc.allStrings52782[0],5,5,t&&Ar.dom(xc.allStrings52782[1]),t&&Ar.dom(xc.allStrings52782[2]))})),xc={allStrings52782:[[{nn:"div",at:[["style","max-height: 800px;overflow-y: scroll;"]],ch:[{nn:"table",at:[["cellpadding",{tagJsVar:0},null],["cellspacing",{tagJsVar:1},null],["border","1"]],ch:[{nn:"thead",at:[["style","position: sticky;top: 0;"]],ch:[{nn:"tr",ch:[{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"th",ch:[{nn:"text",tc:"hello"}]},{nn:"text",v:2}]}]},{nn:"tbody",ch:[{nn:"tr",ch:[{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"td",ch:[{nn:"text",tc:"world"}]},{nn:"text",v:3}]}]}]}]}],[{nn:"td",ch:[{nn:"text",tc:"hello 2 thead cell"}]}],[{nn:"td",ch:[{nn:"text",tc:"world 2 tbody cell"}]}]]},vc=Fn.deepPropWatch((()=>(t=0,e=0,n=0,o=0,r=!1,s=0,a=0,i=pr((i=>[{stateNum:t,stateNumChangeCount:e,slowChangeCount:n,subjectChangeCount:o,truthChange:r,truthChangeCount:s,truthSubChangeCount:a}]=i({stateNum:t,stateNumChangeCount:e,slowChangeCount:n,subjectChangeCount:o,truthChange:r,truthChangeCount:s,truthSubChangeCount:a}))),c=ir([t],(()=>++e)),l=ir.noInit([t],xr((()=>++n))),u=ir.asSubject([t],xr((()=>++o))),d=ir.truthy([r],xr((()=>++s))),p=ir.truthy.asSubject([r],xr((t=>++a))))=>Ar.dom(wc.allStrings2187613[0],t,(()=>++t),e,n,l,o,rn(u),r?"true":"false",d||"false",s,rn(p),a,(()=>r=!r),r?"true":"false"))),wc={allStrings2187613:[[{nn:"text",tc:"\x3c!-- watchTesting.tag.ts --\x3estateNum:"},{nn:"span",at:[["id","watch-testing-num-display"]],ch:[{nn:"text",v:0}]},{nn:"button",at:[["id","watch-testing-num-button"],["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"++ stateNum"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"stateNumChangeCount:"},{nn:"span",at:[["id","stateNumChangeCount"]],ch:[{nn:"text",v:2}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄 slowChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄-slowChangeCount"]],ch:[{nn:"text",v:3}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchPropNumSlow:"},{nn:"span",at:[["id","🍄-watchPropNumSlow"]],ch:[{nn:"text",v:4}]}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🍄‍🟫 subjectChangeCount"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🍄‍🟫-subjectChangeCount"]],ch:[{nn:"text",v:5}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(watchPropNumSubject:"},{nn:"span",at:[["id","🍄‍🟫-watchPropNumSubject"]],ch:[{nn:"text",v:6}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"🦷 truthChange"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"span",at:[["id","🦷-truthChange"]],ch:[{nn:"text",v:7}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"simple truth"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruth:"},{nn:"span",at:[["id","🦷-watchTruth"]],ch:[{nn:"text",v:8}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthChangeCount:"},{nn:"span",at:[["id","🦷-truthChangeCount"]],ch:[{nn:"text",v:9}]},{nn:"text",tc:")"}]}]}]},{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"truth subject"}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"watchTruthAsSub:"},{nn:"span",at:[["id","🦷-watchTruthAsSub"]],ch:[{nn:"text",v:10}]}]}]},{nn:"div",ch:[{nn:"small",ch:[{nn:"text",tc:"(truthSubChangeCount:"},{nn:"span",at:[["id","🦷-truthSubChangeCount"]],ch:[{nn:"text",v:11}]},{nn:"text",tc:")"}]}]}]},{nn:"button",at:[["id","🦷-truthChange-button"],["type","button"],["click",{tagJsVar:12},null]],ch:[{nn:"text",tc:"🦷 toggle to "},{nn:"text",v:13}]}]}]]},Cc=Fn((()=>{const t=new Tt,e=new sr("purple"),n=new sr("green");let o=!1;return Ss({style:"flex-grow:1"},Ts("subscribe attributes",(()=>`- shouldHideAttributes: ${o}`)),(()=>o?"":_s({style:"display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em",id:"subscribe-attributes-wrap"},_s({style:"display:flex;flex-wrap:wrap;gap:1em"},Ss({style:"flex-grow:1"},Ts("subscribe special attribute"),Js({id:"subscribe-style-dot-bg-color-changer",style:nn(t,"red",(t=>({backgroundColor:t})))},"background color changer")),Ss({style:"flex-grow:1"},Ts("subscribe style attribute"),Js({id:"subscribe-style-bg-color",style:nn(t,"red",(t=>`background-color:${t}`))},"subscribe bg color")),Ss({style:"flex-grow:1"},Ts("sometimes subscribe style attribute"),Js({id:"multiple-subscribe-bg-color",style:()=>"blue"===t.value&&rn(e,(t=>"background-color:"+t))||"red"===t.value&&rn(n,(t=>"background-color:"+t))||"background-color:pink;"},"multiple subscribe bg color"))))),gs({id:"toggle-color-btn",type:"button",onClick:()=>{const e=t.value;t.next("red"===e?"blue":"red")}},"Toggle Color (",rn(t),")"),gs({id:"toggle-attributes-btn",type:"button",onClick:()=>{o=!o}},(()=>o?"Show":"Hide")," Attributes"),gs({onClick:()=>t.next(""),id:"clear-color-btn",type:"button"},"Clear Color"),"subscriptions: ",Js({id:"subscriptions-count"},nn(Tt.globalSubCount$,Tt.globalSubCount$.value)))})),kc=Fn((()=>{let t="a",e=!0;return _s(ms({id:"attr-input-abc",placeholder:"a b or c",onChange:e=>t=e.target.value}),fs({onChange:e=>t=e.target.value,id:"select-sample-drop-down"},["a","b","c"].map((e=>bs({value:e,selected:()=>e==t},e," - ",(n=>e==t?"true":"false"))))),fs({onChange:e=>t=e.target.value,id:"select-sample-drop-down-clone"},["a","b","c"].map((e=>bs({value:e,selected:()=>e==t},e," - ",e==t?"true":"false")))),ys,ws("Special Attributes"),_s(ms({type:"checkbox",id:"toggle-backgrounds",checked:()=>e&&"checked",onChange:t=>e=t.target.checked}),(()=>" - toggle backgrounds:"+(e?"true":"false"))),_s({style:"display: flex;flex-wrap:wrap;gap:1em"},Cs(ks(_s({id:"attr-style-strings",style:t=>({backgroundColor:e?"orange":"",color:e?"black":""})},"style.background-color=${'orange'}")),ks(_s({id:"attr-class-booleans",class:()=>({"background-orange":!!e,"text-black":!!e})},(()=>`class.background-orange=${e}`))),ks(_s({id:"attr-inline-class",class:()=>e?"background-orange text-black":""},"class=${'background-orange text-black'}")),ks(_s({id:"attr-dynamic-inline-class",class:()=>"text-white"+(e?" background-orange":"")},"class=${'background-orange'} but always white")))),Ss({style:"margin-top: 1em"},Ts("style object attribute"),_s({id:"style-object-test",style:t=>({backgroundColor:e?"orange":"lightgrey",padding:"10px",border:"2px solid black",borderRadius:e?"8px":"4px",boxShadow:e?"2px 2px 4px rgba(0,0,0,0.3)":"none"})},"Style object test"),_s({id:"style-set-property-test",style:t=>({"background-color":e?"red":"blue",color:"white",padding:"5px","margin-top":"10px"})},"style property test")),(t=>Cc()))})),_c=Fn((()=>{let t=0,e=!0;return _s(vs("Basic Component"),Bs((e=>`Counter: ${t}`)),Bs((t=>"Render Count: 1")),gs({onClick:()=>t++},"Increment Counter"),gs({onClick:()=>e=!e},(t=>`Toggle Div (${e?"Hide":"Show"})`)),(n=>e&&Sc(t)))})),Sc=Fn((t=>{let e=0,n="red";return Sc.updates((e=>[t]=e)),_s((()=>`color: ${n}`),fs({onChange:t=>n=t.target.value},bs({value:"red"},"red"),bs({value:"green"},"green")),(()=>Tc(t)),Js({style:t=>"color:"+n},"hello my span world"),_s({style:t=>"color:"+n},"hello my div world"),gs({onClick:()=>++e},"click me"),_s((t=>`click counts ${e}`)),_s((e=>`parent counter: ${t}`)),_s((n=>`combined counters: ${e+t}`)))})),Tc=Fn((t=>{Tc.updates((e=>[t]=e));let e=0;return[_s("hello array bolt 0"),_s("hello array bolt 1"),_s("innerCounter: ",(t=>e)),_s((()=>`parent counter: ${t}`)),gs({onClick:()=>++e},"inner counter")]}));var Bc=function(t,e){return Bc=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},Bc(t,e)};function Vc(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}Bc(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function Jc(t,e,n,o){return new(n||(n=Promise))((function(r,s){function a(t){try{c(o.next(t))}catch(t){s(t)}}function i(t){try{c(o.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,i)}c((o=o.apply(t,e||[])).next())}))}function jc(t,e){var n,o,r,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=i(0),a.throw=i(1),a.return=i(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(s=0)),s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}Object.create;function Ic(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function Ec(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,s=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(o=s.next()).done;)a.push(o.value)}catch(t){r={error:t}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return a}function Lc(t,e,n){if(n||2===arguments.length)for(var o,r=0,s=e.length;r<s;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))}function Pc(t){return this instanceof Pc?(this.v=t,this):new Pc(t)}function Dc(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,r=n.apply(t,e||[]),s=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),a("next"),a("throw"),a("return",(function(t){return function(e){return Promise.resolve(e).then(t,l)}})),o[Symbol.asyncIterator]=function(){return this},o;function a(t,e){r[t]&&(o[t]=function(e){return new Promise((function(n,o){s.push([t,e,n,o])>1||i(t,e)}))},e&&(o[t]=e(o[t])))}function i(t,e){try{(n=r[t](e)).value instanceof Pc?Promise.resolve(n.value.v).then(c,l):u(s[0][2],n)}catch(t){u(s[0][3],t)}var n}function c(t){i("next",t)}function l(t){i("throw",t)}function u(t,e){t(e),s.shift(),s.length&&i(s[0][0],s[0][1])}}function Oc(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=Ic(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(o,r){(function(t,e,n,o){Promise.resolve(o).then((function(e){t({value:e,done:n})}),e)})(o,r,(e=t[n](e)).done,e.value)}))}}}Object.create;"function"==typeof SuppressedError&&SuppressedError;function Nc(t){return"function"==typeof t}function $c(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var Ac=$c((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function Hc(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var Mc=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,o,r;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var a=Ic(s),i=a.next();!i.done;i=a.next()){i.value.remove(this)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}else s.remove(this);var c=this.initialTeardown;if(Nc(c))try{c()}catch(t){r=t instanceof Ac?t.errors:[t]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var u=Ic(l),d=u.next();!d.done;d=u.next()){var p=d.value;try{Wc(p)}catch(t){r=null!=r?r:[],t instanceof Ac?r=Lc(Lc([],Ec(r)),Ec(t.errors)):r.push(t)}}}catch(t){n={error:t}}finally{try{d&&!d.done&&(o=u.return)&&o.call(u)}finally{if(n)throw n.error}}}if(r)throw new Ac(r)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)Wc(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&Hc(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&Hc(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=function(){var e=new t;return e.closed=!0,e}(),t}(),Rc=Mc.EMPTY;function Uc(t){return t instanceof Mc||t&&"closed"in t&&Nc(t.remove)&&Nc(t.add)&&Nc(t.unsubscribe)}function Wc(t){Nc(t)?t():t.unsubscribe()}var zc={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},Fc={setTimeout:function(t,e){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var r=Fc.delegate;return(null==r?void 0:r.setTimeout)?r.setTimeout.apply(r,Lc([t,e],Ec(n))):setTimeout.apply(void 0,Lc([t,e],Ec(n)))},clearTimeout:function(t){var e=Fc.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function Yc(t){Fc.setTimeout((function(){var e=zc.onUnhandledError;if(!e)throw t;e(t)}))}function Xc(){}var qc=Gc("C",void 0,void 0);function Gc(t,e,n){return{kind:t,value:e,error:n}}var Kc=null;function Qc(t){if(zc.useDeprecatedSynchronousErrorHandling){var e=!Kc;if(e&&(Kc={errorThrown:!1,error:null}),t(),e){var n=Kc,o=n.errorThrown,r=n.error;if(Kc=null,o)throw r}}else t()}var Zc=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,Uc(e)&&e.add(n)):n.destination=al,n}return Vc(e,t),e.create=function(t,e,n){return new ol(t,e,n)},e.prototype.next=function(t){this.isStopped?sl(function(t){return Gc("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?sl(Gc("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?sl(qc,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(Mc),tl=Function.prototype.bind;function el(t,e){return tl.call(t,e)}var nl=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){rl(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){rl(t)}else rl(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){rl(t)}},t}(),ol=function(t){function e(e,n,o){var r,s,a=t.call(this)||this;Nc(e)||!e?r={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=o?o:void 0}:a&&zc.useDeprecatedNextContext?((s=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},r={next:e.next&&el(e.next,s),error:e.error&&el(e.error,s),complete:e.complete&&el(e.complete,s)}):r=e;return a.destination=new nl(r),a}return Vc(e,t),e}(Zc);function rl(t){var e;zc.useDeprecatedSynchronousErrorHandling?(e=t,zc.useDeprecatedSynchronousErrorHandling&&Kc&&(Kc.errorThrown=!0,Kc.error=e)):Yc(t)}function sl(t,e){var n=zc.onStoppedNotification;n&&Fc.setTimeout((function(){return n(t,e)}))}var al={closed:!0,next:Xc,error:function(t){throw t},complete:Xc},il="function"==typeof Symbol&&Symbol.observable||"@@observable";function cl(t){return t}function ll(t){return 0===t.length?cl:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var ul=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var o,r=this,s=(o=t)&&o instanceof Zc||function(t){return t&&Nc(t.next)&&Nc(t.error)&&Nc(t.complete)}(o)&&Uc(o)?t:new ol(t,e,n);return Qc((function(){var t=r,e=t.operator,n=t.source;s.add(e?e.call(s,n):n?r._subscribe(s):r._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=dl(e))((function(e,o){var r=new ol({next:function(e){try{t(e)}catch(t){o(t),r.unsubscribe()}},error:o,complete:e});n.subscribe(r)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[il]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return ll(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=dl(t))((function(t,n){var o;e.subscribe((function(t){return o=t}),(function(t){return n(t)}),(function(){return t(o)}))}))},t.create=function(e){return new t(e)},t}();function dl(t){var e;return null!==(e=null!=t?t:zc.Promise)&&void 0!==e?e:Promise}var pl=$c((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),hl=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return Vc(e,t),e.prototype.lift=function(t){var e=new gl(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new pl},e.prototype.next=function(t){var e=this;Qc((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var r=Ic(e.currentObservers),s=r.next();!s.done;s=r.next()){s.value.next(t)}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;Qc((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;Qc((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=this,o=n.hasError,r=n.isStopped,s=n.observers;return o||r?Rc:(this.currentObservers=null,s.push(t),new Mc((function(){e.currentObservers=null,Hc(s,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,o=e.thrownError,r=e.isStopped;n?t.error(o):r&&t.complete()},e.prototype.asObservable=function(){var t=new ul;return t.source=this,t},e.create=function(t,e){return new gl(t,e)},e}(ul),gl=function(t){function e(e,n){var o=t.call(this)||this;return o.destination=e,o.source=n,o}return Vc(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:Rc},e}(hl);function fl(t){return function(e){if(function(t){return Nc(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function bl(t,e,n,o,r){return new ml(t,e,n,o,r)}var ml=function(t){function e(e,n,o,r,s,a){var i=t.call(this,e)||this;return i.onFinalize=s,i.shouldUnsubscribe=a,i._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,i._error=r?function(t){try{r(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,i._complete=o?function(){try{o()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,i}return Vc(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(Zc);var yl=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function xl(t){return Nc(null==t?void 0:t.then)}function vl(t){return Nc(t[il])}function wl(t){return Symbol.asyncIterator&&Nc(null==t?void 0:t[Symbol.asyncIterator])}function Cl(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var kl="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function _l(t){return Nc(null==t?void 0:t[kl])}function Sl(t){return Dc(this,arguments,(function(){var e,n,o;return jc(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,Pc(e.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,Pc(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,Pc(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function Tl(t){return Nc(null==t?void 0:t.getReader)}function Bl(t){if(t instanceof ul)return t;if(null!=t){if(vl(t))return o=t,new ul((function(t){var e=o[il]();if(Nc(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(yl(t))return function(t){return new ul((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}(t);if(xl(t))return n=t,new ul((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,Yc)}));if(wl(t))return Vl(t);if(_l(t))return e=t,new ul((function(t){var n,o;try{for(var r=Ic(e),s=r.next();!s.done;s=r.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}t.complete()}));if(Tl(t))return Vl(Sl(t))}var e,n,o;throw Cl(t)}function Vl(t){return new ul((function(e){(function(t,e){var n,o,r,s;return Jc(this,void 0,void 0,(function(){var a,i;return jc(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),n=Oc(t),c.label=1;case 1:return[4,n.next()];case 2:if((o=c.sent()).done)return[3,4];if(a=o.value,e.next(a),e.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return i=c.sent(),r={error:i},[3,11];case 6:return c.trys.push([6,,9,10]),o&&!o.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(r)throw r.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(t,e).catch((function(t){return e.error(t)}))}))}function Jl(t,e,n,o,r){void 0===o&&(o=0),void 0===r&&(r=!1);var s=e.schedule((function(){n(),r?t.add(this.schedule(null,o)):this.unsubscribe()}),o);if(t.add(s),!r)return s}function jl(t,e,n){return void 0===n&&(n=1/0),Nc(e)?jl((function(n,o){return function(t,e){return fl((function(n,o){var r=0;n.subscribe(bl(o,(function(n){o.next(t.call(e,n,r++))})))}))}((function(t,r){return e(n,t,o,r)}))(Bl(t(n,o)))}),n):("number"==typeof e&&(n=e),fl((function(e,o){return function(t,e,n,o,r,s,a,i){var c=[],l=0,u=0,d=!1,p=function(){!d||c.length||l||e.complete()},h=function(t){return l<o?g(t):c.push(t)},g=function(t){s&&e.next(t),l++;var i=!1;Bl(n(t,u++)).subscribe(bl(e,(function(t){null==r||r(t),s?h(t):e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(var t=function(){var t=c.shift();a?Jl(e,a,(function(){return g(t)})):g(t)};c.length&&l<o;)t();p()}catch(t){e.error(t)}})))};return t.subscribe(bl(e,h,(function(){d=!0,p()}))),function(){null==i||i()}}(e,o,t,n)})))}function Il(){return void 0===(t=1)&&(t=1/0),jl(cl,t);var t}function El(t){return t[t.length-1]}function Ll(t){return(e=El(t))&&Nc(e.schedule)?t.pop():void 0;var e}function Pl(t,e){return void 0===e&&(e=0),fl((function(n,o){n.subscribe(bl(o,(function(n){return Jl(o,t,(function(){return o.next(n)}),e)}),(function(){return Jl(o,t,(function(){return o.complete()}),e)}),(function(n){return Jl(o,t,(function(){return o.error(n)}),e)})))}))}function Dl(t,e){return void 0===e&&(e=0),fl((function(n,o){o.add(t.schedule((function(){return n.subscribe(o)}),e))}))}function Ol(t,e){if(!t)throw new Error("Iterable cannot be null");return new ul((function(n){Jl(n,e,(function(){var o=t[Symbol.asyncIterator]();Jl(n,e,(function(){o.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Nl(t,e){if(null!=t){if(vl(t))return function(t,e){return Bl(t).pipe(Dl(e),Pl(e))}(t,e);if(yl(t))return function(t,e){return new ul((function(n){var o=0;return e.schedule((function(){o===t.length?n.complete():(n.next(t[o++]),n.closed||this.schedule())}))}))}(t,e);if(xl(t))return function(t,e){return Bl(t).pipe(Dl(e),Pl(e))}(t,e);if(wl(t))return Ol(t,e);if(_l(t))return function(t,e){return new ul((function(n){var o;return Jl(n,e,(function(){o=t[kl](),Jl(n,e,(function(){var t,e,r;try{e=(t=o.next()).value,r=t.done}catch(t){return void n.error(t)}r?n.complete():n.next(e)}),0,!0)})),function(){return Nc(null==o?void 0:o.return)&&o.return()}}))}(t,e);if(Tl(t))return function(t,e){return Ol(Sl(t),e)}(t,e)}throw Cl(t)}function $l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Il()(function(t,e){return e?Nl(t,e):Bl(t)}(t,Ll(t)))}function Al(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Ll(t);return fl((function(e,o){(n?$l(t,e,n):$l(t,e)).subscribe(o)}))}const Hl=Fn((()=>{const t=Pn((()=>new Tt)),e=Pn((()=>new sr(3))),n=Pn((()=>new sr(["a","b","c"]))),o=Pn((()=>new sr(0))),r=Pn((()=>new sr(1)));return Ar.dom(zl.allStrings678527[0],rn(t),rn(n,(t=>t.map((t=>Ar.dom(zl.allStrings678527[1],t).key(t))))),rn(n,(t=>t.map((t=>Ar.dom(zl.allStrings678527[2],t,t).key(t))))),nn(t,-1),rn(o),rn(o,(()=>55)),Wl(),rn(kt([o,r]).pipe((t=>t[1]))),rn(kt([o,r]).pipe(function(t){return(e,n)=>{n.setHandler((()=>{})),t(e).then((t=>n.next(t)))}}((t=>Promise.resolve(Ar.dom(zl.allStrings678527[3])))))),Ml({sub0:t,sub1:e}))})),Ml=Fn((({sub0:t,sub1:e})=>{let n=!1;const o=Pn((()=>new hl));return pr((t=>[n]=t(n))),Ar.dom(zl.allStrings678527[4],rn(t),(()=>t.next((t.value||0)+1)),(()=>o.next(t.value=(t.value||0)+1)),(()=>n=!n),n?"show":"hide",n,n&&rn(t),n&&rn(t,Rl),n&&rn(t,Ul),rn(e,Ul),rn(o,Ul),rn(o.pipe(Al(33)),Ul),rn(o.pipe(Al(void 0)),(t=>Ul(t))),rn(o,(t=>Ul(t))))})),Rl=t=>Ar.dom(zl.allStrings678527[5],t),Ul=Fn((t=>Ar.dom(zl.allStrings678527[6],t))),Wl=Fn((()=>{let t=!0,e=0,n=0;return pr((o=>[{hideShow:t,destroyCount:e,clickCounter:n}]=o({hideShow:t,destroyCount:e,clickCounter:n}))),Ar.dom(zl.allStrings678527[7],t&&Ar.dom(zl.allStrings678527[8],vn((()=>Fn.element.get().innerHTML=Date.now().toString()),{onDestroy:()=>++e}),(()=>++n),n),(()=>t=!t),e)})),zl={allStrings678527:[[{nn:"fieldset",ch:[{nn:"legend",ch:[{nn:"text",tc:"Subscribe()"}]},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em;font-size:0.8em"]],ch:[{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0"]],ch:[{nn:"text",v:0}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe map"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub-map"]],ch:[{nn:"text",v:1}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe select"}]},{nn:"select",ch:[{nn:"option",at:[["value",""]],ch:[{nn:"text",tc:"select option"}]},{nn:"text",v:2}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"subscribe with default"}]},{nn:"text",tc:"0 === "},{nn:"span",at:[["id","content-subscribe-sub0-with"]],ch:[{nn:"text",v:3}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"value subject"}]},{nn:"text",tc:"0 === "},{nn:"text",v:4}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"piped subject"}]},{nn:"span",at:[["id","content-subject-pipe-display0"]],ch:[{nn:"text",tc:"55"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-subject-pipe-display1"]],ch:[{nn:"text",v:5}]}]},{nn:"text",v:6},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest"}]},{nn:"span",at:[["id","content-combineLatest-pipe-display0"]],ch:[{nn:"text",tc:"1"}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipe-display1"]],ch:[{nn:"text",v:7}]}]},{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"combineLatest piped html"}]},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display0"]],ch:[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}]},{nn:"text",tc:"&nbsp;===&nbsp;"},{nn:"span",at:[["id","content-combineLatest-pipeHtml-display1"]],ch:[{nn:"text",v:8}]}]}]}]}]},{nn:"fieldset",at:[["id","noParentTagFieldset"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Pass subscription"}]},{nn:"text",v:9}]}],[{nn:"text",tc:"👉"},{nn:"strong",ch:[{nn:"text",v:0}]},{nn:"text",tc:"👈"}],[{nn:"option",at:[["value",{tagJsVar:0},null]],ch:[{nn:"text",v:1}]}],[{nn:"b",ch:[{nn:"text",tc:"bold 77"}]}],[{nn:"span",ch:[{nn:"text",tc:"sub-value:"},{nn:"span",at:[["id","passed-in-output"]],ch:[{nn:"text",v:0}]}]},{nn:"button",at:[["id","passed-in-sub-increase"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"sub0 increase"}]},{nn:"button",at:[["id","passed-in-sub-next"],["click",{tagJsVar:2},null]],ch:[{nn:"text",tc:"ob increase"}]},{nn:"button",at:[["id","passed-in-sub-hide-show"],["click",{tagJsVar:3},null]],ch:[{nn:"text",tc:"hide/show on/off = "},{nn:"text",v:4}]},{nn:"span",ch:[{nn:"text",tc:"onOffValue:"},{nn:"span",at:[["id","passed-in-sub-hideShow-value"]],ch:[{nn:"text",v:5}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 0"}]},{nn:"div",at:[["id","passed-in-sub-ex0"]],ch:[{nn:"text",tc:"0||"},{nn:"text",v:6},{nn:"text",tc:"||0"}]}]},{nn:"div",ch:[{nn:"strong",ch:[{nn:"text",tc:"test 1"}]},{nn:"div",at:[["id","passed-in-sub-ex1"]],ch:[{nn:"text",tc:"1||"},{nn:"text",v:7},{nn:"text",tc:"||1"}]}]},{nn:"div",at:[["id","passed-in-sub-ex2"]],ch:[{nn:"text",tc:"2||"},{nn:"text",v:8},{nn:"text",tc:"||2"}]},{nn:"div",at:[["id","passed-in-sub-ex3"]],ch:[{nn:"text",tc:"3||"},{nn:"text",v:9},{nn:"text",tc:"||3"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"4||"},{nn:"text",v:10},{nn:"text",tc:"||4"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"5||"},{nn:"text",v:11},{nn:"text",tc:"||5"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"6||"},{nn:"text",v:12},{nn:"text",tc:"||6"}]},{nn:"div",at:[["id","passed-in-sub-ex4"]],ch:[{nn:"text",tc:"7||"},{nn:"text",v:13},{nn:"text",tc:"||7"}]}],[{nn:"text",tc:"your fun number "},{nn:"text",v:0}],[{nn:"text",tc:"your tag number "},{nn:"text",v:0}],[{nn:"fieldset",at:[["style","flex-grow:1"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"host"}]},{nn:"text",v:0},{nn:"button",at:[["id","hostHideShow"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"div",ch:[{nn:"text",tc:"destroyCount: "},{nn:"span",at:[["id","hostDestroyCount"]],ch:[{nn:"text",v:2}]}]}]}],[{nn:"span",at:[["id","hostedContent"],[{tagJsVar:0}]]},{nn:"button",at:[["type","button"],["click",{tagJsVar:1},null]],ch:[{nn:"text",tc:"clickCounter:"},{nn:"text",v:2}]}]]},Fl=[{view:qa.Basic,tag:_c,emoji:"🔢"},{view:qa.OneRender,tag:Ua,emoji:"1️⃣"},{view:qa.Props,tag:Fi,emoji:"🧳"},{view:qa.WatchTesting,tag:vc,emoji:"⌚️"},{view:qa.TableDebug,tag:yc},{view:qa.ProviderDebug,tag:cc},{view:qa.TagSwitchDebug,tag:Di,emoji:"🔀"},{view:qa.Mirroring,tag:Mi,emoji:"🪞"},{view:qa.Arrays,tag:Ei,emoji:"⠇"},{view:qa.Content,tag:$a,emoji:"📰",debug:!0},{view:qa.Child,tag:_i,emoji:"👶"},{view:qa.Destroys,tag:Vi,emoji:"🗑️"},{view:qa.FunInPropsTag,tag:li,emoji:"🤡"},{view:qa.AttributeDebug,tag:kc,emoji:"🏹"},{view:qa.Todo,tag:Fn(yi),emoji:"✏️"},{view:qa.Counters,tag:zs,emoji:"💯"},{view:qa.Subscriptions,tag:Hl,emoji:"📡"}],Yl=Fn(((t,e=Ga.views)=>{const n=Fl.filter((t=>{if(e.includes(t.view))return!0})).map((({view:e,title:n,emoji:o,tag:r,...s})=>({title:n||e,output:e===qa.Counters?r({appCounterSubject:t}):r(),view:e,emoji:o,...s}))).sort(((t,e)=>t.view.localeCompare(e.view)));return _s({style:"display:flex;flex-wrap:wrap;gap:1em"},(t=>n.map((t=>Xl(t).key(t.view)))))})),Xl=t=>{const{emoji:e,view:n,title:o,output:r,debug:s}=t;return _s({style:"flex:2 2 20em"},Vs({id:n},"\x3c!-- ⚓️ --\x3e"),Ss(Ts(e," ",o),_s({id:"many-section-contents","style.display":e=>t.contentHide?"none":""},r),_s({style:"display:flex;"},gs({style:"flex:1;",id:"section_"+t.view,onClick:()=>t.contentHide=!t.contentHide,"style.background-color":e=>t.contentHide?"grey":""},"👁️ hide/show"))),_s({style:"font-size:0.6em;text-align:right;"},Vs({href:"#top"},"⏫")))},ql=3e3,Gl=6e3,Kl=Fn((()=>{let t,e,n=0,o=0,r=0;pr((s=>[{intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r}]=s({intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r})));const s=wr(),a=()=>++n,i=()=>{console.info("🟢 interval test 0 started..."),r=0,e=setInterval(s((()=>{r+=500,r>=ql&&(r=0)})),500),console.info("▶️ interval started"),t=setInterval(s((()=>{a()})),ql)},c=()=>{clearInterval(t),clearInterval(e),t=void 0,e=void 0,console.info("🛑 interval test 0 stopped")};return Dn(i),$n(c),++o,Ar.dom(Zl.allStrings838008[0],ql,t,a,n,o,ql,r,r,(()=>{t||e?c():i()}),t||e?"red":"green",(()=>setTimeout(s((()=>{r+=200})),1e3)))})),Ql=Fn((()=>{let t,e,n=0,o=0,r=0;pr((s=>[{intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r}]=s({intervalCount:n,intervalId:t,intervalId2:e,renderCounter:o,currentTime:r})));const s=wr(),a=()=>++n;const i=()=>{clearInterval(t),clearInterval(e),t=void 0,e=void 0,console.info("🔴 interval 1 stopped")};function c(){if(t)return i();console.info("🟢 interval test 1 started..."),r=0,e=setInterval(s((()=>{r+=500,r>=Gl&&(r=0)})),500),t=setInterval(s((()=>{a(),console.info("slow interval ran")})),Gl)}return Dn(c),$n(i),++o,Ar.dom(Zl.allStrings838008[1],Gl,t,a,n,o,Gl,r,r,c,t?"red":"green")})),Zl={allStrings838008:[[{nn:"text",tc:"\x3c!--intervalDebug.js--\x3e"},{nn:"div",ch:[{nn:"text",tc:"interval type 1 at "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:10},null]],ch:[{nn:"text",tc:"delay increase currentTime"}]}],[{nn:"div",ch:[{nn:"text",tc:"interval type 2 with "},{nn:"text",v:0},{nn:"text",tc:"ms"}]},{nn:"text",tc:"intervalId: "},{nn:"text",v:1},{nn:"button",at:[["type","button"],["click",{tagJsVar:2},null]],ch:[{nn:"text",v:3},{nn:"text",tc:":"},{nn:"text",v:4}]},{nn:"input",at:[["type","range"],["min","0"],["max",{tagJsVar:5},null],["step","1"],["value",{tagJsVar:6},null]]},{nn:"div",ch:[{nn:"text",tc:"--"},{nn:"text",v:7},{nn:"text",tc:"--"}]},{nn:"button",at:[["type","button"],["click",{tagJsVar:8},null],["style.background-color",{tagJsVar:9},"style"]],ch:[{nn:"text",tc:"start/stop"}]}]]},tu=Fn((()=>{let t="tagJsDebug.js",e=!1,n=0;return pr((o=>[{_firstState:t,showIntervals:e,renderCount:n}]=o({_firstState:t,showIntervals:e,renderCount:n}))),++n,Ar.dom(eu.allStrings77500[0],(()=>e=!e),e&&Ar.dom(eu.allStrings77500[1],Da(),Kl(),Ql()))})),eu={allStrings77500:[[{nn:"text",tc:"\x3c!-- tagDebug.js --\x3e"},{nn:"div",at:[["style","display:flex;flex-wrap:wrap;gap:1em"]],ch:[{nn:"fieldset",at:[["style","flex:2 2 20em"],["id","debug-intervals"]],ch:[{nn:"legend",ch:[{nn:"text",tc:"Interval Testing"}]},{nn:"button",at:[["click",{tagJsVar:0},null]],ch:[{nn:"text",tc:"hide/show"}]},{nn:"text",v:1}]}]}],[{nn:"div",at:[[{tagJsVar:0}]],ch:[{nn:"div",ch:[{nn:"text",v:1}]},{nn:"hr"},{nn:"div",ch:[{nn:"text",v:2}]}]}]]};const nu=Fn((()=>{let t=!0,e=0,o=!1,r=null,s=new Tt(e),a="🟦";const i=wr(),c=i((t=>a=t?"✅":"❌"));function l(t=!0,e=(()=>{})){a="🟦";r=setTimeout((async()=>{console.debug("🏃 🏃‍♀️ 🏃‍♂️ Running tests... 🏃‍♂️‍➡️ 🏃‍♀️‍➡️ 🏃‍➡️x");const o=await async function(){console.log("🏃 runTests: Importing tests..."),await Promise.resolve().then(n.bind(n,566)),await Promise.resolve().then(n.bind(n,451)),Ga.views.includes(qa.Content)?(await Promise.resolve().then(n.bind(n,118)),await Promise.resolve().then(n.bind(n,835))):console.log("⏭️ Skipping content tests (unchecked)"),Ga.views.includes(qa.Subscriptions)?await Promise.resolve().then(n.bind(n,528)):console.log("⏭️ Skipping subscriptions tests (unchecked)"),Ga.views.includes(qa.Counters)?await Promise.resolve().then(n.bind(n,428)):console.log("⏭️ Skipping counters tests (unchecked)"),Ga.views.includes(qa.Props)?await Promise.resolve().then(n.bind(n,749)):console.log("⏭️ Skipping props tests (unchecked)"),Ga.views.includes(qa.TagSwitchDebug)?await Promise.resolve().then(n.bind(n,168)):console.log("⏭️ Skipping tagSwitch tests (unchecked)"),Ga.views.includes(qa.Arrays)?await Promise.resolve().then(n.bind(n,842)):console.log("⏭️ Skipping arrays tests (unchecked)"),Ga.views.includes(qa.Mirroring)?await Promise.resolve().then(n.bind(n,774)):console.log("⏭️ Skipping mirroring tests (unchecked)"),Ga.views.includes(qa.OneRender)?await Promise.resolve().then(n.bind(n,994)):console.log("⏭️ Skipping oneRender tests (unchecked)"),Ga.views.includes(qa.FunInPropsTag)?await Promise.resolve().then(n.bind(n,157)):console.log("⏭️ Skipping funInPropsTag tests (unchecked)"),Ga.views.includes(qa.AttributeDebug)?await Promise.resolve().then(n.bind(n,178)):console.log("⏭️ Skipping attributeDebug tests (unchecked)"),Ga.views.includes(qa.Destroys)?await Promise.resolve().then(n.bind(n,236)):console.log("⏭️ Skipping destroys tests (unchecked)"),Ga.views.includes(qa.WatchTesting)?await Promise.resolve().then(n.bind(n,702)):console.log("⏭️ Skipping watchTesting tests (unchecked)"),Ga.views.includes(qa.Child)?await Promise.resolve().then(n.bind(n,527)):console.log("⏭️ Skipping child tests (unchecked)"),Ga.views.includes(qa.ProviderDebug)?await Promise.resolve().then(n.bind(n,186)):console.log("⏭️ Skipping providerDebug tests (unchecked)"),Ga.views.includes(qa.Todo)?await Promise.resolve().then(n.bind(n,337)):console.log("⏭️ Skipping todo tests (unchecked)");try{const t=Date.now();if(window.mocha)await new Promise(((t,e)=>{window.mocha.run((n=>{n>0?e(new Error(`${n} test(s) failed`)):t(!0)}))}));else{const{executeBrowserTests:t}=await Promise.resolve().then(n.bind(n,995));if(!await t())throw new Error("Tests failed")}const e=Date.now()-t;return console.info(`✅ all tests passed in ${e}ms`),Fl.filter((t=>Ga.views.includes(t.view))).map((t=>{const e=document.getElementById("section_"+t.view);e&&e.click()})),!0}catch(t){return console.error("❌ tests failed: "+t.message,t),!1}}();e(o),t&&(o?alert("✅ all app tests passed"):alert("❌ tests failed. See console for more details"))}),2e3)}return $n((function(){clearTimeout(r),r=null})),console.info("1️⃣ app init should only run once"),l(!1,c),s.subscribe(i((t=>e=t))),_s(gs({onClick:()=>l(!0,c)},"run tests ",a),Ss(Ts("direct app tests"),gs({id:"app-counter-subject-button",onClick:()=>{s.next(e+1)}},"🍒 ++app subject"),gs({id:"app-counter-button",onClick:()=>++e},"🍒 ++app"),Js("🍒 ",Js({id:"app-counter-display"},(t=>e))),Js("🍒$<",Js({id:"app-counter-subject-display"},(t=>rn(s))),">"),Js("🍒$.value<",Js({id:"app-counter-subject-value-display"},(t=>s.value)),">"),gs({id:"toggle-test",onClick:()=>{o=!o}},"toggle test ",(t=>o))),_s({style:"display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"},(t=>Rs({name:"app",renderCount:1})),_s(Is("(subscription count: ",rn(Tt.globalSubCount$),")"))),Vs({name:"top",id:"top"}),Za(),_s({id:"tagDebug-fx-wrap"},gs({onClick:()=>t=!t},"toggle sections"),(e=>t&&Yl(s)),tu()))})),ou=Date.now();function ru(){return function(t=function(){const t=Ns(),e=t.route,n=t.location.pathname;return n&&"counters/"===e?"counters":n&&"content/"===e?"content":n.endsWith("isolated.html")?"isolated":n.includes("todo/www")?"todo":"home"}()){let e=!1;return pr((t=>[{showHide:e}]=t({showHide:e}))),console.info("🍒 Main app rendered",ou),ds("\x3c!--app.js--\x3e",xs({id:"h1-app"},"🏷️ TaggedJs - 4"),gs({type:"button",onClick:()=>e=!e},"show/hide ",(t=>e)),(t=>e&&au()),As(),(e=>"home"===t&&nu()),(e=>"counters"===t&&Gs()),(e=>"content"===t&&$a()))}}ru.isApp=!0;const su=Fn(ru),au=Fn((()=>ds(ys,_s({attr:Da({duration:".1s"})},"Hello animated world"),ys))),iu=Fn(((t,e)=>(Ga.autoTest&&Xa(!1,t,e),_s("auto testing ",ms({type:"checkbox",onChange:cu,checked:t=>Ga.autoTest}),gs({type:"button",onClick:()=>Xa(!0,t,e)},"run tests")))));function cu(){Ga.autoTest=Ga.autoTest=!Ga.autoTest,Ka()}const lu=Fn((()=>{let t=0;const e=new Tt(t);let n=!1;const o=$s().value.route.split("/").map((t=>t.trim())).filter((t=>t.length));let r;return o.length&&(r=o),console.info("1️⃣ app init should only run once"),e.subscribe((e=>t=e)),_s("\x3c!--isolatedApp.js--\x3e",xs({id:"app"},"🏷️ TaggedJs - isolated"),_s({style:"opacity:.6"},"(no HMR)"),_s({style:"opacity:.6"},"route: ",o),As(),_s(Ss(Ts("direct app tests"),gs({id:"app-counter-subject-button",onClick:()=>{e.next(t+1)}},"🍒 ++app subject"),gs({id:"app-counter-button",onClick:()=>{++t}},"🍒 ++app"),Js("🍒 ",Js({id:"app-counter-display"},t)),Js("🍒$<",Js({id:"app-counter-subject-display"},rn(e)),">"),Js("🍒$.value<",Js({id:"app-counter-subject-value-display"},(t=>e.value)),">"),gs({id:"toggle-test",onClick:()=>n=!n},"toggle test ",(t=>n),"true")),iu(r)),_s({style:"display:flex;flex-wrap:nowrap;gap:1em;justify-content: center;"},Rs({name:"app",renderCount:1}),_s(Is("(subscription count: ",rn(Tt.globalSubCount$),")"))),Za(r),_s({id:"tagDebug-fx-wrap"},Yl(e,r),Rs({renderCount:1,name:"isolatedApp"})))}));function uu(){const t=document.getElementsByTagName("app")[0],e=window.location.pathname.split("/").filter((t=>t)),n=e[0]?.toLowerCase();if(n&&["isolated.html","index-static.html"].includes(n)){const e=Date.now();zr(lu,t,{test:1});const n=Date.now()-e;return void console.info(`⏱️ isolated render in ${n}ms`)}const o=Date.now();zr(su,t,{test:1});const r=Date.now()-o;console.info(`⏱️ rendered in ${r}ms`)}ti.subscribe((({type:t,checkTesting:e})=>{ni(t,e)}))})();var r=o.gV,s=o.jG,a=o.fm,i=o.KH,c=o.bX,l=o.mK;export{r as App,s as IsolatedApp,a as hmr,i as run,c as tagElement,l as todoApp};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0scUJBQXNCLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG1DQUFxQyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLHVCQUF3QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFFLEdBQU0sTUFBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLFlBQWMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxTQUFZLENBQUMsQ0FBRSxHQUFNLElBQUssR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sc0JBQXlCLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sbUNBQW9DLENBQUMsUUFBUyxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLHNDQUF3QyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxLQUFPLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLHFDQUFzQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxLQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLFdBQWEsQ0FBQyxDQUFFLEdBQU0sSUFBSyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQkFBeUIsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSxxQ0FBc0MsQ0FB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LEdBQU0sT0FBUSxHQUFNLFNBQVcsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUNBQXVDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMENBQTJDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFNBQWMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sV0FBYSxDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEVBQUssR0FBSyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scUNBQXVDLENBQUUsR0FBTSxPQUFRLEVBQUssS0FBUSxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxNQUFRLENBQUUsR0FBTSxPQUFRLEdBQU0sQ0FBQyxDQUFDLEtBQU0sMENBQTJDLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFVBQWUsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUMsS0FBTSx3Q0FBeUMsQ0FBQyxRQUFTLENBQUUsU0FBWSxHQUFLLE9BQVEsR0FBTSxDQUFDLENBQUUs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R0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxHQUFNLENBQUMsQ0FBQyxLQUFNLCtCQUFnQyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxVQUFlLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLElBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxxQkFBdUIsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLFFBQVMsQ0FBRSxTQUFZLElBQU0sT0FBUSxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sd0JBQTJCLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQkFBd0IsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sWUFBYyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVUsQ0FBQyxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxDQUFFLFNBQVksS0FBTyxHQUFNLENBQUMsQ0FBRSxHQUFNLE1BQVEsQ0FBRSxHQUFNLEtBQU0sR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sdUJBQTBCLENBQUUsR0FBTSxPQUFRLEVBQUssTUFBUyxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0scURBQWlELENBQUUsR0FBTSxXQUFZLEdBQU0sQ0FBQyxDQUFDLFFBQVMsOEJBQStCLENBQUMsT0FBUSxPQUFRLENBQUMsT0FBUSxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE1BQVMsQ0FBQyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBQyxLQUFNLDJCQUE0QixHQUFNLENBQUMsQ0FBRSxHQUFNLFNBQVUsR0FBTSxDQUFDLENBQUUsR0FBTSxRQUFTLEdBQU0sQ0FBQyxDQUFFLEdBQU0sUUFBUyxHQUFNLENBQUMsQ0FBQyxPQUFRLFlBQWEsQ0FBQyxVQUFXLENBQUUsU0FBWSxHQUFLLE1BQU8sQ0FBQyxTQUFVLENBQUUsU0FBWSxHQUFLLFFBQVUsQ0FBRSxHQUFNLE9BQVEsR0FBTSxzQ0FBMEMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxNQUFTLENBQUMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsUUFBUyxzQkFBdUIsQ0FBQyxLQUFNLHVCQUF3QixHQUFNLENBQUMsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sa0JBQW9CLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sdUJBQXdCLENBQUMsU0FBVSxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVcsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsUUFBUyxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0saUJBQW1CLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sc0JBQXVCLENBQUMsU0FBVSxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLE9BQVcsQ0FBRSxHQUFNLFFBQVMsR0FBTSxDQUFDLENBQUMsUUFBUyxxQkFBc0IsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sa0JBQW9CLENBQUUsR0FBTSxTQUFVLEdBQU0sQ0FBQyxDQUFDLEtBQU0sd0JBQXlCLENBQUMsU0FBVSxDQUFFLFNBQVksR0FBSyxPQUFRLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxFQUFLLFNBQWMsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxtQkFBb0IsR0FBTSxDQUFDLENBQUUsR0FBTSxLQUFNLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLDRCQUErQixDQUFFLEdBQU0sT0FBUSxFQUFLLEtBQVEsQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FB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TSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLEdBQUssQ0FBRSxHQUFNLE9BQVEsR0FBTSxTQUFZLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0sc0JBQXVCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxHQUFLLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBWSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLFNBQVksQ0FBRSxHQUFNLE1BQU8sR0FBTSxDQUFDLENBQUMsS0FBTSxzQkFBdUIsR0FBTSxDQUFDLENBQUUsR0FBTSxPQUFRLEdBQU0sT0FBUyxDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBRSxHQUFNLE9BQVEsR0FBTSxTQUFZLENBQUUsR0FBTSxNQUFPLEdBQU0sQ0FBQyxDQUFDLEtBQU0sc0JBQXVCLEdBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLE9BQVMsQ0FBRSxHQUFNLE9BQVEsRUFBSyxJQUFNLENBQUUsR0FBTSxPQUFRLEdBQU0sU0FBWSxDQUFFLEdBQU0sTUFBTyxHQUFNLENBQUMsQ0FBQyxLQUFNLHNCQUF1QixHQUFNLENBQUMsQ0FBRSxHQUFNLE9BQVEsR0FBTSxPQUFTLENBQUUsR0FBTSxPQUFRLEVBQUssSUFBTSxDQUFFLEdBQU0sT0FBUSxHQUFNLFVBQWEsQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9CQUFzQixDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sT0FBUSxHQUFNLG9CQUFzQixDQUFFLEdBQU0sT0FBUSxFQUFLLElBQU0sQ0FBQyxDQUFFLEdBQU0sV0FBWSxHQUFNLENBQUMsQ0FBQyxRQUFTLGdCQUFpQixHQUFNLENBQUMsQ0FBRSxHQUFNLFNB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Q3pCcDlDLFFBQVE2WCxLQUFLLGtCQUFrQjZrRCxNQUNuQyxDRHVCQWxlLEdBQVl6cUMsV0FBVSxFQUFHd2pCLE9BQU0rbUIsbUJBQzNCTyxHQUFTdG5CLEVBQU0rbUIsRUFBYSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9hdHRyaWJ1dGVzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhc2ljLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NoaWxkLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY291bnRlcnMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVzdHJveXMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcENvbnRlbnQudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnVuSW5Qcm9wcy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9pbmplY3Rpb25UZXN0aW5nLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21pcnJvci50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9vbmVSZW5kZXIudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvcHMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdmlkZXJzLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXJ0LnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N1YnNjcmlwdGlvbnMudGVzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnU3dpdGNoLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Rlc3RpbmcvZXhwZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL2V4cGVjdC13cmFwcGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0aW5nL2VsbVNlbGVjdG9ycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy9leHBlY3QuaHRtbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVzdGluZy90ZXN0UnVubmVyLnRzIiwid2VicGFjazovLy8uL3NyYy90b2Rvcy50ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy93YXRjaC50ZXN0LnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9Eb21UYWcudHlwZS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2lzU3BlY2lhbEF0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9nZXRUYWdWYXJJbmRleC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL3BhcnNlSFRNTC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL2h0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9WYWx1ZVR5cGVzLmVudW0udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvb3B0aW1pemVycy9yZXBsYWNlUGxhY2Vob2xkZXJzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9nZXRTdHJpbmdzSWQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2RvbU1ldGFDb2xsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2lzTGFzdFJ1bk1hdGNoZWQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3BhaW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvZGVsZXRlQ29udGV4dFN1YkNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaXNJbnN0YW5jZS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZXMudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc3RhdGUudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvZ2V0U3RhdGVWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZUhhbmRsZXJzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3QvY29tYmluZUxhdGVzdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdWJqZWN0L3N1YmplY3QudXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3ViamVjdC9TdWJqZWN0LmNsYXNzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL3RhZ0Nsb3NlZCQuc3ViamVjdC50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zZXRVc2VNZW1vcnkub2JqZWN0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvZG9tUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2Nhc3RUZXh0VmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9zcGVjaWFsQXR0cmlidXRlLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaG93VG9TZXRJbnB1dFZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL2hhbmRsZVByb3ZpZGVyQ2hhbmdlcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9wcm92aWRlcnNDaGFuZ2VDaGVjay5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9kZWVwRnVuY3Rpb25zLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9zaGFsbG93UHJvcE1hdGNoLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9jbG9uZVZhbHVlQXJyYXkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3Byb3BzL2Nsb25lUHJvcHNCeS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3RhZ1J1bm5lci50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvZGVzdHJveUNvbnRleHRzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvYXJyYXlzL2NvbXBhcmVBcnJheUl0ZW1zLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9kZXN0cm95QXJyYXlDb250ZXh0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9kZXN0cm95SHRtbERvbU1ldGEuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3NtYXJ0UmVtb3ZlS2lkcy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2lzTGlrZVRhZ3MuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2Rlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY2hlY2tUYWdWYWx1ZUNoYW5nZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYWRkT25lQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL2F0dGFjaER5bmFtaWNEb20uZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2RvbS9wcm9jZXNzQXR0cmlidXRlQXJyYXkuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2RvbS9hdHRhY2hEb21FbGVtZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9kb20vYXR0YWNoRG9tRWxlbWVudHMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9wcm9jZXNzTmV3U3ViamVjdFRhZy5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NUYWdJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9nZXRUZW1wbGF0ZXJSZXN1bHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3RhZy51dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvcHJvcHMvc2FmZVJlbmRlclN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvZXhlY3V0ZVdyYXAuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2dldFRhZ1dyYXAuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3J1bkFmdGVyUmVuZGVyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9jYWxsVGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci91cGRhdGUvcHJvY2Vzc1JlbmRlck9uY2VJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvb25lUmVuZGVyVG9TdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1N1YnNjcmliZVdpdGguZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NBdHRyaWJ1dGVVcGRhdGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9zdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy9zdWJzY3JpYmUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL2dldElubmVySFRNTC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zeW5jU3RhdGVzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9vdXRwdXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL2hvc3QuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9jb252ZXJ0VGFnVG9FbGVtZW50TWFuYWdlZC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9wcm9jZXNzVGFnUmVzdWx0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0NvbXBvbmVudEluaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9yZW5kZXJUYWdBcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2NoZWNrVG9SZXNvbHZlUHJvbWlzZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9vbkluaXQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvb25EZXN0cm95LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZ0pzVmFycy90YWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2NoZWNrUmVuZGVyVXAuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2hhc1Byb3BDaGFuZ2VzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvdGFnSW5qZWN0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvc3luY1ByaW9yUHJvcEZ1bmN0aW9uLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvdXBkYXRlRXhpc3RpbmdBcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nT2JqZWN0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci91cGRhdGUvdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3NvZnREZXN0cm95U3VwcG9ydC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvcmVuZGVyV2l0aFN1cHBvcnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0VXBUYWdzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYmluZFN1YmplY3RDYWxsYmFjay5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2J1YmJsZUV2ZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlQ2FsbGJhY2suZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL2F0dHJpYnV0ZXMvaXNOb0Rpc3BsYXlWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3VwZGF0ZU5hbWVPbmx5QXR0clZhbHVlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NVcGRhdGVBdHRyQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2NyZWF0ZUR5bmFtaWNBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzTmFtZVZhbHVlQXR0cmlidXRlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL2dldFRhZ0pzVmFyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NUYWdKc0F0dHJpYnV0ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NGdW5jdGlvbkF0dHIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL3Byb2Nlc3NTaW1wbGVBdHRyaWJ1dGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnSnNWYXJzL2dldFNpbXBsZVRhZ1Zhci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NSZWd1bGFyVmFsdWUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2NoZWNrRGVzdHJveVByZXZpb3VzLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvYXJyYXlzL3Byb2Nlc3NUYWdBcnJheS50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvZ2V0QXJyYXlUYWdKc1Zhci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvb25GaXJzdFN1YkNvbnRleHQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL2d1YXJhbnRlZUluc2VydEJlZm9yZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NVcGRhdGVTdWJzY3JpYmUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NTaWduYWwuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc2lnbmFsLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3QvVmFsdWVTdWJqZWN0LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N1YmplY3Qvd2lsbC5mdW5jdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvd2F0Y2guZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvc3ViamVjdC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9zdGF0ZXMuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvbGV0UHJvcC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9wcm92aWRlcnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZXJyb3JzLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3N0YXRlL2NhbGxiYWNrU3RhdGVVcGRhdGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvY2FsbGJhY2suZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvc3RhdGUvY2FsbGJhY2tNYWtlci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9zdGF0ZS9hcnJheS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9wcm9jZXNzVXBkYXRlQ29udGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9yZW5kZXIvdXBkYXRlL3VwZGF0ZVN1cHBvcnRCeS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3RyeVVwZGF0ZVRvVGFnLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvaGFuZGxlU3RpbGxUYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvdGFnL3VwZGF0ZS91cGRhdGVUb0RpZmZWYWx1ZS5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL2hhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy91cGRhdGUvY2hlY2tTdGlsbFN1YnNjcmlwdGlvbi5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvdXBkYXRlL3Byb2Nlc3NEb21UYWdJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9wcm9jZXNzT3V0ZXJEb21UYWdJbml0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9odG1sLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy9nZXREb21UYWcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvcmVuZGVyL3JlZ2lzdGVyTmV3VGFnRWxlbWVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy90YWcvbG9hZE5ld0Jhc2VTdXBwb3J0LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3JlbmRlci9yZW5kZXJUYWdFbGVtZW50LmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL3RhZy90YWdFbGVtZW50LnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2VsZW1lbnRzL2VsZW1lbnRGdW5jdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvcHJvY2Vzc0NoaWxkcmVuLmZ1bmN0aW9uLnRzIiwid2VicGFjazovLy8uLi9tYWluL3RzL2VsZW1lbnRzL3Byb2Nlc3NFbGVtZW50VmFyRnVuY3Rpb24uZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvcHJvY2Vzc0VsZW1lbnRWYXIuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvZGVzdHJveURlc2lnbkVsZW1lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvcHJvY2Vzc0Rlc2lnbkVsZW1lbnRVcGRhdGUuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvZGVzaWduRWxlbWVudC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vbWFpbi90cy9lbGVtZW50cy9ub0VsZW1lbnQuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvZWxlbWVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4uL21haW4vdHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vSGFzaFJvdXRlci5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWVudS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vdXNlb3Zlci50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlckNvdW50LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY291bnRlcnNEZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb2x1bW5FZGl0b3IuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2FycmF5VGFibGUuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2FycmF5RGlzcGxheS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R1bXAvYXJyYXlzRGlzcGxheS5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2R1bXAvZHVtcEFycmF5LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb3B5VGV4dC5mdW5jdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9kdW1wU2ltcGxlLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9kdW1wT2JqZWN0LnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHVtcC9jb250cm9sUGFuZWwudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wL2R1bXAudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9kdW1wQ29udGVudC50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RhZ2dlZGpzLWFuaW1hdGUtY3NzL2pzL2NyZWF0ZUZ4LmZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90YWdnZWRqcy1hbmltYXRlLWNzcy9qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGVudC50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL29uZVJlbmRlci50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3J1blRlc3RpbmcuZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb2xhdGVkQXBwLnRlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb25TZWxlY3Rvci50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5RnVuLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZnVuSW5Qcm9wc0NoaWxkLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYWRkQXJyYXlDb21wb25lbnQudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9mdW5JblByb3BzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdG9kby9jb21wb25lbnRzL2l0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vY29tcG9uZW50cy9oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vY29tcG9uZW50cy9mb290ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RvZG8vdG9kb3MuYXBwLnRzIiwid2VicGFjazovLy8uL3NyYy90b2RvL3JlZHVjZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lubmVySHRtbFRlc3RzLnRzIiwid2VicGFjazovLy8uL3NyYy9jaGlsZFRlc3RzLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVzdHJveXMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9hcnJheVNjb3JlRGF0YS50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhZ1N3aXRjaERlYnVnLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWlycm9yaW5nLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGVQcm9wRGVidWcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9Qcm9wc0RlYnVnLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdmlkZXJEaWFsb2cudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9ob3N0VGVzdHMvaW5qZWN0aW9uV3JhcC5ob3N0LnRzIiwid2VicGFjazovLy8uL3NyYy9ob3N0VGVzdHMvaW5qZWN0aW9uVGFyZ2V0Lmhvc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luamVjdGlvblRlc3RpbmcudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9wcm92aWRlcnMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy90YWJsZURlYnVnLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2F0Y2hUZXN0aW5nLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3Vic2NyaWJlQXR0cmlidXRlcy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2F0dHJpYnV0ZURlYnVnLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzaWMudGFnLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyclJlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXhlY3V0ZVNjaGVkdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdGFydFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N1YnNjcmlwdGlvbnMudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy9yZW5kZXJlZFNlY3Rpb25zLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW50ZXJ2YWxEZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnSnNEZWJ1Zy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaG9tZVBhZ2UudGFnLnRzIiwid2VicGFjazovLy8uL3NyYy90ZXN0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRhZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXV0b1Rlc3RpbmdDb250cm9scy50YWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb2xhdGVkQXBwLnRzIiwid2VicGFjazovLy8uL3NyYy9ydW4uZnVuY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnlJZCwgZWxtQ291bnQsIGNsaWNrLCBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5leHBvcnQgY29uc3QgZnhUaW1lID0gMTYwO1xuZGVzY3JpYmUoJ+KghyBhcnJheSB0ZXN0aW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaWduYWwgYXJyYXkgY291bnQgYW5kIGl0ZW1zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWxBcnJheUNvdW50ID0gYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50Jyk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChpbml0aWFsQ291bnQpLnRvQmUoMyk7XG4gICAgICAgIC8vIENoZWNrIGluaXRpYWwgYXJyYXkgaXRlbXMgbWF0Y2ggY291bnRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0aWFsQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgZXhwZWN0KGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpfWApKS50b0JlKDEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIG5vIGV4dHJhIGl0ZW1zIGV4aXN0XG4gICAgICAgIGV4cGVjdChlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aW5pdGlhbENvdW50fWApKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCdwdXNoIHNpZ25hbCBhcnJheSBidXR0b24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbEFycmF5Q291bnQgPSBieUlkKCdzaWduYWwtYXJyYXktY291bnQnKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbENvdW50ID0gTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgY29uc3QgcHVzaEJ0biA9IGJ5SWQoJ3B1c2gtc2lnbmFsLWFycmF5LWJ0bicpO1xuICAgICAgICBleHBlY3QoaW5pdGlhbENvdW50KS50b0JlKDMpO1xuICAgICAgICAvLyBDbGljayBwdXNoIGJ1dHRvblxuICAgICAgICBwdXNoQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGNvdW50IGluY3JlYXNlZFxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChuZXdDb3VudCkudG9CZShpbml0aWFsQ291bnQgKyAxKTtcbiAgICAgICAgLy8gQ2hlY2sgbmV3IGl0ZW0gZXhpc3RzXG4gICAgICAgIGV4cGVjdChlbG1Db3VudChgI3NpZ25hbC1hcnJheS1pdGVtLSR7aW5pdGlhbENvdW50fWApKS50b0JlKDEpO1xuICAgICAgICAvLyBDbGljayBhZ2FpblxuICAgICAgICBwdXNoQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGNvdW50IGluY3JlYXNlZCBhZ2FpblxuICAgICAgICBleHBlY3QoTnVtYmVyKHNpZ25hbEFycmF5Q291bnQuaW5uZXJUZXh0KSkudG9CZShpbml0aWFsQ291bnQgKyAyKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tJHtpbml0aWFsQ291bnQgKyAxfWApKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoTnVtYmVyKGJ5SWQoJ3NpZ25hbC1hcnJheS1jb3VudCcpLmlubmVyVGV4dCkpLnRvQmUoNSk7XG4gICAgICAgIGNsaWNrKGAjc2lnbmFsLWFycmF5LWl0ZW0tZGVsZXRlLWJ0bi0zYCk7XG4gICAgICAgIGNsaWNrKGAjc2lnbmFsLWFycmF5LWl0ZW0tZGVsZXRlLWJ0bi00YCk7XG4gICAgICAgIC8vIFdhaXQgZm9yIGFuaW1hdGlvbiB0byBjb21wbGV0ZVxuICAgICAgICBhd2FpdCBkZWxheShmeFRpbWUgKiAyKTtcbiAgICAgICAgZXhwZWN0KE51bWJlcihieUlkKCdzaWduYWwtYXJyYXktY291bnQnKS5pbm5lclRleHQpKS50b0JlKDMpO1xuICAgIH0pO1xuICAgIGl0KCdhcnJheXMgY291bnRlciBkaXNwbGF5IG1hdGNoZXMgaXRlbSBjb3VudGVyIGRpc3BsYXlzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudGVyRGlzcGxheSA9IGJ5SWQoJ2FycmF5cy1jb3VudGVyLWRpc3BsYXknKTtcbiAgICAgICAgY29uc3QgY291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgZWFjaCBzaWduYWwgYXJyYXkgaXRlbSBjb3VudGVyIGRpc3BsYXkgbWF0Y2hlcyB0aGUgbWFpbiBjb3VudGVyXG4gICAgICAgIGNvbnN0IHNpZ25hbEFycmF5Q291bnQgPSBieUlkKCdzaWduYWwtYXJyYXktY291bnQnKTtcbiAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db3VudGVyID0gYnlJZChgc2lnbmFsLWFycmF5LWl0ZW0tY291bnRlci1kaXNwbGF5LSR7aX1gKTtcbiAgICAgICAgICAgIGV4cGVjdChpdGVtQ291bnRlcikudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChOdW1iZXIoaXRlbUNvdW50ZXIuaW5uZXJUZXh0KSkudG9CZShjb3VudGVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsaWNrIGEgY291bnRlciBidXR0b24gdG8gaW5jcmVtZW50XG4gICAgICAgIGNvbnN0IGNvdW50ZXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lnbmFsLWFycmF5LWluY3JlYXNlLWNvdW50ZXInKTtcbiAgICAgICAgY291bnRlckJ1dHRvbi5jbGljaygpO1xuICAgICAgICAvLyBWZXJpZnkgYWxsIGNvdW50ZXJzIHVwZGF0ZWRcbiAgICAgICAgY29uc3QgbmV3Q291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChuZXdDb3VudGVyVmFsdWUpLnRvQmUoY291bnRlclZhbHVlICsgMSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBgc2lnbmFsLWFycmF5LWl0ZW0tY291bnRlci1kaXNwbGF5LSR7aX1gO1xuICAgICAgICAgICAgY29uc3QgaXRlbUNvdW50ZXIgPSBieUlkKGlkKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyKGl0ZW1Db3VudGVyLmlubmVyVGV4dCk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUpLnRvQmUobmV3Q291bnRlclZhbHVlLCBgSW5kZXggJHtpfSBJRCAke2lkfSBoYXMgJHt2YWx1ZX0gYnV0IG5lZWQgdG9CZSAke25ld0NvdW50ZXJWYWx1ZX0gbGlrZSAjc2lnbmFsLWFycmF5LWluY3JlYXNlLWNvdW50ZXJgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGl0KCdzaWduYWwgYXJyYXkgaXRlbSBkZWxldGUgYnV0dG9uIHdpdGggYW5pbWF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaWduYWxBcnJheUNvdW50ID0gYnlJZCgnc2lnbmFsLWFycmF5LWNvdW50Jyk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxDb3VudCA9IE51bWJlcihzaWduYWxBcnJheUNvdW50LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChpbml0aWFsQ291bnQpLnRvQmUoMyk7XG4gICAgICAgIGlmIChpbml0aWFsQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBpdGVtIHRvIGRlbGV0ZVxuICAgICAgICAgICAgYnlJZCgncHVzaC1zaWduYWwtYXJyYXktYnRuJykuY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBjb25zdCBpbmRleFRvRGVsZXRlID0gMDtcbiAgICAgICAgLy8gVmVyaWZ5IGl0ZW0gZXhpc3RzIGJlZm9yZSBkZWxldGlvblxuICAgICAgICBleHBlY3QoZWxtQ291bnQoYCNzaWduYWwtYXJyYXktaXRlbS0ke2luZGV4VG9EZWxldGV9YCkpLnRvQmUoMSk7XG4gICAgICAgIC8vIENsaWNrIGRlbGV0ZSBidXR0b25cbiAgICAgICAgY29uc3QgZGVsZXRlQnRuID0gYnlJZChgc2lnbmFsLWFycmF5LWl0ZW0tZGVsZXRlLWJ0bi0ke2luZGV4VG9EZWxldGV9YCk7XG4gICAgICAgIGRlbGV0ZUJ0bi5jbGljaygpO1xuICAgICAgICAvLyBXYWl0IGZvciBhbmltYXRpb24gdG8gY29tcGxldGVcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lKTtcbiAgICAgICAgZXhwZWN0KE51bWJlcihieUlkKCdzaWduYWwtYXJyYXktY291bnQnKS5pbm5lclRleHQpKS50b0JlKDIpO1xuICAgICAgICAvLyBDaGVjayBjb3VudCBkZWNyZWFzZWRcbiAgICAgICAgY29uc3Qgc2lnQ291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBjb25zdCBuZXdDb3VudDEgPSBjdXJyZW50Q291bnQgLSAxO1xuICAgICAgICBleHBlY3Qoc2lnQ291bnQpLnRvQmUobmV3Q291bnQxLCBgI3NpZ25hbC1hcnJheS1jb3VudCBoYXMgJHtzaWdDb3VudH0gYnV0IGV4cGVjdGVkICR7bmV3Q291bnQxfWApO1xuICAgICAgICAvLyBDaGVjayBpdGVtIG5vIGxvbmdlciBleGlzdHNcbiAgICAgICAgY29uc3QgaXRlbUNvdW50MiA9IGVsbUNvdW50KGAjc2lnbmFsLWFycmF5LWl0ZW0tMmApOyAvLyBwb3MgMiBpcyBub3cgMVxuICAgICAgICBleHBlY3QoaXRlbUNvdW50MikudG9CZSgwLCBgRXhwZWN0ZWQgc2lnbmFsIGFycmF5IGl0ZW0gMiBidXQgZ290ICR7aXRlbUNvdW50Mn1gKTtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHJlbWFpbmluZyBpdGVtcywgY2hlY2sgdGhleSd2ZSBiZWVuIHJlLWluZGV4ZWRcbiAgICAgICAgY29uc3QgbmV3Q291bnQgPSBOdW1iZXIoc2lnbmFsQXJyYXlDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gZWxtQ291bnQoYCNzaWduYWwtYXJyYXktaXRlbS0ke2l9YCk7XG4gICAgICAgICAgICBleHBlY3QoY291bnQpLnRvQmUoMSwgYEV4cGVjdGVkIG9ubHkgb25lICNzaWduYWwtYXJyYXktaXRlbS0ke2l9IGJ1dCBnb3QgJHtjb3VudH1gKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGl0KCdhcnJheSBiYXNpY3MnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI2FycmF5LXRlc3QtcHVzaC1pdGVtJykpLnRvQmUoMSk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKTtcbiAgICAgICAgZXhwZWN0KGJ1dHRvbnMubGVuZ3RoKS50b0JlKDApOyAvLyBEaWQgbm90IGV4cGVjdCBzY29yaW5nIGJ1dHRvbiAwLTEgdG8gYmUgcHJlc2VudFxuICAgICAgICBjb25zdCBpbnNpZGVDb3VudCA9IGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpO1xuICAgICAgICBleHBlY3QoaW5zaWRlQ291bnQpLnRvQmUoMCk7XG4gICAgICAgIC8vIGFkZCBwbGF5ZXIgMFxuICAgICAgICBieUlkKCdhcnJheS10ZXN0LXB1c2gtaXRlbScpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKSkudG9CZSgxLCAnc2NvcmUgZGF0YSBpbnNpZGUgYnV0dG9uIGJhZCcpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDEsICdzY29yZSBkYXRhIG91dHNpZGUgYnV0dG9uIGJhZCcpO1xuICAgICAgICBjb25zdCBpbnNpZGVFbG0gPSBieUlkKCdzY29yZS1kYXRhLTAtMS1pbnNpZGUtYnV0dG9uJyk7XG4gICAgICAgIGNvbnN0IGluc2lkZURpc3BsYXkgPSBieUlkKCdzY29yZS1kYXRhLTAtMS1pbnNpZGUtZGlzcGxheScpO1xuICAgICAgICBsZXQgaW5kZXhWYWx1ZSA9IGluc2lkZURpc3BsYXkuaW5uZXJUZXh0O1xuICAgICAgICBjb25zdCBvdXRzaWRlRWxtID0gYnlJZCgnc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKTtcbiAgICAgICAgY29uc3Qgb3V0c2lkZURpc3BsYXkgPSBieUlkKCdzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWRpc3BsYXknKTtcbiAgICAgICAgY29uc3Qgb3V0c2lkZVZhbHVlID0gb3V0c2lkZURpc3BsYXkuaW5uZXJUZXh0O1xuICAgICAgICBleHBlY3QoaW5kZXhWYWx1ZSkudG9CZShvdXRzaWRlVmFsdWUpO1xuICAgICAgICAvLyBzY29yZSBmb3IgcGxheWVyIDBcbiAgICAgICAgaW5zaWRlRWxtLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbnNpZGVEaXNwbGF5LmlubmVyVGV4dCkudG9CZShvdXRzaWRlRGlzcGxheS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoaW5zaWRlRGlzcGxheSkudG9CZShieUlkKCdzY29yZS1kYXRhLTAtMS1pbnNpZGUtZGlzcGxheScpKTsgLy8gdGVzdCBlbGVtZW50ICNzY29yZS1kYXRhLTAtMS1pbnNpZGUtZGlzcGxheSB3YXMgbm90IHJlZHJhd25cbiAgICAgICAgZXhwZWN0KGluZGV4VmFsdWUpLnRvQmUoKE51bWJlcihpbnNpZGVEaXNwbGF5LmlubmVyVGV4dCkgLSAxKS50b1N0cmluZygpKTtcbiAgICAgICAgZXhwZWN0KGluZGV4VmFsdWUpLnRvQmUoKE51bWJlcihvdXRzaWRlRGlzcGxheS5pbm5lclRleHQpIC0gMSkudG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIHNjb3JlIGZvciBwbGF5ZXIgMFxuICAgICAgICBvdXRzaWRlRWxtLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbnNpZGVEaXNwbGF5LmlubmVyVGV4dCkudG9CZShvdXRzaWRlRGlzcGxheS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoaW5kZXhWYWx1ZSkudG9CZSgoTnVtYmVyKGluc2lkZURpc3BsYXkuaW5uZXJUZXh0KSAtIDIpLnRvU3RyaW5nKCkpO1xuICAgICAgICBleHBlY3QoaW5kZXhWYWx1ZSkudG9CZSgoTnVtYmVyKG91dHNpZGVEaXNwbGF5LmlubmVyVGV4dCkgLSAyKS50b1N0cmluZygpKTtcbiAgICB9KTtcbiAgICBpdCgn8J+Xke+4jyBkZWxldGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLTAnKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjcGxheWVyLWVkaXQtYnRuLTAnKSkudG9CZSgxKTtcbiAgICAgICAgLy8gc3RhcnQgZWRpdCBtb3ZlXG4gICAgICAgIGNvbnN0IHggPSBieUlkKCdwbGF5ZXItZWRpdC1idG4tMCcpLl9jbGljaygpO1xuICAgICAgICBleHBlY3QoeCkudG9CZSgnbm8tZGF0YS1ldmVyJyk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3BsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tMCcpKS50b0JlKDEpO1xuICAgICAgICAvLyByZW1vdmUgcGxheWVyIDFcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnlJZCgncGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykuX2NsaWNrKCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3Byb21pc2Utbm8tZGF0YS1ldmVyJyk7XG4gICAgICAgIGF3YWl0IGRlbGF5KGZ4VGltZSk7IC8vIGFuaW1hdGlvblxuICAgICAgICBhd2FpdCByZXN1bHQ7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3BsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tMCcpKS50b0JlKDAsICdFeHBlY3RlZCBlbGVtZW50IG5vdCB0byBleGlzdCAjcGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJyk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3BsYXllci1lZGl0LWJ0bi0wJykpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ2FkZCB0aGVuIGRlbGV0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIGFkZCBwbGF5ZXIgMVxuICAgICAgICBieUlkKCdhcnJheS10ZXN0LXB1c2gtaXRlbScpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3Njb3JlLWRhdGEtMC0xLWluc2lkZS1idXR0b24nKSkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtb3V0c2lkZS1idXR0b24nKSkudG9CZSgxKTtcbiAgICAgICAgLy8gYWRkIHBsYXllciAyXG4gICAgICAgIGJ5SWQoJ2FycmF5LXRlc3QtcHVzaC1pdGVtJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDIpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDIpO1xuICAgICAgICAvLyBlZGl0IHBsYXllciAxXG4gICAgICAgIGJ5SWQoJ3BsYXllci1lZGl0LWJ0bi0wJykuY2xpY2soKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnlJZCgncGxheWVyLXJlbW92ZS1wcm9taXNlLWJ0bi0wJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncHJvbWlzZS1uby1kYXRhLWV2ZXInKTtcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lIC0gMTApOyAvLyBhbmltYXRpb25cbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDEpO1xuICAgICAgICAvLyBlZGl0IHdobyBpcyBub3cgcGxheWVyIDEgd2hvIHdhcyBwbGF5ZXIgMlxuICAgICAgICBieUlkKCdwbGF5ZXItZWRpdC1idG4tMCcpLmNsaWNrKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCBieUlkKCdwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLTAnKS5jbGljaygpO1xuICAgICAgICBleHBlY3QocmVzdWx0MikudG9CZSgncHJvbWlzZS1uby1kYXRhLWV2ZXInKTtcbiAgICAgICAgYXdhaXQgZGVsYXkoZnhUaW1lICsgMjUpOyAvLyBhbmltYXRpb25cbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2NvcmUtZGF0YS0wLTEtaW5zaWRlLWJ1dHRvbicpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzY29yZS1kYXRhLTAtMS1vdXRzaWRlLWJ1dHRvbicpKS50b0JlKDApO1xuICAgIH0pO1xufSk7XG5mdW5jdGlvbiBkZWxheSh0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCB0aW1lKSk7XG59XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBjbGljaywgY291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/Cfj7kgc3BlY2lhbCBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgIGl0KCdzdHlsZSBhbmQgY2xhc3MgdGVzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb3VudCgnI2F0dHItaW5wdXQtYWJjJykpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChjb3VudCgnI3RvZ2dsZS1iYWNrZ3JvdW5kcycpKS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoYnlJZCgnYXR0ci1zdHlsZS1zdHJpbmdzJykuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWNsYXNzLWJvb2xlYW5zJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWlubGluZS1jbGFzcycpLmNsYXNzTGlzdCkuaW5jbHVkZXMoJ2JhY2tncm91bmQtb3JhbmdlJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNFbGVtZW50ID0gYnlJZCgnYXR0ci1keW5hbWljLWlubGluZS1jbGFzcycpO1xuICAgICAgICBjb25zdCBkeW5hbWljQ2xhc3NMaXN0ID0gZHluYW1pY0VsZW1lbnQuY2xhc3NMaXN0O1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmR5bmFtaWNDbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKHRydWUpO1xuICAgICAgICBjbGljaygnI3RvZ2dsZS1iYWNrZ3JvdW5kcycpO1xuICAgICAgICBleHBlY3QoYnlJZCgnYXR0ci1zdHlsZS1zdHJpbmdzJykuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCcnKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWNsYXNzLWJvb2xlYW5zJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChuZXcgQXJyYXkoLi4uYnlJZCgnYXR0ci1pbmxpbmUtY2xhc3MnKS5jbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWR5bmFtaWMtaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZShmYWxzZSk7XG4gICAgICAgIC8vIHB1dCBiYWNrXG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJhY2tncm91bmRzJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdhdHRyLXN0eWxlLXN0cmluZ3MnKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ29yYW5nZScpO1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmJ5SWQoJ2F0dHItY2xhc3MtYm9vbGVhbnMnKS5jbGFzc0xpc3QpLmluY2x1ZGVzKCdiYWNrZ3JvdW5kLW9yYW5nZScpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QobmV3IEFycmF5KC4uLmJ5SWQoJ2F0dHItaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KG5ldyBBcnJheSguLi5ieUlkKCdhdHRyLWR5bmFtaWMtaW5saW5lLWNsYXNzJykuY2xhc3NMaXN0KS5pbmNsdWRlcygnYmFja2dyb3VuZC1vcmFuZ2UnKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgICBpdCgnc3Vic2NyaWJlIGF0dHJpYnV0ZXMgY29sb3JzJywgKCkgPT4ge1xuICAgICAgICAvLyBUZXN0IGluaXRpYWwgYmFja2dyb3VuZCBjb2xvcnNcbiAgICAgICAgY29uc3QgYmdDb2xvckNoYW5nZXIgPSBieUlkKCdzdWJzY3JpYmUtc3R5bGUtZG90LWJnLWNvbG9yLWNoYW5nZXInKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlQmdDb2xvciA9IGJ5SWQoJ3N1YnNjcmliZS1zdHlsZS1iZy1jb2xvcicpO1xuICAgICAgICBjb25zdCBtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3IgPSBieUlkKCdtdWx0aXBsZS1zdWJzY3JpYmUtYmctY29sb3InKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlQ29sb3JCdG4gPSBieUlkKCd0b2dnbGUtY29sb3ItYnRuJyk7XG4gICAgICAgIGNvbnN0IGNsZWFyQ29sb3JCdG4gPSBieUlkKCdjbGVhci1jb2xvci1idG4nKTtcbiAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZSAtIGFsbCBzaG91bGQgYmUgcmVkL3BpbmtcbiAgICAgICAgZXhwZWN0KGJnQ29sb3JDaGFuZ2VyLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgncmVkJywgJ2JnQ29sb3JDaGFuZ2VyIHNob3VsZCBzdGFydCByZWQnKTtcbiAgICAgICAgZXhwZWN0KHN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICAgICAgZXhwZWN0KG11bHRpcGxlU3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3BpbmsnKTtcbiAgICAgICAgLy8gVG9nZ2xlIENvbG9yIGJ1dHRvbiBzaG91bGQgc2hvdyBlbXB0eSBpbml0aWFsbHlcbiAgICAgICAgZXhwZWN0KHRvZ2dsZUNvbG9yQnRuLmlubmVyVGV4dCkudG9CZSgnVG9nZ2xlIENvbG9yICgpJyk7XG4gICAgICAgIC8vIENsaWNrIFRvZ2dsZSBDb2xvciAtIHNob3VsZCBjaGFuZ2UgdG8gcmVkXG4gICAgICAgIHRvZ2dsZUNvbG9yQnRuLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdCh0b2dnbGVDb2xvckJ0bi5pbm5lclRleHQpLnRvQmUoJ1RvZ2dsZSBDb2xvciAocmVkKScpO1xuICAgICAgICAvLyBDb2xvcnMgc2hvdWxkIGJlIHJlZC9yZWQvZ3JlZW4gYWZ0ZXIgZmlyc3QgdG9nZ2xlXG4gICAgICAgIGV4cGVjdChiZ0NvbG9yQ2hhbmdlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3JlZCcpO1xuICAgICAgICBleHBlY3Qoc3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3JlZCcpO1xuICAgICAgICBleHBlY3QobXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnZ3JlZW4nKTtcbiAgICAgICAgLy8gQ2xpY2sgVG9nZ2xlIENvbG9yIGFnYWluIC0gc2hvdWxkIGNoYW5nZSB0byBibHVlXG4gICAgICAgIHRvZ2dsZUNvbG9yQnRuLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdCh0b2dnbGVDb2xvckJ0bi5pbm5lclRleHQpLnRvQmUoJ1RvZ2dsZSBDb2xvciAoYmx1ZSknKTtcbiAgICAgICAgLy8gQ29sb3JzIHNob3VsZCBiZSBibHVlL2JsdWUvcHVycGxlIGFmdGVyIHNlY29uZCB0b2dnbGVcbiAgICAgICAgZXhwZWN0KGJnQ29sb3JDaGFuZ2VyLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnYmx1ZScpO1xuICAgICAgICBleHBlY3Qoc3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ2JsdWUnKTtcbiAgICAgICAgZXhwZWN0KG11bHRpcGxlU3Vic2NyaWJlQmdDb2xvci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3B1cnBsZScpO1xuICAgICAgICAvLyBDbGljayBDbGVhciBDb2xvciBidXR0b25cbiAgICAgICAgY2xlYXJDb2xvckJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDb2xvcnMgc2hvdWxkIGJlIGVtcHR5L2VtcHR5L3BpbmsgYWZ0ZXIgY2xlYXJcbiAgICAgICAgZXhwZWN0KGJnQ29sb3JDaGFuZ2VyLnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnJywgJ2V4cGVjdGVkIG5vIGJhY2tncm91bmQgaW4gYmdDb2xvckNoYW5nZXInKTtcbiAgICAgICAgZXhwZWN0KHN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCcnLCAnZXhwZWN0ZWQgbm8gYmFja2dyb3VuZCBpbiBzdWJzY3JpYmVCZ0NvbG9yJyk7XG4gICAgICAgIGV4cGVjdChtdWx0aXBsZVN1YnNjcmliZUJnQ29sb3Iuc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdwaW5rJyk7XG4gICAgfSk7XG4gICAgaXQoJ2hpZGUvc2hvdyBhdHRyaWJ1dGVzIGFmZmVjdHMgc3Vic2NyaXB0aW9uIGNvdW50JywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0b2dnbGVBdHRyaWJ1dGVzQnRuID0gYnlJZCgndG9nZ2xlLWF0dHJpYnV0ZXMtYnRuJyk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbnNDb3VudCA9IGJ5SWQoJ3N1YnNjcmlwdGlvbnMtY291bnQnKTtcbiAgICAgICAgLy8gR2V0IGluaXRpYWwgc3Vic2NyaXB0aW9uIGNvdW50XG4gICAgICAgIGNvbnN0IGluaXRpYWxDb3VudCA9IE51bWJlcihzdWJzY3JpcHRpb25zQ291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgLy8gQ2hlY2sgYnV0dG9uIGluaXRpYWxseSBzYXlzIFwiSGlkZSBBdHRyaWJ1dGVzXCJcbiAgICAgICAgZXhwZWN0KHRvZ2dsZUF0dHJpYnV0ZXNCdG4uaW5uZXJUZXh0KS50b0JlKCdIaWRlIEF0dHJpYnV0ZXMnKTtcbiAgICAgICAgLy8gQ2xpY2sgSGlkZSBBdHRyaWJ1dGVzXG4gICAgICAgIHRvZ2dsZUF0dHJpYnV0ZXNCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgYnV0dG9uIG5vdyBzYXlzIFwiU2hvdyBBdHRyaWJ1dGVzXCJcbiAgICAgICAgZXhwZWN0KHRvZ2dsZUF0dHJpYnV0ZXNCdG4uaW5uZXJUZXh0KS50b0JlKCdTaG93IEF0dHJpYnV0ZXMnKTtcbiAgICAgICAgLy8gQ2hlY2sgc3Vic2NyaXB0aW9ucyBkZWNyZWFzZWQgYnkgMlxuICAgICAgICBjb25zdCBhZnRlckhpZGVDb3VudCA9IE51bWJlcihzdWJzY3JpcHRpb25zQ291bnQuaW5uZXJUZXh0KTtcbiAgICAgICAgY29uc3QgaW5uZXJTdWJDb3VudCA9IDI7XG4gICAgICAgIGNvbnN0IHRvQmUgPSBpbml0aWFsQ291bnQgLSBpbm5lclN1YkNvdW50O1xuICAgICAgICBleHBlY3QoYWZ0ZXJIaWRlQ291bnQpLnRvQmUodG9CZSwgYGFmdGVySGlkZUNvdW50IGV4cGVjdGVkKCR7YWZ0ZXJIaWRlQ291bnR9KSB0b0JlKCR7dG9CZX0pYCk7XG4gICAgICAgIC8vIENsaWNrIFNob3cgQXR0cmlidXRlc1xuICAgICAgICB0b2dnbGVBdHRyaWJ1dGVzQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIGJ1dHRvbiBub3cgc2F5cyBcIkhpZGUgQXR0cmlidXRlc1wiIGFnYWluXG4gICAgICAgIGV4cGVjdCh0b2dnbGVBdHRyaWJ1dGVzQnRuLmlubmVyVGV4dCkudG9CZSgnSGlkZSBBdHRyaWJ1dGVzJyk7XG4gICAgICAgIC8vIENoZWNrIHN1YnNjcmlwdGlvbnMgaW5jcmVhc2VkIGJ5IDIgKGJhY2sgdG8gb3JpZ2luYWwpXG4gICAgICAgIGNvbnN0IGFmdGVyU2hvd0NvdW50ID0gTnVtYmVyKHN1YnNjcmlwdGlvbnNDb3VudC5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoYWZ0ZXJTaG93Q291bnQpLnRvQmUoaW5pdGlhbENvdW50KTtcbiAgICB9KTtcbiAgICBpdCgnc3R5bGUgb2JqZWN0IGNvbnZlcnRzIHRvIGluZGl2aWR1YWwgQ1NTIHByb3BlcnRpZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0eWxlT2JqZWN0VGVzdCA9IGJ5SWQoJ3N0eWxlLW9iamVjdC10ZXN0Jyk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUJ0biA9IGJ5SWQoJ3RvZ2dsZS1iYWNrZ3JvdW5kcycpO1xuICAgICAgICAvLyBJbml0aWFsIHN0YXRlIC0gY2hlY2tib3ggaXMgY2hlY2tlZCAoaXNPcmFuZ2UgPSB0cnVlKVxuICAgICAgICBleHBlY3QodG9nZ2xlQnRuLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgc3R5bGUgb2JqZWN0IGlzIGNvbnZlcnRlZCB0byBpbmRpdmlkdWFsIGlubGluZSBzdHlsZSBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIFRoZSBrZXkgdGVzdCBpcyB0aGF0IHRoZSBvYmplY3Qgc3ludGF4IHdhcyBjb252ZXJ0ZWQgdG8gaW5kaXZpZHVhbCBDU1MgcHJvcGVydGllc1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUucGFkZGluZykudG9CZSgnMTBweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJvcmRlcikudG9CZSgnMnB4IHNvbGlkIGJsYWNrJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm9yZGVyUmFkaXVzKS50b0JlKCc4cHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3hTaGFkb3cpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMC4zKSAycHggMnB4IDRweCcpO1xuICAgICAgICAvLyBUb2dnbGUgY2hlY2tib3ggb2ZmXG4gICAgICAgIHRvZ2dsZUJ0bi5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayBzdHlsZXMgY2hhbmdlZFxuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnbGlnaHRncmV5Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUucGFkZGluZykudG9CZSgnMTBweCcpO1xuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJvcmRlcikudG9CZSgnMnB4IHNvbGlkIGJsYWNrJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm9yZGVyUmFkaXVzKS50b0JlKCc0cHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3hTaGFkb3cpLnRvQmUoJ25vbmUnKTtcbiAgICAgICAgLy8gVG9nZ2xlIGJhY2sgb25cbiAgICAgICAgdG9nZ2xlQnRuLmNsaWNrKCk7XG4gICAgICAgIC8vIENoZWNrIHN0eWxlcyByZXZlcnRlZFxuICAgICAgICBleHBlY3Qoc3R5bGVPYmplY3RUZXN0LnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnb3JhbmdlJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZU9iamVjdFRlc3Quc3R5bGUuYm9yZGVyUmFkaXVzKS50b0JlKCc4cHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlT2JqZWN0VGVzdC5zdHlsZS5ib3hTaGFkb3cpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMC4zKSAycHggMnB4IDRweCcpO1xuICAgIH0pO1xuICAgIGl0KCdzdHlsZSBvYmplY3Qgd2l0aCBrZWJhYi1jYXNlIHByb3BlcnRpZXMgdXNlcyBzZXRQcm9wZXJ0eScsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3R5bGVQcm9wZXJ0eVRlc3QgPSBieUlkKCdzdHlsZS1zZXQtcHJvcGVydHktdGVzdCcpO1xuICAgICAgICBjb25zdCB0b2dnbGVCdG4gPSBieUlkKCd0b2dnbGUtYmFja2dyb3VuZHMnKTtcbiAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZSAtIGNoZWNrYm94IGlzIGNoZWNrZWQgKGlzT3JhbmdlID0gdHJ1ZSlcbiAgICAgICAgZXhwZWN0KHRvZ2dsZUJ0bi5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICAvLyBDaGVjayB0aGF0IGtlYmFiLWNhc2UgcHJvcGVydGllcyBhcmUgc2V0IGNvcnJlY3RseSB1c2luZyBzZXRQcm9wZXJ0eVxuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUuYmFja2dyb3VuZENvbG9yKS50b0JlKCdyZWQnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLmNvbG9yKS50b0JlKCd3aGl0ZScpO1xuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUucGFkZGluZykudG9CZSgnNXB4Jyk7XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5tYXJnaW5Ub3ApLnRvQmUoJzEwcHgnKTtcbiAgICAgICAgLy8gVG9nZ2xlIGNoZWNrYm94IG9mZlxuICAgICAgICB0b2dnbGVCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgc3R5bGVzIGNoYW5nZWRcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLmJhY2tncm91bmRDb2xvcikudG9CZSgnYmx1ZScpO1xuICAgICAgICBleHBlY3Qoc3R5bGVQcm9wZXJ0eVRlc3Quc3R5bGUuY29sb3IpLnRvQmUoJ3doaXRlJyk7XG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5wYWRkaW5nKS50b0JlKCc1cHgnKTtcbiAgICAgICAgZXhwZWN0KHN0eWxlUHJvcGVydHlUZXN0LnN0eWxlLm1hcmdpblRvcCkudG9CZSgnMTBweCcpO1xuICAgICAgICAvLyBUb2dnbGUgYmFjayBvblxuICAgICAgICB0b2dnbGVCdG4uY2xpY2soKTtcbiAgICAgICAgLy8gQ2hlY2sgc3R5bGVzIHJldmVydGVkXG4gICAgICAgIGV4cGVjdChzdHlsZVByb3BlcnR5VGVzdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLnRvQmUoJ3JlZCcpO1xuICAgIH0pO1xufSk7XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGJ5SWQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaXQoJ2VsZW1lbnRzIGV4aXN0cycsICgpID0+IHtcbiAgICBleHBlY3QoYnlJZCgnaDEtYXBwJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgdG9nZ2xlVGVzdCA9IGJ5SWQoJ3RvZ2dsZS10ZXN0Jyk7XG4gICAgZXhwZWN0KHRvZ2dsZVRlc3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHRvZ2dsZVRlc3QuaW5uZXJUZXh0KS50b0JlKCd0b2dnbGUgdGVzdCcpO1xufSk7XG5pdCgndG9nZ2xlIHRlc3QnLCAoKSA9PiB7XG4gICAgY29uc3QgdG9nZ2xlVGVzdCA9IGJ5SWQoJ3RvZ2dsZS10ZXN0Jyk7XG4gICAgZXhwZWN0KHRvZ2dsZVRlc3QuaW5uZXJUZXh0KS50b0JlKCd0b2dnbGUgdGVzdCcpO1xuICAgIHRvZ2dsZVRlc3QuY2xpY2soKTtcbiAgICAvLyBhZnRlciBjbGljayBub3cgdHJ1ZVxuICAgIGV4cGVjdCh0b2dnbGVUZXN0LmlubmVyVGV4dCkudG9CZSgndG9nZ2xlIHRlc3QgdHJ1ZScpO1xuICAgIHRvZ2dsZVRlc3QuY2xpY2soKTtcbiAgICAvLyBhZnRlciBjbGljayBub3cgZmFsc2VcbiAgICBleHBlY3QodG9nZ2xlVGVzdC5pbm5lclRleHQpLnRvQmUoJ3RvZ2dsZSB0ZXN0Jyk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyB0ZXN0Q291bnRlckVsZW1lbnRzLCB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn8J+RtiDwn5GnY2hpbGQgdGVzdHMnLCAoKSA9PiB7XG4gICAgaXQoJ2NoaWxkIHRlc3RzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjaW5uZXJIdG1sUHJvcHNUZXN0LWJ1dHRvbicsICcjaW5uZXJIdG1sUHJvcHNUZXN0LWRpc3BsYXknKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2lubmVySHRtbFRlc3QtY291bnRlci1idXR0b24nLCAnI2lubmVySHRtbFRlc3QtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgfSk7XG4gICAgaXQoJ2EnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2NoaWxkVGVzdHMtYnV0dG9uJywgJyNjaGlsZFRlc3RzLWRpc3BsYXknXSwgWycjaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWJ1dHRvbicsICcjaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXknXSk7XG4gICAgfSk7XG4gICAgaXQoJ2InLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2NoaWxkVGVzdHMtYnV0dG9uJywgJyNjaGlsZFRlc3RzLWRpc3BsYXknXSwgWycjY2hpbGQtYXMtcHJvcC10ZXN0LWJ1dHRvbicsICcjY2hpbGQtYXMtcHJvcC10ZXN0LWRpc3BsYXknXSk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNpbm5lckh0bWxQcm9wc1Rlc3QtY2hpbGRUZXN0cy1idXR0b24nLCAnI2lubmVySHRtbFByb3BzVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXknKTtcbiAgICB9KTtcbiAgICBpdCgnYycsICgpID0+IHtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjY2hpbGRUZXN0cy1idXR0b24nLCAnI2NoaWxkVGVzdHMtZGlzcGxheSddLCBbJyNpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtYnV0dG9uLWMnLCAnI2lubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1kaXNwbGF5LWMnXSk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGJ5SWQsIGNsaWNrLCBodG1sLCBxdWVyeSwgY2hhbmdlT25lLCBjb3VudCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vdGVzdGluZyc7XG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gd2FpdCBmb3IgYW5pbWF0aW9ucyB0byBjb21wbGV0ZVxuYXN5bmMgZnVuY3Rpb24gd2FpdEZvckFuaW1hdGlvbnNUb0NvbXBsZXRlKHNlbGVjdG9yLCBleHBlY3RlZENvdW50LCBtYXhXYWl0ID0gNTAwMCkge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCBtYXhXYWl0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGluZ0NvdW50ID0gY291bnQoYC5hbmltYXRlX19hbmltYXRlZCR7c2VsZWN0b3J9YCk7XG4gICAgICAgIGlmIChhbmltYXRpbmdDb3VudCA9PT0gZXhwZWN0ZWRDb3VudCkge1xuICAgICAgICAgICAgLy8gV2FpdCBhIGJpdCBtb3JlIHRvIGVuc3VyZSB0aGUgYW5pbWF0aW9uIHN0YXRlIGhhcyBzdGFiaWxpemVkXG4gICAgICAgICAgICBhd2FpdCBzbGVlcCg1MCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBzbGVlcCgxMCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVGltZW91dCB3YWl0aW5nIGZvciBhbmltYXRpb25zIHRvIGNvbXBsZXRlLiBFeHBlY3RlZCAke2V4cGVjdGVkQ291bnR9IGFuaW1hdGluZyBlbGVtZW50cyBtYXRjaGluZyAnLmFuaW1hdGVfX2FuaW1hdGVkJHtzZWxlY3Rvcn0nLCBidXQgZm91bmQgJHtjb3VudChgLmFuaW1hdGVfX2FuaW1hdGVkJHtzZWxlY3Rvcn1gKX1gKTtcbn1cbi8vIEhlbHBlciB0byB3YWl0IGZvciBlbGVtZW50cyB0byBhcHBlYXIvZGlzYXBwZWFyXG5hc3luYyBmdW5jdGlvbiB3YWl0Rm9yRWxlbWVudENvdW50KHNlbGVjdG9yLCBleHBlY3RlZENvdW50LCBtYXhXYWl0ID0gNTAwMCkge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCBtYXhXYWl0KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb3VudCA9IGNvdW50KHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKGN1cnJlbnRDb3VudCA9PT0gZXhwZWN0ZWRDb3VudCkge1xuICAgICAgICAgICAgYXdhaXQgc2xlZXAoNTApOyAvLyBTbWFsbCBkZWxheSB0byBlbnN1cmUgc3RhYmlsaXR5XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBzbGVlcCgxMCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVGltZW91dCB3YWl0aW5nIGZvciBlbGVtZW50IGNvdW50LiBFeHBlY3RlZCAke2V4cGVjdGVkQ291bnR9IGVsZW1lbnRzIG1hdGNoaW5nICcke3NlbGVjdG9yfScsIGJ1dCBmb3VuZCAke2NvdW50KHNlbGVjdG9yKX1gKTtcbn1cbmRlc2NyaWJlKCfwn5OwIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3NwYWNpbmcnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChodG1sKCcjaGVsbG8tYmlnLWRvbS13b3JsZCcpKS50b0JlKCdoZWxsbyA8Yj5iaWc8L2I+IHdvcmxkJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcjaGVsbG8tYmlnLXN0cmluZy13b3JsZCcpKS50b0JlKCdoZWxsbyA8Yj5iaWc8L2I+IHdvcmxkJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcjaGVsbG8tc3BhY2luZy1kb20td29ybGQnKSkudG9CZSgnNTQgaGVsbG8gd29ybGRzJyk7XG4gICAgfSk7XG4gICAgaXQoJ3N0eWxlLicsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtc2ltcGxlLWJvcmRlci1vcmFuZ2UnKVswXS5zdHlsZS5ib3JkZXIpLnRvQmUoJzNweCBzb2xpZCBvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdmFyLWJvcmRlci1vcmFuZ2UnKVswXS5zdHlsZS5ib3JkZXIpLnRvQmUoJzNweCBzb2xpZCBvcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKVswXS5zdHlsZS5ib3JkZXIpLnRvQmUoJzNweCBzb2xpZCBvcmFuZ2UnKTtcbiAgICAgICAgY2xpY2soJyN0b2dnbGUtYm9yZGVyLW9yYW5nZScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJyNzdHlsZS10b2dnbGUtYm9yZGVyLW9yYW5nZScpWzBdLnN0eWxlLmJvcmRlcikudG9CZSgnM3B4IHNvbGlkIGdyZWVuJyk7XG4gICAgICAgIGNsaWNrKCcjdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvcmRlci1vcmFuZ2UnKVswXS5zdHlsZS5ib3JkZXIpLnRvQmUoJzNweCBzb2xpZCBvcmFuZ2UnKTtcbiAgICB9KTtcbiAgICBpdCgnc3R5bGUgc2V0IGFzIG9iamVjdCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCcjc3R5bGUtdG9nZ2xlLWJvbGQnKVswXS5zdHlsZS5mb250V2VpZ2h0KS50b0JlKCcnKTtcbiAgICAgICAgY2xpY2soJyN0b2dnbGUtYm9sZCcpO1xuICAgICAgICBleHBlY3QocXVlcnkoJyNzdHlsZS10b2dnbGUtYm9sZCcpWzBdLnN0eWxlLmZvbnRXZWlnaHQpLnRvQmUoJ2JvbGQnKTtcbiAgICAgICAgY2xpY2soJyN0b2dnbGUtYm9sZCcpO1xuICAgICAgICBleHBlY3QocXVlcnkoJyNzdHlsZS10b2dnbGUtYm9sZCcpWzBdLnN0eWxlLmZvbnRXZWlnaHQpLnRvQmUoJycpO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdubyBwYXJlbnQgZWxlbWVudCB0ZXN0cycsICgpID0+IHtcbiAgICAgICAgaXQoJ25vIGltbWVkaWF0ZSBwYXJlbnQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vUGFyZW50VGFnRmllbGRzZXQnKTtcbiAgICAgICAgICAgIGV4cGVjdChlbGVtZW50Py5pbm5lclRleHQpLnRvQmUoJ05vIFBhcmVudCBUZXN0XFxuY29udGVudDFcXG50ZXN0MFxcbmNvbnRlbnQyXFxudGVzdDFcXG5jb250ZW50M1xcbnRlc3QzXFxuY29udGVudDQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdtdWx0aXBsZSBubyBwYXJlbnQgLSBlbnN1cmUgZHluYW1pYyBjb250ZW50IHJlbmRlcmVkIGluIG9yZGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub1BhcmVudFRhZ0ZpZWxkc2V0Jyk7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBjb25zdCBodG1sID0gcGFyZW50LmlubmVySFRNTC5yZXBsYWNlKC8oXigufFxcbikrPGhyIGlkPVwibm9QYXJlbnRzVGVzdDItc3RhcnRcIj58KS9nLCAnJykucmVwbGFjZSgvPGhyIGlkPVwibm9QYXJlbnRzVGVzdDItZW5kXCI+KC58XFxuKSovZywgJycpLnRyaW0oKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKS50b0JlKCc8aHI+Y29udGVudDE8aHI+dGVzdDA8aHI+Y29udGVudDI8aHI+dGVzdDE8aHI+Y29udGVudDM8aHI+dGVzdDM8aHI+Y29udGVudDQ8aHI+Jyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdjb25jYXQgc3R5bGUnLCAoKSA9PiB7XG4gICAgICAgIGJ5SWQoJ2R5bmFtaWMtYm9yZGVyLXdpZHRoJykudmFsdWUgPSAyO1xuICAgICAgICBieUlkKCdkeW5hbWljLWJvcmRlci1jb2xvcicpLnZhbHVlID0gJ3doaXRlJztcbiAgICAgICAgY2hhbmdlT25lKCcjZHluYW1pYy1ib3JkZXItd2lkdGgnKTtcbiAgICAgICAgY2hhbmdlT25lKCcjZHluYW1pYy1ib3JkZXItY29sb3InKTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2R5bmFtaWMtYm9yZGVyLWVsZW1lbnQnKS5zdHlsZS5ib3JkZXJDb2xvcikudG9CZSgnd2hpdGUnKTtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2R5bmFtaWMtYm9yZGVyLWVsZW1lbnQnKS5zdHlsZS5ib3JkZXJXaWR0aCkudG9CZSgnMnB4Jyk7XG4gICAgICAgIGJ5SWQoJ2R5bmFtaWMtYm9yZGVyLXdpZHRoJykudmFsdWUgPSAxO1xuICAgICAgICBieUlkKCdkeW5hbWljLWJvcmRlci1jb2xvcicpLnZhbHVlID0gJ2JsdWUnO1xuICAgICAgICBjaGFuZ2VPbmUoJyNkeW5hbWljLWJvcmRlci13aWR0aCcpO1xuICAgICAgICBjaGFuZ2VPbmUoJyNkeW5hbWljLWJvcmRlci1jb2xvcicpO1xuICAgICAgICBleHBlY3QoYnlJZCgnZHluYW1pYy1ib3JkZXItZWxlbWVudCcpLnN0eWxlLmJvcmRlckNvbG9yKS50b0JlKCdibHVlJyk7XG4gICAgICAgIGV4cGVjdChieUlkKCdkeW5hbWljLWJvcmRlci1lbGVtZW50Jykuc3R5bGUuYm9yZGVyV2lkdGgpLnRvQmUoJzFweCcpO1xuICAgIH0pO1xuICAgIGl0KCd0YWd2YXIgaW5qZWN0aW9ucycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGJ5SWQoJ2luamVjdC10YWd2YXItMCcpLmlubmVyVGV4dCkudG9CZShieUlkKCdpbmplY3QtcmVhZC10YWd2YXItMCcpLmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChieUlkKCdpbmplY3QtdGFndmFyLTEnKS5pbm5lclRleHQpLnRvQmUoYnlJZCgnaW5qZWN0LXJlYWQtdGFndmFyLTEnKS5pbm5lclRleHQpO1xuICAgICAgICBleHBlY3QoYnlJZCgnaW5qZWN0LXRhZ3Zhci0yJykuaW5uZXJUZXh0KS50b0JlKGJ5SWQoJ2luamVjdC1yZWFkLXRhZ3Zhci0yJykuaW5uZXJUZXh0KTtcbiAgICB9KTtcbiAgICAvKlxuICAgICAgaXQoJ2FuaW1hdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBTa2lwIGlmIHJ1bm5pbmcgaW4gYW4gZW52aXJvbm1lbnQgd2hlcmUgY29udGVudCB2aWV3IGlzbid0IHByb3Blcmx5IGxvYWRlZFxuICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudC10b2dnbGUtZngnKTtcbiAgICAgICAgaWYgKCF0b2dnbGVCdXR0b24pIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBTa2lwcGluZyBhbmltYXRpb24gdGVzdCAtIENvbnRlbnQgdmlldyBub3QgbG9hZGVkIHByb3Blcmx5IGluIHRlc3QgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChjb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScpLCAnSW5pdGlhbCBzdGF0ZTogc2hvdWxkIGhhdmUgMCB0ZXN0IGVsZW1lbnRzJykudG9CZSgwKVxuICAgICAgICBcbiAgICAgICAgLy9zaG93XG4gICAgICAgIGNsaWNrKCcjY29udGVudC10b2dnbGUtZngnKVxuICAgIFxuICAgICAgICAvLyBXYWl0IGZvciBlbGVtZW50cyB0byBhcHBlYXJcbiAgICAgICAgYXdhaXQgd2FpdEZvckVsZW1lbnRDb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScsIDMpO1xuICAgICAgICBleHBlY3QoY291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSkudG9CZSgzLCAnQWZ0ZXIgc2hvdyBjbGljazogc2hvdWxkIGhhdmUgMyB0ZXN0IGVsZW1lbnRzJylcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBlbGVtZW50cyBhcmUgYW5pbWF0aW5nIGluaXRpYWxseSAoY291bGQgYmUgMSwgMiwgb3IgMyBkZXBlbmRpbmcgb24gdGltaW5nKVxuICAgICAgICBjb25zdCBhbmltYXRpbmdDb3VudCA9IGNvdW50KCcuYW5pbWF0ZV9fYW5pbWF0ZWRbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJyk7XG4gICAgICAgIGV4cGVjdChhbmltYXRpbmdDb3VudCkudG9CZUdyZWF0ZXJUaGFuKDAsICdBZnRlciBzaG93IGNsaWNrOiBzaG91bGQgaGF2ZSBhdCBsZWFzdCAxIGFuaW1hdGluZyBlbGVtZW50JylcbiAgICAgICAgICAgIFxuICAgICAgICAvLyBXYWl0IGEgYml0IHRvIGVuc3VyZSB3ZSdyZSBzdGlsbCBtaWQtYW5pbWF0aW9uXG4gICAgICAgIGF3YWl0IHNsZWVwKHRlc3RTdGFnZ2VyQnkgLyAyKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGFsbW9zdCBzaG93biAtIHRoZXJlIG1pZ2h0IGJlIG1vcmUgYW5pbWF0aW5nIGVsZW1lbnRzIGR1ZSB0byBzdGFnZ2VyXG4gICAgICAgIGV4cGVjdChjb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScpLCAnRHVyaW5nIGFuaW1hdGlvbjogc2hvdWxkIHN0aWxsIGhhdmUgMyB0ZXN0IGVsZW1lbnRzJykudG9CZSgzKVxuICAgICAgICAvLyBEb24ndCBjaGVjayBleGFjdCBhbmltYXRpb24gY291bnQgaGVyZSBhcyBpdCBkZXBlbmRzIG9uIHN0YWdnZXIgdGltaW5nXG4gICAgICAgIGV4cGVjdCh0ZXh0Q29udGVudCgnI291dGVyLWh0bWwtZngtdGVzdCcpLCAnRHVyaW5nIGFuaW1hdGlvbjogaW5uZXIgaHRtbCBzaG91bGQgYmUgcmVuZGVyZWQnKS50b0JlKCdpbm5lciBodG1sIHRhZycpXG4gICAgXG4gICAgICAgIC8vIFdhaXQgZm9yIGFsbCBhbmltYXRpb25zIHRvIGNvbXBsZXRlXG4gICAgICAgIGF3YWl0IHdhaXRGb3JBbmltYXRpb25zVG9Db21wbGV0ZSgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScsIDApO1xuICAgICAgIFxuICAgICAgICAvLyBjb21wbGV0ZWQgc2hvd2luZ1xuICAgICAgICBleHBlY3QoY291bnQoJ1tuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSwgJ0FmdGVyIGFuaW1hdGlvbiBjb21wbGV0ZTogc2hvdWxkIGhhdmUgMyB0ZXN0IGVsZW1lbnRzJykudG9CZSgzKVxuICAgICAgICBleHBlY3QoY291bnQoJy5hbmltYXRlX19hbmltYXRlZFtuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSwgJ0FmdGVyIGFuaW1hdGlvbiBjb21wbGV0ZTogc2hvdWxkIGhhdmUgMCBhbmltYXRpbmcgZWxlbWVudHMnKS50b0JlKDApXG4gICAgICAgIFxuICAgICAgICAvLyBoaWRlXG4gICAgICAgIGNsaWNrKCcjY29udGVudC10b2dnbGUtZngnKVxuICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBhbnkgZWxlbWVudHMgYXJlIGFuaW1hdGluZyAoY291bGQgYmUgMSwgMiwgb3IgMyBkZXBlbmRpbmcgb24gdGltaW5nKVxuICAgICAgICBjb25zdCBoaWRlQW5pbWF0aW5nQ291bnQgPSBjb3VudCgnLmFuaW1hdGVfX2FuaW1hdGVkW25hbWU9dGVzdC10aGUtdGVzdGVyXScpO1xuICAgICAgICBleHBlY3QoaGlkZUFuaW1hdGluZ0NvdW50KS50b0JlR3JlYXRlclRoYW4oMCwgJ0FmdGVyIGhpZGUgY2xpY2s6IHNob3VsZCBoYXZlIGF0IGxlYXN0IDEgYW5pbWF0aW5nIGVsZW1lbnQnKVxuICAgICAgICBcbiAgICAgICAgLy8gbm8gY2hhbmdlcyB0byByZW1vdmUgeWV0XG4gICAgICAgIGV4cGVjdChjb3VudCgnW25hbWU9dGVzdC10aGUtdGVzdGVyXScpKS50b0JlKDMsICdBZnRlciBoaWRlIGNsaWNrOiBzaG91bGQgc3RpbGwgaGF2ZSAzIHRlc3QgZWxlbWVudHMnKVxuICAgICAgICBcbiAgICAgICAgLy8gV2FpdCBmb3IgYWxsIGVsZW1lbnRzIHRvIGRpc2FwcGVhclxuICAgICAgICBhd2FpdCB3YWl0Rm9yRWxlbWVudENvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJywgMCk7XG4gICAgICAgIFxuICAgICAgICAvLyBzaG91bGQgYmUgZG9uZSBkaXNhcHBlYXJpbmdcbiAgICAgICAgZXhwZWN0KGNvdW50KCdbbmFtZT10ZXN0LXRoZS10ZXN0ZXJdJykpLnRvQmUoMCwgJ0FmdGVyIGhpZGUgYW5pbWF0aW9uOiBzaG91bGQgaGF2ZSAwIHRlc3QgZWxlbWVudHMnKVxuICAgICAgICBleHBlY3QoY291bnQoJy5hbmltYXRlX19hbmltYXRlZFtuYW1lPXRlc3QtdGhlLXRlc3Rlcl0nKSkudG9CZSgwLCAnQWZ0ZXIgaGlkZSBhbmltYXRpb246IHNob3VsZCBoYXZlIDAgYW5pbWF0aW5nIGVsZW1lbnRzJylcbiAgICAgIH0pXG4gICAgKi9cbn0pO1xuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgY2xpY2ssIGh0bWwsIGh0bWxCeUlkLCBrZXl1cE9uIH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGV4cGVjdEVsbUNvdW50LCB0ZXN0Q291bnRlckVsZW1lbnRzIH0gZnJvbSAnLi90ZXN0aW5nJztcbmxldCBydW5zID0gMDtcbmRlc2NyaWJlKCfwn5KvIGNvdW50ZXJzJywgKCkgPT4ge1xuICAgIC8vIHRlc3RzIGNhbiBiZSBydW4gbXVsdGlwbGUgdGltZXMuIE9ubHkgdGhlIGZpcnN0IHRpbWUgd2lsbCB0aGlzIGV4cGVjdCBiZWxvdyB3b3JrXG4gICAgY29uc3QgZmlyc3RSdW4gPSBydW5zID09PSAwO1xuICAgICsrcnVucztcbiAgICBpdCgnYmFzaWNzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudGVySW5wdXQgPSBieUlkKCdzZXQtbWFpbi1jb3VudGVyLWlucHV0Jyk7XG4gICAgICAgIGV4cGVjdChjb3VudGVySW5wdXQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGNvdW50ZXJJbnB1dC52YWx1ZSA9ICcwJztcbiAgICAgICAga2V5dXBPbihjb3VudGVySW5wdXQpO1xuICAgICAgICBjb25zdCBiZWZvcmVSZW5kZXJDb3VudCA9IE51bWJlcihodG1sKCcjY291bnRlcnNfcmVuZGVyX2NvdW50JykpO1xuICAgICAgICBjb25zdCBiZWZvcmVJbm5lclJlbmRlckNvdW50ID0gTnVtYmVyKGh0bWwoJyNpbm5lcl9jb3VudGVyc19yZW5kZXJfY291bnQnKSk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjY29uZGl0aW9uYWwtY291bnRlcicsIDApO1xuICAgICAgICBjb25zdCBjdXJyZW50U3VicyA9IGh0bWxCeUlkKCfwn5GJLWNvdW50ZXItc3ViLWNvdW50Jyk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPinaTvuI8taW5jcmVhc2UtY291bnRlcicsICcj4p2k77iPLWNvdW50ZXItZGlzcGxheScpO1xuICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ/CfkYktY291bnRlci1zdWItY291bnQnKSkudG9CZShjdXJyZW50U3Vicyk7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkUmVuZGVyQ291bnQgPSBodG1sKCcjY291bnRlcnNfcmVuZGVyX2NvdW50Jyk7XG4gICAgICAgIC8vIGNvbnN0IHJlbmRlclRvQmUgPSAoYmVmb3JlUmVuZGVyQ291bnQgKyAyKS50b1N0cmluZygpXG4gICAgICAgIGNvbnN0IHJlbmRlclRvQmUgPSBcIjFcIjtcbiAgICAgICAgZXhwZWN0KGV4cGVjdGVkUmVuZGVyQ291bnQpLnRvQmUocmVuZGVyVG9CZSwgYGV4cGVjdGVkIHJlbmRlciBjb3VudCAke2V4cGVjdGVkUmVuZGVyQ291bnR9IHRvIGJlICR7cmVuZGVyVG9CZX1gKTtcbiAgICAgICAgLy8gdGhlIHBhcmVudCBjaGFuZ2VkIGEgdmFsdWUgcGFzc2VkIHRvIGNoaWxkIGFzIGEgcHJvcFxuICAgICAgICAvLyBsZXQgdG9CZSA9IChiZWZvcmVJbm5lclJlbmRlckNvdW50ICsgMikudG9TdHJpbmcoKVxuICAgICAgICBsZXQgdG9CZSA9IFwiMVwiO1xuICAgICAgICBsZXQgcmVuZGVyQ291bnQgPSBodG1sKCcjaW5uZXJfY291bnRlcnNfcmVuZGVyX2NvdW50Jyk7XG4gICAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSh0b0JlLCBgRXhwZWN0ZWQgcmVuZGVyQ291bnQgJHtyZW5kZXJDb3VudH0gdG8gYmUgJHt0b0JlfWApOyAvLyBleHBlY3RlZCBudW1iZXIgb2YgcmVuZGVycyB0byBiZSAke3RvQmV9IG5vdCAke3JlbmRlckNvdW50fVxuICAgICAgICBjb25zdCBwcmVJbml0Q291bnRlciA9IGh0bWwoJyPwn5SlLWluaXQtY291bnRlcicpO1xuICAgICAgICBleHBlY3QocHJlSW5pdENvdW50ZXIpLnRvQmUoJzEnLCBgI/CflKUtaW5pdC1jb3VudGVyIHRvIGJlIDEgYnV0IGl0J3MgJHtwcmVJbml0Q291bnRlcn1gKTtcbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI+KdpO+4jy1pbm5lci1jb3VudGVyJywgJyPinaTvuI8taW5uZXItZGlzcGxheScpO1xuICAgICAgICAvLyB0b0JlID0gKGJlZm9yZVJlbmRlckNvdW50ICsgNCkudG9TdHJpbmcoKVxuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWwoJyNjb3VudGVyc19yZW5kZXJfY291bnQnKTtcbiAgICAgICAgZXhwZWN0KHJlbmRlckNvdW50KS50b0JlKHRvQmUsICcjY291bnRlcnNfcmVuZGVyX2NvdW50IGZhaWwnKTsgLy8gZXhwZWN0ZWQgbnVtYmVyIG9mIHJlbmRlcnMgdG8gYmUgJHt0b0JlfSBub3QgJHtyZW5kZXJDb3VudH1cbiAgICAgICAgLy8gdGhlIGNoaWxkIGNoYW5nZWQgYSB2YWx1ZSBwYXNzZWQgZnJvbSBwYXJlbnQgYXMgYSBwcm9wXG4gICAgICAgIHJlbmRlckNvdW50ID0gaHRtbCgnI2lubmVyX2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpO1xuICAgICAgICAvLyB0b0JlID0gKGJlZm9yZUlubmVyUmVuZGVyQ291bnQgKyA0KS50b1N0cmluZygpXG4gICAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSh0b0JlKTsgLy8gZXhwZWN0ZWQgbnVtYmVyIG9mIHJlbmRlcnMgdG8gYmUgJHt0b0JlfSBub3QgJHtyZW5kZXJDb3VudH1cbiAgICAgICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfpaYtc3RhbmRhbG9uZS1jb3VudGVyJywgJyPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheScpO1xuICAgICAgICAvLyB0b0JlID0gKGJlZm9yZVJlbmRlckNvdW50ICsgKGZpcnN0UnVuID8gNiA6IDYpKS50b1N0cmluZygpXG4gICAgICAgIHJlbmRlckNvdW50ID0gaHRtbCgnI2NvdW50ZXJzX3JlbmRlcl9jb3VudCcpO1xuICAgICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUodG9CZSwgJyNjb3VudGVyc19yZW5kZXJfY291bnQgZmFpbGVkJyk7IC8vIHJlbmRlciBjb3VudCBjaGVjayBmYWlsZWRcbiAgICAgICAgLy8gdGhlIGNoaWxkIHdhcyBub3QgcmVuZGVyZWQgYWdhaW4gYmVjYXVzZSBwcm9wcyBkaWQgbm90IGNoYW5nZSBzbyB2YWx1ZSBzaG91bGQgYmUgbGVzc1xuICAgICAgICByZW5kZXJDb3VudCA9IGh0bWwoJyNpbm5lcl9jb3VudGVyc19yZW5kZXJfY291bnQnKTtcbiAgICAgICAgLy8gdG9CZSA9IChiZWZvcmVJbm5lclJlbmRlckNvdW50ICsgNCkudG9TdHJpbmcoKVxuICAgICAgICBleHBlY3QocmVuZGVyQ291bnQpLnRvQmUodG9CZSwgJyNpbm5lcl9jb3VudGVyc19yZW5kZXJfY291bnQgZmFpbGVkJyk7IC8vIGV4cGVjdGVkIG51bWJlciBvZiByZW5kZXJzIHRvIGJlICR7dG9CZX0gbm90ICR7cmVuZGVyQ291bnR9XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjY29uZGl0aW9uYWwtY291bnRlcicsIDEpO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI2NvbmRpdGlvbmFsLWRpc3BsYXknLCAxKTtcbiAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI2NvbmRpdGlvbmFsLWRpc3BsYXknKSkudG9CZSgnMicpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlckNvdW50ID0gaHRtbEJ5SWQoJ+KdpO+4j/Cfkqctc2hhbGxvdy1kaXNwbGF5Jyk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNjb25kaXRpb25hbC1jb3VudGVyJywgJyNjb25kaXRpb25hbC1kaXNwbGF5Jyk7XG4gICAgICAgIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZShodG1sQnlJZCgn4p2k77iP8J+Spy1zaGFsbG93LWRpc3BsYXknKSk7IC8vIGV4cGVjdCBzaGFsbG93IHJlbmRlciBub3QgdG8gaGF2ZSBjaGFuZ2VkXG4gICAgICAgIC8vIHRlc3QgYWdhaW4gYWZ0ZXIgaGlnaGVyIGVsZW1lbnRzIGhhdmUgaGFkIHJlcnVuc1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcj4p2k77iPLWlubmVyLWNvdW50ZXInLCAnI+KdpO+4jy1pbm5lci1kaXNwbGF5Jyk7XG4gICAgICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyPinaTvuI/wn5KnLXNoYWxsb3ctY291bnRlcicsICcj4p2k77iP8J+Spy1zaGFsbG93LWRpc3BsYXknKTtcbiAgICAgICAgc3BlZWRDbGlja0NvdW50VGVzdCgn8J+kvy1kZWVwLWNvdW50ZXInLCAn8J+kvy1kZWVwLWRpc3BsYXknLCAn4p2k77iPLWlubmVyLWNvdW50ZXInKTtcbiAgICAgICAgc3BlZWRDbGlja0NvdW50VGVzdCgn8J+Spy1zaGFsbG93LWNvdW50ZXInLCAn8J+Spy1zaGFsbG93LWRpc3BsYXknLCAn4p2k77iP8J+Spy1zaGFsbG93LWRpc3BsYXknKTtcbiAgICAgICAgc3BlZWRDbGlja0NvdW50VGVzdCgn8J+qqC1pbW11dGFibGUtY291bnRlcicsICfwn6qoLWltbXV0YWJsZS1kaXNwbGF5JywgJ+KdpO+4j/CfqqgtaW1tdXRhYmxlLWNvdW50ZXInKTtcbiAgICAgICAgc3BlZWRDbGlja0NvdW50VGVzdCgn8J+aqy1ub3dhdGNoLWNvdW50ZXInLCAn8J+aqy1ub3dhdGNoLWRpc3BsYXknLCAn4p2k77iP8J+aqy1ub3dhdGNoLWNvdW50ZXInKTtcbiAgICAgICAgLy8gcmVuZGVyQ291bnQgPSBodG1sKCcjc2hhbGxvd19jb3VudGVyc19yZW5kZXJfY291bnQnKVxuICAgICAgICAvLyB0b0JlID0gKGJlZm9yZUlubmVyUmVuZGVyQ291bnQgKyA0KS50b1N0cmluZygpXG4gICAgICAgIC8vIGV4cGVjdChyZW5kZXJDb3VudCkudG9CZSh0b0JlKSAvLyBleHBlY3RlZCBudW1iZXIgb2YgcmVuZGVycyB0byBiZSAke3RvQmV9IG5vdCAke3JlbmRlckNvdW50fVxuICAgIH0pO1xuICAgIGl0KCdjb3VudGVycy50ZXN0IHBpcGVkIHN1YmplY3QnLCAoKSA9PiB7XG4gICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgY29uc3QgY291bnRlciA9IGh0bWwoJyPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheScpO1xuICAgICAgICAgICAgY29uc3QgcGlwZTAgPSBodG1sKCcj8J+qiC1waXBlZFN1YmplY3QnKTtcbiAgICAgICAgICAgIC8vIGV4cGVjdChwaXBlMCkudG9CZShjb3VudGVyLCBgZmlyc3RSdW4gZmFpbHVyZSBwaXBlMC4gRXhwZWN0ZWQgXCIke3BpcGUwfVwiIHRvQmUgZW1wdHktc3RyaW5nIGFrYSAke2NvdW50ZXJ9YClcbiAgICAgICAgICAgIGV4cGVjdChwaXBlMCkudG9CZShcIlwiLCBgZmlyc3RSdW4gZmFpbHVyZSBwaXBlMC4gRXhwZWN0ZWQgXCIke3BpcGUwfVwiIHRvQmUgZW1wdHktc3RyaW5nYCk7XG4gICAgICAgICAgICBjb25zdCBwaXBlMiA9IGh0bWwoJyPwn6qILXBpcGVkU3ViamVjdC0yJyk7XG4gICAgICAgICAgICAvLyBleHBlY3QocGlwZTIpLnRvQmUoY291bnRlciwgYGZpcnN0UnVuIGZhaWx1cmUgcGlwZTIgZXhwZWN0ZWQgJHtwaXBlMn0gdG8gYmUgJHtjb3VudGVyfWApXG4gICAgICAgICAgICBleHBlY3QocGlwZTIpLnRvQmUoXCJcIiwgYGZpcnN0UnVuIGZhaWx1cmUgcGlwZTIgZXhwZWN0ZWQgdG9CZSBlbXB0eS1zdHJpbmdgKTtcbiAgICAgICAgICAgIGNvbnN0IHBpcGUzID0gaHRtbCgnI/CfqogtcGlwZWRTdWJqZWN0LTMnKTtcbiAgICAgICAgICAgIGV4cGVjdChwaXBlMykudG9CZShcIlwiLCBgZmlyc3RSdW4gZmFpbHVyZSBwaXBlMyBleHBlY3RlZCB0b0JlIGVtcHR5LXN0cmluZ2ApO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcj8J+lpi1zdWJqZWN0LWluY3JlYXNlLWNvdW50ZXInKTtcbiAgICAgICAgY29uc3QgcGlwZWRTdWJEaXNwbGF5ID0gaHRtbCgnI/CfqogtcGlwZWRTdWJqZWN0Jyk7XG4gICAgICAgIGNvbnN0IHN1YmplY3RDb3VudERpc3BsYXkgPSBodG1sKCcj8J+lpi1zdGFuZGFsb25lLWRpc3BsYXknKTtcbiAgICAgICAgZXhwZWN0KHBpcGVkU3ViRGlzcGxheSkudG9CZShzdWJqZWN0Q291bnREaXNwbGF5KTsgLy8gRXhwZWN0ZWQgI/CfqogtcGlwZWRTdWJqZWN0IHZhbHVlKCR7cGlwZWRTdWJEaXNwbGF5fSkgdG8gbWF0Y2ggI/CfpaYtc3RhbmRhbG9uZS1kaXNwbGF5IHZhbHVlKCR7c3ViamVjdENvdW50RGlzcGxheX0pXG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+qiC1waXBlZFN1YmplY3QtMicpKS50b0JlKGh0bWwoJyPwn6WmLXN0YW5kYWxvbmUtZGlzcGxheScpKTtcbiAgICB9KTtcbn0pO1xuZXhwb3J0IGNvbnN0IGNsaWNrU3BlZWRBbW91bnQgPSA2MDA7XG5mdW5jdGlvbiBzcGVlZENsaWNrQ291bnRUZXN0KGNvdW50ZXJRdWVyeSwgZGlzcGxheVF1ZXJ5LCBpbmNyZWFzZU91dGVyQ291bnRlclF1ZXJ5KSB7XG4gICAgY29uc3QgY2xpY2tDb3VudCA9IGh0bWxCeUlkKGRpc3BsYXlRdWVyeSk7XG4gICAgY29uc3QgZWxtID0gYnlJZChjb3VudGVyUXVlcnkpO1xuICAgIGNvbnN0IHByb3BDb3VudGVyQnRuRWxtID0gYnlJZChpbmNyZWFzZU91dGVyQ291bnRlclF1ZXJ5KTtcbiAgICBjb25zb2xlLnRpbWUoYOKMmu+4jyAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNjAwOyBpbmRleCsrKSB7XG4gICAgICAgIGVsbS5jbGljaygpO1xuICAgIH1cbiAgICBjb25zb2xlLnRpbWVFbmQoYOKMmu+4jyAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBjb25zb2xlLnRpbWUoYOKMmu+4jyBvdXRlciAke2NvdW50ZXJRdWVyeX1gKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNjAwOyBpbmRleCsrKSB7XG4gICAgICAgIHByb3BDb3VudGVyQnRuRWxtLmNsaWNrKCk7XG4gICAgfVxuICAgIGNvbnNvbGUudGltZUVuZChg4oya77iPIG91dGVyICR7Y291bnRlclF1ZXJ5fWApO1xuICAgIGNvbnN0IGRpc3BsYXlRdWVyeVRpbWUgPSAoTnVtYmVyKGNsaWNrQ291bnQpICsgY2xpY2tTcGVlZEFtb3VudCkudG9TdHJpbmcoKTtcbiAgICBleHBlY3QoaHRtbEJ5SWQoZGlzcGxheVF1ZXJ5KSkudG9CZShkaXNwbGF5UXVlcnlUaW1lKTsgLy8gJHtkaXNwbGF5UXVlcnl9XG59XG4iLCJpbXBvcnQgeyBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGh0bWwsIGNsaWNrLCBjb3VudCB9IGZyb20gJy4vdGVzdGluZyc7XG5pdCgnZGVzdHJveXMnLCBhc3luYyAoKSA9PiB7XG4gICAgZXhwZWN0KGNvdW50KCcjZGVzdHJveUNvdW50JykpLnRvQmUoMSk7XG4gICAgZXhwZWN0KGNvdW50KCcjdG9nZ2xlLWRlc3Ryb3lzJykpLnRvQmUoMSk7XG4gICAgY29uc3QgZGVzQ291bnQwID0gY291bnQoJyNkZXN0cm95YWJsZS1jb250ZW50Jyk7XG4gICAgZXhwZWN0KGRlc0NvdW50MCkudG9CZSgxLCBgRXhwZWN0ZWQgI2Rlc3Ryb3lhYmxlLWNvbnRlbnQgdG8gYmUgZGVmaW5lZGApO1xuICAgIGxldCBvbGREZXN0cm95Q291bnQgPSBOdW1iZXIoaHRtbCgnI2Rlc3Ryb3lDb3VudCcpKTtcbiAgICAvLyBjYXVzZSBkZXN0cm95XG4gICAgY2xpY2soJyN0b2dnbGUtZGVzdHJveXMnKTtcbiAgICBsZXQgZGVzdHJveUNvdW50ID0gTnVtYmVyKGh0bWwoJyNkZXN0cm95Q291bnQnKSk7XG4gICAgY29uc3QgdXBkYXRlZENvdW50ID0gb2xkRGVzdHJveUNvdW50ICsgMTtcbiAgICBleHBlY3QoZGVzdHJveUNvdW50KS50b0JlKHVwZGF0ZWRDb3VudCwgYEV4cGVjdGVkICNkZXN0cm95Q291bnQuaW5uZXJIVE1MIHRvIGJlICR7dXBkYXRlZENvdW50fSBidXQgaXQgaXMgJHtkZXN0cm95Q291bnR9YCk7XG4gICAgLy8gYXdhaXQgc2xlZXAoMCkgLy8gU0hPVUxEIE5PVCBORUVEIVxuICAgIGNvbnN0IGRDb250ZW50Q291bnQgPSBjb3VudCgnI2Rlc3Ryb3lhYmxlLWNvbnRlbnQnKTtcbiAgICBleHBlY3QoZENvbnRlbnRDb3VudCkudG9CZSgwLCBgRXhwZWN0ZWQgI2Rlc3Ryb3lhYmxlLWNvbnRlbnQgdG8gbm90IGV4aXN0YCk7XG4gICAgb2xkRGVzdHJveUNvdW50ID0gZGVzdHJveUNvdW50O1xuICAgIC8vIGNhdXNlIHJlc3RvcmVcbiAgICBjbGljaygnI3RvZ2dsZS1kZXN0cm95cycpO1xuICAgIGRlc3Ryb3lDb3VudCA9IE51bWJlcihodG1sKCcjZGVzdHJveUNvdW50JykpO1xuICAgIGV4cGVjdChkZXN0cm95Q291bnQpLnRvQmUob2xkRGVzdHJveUNvdW50KTtcbiAgICBleHBlY3QoY291bnQoJyNkZXN0cm95YWJsZS1jb250ZW50JykpLnRvQmUoMSk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IGJ5SWQsIHRyaWdnZXJDaGFuZ2VFbG0sIHF1ZXJ5IH0gZnJvbSAnLi90ZXN0aW5nJztcbmRlc2NyaWJlKCd0YWdnZWRqcy1kdW1wJywgKCkgPT4ge1xuICAgIGl0KCdzdGFydHMgd2l0aCBub3RoaW5nIFRIRU4gYmVjb21lcyBvYmplY3QgVEhFTiBvYmplY3Qgd2l0aCBhcnJheScsICgpID0+IHtcbiAgICAgICAgY29uc3QgZWxtID0gYnlJZCgndGFnZ2VkanMtZHVtcC11c2VyLXRleHRhcmVhJyk7XG4gICAgICAgIGV4cGVjdChlbG0udmFsdWUpLnRvQmUoJycpO1xuICAgICAgICBlbG0udmFsdWUgPSAne3Rlc3Q6MjJ9JztcbiAgICAgICAgdHJpZ2dlckNoYW5nZUVsbShlbG0pO1xuICAgICAgICBleHBlY3QoZWxtLnZhbHVlKS50b0JlKCd7dGVzdDoyMn0nKTtcbiAgICAgICAgY29uc3QgcmVzdWx0RWxtcyA9IHF1ZXJ5KCcjdGFnZ2VkanMtZHVtcC11c2VyLXJlc3VsdCAudGFnZ2VkanMtc2ltcGxlLWxhYmVsJyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRFbG1zLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdEVsbXNbMF0uaW5uZXJUZXh0KS50b0JlKCd0ZXN0Jyk7XG4gICAgICAgIGVsbS52YWx1ZSA9ICd7dGVzdDoyMiwgYWNlOlsyMiwge3Rlc3RiOjMzfSwgNTVdfSc7XG4gICAgICAgIHRyaWdnZXJDaGFuZ2VFbG0oZWxtKTtcbiAgICAgICAgY29uc3QgcmVzdWx0RWxtczIgPSBxdWVyeSgnI3RhZ2dlZGpzLWR1bXAtdXNlci1yZXN1bHQgLnRhZ2dlZGpzLXNpbXBsZS1sYWJlbCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0RWxtczIubGVuZ3RoKS50b0JlKDIpO1xuICAgICAgICBleHBlY3QocmVzdWx0RWxtczJbMF0uaW5uZXJUZXh0KS50b0JlKCd0ZXN0Jyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHRFbG1zMlsxXS5pbm5lclRleHQpLnRvQmUoJ3Rlc3RiJyk7XG4gICAgICAgIGVsbS52YWx1ZSA9ICcnO1xuICAgICAgICB0cmlnZ2VyQ2hhbmdlRWxtKGVsbSk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgY2xpY2ssIGh0bWwgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgdGVzdENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5pdCgnZnVuY3Rpb24gaW4gcHJvcHMnLCBhc3luYyAoKSA9PiB7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI2Z1bl9pbl9wcm9wMScsICcjZnVuX2luX3Byb3BfZGlzcGxheScpO1xuICAgIHRlc3RDb3VudGVyRWxlbWVudHMoJyNmdW5faW5fcHJvcDInLCAnI2Z1bl9pbl9wcm9wX2Rpc3BsYXknKTtcbiAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjZnVuX2luX3Byb3AzJywgJyNmdW5faW5fcHJvcF9kaXNwbGF5Jyk7XG4gICAgZXhwZWN0KGh0bWwoJyNtYWluX3dyYXBfc3RhdGUnKSkudG9CZSgndGFnZ2plZGpzLXdyYXBwZWQnKTtcbiAgICBjbGljaygnI3RvZ2dsZS1mdW4taW4tY2hpbGQnKTtcbiAgICBjbGljaygnI2Z1bi1wYXJlbnQtYnV0dG9uJyk7XG4gICAgLy8gZXhwZWN0KGh0bWwoJyNtYWluX3dyYXBfc3RhdGUnKSkudG9CZSgnbm93cmFwJylcbiAgICBjbGljaygnI3RvZ2dsZS1mdW4taW4tY2hpbGQnKTtcbiAgICBjbGljaygnI2Z1bi1wYXJlbnQtYnV0dG9uJyk7XG4gICAgZXhwZWN0KGh0bWwoJyNtYWluX3dyYXBfc3RhdGUnKSkudG9CZSgndGFnZ2plZGpzLXdyYXBwZWQnKTtcbn0pO1xuIiwiaW1wb3J0IHsgaXQsIGV4cGVjdCwgZGVzY3JpYmUsIGFmdGVyRWFjaCwgYmVmb3JlRWFjaCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkIH0gZnJvbSAnLi90ZXN0aW5nJztcbmNvbnNvbGUubG9nKCdJTkNMVURFRCEhIScpO1xuZGVzY3JpYmUoJ0luamVjdGlvbiBUZXN0JywgKCkgPT4ge1xuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgYWxsIGl0ZW1zXG4gICAgY29uc3QgZ2V0SXRlbXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGJ5SWQoYGluamVjdGlvbi10ZXN0LWl0ZW0tJHtpfWApO1xuICAgICAgICAgICAgaWYgKGl0ZW0pXG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfTtcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGFsbCBjaGVja2JveGVzXG4gICAgY29uc3QgZ2V0Q2hlY2tib3hlcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBnZXRJdGVtcygpO1xuICAgICAgICByZXR1cm4gaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKSk7XG4gICAgfTtcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGNoZWNrZWQgaXRlbXMgY291bnRcbiAgICBjb25zdCBnZXRDaGVja2VkQ291bnQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIHJldHVybiBjaGVja2JveGVzLmZpbHRlcihjYiA9PiBjYj8uY2hlY2tlZCkubGVuZ3RoO1xuICAgIH07XG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJlc2V0IGFsbCBjaGVja2JveGVzIHRvIHVuY2hlY2tlZCBzdGF0ZVxuICAgIGNvbnN0IHJlc2V0Q2hlY2tib3hlcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBnZXRJdGVtcygpO1xuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICAvLyBDbGljayBvbiBpdGVtcyB0aGF0IGFyZSBjaGVja2VkIHRvIHVuY2hlY2sgdGhlbVxuICAgICAgICBjaGVja2JveGVzLmZvckVhY2goKGNoZWNrYm94LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoZWNrYm94Py5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNbaW5kZXhdLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gRW5zdXJlIGNsZWFuIHN0YXRlIGJlZm9yZSBhbmQgYWZ0ZXIgZWFjaCB0ZXN0XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlc2V0Q2hlY2tib3hlcygpO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlc2V0Q2hlY2tib3hlcygpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgaGF2ZSBpbmplY3Rpb24gdGVzdGluZyBzZWN0aW9uIHdpdGggYWxsIGl0ZW1zIHVuY2hlY2tlZCBpbml0aWFsbHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGluamVjdGlvblRlc3RpbmdXcmFwID0gYnlJZCgnaW5qZWN0aW9uLXRlc3Rpbmctd3JhcC1ob3N0Jyk7XG4gICAgICAgIGV4cGVjdChpbmplY3Rpb25UZXN0aW5nV3JhcCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBoYXZlIDEwIGl0ZW1zXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgZXhwZWN0KGl0ZW1zLmxlbmd0aCkudG9CZSgxMCk7XG4gICAgICAgIC8vIENoZWNrIGFsbCBjaGVja2JveGVzIGFyZSB1bmNoZWNrZWQgaW5pdGlhbGx5XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XG4gICAgICAgICAgICBleHBlY3QoY2hlY2tib3g/LmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNlbGVjdCBpbmRpdmlkdWFsIGl0ZW1zIHdoZW4gY2xpY2tlZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBnZXRJdGVtcygpO1xuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICAvLyBJbml0aWFsbHkgbm8gaXRlbXMgc2VsZWN0ZWRcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDApO1xuICAgICAgICAvLyBDbGljayBmaXJzdCBpdGVtXG4gICAgICAgIGl0ZW1zWzBdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzBdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgxKTtcbiAgICAgICAgLy8gQ2xpY2sgdGhpcmQgaXRlbVxuICAgICAgICBpdGVtc1syXS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1syXS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMik7XG4gICAgICAgIC8vIENsaWNrIGZpZnRoIGl0ZW1cbiAgICAgICAgaXRlbXNbNF0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbNF0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDMpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZGVzZWxlY3QgaXRlbXMgd2hlbiBjbGlja2VkIGFnYWluJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMCk7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGdldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gU2VsZWN0IGEgZmV3IGl0ZW1zIGZpcnN0XG4gICAgICAgIGl0ZW1zWzFdLmNsaWNrKCk7XG4gICAgICAgIGl0ZW1zWzNdLmNsaWNrKCk7XG4gICAgICAgIGl0ZW1zWzVdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgzKTtcbiAgICAgICAgLy8gRGVzZWxlY3QgaXRlbSAzXG4gICAgICAgIGl0ZW1zWzNdLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzNdLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMik7XG4gICAgICAgIC8vIERlc2VsZWN0IGl0ZW0gMVxuICAgICAgICBpdGVtc1sxXS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1sxXS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDEpO1xuICAgICAgICAvLyBEZXNlbGVjdCBpdGVtIDVcbiAgICAgICAgaXRlbXNbNV0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbNV0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNlbGVjdCBtdWx0aXBsZSBpdGVtcyB3aGVuIGNsaWNraW5nIG9uIGRpZmZlcmVudCBpdGVtcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBnZXRJdGVtcygpO1xuICAgICAgICBjb25zdCBjaGVja2JveGVzID0gZ2V0Q2hlY2tib3hlcygpO1xuICAgICAgICAvLyBTZWxlY3QgaXRlbXMgMCwgMiwgNCwgNiwgOFxuICAgICAgICBpdGVtc1swXS5jbGljaygpO1xuICAgICAgICBpdGVtc1syXS5jbGljaygpO1xuICAgICAgICBpdGVtc1s0XS5jbGljaygpO1xuICAgICAgICBpdGVtc1s2XS5jbGljaygpO1xuICAgICAgICBpdGVtc1s4XS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1swXS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1sxXS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMl0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbM10uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzRdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzVdLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1s2XS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1s3XS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbOF0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbOV0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSg1KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRvZ2dsZSBzZWxlY3Rpb24gc3RhdGUgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIC8vIENsaWNrIGl0ZW0gMCBtdWx0aXBsZSB0aW1lc1xuICAgICAgICBpdGVtc1swXS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1swXS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBpdGVtc1swXS5jbGljaygpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1swXS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMF0uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbMF0uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBtYWludGFpbiBzZWxlY3Rpb24gc3RhdGUgYWNyb3NzIG11bHRpcGxlIG9wZXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGdldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gU2VsZWN0IHNvbWUgaXRlbXNcbiAgICAgICAgaXRlbXNbMV0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbMl0uY2xpY2soKTtcbiAgICAgICAgaXRlbXNbM10uY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGdldENoZWNrZWRDb3VudCgpKS50b0JlKDMpO1xuICAgICAgICAvLyBBZGQgbW9yZSBzZWxlY3Rpb25zXG4gICAgICAgIGl0ZW1zWzddLmNsaWNrKCk7XG4gICAgICAgIGl0ZW1zWzldLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSg1KTtcbiAgICAgICAgLy8gUmVtb3ZlIHNvbWUgc2VsZWN0aW9uc1xuICAgICAgICBpdGVtc1syXS5jbGljaygpO1xuICAgICAgICBpdGVtc1s3XS5jbGljaygpO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMyk7XG4gICAgICAgIC8vIFZlcmlmeSBjb3JyZWN0IGl0ZW1zIGFyZSBzdGlsbCBzZWxlY3RlZFxuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1sxXS5jaGVja2VkKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY2hlY2tib3hlc1syXS5jaGVja2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbM10uY2hlY2tlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrYm94ZXNbN10uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzldLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXN0b3JlIHRvIG9yaWdpbmFsIHVuY2hlY2tlZCBzdGF0ZSBhZnRlciB0ZXN0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtcyA9IGdldEl0ZW1zKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXMgPSBnZXRDaGVja2JveGVzKCk7XG4gICAgICAgIC8vIFNlbGVjdCBhbGwgaXRlbXNcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2xpY2soKSk7XG4gICAgICAgIGV4cGVjdChnZXRDaGVja2VkQ291bnQoKSkudG9CZSgxMCk7XG4gICAgICAgIC8vIFJlc2V0XG4gICAgICAgIHJlc2V0Q2hlY2tib3hlcygpO1xuICAgICAgICAvLyBWZXJpZnkgYWxsIGFyZSB1bmNoZWNrZWRcbiAgICAgICAgY2hlY2tib3hlcy5mb3JFYWNoKGNoZWNrYm94ID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChjaGVja2JveD8uY2hlY2tlZCkudG9CZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QoZ2V0Q2hlY2tlZENvdW50KCkpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcmFwaWQgY2xpY2tpbmcgd2l0aG91dCBpc3N1ZXMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGdldENoZWNrYm94ZXMoKTtcbiAgICAgICAgLy8gUmFwaWRseSBjbGljayB0aGUgc2FtZSBpdGVtXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgaXRlbXNbMF0uY2xpY2soKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTaG91bGQgYmUgdW5jaGVja2VkIChldmVuIG51bWJlciBvZiBjbGlja3MpXG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzBdLmNoZWNrZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAvLyBPbmUgbW9yZSBjbGlja1xuICAgICAgICBpdGVtc1swXS5jbGljaygpO1xuICAgICAgICAvLyBTaG91bGQgYmUgY2hlY2tlZCAob2RkIG51bWJlciBvZiBjbGlja3MpXG4gICAgICAgIGV4cGVjdChjaGVja2JveGVzWzBdLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgdmlzdWFsIGluZGljYXRvcnMgd2hlbiBpdGVtcyBhcmUgc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0SXRlbXMoKTtcbiAgICAgICAgLy8gQ2xpY2sgdG8gc2VsZWN0IGl0ZW0gMFxuICAgICAgICBpdGVtc1swXS5jbGljaygpO1xuICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBzdHlsZSBoYXMgY2hhbmdlZCAoZ3JlZW4gYmFja2dyb3VuZCBmb3Igc2VsZWN0ZWQpXG4gICAgICAgIGNvbnN0IGl0ZW0wU3R5bGUgPSBpdGVtc1swXS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgICAgIGV4cGVjdChpdGVtMFN0eWxlLmluY2x1ZGVzKCdiYWNrZ3JvdW5kOiByZ2IoNzYsIDE3NSwgODApJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChpdGVtMFN0eWxlLmluY2x1ZGVzKCdib3JkZXI6IDNweCBzb2xpZCByZ2IoNTEsIDUxLCA1MSknKSkudG9CZSh0cnVlKTtcbiAgICAgICAgLy8gQ2hlY2sgdW5zZWxlY3RlZCBpdGVtIGhhcyBibHVlIGJhY2tncm91bmRcbiAgICAgICAgY29uc3QgaXRlbTFTdHlsZSA9IGl0ZW1zWzFdLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSB8fCAnJztcbiAgICAgICAgZXhwZWN0KGl0ZW0xU3R5bGUuaW5jbHVkZXMoJ2JhY2tncm91bmQ6IHJnYigzMywgMTUwLCAyNDMpJykpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChpdGVtMVN0eWxlLmluY2x1ZGVzKCdib3JkZXI6IDFweCBzb2xpZCByZ2IoMTUzLCAxNTMsIDE1MyknKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbn0pO1xuIiwiaW1wb3J0IHsgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBieUlkLCBodG1sQnlJZCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBleHBlY3RFbG1Db3VudCwgZXhwZWN0TWF0Y2hlZEh0bWwgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaXQoJ/Cfqp4gbWlycm9yIHRlc3RpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0RWxtQ291bnQoJyNtaXJyb3ItY291bnRlci1kaXNwbGF5JywgMik7XG4gICAgZXhwZWN0RWxtQ291bnQoJyNtaXJyb3ItY291bnRlci1idXR0b24nLCAyKTtcbiAgICBjb25zdCBjb3VudGVyID0gTnVtYmVyKGh0bWxCeUlkKCdtaXJyb3ItY291bnRlci1kaXNwbGF5JykpO1xuICAgIGJ5SWQoJ21pcnJvci1jb3VudGVyLWJ1dHRvbicpLmNsaWNrKCk7XG4gICAgZXhwZWN0KGNvdW50ZXIgKyAxKS50b0JlKE51bWJlcihodG1sQnlJZCgnbWlycm9yLWNvdW50ZXItZGlzcGxheScpKSk7XG4gICAgZXhwZWN0RWxtQ291bnQoJyNtaXJyb3ItY291bnRlci1kaXNwbGF5JywgMik7XG4gICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNtaXJyb3ItY291bnRlci1kaXNwbGF5Jyk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyB0ZXN0Q291bnRlckVsZW1lbnRzIH0gZnJvbSAnLi90ZXN0aW5nJztcbml0KCdvbmVSZW5kZXInLCAoKSA9PiB7XG4gICAgZXhwZWN0KGh0bWwoJyNvbmVSZW5kZXJfdGFnX3RzX3JlbmRlcl9jb3VudCcpKS50b0JlKCcxJyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfkY0tY291bnRlci1idXR0b24nLCAnI/CfkY0tY291bnRlci1kaXNwbGF5Jyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfkY3wn5SoLWNvdW50ZXItYnV0dG9uJywgJyPwn5GN8J+UqC1jb3VudGVyLWRpc3BsYXknKTtcbiAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcj8J+RjfCflKgtY291bnRlci1idXR0b24nLCAnI/CfkY3wn5SoLWNvdW50ZXItc3ViamVjdC1kaXNwbGF5Jyk7XG4gICAgdGVzdENvdW50ZXJFbGVtZW50cygnI/CfkY3wn5SoLWNvdW50ZXItYnV0dG9uJywgJyPwn5OhLXNpZ25hbC1jb3VudGVyLWRpc3BsYXknKTtcbiAgICBleHBlY3QoaHRtbCgnI29uZVJlbmRlcl90YWdfdHNfcmVuZGVyX2NvdW50JykpLnRvQmUoJzEnKTtcbn0pO1xuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgaHRtbCwgaHRtbEJ5SWQsIHF1ZXJ5IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGV4cGVjdEhUTUwsIGV4cGVjdE1hdGNoZWRIdG1sLCB0ZXN0Q291bnRlckVsZW1lbnRzLCB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn8J+nsyBwcm9wcycsICgpID0+IHtcbiAgICBpdCgnanNvbicsICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvcHNUZXh0YXJlYSA9IGJ5SWQoJ3Byb3BzLWRlYnVnLXRleHRhcmVhJyk7XG4gICAgICAgIGV4cGVjdChwcm9wc1RleHRhcmVhLnZhbHVlLnJlcGxhY2UoL1xccy9nLCAnJykpLnRvQmUoYHtcInRlc3RcIjozMyxcInhcIjpcInlcIn1gKTtcbiAgICB9KTtcbiAgICBpdCgndGVzdCBkdWVscycsICgpID0+IHtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjcHJvcHNEZWJ1Zy3wn6WpLTAtYnV0dG9uJywgJyNwcm9wc0RlYnVnLfCfpaktMC1kaXNwbGF5J10sIFsnI3Byb3BzRGVidWct8J+lqS0xLWJ1dHRvbicsICcjcHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheSddKTtcbiAgICB9KTtcbiAgICBpdCgnY2hpbGQgcHJvcCBjb21tdW5pY2F0aW9ucycsICgpID0+IHtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjcHJvcHNEZWJ1Zy3wn6WpLTEtYnV0dG9uJywgJyNwcm9wc0RlYnVnLfCfpaktMS1kaXNwbGF5J10sIFsnI3Byb3BzT25lTGV2ZWxGdW5VcGRhdGUt8J+lqS1idXR0b24nLCAnI3Byb3BzT25lTGV2ZWxGdW5VcGRhdGUt8J+lqS1kaXNwbGF5J10pO1xuICAgIH0pO1xuICAgIGl0KCdiYXNpY3MnLCAoKSA9PiB7XG4gICAgICAgIC8vIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIHdhdGNoIGNvdW50ZWQgYSBjaGFuZ2UgaGFwcGVucyB0byBtYXRjaCB0aGF0IGluY3JlYXNlIGNvdW50ZXJcbiAgICAgICAgY29uc3QgZnVuVXBkYXRlVmFsdWUgPSBodG1sKCcjcHJvcHNPbmVMZXZlbEZ1blVwZGF0ZS3wn6WpLWRpc3BsYXknKTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IGh0bWwoJyNwcm9wc0RlYnVnLfCfpaktY2hhbmdlLWNvdW50LWRpc3BsYXknKTtcbiAgICAgICAgLy8gdGVzdCB0aGF0IHdhdGNoIHJ1bnMgb25Jbml0XG4gICAgICAgIGV4cGVjdChjaGFuZ2VkKS50b0JlKChOdW1iZXIoZnVuVXBkYXRlVmFsdWUpICsgMSkudG9TdHJpbmcoKSk7XG4gICAgICAgIGNvbnN0IG93bmVySFRNTCA9IGJ5SWQoJ3Byb3BzRGVidWct8J+lqS0wLWRpc3BsYXknKS5pbm5lckhUTUw7XG4gICAgICAgIGNvbnN0IHBhcmVudEhUTUwgPSBieUlkKCdwcm9wc0RlYnVnLfCfpaktMS1kaXNwbGF5JykuaW5uZXJIVE1MO1xuICAgICAgICBjb25zdCBjaGlsZEhUTUwgPSBieUlkKCdwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktZGlzcGxheScpLmlubmVySFRNTDtcbiAgICAgICAgY29uc3Qgb3duZXJOdW0gPSBOdW1iZXIob3duZXJIVE1MKTtcbiAgICAgICAgY29uc3QgcGFyZW50TnVtID0gTnVtYmVyKHBhcmVudEhUTUwpO1xuICAgICAgICBjb25zdCBjaGlsZE51bSA9IE51bWJlcihjaGlsZEhUTUwpO1xuICAgICAgICBleHBlY3QocGFyZW50TnVtKS50b0JlKGNoaWxkTnVtKTtcbiAgICAgICAgZXhwZWN0KG93bmVyTnVtICsgMikudG9CZShwYXJlbnROdW0pOyAvLyB0ZXN0aW5nIG9mIHNldFByb3AoKSBkb2Vzbid0IGNoYW5nZSBvd25lclxuICAgIH0pO1xuICAgIGl0KCdsZXRQcm9wJywgKCkgPT4ge1xuICAgICAgICAvLyBsb2NhbCBhbmQgb3V0c2lkZSBjdXJyZW50bHkgbWF0Y2hcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNwcm9wc0RlYnVnLfCfpaktMC1kaXNwbGF5JywgJyNwcm9wc0RlYnVnLfCfpaktbGV0LXByb3AtZGlzcGxheScpO1xuICAgICAgICBjb25zdCBwcm9wQ291bnRlciA9IE51bWJlcihodG1sKCcjcHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheScpKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcXVlcnkoJyNwcm9wc0RlYnVnLfCfpaktMi1idXR0b24nKVswXS5fY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnbm8tZGF0YS1ldmVyJyk7XG4gICAgICAgIC8vIG91dGVyIHNob3VsZCBub3QgaGF2ZSBjaGFuZ2VkXG4gICAgICAgIGV4cGVjdChodG1sKCcjcHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheScpKS50b0JlKHByb3BDb3VudGVyLnRvU3RyaW5nKCkpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI3Byb3BzRGVidWct8J+lqS1sZXQtcHJvcC1kaXNwbGF5JykpLnRvQmUoKHByb3BDb3VudGVyICsgMSkudG9TdHJpbmcoKSk7XG4gICAgICAgIC8vIGVuZCBvZiB0ZXN0IHB1dCBhbGwgaW4gc3luY1xuICAgICAgICBieUlkKCdwcm9wc0RlYnVnLfCfpaktMS1idXR0b24nKS5jbGljaygpO1xuICAgIH0pO1xuICAgIGl0KCdwcm9wcyBhcyBmdW5jdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN5bmNDb3VudGVyID0gTnVtYmVyKGh0bWxCeUlkKCdzeW5jLXByb3AtbnVtYmVyLWRpc3BsYXknKSk7XG4gICAgICAgIC8vIGNvbnN0IHN5bmNDb3VudGVyID0gTnVtYmVyKCBodG1sQnlJZCgnc3luYy1wcm9wLWNoaWxkLWRpc3BsYXknKSApXG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjc3luYy1wcm9wLW51bWJlci1kaXNwbGF5JywgJyNzeW5jLXByb3AtY2hpbGQtZGlzcGxheScpO1xuICAgICAgICBieUlkKCdzeW5jLXByb3AtY2hpbGQtYnV0dG9uJykuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0SFRNTCgnI3N5bmMtcHJvcC1udW1iZXItZGlzcGxheScsIChzeW5jQ291bnRlciArIDIpLnRvU3RyaW5nKCkpO1xuICAgICAgICB0ZXN0Q291bnRlckVsZW1lbnRzKCcjbm90aGluZy1wcm9wLWNvdW50ZXItYnV0dG9uJywgJyNub3RoaW5nLXByb3AtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgICAgIGV4cGVjdEhUTUwoJyNzeW5jLXByb3AtbnVtYmVyLWRpc3BsYXknLCAoc3luY0NvdW50ZXIgKyAyKS50b1N0cmluZygpKTtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNzeW5jLXByb3AtY291bnRlci1kaXNwbGF5JywgJyNub3RoaW5nLXByb3AtY291bnRlci1kaXNwbGF5Jyk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBjaGFuZ2VFbG0gfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/Cfq7QgcHJvdmlkZXJzJywgKCkgPT4ge1xuICAgIGl0KCdiYXNpY3MnLCAoKSA9PiB7XG4gICAgICAgIHRlc3REdWVsQ291bnRlckVsZW1lbnRzKFsnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYwtMC1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYwtMC1kaXNwbGF5J10sIFsnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYwtMS1idXR0b24nLCAnI2luY3JlYXNlLXByb3ZpZGVyLfCfjYwtMS1kaXNwbGF5J10pO1xuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTAtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTAtZGlzcGxheSddLCBbJyNpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTEtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTEtZGlzcGxheSddKTtcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0wLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0wLWRpc3BsYXknXSwgWycjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0xLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0xLWRpc3BsYXknXSk7XG4gICAgfSk7XG4gICAgaXQoJ2lubmVyIG91dGVyIGRlYnVnJywgKCkgPT4ge1xuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNpbmNyZWFzZS1wcm9wLfCfkLctMC1idXR0b24nLCAnI2luY3JlYXNlLXByb3At8J+Qty0wLWRpc3BsYXknXSwgWycjaW5jcmVhc2UtcHJvcC3wn5C3LTEtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm9wLfCfkLctMS1kaXNwbGF5J10pO1xuICAgICAgICAvLyBjaGFuZ2UgYSBjb3VudGVyIGluIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyhbJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTAtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTAtZGlzcGxheSddLCBbJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTEtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm92aWRlci3wn42ALTEtZGlzcGxheSddKTtcbiAgICAgICAgLy8gbm93IGVuc3VyZSB0aGF0IHRoaXMgaW5uZXIgdGFnIHN0aWxsIG9wZXJhdGVzIGNvcnJlY3RseSBldmVuIHRob3VnaCBwYXJlbnQganVzdCByZW5kZXJlZCBidXQgaSBkaWQgbm90IGZyb20gdGhhdCBjaGFuZ2VcbiAgICAgICAgdGVzdER1ZWxDb3VudGVyRWxlbWVudHMoWycjaW5jcmVhc2UtcHJvcC3wn5C3LTAtYnV0dG9uJywgJyNpbmNyZWFzZS1wcm9wLfCfkLctMC1kaXNwbGF5J10sIFsnI2luY3JlYXNlLXByb3At8J+Qty0xLWJ1dHRvbicsICcjaW5jcmVhc2UtcHJvcC3wn5C3LTEtZGlzcGxheSddKTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnaG9zdCBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgICAgICBpdCgncGFyZW50IGhhcyByZWQgYm9yZGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1wYXJlbnQnKTtcbiAgICAgICAgICAgIGV4cGVjdChwYXJlbnRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgcmVkIGluIFJHQiBmb3JtYXQgKGJyb3dzZXJzIHR5cGljYWxseSByZXR1cm4gcmdiL3JnYmEpXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzUmVkID0gc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdyZ2IoMjU1LCAwLCAwKScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmVkJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGhhc1JlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBleHBlY3Qoc3R5bGVzLmJvcmRlcldpZHRoKS50b0JlKCcycHgnKTtcbiAgICAgICAgICAgICAgICBleHBlY3Qoc3R5bGVzLmJvcmRlclN0eWxlKS50b0JlKCdzb2xpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ2NoaWxkIGhhcyBncmVlbiBib3JkZXInLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtY2hpbGQnKTtcbiAgICAgICAgICAgIGV4cGVjdChjaGlsZEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAoY2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY2hpbGRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgZ3JlZW4gaW4gUkdCIGZvcm1hdFxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0dyZWVuID0gc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdyZ2IoMCwgMTI4LCAwKScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygnZ3JlZW4nKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoaGFzR3JlZW4pLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHN0eWxlcy5ib3JkZXJXaWR0aCkudG9CZSgnMnB4Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHN0eWxlcy5ib3JkZXJTdHlsZSkudG9CZSgnc29saWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjaGlsZCBoYXMgY29ycmVjdCBpbm5lckhUTUwnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtY2hpbGQnKTtcbiAgICAgICAgICAgIGV4cGVjdChjaGlsZEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAoY2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGNoaWxkRWxlbWVudC5pbm5lckhUTUwudHJpbSgpKS50b0JlKCd3b25kZXJmdWwgLSBwYXJlbnQocmVkKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3BhcmVudCBjb250YWlucyBjaGlsZCBlbGVtZW50JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1wYXJlbnQnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1jaGlsZCcpO1xuICAgICAgICAgICAgZXhwZWN0KHBhcmVudEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQgJiYgY2hpbGRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHBhcmVudEVsZW1lbnQuY29udGFpbnMoY2hpbGRFbGVtZW50KSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdwYXJlbnQgY29sb3IgY2hhbmdlcyB3aGVuIHNlbGVjdCBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50Q29sb3JTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFyZW50LWNvbG9yLXNlbGVjdCcpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1wYXJlbnQnKTtcbiAgICAgICAgICAgIGV4cGVjdChwYXJlbnRDb2xvclNlbGVjdCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChwYXJlbnRFbGVtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgaWYgKHBhcmVudENvbG9yU2VsZWN0ICYmIHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgdG8gYmx1ZVxuICAgICAgICAgICAgICAgIHBhcmVudENvbG9yU2VsZWN0LnZhbHVlID0gJ2JsdWUnO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbG9yU2VsZWN0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgIGNoYW5nZUVsbShwYXJlbnRDb2xvclNlbGVjdCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzQmx1ZSA9IHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygnYmx1ZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDAsIDAsIDI1NSknKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoaGFzQmx1ZSkudG9CZSh0cnVlLCBgaW4tY3ljbGUtcGFyZW50IHNob3VsZCBiZSBibHVlIG5vdCAke3N0eWxlcy5ib3JkZXJDb2xvcn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjaGlsZCBjb2xvciBjaGFuZ2VzIHdoZW4gc2VsZWN0IGlzIGNoYW5nZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZENvbG9yU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoaWxkLWNvbG9yLXNlbGVjdCcpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luLWN5Y2xlLWNoaWxkJyk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGRDb2xvclNlbGVjdCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjaGlsZEVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAoY2hpbGRDb2xvclNlbGVjdCAmJiBjaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgdG8gcHVycGxlXG4gICAgICAgICAgICAgICAgY2hpbGRDb2xvclNlbGVjdC52YWx1ZSA9ICdwdXJwbGUnO1xuICAgICAgICAgICAgICAgIGNoaWxkQ29sb3JTZWxlY3QuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY2hpbGRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNQdXJwbGUgPSBzdHlsZXMuYm9yZGVyQ29sb3IuaW5jbHVkZXMoJ3B1cnBsZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygncmdiKDEyOCwgMCwgMTI4KScpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChoYXNQdXJwbGUpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnY2hpbGQyIGhhcyBjb3JyZWN0IGlubmVySFRNTCBhbmQgZ3JlZW4gYm9yZGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbi1jeWNsZS1jaGlsZC0yJyk7XG4gICAgICAgICAgICBleHBlY3QoY2hpbGQyRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGlmIChjaGlsZDJFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGNoaWxkMkVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpLnJlcGxhY2UoL1xcbihcXHMrKS9nLCAnICcpKS50b0JlKCd3b25kZXJmdWwgdG9vIHBhcnQgMicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNoaWxkMkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc0dyZWVuID0gc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdyZ2IoMCwgMTI4LCAwKScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygnZ3JlZW4nKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoaGFzR3JlZW4pLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHN0eWxlcy5ib3JkZXJXaWR0aCkudG9CZSgnMnB4Jyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHN0eWxlcy5ib3JkZXJTdHlsZSkudG9CZSgnc29saWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdjaGlsZDIgY29sb3IgY2hhbmdlcyB3aGVuIHNlbGVjdCBpcyBjaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQyQ29sb3JTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hpbGQtY29sb3Itc2VsZWN0LTInKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkMkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW4tY3ljbGUtY2hpbGQtMicpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkMkNvbG9yU2VsZWN0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGNoaWxkMkVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBpZiAoY2hpbGQyQ29sb3JTZWxlY3QgJiYgY2hpbGQyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIC8vIENoYW5nZSB0byBvcmFuZ2VcbiAgICAgICAgICAgICAgICBjaGlsZDJDb2xvclNlbGVjdC52YWx1ZSA9ICdvcmFuZ2UnO1xuICAgICAgICAgICAgICAgIGNoaWxkMkNvbG9yU2VsZWN0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNoaWxkMkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhc09yYW5nZSA9IHN0eWxlcy5ib3JkZXJDb2xvci5pbmNsdWRlcygnb3JhbmdlJykgfHxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzLmJvcmRlckNvbG9yLmluY2x1ZGVzKCdyZ2IoMjU1LCAxNjUsIDApJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGhhc09yYW5nZSkudG9CZSh0cnVlLCBgaW4tY3ljbGUtY2hpbGQtMiBzaG91bGQgYmUgb3JhbmdlIG5vdCAke3N0eWxlcy5ib3JkZXJDb2xvcn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiIsImltcG9ydCB7IGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgY2xpY2ssIHRleHRDb250ZW50IH0gZnJvbSAnLi90ZXN0aW5nJztcbi8qXG5pdCgnbm8gdGVtcGxhdGUgdGFncycsICgpID0+IHtcbiAgY29uc3QgdGVtcGxhdGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RlbXBsYXRlJylcbiAgZXhwZWN0KHRlbXBsYXRlVGFncy5sZW5ndGgpLnRvQmUoMCkgLy8gRXhwZWN0ZWQgbm8gdGVtcGxhdGVzIHRvIGJlIG9uIGRvY3VtZW50XG59KVxuKi9cbml0KCdiYXNpYyBhcHAgc3ViamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gTnVtYmVyKHRleHRDb250ZW50KCcjYXBwLWNvdW50ZXItc3ViamVjdC12YWx1ZS1kaXNwbGF5JykpO1xuICAgIGNsaWNrKCcjYXBwLWNvdW50ZXItc3ViamVjdC1idXR0b24nKTtcbiAgICBjb25zdCBhZnRlckNsaWNrID0gTnVtYmVyKHRleHRDb250ZW50KCcjYXBwLWNvdW50ZXItc3ViamVjdC12YWx1ZS1kaXNwbGF5JykpO1xuICAgIGV4cGVjdChjdXJyZW50KS50b0JlKGFmdGVyQ2xpY2sgLSAxLCBgRXhwZWN0ZWQgI2FwcC1jb3VudGVyLXN1YmplY3QtdmFsdWUtZGlzcGxheSB0byBiZSAke2FmdGVyQ2xpY2sgLSAxfSBidXQgaXQgaXMgJHtjdXJyZW50fWApO1xufSk7XG4iLCJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJy4vdGVzdGluZyc7XG4vLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBieUlkLCBodG1sLCBodG1sQnlJZCwgZXhwZWN0TWF0Y2hlZEh0bWwsIGNsaWNrQnlJZCB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn8J+TsCBzdWJzY3JpcHRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdiYXNpYycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNjb250ZW50LXN1YmplY3QtcGlwZS1kaXNwbGF5MCcsICcjY29udGVudC1zdWJqZWN0LXBpcGUtZGlzcGxheTEnKTtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZS1kaXNwbGF5MCcsICcjY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGUtZGlzcGxheTEnKTtcbiAgICB9KTtcbiAgICBpdCgnaHRtbCcsICgpID0+IHtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZUh0bWwtZGlzcGxheTAnLCAnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlSHRtbC1kaXNwbGF5MScpO1xuICAgIH0pO1xuICAgIGl0KCdzdWJzY3JpYmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChodG1sQnlJZCgnY29udGVudC1zdWJzY3JpYmUtc3ViMCcpKS50b0JlKCcnKTtcbiAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdjb250ZW50LXN1YnNjcmliZS1zdWIwLXdpdGgnKSkudG9CZSgnLTEnKTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgncGFzc2VkIGluIHN1YnNjcmlwdGlvbicsICgpID0+IHtcbiAgICAgICAgaXQoJ2luY3JlYXNlIHN1YnNjcmlwdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluY3JlYXNlID0gYnlJZCgncGFzc2VkLWluLXN1Yi1pbmNyZWFzZScpO1xuICAgICAgICAgICAgY29uc3QgaGlkZVNob3cgPSBieUlkKCdwYXNzZWQtaW4tc3ViLWhpZGUtc2hvdycpO1xuICAgICAgICAgICAgY29uc3QgaGlkZVNob3dWYWx1ZSA9IGJ5SWQoJ3Bhc3NlZC1pbi1zdWItaGlkZVNob3ctdmFsdWUnKTtcbiAgICAgICAgICAgIGV4cGVjdChoaWRlU2hvd1ZhbHVlLnRleHRDb250ZW50KS50b0JlKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDAnKSkudG9CZSgnMHx8fHwwJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgxJykpLnRvQmUoJzF8fHx8MScsICdmYWlsZWQgYmVmb3JlIGluY3JlYXNlJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgyJykpLnRvQmUoJzJ8fHx8MicpO1xuICAgICAgICAgICAgaW5jcmVhc2UuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDAnKSkudG9CZShgMHx8fHwwYCk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgxJykpLnRvQmUoJzF8fHx8MScsICdmYWlsZWQgZmlyc3QgaW5jcmVhc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDInKSkudG9CZSgnMnx8fHwyJyk7XG4gICAgICAgICAgICBoaWRlU2hvdy5jbGljaygpOyAvLyBoaWRlXG4gICAgICAgICAgICBsZXQgc3ViVmFsdWUgPSBodG1sQnlJZCgncGFzc2VkLWluLW91dHB1dCcpO1xuICAgICAgICAgICAgZXhwZWN0KGhpZGVTaG93VmFsdWUudGV4dENvbnRlbnQpLnRvQmUoJ3RydWUnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDAnKSkudG9CZShgMHx8fHwwYCk7XG4gICAgICAgICAgICBjb25zdCB6ZXJvcyA9ICcwfHx8fDAnO1xuICAgICAgICAgICAgY29uc3Qgb25lcyA9ICcxfHx8fDEnO1xuICAgICAgICAgICAgY29uc3QgX2V4MUh0bWwgPSBodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkRXgxSHRtbCA9IGAxfHx5b3VyIGZ1biBudW1iZXIgJHtzdWJWYWx1ZX18fDFgO1xuICAgICAgICAgICAgZXhwZWN0KF9leDFIdG1sKS50b0JlKGV4cGVjdGVkRXgxSHRtbCwgYGZhaWxlZCBhZnRlciBoaWRlIGV4cGVjdGVkICNwYXNzZWQtaW4tc3ViLWV4MSB0byBiZSAke2V4cGVjdGVkRXgxSHRtbH0gYnV0IGl0cyAke19leDFIdG1sfWApO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MicpKS50b0JlKGAyfHx5b3VyIHRhZyBudW1iZXIgJHtzdWJWYWx1ZX18fDJgKTtcbiAgICAgICAgICAgIGluY3JlYXNlLmNsaWNrKCk7IC8vIHNob3dcbiAgICAgICAgICAgIHN1YlZhbHVlID0gaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1vdXRwdXQnKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDAnKSkudG9CZShgMHx8JHtzdWJWYWx1ZX18fDBgKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sQnlJZCgncGFzc2VkLWluLXN1Yi1leDEnKSkudG9CZShgMXx8eW91ciBmdW4gbnVtYmVyICR7c3ViVmFsdWV9fHwxYCwgJ2ZhaWxlZCB0aGlyZCBpbmNyZWFzZScpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MicpKS50b0JlKGAyfHx5b3VyIHRhZyBudW1iZXIgJHtzdWJWYWx1ZX18fDJgKTtcbiAgICAgICAgICAgIGhpZGVTaG93LmNsaWNrKCk7XG4gICAgICAgICAgICBjb25zdCBleDBIdG1sID0gaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgwJyk7XG4gICAgICAgICAgICBleHBlY3QoZXgwSHRtbCkudG9CZSh6ZXJvcywgYExlc3QgY2xpY2sgY2hlY2sgZXhwZWN0ZWQgI3Bhc3NlZC1pbi1zdWItZXgwIHRvIGJlICR7emVyb3N9IGJ1dCBpdCBpcyAke2V4MEh0bWx9YCk7XG4gICAgICAgICAgICBjb25zdCBleDFIdG1sID0gaHRtbEJ5SWQoJ3Bhc3NlZC1pbi1zdWItZXgxJyk7XG4gICAgICAgICAgICBleHBlY3QoZXgxSHRtbCkudG9CZShvbmVzLCBgRmFpbGVkIGNsb3NpbmcgZXhwZWN0ZWQgI3Bhc3NlZC1pbi1zdWItZXgxICR7ZXgxSHRtbH0gdG8gYmUgJHtvbmVzfSBidXQgaXQgaXMgJHtleDFIdG1sfWApO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWxCeUlkKCdwYXNzZWQtaW4tc3ViLWV4MicpKS50b0JlKCcyfHx8fDInKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ2hvc3QnLCAoKSA9PiB7XG4gICAgICAgIGxldCBob3N0RGVzdHJveUNvdW50ID0gTnVtYmVyKGh0bWxCeUlkKCdob3N0RGVzdHJveUNvdW50JykpO1xuICAgICAgICAvLyBzaG91bGQgYmUgYSBudW1iZXJcbiAgICAgICAgZXhwZWN0KGlzTmFOKE51bWJlcihodG1sQnlJZCgnaG9zdGVkQ29udGVudCcpKSkpLnRvQmUoZmFsc2UsICdob3N0ZWRDb250ZW50IGh0bWwgbm90IGFzIGV4cGVjdGVkJyk7XG4gICAgICAgIGNsaWNrQnlJZCgnaG9zdEhpZGVTaG93Jyk7XG4gICAgICAgIGV4cGVjdChOdW1iZXIoaHRtbEJ5SWQoJ2hvc3REZXN0cm95Q291bnQnKSkpLnRvQmUoaG9zdERlc3Ryb3lDb3VudCArIDEsICdob3N0IGRlc3Ryb3kgbWlzbWF0Y2gnKTtcbiAgICAgICAgLy8gc2hvdWxkIE5PVCBiZSBhIG51bWJlclxuICAgICAgICBleHBlY3QoaHRtbEJ5SWQoJ2hvc3RlZENvbnRlbnQnKSkudG9CZSgnJyk7XG4gICAgICAgIGNsaWNrQnlJZCgnaG9zdEhpZGVTaG93Jyk7XG4gICAgICAgIC8vIHNob3VsZCBiZSBhIG51bWJlclxuICAgICAgICBleHBlY3QoaXNOYU4oTnVtYmVyKGh0bWxCeUlkKCdob3N0ZWRDb250ZW50JykpKSkudG9CZShmYWxzZSwgJ2hvc3RlZENvbnRlbnQgY2hlY2sgMiBub3QgcmlnaHQnKTtcbiAgICAgICAgLy8gc3RpbGwgc2FtZSBudW1iZXJcbiAgICAgICAgZXhwZWN0KE51bWJlcihodG1sQnlJZCgnaG9zdERlc3Ryb3lDb3VudCcpKSkudG9CZShob3N0RGVzdHJveUNvdW50ICsgMSwgJ2hvc3QgZGVzdHJveSBtaXNtYXRjaCAyJyk7XG4gICAgfSk7XG4gICAgaXQoJ2Jhc2ljJywgKCkgPT4ge1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI2NvbnRlbnQtc3ViamVjdC1waXBlLWRpc3BsYXkwJywgJyNjb250ZW50LXN1YmplY3QtcGlwZS1kaXNwbGF5MScpO1xuICAgICAgICBleHBlY3RNYXRjaGVkSHRtbCgnI2NvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlLWRpc3BsYXkwJywgJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZS1kaXNwbGF5MScpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI2NvbnRlbnQtZG9tLXBhcnNlLTAtMCcpKS50b0JlKGh0bWwoJyNjb250ZW50LWRvbS1wYXJzZS0wLTEnKSk7XG4gICAgfSk7XG4gICAgaXQoJ2h0bWwnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGVIdG1sLWRpc3BsYXkwJywgJyNjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZUh0bWwtZGlzcGxheTEnKTtcbiAgICB9KTtcbn0pO1xuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgYnlJZCwgZWxtQ291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgZXhwZWN0RWxtQ291bnQgfSBmcm9tICcuL3Rlc3RpbmcnO1xuZGVzY3JpYmUoJ/CflIAgdGFnU3dpdGNoaW5nJywgKCkgPT4ge1xuICAgIGl0KCcwJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzZWxlY3QtdGFnLWFib3ZlJykpLnRvQmUoMSk7IC8vIEV4cGVjdGVkIHNlbGVjdC10YWctYWJvdmUgZWxlbWVudCB0byBiZSBkZWZpbmVkXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZy1zd2l0Y2gtZHJvcGRvd24nKSkudG9CZSgxKTsgLy8gRXhwZWN0ZWQgb25lICN0YWctc3dpdGNoLWRyb3Bkb3duXG4gICAgICAgIGV4cGVjdChlbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJykpLnRvQmUoMik7IC8vIEV4cGVjdGVkIHR3byAjdGFnU3dpdGNoLTEtaGVsbG8gZWxlbWVudHNcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTItaGVsbG8nKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTMtaGVsbG8nKSkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgnMScsICgpID0+IHtcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBieUlkKCd0YWctc3dpdGNoLWRyb3Bkb3duJyk7XG4gICAgICAgIGRyb3Bkb3duLnZhbHVlID0gXCIxXCI7XG4gICAgICAgIGRyb3Bkb3duLm9uY2hhbmdlKHsgdGFyZ2V0OiBkcm9wZG93biB9KTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTItaGVsbG8nKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjdGFnU3dpdGNoLTMtaGVsbG8nKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGVsbUNvdW50KCcjc2VsZWN0LXRhZy1hYm92ZScpKS50b0JlKDApO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJywgNSk7XG4gICAgfSk7XG4gICAgaXQoJzInLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duID0gYnlJZCgndGFnLXN3aXRjaC1kcm9wZG93bicpO1xuICAgICAgICBkcm9wZG93bi52YWx1ZSA9IFwiMlwiO1xuICAgICAgICBkcm9wZG93bi5vbmNoYW5nZSh7IHRhcmdldDogZHJvcGRvd24gfSk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnU3dpdGNoLTEtaGVsbG8nLCAyKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWdTd2l0Y2gtMi1oZWxsbycsIDQpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyN0YWdTd2l0Y2gtMy1oZWxsbycpKS50b0JlKDApO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzZWxlY3QtdGFnLWFib3ZlJykpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJzMnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duID0gYnlJZCgndGFnLXN3aXRjaC1kcm9wZG93bicpO1xuICAgICAgICBkcm9wZG93bi52YWx1ZSA9ICczJztcbiAgICAgICAgZHJvcGRvd24ub25jaGFuZ2UoeyB0YXJnZXQ6IGRyb3Bkb3duIH0pO1xuICAgICAgICBleHBlY3QoYnlJZCgnc2VsZWN0VGFnLWRpc3BsYXknKS50ZXh0Q29udGVudCkudG9CZSgnMycpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyN0YWdTd2l0Y2gtMS1oZWxsbycpKS50b0JlKDApOyAvLyBFeHBlY3RlZCBubyBoZWxsbyAxc1xuICAgICAgICBjb25zdCB0d29Db3VudCA9IGVsbUNvdW50KCcjdGFnU3dpdGNoLTItaGVsbG8nKTtcbiAgICAgICAgZXhwZWN0KHR3b0NvdW50KS50b0JlKDAsIGBFeHBlY3RlZCBubyAjdGFnU3dpdGNoLTItaGVsbG8gYnV0IGdvdCAke3R3b0NvdW50fWApOyAvLyBFeHBlY3RlZCBubyAjdGFnU3dpdGNoLTItaGVsbG8gZWxlbWVudHNcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWdTd2l0Y2gtMy1oZWxsbycsIDcpO1xuICAgICAgICBleHBlY3QoZWxtQ291bnQoJyNzZWxlY3QtdGFnLWFib3ZlJykpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJzQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duID0gYnlJZCgndGFnLXN3aXRjaC1kcm9wZG93bicpO1xuICAgICAgICBkcm9wZG93bi52YWx1ZSA9IFwiXCI7XG4gICAgICAgIGRyb3Bkb3duLm9uY2hhbmdlKHsgdGFyZ2V0OiBkcm9wZG93biB9KTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyNzZWxlY3QtdGFnLWFib3ZlJywgMSk7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnLXN3aXRjaC1kcm9wZG93bicsIDEpO1xuICAgICAgICBleHBlY3RFbG1Db3VudCgnI3RhZ1N3aXRjaC0xLWhlbGxvJywgMik7XG4gICAgICAgIGV4cGVjdEVsbUNvdW50KCcjdGFnU3dpdGNoLTItaGVsbG8nLCAwKTtcbiAgICAgICAgZXhwZWN0RWxtQ291bnQoJyN0YWdTd2l0Y2gtMy1oZWxsbycsIDApO1xuICAgIH0pO1xufSk7XG4iLCIvLyBCcm93c2VyLWNvbXBhdGlibGUgZXhwZWN0IGltcGxlbWVudGF0aW9uXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXhwZWN0KGFjdHVhbCkge1xuICAgIC8vIENhcHR1cmUgdGhlIHN0YWNrIHRyYWNlIGF0IHRoZSBwb2ludCBvZiBleHBlY3QoKSBjYWxsXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjayB8fCAnJztcbiAgICBjb25zdCBjYWxsZXJMaW5lID0gc3RhY2suc3BsaXQoJ1xcbicpWzNdIHx8ICcnOyAvLyBHZXQgdGhlIGxpbmUgdGhhdCBjYWxsZWQgZXhwZWN0KClcbiAgICByZXR1cm4ge1xuICAgICAgICB0b0JlKGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nID8gbWVzc2FnZSgpIDogbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBjb25zdCBmdWxsTWVzc2FnZSA9IGVycm9yTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICA/IGVycm9yTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICA6IGBFeHBlY3RlZCAke0pTT04uc3RyaW5naWZ5KGV4cGVjdGVkKX0gYnV0IGdvdCAke0pTT04uc3RyaW5naWZ5KGFjdHVhbCl9YDtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihmdWxsTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBmdWxsTWVzc2FnZSArICdcXG4nICsgY2FsbGVyTGluZSArIChlcnJvci5zdGFjayA/ICdcXG4nICsgZXJyb3Iuc3RhY2sgOiAnJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvQmVEZWZpbmVkKCkge1xuICAgICAgICAgICAgaWYgKGFjdHVhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB2YWx1ZSB0byBiZSBkZWZpbmVkIGJ1dCBnb3QgdW5kZWZpbmVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvQmVVbmRlZmluZWQoKSB7XG4gICAgICAgICAgICBpZiAoYWN0dWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHZhbHVlIHRvIGJlIHVuZGVmaW5lZCBidXQgZ290ICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjdHVhbCAhPT0gJ251bWJlcicgfHwgIShhY3R1YWwgPiBleHBlY3RlZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7YWN0dWFsfSB0byBiZSBncmVhdGVyIHRoYW4gJHtleHBlY3RlZH1cXG5cXG4ke21lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvSGF2ZUxlbmd0aChleHBlY3RlZCkge1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsV2l0aExlbmd0aCA9IGFjdHVhbDtcbiAgICAgICAgICAgIGlmICghKCdsZW5ndGgnIGluIGFjdHVhbFdpdGhMZW5ndGgpIHx8IGFjdHVhbFdpdGhMZW5ndGgubGVuZ3RoICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgbGVuZ3RoICR7ZXhwZWN0ZWR9IGJ1dCBnb3QgJHthY3R1YWxXaXRoTGVuZ3RoLmxlbmd0aCB8fCAndW5kZWZpbmVkJ31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbm90OiB7XG4gICAgICAgICAgICB0b0JlKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAke0pTT04uc3RyaW5naWZ5KGFjdHVhbCl9IG5vdCB0byBiZSAke0pTT04uc3RyaW5naWZ5KGV4cGVjdGVkKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuIiwiLy8gV3JhcHBlciB0byBwcm92aWRlIHVuaWZpZWQgZXhwZWN0IGludGVyZmFjZSBmb3IgYm90aCBWaXRlc3QgYW5kIGJyb3dzZXIgZW52aXJvbm1lbnRzXG5pbXBvcnQgeyBjcmVhdGVFeHBlY3QgfSBmcm9tICcuL2V4cGVjdCc7XG4vLyBDaGVjayBpZiB3ZSdyZSBpbiBWaXRlc3QgZW52aXJvbm1lbnRcbmNvbnN0IGlzVml0ZXN0ID0gdHlwZW9mIGdsb2JhbFRoaXMudml0ZXN0ICE9PSAndW5kZWZpbmVkJztcbmNvbnN0IHZpdGVzdEV4cGVjdCA9IGlzVml0ZXN0ID8gZ2xvYmFsVGhpcy5leHBlY3QgOiBudWxsO1xuLy8gQ3JlYXRlIGEgdW5pZmllZCBleHBlY3QgZnVuY3Rpb24gdGhhdCBzdXBwb3J0cyBib3RoIHN5bnRheGVzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pZmllZEV4cGVjdCgpIHtcbiAgICBpZiAoaXNWaXRlc3QgJiYgdml0ZXN0RXhwZWN0KSB7XG4gICAgICAgIC8vIEluIFZpdGVzdCwgY3JlYXRlIGEgd3JhcHBlciB0aGF0IHN1cHBvcnRzIGN1c3RvbSBtZXNzYWdlc1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZXhwZWN0KGFjdHVhbCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiBhbiBvYmplY3QgdGhhdCBjYXB0dXJlcyB0aGUgbWVzc2FnZSBhbmQgcHJvdmlkZXMgbWF0Y2hlcnNcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVycyA9IHZpdGVzdEV4cGVjdChhY3R1YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRvQmUoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZShleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0ZXN0IGZhaWxzLCB0aHJvdyBlcnJvciB3aXRoIGN1c3RvbSBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlRGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9CZVVuZGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9IYXZlTGVuZ3RoKGV4cGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvSGF2ZUxlbmd0aChleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9CZShleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLm5vdC50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0ZXJUaGFuOiAoZXhwZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RhbmRhcmQgVml0ZXN0IGV4cGVjdCB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcnMgPSB2aXRlc3RFeHBlY3QoYWN0dWFsKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubWF0Y2hlcnMsXG4gICAgICAgICAgICAgICAgLy8gU3VwcG9ydCBjaGFpLXN0eWxlIHN5bnRheFxuICAgICAgICAgICAgICAgIHRvOiB7XG4gICAgICAgICAgICAgICAgICAgIGJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmVhdGVyVGhhbjogKGV4cGVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpdGVzdEV4cGVjdChhY3R1YWwpLnRvQmVHcmVhdGVyVGhhbihleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgY3VzdG9tIG1lc3NhZ2UgaW4gdG9CZVxuICAgICAgICAgICAgICAgIHRvQmU6IChleHBlY3RlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcnMudG9CZShleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEluIGJyb3dzZXIsIHVzZSBvdXIgY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggZXh0ZW5kZWQgc3ludGF4XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBleHBlY3QoYWN0dWFsLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGFuIG9iamVjdCB0aGF0IGNhcHR1cmVzIHRoZSBtZXNzYWdlIGFuZCBwcm92aWRlcyBhbGwgbWF0Y2hlcnNcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVycyA9IGNyZWF0ZUV4cGVjdChhY3R1YWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRvQmUoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmUoZXhwZWN0ZWQsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b0JlRGVmaW5lZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvQmVVbmRlZmluZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgIHRvQmVHcmVhdGVyVGhhbihleHBlY3RlZDogbnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcnMudG9CZUdyZWF0ZXJUaGFuKGV4cGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0b0hhdmVMZW5ndGgoZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLnRvSGF2ZUxlbmd0aChleHBlY3RlZCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9CZShleHBlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXJzLm5vdC50b0JlKGV4cGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlYXRlclRoYW46IChleHBlY3RlZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVycyA9IGNyZWF0ZUV4cGVjdChhY3R1YWwpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5tYXRjaGVycyxcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0IGNoYWktc3R5bGUgc3ludGF4XG4gICAgICAgICAgICAgICAgdG86IHtcbiAgICAgICAgICAgICAgICAgICAgYmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyZWF0ZXJUaGFuOiAoZXhwZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVycy50b0JlR3JlYXRlclRoYW4oZXhwZWN0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgZXhwZWN0ID0gY3JlYXRlVW5pZmllZEV4cGVjdCgpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGNvdW50KHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLmxlbmd0aDtcbn1cbmV4cG9ydCBjb25zdCBlbG1Db3VudCA9IGNvdW50O1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5KHF1ZXJ5KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpOyAvLyBhbGxvdyAuc3R5bGUgdG8ganVzdCB3b3JrXG59XG5leHBvcnQgZnVuY3Rpb24gZm9jdXMocSkge1xuICAgIHJldHVybiBxdWVyeShxKS5mb3JFYWNoKGVsbSA9PiBlbG0uZm9jdXMoKSk7XG59XG4vKiogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCguLi4pLmZvckVhY2goaSA9PiBpLmNsaWNrKCkpICovXG5leHBvcnQgZnVuY3Rpb24gY2xpY2socSkge1xuICAgIGNsaWNrRWFjaChbLi4ucXVlcnkocSldKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGlja0VhY2goaXRlbXMpIHtcbiAgICBpdGVtcy5mb3JFYWNoKGVsbSA9PiBlbG0uY2xpY2soKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xpY2tCeUlkKGlkKSB7XG4gICAgY2xpY2soJyMnICsgaWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrT25lKHEsIGluZGV4ID0gMCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBxdWVyeShxKVtpbmRleF07XG4gICAgZWxlbWVudC5jbGljaygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGtleWRvd25PbihpbnB1dCwga2V5KSB7XG4gICAgY29uc3Qga2V5RXZlbnQgPSBuZXcgS2V5Ym9hcmRFdmVudCgna2V5ZG93bicsIHtcbiAgICAgICAga2V5LFxuICAgICAgICBidWJibGVzOiB0cnVlLCAvLyBFbnN1cmUgdGhlIGV2ZW50IGJ1YmJsZXNcbiAgICB9KTtcbiAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KGtleUV2ZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXl1cE9uKGlucHV0LCBrZXkpIHtcbiAgICBjb25zdCBrZXlFdmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCdrZXl1cCcsIHtcbiAgICAgICAga2V5LFxuICAgICAgICBidWJibGVzOiB0cnVlLCAvLyBFbnN1cmUgdGhlIGV2ZW50IGJ1YmJsZXNcbiAgICB9KTtcbiAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KGtleUV2ZW50KTtcbn1cbi8qKiBkaXNwYXRjaCB0aGUgY2hhbmdlIGV2ZW50IG9uIGFuIGVsZW1lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VkKHEpIHtcbiAgICBjaGFuZ2VFYWNoKFsuLi5xdWVyeShxKV0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUVhY2goaXRlbXMpIHtcbiAgICBpdGVtcy5mb3JFYWNoKGNoYW5nZUVsbSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlT25lKHEsIGluZGV4ID0gMCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHF1ZXJ5KHEpW2luZGV4XTtcbiAgICBjaGFuZ2VFbG0odGFyZ2V0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VFbG0odGFyZ2V0KSB7XG4gICAgLy8gOyh0YXJnZXQgYXMgYW55KS5jaGFuZ2UoeyB0YXJnZXQgfSlcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaHRtbChxKSB7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBxdWVyeShxKS5mb3JFYWNoKGVsbSA9PiBodG1sID0gaHRtbCArIGVsbS5pbm5lckhUTUwpO1xuICAgIHJldHVybiBodG1sO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRleHRDb250ZW50KHEpIHtcbiAgICBsZXQgaHRtbCA9ICcnO1xuICAgIHF1ZXJ5KHEpLmZvckVhY2goZWxtID0+IGh0bWwgPSBodG1sICsgZWxtLnRleHRDb250ZW50KTtcbiAgICByZXR1cm4gaHRtbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieUlkKGlkKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbn1cbi8qKiBSZXR1cm5zIGVtcHR5IHN0cmluZyBhbHNvIHdoZW4gZWxlbWVudCBub3QgZm91bmQgKi9cbmV4cG9ydCBmdW5jdGlvbiBodG1sQnlJZChpZCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgcmV0dXJuIGVsZW1lbnQ/LmlubmVySFRNTCB8fCAnJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBsYXN0QnlJZChpZCkge1xuICAgIGNvbnN0IGVsbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjJyArIGlkKTtcbiAgICByZXR1cm4gZWxtc1tlbG1zLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJsdXIocSkge1xuICAgIHJldHVybiBxdWVyeShxKS5mb3JFYWNoKGVsbSA9PiB0cmlnZ2VyQmx1ckVsbShlbG0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2UocSkge1xuICAgIC8vIHJldHVybiBxdWVyeShxKS5mb3JFYWNoKGVsbSA9PiB0cmlnZ2VyQ2hhbmdlRWxtKChlbG0gYXMgSFRNTEVsZW1lbnQpKSlcbiAgICByZXR1cm4gcXVlcnkocSkuZm9yRWFjaChlbG0gPT4gY2hhbmdlRWxtKGVsbSkpO1xufVxuY29uc3QgYmx1ckV2ZW50ID0gbmV3IEV2ZW50KCdmb2N1c291dCcsIHtcbiAgICBidWJibGVzOiB0cnVlLCAvLyBCbHVyIGV2ZW50cyB0eXBpY2FsbHkgZG8gbm90IGJ1YmJsZSwgYnV0IHRoaXMgY2FuIGJlIHNldCB0byB0cnVlIGlmIG5lZWRlZFxuICAgIGNhbmNlbGFibGU6IGZhbHNlIC8vIEJsdXIgZXZlbnRzIGFyZSBub3QgY2FuY2VsYWJsZVxufSk7XG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckJsdXJFbG0oZWxtKSB7XG4gICAgZWxtLmRpc3BhdGNoRXZlbnQoYmx1ckV2ZW50KTtcbn1cbmNvbnN0IGNoYW5nZUV2ZW50ID0gbmV3IEV2ZW50KCdjaGFuZ2UnLCB7XG4gICAgYnViYmxlczogdHJ1ZSwgLy8gQmx1ciBldmVudHMgdHlwaWNhbGx5IGRvIG5vdCBidWJibGUsIGJ1dCB0aGlzIGNhbiBiZSBzZXQgdG8gdHJ1ZSBpZiBuZWVkZWRcbiAgICBjYW5jZWxhYmxlOiBmYWxzZSAvLyBCbHVyIGV2ZW50cyBhcmUgbm90IGNhbmNlbGFibGVcbn0pO1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJDaGFuZ2VFbG0oZWxtKSB7XG4gICAgZWxtLmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpO1xufVxuIiwiaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBodG1sIH0gZnJvbSBcIi4vZWxtU2VsZWN0b3JzXCI7XG5leHBvcnQgZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0RWxtQ291bnQocXVlcnksIGNvdW50LCBtZXNzYWdlKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcbiAgICBjb25zdCBmb3VuZCA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCBgRXhwZWN0ZWQgJHtjb3VudH0gZWxlbWVudHMgdG8gbWF0Y2ggcXVlcnkgJHtxdWVyeX0gYnV0IGZvdW5kICR7Zm91bmR9YDtcbiAgICBleHBlY3QoZm91bmQpLnRvQmUoY291bnQsIG1lc3NhZ2UpO1xuICAgIHJldHVybiBlbGVtZW50cztcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3RNYXRjaGVkSHRtbCguLi5xdWVyaWVzKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBxdWVyaWVzLnJlZHVjZSgoYWxsLCBxdWVyeSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpO1xuICAgICAgICBhbGwucHVzaCguLi5lbGVtZW50cyk7XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgfSwgW10pO1xuICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBlbGVtZW50cyB0byBiZSBwcmVzZW50IGluIGV4cGVjdE1hdGNoZWRIdG1sKCkgcXVlcnkgYnV0IGZvdW5kIG5vbmVgKTtcbiAgICB9XG4gICAgY29uc3QgbGFzdEVsbSA9IGVsZW1lbnRzLnBvcCgpO1xuICAgIGNvbnN0IGxhc3RIdG1sID0gbGFzdEVsbS5pbm5lckhUTUw7XG4gICAgZWxlbWVudHMuZm9yRWFjaChlbG0gPT4gZXhwZWN0KGVsbS5pbm5lckhUTUwpLnRvQmUobGFzdEh0bWwpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3RIVE1MKHNlbGVjdG9yLCBleHBlY3RlZEh0bWwpIHtcbiAgICBleHBlY3QoaHRtbChzZWxlY3RvcikpLnRvQmUoZXhwZWN0ZWRIdG1sKTtcbn1cbmZ1bmN0aW9uIHRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyhjb3VudGVyQnV0dG9ucywgY291bnRlckRpc3BsYXlzLCB7IGVsZW1lbnRDb3VudEV4cGVjdGVkIH0gPSB7XG4gICAgZWxlbWVudENvdW50RXhwZWN0ZWQ6IDFcbn0sIGNvdW50ZXJCdXR0b25TZWxlY3QsIGNvdW50ZXJEaXNwbGF5U2VsZWN0LCB0ZXN0UXVhbnRpZmllciA9IDApIHtcbiAgICBleHBlY3QoY291bnRlckJ1dHRvbnMubGVuZ3RoKS50b0JlKGVsZW1lbnRDb3VudEV4cGVjdGVkLCAoKSA9PiBgRXhwZWN0ZWQgJHtjb3VudGVyQnV0dG9uU2VsZWN0fSB0byBiZSAke2VsZW1lbnRDb3VudEV4cGVjdGVkfSBlbGVtZW50cyBidXQgaXMgaW5zdGVhZCAke2NvdW50ZXJCdXR0b25zLmxlbmd0aH1gKTtcbiAgICBleHBlY3QoY291bnRlckRpc3BsYXlzLmxlbmd0aCkudG9CZShlbGVtZW50Q291bnRFeHBlY3RlZCwgKCkgPT4gYEV4cGVjdGVkICR7Y291bnRlckRpc3BsYXlTZWxlY3R9IHRvIGJlICR7ZWxlbWVudENvdW50RXhwZWN0ZWR9IGVsZW1lbnRzIGJ1dCBpcyBpbnN0ZWFkICR7Y291bnRlckRpc3BsYXlzLmxlbmd0aH1gKTtcbiAgICBjb3VudGVyQnV0dG9ucy5mb3JFYWNoKChpbmNyZWFzZUNvdW50ZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvdW50ZXJEaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb3VudGVyRGlzcGxheVNlbGVjdClbaW5kZXhdOyAvLyBjb3VudGVyRGlzcGxheXNbaW5kZXhdXG4gICAgICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGNvdW50ZXJEaXNwbGF5KSkudG9CZSh0cnVlLCBgVGhlIHNlbGVjdGVkIGVsZW1lbnQgJHtjb3VudGVyRGlzcGxheVNlbGVjdH0gaXMgbm8gbG9uZ2VyIGFuIGVsZW1lbnQgb24gdGhlIGRvY3VtZW50IGJvZHkgQkVGT1JFIGNsaWNraW5nICR7Y291bnRlckJ1dHRvblNlbGVjdH1gKTtcbiAgICAgICAgbGV0IGNvdW50ZXJWYWx1ZSA9IE51bWJlcihjb3VudGVyRGlzcGxheT8uaW5uZXJUZXh0KTtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBpbmNyZWFzZUNvdW50ZXIuY2xpY2spLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICAgIC8vIHdpbGwgaW5jcmVhc2UgYnkgb25lXG4gICAgICAgIGluY3JlYXNlQ291bnRlci5jbGljaygpO1xuICAgICAgICBleHBlY3QoY291bnRlckRpc3BsYXkpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGNvdW50ZXJEaXNwbGF5KSkudG9CZSh0cnVlLCBgVGhlIHNlbGVjdGVkIGVsZW1lbnQgJHtjb3VudGVyRGlzcGxheVNlbGVjdH0gaXMgbm8gbG9uZ2VyIGFuIGVsZW1lbnQgb24gdGhlIGRvY3VtZW50IGJvZHkgQUZURVIgY2xpY2tpbmcgJHtjb3VudGVyQnV0dG9uU2VsZWN0fWApO1xuICAgICAgICBsZXQgbmV3Q291bnRlclZhbHVlID0gY291bnRlclZhbHVlICsgMTtcbiAgICAgICAgY291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5LmlubmVyVGV4dCk7XG4gICAgICAgIGV4cGVjdChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGNvdW50ZXJEaXNwbGF5KSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KG5ld0NvdW50ZXJWYWx1ZSkudG9CZShjb3VudGVyVmFsdWUsICgpID0+IGBBZnRlciBjbGljayAke2NvdW50ZXJCdXR0b25TZWxlY3R9LCBjb3VudGVyIHRlc3QgJHt0ZXN0UXVhbnRpZmllciArIDF9IG9mICR7dGVzdFF1YW50aWZpZXIgKyAyfSBleHBlY3RlZCAke2NvdW50ZXJEaXNwbGF5U2VsZWN0fSB0byBiZSB2YWx1ZSAke25ld0NvdW50ZXJWYWx1ZX0gYnV0IGl0IGlzICR7Y291bnRlclZhbHVlfWApO1xuICAgICAgICAvLyB3aWxsIGluY3JlYXNlIGJ5IG9uZVxuICAgICAgICBpbmNyZWFzZUNvdW50ZXIuY2xpY2soKTtcbiAgICAgICAgY291bnRlclZhbHVlID0gTnVtYmVyKGNvdW50ZXJEaXNwbGF5Py5pbm5lclRleHQpO1xuICAgICAgICArK25ld0NvdW50ZXJWYWx1ZTtcbiAgICAgICAgZXhwZWN0KG5ld0NvdW50ZXJWYWx1ZSkudG9CZShjb3VudGVyVmFsdWUsICgpID0+IGBDb3VudGVyIHRlc3QgJHt0ZXN0UXVhbnRpZmllciArIDJ9IG9mICR7dGVzdFF1YW50aWZpZXIgKyAyfSBleHBlY3RlZCAke2NvdW50ZXJEaXNwbGF5U2VsZWN0fSB0byBpbmNyZWFzZSB2YWx1ZSB0byAke25ld0NvdW50ZXJWYWx1ZX0gYnV0IGl0IGlzICR7Y291bnRlclZhbHVlfWApO1xuICAgIH0pO1xufVxuLyoqIGluY3JlYXNlcyBjb3VudGVyIGJ5IHR3byAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlc3RDb3VudGVyRWxlbWVudHMoY291bnRlckJ1dHRvblNlbGVjdCwgY291bnRlckRpc3BsYXlTZWxlY3QsIHsgZWxlbWVudENvdW50RXhwZWN0ZWQgfSA9IHtcbiAgICBlbGVtZW50Q291bnRFeHBlY3RlZDogMVxufSkge1xuICAgIGNvbnN0IGluY3JlYXNlQ291bnRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvdW50ZXJCdXR0b25TZWxlY3QpO1xuICAgIGNvbnN0IGNvdW50ZXJEaXNwbGF5cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY291bnRlckRpc3BsYXlTZWxlY3QpO1xuICAgIHJldHVybiB0ZXN0Q291bnRlclNlbGVjdGVkRWxlbWVudHMoaW5jcmVhc2VDb3VudGVycywgY291bnRlckRpc3BsYXlzLCB7IGVsZW1lbnRDb3VudEV4cGVjdGVkIH0sIGNvdW50ZXJCdXR0b25TZWxlY3QsIGNvdW50ZXJEaXNwbGF5U2VsZWN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0RHVlbENvdW50ZXJFbGVtZW50cyguLi5zZXRzXG4vLyBbYnV0dG9uMCwgZGlzcGxheTBdOiBbc3RyaW5nLCBzdHJpbmddLCAvLyBidXR0b24sIGRpc3BsYXlcbi8vIFtidXR0b24xLCBkaXNwbGF5MV06IFtzdHJpbmcsIHN0cmluZ10sIC8vIGJ1dHRvbiwgZGlzcGxheVxuKSB7XG4gICAgY29uc3QgW2J1dHRvbjAsIGRpc3BsYXkwXSA9IHNldHMuc2hpZnQoKTtcbiAgICBsZXQgcXVlcnkgPSBleHBlY3RFbG1Db3VudChkaXNwbGF5MCwgMSk7XG4gICAgbGV0IGJ1dHRvblF1ZXJ5ID0gZXhwZWN0RWxtQ291bnQoYnV0dG9uMCwgMSk7XG4gICAgY29uc3QgZGlzcGxheTBFbGVtZW50ID0gcXVlcnlbMF07XG4gICAgY29uc3QgaXAwID0gZGlzcGxheTBFbGVtZW50LmlubmVyVGV4dDtcbiAgICB0ZXN0Q291bnRlclNlbGVjdGVkRWxlbWVudHMoYnV0dG9uUXVlcnksIHF1ZXJ5LCB7IGVsZW1lbnRDb3VudEV4cGVjdGVkOiAxIH0sIGJ1dHRvbjAsIGRpc3BsYXkwKTtcbiAgICBsZXQgaW5jcmVhc2UgPSAyO1xuICAgIHNldHMuZm9yRWFjaCgoW2J1dHRvbjEsIGRpc3BsYXkxXSwgaW5kZXgpID0+IHtcbiAgICAgICAgcXVlcnkgPSBleHBlY3RFbG1Db3VudChkaXNwbGF5MSwgMSk7XG4gICAgICAgIGJ1dHRvblF1ZXJ5ID0gZXhwZWN0RWxtQ291bnQoYnV0dG9uMSwgMSk7XG4gICAgICAgIGxldCBkaXNwbGF5MUVsZW1lbnQgPSBxdWVyeVswXTtcbiAgICAgICAgbGV0IGlwMUNoZWNrID0gZGlzcGxheTFFbGVtZW50LmlubmVyVGV4dDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoTnVtYmVyKGlwMCkgKyBpbmNyZWFzZSkudG9TdHJpbmcoKTtcbiAgICAgICAgZXhwZWN0KGlwMUNoZWNrKS50b0JlKHZhbHVlLCAoKSA9PiBgRXhwZWN0ZWQgc2Vjb25kICR7ZGlzcGxheTF9IGluY3JlYXNlIHByb3ZpZGVyIHRvIGJlIGluY3JlYXNlZCB0byAke2lwMH0gYnV0IGdvdCAke2lwMUNoZWNrfWApO1xuICAgICAgICB0ZXN0Q291bnRlclNlbGVjdGVkRWxlbWVudHMoYnV0dG9uUXVlcnksIHF1ZXJ5LCB7IGVsZW1lbnRDb3VudEV4cGVjdGVkOiAxIH0sIGJ1dHRvbjAsIGRpc3BsYXkwLCBpbmRleCArIDIpO1xuICAgICAgICBkaXNwbGF5MUVsZW1lbnQgPSBxdWVyeVswXTtcbiAgICAgICAgaXAxQ2hlY2sgPSBkaXNwbGF5MUVsZW1lbnQuaW5uZXJUZXh0O1xuICAgICAgICBjb25zdCBzZWNvbmRJbmNyZWFzZSA9IGluY3JlYXNlICsgMjtcbiAgICAgICAgZXhwZWN0KGlwMUNoZWNrKS50b0JlKChOdW1iZXIoaXAwKSArIHNlY29uZEluY3JlYXNlKS50b1N0cmluZygpLCAoKSA9PiBgRXhwZWN0ZWQgJHtkaXNwbGF5MX0gaW5uZXJUZXh0IHRvIGJlICR7TnVtYmVyKGlwMCkgKyBzZWNvbmRJbmNyZWFzZX0gYnV0IGluc3RlYWQgaXQgaXMgJHtpcDFDaGVja31gKTtcbiAgICAgICAgaW5jcmVhc2UgPSBpbmNyZWFzZSArIDI7XG4gICAgfSk7XG59XG4iLCIvLyBSZS1leHBvcnQgdGVzdCBmdW5jdGlvbnMgdGhhdCB3b3JrIGluIGJvdGggZW52aXJvbm1lbnRzXG4vLyBUaGlzIGFsbG93cyB0ZXN0cyB0byB3b3JrIGluIGJvdGggVml0ZXN0IGFuZCBicm93c2VyIGVudmlyb25tZW50c1xuLy8gSW1wb3J0IGJyb3dzZXIgdGVzdCBydW5uZXJcbmltcG9ydCAqIGFzIGJyb3dzZXJSdW5uZXIgZnJvbSAnLi90ZXN0UnVubmVyJztcbi8vIENyZWF0ZSBlbnZpcm9ubWVudC1hd2FyZSBleHBvcnRzXG5jb25zdCBpc1ZpdGVzdCA9IHR5cGVvZiBnbG9iYWxUaGlzLnZpdGVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnQgY29uc3QgaXQgPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5pdFxuICAgIDogYnJvd3NlclJ1bm5lci5pdDtcbmV4cG9ydCBjb25zdCBkZXNjcmliZSA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLmRlc2NyaWJlXG4gICAgOiBicm93c2VyUnVubmVyLmRlc2NyaWJlO1xuZXhwb3J0IHsgZXhwZWN0IH0gZnJvbSAnLi9leHBlY3Qtd3JhcHBlcic7XG5leHBvcnQgY29uc3QgYmVmb3JlRWFjaCA9IGlzVml0ZXN0XG4gICAgPyBnbG9iYWxUaGlzLmJlZm9yZUVhY2hcbiAgICA6IGJyb3dzZXJSdW5uZXIuYmVmb3JlRWFjaDtcbmV4cG9ydCBjb25zdCBhZnRlckVhY2ggPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5hZnRlckVhY2hcbiAgICA6IGJyb3dzZXJSdW5uZXIuYWZ0ZXJFYWNoO1xuLy8gUmUtZXhwb3J0IGFsbCBET00gdXRpbGl0aWVzXG5leHBvcnQgKiBmcm9tICcuL2VsbVNlbGVjdG9ycyc7XG5leHBvcnQgKiBmcm9tICcuL2V4cGVjdC5odG1sJztcbiIsIi8vIFRlc3QgcnVubmVyIHRoYXQgd29ya3MgaW4gYm90aCBicm93c2VyIGFuZCBWaXRlc3QgZW52aXJvbm1lbnRzXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICcuL2V4cGVjdC13cmFwcGVyJztcbmxldCBjdXJyZW50U3VpdGUgPSBudWxsO1xubGV0IHN1aXRlcyA9IG5ldyBNYXAoKTtcbmxldCB0ZXN0UXVldWUgPSBbXTtcbmxldCBzdWl0ZUhvb2tzID0gbmV3IE1hcCgpO1xuLy8gQ2hlY2sgaWYgd2UncmUgaW4gVml0ZXN0IGVudmlyb25tZW50XG5jb25zdCBpc1ZpdGVzdCA9IHR5cGVvZiBnbG9iYWxUaGlzLnZpdGVzdCAhPT0gJ3VuZGVmaW5lZCc7XG4vLyBFeHBvcnQgZnVuY3Rpb25zIHRoYXQgd29yayBpbiBib3RoIGVudmlyb25tZW50c1xuZXhwb3J0IGNvbnN0IGl0ID0gaXNWaXRlc3RcbiAgICA/IGdsb2JhbFRoaXMuaXRcbiAgICA6IChuYW1lLCBmbikgPT4ge1xuICAgICAgICBjb25zdCB0ZXN0ID0geyBuYW1lLCBmbiwgc3VpdGU6IGN1cnJlbnRTdWl0ZSB9O1xuICAgICAgICB0ZXN0UXVldWUucHVzaCh0ZXN0KTtcbiAgICAgICAgLy8gQWRkIHRvIHN1aXRlIG1hcFxuICAgICAgICBjb25zdCBzdWl0ZVRlc3RzID0gc3VpdGVzLmdldChjdXJyZW50U3VpdGUpIHx8IFtdO1xuICAgICAgICBzdWl0ZVRlc3RzLnB1c2godGVzdCk7XG4gICAgICAgIHN1aXRlcy5zZXQoY3VycmVudFN1aXRlLCBzdWl0ZVRlc3RzKTtcbiAgICB9O1xuZXhwb3J0IGNvbnN0IGRlc2NyaWJlID0gaXNWaXRlc3RcbiAgICA/IGdsb2JhbFRoaXMuZGVzY3JpYmVcbiAgICA6IChuYW1lLCBmbikgPT4ge1xuICAgICAgICBjb25zdCBwcmV2aW91c1N1aXRlID0gY3VycmVudFN1aXRlO1xuICAgICAgICBjdXJyZW50U3VpdGUgPSBuYW1lO1xuICAgICAgICBzdWl0ZXMuc2V0KG5hbWUsIFtdKTtcbiAgICAgICAgc3VpdGVIb29rcy5zZXQobmFtZSwgeyBiZWZvcmVFYWNoOiBbXSwgYWZ0ZXJFYWNoOiBbXSB9KTtcbiAgICAgICAgZm4oKTsgLy8gRXhlY3V0ZSBpbW1lZGlhdGVseSB0byBjb2xsZWN0IHRlc3RzXG4gICAgICAgIGN1cnJlbnRTdWl0ZSA9IHByZXZpb3VzU3VpdGU7XG4gICAgfTtcbi8vIFJlLWV4cG9ydCBleHBlY3QgZnJvbSB3cmFwcGVyXG5leHBvcnQgeyBleHBlY3QgfTtcbi8vIEFkZCBiZWZvcmVFYWNoIGFuZCBhZnRlckVhY2ggc3VwcG9ydCBmb3IgYnJvd3NlciBlbnZpcm9ubWVudFxuZXhwb3J0IGNvbnN0IGJlZm9yZUVhY2ggPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5iZWZvcmVFYWNoXG4gICAgOiAoZm4pID0+IHtcbiAgICAgICAgY29uc3QgaG9va3MgPSBzdWl0ZUhvb2tzLmdldChjdXJyZW50U3VpdGUpIHx8IHsgYmVmb3JlRWFjaDogW10sIGFmdGVyRWFjaDogW10gfTtcbiAgICAgICAgaG9va3MuYmVmb3JlRWFjaC5wdXNoKGZuKTtcbiAgICAgICAgc3VpdGVIb29rcy5zZXQoY3VycmVudFN1aXRlLCBob29rcyk7XG4gICAgfTtcbmV4cG9ydCBjb25zdCBhZnRlckVhY2ggPSBpc1ZpdGVzdFxuICAgID8gZ2xvYmFsVGhpcy5hZnRlckVhY2hcbiAgICA6IChmbikgPT4ge1xuICAgICAgICBjb25zdCBob29rcyA9IHN1aXRlSG9va3MuZ2V0KGN1cnJlbnRTdWl0ZSkgfHwgeyBiZWZvcmVFYWNoOiBbXSwgYWZ0ZXJFYWNoOiBbXSB9O1xuICAgICAgICBob29rcy5hZnRlckVhY2gucHVzaChmbik7XG4gICAgICAgIHN1aXRlSG9va3Muc2V0KGN1cnJlbnRTdWl0ZSwgaG9va3MpO1xuICAgIH07XG4vLyBFeGVjdXRlIHRlc3RzIGluIGJyb3dzZXIgZW52aXJvbm1lbnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlQnJvd3NlclRlc3RzKCkge1xuICAgIGxldCBwYXNzZWQgPSAwO1xuICAgIGxldCBmYWlsZWQgPSAwO1xuICAgIGNvbnN0IGZhaWx1cmVzID0gW107XG4gICAgY29uc29sZS5sb2coYPCfp6ogUnVubmluZyAke3Rlc3RRdWV1ZS5sZW5ndGh9IHRlc3RzLi4uXFxuYCk7XG4gICAgLy8gR3JvdXAgdGVzdHMgYnkgc3VpdGUgZm9yIGJldHRlciBvdXRwdXRcbiAgICBjb25zdCB0ZXN0c0J5U3VpdGUgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB0ZXN0IG9mIHRlc3RRdWV1ZSkge1xuICAgICAgICBjb25zdCBrZXkgPSB0ZXN0LnN1aXRlIHx8IG51bGw7XG4gICAgICAgIGNvbnN0IHN1aXRlVGVzdHMgPSB0ZXN0c0J5U3VpdGUuZ2V0KGtleSkgfHwgW107XG4gICAgICAgIHN1aXRlVGVzdHMucHVzaCh0ZXN0KTtcbiAgICAgICAgdGVzdHNCeVN1aXRlLnNldChrZXksIHN1aXRlVGVzdHMpO1xuICAgIH1cbiAgICAvLyBSdW4gdGVzdHMgZ3JvdXBlZCBieSBzdWl0ZVxuICAgIGZvciAoY29uc3QgW3N1aXRlTmFtZSwgdGVzdHNdIG9mIHRlc3RzQnlTdWl0ZSkge1xuICAgICAgICBpZiAoc3VpdGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtzdWl0ZU5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCB0ZXN0IG9mIHRlc3RzKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRlbnQgPSBzdWl0ZU5hbWUgPyAnICAnIDogJyc7XG4gICAgICAgICAgICBjb25zdCBob29rcyA9IHN1aXRlSG9va3MuZ2V0KHRlc3Quc3VpdGUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBSdW4gYmVmb3JlRWFjaCBob29rc1xuICAgICAgICAgICAgICAgIGlmIChob29rcz8uYmVmb3JlRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgaG9va3MuYmVmb3JlRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgaG9vaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJ1biB0aGUgdGVzdFxuICAgICAgICAgICAgICAgIGF3YWl0IHRlc3QuZm4oKTtcbiAgICAgICAgICAgICAgICBwYXNzZWQrKztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnR94pyFICR7dGVzdC5uYW1lfWApO1xuICAgICAgICAgICAgICAgIC8vIFJ1biBhZnRlckVhY2ggaG9va3MgZXZlbiBvbiBzdWNjZXNzXG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzPy5hZnRlckVhY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIGhvb2tzLmFmdGVyRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgaG9vaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZmFpbGVkKys7XG4gICAgICAgICAgICAgICAgZmFpbHVyZXMucHVzaCh7IHRlc3Q6IHRlc3QubmFtZSwgc3VpdGU6IHRlc3Quc3VpdGUsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke2luZGVudH3inYwgJHt0ZXN0Lm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIHJ1biBhZnRlckVhY2ggaG9va3MgZXZlbiBvbiBmYWlsdXJlXG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzPy5hZnRlckVhY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBob29rIG9mIGhvb2tzLmFmdGVyRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBob29rKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoYWZ0ZXJFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGFmdGVyRWFjaCBob29rOicsIGFmdGVyRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdWl0ZU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcnKTsgLy8gRW1wdHkgbGluZSBhZnRlciBzdWl0ZVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBcXG7wn5OKIFRlc3QgUmVzdWx0czogJHtwYXNzZWR9IHBhc3NlZCwgJHtmYWlsZWR9IGZhaWxlZGApO1xuICAgIGlmIChmYWlsdXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1xcbuKdjCBGYWlsZWQgVGVzdHM6Jyk7XG4gICAgICAgIGZhaWx1cmVzLmZvckVhY2goKHsgdGVzdCwgc3VpdGUsIGVycm9yIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxOYW1lID0gc3VpdGUgPyBgJHtzdWl0ZX0gPiAke3Rlc3R9YCA6IHRlc3Q7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBcXG4ke2Z1bGxOYW1lfTpgKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGV4dHJhY3QgVHlwZVNjcmlwdCBmaWxlIHJlZmVyZW5jZXMgZnJvbSBzdGFja1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrTGluZXMgPSBlcnJvci5zdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgc3RhY2tMaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnLnRzOicpICYmICFsaW5lLmluY2x1ZGVzKCdub2RlX21vZHVsZXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihsaW5lLnRyaW0oKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENsZWFyIHF1ZXVlcyBmb3IgbmV4dCBydW5cbiAgICB0ZXN0UXVldWUgPSBbXTtcbiAgICBzdWl0ZXMuY2xlYXIoKTtcbiAgICBzdWl0ZUhvb2tzLmNsZWFyKCk7XG4gICAgY3VycmVudFN1aXRlID0gbnVsbDtcbiAgICByZXR1cm4gZmFpbGVkID09PSAwO1xufVxuIiwiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QgfSBmcm9tICcuL3Rlc3RpbmcnO1xuaW1wb3J0IHsgY2xpY2ssIGNsaWNrT25lLCBmb2N1cywga2V5ZG93bk9uLCBxdWVyeSB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn4piR77iPIHRvZG9zJywgZnVuY3Rpb24gdG9kb3MoKSB7XG4gICAgY29uc3QgdG9kb0lucHV0ID0gcXVlcnkoJy5uZXctdG9kbycpWzBdO1xuICAgIGl0KCd0b2RvcyBhZGQgb25lIHJlbW92ZSBvbmUnLCBhc3luYyBmdW5jdGlvbiBhZGRPbmVSZW1vdmVPbmUoKSB7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICAgIGNsaWNrKCcjdG9kby12aWV3LWFsbC1saW5rJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEpOyAvLyB3aW5kb3cgcm91dGUgY2hhbmdlIHRha2VzIGEgdGlja1xuICAgICAgICBleHBlY3QocXVlcnkoJ2J1dHRvbi5kZXN0cm95JykubGVuZ3RoKS50b0JlKDApO1xuICAgICAgICBleHBlY3QodG9kb0lucHV0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICB0b2RvSW5wdXQudmFsdWUgPSAnb25lJztcbiAgICAgICAga2V5ZG93bk9uKHRvZG9JbnB1dCwgJ0VudGVyJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMSk7IC8vIGV4cGVjdGVkIG9uZSBuZXcgdG9kb1xuICAgICAgICAvLyBkZWxldGUgaXRcbiAgICAgICAgY2xpY2soJ2J1dHRvbi5kZXN0cm95Jyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG4gICAgaXQoJ3RvZG9zIGJhc2ljJywgYXN5bmMgZnVuY3Rpb24gYmFzaWMoKSB7XG4gICAgICAgIC8vIGNsaWNrKCcjdG9kby12aWV3LWFsbC1saW5rJylcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnIy8nO1xuICAgICAgICBhd2FpdCBzbGVlcCgxKTsgLy8gd2luZG93IHJvdXRlIGNoYW5nZSB0YWtlcyBhIHRpY2tcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdidXR0b24uZGVzdHJveScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICAgICAgdG9kb0lucHV0LnZhbHVlID0gJ29uZSc7XG4gICAgICAgIGtleWRvd25Pbih0b2RvSW5wdXQsICdFbnRlcicpO1xuICAgICAgICAvLyBjaGVja2JveCB0b2dnbGVcbiAgICAgICAgY2xpY2soJ2lucHV0LnRvZ2dsZScpO1xuICAgICAgICAvLyBkZWxldGUgaXRcbiAgICAgICAgY2xpY2soJ2J1dHRvbi5kZXN0cm95Jyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMCk7IC8vIGV4cGVjdGVkIHRvZG8gMCBkZWxldGVkXG4gICAgICAgIHRvZG9JbnB1dC52YWx1ZSA9ICdvbmUnO1xuICAgICAgICBrZXlkb3duT24odG9kb0lucHV0LCAnRW50ZXInKTtcbiAgICAgICAgdG9kb0lucHV0LnZhbHVlID0gJ3R3byc7XG4gICAgICAgIGtleWRvd25Pbih0b2RvSW5wdXQsICdFbnRlcicpO1xuICAgICAgICBjb25zdCB0b2RvVG9nZ2xlMiA9IHF1ZXJ5KCdpbnB1dC50b2dnbGUnKVsxXTtcbiAgICAgICAgdG9kb1RvZ2dsZTIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHRvZG9Ub2dnbGUyLmNoZWNrZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgIHRvZG9JbnB1dC52YWx1ZSA9ICd0aHJlZSc7XG4gICAgICAgIGtleWRvd25Pbih0b2RvSW5wdXQsICdFbnRlcicpOyAvLyBFbnRlclxuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgzKTtcbiAgICAgICAgY2xpY2soJyN0b2RvLXZpZXctYWN0aXZlLWxpbmsnKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMyk7IC8vIGFjdGl2ZSB0b2RvIGNvdW50IGJlZm9yZSBwYWdlIGNoYW5nZVxuICAgICAgICBleHBlY3Qod2luZG93LmxvY2F0aW9uLmhhc2gpLnRvQmUoJyMvYWN0aXZlJyk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEpOyAvLyB3aW5kb3cgcm91dGUgY2hhbmdlIHRha2VzIGEgdGlja1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgyKTsgLy8gYWN0aXZlIHRvZG8gY291bnQgYWZ0ZXIgcGFnZSBjaGFuZ2VcbiAgICAgICAgY2xpY2soJyN0b2RvLXZpZXctY29tcGxldGVkLWxpbmsnKTtcbiAgICAgICAgYXdhaXQgc2xlZXAoMSk7IC8vIHdpbmRvdyByb3V0ZSBjaGFuZ2UgdGFrZXMgYSB0aWNrXG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDEpOyAvLyBjb21wbGV0ZWQgdG9kbyBjb3VudFxuICAgICAgICBjbGljaygnI3RvZG8tdmlldy1hbGwtbGluaycpO1xuICAgICAgICBhd2FpdCBzbGVlcCgxKTsgLy8gd2luZG93IHJvdXRlIGNoYW5nZSB0YWtlcyBhIHRpY2tcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMyk7IC8vIHZpZXcgYWxsIHRvZG8gY291bnRcbiAgICAgICAgLy8gZGVsZXRlIDBcbiAgICAgICAgY2xpY2tPbmUoJ2J1dHRvbi5kZXN0cm95Jyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQudG9nZ2xlJykubGVuZ3RoKS50b0JlKDIpO1xuICAgICAgICAvLyBkZWxldGUgMFxuICAgICAgICBjbGlja09uZSgnYnV0dG9uLmRlc3Ryb3knKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC50b2dnbGUnKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIC8vIGRlbGV0ZSAwXG4gICAgICAgIGNsaWNrT25lKCdidXR0b24uZGVzdHJveScpO1xuICAgICAgICBleHBlY3QocXVlcnkoJ2lucHV0LnRvZ2dsZScpLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcbiAgICBpdCgndG9kb3MgZWRpdGluZycsIGZ1bmN0aW9uIGVkaXRpbmcoKSB7XG4gICAgICAgIC8vIGNyZWF0ZSB0b2RvXG4gICAgICAgIHRvZG9JbnB1dC52YWx1ZSA9ICdvbmUnO1xuICAgICAgICBrZXlkb3duT24odG9kb0lucHV0LCAnRW50ZXInKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICAgIC8vIHByZXBhcmUgdG8gbWFrZSBuZXcgdG9kbyBiZWNvbWUgZWRpdGFibGVcbiAgICAgICAgbGV0IGV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoJ2RibGNsaWNrJywge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSwgLy8gRXZlbnQgd2lsbCBidWJibGUgdXAgdGhyb3VnaCB0aGUgRE9NXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLCAvLyBFdmVudCBjYW4gYmUgY2FuY2VsbGVkXG4gICAgICAgICAgICB2aWV3OiB3aW5kb3cgLy8gRGVmYXVsdCB2aWV3ICh3aW5kb3cpXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXZlbnQgb24gdGhlIHNwZWNpZmllZCBlbGVtZW50XG4gICAgICAgIHF1ZXJ5KCdsYWJlbFtkYXRhLXRlc3RpZD1cInRvZG8taXRlbS1sYWJlbFwiXScpWzBdLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAvLyBzaG91bGQgaGF2ZSB0d28gaW5wdXRzLCB0aGUgbWFpbiBhbmQgdGhlIGVkaXRcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dC5uZXctdG9kbycpLmxlbmd0aCkudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5KCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIGZvY3VzKCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKTtcbiAgICAgICAgY29uc3QgZWRpdElucHV0ID0gcXVlcnkoJ2lucHV0I2VkaXQtdG9kby1pbnB1dCcpWzBdO1xuICAgICAgICBlZGl0SW5wdXQudmFsdWUgPSAndHdvJztcbiAgICAgICAga2V5ZG93bk9uKGVkaXRJbnB1dCwgJ0VudGVyJyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnYnV0dG9uLmRlc3Ryb3knKS5sZW5ndGgpLnRvQmUoMSk7IC8vIGV4cGVjdGVkIG9ubHkgb25lIGRlbGV0ZSBidXR0b25cbiAgICAgICAgLy8gbWFpbiBpbnB1dCArIGFycmF5IGlucHV0XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQubmV3LXRvZG8nKS5sZW5ndGgpLnRvQmUoMSk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQjZWRpdC10b2RvLWlucHV0JykubGVuZ3RoKS50b0JlKDApOyAvLyBlbnRlciBrZXkgYWxyZWFkeSBoaWQgaXRcbiAgICAgICAgLy8gYmx1cignaW5wdXQjZWRpdC10b2RvLWlucHV0JylcbiAgICAgICAgLy8gZXhwZWN0KHF1ZXJ5KCdpbnB1dCNlZGl0LXRvZG8taW5wdXQnKS5sZW5ndGgpLnRvQmUoMClcbiAgICAgICAgLy8gZGVsZXRlIDBcbiAgICAgICAgY2xpY2tPbmUoJ2J1dHRvbi5kZXN0cm95Jyk7XG4gICAgICAgIGV4cGVjdChxdWVyeSgnaW5wdXQjZWRpdC10b2RvLWlucHV0JykubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICAgIGl0KCfijJrvuI8gdG9kb3Mgc3BlZWRvbWV0ZXInLCBydW5Ub2RvU3BlZWRvbWV0ZXIpO1xufSk7XG5mdW5jdGlvbiBydW5Ub2RvU3BlZWRvbWV0ZXIoKSB7XG4gICAgY29uc3QgbnVtYmVyT2ZJdGVtc1RvQWRkID0gNTAwO1xuICAgIGNvbnNvbGUudGltZSgn4piA77iPLXNwZWVkb21ldGVyLWFsbCcpO1xuICAgIGNvbnNvbGUudGltZSgn8J+GlSBzcGVlZG9tZXRlci1hZGRpbmcnKTtcbiAgICBjb25zdCBuZXdUb2RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXctdG9kb1wiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mSXRlbXNUb0FkZDsgaSsrKSB7XG4gICAgICAgIG5ld1RvZG8udmFsdWUgPSAnYWFhIC0gJyArIGk7XG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBldmVudCBvbiB0aGUgY2hpbGQgZWxlbWVudFxuICAgICAgICBrZXlkb3duT24obmV3VG9kbywgJ0VudGVyJyk7XG4gICAgfVxuICAgIGNvbnNvbGUudGltZUVuZCgn8J+GlSBzcGVlZG9tZXRlci1hZGRpbmcnKTtcbiAgICBjb25zb2xlLnRpbWUoJ+Kcj++4jyBzcGVlZG9tZXRlci1lZGl0aW5nJyk7XG4gICAgY29uc3QgY2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudG9nZ2xlXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZJdGVtc1RvQWRkOyBpKyspXG4gICAgICAgIGNoZWNrYm94ZXNbaV0uY2xpY2soKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoJ+Kcj++4jyBzcGVlZG9tZXRlci1lZGl0aW5nJyk7XG4gICAgY29uc29sZS50aW1lKCfwn5eR77iPIHNwZWVkb21ldGVyLWRlbGV0aW5nJyk7XG4gICAgY29uc3QgZGVsZXRlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGVzdHJveVwiKTtcbiAgICBmb3IgKGxldCBpID0gbnVtYmVyT2ZJdGVtc1RvQWRkIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIGRlbGV0ZUJ1dHRvbnNbaV0uY2xpY2soKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoJ/Cfl5HvuI8gc3BlZWRvbWV0ZXItZGVsZXRpbmcnKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoJ+KYgO+4jy1zcGVlZG9tZXRlci1hbGwnKTtcbn1cbiIsImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnLi90ZXN0aW5nJztcbmltcG9ydCB7IGNsaWNrLCBodG1sLCBodG1sQnlJZCB9IGZyb20gJy4vdGVzdGluZyc7XG5pbXBvcnQgeyBleHBlY3RNYXRjaGVkSHRtbCB9IGZyb20gJy4vdGVzdGluZyc7XG5kZXNjcmliZSgn4oya77iPIHdhdGNoIHRlc3RzJywgKCkgPT4ge1xuICAgIGNvbnN0IHNsb3dDb3VudCA9IGh0bWwoJyPwn42ELXNsb3dDaGFuZ2VDb3VudCcpO1xuICAgIC8vIHRlc3RzIGNhbiBiZSBydW4gbXVsdGlwbGUgdGltZXMuIE9ubHkgdGhlIGZpcnN0IHRpbWUgd2lsbCB0aGlzIGV4cGVjdCBiZWxvdyB3b3JrXG4gICAgY29uc3QgZmlyc3RSdW4gPSBzbG93Q291bnQgPT09ICcwJztcbiAgICBpdCgnYmFzaWMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0Q291bnQgPSBOdW1iZXIoaHRtbEJ5SWQoJ3dhdGNoLXRlc3RpbmctbnVtLWRpc3BsYXknKSk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjd2F0Y2gtdGVzdGluZy1udW0tZGlzcGxheScsICcj8J+NhC1zbG93Q2hhbmdlQ291bnQnKTtcbiAgICAgICAgLy8gYWx3YXlzIHN0YXJ0cyBhdCBcImZhbHNlXCJcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlJykpLnRvQmUoJ2ZhbHNlJyk7XG4gICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZXhwZWN0KGh0bWwoJyPwn42ELXdhdGNoUHJvcE51bVNsb3cnKSkudG9CZSgnJyk7XG4gICAgICAgICAgICBleHBlY3QoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aCcpKS50b0JlKCdmYWxzZScpO1xuICAgICAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGhBc1N1YicpKS50b0JlKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKCcj8J+NhC13YXRjaFByb3BOdW1TbG93JykpLnRvQmUoc2xvd0NvdW50KTtcbiAgICAgICAgICAgIGV4cGVjdChOdW1iZXIoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aCcpKSkudG9CZUdyZWF0ZXJUaGFuKE51bWJlcihzbG93Q291bnQpKTtcbiAgICAgICAgICAgIGV4cGVjdChodG1sKCcj8J+mty13YXRjaFRydXRoQXNTdWInKSkudG9CZShodG1sKCcj8J+mty10cnV0aFN1YkNoYW5nZUNvdW50JykpO1xuICAgICAgICB9XG4gICAgICAgIGNsaWNrKCcjd2F0Y2gtdGVzdGluZy1udW0tYnV0dG9uJyk7XG4gICAgICAgIGV4cGVjdE1hdGNoZWRIdG1sKCcjd2F0Y2gtdGVzdGluZy1udW0tZGlzcGxheScsICcj8J+NhC1zbG93Q2hhbmdlQ291bnQnKTtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyPwn42ELXdhdGNoUHJvcE51bVNsb3cnLCAnI/CfjYQtc2xvd0NoYW5nZUNvdW50Jyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+NhOKAjfCfn6stc3ViamVjdENoYW5nZUNvdW50JykpLnRvQmUoKHN0YXJ0Q291bnQgKyAyKS50b1N0cmluZygpKTtcbiAgICAgICAgZXhwZWN0TWF0Y2hlZEh0bWwoJyPwn42E4oCN8J+fqy1zdWJqZWN0Q2hhbmdlQ291bnQnLCAnI/CfjYTigI3wn5+rLXdhdGNoUHJvcE51bVN1YmplY3QnKTtcbiAgICAgICAgY29uc3QgdHJ1dGhTdGFydENvdW50ID0gTnVtYmVyKGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlQ291bnQnKSk7XG4gICAgICAgIGNsaWNrKCcj8J+mty10cnV0aENoYW5nZS1idXR0b24nKTtcbiAgICAgICAgbGV0IG5ld0NvdW50ID0gKHRydXRoU3RhcnRDb3VudCArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vIGl0cyBiZWVuIGNoYW5nZWQgdG8gXCJ0cnVlXCIsIHRoYXQgY2F1c2VzIGEgY2hhbmdlIHdhdGNoIGNvdW50IGluY3JlYXNlXG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZScpKS50b0JlKCd0cnVlJyk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty13YXRjaFRydXRoJykpLnRvQmUobmV3Q291bnQpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/CfprctdHJ1dGhDaGFuZ2VDb3VudCcpKS50b0JlKG5ld0NvdW50KTtcbiAgICAgICAgY2xpY2soJyPwn6a3LXRydXRoQ2hhbmdlLWJ1dHRvbicpO1xuICAgICAgICBuZXdDb3VudCA9ICh0cnV0aFN0YXJ0Q291bnQgKyAxKS50b1N0cmluZygpO1xuICAgICAgICAvLyBpdHMgYmVlbiBjaGFuZ2VkIHRvIGJhY2sgdG8gXCJmYWxzZVwiLCB0aGF0IGRvZXMgTk9UIGNhdXNlIGEgY2hhbmdlIHdhdGNoIGNvdW50IGluY3JlYXNlXG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZScpKS50b0JlKCdmYWxzZScpO1xuICAgICAgICBleHBlY3QoaHRtbCgnI/Cfprctd2F0Y2hUcnV0aCcpKS50b0JlKG5ld0NvdW50KTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlQ291bnQnKSkudG9CZShuZXdDb3VudCk7XG4gICAgICAgIGNsaWNrKCcj8J+mty10cnV0aENoYW5nZS1idXR0b24nKTtcbiAgICAgICAgLy8gaXRzIGJlZW4gY2hhbmdlZCB0byBcInRydWVcIiwgdGhhdCBjYXVzZXMgYSBjaGFuZ2Ugd2F0Y2ggY291bnQgaW5jcmVhc2VcbiAgICAgICAgbmV3Q291bnQgPSAodHJ1dGhTdGFydENvdW50ICsgMikudG9TdHJpbmcoKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXRydXRoQ2hhbmdlJykpLnRvQmUoJ3RydWUnKTtcbiAgICAgICAgZXhwZWN0KGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGgnKSkudG9CZShuZXdDb3VudCk7XG4gICAgICAgIGV4cGVjdChodG1sKCcj8J+mty10cnV0aENoYW5nZUNvdW50JykpLnRvQmUobmV3Q291bnQpO1xuICAgICAgICBjbGljaygnI/CfprctdHJ1dGhDaGFuZ2UtYnV0dG9uJyk7IC8vIHJlc2V0IHNvIHRlc3RzIGNhbiBwYXNzIGV2ZXJ5IHRpbWVcbiAgICAgICAgY2xpY2soJyPwn6a3LXJlc2V0LWJ1dHRvbicpOyAvLyByZXNldCBzbyB0ZXN0cyBjYW4gcGFzcyBldmVyeSB0aW1lXG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSBodG1sKCcj8J+mty13YXRjaFRydXRoJyk7XG4gICAgICAgIGNvbnN0IGFjdHVhbCA9IGh0bWwoJyPwn6a3LXdhdGNoVHJ1dGhBc1N1YicpO1xuICAgICAgICBleHBlY3QoYWN0dWFsKS50b0JlKGRpc3BsYXkpOyAvLyBMYXN0IHRlc3QgZXhwZWN0ZWQgI/Cfprctd2F0Y2hUcnV0aEFzU3ViICR7ZGlzcGxheX0gYnV0IGl0IHdhcyAke2FjdHVhbH1cbiAgICB9KTtcbn0pO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5leHBvcnQgY29uc3QgdmFyaWFibGVQcmVmaXggPSAnOnRhZ3Zhcic7XG5leHBvcnQgY29uc3QgdmFyaWFibGVTdWZmaXggPSAnOic7XG4iLCIvKiogTG9va2luZyBmb3IgKGNsYXNzIHwgc3R5bGUpIGZvbGxvd2VkIGJ5IGEgcGVyaW9kICovXG5leHBvcnQgZnVuY3Rpb24gaXNTcGVjaWFsQXR0cihhdHRyTmFtZSkge1xuICAgIGlmIChhdHRyTmFtZS5zdGFydHNXaXRoKCdjbGFzcy4nKSkge1xuICAgICAgICByZXR1cm4gJ2NsYXNzJztcbiAgICB9XG4gICAgY29uc3Qgc3BlY2lhbEFjdGlvbiA9IGlzU3BlY2lhbEFjdGlvbihhdHRyTmFtZSk7XG4gICAgaWYgKHNwZWNpYWxBY3Rpb24gIT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBzcGVjaWFsQWN0aW9uO1xuICAgIH1cbiAgICBpZiAoYXR0ck5hbWUuc3RhcnRzV2l0aCgnc3R5bGUuJykpIHtcbiAgICAgICAgcmV0dXJuICdzdHlsZSc7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpYWxBY3Rpb24oYXR0ck5hbWUpIHtcbiAgICBzd2l0Y2ggKGF0dHJOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2F1dG9zZWxlY3QnOlxuICAgICAgICAgICAgcmV0dXJuICdhdXRvc2VsZWN0JztcbiAgICAgICAgY2FzZSAnYXV0b2ZvY3VzJzpcbiAgICAgICAgICAgIHJldHVybiAnYXV0b2ZvY3VzJztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgdmFyaWFibGVTdWZmaXgsIHZhcmlhYmxlUHJlZml4IH0gZnJvbSBcIi4uLy4uL3RhZy9Eb21UYWcudHlwZS5qc1wiO1xuZXhwb3J0IGNvbnN0IHBsYWNlaG9sZGVyUmVnZXggPSBuZXcgUmVnRXhwKHZhcmlhYmxlUHJlZml4ICsgJyhcXFxcZCspJyArIHZhcmlhYmxlU3VmZml4LCAnZycpO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhZ1ZhckluZGV4KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLnNlYXJjaCAmJiB2YWx1ZS5zdGFydHNXaXRoKHZhcmlhYmxlUHJlZml4KSkge1xuICAgICAgICByZXR1cm4gdmFsdWUuc2VhcmNoKHBsYWNlaG9sZGVyUmVnZXgpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG4iLCJpbXBvcnQgeyB2YXJpYWJsZVByZWZpeCwgdmFyaWFibGVTdWZmaXggfSBmcm9tIFwiLi4vLi4vdGFnL0RvbVRhZy50eXBlLmpzXCI7XG5pbXBvcnQgeyBpc1NwZWNpYWxBdHRyIH0gZnJvbSBcIi4uL2F0dHJpYnV0ZXMvaXNTcGVjaWFsQXR0cmlidXRlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBmYWtlVGFnc1JlZ0V4LCBmaW5kUmVhbFRhZ3NSZWdFeCB9IGZyb20gXCIuL2h0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwbGFjZWhvbGRlclJlZ2V4IH0gZnJvbSBcIi4uLy4uL3JlbmRlci9hdHRyaWJ1dGVzL2dldFRhZ1ZhckluZGV4LmZ1bmN0aW9uLmpzXCI7XG5jb25zdCBmcmFnRmluZEFueSA9IC8oOnRhZ3ZhclxcZCs6KS87XG5jb25zdCBvbmRvdWJsZWNsaWNrID0gJ29uZG91YmxlY2xpY2snO1xuY29uc3QgcmVnZXhBdHRyID0gLyhbOl9hLXpBLVowLTlcXC0uXSspXFxzKig/Oj1cXHMqXCIoW15cIl0qKVwifD1cXHMqKFxcUyspKT8vZztcbmNvbnN0IHJlZ2V4VGFnT3JnID0gLzxcXC8/KFthLXpBLVowLTktXSspKCg/OlxccytbYS16QS1aXzoqXVtcXHc6Li1dKig/Olxccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXlxcc1wiJz08PmBdKykpPykrXFxzKnxcXHMqKVxcLz8+L2c7XG4vKiogTWFpbiBzdGFydCBvZiBzdHJpbmcgcGFyc2luZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSFRNTChodG1sKSB7XG4gICAgY29uc3QgdmFsdWVQb3NpdGlvbnMgPSBbXTtcbiAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgbGV0IGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICBsZXQgdmFsdWVJbmRleCA9IC0xO1xuICAgIGxldCBwb3NpdGlvbiA9IDA7XG4gICAgY29uc3QgcmVnZXhUYWcgPSBuZXcgUmVnRXhwKHJlZ2V4VGFnT3JnLCAnZycpO1xuICAgIGh0bWwgPSBwcmVwcm9jZXNzVGFnc0luQ29tbWVudHMoaHRtbCk7XG4gICAgd2hpbGUgKHBvc2l0aW9uIDwgaHRtbC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdGFnTWF0Y2ggPSByZWdleFRhZy5leGVjKGh0bWwpO1xuICAgICAgICBpZiAoIXRhZ01hdGNoKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbZnVsbE1hdGNoLCB0YWdOYW1lLCBhdHRyU3RyaW5nXSA9IHRhZ01hdGNoO1xuICAgICAgICBjb25zdCBpc0Nsb3NpbmdUYWcgPSBmdWxsTWF0Y2guc3RhcnRzV2l0aCgnPC8nKTtcbiAgICAgICAgY29uc3QgaXNTZWxmQ2xvc2luZyA9IGZ1bGxNYXRjaC5lbmRzV2l0aCgnLz4nKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgdGFnTWF0Y2guaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gaHRtbC5zbGljZShwb3NpdGlvbiwgdGFnTWF0Y2guaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRleHRDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRWYXJNYXRjaGVzID0gc3BsaXRCeVRhZ1Zhcih0ZXh0Q29udGVudCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGV4dENvbnRlbnQgb2YgdGV4dFZhck1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRDb250ZW50LnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpICYmIHRleHRDb250ZW50LnNlYXJjaChmcmFnRmluZEFueSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaXRzIG5vdCBmYWtlIHRoZW4gbGV0cyBub3cgY29uc2lkZXIgdGhpcyBhIHJlYWwgdmFyaWFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Q29udGVudC5zZWFyY2goZmFrZVRhZ3NSZWdFeCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbnRlbnQgPSB2YXJpYWJsZVByZWZpeCArICgrK3ZhbHVlSW5kZXgpICsgdmFyaWFibGVTdWZmaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHVzaFRleHRUbyhjdXJyZW50RWxlbWVudCwgZWxlbWVudHMsIHRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcG9zaXRpb24gPSB0YWdNYXRjaC5pbmRleCArIGZ1bGxNYXRjaC5sZW5ndGg7XG4gICAgICAgIGlmIChpc0Nsb3NpbmdUYWcpIHtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gc3RhY2sucG9wKCkgfHwgbnVsbDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgbGV0IGF0dHJNYXRjaDtcbiAgICAgICAgd2hpbGUgKChhdHRyTWF0Y2ggPSByZWdleEF0dHIuZXhlYyhhdHRyU3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlSW5kZXggPSBwYXJzZUF0dHJTdHJpbmcoYXR0ck1hdGNoLCB2YWx1ZUluZGV4LCB2YWx1ZVBvc2l0aW9ucywgYXR0cmlidXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHtcbiAgICAgICAgICAgIG5uOiB0YWdOYW1lLCAvLyBub2RlTmFtZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYXQgPSBhdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50RWxlbWVudC5jaCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LmNoID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudC5jaC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzU2VsZkNsb3NpbmcpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goY3VycmVudEVsZW1lbnQpO1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbiA8IGh0bWwubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gaHRtbC5zbGljZShwb3NpdGlvbik7XG4gICAgICAgIGlmICh0ZXh0Q29udGVudC50cmltKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRWYXJNYXRjaGVzID0gc3BsaXRCeVRhZ1Zhcih0ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRleHRDb250ZW50IG9mIHRleHRWYXJNYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRleHRDb250ZW50LnN0YXJ0c1dpdGgodmFyaWFibGVQcmVmaXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICsrdmFsdWVJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHVzaFRleHRUbyhjdXJyZW50RWxlbWVudCwgZWxlbWVudHMsIHRleHRDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudHM7XG59XG5jb25zdCByZW1vdmVDb21tZW50UmVnWCA9IG5ldyBSZWdFeHAoJyg8IS0tW1xcXFxzXFxcXFNdKj8tLT4pJywgJ2cnKTtcbmZ1bmN0aW9uIHByZXByb2Nlc3NUYWdzSW5Db21tZW50cyhodG1sKSB7XG4gICAgLy8gVXNlIGEgcmVnZXggdG8gZmluZCBhbGwgSFRNTCBjb21tZW50c1xuICAgIHJldHVybiBodG1sLnJlcGxhY2UocmVtb3ZlQ29tbWVudFJlZ1gsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAvLyBGb3IgZWFjaCBjb21tZW50IGZvdW5kLCByZXBsYWNlIDwgYW5kID4gaW5zaWRlIGl0XG4gICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKC9cXFtsIHRcXF0vZywgJ1tsJm5ic3A7dF0nKS5yZXBsYWNlKC9cXFtnIHRcXF0vZywgJ1tnJm5ic3A7dF0nKS5yZXBsYWNlKC88L2csICdbbCB0XScpLnJlcGxhY2UoLz4vZywgJ1tnIHRdJyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjbGVhbkV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgICBpZiAoZXZlbnROYW1lLnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgY29uc3QgY291bGRCeURibENsaWNrID0gZXZlbnROYW1lLmxlbmd0aCA9PT0gb25kb3VibGVjbGljay5sZW5ndGggJiYgZXZlbnROYW1lID09PSBvbmRvdWJsZWNsaWNrO1xuICAgICAgICBpZiAoY291bGRCeURibENsaWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RibGNsaWNrJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnROYW1lLnNsaWNlKDIsIGV2ZW50TmFtZS5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnROYW1lO1xufVxuZnVuY3Rpb24gcHVzaFRleHRUbyhjdXJyZW50RWxlbWVudCwgZWxlbWVudHMsIHRleHRDb250ZW50KSB7XG4gICAgY29uc3QgdGV4dE5vZGUgPSB7XG4gICAgICAgIG5uOiAndGV4dCcsIC8vIG5vZGVOYW1lXG4gICAgICAgIHRjOiBwb3N0UHJvY2Vzc1RhZ3NJbkNvbW1lbnRzKHRleHRDb250ZW50KSwgLy8gdGV4dENvbnRlbnRcbiAgICB9O1xuICAgIHB1c2hUbyhjdXJyZW50RWxlbWVudCwgZWxlbWVudHMsIHRleHROb2RlKTtcbn1cbi8qKiBUT0RPOiBUaGlzIGhhcyBnb3QgdG8gYmUgdG9vIGV4cGVuc2l2ZSAqL1xuZnVuY3Rpb24gcG9zdFByb2Nlc3NUYWdzSW5Db21tZW50cyhodG1sKSB7XG4gICAgLy8gVXNlIGEgcmVnZXggdG8gZmluZCBhbGwgc2VnbWVudHMgdGhhdCBsb29rIGxpa2UgcHJvY2Vzc2VkIGNvbW1lbnRzXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvKFxcW2wgdFxcXSEtLVtcXHNcXFNdKj8tLVxcW2cgdFxcXSkvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIC8vIEZvciBlYWNoIHByb2Nlc3NlZCBjb21tZW50IGZvdW5kLCByZXBsYWNlICpsdCogYW5kICpndCogYmFjayB0byA8IGFuZCA+XG4gICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKC9cXFtsIHRcXF0vZywgJzwnKS5yZXBsYWNlKC9cXFtnIHRcXF0vZywgJz4nKS5yZXBsYWNlKC9cXFtsJm5ic3A7dFxcXS9nLCAnW2wgdF0nKS5yZXBsYWNlKC9cXFtnJm5ic3A7dFxcXS9nLCAnW2cgdF0nKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHB1c2hUbyhjdXJyZW50RWxlbWVudCwgZWxlbWVudHMsIHRleHROb2RlKSB7XG4gICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgIGlmICghY3VycmVudEVsZW1lbnQuY2gpIHtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LmNoID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudEVsZW1lbnQuY2gucHVzaCh0ZXh0Tm9kZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbGVtZW50cy5wdXNoKHRleHROb2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzcGxpdEJ5VGFnVmFyKGlucHV0U3RyaW5nKSB7XG4gICAgLy8gU3BsaXQgdGhlIHN0cmluZyB1c2luZyB0aGUgcmVndWxhciBleHByZXNzaW9uLCBrZWVwIGRlbGltaXRlcnMgaW4gdGhlIG91dHB1dFxuICAgIGNvbnN0IHBhcnRzID0gaW5wdXRTdHJpbmcuc3BsaXQoZnJhZ0ZpbmRBbnkpO1xuICAgIC8vIEZpbHRlciBvdXQgYW55IGVtcHR5IHN0cmluZ3MgZnJvbSB0aGUgcmVzdWx0c1xuICAgIGNvbnN0IGZpbHRlcmVkUGFydHMgPSBwYXJ0cy5maWx0ZXIobm90RW1wdHlTdHJpbmdNYXBwZXIpO1xuICAgIHJldHVybiBmaWx0ZXJlZFBhcnRzO1xufVxuZnVuY3Rpb24gbm90RW1wdHlTdHJpbmdNYXBwZXIocGFydCkge1xuICAgIHJldHVybiBwYXJ0ICE9PSAnJztcbn1cbmZ1bmN0aW9uIHBhcnNlQXR0clN0cmluZyhhdHRyTWF0Y2gsIHZhbHVlSW5kZXgsIHZhbHVlUG9zaXRpb25zLCBhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyTWF0Y2hbMV0gfHwgYXR0ck1hdGNoWzNdIHx8IGF0dHJNYXRjaFs1XTtcbiAgICBjb25zdCBhdHRyQ2hvaWNlID0gYXR0ck1hdGNoWzJdIHx8IGF0dHJNYXRjaFs0XSB8fCBhdHRyTWF0Y2hbNl07XG4gICAgbGV0IGF0dHJWYWx1ZSA9IGF0dHJDaG9pY2U7XG4gICAgaWYgKGF0dHJOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlSW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IG5vdEVtcHR5ID0gYXR0ck1hdGNoWzJdICE9PSAnJztcbiAgICBjb25zdCBub1ZhbHVlID0gYXR0clZhbHVlID09PSB1bmRlZmluZWQgJiYgbm90RW1wdHk7XG4gICAgY29uc3QgbG93ZXJOYW1lID0gYXR0ck5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBmaXhlZE5hbWUgPSBsb3dlck5hbWUuc3RhcnRzV2l0aCgnb24nKSA/IGNsZWFuRXZlbnROYW1lKGxvd2VyTmFtZSkgOiBsb3dlck5hbWU7XG4gICAgaWYgKG5vVmFsdWUpIHtcbiAgICAgICAgY29uc3Qgc3RhbmRBbG9uZVZhciA9IGF0dHJOYW1lLnNsaWNlKDAsIHZhcmlhYmxlUHJlZml4Lmxlbmd0aCkgPT09IHZhcmlhYmxlUHJlZml4O1xuICAgICAgICBpZiAoc3RhbmRBbG9uZVZhcikge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVOYW1lID0gdmFyaWFibGVQcmVmaXggKyAoKyt2YWx1ZUluZGV4KSArIHZhcmlhYmxlU3VmZml4O1xuICAgICAgICAgICAgdmFsdWVQb3NpdGlvbnMucHVzaChbJ2F0JywgdmFsdWVOYW1lXSk7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goW3ZhbHVlTmFtZV0pOyAvLyB0aGUgbmFtZSBpdHNlbGYgaXMgZHluYW1pY1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRNYXRjaGVkID0gYXR0ck1hdGNoWzBdLnN0YXJ0c1dpdGgoYXR0ck5hbWUpO1xuICAgICAgICBjb25zdCBzdGFuZEFsb25lQXR0ciA9IHN0YXJ0TWF0Y2hlZCAmJiBhdHRyTWF0Y2hbMF0uc2xpY2UoYXR0ck5hbWUubGVuZ3RoLCBhdHRyTWF0Y2hbMF0ubGVuZ3RoKS5zZWFyY2goL1xccyskLykgPj0gMDtcbiAgICAgICAgaWYgKHN0YW5kQWxvbmVBdHRyKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goW2ZpeGVkTmFtZV0pO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2hvbGVWYWx1ZSA9IGF0dHJNYXRjaFszXTtcbiAgICAgICAgY29uc3QgaXNGYWtlVGFnID0gd2hvbGVWYWx1ZS5zZWFyY2goZmFrZVRhZ3NSZWdFeCkgPj0gMDtcbiAgICAgICAgaWYgKGlzRmFrZVRhZykge1xuICAgICAgICAgICAgYXR0clZhbHVlID0gd2hvbGVWYWx1ZTtcbiAgICAgICAgICAgIC8vIHRvIHJlc3RvcmU6IHdob2xlVmFsdWUucmVwbGFjZShmYWtlVGFnc1JlZ0V4LHZhcmlhYmxlUHJlZml4KyckMSQzJDQnK3ZhcmlhYmxlU3VmZml4KVxuICAgICAgICAgICAgY29uc3QgYXR0clNldCA9IFtmaXhlZE5hbWUsIGF0dHJWYWx1ZV07XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLnB1c2goYXR0clNldCk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTmFtZSA9IHZhcmlhYmxlUHJlZml4ICsgKCsrdmFsdWVJbmRleCkgKyB2YXJpYWJsZVN1ZmZpeDtcbiAgICAgICAgICAgIGF0dHJWYWx1ZSA9IHZhbHVlTmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW5vdEVtcHR5KSB7XG4gICAgICAgIGF0dHJWYWx1ZSA9IGF0dHJNYXRjaFsyXTtcbiAgICB9XG4gICAgLy8gY29uY2F0IGF0dHJpYnV0ZXMgYXMgYXJyYXlcbiAgICBjb25zdCBhdHRyVmFsdWVTcGxpdCA9IGF0dHJWYWx1ZS5zcGxpdChmaW5kUmVhbFRhZ3NSZWdFeCkuZmlsdGVyKCh4KSA9PiB4Lmxlbmd0aCA+IDApO1xuICAgIGlmIChhdHRyVmFsdWVTcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGF0dHJWYWx1ZSA9IGF0dHJWYWx1ZVNwbGl0O1xuICAgICAgICBhdHRyVmFsdWVTcGxpdC5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnNlYXJjaChwbGFjZWhvbGRlclJlZ2V4KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgKyt2YWx1ZUluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgYXR0clNldCA9IFtmaXhlZE5hbWUsIGF0dHJWYWx1ZV07XG4gICAgY29uc3QgaXNTcGVjaWFsID0gaXNTcGVjaWFsQXR0cihsb3dlck5hbWUpOyAvLyBjaGVjayBvcmlnaW5hbCBuYW1lIGZvciBcIm9uaW5pdFwiIG9yIFwiYXV0b2ZvY3VzXCJcbiAgICBpZiAoaXNTcGVjaWFsKSB7XG4gICAgICAgIGF0dHJTZXQucHVzaChpc1NwZWNpYWwpO1xuICAgIH1cbiAgICAvLyBmb3JjZSBzdHlsZSB0byBiZSBmaXJzdCBzbyBvdGhlciBzdHlsZSBtYW5pcHVsYXRpbmcgYXR0cmlidXRlcyBkbyBub3QgZ2V0IG92ZXJ3cml0dGVuXG4gICAgaWYgKGZpeGVkTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICBhdHRyaWJ1dGVzLnVuc2hpZnQoYXR0clNldCk7XG4gICAgICAgIHJldHVybiB2YWx1ZUluZGV4O1xuICAgIH1cbiAgICBhdHRyaWJ1dGVzLnB1c2goYXR0clNldCk7XG4gICAgcmV0dXJuIHZhbHVlSW5kZXg7XG59XG4iLCJpbXBvcnQgeyB2YXJpYWJsZVByZWZpeCwgdmFyaWFibGVTdWZmaXggfSBmcm9tIFwiLi4vLi4vdGFnL0RvbVRhZy50eXBlLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUhUTUwgfSBmcm9tIFwiLi9wYXJzZUhUTUwuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBjb25zdCByZWFsVGFnc1JlZ0V4ID0gbmV3IFJlZ0V4cCh2YXJpYWJsZVByZWZpeCArICcoXFxcXGQrKScgKyB2YXJpYWJsZVN1ZmZpeCwgJ2dpJyk7XG5leHBvcnQgY29uc3QgZmluZFJlYWxUYWdzUmVnRXggPSBuZXcgUmVnRXhwKCcoJyArIHZhcmlhYmxlUHJlZml4ICsgJ1xcXFxkKycgKyB2YXJpYWJsZVN1ZmZpeCArICcpJywgJ2dpJyk7XG4vLyB3aXRob3V0IGxhc3QgbGV0dGVyXG5jb25zdCBzaG9ydEZyb250ID0gdmFyaWFibGVQcmVmaXguc2xpY2UoMCwgdmFyaWFibGVQcmVmaXgubGVuZ3RoIC0gMSk7XG5leHBvcnQgY29uc3QgZmFrZVRhZ3NSZWdFeCA9IG5ldyBSZWdFeHAoc2hvcnRGcm9udCArICcmI3g3MjsoXFxcXGQrKScgKyB2YXJpYWJsZVN1ZmZpeCwgJ2dpJyk7XG4vLyB2YXJpYWJsZSBwcmVmaXggbWludXMgb25lIGxldHRlciBhbmQgdGhlbiB0aGUgbGV0dGVyIFwiclwiIGFzIGhleFxuY29uc3QgcmVwbGFjZW1lbnQgPSBzaG9ydEZyb250ICsgJyYjeDcyOyQxJyArIHZhcmlhYmxlU3VmZml4O1xuLyoqIFJ1biBvbmx5IGR1cmluZyBjb21waWxlIHN0ZXAgT1Igd2hlbiBubyBjb21waWxlIHN0ZXAgb2NjdXJyZWQgYXQgcnVudGltZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhKHN0cmluZ3MsIHZhbHVlcykge1xuICAgIC8vIFBhcnNlIHRoZSBtb2RpZmllZCBmcmFnbWVudHNcbiAgICBjb25zdCBodG1sU3RyaW5nID0gaHRtbEludGVycG9sYXRpb25Ub1BsYWNlaG9sZGVycyhzdHJpbmdzLCB2YWx1ZXMpLmpvaW4oJycpO1xuICAgIGNvbnN0IGRvbU1ldGEgPSBwYXJzZUhUTUwoaHRtbFN0cmluZyk7XG4gICAgcmV0dXJuIGRvbU1ldGE7XG59XG5leHBvcnQgZnVuY3Rpb24gaHRtbEludGVycG9sYXRpb25Ub1BsYWNlaG9sZGVycyhzdHJpbmdzLCB2YWx1ZXMpIHtcbiAgICAvLyBTYW5pdGl6ZSBwbGFjZWhvbGRlcnMgaW4gdGhlIGZyYWdtZW50c1xuICAgIGNvbnN0IHNhbml0aXplZEZyYWdtZW50cyA9IHN0cmluZ3M7XG4gICAgLy8gY29uc3Qgc2FuaXRpemVkRnJhZ21lbnRzID0gc2FuaXRpemVQbGFjZWhvbGRlcnMoc3RyaW5ncylcbiAgICAvLyBBZGQgcGxhY2Vob2xkZXJzIHRvIHRoZSBmcmFnbWVudHNcbiAgICByZXR1cm4gYWRkUGxhY2Vob2xkZXJzKHNhbml0aXplZEZyYWdtZW50cywgdmFsdWVzKTtcbn1cbmZ1bmN0aW9uIGFkZFBsYWNlaG9sZGVycyhzdHJpbmdzLCB2YWx1ZXMpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0cmluZ3MubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gc3RyaW5nc1tpbmRleF07XG4gICAgICAgIGNvbnN0IHNhZmVGcmFnbWVudCA9IGZyYWdtZW50LnJlcGxhY2UocmVhbFRhZ3NSZWdFeCwgcmVwbGFjZW1lbnQpO1xuICAgICAgICBpZiAoaW5kZXggPCB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goc2FmZUZyYWdtZW50ICsgdmFyaWFibGVQcmVmaXggKyBpbmRleCArIHZhcmlhYmxlU3VmZml4KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaChzYWZlRnJhZ21lbnQpO1xuICAgIH1cbiAgICBiYWxhbmNlQXJyYXlCeUFycmF5cyhyZXN1bHRzLCBzdHJpbmdzLCB2YWx1ZXMpO1xuICAgIHJldHVybiByZXN1bHRzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJhbGFuY2VBcnJheUJ5QXJyYXlzKHJlc3VsdHMsIHN0cmluZ3MsIHZhbHVlcykge1xuICAgIGNvbnN0IGRpZmYgPSB2YWx1ZXMubGVuZ3RoIC0gc3RyaW5ncy5sZW5ndGg7XG4gICAgaWYgKGRpZmYgPiAwKSB7XG4gICAgICAgIGZvciAobGV0IHggPSBkaWZmOyB4ID4gMDsgLS14KSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2godmFyaWFibGVQcmVmaXggKyAoc3RyaW5ncy5sZW5ndGggKyB4IC0gMSkgKyB2YXJpYWJsZVN1ZmZpeCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgZW1wdHkgPSAnJztcbmV4cG9ydCB2YXIgSW1tdXRhYmxlVHlwZXM7XG4oZnVuY3Rpb24gKEltbXV0YWJsZVR5cGVzKSB7XG4gICAgSW1tdXRhYmxlVHlwZXNbXCJzdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIEltbXV0YWJsZVR5cGVzW1wibnVtYmVyXCJdID0gXCJudW1iZXJcIjtcbiAgICBJbW11dGFibGVUeXBlc1tcImJvb2xlYW5cIl0gPSBcImJvb2xlYW5cIjtcbiAgICBJbW11dGFibGVUeXBlc1tcInVuZGVmaW5lZFwiXSA9IFwidW5kZWZpbmVkXCI7XG59KShJbW11dGFibGVUeXBlcyB8fCAoSW1tdXRhYmxlVHlwZXMgPSB7fSkpO1xuZXhwb3J0IHZhciBCYXNpY1R5cGVzO1xuKGZ1bmN0aW9uIChCYXNpY1R5cGVzKSB7XG4gICAgQmFzaWNUeXBlc1tcImZ1bmN0aW9uXCJdID0gXCJmdW5jdGlvblwiO1xuICAgIEJhc2ljVHlwZXNbXCJkYXRlXCJdID0gXCJkYXRlXCI7XG4gICAgQmFzaWNUeXBlc1tcInVua25vd25cIl0gPSBcInVua25vd25cIjtcbiAgICBCYXNpY1R5cGVzW1wib2JqZWN0XCJdID0gXCJvYmplY3RcIjtcbn0pKEJhc2ljVHlwZXMgfHwgKEJhc2ljVHlwZXMgPSB7fSkpO1xuY29uc3QgdmVyc2lvbiA9IERhdGUubm93KCk7XG4vKiogVXNlZCBhcyBkaXJlY3QgbWVtb3J5IGNvbXBhcmlzb25zLCB0aGUgc3RyaW5ncyBhcmUgbmV2ZXIgY29tcGFyZWQsIGp1c3QgdGhlIGFycmF5ICovXG5leHBvcnQgY29uc3QgVmFsdWVUeXBlcyA9IHtcbiAgICB0YWc6ICdodG1sJywgLy8gaHRtbCcnIGFrYSBTdHJpbmdUYWcgfCBEb21UYWdcbiAgICBkb206ICdkb20nLCAvLyBjb21waWxlZCB2ZXJzaW9uIG9mIGh0bWwnJ1xuICAgIHRlbXBsYXRlcjogJ3RlbXBsYXRlcicsXG4gICAgdGFnQ29tcG9uZW50OiAndGFnQ29tcG9uZW50JyxcbiAgICB0YWdBcnJheTogJ3RhZ0FycmF5JyxcbiAgICBob3N0OiAnaG9zdCcsXG4gICAgc3Vic2NyaWJlOiAnc3Vic2NyaWJlJyxcbiAgICBzaWduYWw6ICdzaWduYWwnLFxuICAgIHJlbmRlck9uY2U6ICdyZW5kZXJPbmNlJyxcbiAgICBzdGF0ZVJlbmRlcjogJ3N0YXRlUmVuZGVyJyxcbiAgICB2ZXJzaW9uLFxufTtcbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IEltbXV0YWJsZVR5cGVzIH0gZnJvbSBcIi4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanNcIjtcbmltcG9ydCB7IHZhcmlhYmxlUHJlZml4LCB2YXJpYWJsZVN1ZmZpeCB9IGZyb20gXCIuLi8uLi90YWcvRG9tVGFnLnR5cGUuanNcIjtcbmltcG9ydCB7IHBsYWNlaG9sZGVyUmVnZXggfSBmcm9tIFwiLi4vLi4vcmVuZGVyL2F0dHJpYnV0ZXMvZ2V0VGFnVmFySW5kZXguZnVuY3Rpb24uanNcIjtcbmNvbnN0IGNoID0gJ2NoJzsgLy8gc2hvcnQgZm9yIGNoaWxkcmVuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZVBsYWNlaG9sZGVycyhkb20sIHZhbHVlQ291bnQsIHZhbHVlUG9zaXRpb25zID0gW10sIGN1cnJlbnRUYWlsID0gW10pIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IGRvbTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxvb3BUYWlsID0gWy4uLmN1cnJlbnRUYWlsLCBpXTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICBpZiAoZWxlbWVudC5hdCkge1xuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBlbGVtZW50LmF0O1xuICAgICAgICAgICAgZWxlbWVudC5hdCA9IHByb2Nlc3NBdHRyaWJ1dGVzKGF0dHJzLCB2YWx1ZUNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5jaCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBlbGVtZW50LmNoO1xuICAgICAgICAgICAgY29uc3QgaW5uZXJMb29wVGFpbCA9IFsuLi5sb29wVGFpbCwgY2hdO1xuICAgICAgICAgICAgZWxlbWVudC5jaCA9IHJlcGxhY2VQbGFjZWhvbGRlcnMoY2hpbGRyZW4sIHZhbHVlQ291bnQsIHZhbHVlUG9zaXRpb25zLCBpbm5lckxvb3BUYWlsKTtcbiAgICAgICAgfVxuICAgICAgICBpID0gZXhhbWluZUNoaWxkKGVsZW1lbnQsIHZhbHVlQ291bnQsIGVsZW1lbnRzLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xufVxuZnVuY3Rpb24gZXhhbWluZUNoaWxkKGNoaWxkLCB2YWx1ZUNvdW50LCBjaGlsZHJlbiwgaW5kZXgpIHtcbiAgICBpZiAoY2hpbGQubm4gIT09ICd0ZXh0Jykge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IHRleHRDaGlsZCA9IGNoaWxkO1xuICAgIGxldCB0ZXh0Q29udGVudCA9IHRleHRDaGlsZC50YztcbiAgICBpZiAodHlwZW9mIHRleHRDb250ZW50ICE9PSBJbW11dGFibGVUeXBlcy5zdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IHBsYWNlaG9sZGVyUmVnZXguZXhlYyh0ZXh0Q29udGVudCkpICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHNlY29uZE1hdGNoID0gbWF0Y2hbMV07XG4gICAgICAgIGNvbnN0IHdJbmRleCA9IHBhcnNlSW50KHNlY29uZE1hdGNoLCAxMCk7XG4gICAgICAgIGNvbnN0IGV4YW1pbmUgPSAhaXNOYU4od0luZGV4KSAmJiB3SW5kZXggPCB2YWx1ZUNvdW50O1xuICAgICAgICBpZiAoZXhhbWluZSkge1xuICAgICAgICAgICAgY29uc3QgdmFyQ29udGVudCA9IHZhcmlhYmxlUHJlZml4ICsgd0luZGV4ICsgdmFyaWFibGVTdWZmaXg7XG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IHRleHRDb250ZW50LnNsaWNlKG1hdGNoLmluZGV4ICsgdmFyQ29udGVudC5sZW5ndGgpO1xuICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCB7XG4gICAgICAgICAgICAgICAgbm46ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICB2OiB3SW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGV4dENvbnRlbnQgPSBhZnRlcjtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyUmVnZXgubGFzdEluZGV4ID0gMDsgLy8gUmVzZXQgcmVnZXggaW5kZXggZHVlIHRvIHNwbGl0XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGV4dENoaWxkLnRjID0gdGV4dENvbnRlbnQ7XG4gICAgcmV0dXJuIGluZGV4O1xufVxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnV0ZXMoYXR0cmlidXRlcywgdmFsdWVDb3VudCkge1xuICAgIGNvbnN0IG1hcHBlZCA9IFtdO1xuICAgIGZvciAoY29uc3QgYXR0clNldCBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIHZhbHVlLCBpc1NwZWNpYWxdID0gYXR0clNldDtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKHZhcmlhYmxlUHJlZml4KSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChrZXkucmVwbGFjZSh2YXJpYWJsZVByZWZpeCwgJycpLCAxMCk7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGluZGV4KSAmJiBpbmRleCA8IHZhbHVlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBtYXBwZWQucHVzaChbeyB0YWdKc1ZhcjogaW5kZXggfV0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IEltbXV0YWJsZVR5cGVzLnN0cmluZyAmJiB2YWx1ZS5zdGFydHNXaXRoKHZhcmlhYmxlUHJlZml4KSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludCh2YWx1ZS5yZXBsYWNlKHZhcmlhYmxlUHJlZml4LCAnJyksIDEwKTtcbiAgICAgICAgICAgIGlmICghaXNOYU4oaW5kZXgpICYmIGluZGV4IDwgdmFsdWVDb3VudCkge1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKFtrZXksIHsgdGFnSnNWYXI6IGluZGV4IH0sIGlzU3BlY2lhbF0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1hcHBlZC5wdXNoKGF0dHJTZXQpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ3NJZChzdHJpbmdzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBzdHJpbmdzLm1hcChsZW5ndGhNYXBwZXIpO1xuICAgIGFycmF5LnB1c2goc3RyaW5ncy5sZW5ndGgpO1xuICAgIHJldHVybiBOdW1iZXIoYXJyYXkuam9pbignJykpO1xufVxuZnVuY3Rpb24gbGVuZ3RoTWFwcGVyKHgpIHtcbiAgICByZXR1cm4geC5sZW5ndGg7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBodG1sSW50ZXJwb2xhdGlvblRvRG9tTWV0YSB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVwbGFjZVBsYWNlaG9sZGVycyB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvcmVwbGFjZVBsYWNlaG9sZGVycy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc0xhc3RSdW5NYXRjaGVkIH0gZnJvbSAnLi9pc0xhc3RSdW5NYXRjaGVkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN0cmluZ3NJZCB9IGZyb20gJy4vZ2V0U3RyaW5nc0lkLmZ1bmN0aW9uLmpzJztcbmNvbnN0IGxhc3RSdW5zID0ge307XG4vKiogTWVyZ2VzIHN0cmluZ3MgJiB2YWx1ZXMgd2l0aCBkb20gbWV0YSBpbnRvIGEgaHRtbCBhcnJheSB0cmVlICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RG9tTWV0YShzdHJpbmdzLCB2YWx1ZXMpIHtcbiAgICBjb25zdCBzdHJpbmdJZCA9IGdldFN0cmluZ3NJZChzdHJpbmdzKTtcbiAgICBjb25zdCBsYXN0UnVuID0gbGFzdFJ1bnNbc3RyaW5nSWRdO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBsYXN0UnVuICYmIGlzTGFzdFJ1bk1hdGNoZWQoc3RyaW5ncywgdmFsdWVzLCBsYXN0UnVuKTtcbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gbGFzdFJ1bi5kb21NZXRhTWFwO1xuICAgIH1cbiAgICBjb25zdCBkb21NZXRhID0gaHRtbEludGVycG9sYXRpb25Ub0RvbU1ldGEoc3RyaW5ncywgdmFsdWVzKTtcbiAgICBjb25zdCBtYXAgPSByZXBsYWNlUGxhY2Vob2xkZXJzKGRvbU1ldGEsIHZhbHVlcy5sZW5ndGgpO1xuICAgIGNvbnN0IHRlbXBsYXRlID0ge1xuICAgICAgICBpbnRlcnBvbGF0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIHN0cmluZzogdW5kZWZpbmVkLFxuICAgICAgICBzdHJpbmdzLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIGRvbU1ldGFNYXA6IG1hcCxcbiAgICB9O1xuICAgIGxhc3RSdW5zW3N0cmluZ0lkXSA9IHRlbXBsYXRlO1xuICAgIHJldHVybiBtYXA7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNMYXN0UnVuTWF0Y2hlZChzdHJpbmdzLCB2YWx1ZXMsIGxhc3RSdW4pIHtcbiAgICBpZiAobGFzdFJ1bikge1xuICAgICAgICBpZiAobGFzdFJ1bi5zdHJpbmdzLmxlbmd0aCA9PT0gc3RyaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ3NNYXRjaCA9IGxhc3RSdW4uc3RyaW5ncy5ldmVyeSgoc3RyaW5nLCBpbmRleCkgPT4gXG4gICAgICAgICAgICAvLyBzdHJpbmcubGVuZ3RoID09PSBzdHJpbmdzW2luZGV4XS5sZW5ndGhcbiAgICAgICAgICAgIHN0cmluZyA9PT0gc3RyaW5nc1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKHN0cmluZ3NNYXRjaCAmJiBsYXN0UnVuLnZhbHVlcy5sZW5ndGggPT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gcGVyZm9ybWFuY2Ugc2F2aW5ncyB1c2luZyB0aGUgbGFzdCB0aW1lIHRoaXMgY29tcG9uZW50IHdhcyByZW5kZXJlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImV4cG9ydCBjb25zdCBibGFua0hhbmRsZXIgPSBmdW5jdGlvbiBibGFua0hhbmRsZXIoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4iLCJpbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tIFwiLi9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzXCI7XG4vKiogVHlwaWNhbGx5IHVzZWQgZm9yIGFuaW1hdGlvbnMgdG8gcnVuIGJlZm9yZSBjbGVhcmluZyBlbGVtZW50cyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFBhaW50UmVtb3ZlQXdhaXQocHJvbWlzZSkge1xuICAgIC8qXG4gICAgaWYocGFpbnRSZW1vdmVBd2FpdHMubGVuZ3RoKSB7XG4gICAgICBwYWludFJlbW92ZUF3YWl0c1twYWludFJlbW92ZUF3YWl0cy5sZW5ndGggLSAxXS5wYWludFJlbW92ZXMucHVzaCggLi4ucGFpbnRSZW1vdmVzIClcbiAgICAgIHBhaW50UmVtb3ZlcyA9IFtdXG4gICAgfVxuICBcbiAgICBwYWludFJlbW92ZUF3YWl0cy5wdXNoKHtwcm9taXNlLCBwYWludFJlbW92ZXN9KVxuICAgIHBhaW50UmVtb3ZlcyA9IFtdXG4gICAgKi9cbn1cbi8vIGxldCBwYWludFJlbW92ZUF3YWl0czoge3Byb21pc2U6IFByb21pc2U8YW55PiwgcGFpbnRSZW1vdmVzOiBQYWludENvbW1hbmRbXX1bXSA9IFtdXG5leHBvcnQgbGV0IHBhaW50Q29tbWFuZHMgPSBbXTtcbi8vIGV4cG9ydCBsZXQgcGFpbnRSZW1vdmVzOiBQYWludENvbW1hbmRbXSA9IFtdXG5leHBvcnQgY29uc3QgcGFpbnRSZW1vdmVzID0gW107XG5leHBvcnQgbGV0IHBhaW50Q29udGVudCA9IFtdO1xuLy8gVE9ETzogVGhpcyB0aGlzIGlzIGR1cGxpY2F0ZSBvZiBwYWludENvbW1hbmRzIChob3dldmVyIHRpbWluZyBpcyBjdXJyZW50bHkgYW5kIGlzc3VlIGFuZCBjYW50IGJlIHJlbW92ZWQpXG5leHBvcnQgbGV0IHBhaW50QXBwZW5kcyA9IFtdO1xuZXhwb3J0IGxldCBwYWludEFmdGVycyA9IFtdOyAvLyBjYWxsYmFja3MgYWZ0ZXIgYWxsIHBhaW50ZWRcbmV4cG9ydCBjb25zdCBwYWludGluZyA9IHtcbiAgICBsb2NrczogMCxcbiAgICByZW1vdmVMb2NrczogMCxcbn07XG5leHBvcnQgZnVuY3Rpb24gc2V0Q29udGVudCh0ZXh0LCB0ZXh0Tm9kZSkge1xuICAgIHRleHROb2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWludCgpIHtcbiAgICBpZiAocGFpbnRpbmcubG9ja3MgPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bkN5Y2xlcygpO1xufVxuZnVuY3Rpb24gcnVuQ3ljbGVzKCkge1xuICAgIHJ1blBhaW50Q3ljbGVzKCk7XG4gICAgcnVuQWZ0ZXJDeWNsZSgpO1xufVxuLyoqIERlbGV0ZXMgaGFwcGVuIGxhc3QgKi9cbmZ1bmN0aW9uIHJ1bkFmdGVyQ3ljbGUoKSB7XG4gICAgcGFpbnRSZXNldCgpO1xuICAgIGNvbnN0IG5vd1BhaW50QWZ0ZXJzID0gcGFpbnRBZnRlcnM7XG4gICAgcGFpbnRBZnRlcnMgPSBbXTsgLy8gcHJldmVudCBwYWludEFmdGVycyBjYWxscyBmcm9tIGVuZGxlc3MgcmVjdXJzaW9uXG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIG5vd1BhaW50QWZ0ZXJzKSB7XG4gICAgICAgIGNvbnRlbnRbMF0oLi4uY29udGVudFsxXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcnVuUGFpbnRSZW1vdmVzKCkge1xuICAgIC8vIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZFxuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBwYWludFJlbW92ZXMpIHtcbiAgICAgICAgY29udGVudFswXSguLi5jb250ZW50WzFdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBydW5QYWludEN5Y2xlcygpIHtcbiAgICBjb25zdCByZW1vdmVzID0gcGFpbnRSZW1vdmVzLmxlbmd0aDtcbiAgICBydW5QYWludFJlbW92ZXMoKTtcbiAgICAvLyBwYWludFJlbW92ZXMgPSBbXVxuICAgIHBhaW50UmVtb3Zlcy5zcGxpY2UoMCwgcmVtb3Zlcyk7XG4gICAgLy8gc3R5bGVzL2F0dHJpYnV0ZXMgYW5kIHRleHRFbGVtZW50LnRleHRDb250ZW50XG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIHBhaW50Q29udGVudCkge1xuICAgICAgICBjb250ZW50WzBdKC4uLmNvbnRlbnRbMV0pO1xuICAgIH1cbiAgICAvLyAuYXBwZW5kQ2hpbGRcbiAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2YgcGFpbnRBcHBlbmRzKSB7XG4gICAgICAgIGNvbnRlbnRbMF0oLi4uY29udGVudFsxXSk7XG4gICAgfVxuICAgIC8vIGVsZW1lbnQuaW5zZXJ0QmVmb3JlXG4gICAgZm9yIChjb25zdCBjb250ZW50IG9mIHBhaW50Q29tbWFuZHMpIHtcbiAgICAgICAgY29udGVudFswXSguLi5jb250ZW50WzFdKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYWludFJlc2V0KCkge1xuICAgIHBhaW50Q29tbWFuZHMgPSBbXTtcbiAgICBwYWludENvbnRlbnQgPSBbXTtcbiAgICBwYWludEFwcGVuZHMgPSBbXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRQYWludFJlbW92ZXIoZWxlbWVudCwgY2FsbGVyKSB7XG4gICAgcGFpbnRSZW1vdmVzLnB1c2goW3BhaW50UmVtb3ZlciwgW2VsZW1lbnQsIGNhbGxlcl1dKTtcbn1cbi8qKiBtdXN0IGJlIHVzZWQgd2l0aCBwYWludFJlbW92ZXMgKi9cbmZ1bmN0aW9uIHBhaW50UmVtb3ZlcihlbGVtZW50LCBfY2FsbGVyKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnbm8gZWxlbWVudCBieScsIF9jYWxsZXIpO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnROb2RlID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFpbnRCZWZvcmUocmVsYXRpdmUsIGVsZW1lbnQsIF9jYWxsZXIpIHtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gcmVsYXRpdmUucGFyZW50Tm9kZTtcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCByZWxhdGl2ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFpbnRBcHBlbmQocmVsYXRpdmUsIGVsZW1lbnQpIHtcbiAgICByZWxhdGl2ZS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbn1cbmNvbnN0IGNvbnRlbnRDbGVhbmVyID0gKHR5cGVvZiBkb2N1bWVudCA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpOyAvLyB1c2VkIGZvciBjb250ZW50IGNsZWFuaW5nXG5mdW5jdGlvbiB0b1BsYWluVGV4dEVsbSh0ZXh0KSB7XG4gICAgLy8gc3dhcCAmZ3Q7IGZvciA+XG4gICAgY29udGVudENsZWFuZXIuaW5uZXJIVE1MID0gdGV4dDsgLy8gc2NyaXB0IHRhZ3Mgc2hvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIHNhbml0aXplZCBiZWZvcmUgdGhpcyBzdGVwXG4gICAgLy8gZGVsZXRlIDwhLS0gLS0+XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbnRlbnRDbGVhbmVyLmlubmVySFRNTCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFpbnRCZWZvcmVUZXh0KHJlbGF0aXZlLCB0ZXh0LCBjYWxsYmFjayA9IGJsYW5rSGFuZGxlciwgX2NhbGxlcikge1xuICAgIGNvbnN0IHRleHRFbG0gPSB0b1BsYWluVGV4dEVsbSh0ZXh0KTtcbiAgICBwYWludEJlZm9yZShyZWxhdGl2ZSwgdGV4dEVsbSwgX2NhbGxlcik7XG4gICAgY2FsbGJhY2sodGV4dEVsbSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFpbnRBcHBlbmRUZXh0KHJlbGF0aXZlLCB0ZXh0LCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHRleHRFbG0gPSB0b1BsYWluVGV4dEVsbSh0ZXh0KTtcbiAgICBwYWludEFwcGVuZChyZWxhdGl2ZSwgdGV4dEVsbSk7XG4gICAgY2FsbGJhY2sodGV4dEVsbSk7XG59XG4vKiogVXNlZCB3aGVuIEhUTUwgY29udGVudCBpcyBzYWZlIGFuZCBleHBlY3RlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhaW50QmVmb3JlRWxlbWVudFN0cmluZyhyZWxhdGl2ZSwgdGV4dCwgY2FsbGJhY2sgPSBibGFua0hhbmRsZXIpIHtcbiAgICBjb250ZW50Q2xlYW5lci5pbm5lckhUTUwgPSB0ZXh0O1xuICAgIGNvbnN0IHRleHRFbG0gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjb250ZW50Q2xlYW5lci50ZXh0Q29udGVudCk7IC8vIHRvUGxhaW5UZXh0RWxtKHRleHQpXG4gICAgcGFpbnRCZWZvcmUocmVsYXRpdmUsIHRleHRFbG0sICdwYWludEJlZm9yZUVsZW1lbnRTdHJpbmcnKTtcbiAgICBjYWxsYmFjayh0ZXh0RWxtKTtcbn1cbi8qKiBVc2VkIHdoZW4gSFRNTCBjb250ZW50IGlzIHNhZmUgYW5kIGV4cGVjdGVkICovXG5leHBvcnQgZnVuY3Rpb24gcGFpbnRBcHBlbmRFbGVtZW50U3RyaW5nKHJlbGF0aXZlLCB0ZXh0LCBjYWxsYmFjaykge1xuICAgIGNvbnRlbnRDbGVhbmVyLmlubmVySFRNTCA9IHRleHQ7XG4gICAgY29uc3QgdGV4dEVsbSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbnRlbnRDbGVhbmVyLnRleHRDb250ZW50KTsgLy8gdG9QbGFpblRleHRFbG0odGV4dClcbiAgICBwYWludEFwcGVuZChyZWxhdGl2ZSwgdGV4dEVsbSk7XG4gICAgY2FsbGJhY2sodGV4dEVsbSk7XG59XG4iLCJpbXBvcnQgeyBhZGRQYWludFJlbW92ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUNvbnRleHRTdWJDb250ZXh0KGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICArK2NvbnRleHRJdGVtLnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgY29uc3QgcmVzdWx0ID0gZGVsZXRlU3ViQ29udGV4dChzdWJzY3JpcHRpb24sIG93bmVyU3VwcG9ydCk7XG4gICAgZGVsZXRlIGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVTdWJDb250ZXh0KHN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCkge1xuICAgIHN1YkNvbnRleHQuZGVsZXRlZCA9IHRydWU7XG4gICAgY29uc3QgYXBwZW5kTWFya2VyID0gc3ViQ29udGV4dC5hcHBlbmRNYXJrZXI7XG4gICAgaWYgKGFwcGVuZE1hcmtlcikge1xuICAgICAgICBhZGRQYWludFJlbW92ZXIoYXBwZW5kTWFya2VyLCAnZGVsZXRlU3ViQ29udGV4dCcpO1xuICAgICAgICBkZWxldGUgc3ViQ29udGV4dC5hcHBlbmRNYXJrZXI7XG4gICAgfVxuICAgIC8vIGRlbGV0ZSAoY29udGV4dEl0ZW0gYXMgYW55KS5kZXN0cm95XG4gICAgaWYgKCFzdWJDb250ZXh0Lmhhc0VtaXR0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdWJDb250ZXh0SXRlbSA9IHN1YkNvbnRleHQuY29udGV4dEl0ZW07XG4gICAgY29uc3Qgc3ViVGFnSnNWYXIgPSBzdWJDb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBzdWJUYWdKc1Zhci5kZXN0cm95KHN1YkNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xuICAgIHJldHVybiA3Njtcbn1cbiIsImltcG9ydCB7IEJhc2ljVHlwZXMsIEltbXV0YWJsZVR5cGVzLCBWYWx1ZVR5cGVzIH0gZnJvbSAnLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZVR5cGUodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgSW1tdXRhYmxlVHlwZXMuc3RyaW5nOlxuICAgICAgICBjYXNlIEltbXV0YWJsZVR5cGVzLm51bWJlcjpcbiAgICAgICAgY2FzZSBJbW11dGFibGVUeXBlcy5ib29sZWFuOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKiBJbmRpY2F0ZXMgaWYgdGFnKCkgd2FzIHVzZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YXRpY1RhZyh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0YWdKc1R5cGUgPSB2YWx1ZS50YWdKc1R5cGU7XG4gICAgc3dpdGNoICh0YWdKc1R5cGUpIHtcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLmRvbTpcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRhZzpcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRlbXBsYXRlcjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKiogcGFzc2VkIGluIGlzIGV4cGVjdGVkIHRvIGJlIGEgVGVtcGxhdGVyUmVzdWx0ICovXG5leHBvcnQgZnVuY3Rpb24gaXNUYWdDb21wb25lbnQodmFsdWUpIHtcbiAgICBjb25zdCB0YWdUeXBlID0gdmFsdWU/LnRhZ0pzVHlwZTtcbiAgICByZXR1cm4gdGFnVHlwZSA9PT0gVmFsdWVUeXBlcy50YWdDb21wb25lbnQgfHwgdGFnVHlwZSA9PT0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcjtcbn1cbi8vIGlzU3ViamVjdExpa2VcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YmplY3RJbnN0YW5jZShzdWJqZWN0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHN1YmplY3QpICYmIHR5cGVvZiBzdWJqZWN0LnN1YnNjcmliZSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS50aGVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbjtcbiAgICAvLyBUT0RPOiBTdGFydCB1c2luZyB0aGlzIGluc3RlYWRcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QgJiYgdmFsdWUgIT09IG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbiIsIi8qKiBPbmx5IHVzZWQgaW4gVGFnU3VwcG9ydCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSkge1xuICAgIC8vIFRPRE86IE5vdCBuZWVkIGZvciBiYXNpYyBzdXBwb3J0cywgb25seSB0YWcoKVxuICAgIGNvbnRleHRJdGVtLnJlbmRlckNvdW50ID0gY29udGV4dEl0ZW0ucmVuZGVyQ291bnQgfHwgMDtcbiAgICAvLyBUT0RPOiBOb3QgbmVlZCBmb3IgYmFzaWMgc3VwcG9ydHMsIG9ubHkgdGFnKClcbiAgICBjb250ZXh0SXRlbS5zdGF0ZSA9IHtcbiAgICAgICAgbmV3ZXI6IHtcbiAgICAgICAgICAgIHN0YXRlOiBbXSxcbiAgICAgICAgICAgIHN0YXRlczogW10sXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gY29udGV4dEl0ZW0uZ2xvYmFsID0ge1xuICAgICAgICBibG9ja2VkOiBbXSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vLi4vc3RhdGUvaW5kZXguanMnO1xuaW1wb3J0IHsgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdXBwb3J0SW5DeWNsZSgpIHtcbiAgICByZXR1cm4gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0U3VwcG9ydEluQ3ljbGUoc3VwcG9ydCkge1xuICAgIHNldENvbnRleHRJbkN5Y2xlKHN1cHBvcnQuY29udGV4dCk7XG4gICAgcmV0dXJuIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdXBwb3J0ID0gc3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IGlzVGFnQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZmluZFN0YXRlU3VwcG9ydFVwQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICBpZiAoc3RhdGVNZXRhICYmIHN0YXRlTWV0YS5uZXdlc3QgJiYgc3RhdGVNZXRhLm5ld2VzdCkge1xuICAgICAgICByZXR1cm4gc3RhdGVNZXRhLm5ld2VzdDtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQucGFyZW50Q29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmluZFN0YXRlU3VwcG9ydFVwQ29udGV4dChjb250ZXh0LnBhcmVudENvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpIHtcbiAgICAvLyBnZXQgYWN0dWFsIGNvbXBvbmVudCBvd25lciBub3QganVzdCB0aGUgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzYzMjdbMF0pIHN1cHBvcnRcbiAgICBsZXQgY29tcG9uZW50ID0gc3VwcG9ydDtcbiAgICB3aGlsZSAoY29tcG9uZW50Lm93bmVyU3VwcG9ydCAmJiAhaXNUYWdDb21wb25lbnQoY29tcG9uZW50LnRlbXBsYXRlcikpIHtcbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50Lm93bmVyU3VwcG9ydDtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dCA9IGNvbXBvbmVudC5jb250ZXh0O1xuICAgIGNvbnN0IHN0YXRlTWV0YSA9IGNvbnRleHQuc3RhdGU7XG4gICAgaWYgKCFzdGF0ZU1ldGEpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlTWV0YS5uZXdlc3QgfHwgY29tcG9uZW50O1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczc2MzI3OiBbW11dIH07XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydFdpdGhTdGF0ZSB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi5qcyc7XG5mdW5jdGlvbiByZXR1cm5BcmdzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncztcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdFN0YXRlc0hhbmRsZXIoc2V0dGVyKSB7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbmZpZy5zdGF0ZXNbY29uZmlnLnN0YXRlc0luZGV4XSA9IHNldHRlcjtcbiAgICArK2NvbmZpZy5zdGF0ZXNJbmRleDtcbiAgICByZXR1cm4gc2V0dGVyKHJldHVybkFyZ3MpO1xufVxuLyoqIGFrYSBzdGF0ZXNIYW5kbGVyICovXG5leHBvcnQgZnVuY3Rpb24gcmVTdGF0ZXNIYW5kbGVyKHNldHRlcikge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBjb25zdCBzdGF0ZXNJbmRleCA9IGNvbmZpZy5zdGF0ZXNJbmRleDtcbiAgICBjb25zdCBwcmV2U3VwcG9ydCA9IGdldFN1cHBvcnRXaXRoU3RhdGUoY29uZmlnLnByZXZTdXBwb3J0KTtcbiAgICBjb25zdCBwcmV2Q29udGV4dCA9IHByZXZTdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gcHJldkNvbnRleHQuc3RhdGU7XG4gICAgLy8gY29uc3QgcHJldlN0YXRlTWV0YSA9IHN0YXRlTWV0YS5vbGRlciBhcyBDb250ZXh0U3RhdGVTdXBwb3J0XG4gICAgY29uc3QgcHJldlN0YXRlTWV0YSA9IHN0YXRlTWV0YS5uZXdlcjtcbiAgICBjb25zdCBwcmV2U3RhdGVzID0gcHJldlN0YXRlTWV0YS5zdGF0ZXM7XG4gICAgLy8gY29uc3QgcHJldlN0YXRlcyA9IGNvbmZpZy5zdGF0ZXNcbiAgICBjb25zdCBvbGRTdGF0ZXMgPSBwcmV2U3RhdGVzW3N0YXRlc0luZGV4XTtcbiAgICBsZXQgbGFzdFZhbHVlcyA9IFtdO1xuICAgIG9sZFN0YXRlcyhmdW5jdGlvbiByZWdldHRlciguLi5hcmdzKSB7XG4gICAgICAgIGxhc3RWYWx1ZXMgPSBhcmdzO1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9KTtcbiAgICBjb25zdCByZXNldHRlciA9IGZ1bmN0aW9uIHN0YXRlUmVzZXR0ZXIoLi4uX2FyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZXM7XG4gICAgfTtcbiAgICBjb25maWcuc3RhdGVzW2NvbmZpZy5zdGF0ZXNJbmRleF0gPSBzZXR0ZXI7XG4gICAgKytjb25maWcuc3RhdGVzSW5kZXg7XG4gICAgcmV0dXJuIHNldHRlcihyZXNldHRlcik7XG59XG4iLCJpbXBvcnQgeyBydW5GaXJzdFN0YXRlLCBydW5SZXN0YXRlIH0gZnJvbSAnLi9zdGF0ZUhhbmRsZXJzLmpzJztcbmltcG9ydCB7IGZpcnN0U3RhdGVzSGFuZGxlciwgcmVTdGF0ZXNIYW5kbGVyIH0gZnJvbSAnLi9zdGF0ZXMudXRpbHMuanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbmltcG9ydCB7IHNldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuLyoqIFRvIGJlIGNhbGxlZCBiZWZvcmUgcmVuZGVyaW5nIGFueXRoaW5nIHdpdGggYSBzdGF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRTdGF0ZShjb250ZXh0KSB7XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dCk7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbmZpZy5oYW5kbGVycy5oYW5kbGVyID0gcnVuRmlyc3RTdGF0ZTtcbiAgICBjb25maWcuaGFuZGxlcnMuc3RhdGVzSGFuZGxlciA9IGZpcnN0U3RhdGVzSGFuZGxlcjtcbiAgICBjb25maWcucmVhcnJheSA9IFtdO1xuICAgIGNvbnN0IHN0YXRlID0gY29uZmlnLnN0YXRlID0gW107XG4gICAgY29uc3Qgc3RhdGVzID0gY29uZmlnLnN0YXRlcyA9IFtdO1xuICAgIGNvbmZpZy5zdGF0ZXNJbmRleCA9IDA7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZSA9IGNvbnRleHQuc3RhdGUgfHwge307XG4gICAgc3RhdGVNZXRhLm5ld2VyID0geyBzdGF0ZSwgc3RhdGVzIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVTdGF0ZShjb250ZXh0KSB7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICByZXR1cm4gcmVTdGF0ZUJ5UHJldihzdGF0ZU1ldGEubmV3ZXIuc3RhdGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlU3RhdGVCeVByZXYocHJldlN0YXRlKSB7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIC8vIHNldCBwcmV2aW91cyBzdGF0ZSBtZW1vcnlcbiAgICBjb25maWcucmVhcnJheSA9IHByZXZTdGF0ZTtcbiAgICBjb25maWcuc3RhdGUgPSBbXTtcbiAgICBjb25maWcuc3RhdGVzID0gW107XG4gICAgY29uZmlnLnN0YXRlc0luZGV4ID0gMDtcbiAgICBjb25maWcuaGFuZGxlcnMuaGFuZGxlciA9IHJ1blJlc3RhdGU7XG4gICAgY29uZmlnLmhhbmRsZXJzLnN0YXRlc0hhbmRsZXIgPSByZVN0YXRlc0hhbmRsZXI7XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmV4cG9ydCBmdW5jdGlvbiByZVN0YXRlU3VwcG9ydChuZXdTdXBwb3J0LCBwcmV2U3VwcG9ydCwgcHJldlN0YXRlKSB7XG4gICAgcmVTdGF0ZUJ5UHJldihwcmV2U3RhdGUpO1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBjb25maWcucHJldlN1cHBvcnQgPSBwcmV2U3VwcG9ydDtcbiAgICBzZXRTdXBwb3J0SW5DeWNsZShuZXdTdXBwb3J0KTtcbn1cbmV4cG9ydCBjbGFzcyBTdGF0ZUVjaG9CYWNrIHtcbn1cbi8qKiBzZW5kcyBhIGZha2UgdmFsdWUgYW5kIHRoZW4gc2V0cyBiYWNrIHRvIHJlY2VpdmVkIHZhbHVlICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FsbGJhY2tWYWx1ZShjYWxsYmFjaykge1xuICAgIGNvbnN0IFt2YWx1ZV0gPSBjYWxsYmFjayhTdGF0ZUVjaG9CYWNrKTsgLy8gZ2V0IHZhbHVlIGFuZCBzZXQgdG8gdW5kZWZpbmVkXG4gICAgY29uc3QgW2NoZWNrVmFsdWVdID0gY2FsbGJhY2sodmFsdWUpOyAvLyBzZXQgYmFjayB0byBvcmlnaW5hbCB2YWx1ZVxuICAgIHJldHVybiBbdmFsdWUsIGNoZWNrVmFsdWVdO1xufVxuIiwiaW1wb3J0IHsgZ2V0Q2FsbGJhY2tWYWx1ZSB9IGZyb20gJy4vc3RhdGUudXRpbHMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlVmFsdWUoc3RhdGUpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IHN0YXRlLmNhbGxiYWNrO1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgY29uc3QgW3ZhbHVlXSA9IGdldENhbGxiYWNrVmFsdWUoY2FsbGJhY2spO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBnZXRTdGF0ZVZhbHVlIH0gZnJvbSAnLi9nZXRTdGF0ZVZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcnVuUmVzdGF0ZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgY29uc3QgcmVhcnJheSA9IGNvbmZpZy5yZWFycmF5O1xuICAgIGNvbnN0IHJlc3RhdGUgPSByZWFycmF5W2NvbmZpZy5zdGF0ZS5sZW5ndGhdO1xuICAgIGNvbmZpZy5zdGF0ZS5wdXNoKHJlc3RhdGUpO1xuICAgIHJldHVybiByZXN0YXRlLmRlZmF1bHRWYWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBydW5GaXJzdFN0YXRlKGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZztcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEluQ3ljbGUoKTtcbiAgICBpZiAoIWNvbnRleHQgfHwgIWNvbnRleHQuc3RhdGUpIHtcbiAgICAgICAgY29uc3QgbXNnID0gJ1N0YXRlIHJlcXVlc3RlZCBidXQgVGFnZ2VkSnMgaXMgbm90IGN1cnJlbnRseSByZW5kZXJpbmcgYSB0YWcgb3IgaG9zdCc7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnLCB7IGNvbmZpZywgY29udGV4dCB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIGNvbnN0IG5ld2VyID0gY29udGV4dC5zdGF0ZS5uZXdlcjtcbiAgICBjb25maWcuc3RhdGUgPSBuZXdlci5zdGF0ZTtcbiAgICAvLyBTdGF0ZSBmaXJzdCB0aW1lIHJ1blxuICAgIGxldCBpbml0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgaWYgKHR5cGVvZiAoZGVmYXVsdFZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICBpbml0VmFsdWUgPSBkZWZhdWx0VmFsdWUoKTtcbiAgICB9XG4gICAgLy8gdGhlIHN0YXRlIGlzIGFjdHVhbGx5IGludGVuZGVkIHRvIGJlIGEgZnVuY3Rpb25cbiAgICBpZiAodHlwZW9mIChpbml0VmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gaW5pdFZhbHVlO1xuICAgICAgICBpbml0VmFsdWUgPSBmdW5jdGlvbiBpbml0VmFsdWVGdW4oLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWwoLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICBpbml0VmFsdWUub3JpZ2luYWwgPSBvcmlnaW5hbDtcbiAgICB9XG4gICAgY29uc3QgcHVzaCA9IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBwdXNoU3RhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U3RhdGVWYWx1ZShwdXNoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBpbml0VmFsdWUsXG4gICAgfTtcbiAgICBjb25maWcuc3RhdGUucHVzaChwdXNoKTtcbiAgICByZXR1cm4gaW5pdFZhbHVlO1xufVxuIiwiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4vU3ViamVjdC5jbGFzcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUxhdGVzdChzdWJqZWN0cykge1xuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgY29uc3Qgc3Vic2NyaWJlID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlc1NlZW4gPSBbXTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGNvbnN0IHNldFZhbHVlID0gKHgsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICB2YWx1ZXNTZWVuW2luZGV4XSA9IHRydWU7XG4gICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geDtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50TWF0Y2hlZCA9IHZhbHVlc1NlZW4ubGVuZ3RoID09PSBzdWJqZWN0cy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoIWNvdW50TWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZXNTZWVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBldmVyeW9uZSBoYXMgcmVwb3J0ZWQgdmFsdWVzXG4gICAgICAgICAgICBjYWxsYmFjayh2YWx1ZXMsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNsb25lcyA9IFsuLi5zdWJqZWN0c107XG4gICAgICAgIGNvbnN0IGZpcnN0U3ViID0gY2xvbmVzLnNoaWZ0KCk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGZpcnN0U3ViLnN1YnNjcmliZSh4ID0+IHNldFZhbHVlKHgsIDApKTtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGNsb25lcy5tYXAoKHN1YmplY3QsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc3ViamVjdC5zdWJzY3JpYmUoeCA9PiBzZXRWYWx1ZSh4LCBpbmRleCArIDEpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9ucztcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIG91dHB1dC5zdWJzY3JpYmVXaXRoID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0LmNsYXNzLmpzJztcbmZ1bmN0aW9uIHJlbW92ZVN1YkZyb21BcnJheShzdWJzY3JpYmVycywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IHN1YnNjcmliZXJzLmZpbmRJbmRleChzdWIgPT4gc3ViLmNhbGxiYWNrID09PSBjYWxsYmFjayk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzdWJzY3JpYmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJzY3JpcHRpb24oc3ViamVjdCwgY2FsbGJhY2ssIHN1YnNjcmliZXJzKSB7XG4gICAgY29uc3QgY291bnRTdWJqZWN0ID0gU3ViamVjdC5nbG9iYWxTdWJDb3VudCQ7XG4gICAgU3ViamVjdC5nbG9iYWxTdWJDb3VudCQubmV4dChjb3VudFN1YmplY3QudmFsdWUgKyAxKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgc3Vic2NyaXB0aW9uLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAvLyBSZXR1cm4gYSBmdW5jdGlvbiB0byB1bnN1YnNjcmliZSBmcm9tIHRoZSBCZWhhdmlvclN1YmplY3RcbiAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZShzdWJzY3JpcHRpb24sIHN1YnNjcmliZXJzLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICBzdWJzY3JpcHRpb24uYWRkID0gKHN1YikgPT4ge1xuICAgICAgICBzdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9ucy5wdXNoKHN1Yik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBzdWJzY3JpcHRpb24ubmV4dCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjYWxsYmFjayh2YWx1ZSwgc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gcnVuUGlwZWRNZXRob2RzKHZhbHVlLCBtZXRob2RzLCBvbkNvbXBsZXRlKSB7XG4gICAgY29uc3QgY2xvbmVNZXRob2RzID0gWy4uLm1ldGhvZHNdO1xuICAgIGNvbnN0IGZpcnN0TWV0aG9kID0gY2xvbmVNZXRob2RzLnNoaWZ0KCk7XG4gICAgY29uc3QgbmV4dCA9IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICBpZiAoY2xvbmVNZXRob2RzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1blBpcGVkTWV0aG9kcyhuZXdWYWx1ZSwgY2xvbmVNZXRob2RzLCBvbkNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgICAgICBvbkNvbXBsZXRlKG5ld1ZhbHVlKTtcbiAgICB9O1xuICAgIGxldCBoYW5kbGVyID0gbmV4dDtcbiAgICBjb25zdCBzZXRIYW5kbGVyID0gKHgpID0+IGhhbmRsZXIgPSB4O1xuICAgIGNvbnN0IHBpcGVVdGlscyA9IHsgc2V0SGFuZGxlciwgbmV4dCB9O1xuICAgIGNvbnN0IG1ldGhvZFJlc3BvbnNlID0gZmlyc3RNZXRob2QodmFsdWUsIHBpcGVVdGlscyk7XG4gICAgaGFuZGxlcihtZXRob2RSZXNwb25zZSk7XG59XG5mdW5jdGlvbiB1bnN1YnNjcmliZShzdWJzY3JpcHRpb24sIHN1YnNjcmliZXJzLCBjYWxsYmFjaykge1xuICAgIHJlbW92ZVN1YkZyb21BcnJheShzdWJzY3JpYmVycywgY2FsbGJhY2spOyAvLyBlYWNoIHdpbGwgYmUgY2FsbGVkIHdoZW4gdXBkYXRlIGNvbWVzIGluXG4gICAgY29uc3QgdmFsU3ViID0gU3ViamVjdC5nbG9iYWxTdWJDb3VudCQ7XG4gICAgU3ViamVjdC5nbG9iYWxTdWJDb3VudCQubmV4dCh2YWxTdWIudmFsdWUgLSAxKTtcbiAgICAvLyBhbnkgZG91YmxlIHVuc3Vic2NyaWJlcyB3aWxsIGJlIGlnbm9yZWRcbiAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgPSAoKSA9PiBzdWJzY3JpcHRpb247XG4gICAgLy8gdW5zdWJzY3JpYmUgZnJvbSBhbnkgY29tYmluZWQgc3ViamVjdHNcbiAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbnM7XG4gICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vic2NyaXB0aW9ucykge1xuICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn1cbiIsImltcG9ydCB7IGlzU3ViamVjdEluc3RhbmNlIH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAnLi9jb21iaW5lTGF0ZXN0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN1YnNjcmlwdGlvbiwgcnVuUGlwZWRNZXRob2RzIH0gZnJvbSAnLi9zdWJqZWN0LnV0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBTdWJqZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgXG4gICAgLy8gcHJpdmF0ZT8gLSBvbmx5IHVzZWQgYnkgZXh0ZW5kaW5nIGNsYXNzZXNcbiAgICBvblN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLm9uU3Vic2NyaXB0aW9uID0gb25TdWJzY3JpcHRpb247XG4gICAgICAgIC8vIHByaXZhdGU/XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IFtdO1xuICAgICAgICB0aGlzLmlzU3ViamVjdCA9IHRydWU7XG4gICAgICAgIC8vIHByaXZhdGU/XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5zZXQgPSB0aGlzLm5leHQuYmluZCh0aGlzKTtcbiAgICAgICAgLy8gZGVmaW5lVmFsdWVPbih0aGlzKVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gZ2V0U3Vic2NyaXB0aW9uKHRoaXMsIGNhbGxiYWNrLCB0aGlzLnN1YnNjcmliZXJzKTtcbiAgICAgICAgLy8gYXJlIHdlIHdpdGhpbiBhIHBpcGU/XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZVdpdGggPSB0aGlzLnN1YnNjcmliZVdpdGg7XG4gICAgICAgIGlmIChzdWJzY3JpYmVXaXRoKSB7XG4gICAgICAgICAgICAvLyBhcmUgd2UgaW4gYSBwaXBlP1xuICAgICAgICAgICAgaWYgKHRoaXMubWV0aG9kcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmdDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJ1blBpcGVkTWV0aG9kcyh2YWx1ZSwgdGhpcy5tZXRob2RzLCBsYXN0VmFsdWUgPT4gb3JnQ2FsbGJhY2sobGFzdFZhbHVlLCBzdWJzY3JpcHRpb24pKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZVdpdGgoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICBpZiAodGhpcy5vblN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5vblN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfVxuICAgIG5leHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVtaXQoKTtcbiAgICB9XG4gICAgZW1pdCgpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAvLyBOb3RpZnkgYWxsIHN1YnNjcmliZXJzIHdpdGggdGhlIG5ldyB2YWx1ZVxuICAgICAgICAvLyBjb25zdCBzdWJzID0gWy4uLnRoaXMuc3Vic2NyaWJlcnNdIC8vIHN1YnMgbWF5IGNoYW5nZSBhcyB3ZSBjYWxsIGNhbGxiYWNrc1xuICAgICAgICBjb25zdCBzdWJzID0gdGhpcy5zdWJzY3JpYmVyczsgLy8gc3VicyBtYXkgY2hhbmdlIGFzIHdlIGNhbGwgY2FsbGJhY2tzXG4gICAgICAgIC8vIGNvbnN0IGxlbmd0aCA9IHN1YnMubGVuZ3RoXG4gICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHN1YnMpIHtcbiAgICAgICAgICAgIHN1Yi5jYWxsYmFjayh2YWx1ZSwgc3ViKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1Byb21pc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXMgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoKHgsIHN1YnNjcmlwdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHJlcyh4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIGxpa2UgdG9Qcm9taXNlIGJ1dCBmYXN0ZXIuIE9ubHkgZ2V0IGNhbGxlZCBvbmNlLiBObyBzdWJzY3JpcHRpb24gdG8gbWFuYWdlICovXG4gICAgdG9DYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZSgoeCwgcnVudGltZVN1YikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFnSnNVbnN1YiA9IHJ1bnRpbWVTdWI/LnVuc3Vic2NyaWJlO1xuICAgICAgICAgICAgaWYgKHRhZ0pzVW5zdWIpIHtcbiAgICAgICAgICAgICAgICB0YWdKc1Vuc3ViKCk7IC8vIGl0cyBmcm9tIHRhZ2dlZGpzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKHgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHBpcGUoLi4ub3BlcmF0aW9ucykge1xuICAgICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICAgIGlmICgndmFsdWUnIGluIHRoaXMpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3QoLi4uYXJncyk7XG4gICAgICAgIHN1YmplY3Quc2V0TWV0aG9kcyhvcGVyYXRpb25zKTtcbiAgICAgICAgc3ViamVjdC5zdWJzY3JpYmVXaXRoID0gKHgpID0+IHRoaXMuc3Vic2NyaWJlKHgpO1xuICAgICAgICBzdWJqZWN0Lm5leHQgPSB4ID0+IHRoaXMubmV4dCh4KTtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfVxuICAgIHNldE1ldGhvZHMob3BlcmF0aW9ucykge1xuICAgICAgICB0aGlzLm1ldGhvZHMgPSBvcGVyYXRpb25zO1xuICAgIH1cbiAgICBzdGF0aWMgYWxsKGFyZ3MpIHtcbiAgICAgICAgY29uc3Qgc3dpdGNoZWQgPSBhcmdzLm1hcChhcmcgPT4ge1xuICAgICAgICAgICAgaWYgKGlzU3ViamVjdEluc3RhbmNlKGFyZykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5IHdpdGggdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHggPSBuZXcgU3ViamVjdChhcmcsIHN1YnNjcmlwdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLm5leHQoYXJnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KHN3aXRjaGVkKTtcbiAgICB9XG59XG5TdWJqZWN0Lmdsb2JhbFN1YkNvdW50JCA9IG5ldyBTdWJqZWN0KDApOyAvLyBmb3IgZWFzZSBvZiBkZWJ1Z2dpbmd9XG5leHBvcnQgY2xhc3MgU3ViamVjdGl2ZSBleHRlbmRzIFN1YmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gYXJnc1swXTtcbiAgICAgICAgZGVmaW5lVmFsdWVPbih0aGlzKTtcbiAgICB9XG4gICAgbmV4dCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmVtaXQoKTtcbiAgICB9XG4gICAgZW1pdCgpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl92YWx1ZTtcbiAgICAgICAgLy8gTm90aWZ5IGFsbCBzdWJzY3JpYmVycyB3aXRoIHRoZSBuZXcgdmFsdWVcbiAgICAgICAgLy8gY29uc3Qgc3VicyA9IFsuLi50aGlzLnN1YnNjcmliZXJzXSAvLyBzdWJzIG1heSBjaGFuZ2UgYXMgd2UgY2FsbCBjYWxsYmFja3NcbiAgICAgICAgY29uc3Qgc3VicyA9IHRoaXMuc3Vic2NyaWJlcnM7IC8vIHN1YnMgbWF5IGNoYW5nZSBhcyB3ZSBjYWxsIGNhbGxiYWNrc1xuICAgICAgICAvLyBjb25zdCBsZW5ndGggPSBzdWJzLmxlbmd0aFxuICAgICAgICBmb3IgKGNvbnN0IHN1YiBvZiBzdWJzKSB7XG4gICAgICAgICAgICBzdWIuY2FsbGJhY2sodmFsdWUsIHN1Yik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lVmFsdWVPbihzdWJqZWN0KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YmplY3QsICd2YWx1ZScsIHtcbiAgICAgICAgLy8gc3VwcG9ydHMgc3ViamVjdC52YWx1ZSA9IHhcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJqZWN0Ll92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgc3ViamVjdC5lbWl0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHN1cHBvcnRzIHN1YmplY3QudmFsdWVcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1YmplY3QuX3ZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL3N1YmplY3QvU3ViamVjdC5jbGFzcy5qcyc7XG4vKiogRW1pdHMgZXZlbnQgYXQgdGhlIGVuZCBvZiBhIHRhZyBiZWluZyByZW5kZXJlZC4gVXNlIHRhZ0Nsb3NlZCQudG9Qcm9taXNlKCkgdG8gcmVuZGVyIGEgdGFnIGFmdGVyIGEgY3VycmVudCB0YWcgaXMgZG9uZSByZW5kZXJpbmcgICovXG5leHBvcnQgY29uc3QgdGFnQ2xvc2VkJCA9IG5ldyBTdWJqZWN0KHVuZGVmaW5lZCwgZnVuY3Rpb24gdGFnQ2xvc2VyKHN1YnNjcmlwdGlvbikge1xuICAgIGlmICghZ2V0U3VwcG9ydEluQ3ljbGUoKSkge1xuICAgICAgICBzdWJzY3JpcHRpb24ubmV4dCgpOyAvLyB3ZSBhcmUgbm90IGN1cnJlbnRseSBwcm9jZXNzaW5nIHNvIHByb2Nlc3Mgbm93XG4gICAgfVxufSk7XG4iLCJpbXBvcnQgeyBmaXJzdFN0YXRlc0hhbmRsZXIgfSBmcm9tICcuL3N0YXRlcy51dGlscy5qcyc7XG5pbXBvcnQgeyBydW5GaXJzdFN0YXRlIH0gZnJvbSAnLi9zdGF0ZUhhbmRsZXJzLmpzJztcbmltcG9ydCB7IHRhZ0Nsb3NlZCQgfSBmcm9tICcuL3RhZ0Nsb3NlZCQuc3ViamVjdC5qcyc7XG5leHBvcnQgY29uc3Qgc2V0VXNlTWVtb3J5ID0ge1xuICAgIHN0YXRlQ29uZmlnOiB7XG4gICAgICAgIHN0YXRlOiBbXSwgLy8gc3RhdGUgbWVtb3J5IG9uIHRoZSBmaXJzdCByZW5kZXJcbiAgICAgICAgdmVyc2lvbjogRGF0ZS5ub3coKSxcbiAgICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgICAgIGhhbmRsZXI6IHJ1bkZpcnN0U3RhdGUsXG4gICAgICAgICAgICBzdGF0ZXNIYW5kbGVyOiBmaXJzdFN0YXRlc0hhbmRsZXIsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRhZ0Nsb3NlZCQsXG59O1xuIiwiaW1wb3J0IHsgdXBkYXRlVG9EaWZmVmFsdWUgfSBmcm9tICcuL3VwZGF0ZVRvRGlmZlZhbHVlLmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIGZvciBhbGwgdGFnIHZhbHVlIHVwZGF0ZXMuIERldGVybWluZXMgaWYgdmFsdWUgY2hhbmdlZCBzaW5jZSBsYXN0IHJlbmRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZShjb250ZXh0SXRlbSwgbmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5vd25lclN1cHBvcnQpIHtcbiAgICAvLyBIYXZlIHRoZSBjb250ZXh0IGNoZWNrIGl0c2VsZiAoYXZvaWQgaGF2aW5nIHRvIGRldGVjdCBvbGQgdmFsdWUpXG4gICAgY29uc3QgdGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBjb25zdCBpZ25vcmVPckRlc3Ryb3llZCA9IHRhZ0pzVmFyLmhhc1ZhbHVlQ2hhbmdlZChuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgLy8gaWdub3JlXG4gICAgaWYgKGlnbm9yZU9yRGVzdHJveWVkID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZ25vcmVPckRlc3Ryb3llZDsgLy8gZG8gbm90aGluZ1xuICAgIH1cbiAgICB1cGRhdGVUb0RpZmZWYWx1ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgaWdub3JlT3JEZXN0cm95ZWQpO1xuICAgIHJldHVybiBpZ25vcmVPckRlc3Ryb3llZDtcbn1cbiIsImltcG9ydCB7IHJlbW92ZUNvbnRleHRJbkN5Y2xlLCBzZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gXCIuLi8uLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZG9tUHJvY2Vzc0NvbnRleHRJdGVtKHZhbHVlLCBzdXBwb3J0LCBjb250ZXh0SXRlbSwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSkge1xuICAgIGNvbnN0IHN1YmplY3QgPSBzdXBwb3J0LmNvbnRleHQ7XG4gICAgc3ViamVjdC5sb2NrZWQgPSAzO1xuICAgIGNvbnRleHRJdGVtLmVsZW1lbnQgPSBjb250ZXh0SXRlbS5lbGVtZW50IHx8IGFwcGVuZFRvO1xuICAgIHNldENvbnRleHRJbkN5Y2xlKGNvbnRleHRJdGVtKTtcbiAgICBjb250ZXh0SXRlbS50YWdKc1Zhci5wcm9jZXNzSW5pdCh2YWx1ZSwgY29udGV4dEl0ZW0sIHN1cHBvcnQsIGluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgY29udGV4dEl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICBkZWxldGUgc3ViamVjdC5sb2NrZWQ7XG59XG4iLCJpbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2FzdFRleHRWYWx1ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIiwiaW1wb3J0IHsgcGFpbnRDb250ZW50IH0gZnJvbSBcIi4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qc1wiO1xuLyoqIGhhbmRsZXMgYXV0b2ZvY3VzLCBhdXRvc2VsZWN0LCBzdHlsZS4sIGNsYXNzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwZWNpYWxBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGVsZW1lbnQsIHNwZWNpYWxOYW1lKSB7XG4gICAgc3dpdGNoIChzcGVjaWFsTmFtZSkge1xuICAgICAgICBjYXNlICdhdXRvZm9jdXMnOlxuICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW2F1dG9mb2N1cywgW2VsZW1lbnRdXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgJ2F1dG9zZWxlY3QnOlxuICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW2F1dG9zZWxlY3QsIFtlbGVtZW50XV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlICdzdHlsZSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gbmFtZS5zcGxpdCgnLicpO1xuICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW3BhaW50U3R5bGUsIFtlbGVtZW50LCBuYW1lcywgdmFsdWVdXSk7IC8vIGF0dHJpYnV0ZSBjaGFuZ2VzIHNob3VsZCBjb21lIGZpcnN0XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnY2xhc3MnOlxuICAgICAgICAgICAgcHJvY2Vzc1NwZWNpYWxDbGFzcyhuYW1lLCB2YWx1ZSwgZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzcGVjaWFsIGF0dHJpYnV0ZSBvZiAke3NwZWNpYWxOYW1lfS4gJHtuYW1lfWApO1xufVxuZnVuY3Rpb24gcGFpbnRTdHlsZShlbGVtZW50LCBuYW1lcywgdmFsdWUpIHtcbiAgICBjb25zdCBzbWFsbE5hbWUgPSBuYW1lc1sxXTtcbiAgICBlbGVtZW50LnN0eWxlW3NtYWxsTmFtZV0gPSB2YWx1ZTsgLy8gc3R5bGUuYmFja2dyb3VuZEdyb3VuZFxuICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoc21hbGxOYW1lLCB2YWx1ZSk7IC8vIHN0eWxlLmJhY2tncm91bmQtZ3JvdW5kXG59XG5mdW5jdGlvbiBwcm9jZXNzU3BlY2lhbENsYXNzKG5hbWUsIHZhbHVlLCBlbGVtZW50KSB7XG4gICAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgbmFtZXMuc2hpZnQoKTsgLy8gcmVtb3ZlIGNsYXNzXG4gICAgLy8gdHJ1dGh5XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW2NsYXNzTGlzdEFkZCwgW2VsZW1lbnQsIG5hbWVdXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmYWxzeVxuICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICBwYWludENvbnRlbnQucHVzaChbY2xhc3NMaXN0UmVtb3ZlLCBbZWxlbWVudCwgbmFtZV1dKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGFzc0xpc3RBZGQoZWxlbWVudCwgbmFtZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChuYW1lKTtcbn1cbmZ1bmN0aW9uIGNsYXNzTGlzdFJlbW92ZShlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xufVxuZnVuY3Rpb24gYXV0b3NlbGVjdChlbGVtZW50KSB7XG4gICAgZWxlbWVudC5zZWxlY3QoKTtcbn1cbmZ1bmN0aW9uIGF1dG9mb2N1cyhlbGVtZW50KSB7XG4gICAgZWxlbWVudC5mb2N1cygpO1xufVxuIiwiaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IHBhaW50Q29udGVudCB9IGZyb20gXCIuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanNcIjtcbi8vIE1heWJlIG1vcmUgcGVyZm9ybWFudCBmb3IgdXBkYXRlcyBidXQgc2VlbWluZ2x5IHNsb3dlciBmb3IgZmlyc3QgcmVuZGVyc1xuZXhwb3J0IGZ1bmN0aW9uIGhvd1RvU2V0SW5wdXRWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIHBhaW50Q29udGVudC5wdXNoKFtzZXROb25GdW5jdGlvbklucHV0VmFsdWUsIFtlbGVtZW50LCBuYW1lLCB2YWx1ZV1dKTtcbn1cbmZ1bmN0aW9uIGhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudFtuYW1lXSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZWxlbWVudFtuYW1lXSA9IHt9O1xuICAgIH1cbiAgICAvLyBIYW5kbGUgb2JqZWN0IHZhbHVlcyBieSBzZXR0aW5nIHByb3BlcnRpZXMgZGlyZWN0bHlcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtzZXRPYmplY3RWYWx1ZSwgW2VsZW1lbnQsIG5hbWUsIGtleSwgc3ViVmFsdWVdXSk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50W25hbWVdLnNldFByb3BlcnR5KSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbc2V0UHJvcGVydHlWYWx1ZSwgW2VsZW1lbnQsIG5hbWUsIGtleSwgc3ViVmFsdWVdXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaG93VG9TZXRTdGFuZEFsb25lQXR0cihlbGVtZW50LCBuYW1lLCBfdmFsdWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaG93VG9TZXRJbnB1dE9iamVjdFZhbHVlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gICAgc2V0U2ltcGxlQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbn1cbi8qKiB1c2VkIGZvciBjaGVja2VkLCBzZWxlY3RlZCwgYW5kIHNvIG9uICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Qm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbGVtZW50W25hbWVdID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsZW1lbnRbbmFtZV0gPSBmYWxzZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0U2ltcGxlQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgLy8gZm9yIGNoZWNrZWQ9dHJ1ZVxuICAgIDtcbiAgICBlbGVtZW50W25hbWVdID0gdmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgbmFtZSwga2V5LCB2YWx1ZSkge1xuICAgIDtcbiAgICBlbGVtZW50W25hbWVdLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xufVxuLyoqIG1haW4gcHJvY2Vzc29yIGZvciB0aGluZ3MgbGlrZSA8ZGl2IHN0eWxlPSR7eyBtYXhXaWR0aDogJzEwMHZ3JyB9fT4gKi9cbmZ1bmN0aW9uIHNldE9iamVjdFZhbHVlKGVsZW1lbnQsIG5hbWUsIGtleSwgdmFsdWUpIHtcbiAgICA7XG4gICAgZWxlbWVudFtuYW1lXVtrZXldID0gdmFsdWU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaGFuZGxlUHJvdmlkZXJDaGFuZ2VzKGFwcFN1cHBvcnQsIHByb3ZpZGVyKSB7XG4gICAgY29uc3QgdGFnc1dpdGhQcm92aWRlciA9IGdldFRhZ3NXaXRoUHJvdmlkZXIoYXBwU3VwcG9ydCwgcHJvdmlkZXIpO1xuICAgIHJldHVybiB0YWdzV2l0aFByb3ZpZGVyO1xufVxuLyoqIFVwZGF0ZXMgYW5kIHJldHVybnMgbWVtb3J5IG9mIHRhZyBwcm92aWRlcnMgKi9cbmZ1bmN0aW9uIGdldFRhZ3NXaXRoUHJvdmlkZXIoc3VwcG9ydCwgcHJvdmlkZXIsIG1lbW9yeSA9IFtdKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBtZW1vcnkucHVzaCh7XG4gICAgICAgIHN1cHBvcnQsXG4gICAgICAgIHJlbmRlckNvdW50OiBzdWJqZWN0LnJlbmRlckNvdW50LFxuICAgICAgICBwcm92aWRlcixcbiAgICB9KTtcbiAgICBjb25zdCBjaGlsZFRhZ3MgPSBwcm92aWRlci5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpbmRleCA9IGNoaWxkVGFncy5sZW5ndGggLSAxOyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRUYWdzW2luZGV4XTtcbiAgICAgICAgY29uc3QgY1N1YmplY3QgPSBjaGlsZC5jb250ZXh0O1xuICAgICAgICBtZW1vcnkucHVzaCh7XG4gICAgICAgICAgICBzdXBwb3J0OiBjaGlsZCxcbiAgICAgICAgICAgIHJlbmRlckNvdW50OiBjU3ViamVjdC5yZW5kZXJDb3VudCxcbiAgICAgICAgICAgIHByb3ZpZGVyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9yeTtcbn1cbiIsImltcG9ydCB7IGhhbmRsZVByb3ZpZGVyQ2hhbmdlcyB9IGZyb20gJy4vaGFuZGxlUHJvdmlkZXJDaGFuZ2VzLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlcnNDaGFuZ2VDaGVjayhzdXBwb3J0KSB7XG4gICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICBjb25zdCBwcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzO1xuICAgIGlmICghcHJvdmlkZXJzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgcHJvc1dpdGhDaGFuZ2VzID0gW107XG4gICAgLy8gcmVzZXQgY2xvbmVzXG4gICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnMpIHtcbiAgICAgICAgY29uc3Qgb3duZXIgPSBwcm92aWRlci5vd25lcjtcbiAgICAgICAgY29uc3QgaGFzQ2hhbmdlID0gaGFuZGxlUHJvdmlkZXJDaGFuZ2VzKG93bmVyLCBwcm92aWRlcik7XG4gICAgICAgIHByb3NXaXRoQ2hhbmdlcy5wdXNoKC4uLmhhc0NoYW5nZS5tYXAobWFwVG9TdXBwb3J0KSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9zV2l0aENoYW5nZXM7XG59XG5mdW5jdGlvbiBtYXBUb1N1cHBvcnQoeCkge1xuICAgIHJldHVybiB4LnN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBpc0FycmF5LCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZShvYmosIG1heERlcHRoKSB7XG4gICAgLy8gcmV0dXJuIG1ha2VEZWVwQ2xvbmUob2JqLCBuZXcgV2Vha01hcCgpKVxuICAgIHJldHVybiBtYWtlRGVlcENsb25lKG9iaiwgbWF4RGVwdGgpO1xufVxuZnVuY3Rpb24gbWFrZURlZXBDbG9uZShvYmosIFxuLy8gdmlzaXRlZDogV2Vha01hcDxhbnksIGFueT5cbm1heERlcHRoKSB7XG4gICAgLy8gSWYgb2JqIGlzIGEgcHJpbWl0aXZlIHR5cGUgb3IgbnVsbCwgcmV0dXJuIGl0IGRpcmVjdGx5XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBCYXNpY1R5cGVzLm9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICAvLyBJZiBvYmogaXMgYWxyZWFkeSB2aXNpdGVkLCByZXR1cm4gdGhlIGNsb25lZCByZWZlcmVuY2VcbiAgICAvKlxuICAgIGlmICh2aXNpdGVkLmhhcyhvYmopKSB7XG4gICAgICByZXR1cm4gdmlzaXRlZC5nZXQob2JqKVxuICAgIH1cbiAgICAqL1xuICAgIGlmIChtYXhEZXB0aCA8IDApIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZXMgbGlrZSBEYXRlIGFuZCBSZWdFeHBcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUob2JqKTtcbiAgICB9XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChvYmopO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYW4gZW1wdHkgb2JqZWN0IG9yIGFycmF5IHdpdGggdGhlIHNhbWUgcHJvdG90eXBlXG4gICAgY29uc3QgY2xvbmUgPSBpc0FycmF5KG9iaikgPyBbXSA6IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpO1xuICAgIC8vIENsb25lIGVhY2ggcHJvcGVydHkgb3IgZWxlbWVudCBvZiB0aGUgb2JqZWN0IG9yIGFycmF5XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2xvbmVbaV0gPSBtYWtlRGVlcENsb25lKG9ialtpXSwgbWF4RGVwdGggLSAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICAgIGNsb25lW2tleV0gPSBtYWtlRGVlcENsb25lKG9ialtrZXldLCBtYXhEZXB0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGgpIHtcbiAgICByZXR1cm4gaXNEZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGgpO1xufVxuZnVuY3Rpb24gaXNEZWVwRXF1YWwob2JqMSwgb2JqMiwgXG4vLyB2aXNpdGVkOiBXZWFrTWFwPGFueSwgYW55Pixcbm1heERlcHRoKSB7XG4gICAgY29uc3QgZGlyZWN0RXF1YWwgPSBvYmoxID09PSBvYmoyO1xuICAgIGlmIChkaXJlY3RFcXVhbCB8fCBpc1NhbWVGdW5jdGlvbnMob2JqMSwgb2JqMikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIElmIG9iaiBpcyBhbHJlYWR5IHZpc2l0ZWQsIHJldHVybiB0aGUgY2xvbmVkIHJlZmVyZW5jZVxuICAgIC8vIGlmICh2aXNpdGVkLmhhcyhvYmoxKSkge1xuICAgIGlmIChtYXhEZXB0aCA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqMSA9PT0gQmFzaWNUeXBlcy5vYmplY3QgJiYgdHlwZW9mIG9iajIgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIC8vIGJvdGggYXJlIGRhdGVzIGFuZCB3ZXJlIGFscmVhZHkgZGV0ZXJtaW5lZCBub3QgdGhlIHNhbWVcbiAgICAgICAgaWYgKG9iajEgaW5zdGFuY2VvZiBEYXRlICYmIG9iajIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqMS5nZXRUaW1lKCkgPT09IG9iajIuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBjbG9uZWQgb2JqZWN0IHRvIGF2b2lkIGN5Y2xpYyByZWZlcmVuY2VzXG4gICAgICAgIC8vIHZpc2l0ZWQuc2V0KG9iajEsIDApXG4gICAgICAgIC8vIENoZWNrIGlmIG9iajEgYW5kIG9iajIgYXJlIGJvdGggYXJyYXlzXG4gICAgICAgIGlmIChpc0FycmF5KG9iajEpICYmIGlzQXJyYXkob2JqMikpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5RGVlcEVxdWFsKG9iajEsIG9iajIsIG1heERlcHRoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBcnJheShvYmoxKSB8fCBpc0FycmF5KG9iajIpKSB7XG4gICAgICAgICAgICAvLyBPbmUgaXMgYW4gYXJyYXksIGFuZCB0aGUgb3RoZXIgaXMgbm90XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIGlzT2JqZWN0RGVlcEVxdWFsKG9iajEsIG9iajIsIHZpc2l0ZWQpXG4gICAgICAgIHJldHVybiBpc09iamVjdERlZXBFcXVhbChvYmoxLCBvYmoyLCBtYXhEZXB0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdERlZXBFcXVhbChvYmoxLCBvYmoyLCBcbi8vIHZpc2l0ZWQ6IFdlYWtNYXA8YW55LCBhbnk+LFxubWF4RGVwdGgpIHtcbiAgICBjb25zdCBrZXlzMSA9IE9iamVjdC5rZXlzKG9iajEpO1xuICAgIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMob2JqMik7XG4gICAgaWYgKGtleXMxLmxlbmd0aCA9PT0gMCAmJiBrZXlzMi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMxKSB7XG4gICAgICAgIGNvbnN0IGtleUZvdW5kID0ga2V5czIuaW5jbHVkZXMoa2V5KTtcbiAgICAgICAgaWYgKCFrZXlGb3VuZCB8fCAhaXNEZWVwRXF1YWwob2JqMVtrZXldLCBvYmoyW2tleV0sIG1heERlcHRoIC0gMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGlzQXJyYXlEZWVwRXF1YWwob2JqMSwgb2JqMiwgbWF4RGVwdGgpIHtcbiAgICBpZiAob2JqMS5sZW5ndGggIT09IG9iajIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNEZWVwRXF1YWwob2JqMVtpXSwgb2JqMltpXSwgbWF4RGVwdGggLSAxKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNTYW1lRnVuY3Rpb25zKGZuMCwgZm4xKSB7XG4gICAgY29uc3QgYm90aEZ1bmN0aW9uID0gaXNGdW5jdGlvbihmbjApICYmIGlzRnVuY3Rpb24oZm4xKTtcbiAgICByZXR1cm4gYm90aEZ1bmN0aW9uICYmIGZuMC50b1N0cmluZygpID09PSBmbjEudG9TdHJpbmcoKTtcbn1cbiIsImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd1Byb3BNYXRjaChwcm9wcywgcGFzdENsb25lUHJvcHMpIHtcbiAgICAvLyBpZiBldmVyeSBwcm9wIHRoZSBzYW1lLCB0aGVuIG5vIGNoYW5nZXNcbiAgICBjb25zdCBsZW4gPSBwcm9wcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbjsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBwcm9wID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBjb25zdCBwYXN0UHJvcCA9IHBhc3RDbG9uZVByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKGlzQXJyYXkocHJvcCkgJiYgaXNBcnJheShwYXN0UHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChwcm9wID09PSBwYXN0UHJvcCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDMuMDsgLy8gbm90IGVxdWFsIGFycmF5XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiAocHJvcCkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24gJiYgdHlwZW9mIChwYXN0UHJvcCkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBjb25zaWRlcmVkIGdvb2RcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChwcm9wKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHBhc3RDbG9uZVByb3BzKSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYkVudHJpZXMgPSBPYmplY3QuZW50cmllcyhwcm9wKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1Ykl0ZW0gb2Ygb2JFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9iamVjdEl0ZW1NYXRjaGVzKHN1Ykl0ZW0sIHBhc3RQcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAzLjE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTsgLy8gYWxsIHN1YiBvYmplY3RzIG1hdGNoZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcCA9PT0gcGFzdFByb3ApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBtYXRjaGVkIGdvb2RcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMy4zOyAvLyBub3QgZXF1YWxcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBmYWxzZSBtZWFucyBoYXMgbm90IGNoYW5nZWRcbn1cbmZ1bmN0aW9uIG9iamVjdEl0ZW1NYXRjaGVzKFtuYW1lLCB2YWx1ZV0sIHBhc3RQcm9wKSB7XG4gICAgY29uc3QgcGFzdFZhbHVlID0gcGFzdFByb3BbbmFtZV07XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uICYmIHR5cGVvZiAocGFzdFZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhc3RWYWx1ZSA9PT0gdmFsdWU7XG59XG4iLCJpbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICcuLi9kZWVwRnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2xvbmVWYWx1ZUFycmF5KHZhbHVlcykge1xuICAgIHJldHVybiB2YWx1ZXMubWFwKGNsb25lVGFnSnNWYWx1ZSk7XG59XG4vKiogY2xvbmVzIG9ubHkgd2hhdCBpcyBuZWVkZWQgdG8gY29tcGFyZSBkaWZmZXJlbmNlcyBsYXRlciAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lVGFnSnNWYWx1ZSh2YWx1ZSwgbWF4RGVwdGgpIHtcbiAgICBjb25zdCB0YWcgPSB2YWx1ZTtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSB2YWx1ZT8udGFnSnNUeXBlO1xuICAgIGlmICh0YWdKc1R5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0YWdKc1R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgVmFsdWVUeXBlcy5zaWduYWw6XG4gICAgICAgICAgICBjYXNlIFZhbHVlVHlwZXMuc3Vic2NyaWJlOlxuICAgICAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyOlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYXNlIFZhbHVlVHlwZXMuZG9tOlxuICAgICAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLnRhZzpcbiAgICAgICAgICAgIGNhc2UgVmFsdWVUeXBlcy50ZW1wbGF0ZXI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lVmFsdWVBcnJheSh0YWcudmFsdWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lVmFsdWVBcnJheSh0YWcpO1xuICAgIH1cbiAgICByZXR1cm4gZGVlcENsb25lKHZhbHVlLCBtYXhEZXB0aCk7XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGNsb25lVGFnSnNWYWx1ZSB9IGZyb20gJy4uL2Nsb25lVmFsdWVBcnJheS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZWVwQ29tcGFyZURlcHRoLCBzaGFsbG93Q29tcGFyZURlcHRoIH0gZnJvbSAnLi4vaGFzU3VwcG9ydENoYW5nZWQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZVByb3BzQnkoc3VwcG9ydCwgcHJvcHMsIGNhc3RQcm9wcykge1xuICAgIGNvbnN0IHRlbXBsYXRlciA9IHN1cHBvcnQudGVtcGxhdGVyO1xuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoICh0ZW1wbGF0ZXIucHJvcFdhdGNoKSB7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuSU1NVVRBQkxFOlxuICAgICAgICAgICAgcmV0dXJuIHN1cHBvcnQucHJvcHNDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0OiBwcm9wcyxcbiAgICAgICAgICAgICAgICBjYXN0UHJvcHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFByb3BXYXRjaGVzLlNIQUxMT1c6XG4gICAgICAgICAgICByZXR1cm4gc3VwcG9ydC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBsYXRlc3Q6IHByb3BzLm1hcChzaGFsbG93TWFwcGVyKSxcbiAgICAgICAgICAgICAgICBjYXN0UHJvcHMsXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgbGF0ZXN0OiBwcm9wcy5tYXAoZGVlcE1hcHBlciksXG4gICAgICAgIGNhc3RQcm9wcyxcbiAgICB9O1xufVxuZnVuY3Rpb24gc2hhbGxvd01hcHBlcih4KSB7XG4gICAgcmV0dXJuIGNsb25lVGFnSnNWYWx1ZSh4LCBzaGFsbG93Q29tcGFyZURlcHRoKTtcbn1cbmZ1bmN0aW9uIGRlZXBNYXBwZXIocHJvcHMpIHtcbiAgICByZXR1cm4gY2xvbmVUYWdKc1ZhbHVlKHByb3BzLCBkZWVwQ29tcGFyZURlcHRoKTtcbn1cbiIsImltcG9ydCB7IGNsb25lUHJvcHNCeSB9IGZyb20gJy4vcHJvcHMvY2xvbmVQcm9wc0J5LmZ1bmN0aW9uLmpzJztcbi8qKiB1c2VkIG9ubHkgZm9yIGFwcHMsIG90aGVyd2lzZSB1c2UgU3VwcG9ydCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhc2VTdXBwb3J0KHRlbXBsYXRlciwgY29udGV4dCwgY2FzdGVkUHJvcHMpIHtcbiAgICBjb25zdCBiYXNlU3VwcG9ydCA9IHtcbiAgICAgICAgdGVtcGxhdGVyLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjYXN0ZWRQcm9wcyxcbiAgICAgICAgYXBwU3VwcG9ydDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgY29uc3QgZ2xvYmFsID0gY29udGV4dC5nbG9iYWw7XG4gICAgZ2xvYmFsLmJsb2NrZWQgPSBbXTtcbiAgICAvLyBjb250ZXh0LnN0YXRlLm5ld2VyID0gY29udGV4dC5zdGF0ZS5uZXdlciB8fCB7IC4uLnNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZyB9XG4gICAgaWYgKCFjb250ZXh0LnN0YXRlKSB7XG4gICAgICAgIGNvbnRleHQuc3RhdGUgPSB7XG4gICAgICAgICAgICBuZXdlcjoge1xuICAgICAgICAgICAgICAgIHN0YXRlOiBbXSxcbiAgICAgICAgICAgICAgICBzdGF0ZXM6IFtdLFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYmFzZVN1cHBvcnQ7XG59XG4vKiogU2V0cyBzdXBwb3J0IHN0YXRlcyB0byBlbXB0eSBhcnJheSBhbmQgY2xvbmVzIHByb3BzICovXG5leHBvcnQgZnVuY3Rpb24gdXBncmFkZUJhc2VUb1N1cHBvcnQodGVtcGxhdGVyLCAvLyBhdCBydW50aW1lIHJlbmRlcmluZyBvZiBhIHRhZywgaXQgbmVlZHMgdG8gYmUgbWFycmllZCB0byBhIG5ldyBTdXBwb3J0KClcbnN1cHBvcnQsIGFwcFN1cHBvcnQsIGNhc3RlZFByb3BzKSB7XG4gICAgc3VwcG9ydC5hcHBTdXBwb3J0ID0gYXBwU3VwcG9ydDtcbiAgICBjb25zdCBwcm9wcyA9IHRlbXBsYXRlci5wcm9wczsgLy8gbmF0dXJhbCBwcm9wc1xuICAgIGlmIChwcm9wcykge1xuICAgICAgICBzdXBwb3J0LnByb3BzQ29uZmlnID0gY2xvbmVQcm9wc0J5KHN1cHBvcnQsIHByb3BzLCBjYXN0ZWRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUh0bWxTdXBwb3J0KHRlbXBsYXRlciwgLy8gYXQgcnVudGltZSByZW5kZXJpbmcgb2YgYSB0YWcsIGl0IG5lZWRzIHRvIGJlIG1hcnJpZWQgdG8gYSBuZXcgU3VwcG9ydCgpXG5vd25lclN1cHBvcnQsIGFwcFN1cHBvcnQsIGNvbnRleHQsIGNhc3RlZFByb3BzKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHtcbiAgICAgICAgdGVtcGxhdGVyLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjYXN0ZWRQcm9wcyxcbiAgICAgICAgYXBwU3VwcG9ydDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgc3VwcG9ydC5vd25lclN1cHBvcnQgPSBvd25lclN1cHBvcnQ7XG4gICAgc3VwcG9ydC5hcHBTdXBwb3J0ID0gYXBwU3VwcG9ydDtcbiAgICByZXR1cm4gc3VwcG9ydDtcbn1cbiIsIi8vIExpZmUgY3ljbGUgNCAtIGVuZCBvZiBsaWZlXG5leHBvcnQgZnVuY3Rpb24gcnVuQmVmb3JlRGVzdHJveShzdXBwb3J0LCBnbG9iYWwpIHtcbiAgICBjb25zdCBwcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzO1xuICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBwcm92aWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gcHJvdmlkZXIuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJvdmlkZXIuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5jb250ZXh0Lmdsb2JhbCA9PT0gZ2xvYmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGdsb2JhbC5kZWxldGVkID0gdHJ1ZVxuICAgIHN1cHBvcnQuY29udGV4dC5kZXN0cm95JC5uZXh0KCk7XG4gICAgc3VwcG9ydC5jb250ZXh0LnJlbmRlckNvdW50ID0gMDsgLy8gaWYgaXQgY29tZXMgYmFjaywgd29udCBiZSBjb25zaWRlcmVkIGFuIHVwZGF0ZVxufVxuIiwiaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IHJ1bkJlZm9yZURlc3Ryb3kgfSBmcm9tICcuL3RhZ1J1bm5lci5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lDb250ZXh0cyhjaGlsZFRhZ3MsIG93bmVyU3VwcG9ydCkge1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRUYWdzKSB7XG4gICAgICAgIC8vIGRlbGV0aW5nIGFycmF5c1xuICAgICAgICBjb25zdCBsYXN0QXJyYXkgPSBjaGlsZC5sYXN0QXJyYXk7XG4gICAgICAgIGlmIChsYXN0QXJyYXkpIHtcbiAgICAgICAgICAgIC8vIHJlY3Vyc2VcbiAgICAgICAgICAgIGRlc3Ryb3lDb250ZXh0cyhsYXN0QXJyYXksIG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZFZhbHVlID0gY2hpbGQudmFsdWU7XG4gICAgICAgIGlmIChjaGlsZFZhbHVlPy50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICBjaGlsZFZhbHVlLmRlc3Ryb3koY2hpbGQsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICBjaGlsZC5kZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IGNoaWxkLmdsb2JhbDtcbiAgICAgICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBub3QgYSBzdXBwb3J0IGNvbnRleHRJdGVtXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3VwcG9ydCA9IGNoaWxkLnN0YXRlLm5ld2VzdDtcbiAgICAgICAgY29uc3QgaVN1YnMgPSBnbG9iYWwuc3Vic2NyaXB0aW9ucztcbiAgICAgICAgaWYgKGlTdWJzKSB7XG4gICAgICAgICAgICBpU3Vicy5mb3JFYWNoKHVuc3Vic2NyaWJlRnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVGFnQ29tcG9uZW50KHN1cHBvcnQudGVtcGxhdGVyKSkge1xuICAgICAgICAgICAgcnVuQmVmb3JlRGVzdHJveShzdXBwb3J0LCBnbG9iYWwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1YlRhZ3MgPSBjaGlsZC5jb250ZXh0cztcbiAgICAgICAgLy8gcmVjdXJzZVxuICAgICAgICBkZXN0cm95Q29udGV4dHMoc3ViVGFncywgc3VwcG9ydCk7XG4gICAgICAgIGdsb2JhbC5kZWxldGVkID0gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveShjaGlsZFRhZ3MsIHRhZ3MgPSBbXSwgc3VicyA9IFtdKSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZFRhZ3MpIHtcbiAgICAgICAgY29uc3QgZ2xvYmFsID0gY2hpbGQuZ2xvYmFsO1xuICAgICAgICBpZiAoIWdsb2JhbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3VwcG9ydCA9IGNoaWxkLnN0YXRlLm5ld2VzdDtcbiAgICAgICAgaWYgKHN1cHBvcnQpIHtcbiAgICAgICAgICAgIHRhZ3MucHVzaChzdXBwb3J0KTtcbiAgICAgICAgICAgIGNvbnN0IGlTdWJzID0gZ2xvYmFsLnN1YnNjcmlwdGlvbnM7XG4gICAgICAgICAgICBpZiAoaVN1YnMpIHtcbiAgICAgICAgICAgICAgICBzdWJzLnB1c2goLi4uaVN1YnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN1YlRhZ3MgPSBjaGlsZC5jb250ZXh0cztcbiAgICAgICAgaWYgKHN1YlRhZ3MpIHtcbiAgICAgICAgICAgIGdldENoaWxkVGFnc1RvU29mdERlc3Ryb3koc3ViVGFncywgdGFncywgc3Vicyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgdGFncywgc3VicyB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc3Vic2NyaWJlRnJvbShmcm9tKSB7XG4gICAgZnJvbS51bnN1YnNjcmliZSgpO1xufVxuIiwiaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXIvZGVzdHJveVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVBcnJheUl0ZW1zKHZhbHVlLCBpbmRleCwgbGFzdEFycmF5LCByZW1vdmVkKSB7XG4gICAgY29uc3QgbmV3TGVuZ3RoID0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBhdCA9IGluZGV4IC0gcmVtb3ZlZDtcbiAgICBjb25zdCBsZXNzTGVuZ3RoID0gYXQgPCAwIHx8IG5ld0xlbmd0aCA8IGF0O1xuICAgIGNvbnN0IHByZXZDb250ZXh0ID0gbGFzdEFycmF5W2luZGV4XTtcbiAgICBpZiAobGVzc0xlbmd0aCkge1xuICAgICAgICBkZXN0cm95QXJyYXlJdGVtKHByZXZDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGNvbnN0IG9sZEtleSA9IHByZXZDb250ZXh0LnZhbHVlLmFycmF5VmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWVUYWcgPSB2YWx1ZVtpbmRleF07XG4gICAgY29uc3QgcmVzdWx0ID0gcnVuQXJyYXlJdGVtRGlmZihvbGRLZXksIG5ld1ZhbHVlVGFnLCBwcmV2Q29udGV4dCwgbGFzdEFycmF5LCBpbmRleCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJ1bkFycmF5SXRlbURpZmYob2xkS2V5LCBuZXdWYWx1ZVRhZywgcHJldkNvbnRleHQsIGxhc3RBcnJheSwgaW5kZXgpIHtcbiAgICBjb25zdCBpc0RpZmYgPSBuZXdWYWx1ZVRhZyAmJiBvbGRLZXkgIT09IG5ld1ZhbHVlVGFnLmFycmF5VmFsdWU7XG4gICAgaWYgKGlzRGlmZikge1xuICAgICAgICBkZXN0cm95QXJyYXlJdGVtKHByZXZDb250ZXh0KTtcbiAgICAgICAgbGFzdEFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95QXJyYXlJdGVtKGNvbnRleHQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0Lmdsb2JhbDtcbiAgICBkZXN0cm95QXJyYXlJdGVtQnlHbG9iYWwoZ2xvYmFsLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lBcnJheUl0ZW1CeUdsb2JhbChnbG9iYWwsIGNvbnRleHQpIHtcbiAgICBpZiAoZ2xvYmFsICYmIGNvbnRleHQuc3RhdGU/Lm9sZGVzdCkge1xuICAgICAgICBjb25zdCBzdXBwb3J0ID0gY29udGV4dC5zdGF0ZS5vbGRlc3Q7XG4gICAgICAgIGRlc3Ryb3lTdXBwb3J0KHN1cHBvcnQsIGdsb2JhbCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC50YWdKc1Zhci5kZXN0cm95KGNvbnRleHQsIHt9KTtcbn1cbiIsImltcG9ydCB7IGRlc3Ryb3lBcnJheUl0ZW0gfSBmcm9tICcuL3VwZGF0ZS9hcnJheXMvY29tcGFyZUFycmF5SXRlbXMuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lBcnJheUNvbnRleHQoY29udGV4dCkge1xuICAgICsrY29udGV4dC51cGRhdGVDb3VudDtcbiAgICBjb25zdCBsYXN0QXJyYXkgPSBjb250ZXh0Lmxhc3RBcnJheTtcbiAgICBkZXN0cm95QXJyYXkoY29udGV4dCwgbGFzdEFycmF5KTtcbn1cbi8qKiBEZWxldGVzIGVudGlyZSBhcnJheSBjb250ZXh0IG5vdCBqdXN0IG9uZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lBcnJheShzdWJqZWN0LCBsYXN0QXJyYXkpIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGFzdEFycmF5Lmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBkZXN0cm95QXJyYXlJdGVtKGxhc3RBcnJheVtpbmRleF0pO1xuICAgIH1cbiAgICBkZWxldGUgc3ViamVjdC5sYXN0QXJyYXk7XG59XG4iLCJpbXBvcnQgeyBhZGRQYWludFJlbW92ZXIgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuLyoqIERlc3Ryb3kgZG9tIGVsZW1lbnRzIGFuZCBkb20gc3BhY2UgbWFya2VycyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lIdG1sRG9tTWV0YShodG1sRG9tTWV0YSkge1xuICAgIC8vIGNoZWNrIHN1YmplY3RzIHRoYXQgbWF5IGhhdmUgY2xvbmVzIGF0dGFjaGVkIHRvIHRoZW1cbiAgICBmb3IgKGxldCBpbmRleCA9IGh0bWxEb21NZXRhLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBodG1sRG9tTWV0YVtpbmRleF07XG4gICAgICAgIGRlc3Ryb3lDbG9uZShjbG9uZSk7XG4gICAgICAgIGh0bWxEb21NZXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVzdHJveUNsb25lKGNsb25lKSB7XG4gICAgY29uc3QgbWFya2VyID0gY2xvbmUubWFya2VyO1xuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgYWRkUGFpbnRSZW1vdmVyKG1hcmtlciwgJ2Rlc3Ryb3lNYXJrZXInKTtcbiAgICB9XG4gICAgY29uc3QgZG9tID0gY2xvbmUuZG9tRWxlbWVudDtcbiAgICBhZGRQYWludFJlbW92ZXIoZG9tLCAnZGVzdHJveUNsb25lJyk7XG59XG4iLCJpbXBvcnQgeyBkZXN0cm95QXJyYXkgfSBmcm9tICcuL2Rlc3Ryb3lBcnJheUNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkUGFpbnRSZW1vdmVyIH0gZnJvbSAnLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lIdG1sRG9tTWV0YSB9IGZyb20gJy4vZGVzdHJveUh0bWxEb21NZXRhLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL2luZGV4LmpzJztcbi8qKiBzZXRzIGdsb2JhbC5kZWxldGVkIG9uIHN1cHBvcnQgYW5kIGFsbCBjaGlsZHJlbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNtYXJ0UmVtb3ZlS2lkcyhjb250ZXh0LCBhbGxQcm9taXNlcykge1xuICAgIGNvbnN0IHN1YkNvbnRleHRzID0gY29udGV4dC5jb250ZXh0cztcbiAgICBzbWFydFJlbW92ZUJ5Q29udGV4dChzdWJDb250ZXh0cywgYWxsUHJvbWlzZXMpO1xuICAgIGRlc3Ryb3lDb250ZXh0SHRtbChjb250ZXh0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95Q29udGV4dEh0bWwoY29udGV4dCkge1xuICAgIGRlc3Ryb3lIdG1sRG9tTWV0YShjb250ZXh0Lmh0bWxEb21NZXRhKTtcbn1cbmZ1bmN0aW9uIHNtYXJ0UmVtb3ZlQnlDb250ZXh0KGNvbnRleHRzLCBhbGxQcm9taXNlcykge1xuICAgIGZvciAoY29uc3QgY29udGV4dCBvZiBjb250ZXh0cykge1xuICAgICAgICBpZiAoY29udGV4dC53aXRoaW5Pd25lckVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ0pzVmFyID0gY29udGV4dC50YWdKc1ZhcjtcbiAgICAgICAgICAgIGlmICh0YWdKc1ZhciAmJiB0YWdKc1Zhci50YWdKc1R5cGUgPT09ICdob3N0Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld2VzdCA9IGNvbnRleHQuc3VwcG9ydE93bmVyO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3REZXN0cm95ID0gdGFnSnNWYXIuZGVzdHJveShjb250ZXh0LCBuZXdlc3QpO1xuICAgICAgICAgICAgICAgIGlmIChpc1Byb21pc2UoaG9zdERlc3Ryb3kpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbFByb21pc2VzLnB1c2goaG9zdERlc3Ryb3kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBpIGxpdmUgd2l0aGluIG15IG93bmVyIHZhcmlhYmxlLiBJIHdpbGwgYmUgZGVsZXRlZCB3aXRoIG93bmVyXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFzdEFycmF5ID0gY29udGV4dC5sYXN0QXJyYXk7XG4gICAgICAgIGlmIChsYXN0QXJyYXkpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lBcnJheShjb250ZXh0LCBsYXN0QXJyYXkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVndWxhciB2YWx1ZXMsIG5vIHBsYWNlaG9sZGVyc1xuICAgICAgICBjb25zdCBlbG0gPSBjb250ZXh0LnNpbXBsZVZhbHVlRWxtO1xuICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgICBkZWxldGUgY29udGV4dC5zaW1wbGVWYWx1ZUVsbTtcbiAgICAgICAgICAgIGFkZFBhaW50UmVtb3ZlcihlbG0sICdzbWFydFJlbW92ZUJ5Q29udGV4dCcpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViR2xvYmFsID0gY29udGV4dC5nbG9iYWw7XG4gICAgICAgIGlmIChzdWJHbG9iYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7IC8vIGNvbnRleHRcbiAgICAgICAgfVxuICAgICAgICBzdWJHbG9iYWwuZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IG9sZGVzdCA9IGNvbnRleHQuc3RhdGU/Lm9sZGVzdDtcbiAgICAgICAgaWYgKG9sZGVzdCkge1xuICAgICAgICAgICAgc21hcnRSZW1vdmVLaWRzKGNvbnRleHQsIGFsbFByb21pc2VzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZGVzdHJveUNvbnRleHRzIH0gZnJvbSAnLi4vdGFnL2Rlc3Ryb3lDb250ZXh0cy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzbWFydFJlbW92ZUtpZHMgfSBmcm9tICcuLi90YWcvc21hcnRSZW1vdmVLaWRzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJ1bkJlZm9yZURlc3Ryb3kgfSBmcm9tICcuLi90YWcvdGFnUnVubmVyLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95U3VwcG9ydChzdXBwb3J0LCBnbG9iYWwpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIGdsb2JhbC5kZWxldGVkID0gdHJ1ZTtcbiAgICBjb250ZXh0LnJlbmRlckNvdW50ID0gMDsgLy8gaWYgaXQgY29tZXMgYmFjaywgd29udCBiZSBjb25zaWRlcmVkIGFuIHVwZGF0ZVxuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgY29uc3Qgc3ViQ29udGV4dHMgPSBjb250ZXh0LmNvbnRleHRzO1xuICAgIGRlc3Ryb3lDb250ZXh0cyhzdWJDb250ZXh0cywgc3VwcG9ydCk7XG4gICAgLy8gdGFnKCkgb25seSBkZXN0cm95XG4gICAgaWYgKHN1cHBvcnQudGVtcGxhdGVyLndyYXBwZXIpIHtcbiAgICAgICAgcnVuQmVmb3JlRGVzdHJveShzdXBwb3J0LCBnbG9iYWwpO1xuICAgIH1cbiAgICBzbWFydFJlbW92ZUtpZHMoY29udGV4dCwgcHJvbWlzZXMpO1xuICAgIGRlbGV0ZSBjb250ZXh0LnN0YXRlO1xuICAgIGRlbGV0ZSBjb250ZXh0LmNvbnRleHRzO1xuICAgIGRlbGV0ZSBjb250ZXh0LnJldHVyblZhbHVlO1xuICAgIHJldHVybiBwcm9taXNlcztcbn1cbiIsImltcG9ydCB7IEJhc2ljVHlwZXMsIFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaXNMaWtlVGFncyhuZXdTdXBwb3J0LCAvLyBuZXdcbm9sZFN1cHBvcnQpIHtcbiAgICBjb25zdCBpc0xpa2UgPSBpc0xpa2VCYXNlVGFncyhuZXdTdXBwb3J0LCBvbGRTdXBwb3J0KTtcbiAgICAvLyBpcyB0aGlzIHBlcmhhcHMgYW4gb3V0ZXJIVE1MIGNvbXBhcmU/ICAgICAgXG4gICAgaWYgKCFpc0xpa2UgJiYgb2xkU3VwcG9ydC50ZW1wbGF0ZXIudGFnPy5faW5uZXJIVE1MKSB7XG4gICAgICAgIGlmIChpc0xpa2VCYXNlVGFncyhuZXdTdXBwb3J0Lm91dGVySFRNTCwgb2xkU3VwcG9ydCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0xpa2U7XG59XG5mdW5jdGlvbiBpc0xpa2VCYXNlVGFncyhuZXdTdXBwb3J0LCAvLyBuZXdcbm9sZFN1cHBvcnQpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXIwID0gbmV3U3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgY29uc3QgdGVtcGxhdGVyMSA9IG9sZFN1cHBvcnQudGVtcGxhdGVyO1xuICAgIGNvbnN0IG5ld1RhZyA9IHRlbXBsYXRlcjA/LnRhZyB8fCBuZXdTdXBwb3J0O1xuICAgIGNvbnN0IG9sZFRhZyA9IHRlbXBsYXRlcjEudGFnOyAvLyB8fCAob2xkU3VwcG9ydCBhcyBhbnkpXG4gICAgaWYgKHRlbXBsYXRlcjA/LnRhZ0pzVHlwZSA9PT0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcikge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVyMC5kb20gPT09IHRlbXBsYXRlcjEuZG9tO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5ld1RhZy50YWdKc1R5cGUpIHtcbiAgICAgICAgY2FzZSBWYWx1ZVR5cGVzLmRvbToge1xuICAgICAgICAgICAgaWYgKG9sZFRhZz8udGFnSnNUeXBlICE9PSBWYWx1ZVR5cGVzLmRvbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gbmV3VGFnIGlzIG5vdCBldmVuIHNhbWUgdHlwZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlzTGlrZURvbVRhZ3MobmV3VGFnLCBvbGRUYWcpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVmFsdWVUeXBlcy50YWc6IHtcbiAgICAgICAgICAgIGNvbnN0IGxpa2UgPSBpc0xpa2VTdHJpbmdUYWdzKG5ld1RhZywgb2xkVGFnLCBuZXdTdXBwb3J0LCBvbGRTdXBwb3J0KTtcbiAgICAgICAgICAgIHJldHVybiBsaWtlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biB0YWdKc1R5cGUgb2YgJHtuZXdUYWcudGFnSnNUeXBlfWApO1xufVxuLy8gdXNlZCB3aGVuIGNvbXBpbGVyIHdhcyB1c2VkXG5leHBvcnQgZnVuY3Rpb24gaXNMaWtlRG9tVGFncyhuZXdUYWcsIG9sZFRhZykge1xuICAgIGNvbnN0IGRvbU1ldGEwID0gbmV3VGFnLmRvbTtcbiAgICBjb25zdCBkb21NZXRhMSA9IG9sZFRhZy5kb207XG4gICAgcmV0dXJuIGRvbU1ldGEwID09PSBkb21NZXRhMTtcbn1cbi8vIHVzZWQgZm9yIG5vIGNvbXBpbGluZ1xuZnVuY3Rpb24gaXNMaWtlU3RyaW5nVGFncyhuZXdUYWcsIG9sZFRhZywgbmV3U3VwcG9ydCwgLy8gbmV3XG5vbGRTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3RyaW5nczAgPSBuZXdUYWcuc3RyaW5ncztcbiAgICBjb25zdCBzdHJpbmdzMSA9IG9sZFRhZy5zdHJpbmdzO1xuICAgIGlmIChzdHJpbmdzMC5sZW5ndGggIT09IHN0cmluZ3MxLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGV2ZXJ5U3RyaW5nTWF0Y2hlZCA9IHN0cmluZ3MwLmV2ZXJ5KChzdHJpbmcsIGluZGV4KSA9PiBzdHJpbmdzMVtpbmRleF0ubGVuZ3RoID09PSBzdHJpbmcubGVuZ3RoIC8vIHBlcmZvcm1hbmNlLCBqdXN0IGNvbXBhcmUgbGVuZ3RoIG9mIHN0cmluZ3MgLy8gVE9ETzogRG9jdW1lbnQgdGhpc1xuICAgICk7XG4gICAgaWYgKCFldmVyeVN0cmluZ01hdGNoZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZXMwID0gbmV3U3VwcG9ydC50ZW1wbGF0ZXIudmFsdWVzIHx8IG5ld1RhZy52YWx1ZXM7XG4gICAgY29uc3QgdmFsdWVzMSA9IG9sZFN1cHBvcnQudGVtcGxhdGVyLnZhbHVlcyB8fCBvbGRUYWcudmFsdWVzO1xuICAgIHJldHVybiBpc0xpa2VWYWx1ZVNldHModmFsdWVzMCwgdmFsdWVzMSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNMaWtlVmFsdWVTZXRzKHZhbHVlczAsIHZhbHVlczEpIHtcbiAgICBjb25zdCB2YWx1ZXNMZW5ndGhzTWF0Y2ggPSB2YWx1ZXMwLmxlbmd0aCA9PT0gdmFsdWVzMS5sZW5ndGg7XG4gICAgaWYgKCF2YWx1ZXNMZW5ndGhzTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhbGxWYXJzTWF0Y2ggPSB2YWx1ZXMxLmV2ZXJ5KGZ1bmN0aW9uIGlzRXZlcnlWYWx1ZUFsaWtlKHZhbHVlLCBpbmRleCkge1xuICAgICAgICBjb25zdCBjb21wYXJlVG8gPSB2YWx1ZXMwW2luZGV4XTtcbiAgICAgICAgY29uc3QgaXNGdW5jdGlvbnMgPSB0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbiAmJiB0eXBlb2YgKGNvbXBhcmVUbykgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb247XG4gICAgICAgIGlmIChpc0Z1bmN0aW9ucykge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nTWF0Y2ggPSB2YWx1ZS50b1N0cmluZygpID09PSBjb21wYXJlVG8udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChzdHJpbmdNYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIGlmIChhbGxWYXJzTWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0IH0gZnJvbSAnLi4vcmVuZGVyL2Rlc3Ryb3lTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dCkge1xuICAgICsrY29udGV4dC51cGRhdGVDb3VudDtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0Lmdsb2JhbDtcbiAgICBjb25zdCBzdGF0ZSA9IGNvbnRleHQuc3RhdGU7XG4gICAgY29uc3QgbGFzdFN1cHBvcnQgPSBzdGF0ZS5uZXdlc3Q7XG4gICAgLy8gZGVzdHJveSBvbGQgY29tcG9uZW50LCB2YWx1ZSBpcyBub3QgYSBjb21wb25lbnRcbiAgICBkZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCwgZ2xvYmFsKTtcbiAgICBkZXN0cm95U3VwcG9ydENvbnRleHQoY29udGV4dCk7XG59XG5mdW5jdGlvbiBkZXN0cm95U3VwcG9ydENvbnRleHQoY29udGV4dCkge1xuICAgIC8vIGRlbGV0ZSBjb250ZXh0Lmh0bWxEb21NZXRhXG4gICAgY29udGV4dC5odG1sRG9tTWV0YSA9IFtdO1xuICAgIGRlbGV0ZSBjb250ZXh0LmNvbnRleHRzO1xuICAgIGRlbGV0ZSBjb250ZXh0LnN0YXRlO1xuICAgIGRlbGV0ZSBjb250ZXh0Lmdsb2JhbDtcbiAgICBjb250ZXh0LnJlbmRlckNvdW50ID0gMDtcbn1cbiIsImltcG9ydCB7IGdldE5ld0dsb2JhbCB9IGZyb20gJy4vdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydCB9IGZyb20gJy4uL3JlbmRlci9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc1N0YXRpY1RhZyB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgaXNMaWtlVGFncyB9IGZyb20gJy4vaXNMaWtlVGFncy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0cnlVcGRhdGVUb1RhZyB9IGZyb20gJy4vdXBkYXRlL3RyeVVwZGF0ZVRvVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSB9IGZyb20gJy4vZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RhZ1ZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IGxhc3RTdXBwb3J0ID0gY29udGV4dEl0ZW0uc3RhdGU/Lm5ld2VzdDtcbiAgICBjb25zdCBpc1ZhbHVlVGFnID0gaXNTdGF0aWNUYWcobmV3VmFsdWUpO1xuICAgIGNvbnN0IG5ld1RhZyA9IG5ld1ZhbHVlO1xuICAgIGlmIChpc1ZhbHVlVGFnKSB7XG4gICAgICAgIC8vIGl0cyBhIGRpZmZlcmVudCB0YWcgbm93XG4gICAgICAgIGNvbnN0IGxpa2VUYWdzID0gaXNMaWtlVGFncyhuZXdUYWcsIGxhc3RTdXBwb3J0KTtcbiAgICAgICAgaWYgKCFsaWtlVGFncykge1xuICAgICAgICAgICAgcmV0dXJuIDc7IC8vICd0YWctc3dhcCdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgaXNUYWcgPSBuZXdWYWx1ZT8udGFnSnNUeXBlO1xuICAgIGlmIChpc1RhZykge1xuICAgICAgICBpZiAobmV3VmFsdWUud3JhcHBlcj8ub3JpZ2luYWwgPT09IGNvbnRleHRJdGVtLnZhbHVlLndyYXBwZXI/Lm9yaWdpbmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gODg7IC8vIGl0cyBzYW1lIHRhZyB3aXRoIG5ldyB2YWx1ZXNcbiAgICB9XG4gICAgLy8gZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtKGNvbnRleHRJdGVtKVxuICAgIHJldHVybiA4OyAvLyAnbm8tbG9uZ2VyLXRhZydcbn1cbi8qXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZShcbiAgbmV3VmFsdWU6IHVua25vd24sXG4gIGNvbnRleHRJdGVtOiBDb250ZXh0SXRlbSxcbikge1xuICBjb25zdCBjaGVja1ZhbHVlID0gY2hlY2tUYWdWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pXG5cbiAgY29uc3QgZ2xvYmFsID0gY29udGV4dEl0ZW0uZ2xvYmFsIGFzIFN1cHBvcnRUYWdHbG9iYWxcbiAgY29uc3QgbGFzdFN1cHBvcnQgPSBjb250ZXh0SXRlbS5zdGF0ZT8ubmV3ZXN0IGFzIEFueVN1cHBvcnRcbiAgXG4gIGlmKGNoZWNrVmFsdWUgPT09IDcpIHtcbiAgICBkZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCwgZ2xvYmFsKVxuICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSBhcyBTdXBwb3J0Q29udGV4dEl0ZW0pXG4gICAgcmV0dXJuIDcgLy8gJ3RhZy1zd2FwJ1xuICB9XG4gIFxuICBpZihjaGVja1ZhbHVlID09PSA4KSB7XG4gICAgZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtKGNvbnRleHRJdGVtKVxuICAgIHJldHVybiA4XG4gIH1cblxuICBjb25zdCBpc1ZhbHVlVGFnID0gaXNTdGF0aWNUYWcobmV3VmFsdWUpXG4gIGlmKGlzVmFsdWVUYWcpIHtcbiAgICAvLyBhbHdheXMgY2F1c2UgYSByZWRyYXcgb2Ygc3RhdGljIHRhZ3MgKHdhcyBmYWxzZSlcbiAgICB0cnlVcGRhdGVUb1RhZyhcbiAgICAgIGNvbnRleHRJdGVtLFxuICAgICAgbmV3VmFsdWUgYXMgVGVtcGxhdGVyUmVzdWx0LFxuICAgICAgbGFzdFN1cHBvcnQgYXMgQW55U3VwcG9ydCxcbiAgICApXG5cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgY29uc3QgaXNUYWcgPSAobmV3VmFsdWUgYXMgYW55KT8udGFnSnNUeXBlXG4gIGlmKGlzVGFnKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBjb250ZXh0SXRlbS5zdGF0ZSBhcyBDb250ZXh0U3RhdGVNZXRhXG4gICAgY29uc3Qgc3VwcG9ydCA9IHN0YXRlLm5ld2VzdCBhcyBBbnlTdXBwb3J0XG4gICAgY29uc3Qgb3duZXJTdXBwb3J0ID0gc3VwcG9ydC5vd25lclN1cHBvcnQgYXMgQW55U3VwcG9ydFxuICAgIGNvbnN0IHJlc3VsdCA9IHRyeVVwZGF0ZVRvVGFnKFxuICAgICAgY29udGV4dEl0ZW0sXG4gICAgICBuZXdWYWx1ZSBhcyBUZW1wbGF0ZXJSZXN1bHQsXG4gICAgICBvd25lclN1cHBvcnQsXG4gICAgKVxuXG4gICAgY29uc3QgZG9Ob3RSZWRyYXcgPSByZXN1bHQgPT09IHRydWVcblxuICAgIGlmKGRvTm90UmVkcmF3KSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIHJldHVybiA4OCAvLyBpdHMgc2FtZSB0YWcgd2l0aCBuZXcgdmFsdWVzXG4gIH1cblxuICBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dEl0ZW0pXG4gIHJldHVybiA4XG59XG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVGFnVmFsdWVDaGFuZ2VBbmRVcGRhdGUobmV3VmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgZ2xvYmFsID0gY29udGV4dEl0ZW0uZ2xvYmFsO1xuICAgIGNvbnN0IGxhc3RTdXBwb3J0ID0gY29udGV4dEl0ZW0uc3RhdGU/Lm5ld2VzdDtcbiAgICBjb25zdCBpc1ZhbHVlVGFnID0gaXNTdGF0aWNUYWcobmV3VmFsdWUpO1xuICAgIGNvbnN0IG5ld1RhZyA9IG5ld1ZhbHVlO1xuICAgIGlmIChpc1ZhbHVlVGFnKSB7XG4gICAgICAgIC8vIGl0cyBhIGRpZmZlcmVudCB0YWcgbm93XG4gICAgICAgIGNvbnN0IGxpa2VUYWdzID0gaXNMaWtlVGFncyhuZXdUYWcsIGxhc3RTdXBwb3J0KTtcbiAgICAgICAgaWYgKCFsaWtlVGFncykge1xuICAgICAgICAgICAgZGVzdHJveVN1cHBvcnQobGFzdFN1cHBvcnQsIGdsb2JhbCk7XG4gICAgICAgICAgICBnZXROZXdHbG9iYWwoY29udGV4dEl0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuIDc7IC8vICd0YWctc3dhcCdcbiAgICAgICAgfVxuICAgICAgICAvLyBhbHdheXMgY2F1c2UgYSByZWRyYXcgb2Ygc3RhdGljIHRhZ3MgKHdhcyBmYWxzZSlcbiAgICAgICAgdHJ5VXBkYXRlVG9UYWcoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBsYXN0U3VwcG9ydCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBpc1RhZyA9IG5ld1ZhbHVlPy50YWdKc1R5cGU7XG4gICAgaWYgKGlzVGFnKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gY29udGV4dEl0ZW0uc3RhdGU7XG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBzdGF0ZS5uZXdlc3Q7XG4gICAgICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IHN1cHBvcnQub3duZXJTdXBwb3J0O1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0cnlVcGRhdGVUb1RhZyhjb250ZXh0SXRlbSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIGNvbnN0IGRvTm90UmVkcmF3ID0gcmVzdWx0ID09PSB0cnVlO1xuICAgICAgICBpZiAoZG9Ob3RSZWRyYXcpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiA4ODsgLy8gaXRzIHNhbWUgdGFnIHdpdGggbmV3IHZhbHVlc1xuICAgIH1cbiAgICBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0oY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiA4OyAvLyAnbm8tbG9uZ2VyLXRhZydcbn1cbiIsImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9zdWJqZWN0L1N1YmplY3QuY2xhc3MuanMnO1xuaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSAnLi4vdGFnSnNWYXJzL3ZhbHVlVG9UYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYWRkT25lQ29udGV4dCh2YWx1ZSwgY29udGV4dHMsIHdpdGhpbk93bmVyRWxlbWVudCwgcGFyZW50Q29udGV4dCkge1xuICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgICAgICB0YWdKc1ZhcjogdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKSxcbiAgICAgICAgd2l0aGluT3duZXJFbGVtZW50LFxuICAgICAgICBwYXJlbnRDb250ZXh0LFxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgd2l0aCBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2MTgwMlswXSlcbiAgICAgICAgLy8gdmFsdWVJbmRleDogY29udGV4dHM/Lmxlbmd0aCB8fCAtMSwgLy8gd2hlbiAtMSBpdHMgYSByYXcgYm9sdCB2YWx1ZVxuICAgICAgICB2YWx1ZUluZGV4OiBjb250ZXh0cy5sZW5ndGhcbiAgICB9O1xuICAgIGNvbnRleHRzLnB1c2goY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M2MTgwMjogW1tdXSB9O1xuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgcGFpbnRBcHBlbmQsIHBhaW50QXBwZW5kcywgcGFpbnRCZWZvcmUsIHBhaW50Q29tbWFuZHMgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBhZGRPbmVDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3JlbmRlci9hZGRPbmVDb250ZXh0LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gXCIuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzXCI7XG5pbXBvcnQgeyBkb21Qcm9jZXNzQ29udGV4dEl0ZW0gfSBmcm9tIFwiLi9kb21Qcm9jZXNzQ29udGV4dEl0ZW0uZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hEeW5hbWljRG9tKHZhbHVlLCBjb250ZXh0cywgc3VwcG9ydCwgLy8gb3duZXJcbnBhcmVudENvbnRleHQsIGRlcHRoLCAvLyB1c2VkIHRvIGluZGljYXRlIGlmIHZhcmlhYmxlIGxpdmVzIHdpdGhpbiBhbiBvd25lcidzIGVsZW1lbnRcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBtYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlbXB0eSk7XG4gICAgY29uc3QgaXNXaXRoaW5Pd25lckVsZW1lbnQgPSBkZXB0aCA+IDA7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBhZGRPbmVDb250ZXh0KHZhbHVlLCBjb250ZXh0cywgaXNXaXRoaW5Pd25lckVsZW1lbnQsIHBhcmVudENvbnRleHQpO1xuICAgIGNvbnRleHRJdGVtLnBsYWNlaG9sZGVyID0gbWFya2VyO1xuICAgIGNvbnRleHRJdGVtLmVsZW1lbnQgPSBhcHBlbmRUbztcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIG1hcmtlcl1dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhaW50Q29tbWFuZHMucHVzaChbXG4gICAgICAgICAgICBwYWludEJlZm9yZSwgW2luc2VydEJlZm9yZSwgbWFya2VyLCAnYXR0YWNoRHluYW1pY0RvbS5hdHRhY2hEeW5hbWljRG9tJ11cbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGRvbVByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgc3VwcG9ydCwgY29udGV4dEl0ZW0sIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGhvd1RvU2V0U3RhbmRBbG9uZUF0dHIsIHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSB9IGZyb20gXCIuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZSB9IGZyb20gXCIuLi9hdHRyaWJ1dGVzL3Byb2Nlc3NBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlQXJyYXkoYXR0cnMsIHZhbHVlcywgZG9tRWxlbWVudCwgc3VwcG9ydCwgXG4vLyBjb250ZXh0czogQ29udGV4dEl0ZW1bXSxcbnBhcmVudENvbnRleHQsIGF0dHJpYnV0ZUNvbnRleHRzKSB7XG4gICAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJzKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBhdHRyWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJbMV07XG4gICAgICAgIGNvbnN0IGlzU3BlY2lhbCA9IGF0dHJbMl0gfHwgZmFsc2U7XG4gICAgICAgIGxldCBob3dUb1NldCA9IGF0dHIubGVuZ3RoID4gMSA/IHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSA6IGhvd1RvU2V0U3RhbmRBbG9uZUF0dHI7XG4gICAgICAgIGlmIChhdHRyWzNdKSB7XG4gICAgICAgICAgICBob3dUb1NldCA9IGF0dHJbM107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dHMgPSBzdXBwb3J0LmNvbnRleHQuY29udGV4dHM7XG4gICAgICAgIGNvbnN0IG5ld0NvbnRleHQgPSBwcm9jZXNzQXR0cmlidXRlKG5hbWUsIHZhbHVlLCB2YWx1ZXMsIGRvbUVsZW1lbnQsIHN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0cywgcGFyZW50Q29udGV4dCwgaXNTcGVjaWFsKTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgYXR0cmlidXRlQ29udGV4dHMucHVzaChuZXdDb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IHBhaW50QXBwZW5kcywgcGFpbnRBcHBlbmQsIHBhaW50Q29tbWFuZHMsIHBhaW50QmVmb3JlIH0gZnJvbSBcIi4uL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBwcm9jZXNzQXR0cmlidXRlQXJyYXkgfSBmcm9tIFwiLi9wcm9jZXNzQXR0cmlidXRlQXJyYXkuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hEb21FbGVtZW50KGRvbUVsZW1lbnQsIG5vZGUsIHZhbHVlcywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZUNvbnRleHRzID0gW107XG4gICAgLy8gYXR0cmlidXRlcyB0aGF0IG1heSBlZmZlY3Qgc3R5bGUsIGNvbWUgZmlyc3QgZm9yIHBlcmZvcm1hbmNlXG4gICAgaWYgKG5vZGUuYXQpIHtcbiAgICAgICAgcHJvY2Vzc0F0dHJpYnV0ZUFycmF5KG5vZGUuYXQsIHZhbHVlcywgZG9tRWxlbWVudCwgc3VwcG9ydCwgXG4gICAgICAgIC8vIGNvbnRleHRzLFxuICAgICAgICBwYXJlbnRDb250ZXh0LCBhdHRyaWJ1dGVDb250ZXh0cyk7XG4gICAgfVxuICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgZG9tRWxlbWVudCwgJ2FwcGVuZFRvQXR0YWNoRG9tRWxlbWVudCddXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYWludENvbW1hbmRzLnB1c2goW3BhaW50QmVmb3JlLCBbaW5zZXJ0QmVmb3JlLCBkb21FbGVtZW50LCAnaW5zZXJ0QmVmb3JlQXR0YWNoRG9tRWxlbWVudCddXSk7XG4gICAgfVxuICAgIHJldHVybiBhdHRyaWJ1dGVDb250ZXh0cztcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZEVsZW1lbnRTdHJpbmcsIHBhaW50QXBwZW5kcywgcGFpbnRCZWZvcmVFbGVtZW50U3RyaW5nLCBwYWludENvbW1hbmRzIH0gZnJvbSBcIi4uL3BhaW50LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gXCIuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzXCI7XG5pbXBvcnQgeyBhdHRhY2hEeW5hbWljRG9tIH0gZnJvbSBcIi4uLy4uL2ludGVycG9sYXRpb25zL29wdGltaXplcnMvYXR0YWNoRHluYW1pY0RvbS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgYXR0YWNoRG9tRWxlbWVudCB9IGZyb20gXCIuL2F0dGFjaERvbUVsZW1lbnQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwiLi4vLi4vc3ViamVjdC9TdWJqZWN0LmNsYXNzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoRG9tRWxlbWVudHMobm9kZXMsIHZhbHVlcywgc3VwcG9ydCwgcGFyZW50Q29udGV4dCwgZGVwdGgsIC8vIHVzZWQgdG8ga25vdyBpZiBkeW5hbWljIHZhcmlhYmxlcyBsaXZlIHdpdGhpbiBwYXJlbnQgb3duZXIgdGFnL3N1cHBvcnRcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBjb250ZXh0cyA9IHN1cHBvcnQuY29udGV4dC5jb250ZXh0cztcbiAgICBjb25zdCBkb20gPSBbXTtcbiAgICBpZiAoYXBwZW5kVG8gJiYgaW5zZXJ0QmVmb3JlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5zZXJ0QmVmb3JlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZW1wdHkpO1xuICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgaW5zZXJ0QmVmb3JlXV0pO1xuICAgICAgICBhcHBlbmRUbyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gbG9vcCBtYXAgb2YgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGJlIHB1dCBkb3duIG9uIGRvY3VtZW50XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG5vZGVzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaW5kZXhdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG5vZGUudjtcbiAgICAgICAgY29uc3QgaXNOdW0gPSAhaXNOYU4odmFsdWUpO1xuICAgICAgICBpZiAoaXNOdW0pIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlSW5kZXggPSBjb250ZXh0cy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1t2YWx1ZUluZGV4XTtcbiAgICAgICAgICAgIGF0dGFjaER5bmFtaWNEb20odmFsdWUsIGNvbnRleHRzLCBzdXBwb3J0LCBwYXJlbnRDb250ZXh0LCBkZXB0aCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdOb2RlID0ge307IC8vIERvbU9iamVjdFRleHRcbiAgICAgICAgZG9tLnB1c2gobmV3Tm9kZSk7XG4gICAgICAgIGlmIChub2RlLm5uID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIGF0dGFjaERvbVRleHQobmV3Tm9kZSwgbm9kZSwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb21FbGVtZW50ID0gbmV3Tm9kZS5kb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlLm5uKTtcbiAgICAgICAgLy8gQ3JlYXRlIHBhcmVudCBjb250ZXh0IGZvciBhdHRyaWJ1dGVzIGZpcnN0XG4gICAgICAgIGNvbnN0IG5ld1BhcmVudENvbnRleHQgPSB7XG4gICAgICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgICAgIGlzQXR0cnM6IHRydWUsXG4gICAgICAgICAgICBlbGVtZW50OiBkb21FbGVtZW50LFxuICAgICAgICAgICAgcGFyZW50Q29udGV4dCxcbiAgICAgICAgICAgIGNvbnRleHRzOiBbXSxcbiAgICAgICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgICAgICAgICAgdGFnSnNWYXI6IHtcbiAgICAgICAgICAgICAgICB0YWdKc1R5cGU6ICduZXctcGFyZW50LWNvbnRleHQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIC8vIG9uZSBzaW5nbGUgaHRtbCBlbGVtZW50LiBUaGlzIGlzIHdoZXJlIGF0dHJpYnV0ZSBwcm9jZXNzaW5nIHRha2VzIHBsYWNlXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUNvbnRleHRzID0gYXR0YWNoRG9tRWxlbWVudChkb21FbGVtZW50LCBub2RlLCB2YWx1ZXMsIHN1cHBvcnQsIG5ld1BhcmVudENvbnRleHQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpO1xuICAgICAgICAvLyBVcGRhdGUgcGFyZW50IGNvbnRleHQgd2l0aCBlbGVtZW50IGFuZCBhdHRyaWJ1dGUgY29udGV4dHNcbiAgICAgICAgbmV3UGFyZW50Q29udGV4dC5lbGVtZW50ID0gZG9tRWxlbWVudDtcbiAgICAgICAgbmV3UGFyZW50Q29udGV4dC5jb250ZXh0cyA9IGF0dHJpYnV0ZUNvbnRleHRzO1xuICAgICAgICBpZiAobm9kZS5jaCkge1xuICAgICAgICAgICAgbmV3Tm9kZS5jaCA9IGF0dGFjaERvbUVsZW1lbnRzKG5vZGUuY2gsIHZhbHVlcywgc3VwcG9ydCwgbmV3UGFyZW50Q29udGV4dCwgXG4gICAgICAgICAgICAvLyBjb250ZXh0cyxcbiAgICAgICAgICAgIGRlcHRoICsgMSwgZG9tRWxlbWVudCwgaW5zZXJ0QmVmb3JlKS5kb207XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgZG9tLCBjb250ZXh0cyB9O1xufVxuZnVuY3Rpb24gYXR0YWNoRG9tVGV4dChuZXdOb2RlLCBub2RlLCBvd25lciwgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgdGV4dE5vZGUgPSBuZXdOb2RlO1xuICAgIGNvbnN0IHN0cmluZyA9IHRleHROb2RlLnRjID0gbm9kZS50YztcbiAgICBpZiAob3duZXIpIHtcbiAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kRWxlbWVudFN0cmluZywgW293bmVyLCBzdHJpbmcsIGZ1bmN0aW9uIGFmdGVyQXBwZW5Eb21UZXh0KGVsbSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0Tm9kZS5kb21FbGVtZW50ID0gZWxtO1xuICAgICAgICAgICAgICAgIH1dXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZUVsZW1lbnRTdHJpbmcsIFtpbnNlcnRCZWZvcmUsIHN0cmluZywgZnVuY3Rpb24gYWZ0ZXJJbnNlcnREb21UZXh0KGVsbSkge1xuICAgICAgICAgICAgICAgIHRleHROb2RlLmRvbUVsZW1lbnQgPSBlbG07XG4gICAgICAgICAgICB9XV0pO1xufVxuIiwiaW1wb3J0IHsgYXR0YWNoRG9tRWxlbWVudHMgfSBmcm9tICcuL2RvbS9hdHRhY2hEb21FbGVtZW50cy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXREb21NZXRhIH0gZnJvbSAnLi4vdGFnL2RvbU1ldGFDb2xsZWN0b3IuanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgcGFpbnRpbmcgfSBmcm9tICcuL3BhaW50LmZ1bmN0aW9uLmpzJztcbi8qKiBGdW5jdGlvbiB0aGF0IGtpY2tzIG9mZiBhY3R1YWxseSBwdXR0aW5nIHRhZ3MgZG93biBhcyBIVE1MIGVsZW1lbnRzICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIC8vIFRPRE8gdGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgY29tcG9uZW50cyBhbmQgbm90IGJhc2ljIHRhZ3NcbiAgICBzdWJqZWN0LnN0YXRlID0gc3ViamVjdC5zdGF0ZSB8fCB7fTtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBzdWJqZWN0LnN0YXRlO1xuICAgIHN0YXRlTWV0YS5vbGRlc3QgPSBzdXBwb3J0O1xuICAgIHN0YXRlTWV0YS5uZXdlc3QgPSBzdXBwb3J0O1xuICAgIHN1YmplY3Quc3RhdGUub2xkZXIgPSBzdWJqZWN0LnN0YXRlLm5ld2VyO1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgY29uc3QgcmVzdWx0ID0gYXR0YWNoSHRtbERvbU1ldGEoc3VwcG9ydCwgc3VwcG9ydC5jb250ZXh0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICBzdWJqZWN0Lmh0bWxEb21NZXRhID0gcmVzdWx0LmRvbTtcbiAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgIC8vIHJldHVybiBmcmFnbWVudFxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBhdHRhY2hIdG1sRG9tTWV0YShzdXBwb3J0LCBwYXJlbnRDb250ZXh0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgY29uc3QgZG9tTWV0YSA9IGxvYWREb21NZXRhKHN1cHBvcnQpO1xuICAgIGNvbnN0IHRoaXNUYWcgPSBzdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpc1RhZy52YWx1ZXM7XG4gICAgY29uc3QgY29udGV4dHMgPSBbXTtcbiAgICBzdXBwb3J0LmNvbnRleHQuY29udGV4dHMgPSBjb250ZXh0cztcbiAgICBjb25zdCByZXN1bHQgPSBhdHRhY2hEb21FbGVtZW50cyhkb21NZXRhLCB2YWx1ZXMsIHN1cHBvcnQsIHBhcmVudENvbnRleHQsIFxuICAgIC8vIGNvbnRleHRzLFxuICAgIDAsIC8vIGRlcHRoXG4gICAgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKiBFeHRyYWN0cyB2YXJpYWJsZXMgZnJvbSBzdXBwb3J0IGluIG9yZGVyIHRvIG1lcmdlIHN0cmluZ3MgJiB2YWx1ZXMgd2l0aCBkb20gbWV0YSBpbnRvIGEgaHRtbCBhcnJheSB0cmVlICovXG5mdW5jdGlvbiBsb2FkRG9tTWV0YShzdXBwb3J0KSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0gc3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgY29uc3QgdGhpc1RhZyA9IHRlbXBsYXRlci50YWc7XG4gICAgaWYgKHRoaXNUYWcudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLmRvbSkge1xuICAgICAgICByZXR1cm4gdGhpc1RhZy5kb207XG4gICAgfVxuICAgIGNvbnN0IHN0cmluZ3MgPSB0aGlzVGFnLnN0cmluZ3M7XG4gICAgcmV0dXJuIGdldERvbU1ldGEoc3RyaW5ncywgdGhpc1RhZy52YWx1ZXMpO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlSHRtbFN1cHBvcnQgfSBmcm9tICcuLi8uLi90YWcvY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4uLy4uL3RhZy9jaGVja1RhZ1ZhbHVlQ2hhbmdlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uL2J1aWxkQmVmb3JlRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnSW5pdCB9IGZyb20gJy4uLy4uL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG4vKiogV2hlbiBmaXJzdCB0aW1lIHJlbmRlciwgYWRkcyB0byBvd25lciBjaGlsZFRhZ3NcbiAqIFVzZWQgZm9yIEJPVEggaW5zZXJ0cyAmIHVwZGF0ZXMgdG8gdmFsdWVzIHRoYXQgd2VyZSBzb21ldGhpbmcgZWxzZVxuICogSW50ZW5kZWQgdXNlIG9ubHkgZm9yIHVwZGF0ZXNcbiovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RhZyhvd25lclN1cHBvcnQsIC8vIG93bmVyXG5jb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBjb250ZXh0SXRlbS5zdGF0ZS5uZXdlc3Q7XG4gICAgY29uc3QgcGggPSBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcjtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgdW5kZWZpbmVkLCBwaCk7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdGFnRmFrZVRlbXBsYXRlcih0YWcpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBnZXRGYWtlVGVtcGxhdGVyKCk7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHRhZztcbiAgICB0YWcudGVtcGxhdGVyID0gdGVtcGxhdGVyO1xuICAgIHJldHVybiB0ZW1wbGF0ZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmFrZVRlbXBsYXRlcigpIHtcbiAgICBjb25zdCBmYWtlID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMudGVtcGxhdGVyLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1RhZ0luaXQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb3BXYXRjaDogJ3NoYWxsb3cnLFxuICAgICAgICBrZXk6IGJsYW5rSGFuZGxlcixcbiAgICB9O1xuICAgIHJldHVybiBmYWtlO1xufVxuLyoqIENyZWF0ZSBzdXBwb3J0IGZvciBhIHRhZyBjb21wb25lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIHN1YmplY3QpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gY3JlYXRlSHRtbFN1cHBvcnQodGVtcGxhdGVyLCBvd25lclN1cHBvcnQsIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBzdWJqZWN0LmNvbnRleHRzID0gW107XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBidWlsZEJlZm9yZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvYnVpbGRCZWZvcmVFbGVtZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50QXBwZW5kLCBwYWludEFwcGVuZHMsIHBhaW50QmVmb3JlLCBwYWludENvbW1hbmRzIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IG5ld1N1cHBvcnRCeVRlbXBsYXRlciB9IGZyb20gJy4uLy4uL3JlbmRlci91cGRhdGUvcHJvY2Vzc1RhZy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc05ld1N1YmplY3RUYWcodGVtcGxhdGVyLCBzdWJqZWN0LCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbm93bmVyU3VwcG9ydCwgLy8gb3duZXJcbmFwcGVuZFRvLCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gbmV3U3VwcG9ydEJ5VGVtcGxhdGVyKHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICBjb25zdCByZXN1bHQgPSBidWlsZEJlZm9yZUVsZW1lbnQoc3VwcG9ydCwgYXBwZW5kVG8sIGFwcGVuZFRvID8gdW5kZWZpbmVkIDogaW5zZXJ0QmVmb3JlKTtcbiAgICBmb3IgKGNvbnN0IGRvbSBvZiByZXN1bHQuZG9tKSB7XG4gICAgICAgIGlmIChkb20ubWFya2VyKSB7XG4gICAgICAgICAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgZG9tLm1hcmtlcl1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhaW50Q29tbWFuZHMucHVzaChbcGFpbnRCZWZvcmUsIFtpbnNlcnRCZWZvcmUsIGRvbS5tYXJrZXIsICdzdWJNYXJrZXInXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkb20uZG9tRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgICAgICAgICAgcGFpbnRBcHBlbmRzLnB1c2goW3BhaW50QXBwZW5kLCBbYXBwZW5kVG8sIGRvbS5kb21FbGVtZW50LCAnc3ViQXBwZW5kVG8nXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJlZm9yZSwgW2luc2VydEJlZm9yZSwgZG9tLmRvbUVsZW1lbnQsICdzdWJJbnNlcnRCZWZvcmUnXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgcHJvY2Vzc1RhZyB9IGZyb20gJy4uLy4uL3JlbmRlci91cGRhdGUvcHJvY2Vzc1RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTmV3U3ViamVjdFRhZyB9IGZyb20gJy4vcHJvY2Vzc05ld1N1YmplY3RUYWcuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWdJbml0KHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29udGV4dEl0ZW0uc3RhdGUgPSB7fTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NUYWcob3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSk7XG59XG4iLCJpbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tICcuL2ZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZS5mdW5jdGlvbi5qcyc7XG4vKiogQ2hlY2tzIGlmIHZhbHVlIGhhcyBjaGFuZ2VkIGJlZm9yZSB1cGRhdGluZy4gVXNlZCBmb3IgYWxsIHRhZyB2YWx1ZSB1cGRhdGVzLiBEZXRlcm1pbmVzIGlmIHZhbHVlIGNoYW5nZWQgc2luY2UgbGFzdCByZW5kZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIobmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgKytjb250ZXh0SXRlbS51cGRhdGVDb3VudDtcbiAgICAvLyBUT0RPOiBXaGVuIGEgdGFnLWNvbnZlcnNpb24gb2NjdXJzIHdlIHNob3VsZCBzd2FwIGEgZGlmZmVyZW50IHByb2Nlc3NVcGRhdGUgdGhhdCBvbmx5IHJ1bnMgdGhlIGNvZGUgYmVsb3dcbiAgICBjb25zdCB0YWdKc1R5cGUgPSBjb250ZXh0SXRlbS50YWdKc1Zhci50YWdKc1R5cGU7XG4gICAgaWYgKHRhZ0pzVHlwZSAmJiBbJ3RhZy1jb252ZXJzaW9uJywgJ2VsZW1lbnQnXS5pbmNsdWRlcyh0YWdKc1R5cGUpKSB7XG4gICAgICAgIC8vIGNhbGxzIHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlXG4gICAgICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIFtdKTtcbiAgICAgICAgY29udGV4dEl0ZW0udmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIERvIG5vdCBjb250aW51ZSBpZiB0aGUgdmFsdWUgaXMganVzdCB0aGUgc2FtZVxuICAgIGlmIChuZXdWYWx1ZSA9PT0gY29udGV4dEl0ZW0udmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUoY29udGV4dEl0ZW0sIG5ld1ZhbHVlLCBvd25lclN1cHBvcnQpO1xufVxuIiwiaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHByb2Nlc3NUYWdJbml0IH0gZnJvbSAnLi91cGRhdGUvcHJvY2Vzc1RhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4vY2hlY2tUYWdWYWx1ZUNoYW5nZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0gfSBmcm9tICcuL2Rlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRlbXBsYXRlclJlc3VsdChwcm9wV2F0Y2gsIHByb3BzKSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMudGVtcGxhdGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1RhZ0luaXQsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcixcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlLFxuICAgICAgICBkZXN0cm95OiBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0sXG4gICAgICAgIHByb3BXYXRjaCxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIGtleTogZnVuY3Rpb24ga2V5VGVtcGxhdGUoYXJyYXlWYWx1ZSkge1xuICAgICAgICAgICAgdGVtcGxhdGVyLmFycmF5VmFsdWUgPSBhcnJheVZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgbWF0Y2hlc0luamVjdGlvbihpbmplY3QpIHtcbiAgICAgICAgICAgIC8vIEZvciB0ZW1wbGF0ZXJzLCBjaGVjayBpZiB0aGUgd3JhcHBlciBtYXRjaGVzXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVyLndyYXBwZXIgPT09IGluamVjdCB8fCB0ZW1wbGF0ZXIud3JhcHBlcj8ub3JpZ2luYWwgPT09IGluamVjdD8ub3JpZ2luYWw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0ZW1wbGF0ZXI7XG59XG4iLCJleHBvcnQgY29uc3QgdGFncyA9IFtdO1xuIiwiaW1wb3J0IHsgaXNJbmxpbmVIdG1sLCByZW5kZXJJbmxpbmVIdG1sIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyRXhpc3RpbmdTdXBwb3J0IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3JlbmRlckV4aXN0aW5nVGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzYWZlUmVuZGVyU3VwcG9ydChuZXdlc3QpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3ZXN0LmNvbnRleHQ7XG4gICAgY29uc3QgaXNJbmxpbmUgPSBpc0lubGluZUh0bWwobmV3ZXN0LnRlbXBsYXRlcik7XG4gICAgaWYgKGlzSW5saW5lKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJJbmxpbmVIdG1sKG5ld2VzdCk7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJFeGlzdGluZ1N1cHBvcnQobmV3ZXN0LCBuZXdlc3QsIHN1YmplY3QpO1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCB9IGZyb20gJy4uL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzQXJyYXksIGlzU3RhdGljVGFnIH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4uLy4uL3N0YXRlL2luZGV4LmpzJztcbmltcG9ydCB7IHNhZmVSZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi9zYWZlUmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2FzdFByb3BzKHByb3BzLCBuZXdTdXBwb3J0LCBkZXB0aCkge1xuICAgIHJldHVybiBwcm9wcy5tYXAoZnVuY3Rpb24gZWFjaENhc3RQcm9wKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGFsdGVyUHJvcChwcm9wLCBuZXdTdXBwb3J0Lm93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgZGVwdGgpO1xuICAgIH0pO1xufVxuLyogVXNlZCB0byByZXdyaXRlIHByb3BzIHRoYXQgYXJlIGZ1bmN0aW9ucy4gV2hlbiB0aGV5IGFyZSBjYWxsZWQgaXQgc2hvdWxkIGNhdXNlIHBhcmVudCByZW5kZXJpbmcgKi9cbmZ1bmN0aW9uIGFsdGVyUHJvcChwcm9wLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoKSB7XG4gICAgaWYgKGlzU3RhdGljVGFnKHByb3ApIHx8ICFwcm9wKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cbiAgICBpZiAoIW93bmVyU3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gcHJvcDsgLy8gbm8gb25lIGFib3ZlIG1lXG4gICAgfVxuICAgIHJldHVybiBjaGVja1Byb3AocHJvcCwgb3duZXJTdXBwb3J0LCBuZXdTdXBwb3J0LCBkZXB0aCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQcm9wKHZhbHVlLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoLCBvd25lcikge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUudGFnSnNUeXBlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIGlmIChkZXB0aCA8PSAxKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHdyYXAgZnVuY3Rpb24gYXQgZGVwdGggMCBhbmQgMVxuICAgICAgICAgICAgcmV0dXJuIGdldFByb3BXcmFwKHZhbHVlLCBvd25lciwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChkZXB0aCA9PT0gZGVlcENvbXBhcmVEZXB0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHNraXAgPSBpc1NraXBQcm9wVmFsdWUodmFsdWUpO1xuICAgIGlmIChza2lwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTsgLy8gbm8gY2hpbGRyZW4gdG8gY3Jhd2wgdGhyb3VnaFxuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQXJyYXlQcm9wKHZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrT2JqZWN0UHJvcCh2YWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCk7XG59XG5mdW5jdGlvbiBjaGVja0FycmF5UHJvcCh2YWx1ZSwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCkge1xuICAgIGZvciAobGV0IGluZGV4ID0gdmFsdWUubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW2luZGV4XTtcbiAgICAgICAgdmFsdWVbaW5kZXhdID0gY2hlY2tQcm9wKHN1YlZhbHVlLCBvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIGRlcHRoICsgMSwgdmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIChzdWJWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChzdWJWYWx1ZS5tZW0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyQ2hlY2tQcm9wKGRlcHRoICsgMSwgaW5kZXgsIHN1YlZhbHVlLCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY2hlY2tPYmplY3RQcm9wKHZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Yga2V5cykge1xuICAgICAgICBjb25zdCBzdWJWYWx1ZSA9IHZhbHVlW25hbWVdO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVja1Byb3Aoc3ViVmFsdWUsIG93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydCwgZGVwdGggKyAxLCB2YWx1ZSk7XG4gICAgICAgIGNvbnN0IG5ld1N1YlZhbHVlID0gdmFsdWVbbmFtZV07XG4gICAgICAgIGlmIChuZXdTdWJWYWx1ZSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRzZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBuYW1lKTtcbiAgICAgICAgY29uc3QgaGFzU2V0dGVyID0gZ2V0c2V0Py5nZXQgfHwgZ2V0c2V0Py5zZXQ7XG4gICAgICAgIGlmIChoYXNTZXR0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlW25hbWVdID0gcmVzdWx0O1xuICAgICAgICBpZiAodHlwZW9mIChyZXN1bHQpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3ViVmFsdWUubWVtKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlckNoZWNrUHJvcChkZXB0aCArIDEsIG5hbWUsIHN1YlZhbHVlLCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gYWZ0ZXJDaGVja1Byb3AoZGVwdGgsIGluZGV4LCBvcmlnaW5hbFZhbHVlLCBuZXdQcm9wLCBuZXdTdXBwb3J0KSB7XG4gICAgLy8gcmVzdG9yZSBvYmplY3QgdG8gaGF2ZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiBkZXN0cm95XG4gICAgaWYgKGRlcHRoID4gMCkge1xuICAgICAgICBuZXdQcm9wW2luZGV4XS5zdWJzY3JpcHRpb24gPSBuZXdTdXBwb3J0LmNvbnRleHQuZGVzdHJveSQudG9DYWxsYmFjayhmdW5jdGlvbiBhbHRlckNoZWNrUHJvY2Vzc29yKCkge1xuICAgICAgICAgICAgbmV3UHJvcFtpbmRleF0gPSBvcmlnaW5hbFZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcFdyYXAodmFsdWUsIG93bmVyLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBhbHJlYWR5ID0gdmFsdWUubWVtO1xuICAgIC8vIGFscmVhZHkgcHJldmlvdXNseSBjb252ZXJ0ZWQgYnkgYSBwYXJlbnQ/XG4gICAgaWYgKGFscmVhZHkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCB3cmFwID0gZnVuY3Rpb24gd3JhcFJ1bm5lciguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1Byb3BPd25lcih3cmFwLm1lbSwgb3duZXIsIGFyZ3MsIG93bmVyU3VwcG9ydCk7XG4gICAgfTsgLy8gd2hhdCBnZXRzIGNhbGxlZCBjYW4gc3dpdGNoIG92ZXIgcGFyZW50IHN0YXRlIGNoYW5nZXNcbiAgICB3cmFwLm9yaWdpbmFsID0gdmFsdWU7XG4gICAgd3JhcC5tZW0gPSB2YWx1ZTtcbiAgICAvLyBjb3B5IGRhdGEgcHJvcGVydGllcyB0aGF0IG1heWJlIG9uIHNvdXJjZSBmdW5jdGlvblxuICAgIE9iamVjdC5hc3NpZ24od3JhcCwgdmFsdWUpO1xuICAgIHJldHVybiB3cmFwO1xufVxuLyoqIEZ1bmN0aW9uIHNoYXJlZCBieSBhbHRlclByb3BzKCkgYW5kIHVwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50Li4uIFRPRE86IE1heSB3YW50IHRvIGhhdmUgdG8gZnVuY3Rpb25zIHRvIHJlZHVjZSBjeWNsZSBjaGVja2luZz8gICovXG5leHBvcnQgZnVuY3Rpb24gY2FsbGJhY2tQcm9wT3duZXIodG9DYWxsLCAvLyBvcmlnaW5hbCBmdW5jdGlvblxub3duZXIsIGNhbGxXaXRoLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBvd25lckNvbnRleHQgPSBvd25lclN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBuZXdlc3QgPSBvd25lckNvbnRleHQuc3RhdGU/Lm5ld2VzdCB8fCBvd25lclN1cHBvcnQ7XG4gICAgY29uc3Qgc3VwcG9ydEluQ3ljbGUgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGNvbnN0IG5vQ3ljbGUgPSBzdXBwb3J0SW5DeWNsZSA9PT0gdW5kZWZpbmVkO1xuICAgIC8vIGFjdHVhbCBmdW5jdGlvbiBjYWxsIHRvIG9yaWdpbmFsIG1ldGhvZFxuICAgIGNvbnN0IGNhbGxiYWNrUmVzdWx0ID0gdG9DYWxsLmFwcGx5KG93bmVyLCBjYWxsV2l0aCk7XG4gICAgY29uc3QgcnVuID0gZnVuY3Rpb24gcHJvcENhbGxiYWNrUHJvY2Vzc29yKCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gbmV3ZXN0LmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgICAgICBpZiAoY29udGV4dC5sb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFja1Jlc3VsdDsgLy8gY3VycmVudGx5IGluIHRoZSBtaWRkbGUgb2YgcmVuZGVyaW5nXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUoXG4gICAgICAgICAgICAgIGNvbnRleHQudmFsdWUsXG4gICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgIG93bmVyU3VwcG9ydCxcbiAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICApXG4gICAgICAqL1xuICAgICAgICAgICAgb3duZXJDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUob3duZXJDb250ZXh0LnZhbHVlLCBvd25lckNvbnRleHQsIG93bmVyU3VwcG9ydCwgW10pO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrUmVzdWx0OyAvLyBjdXJyZW50bHkgaW4gdGhlIG1pZGRsZSBvZiByZW5kZXJpbmdcbiAgICAgICAgfVxuICAgICAgICBzYWZlUmVuZGVyU3VwcG9ydChuZXdlc3QpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tSZXN1bHQ7XG4gICAgfTtcbiAgICBpZiAobm9DeWNsZSkge1xuICAgICAgICByZXR1cm4gcnVuKCk7XG4gICAgfVxuICAgIHNldFVzZU1lbW9yeS50YWdDbG9zZWQkLnRvQ2FsbGJhY2socnVuKTtcbiAgICByZXR1cm4gY2FsbGJhY2tSZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTa2lwUHJvcFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiAodmFsdWUpICE9PSBCYXNpY1R5cGVzLm9iamVjdCB8fCAhdmFsdWUgfHwgdmFsdWUudGFnSnNUeXBlO1xufVxuIiwiaW1wb3J0IHsgQmFzaWNUeXBlcywgVmFsdWVUeXBlcyB9IGZyb20gJy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vc3RhdGUvc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVXcmFwKHRlbXBsYXRlciwgcmVzdWx0LCB1c2VTdXBwb3J0LCBjYXN0ZWRQcm9wcykge1xuICAgIGNvbnN0IG9yaWdpbmFsRnVuY3Rpb24gPSByZXN1bHQub3JpZ2luYWw7IC8vIChpbm5lclRhZ1dyYXAgYXMgYW55KS5vcmlnaW5hbCBhcyB1bmtub3duIGFzIFRhZ0NvbXBvbmVudFxuICAgIGNvbnN0IHN0YXRlbGVzcyA9IHRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXI7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKHVzZVN1cHBvcnQpO1xuICAgIGxldCB0YWc7XG4gICAgaWYgKHN0YXRlbGVzcykge1xuICAgICAgICB0YWcgPSB0ZW1wbGF0ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhZyA9IG9yaWdpbmFsRnVuY3Rpb24oLi4uY2FzdGVkUHJvcHMpO1xuICAgICAgICAvLyB0YWcgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uIGV4cGVjdGVkIHRvIGJlIGNhbGxlZFxuICAgICAgICBpZiAodHlwZW9mICh0YWcpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uICYmIHRhZy50YWdKc1R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGFnID0gdGFnKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXNlU3VwcG9ydC5jb250ZXh0LnJldHVyblZhbHVlID0gdGFnO1xuICAgIHRhZy50ZW1wbGF0ZXIgPSB0ZW1wbGF0ZXI7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHRhZztcbiAgICB1c2VTdXBwb3J0LmNvbnRleHQuc3RhdGUubmV3ZXIgPSB7IC4uLmNvbmZpZyB9O1xuICAgIHJldHVybiB1c2VTdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgZ2V0QmFzZVN1cHBvcnQsIHVwZ3JhZGVCYXNlVG9TdXBwb3J0IH0gZnJvbSAnLi9jcmVhdGVIdG1sU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIC8vIGF0IHJ1bnRpbWUgcmVuZGVyaW5nIG9mIGEgdGFnLCBpdCBuZWVkcyB0byBiZSBtYXJyaWVkIHRvIGEgbmV3IFN1cHBvcnQoKVxub3duZXJTdXBwb3J0LCBhcHBTdXBwb3J0LCBzdWJqZWN0LCBjYXN0ZWRQcm9wcykge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRCYXNlU3VwcG9ydCh0ZW1wbGF0ZXIsIHN1YmplY3QsIGNhc3RlZFByb3BzKTtcbiAgICBzdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG93bmVyU3VwcG9ydDtcbiAgICByZXR1cm4gdXBncmFkZUJhc2VUb1N1cHBvcnQodGVtcGxhdGVyLCBzdXBwb3J0LCBhcHBTdXBwb3J0LCBjYXN0ZWRQcm9wcyk7XG59XG4iLCJpbXBvcnQgeyBjYXN0UHJvcHMgfSBmcm9tICcuL3Byb3BzL2FsdGVyUHJvcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzeW5jRnVuY3Rpb25Qcm9wcyB9IGZyb20gJy4uL3JlbmRlci91cGRhdGUvdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZXhlY3V0ZVdyYXAgfSBmcm9tICcuLi9yZW5kZXIvZXhlY3V0ZVdyYXAuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlZXBDb21wYXJlRGVwdGgsIHNoYWxsb3dDb21wYXJlRGVwdGggfSBmcm9tICcuL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZVN1cHBvcnQgfSBmcm9tICcuL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuLyoqIGNyZWF0ZXMvcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2hlbiBjYWxsZWQgdGhlbiBjYWxscyB0aGUgb3JpZ2luYWwgY29tcG9uZW50IGZ1bmN0aW9uXG4gKiBHZXRzIHVzZWQgYXMgdGVtcGxhdGVyLndyYXBwZXIoKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFnV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCkge1xuICAgIC8vIHRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgYnkgdGFnZ2VkanNcbiAgICBjb25zdCB3cmFwcGVyID0gZnVuY3Rpb24gdGFnRnVuV3JhcChuZXdTdXBwb3J0LCBzdWJqZWN0LCBsYXN0U3VwcG9ydCAvLyBzdWJqZWN0Lmdsb2JhbC5uZXdlc3RcbiAgICApIHtcbiAgICAgICAgLy8gd3JhcCBhbnkgcHJvcCBmdW5jdGlvbnMgdGhhdCBhcmUgcGFzc2VkIGluXG4gICAgICAgIGNvbnN0IGNhc3RlZFByb3BzID0gZ2V0Q2FzdGVkUHJvcHModGVtcGxhdGVyLCBuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCk7XG4gICAgICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IG5ld1N1cHBvcnQub3duZXJTdXBwb3J0O1xuICAgICAgICBjb25zdCB1c2VTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgbmV3U3VwcG9ydC5hcHBTdXBwb3J0LCAvLyBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCBhcyBBbnlTdXBwb3J0LFxuICAgICAgICBzdWJqZWN0LCBjYXN0ZWRQcm9wcyk7XG4gICAgICAgIHJldHVybiBleGVjdXRlV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCwgdXNlU3VwcG9ydCwgY2FzdGVkUHJvcHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHdyYXBwZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FzdGVkUHJvcHModGVtcGxhdGVyLCBuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCkge1xuICAgIGNvbnN0IG1heERlcHRoID0gdGVtcGxhdGVyLnByb3BXYXRjaCA9PT0gUHJvcFdhdGNoZXMuREVFUCA/IGRlZXBDb21wYXJlRGVwdGggOiBzaGFsbG93Q29tcGFyZURlcHRoO1xuICAgIGNvbnN0IHByb3BzID0gdGVtcGxhdGVyLnByb3BzO1xuICAgIGNvbnN0IHByb3BzQ29uZmlnID0gbmV3U3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICAvLyBXaGVuIGRlZmluZWQsIHRoaXMgbXVzdCBiZSBhbiB1cGRhdGUgd2hlcmUgbXkgbmV3IHByb3BzIGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUgZm9yIG1lXG4gICAgbGV0IHByZUNhc3RlZFByb3BzID0gcHJvcHNDb25maWcuY2FzdFByb3BzO1xuICAgIGNvbnN0IGxhc3RQcm9wc0NvbmZpZyA9IGxhc3RTdXBwb3J0Py5wcm9wc0NvbmZpZztcbiAgICBjb25zdCBsYXN0Q2FzdFByb3BzID0gbGFzdFByb3BzQ29uZmlnPy5jYXN0UHJvcHM7XG4gICAgaWYgKGxhc3RDYXN0UHJvcHMpIHtcbiAgICAgICAgcHJvcHNDb25maWcuY2FzdFByb3BzID0gbGFzdENhc3RQcm9wcztcbiAgICAgICAgcHJlQ2FzdGVkUHJvcHMgPSBzeW5jRnVuY3Rpb25Qcm9wcyhuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCwgbGFzdFN1cHBvcnQub3duZXJTdXBwb3J0LCBwcm9wcywgbWF4RGVwdGgpO1xuICAgIH1cbiAgICBjb25zdCBjYXN0ZWRQcm9wcyA9IHByZUNhc3RlZFByb3BzIHx8IGNhc3RQcm9wcyhwcm9wcywgbmV3U3VwcG9ydCwgMCk7XG4gICAgcmV0dXJuIGNhc3RlZFByb3BzO1xufVxuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vc3RhdGUvc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuLyoqIENvbXBhcmVzIHN0YXRlcyBvZiBwcmV2aW91cyByZW5kZXJzXG4gKiBAcHJvcGVydHkgc3VwcG9ydCAtIFRoZSB3b3JrZmxvdyB0aGF0IHN1cHBvcnRzIGEgc2luZ2xlIHRhZ1xuICogQHByb3BlcnR5IG93bmVyU3VwcG9ydCAtIHVuZGVmaW5lZCB3aGVuIFwic3VwcG9ydFwiIGlzIHRoZSBhcHAgZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuQWZ0ZXJTdXBwb3J0UmVuZGVyKHN1cHBvcnQsIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHN1YmplY3QgPSBzdXBwb3J0LmNvbnRleHQ7XG4gICAgKytzdWJqZWN0LnJlbmRlckNvdW50O1xuICAgIHJ1bkFmdGVyUmVuZGVyKCk7XG4gICAgc2V0VXNlTWVtb3J5LnRhZ0Nsb3NlZCQubmV4dChvd25lclN1cHBvcnQpO1xufVxuLyoqIHJ1biBhZnRlciByZW5kZXJpbmcgYW55dGhpbmcgd2l0aCBzdGF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bkFmdGVyUmVuZGVyKGNvbnRleHQpIHtcbiAgICBzYXZlU3RhdGUoY29udGV4dCk7XG4gICAgLy8gVE9ETzogcHJvdmUgdGhpcyBpcyB3b3J0aCBoYXZpbmdcbiAgICAvLyBjaGVja1N0YXRlTWlzbWF0Y2goY29uZmlnLCBzdXBwb3J0KVxuICAgIGNsZWFyU3RhdGVDb25maWcoKTtcbiAgICAvLyBzZXRVc2VNZW1vcnkudGFnQ2xvc2VkJC5uZXh0KG93bmVyU3VwcG9ydClcbn1cbmZ1bmN0aW9uIHNhdmVTdGF0ZShjb250ZXh0KSB7XG4gICAgY29uc3QgY29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgIGNvbnN0IHN1YmplY3QgPSBjb250ZXh0IHx8IGNvbmZpZy5jb250ZXh0O1xuICAgIHN1YmplY3Quc3RhdGUgPSBzdWJqZWN0LnN0YXRlIHx8IHt9O1xuICAgIHN1YmplY3Quc3RhdGUubmV3ZXIgPSB7IC4uLmNvbmZpZyB9O1xuICAgIGNvbnN0IHN1cHBvcnQgPSBjb25maWcuc3VwcG9ydDtcbiAgICBzdWJqZWN0LnN0YXRlLm5ld2VzdCA9IHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTdGF0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgZGVsZXRlIGNvbmZpZy5wcmV2U3VwcG9ydDsgLy8gb25seSB0aGlzIG9uZSByZWFsbHkgbmVlZGVkXG4gICAgZGVsZXRlIGNvbmZpZy5zdXBwb3J0O1xuICAgIGRlbGV0ZSBjb25maWcuc3RhdGU7XG4gICAgZGVsZXRlIGNvbmZpZy5zdGF0ZXM7XG4gICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbn1cbiIsImltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvaW5kZXguanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL3RhZy9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXcmFwIH0gZnJvbSAnLi9leGVjdXRlV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBydW5BZnRlclN1cHBvcnRSZW5kZXIgfSBmcm9tICcuL3J1bkFmdGVyUmVuZGVyLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjYWxsVGFnKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCAvLyBjYXVzZXMgcmVzdGF0ZVxuY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgbGV0IHJlU3VwcG9ydDtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBuZXdTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICAvLyBORVcgVEFHIENSRUFURUQgSEVSRVxuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRlbXBsYXRlcjsgLy8gLndyYXBwZXIgYXMgYW55Ly8gfHwge29yaWdpbmFsOiB0ZW1wbGF0ZXJ9IGFzIGFueVxuICAgICAgICByZVN1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBuZXdTdXBwb3J0LmFwcFN1cHBvcnQsIC8vIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0IGFzIEFueVN1cHBvcnQsXG4gICAgICAgIGNvbnRleHQpO1xuICAgICAgICBleGVjdXRlV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCwgcmVTdXBwb3J0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGZ1bmN0aW9ucyB3cmFwcGVkIGluIHRhZygpXG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0ZW1wbGF0ZXIud3JhcHBlcjtcbiAgICAgICAgLy8gY2FsbHMgdGhlIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gZ2V0VGFnV3JhcCgpXG4gICAgICAgIHJlU3VwcG9ydCA9IHdyYXBwZXIobmV3U3VwcG9ydCwgY29udGV4dCwgcHJldlN1cHBvcnQpO1xuICAgIH1cbiAgICBydW5BZnRlclN1cHBvcnRSZW5kZXIocmVTdXBwb3J0LCBvd25lclN1cHBvcnQpO1xuICAgIHJlU3VwcG9ydC5vd25lclN1cHBvcnQgPSBuZXdTdXBwb3J0Lm93bmVyU3VwcG9ydDsgLy8gfHwgbGFzdE93bmVyU3VwcG9ydCkgYXMgQW55U3VwcG9ydFxuICAgIHJldHVybiByZVN1cHBvcnQ7XG59XG4iLCJpbXBvcnQgeyBpbml0U3RhdGUsIHJlU3RhdGVTdXBwb3J0IH0gZnJvbSAnLi4vc3RhdGUvc3RhdGUudXRpbHMuanMnO1xuaW1wb3J0IHsgY2FsbFRhZyB9IGZyb20gJy4vY2FsbFRhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlUmVuZGVyVGFnKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCAvLyBjYXVzZXMgcmVzdGF0ZVxuY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICBjb25zdCBwcmV2U3RhdGUgPSBzdGF0ZU1ldGEub2xkZXIuc3RhdGU7XG4gICAgcmVTdGF0ZVN1cHBvcnQobmV3U3VwcG9ydCwgcHJldlN1cHBvcnQsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIGNhbGxUYWcobmV3U3VwcG9ydCwgcHJldlN1cHBvcnQsIGNvbnRleHQsIG93bmVyU3VwcG9ydCk7XG59XG4vKiogVXNlZCBkdXJpbmcgZmlyc3QgcmVuZGVycyBvZiBhIHN1cHBvcnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdFRhZ1JlbmRlcihuZXdTdXBwb3J0LCBwcmV2U3VwcG9ydCwgLy8gY2F1c2VzIHJlc3RhdGVcbmNvbnRleHQsIG93bmVyU3VwcG9ydCkge1xuICAgIGluaXRTdGF0ZShuZXdTdXBwb3J0LmNvbnRleHQpO1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBjYWxsVGFnKG5ld1N1cHBvcnQsIHByZXZTdXBwb3J0LCBjb250ZXh0LCBvd25lclN1cHBvcnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1cHBvcnRPbGRlclN0YXRlKHN1cHBvcnQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gc3VwcG9ydD8uY29udGV4dDtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0Py5zdGF0ZTtcbiAgICByZXR1cm4gc3RhdGVNZXRhPy5vbGRlcj8uc3RhdGU7XG59XG4iLCJpbXBvcnQgeyBvbmVSZW5kZXJUb1N1cHBvcnQgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL29uZVJlbmRlclRvU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBmaXJzdFRhZ1JlbmRlciB9IGZyb20gJy4uL3JlbmRlclRhZ09ubHkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi4vLi4vdGFnL3VwZGF0ZS9nZXROZXdHbG9iYWwuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05ld1N1YmplY3RUYWcgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL3Byb2Nlc3NOZXdTdWJqZWN0VGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzUmVuZGVyT25jZUluaXQodmFsdWUsIGNvbnRleHRJdGVtLCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbm93bmVyU3VwcG9ydCwgLy8gb3duaW5nU3VwcG9ydFxuaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgY29uc3Qgc3VwcG9ydCA9IG9uZVJlbmRlclRvU3VwcG9ydCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgZmlyc3RUYWdSZW5kZXIoc3VwcG9ydCwgdW5kZWZpbmVkLCBjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHN1cHBvcnQudGVtcGxhdGVyLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKTtcbn1cbiIsImltcG9ydCB7IGdldFRlbXBsYXRlclJlc3VsdCB9IGZyb20gJy4uL2dldFRlbXBsYXRlclJlc3VsdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBuZXdTdXBwb3J0QnlUZW1wbGF0ZXIgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBvbmVSZW5kZXJUb1N1cHBvcnQod3JhcHBlciwgc3ViamVjdCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgdGVtcGxhdGVyID0gZ2V0VGVtcGxhdGVyUmVzdWx0KFByb3BXYXRjaGVzLkRFRVApO1xuICAgIHRlbXBsYXRlci50YWdKc1R5cGUgPSB3cmFwcGVyLnRhZ0pzVHlwZTtcbiAgICBjb25zdCBzdXBwb3J0ID0gbmV3U3VwcG9ydEJ5VGVtcGxhdGVyKHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBsZXQgdGFnO1xuICAgIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgICAgIHRlbXBsYXRlci50YWcgPSB0YWcgfHwgd3JhcHBlcigpO1xuICAgICAgICByZXR1cm4gc3VwcG9ydDtcbiAgICB9XG4gICAgdGVtcGxhdGVyLndyYXBwZXIgPSB3cmFwO1xuICAgIHdyYXAudGFnSnNUeXBlID0gd3JhcHBlci50YWdKc1R5cGU7XG4gICAgd3JhcC5vcmlnaW5hbCA9IHdyYXBwZXIub3JpZ2luYWwgfHwgd3JhcHBlcjtcbiAgICByZXR1cm4gc3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IHNldHVwU3Vic2NyaWJlIH0gZnJvbSAnLi9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1N1YnNjcmliZVdpdGgodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGluc2VydEJlZm9yZSwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gc2V0dXBTdWJzY3JpYmUodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGluc2VydEJlZm9yZSwgYXBwZW5kVG8pO1xuICAgIGlmICghc3ViQ29udGV4dC5oYXNFbWl0dGVkKSB7XG4gICAgICAgIGVtaXRTdWJDb250ZXh0KHZhbHVlLCBzdWJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YkNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZW1pdFN1YkNvbnRleHQodmFsdWUsIHN1YkNvbnRleHQpIHtcbiAgICBjb25zdCBvYnNlcnZhYmxlcyA9IHZhbHVlLk9ic2VydmFibGVzO1xuICAgIGNvbnN0IG9ic2VydmFibGUgPSBvYnNlcnZhYmxlc1swXTtcbiAgICBpZiAoIXN1YkNvbnRleHQuaGFzRW1pdHRlZCkge1xuICAgICAgICBpZiAoJ3dpdGhEZWZhdWx0JyBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgc3ViQ29udGV4dC5zdWJWYWx1ZUhhbmRsZXIodmFsdWUud2l0aERlZmF1bHQsIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgndmFsdWUnIGluIG9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHN1YkNvbnRleHQuc3ViVmFsdWVIYW5kbGVyKG9ic2VydmFibGUudmFsdWUsIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjsgLy8gbm90aGluZyB0byBlbWl0XG4gICAgfVxuICAgIGNvbnN0IGVtaXRWYWx1ZSA9IHN1YkNvbnRleHQubGFzdFZhbHVlc1swXS52YWx1ZTtcbiAgICBzdWJDb250ZXh0LnN1YlZhbHVlSGFuZGxlcihlbWl0VmFsdWUsIDApO1xufVxuIiwiaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSBcIi4vdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZSh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgZWxlbWVudCwgbmFtZSwgaG93VG9TZXQpIHtcbiAgICBjb25zdCBvbGRUYWcgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjsgLy8gY29udGV4dEl0ZW0udGFnSnNWYXIgYXMgVGFnSnNWYXJcbiAgICBjb25zdCB0YWdWYWx1ZSA9IHZhbHVlO1xuICAgIGNvbnN0IGNoZWNrUmVzdWx0ID0gb2xkVGFnLmhhc1ZhbHVlQ2hhbmdlZCh0YWdWYWx1ZSwgY29udGV4dEl0ZW0sIC8vIHRvZG86IHdlaXJkIHR5cGluZyBzaG91bGQganVzdCBiZSBDb250ZXh0SXRlbVxuICAgIG93bmVyU3VwcG9ydCk7XG4gICAgaWYgKGNoZWNrUmVzdWx0ID4gMCkge1xuICAgICAgICBvbGRUYWcuZGVzdHJveShjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIGNvbnN0IG5ld1RhZ1ZhciA9IHZhbHVlVG9UYWdKc1Zhcih2YWx1ZSk7XG4gICAgICAgIG5ld1RhZ1Zhci5pc0F0dHIgPSB0cnVlO1xuICAgICAgICBuZXdUYWdWYXIucHJvY2Vzc0luaXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGVsZW1lbnQsIG5ld1RhZ1ZhciwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgaG93VG9TZXQpO1xuICAgICAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IG5ld1RhZ1ZhcjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNTcGVjaWFsQXR0ciB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2lzU3BlY2lhbEF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc05vbkR5bmFtaWNBdHRyIH0gZnJvbSBcIi4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvcHJvY2Vzc05hbWVWYWx1ZUF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgdW5zdWJzY3JpYmVDb250ZXh0LCBjaGVja1RvUGFpbnQsIHNldHVwU3Vic2NyaWJlQ2FsbGJhY2tQcm9jZXNzb3IgfSBmcm9tIFwiLi4vdGFnL3VwZGF0ZS9zZXR1cFN1YnNjcmliZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZSB9IGZyb20gXCIuL3Byb2Nlc3NBdHRyaWJ1dGVVcGRhdGUuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU3Vic2NyaWJlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5lbGVtZW50LCBfdGFnSnNWYXIsIC8vIHNhbWUgYXMgdmFsdWVcbmNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICAvLyBjaGFuZ2UgaG93IHRoZSBkZWxldGUgb2NjdXJzXG4gICAgdmFsdWUuZGVzdHJveSA9IHVuc3Vic2NyaWJlQ29udGV4dDtcbiAgICBjb25zdCBpc1NwZWNpYWwgPSBpc1NwZWNpYWxBdHRyKG5hbWUpO1xuICAgIGNvbnN0IG9uT3V0cHV0ID0gZnVuY3Rpb24gb25TdWJWYWx1ZShjYWxsYmFja1ZhbHVlLCBzeW5jUnVuKSB7XG4gICAgICAgIHByb2Nlc3NOb25EeW5hbWljQXR0cihuYW1lLCBjYWxsYmFja1ZhbHVlLCBlbGVtZW50LCBzZXROb25GdW5jdGlvbklucHV0VmFsdWUsIGlzU3BlY2lhbCwgY29udGV4dEl0ZW0pO1xuICAgICAgICBjaGVja1RvUGFpbnQoc3luY1J1bik7XG4gICAgfTtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gc2V0dXBTdWJzY3JpYmVDYWxsYmFja1Byb2Nlc3Nvcih2YWx1ZS5PYnNlcnZhYmxlcywgb3duZXJTdXBwb3J0LCBvbk91dHB1dCwgdmFsdWUsIGNvbnRleHRJdGVtKTtcbiAgICBjb250ZXh0SXRlbS5zdWJDb250ZXh0ID0gc3ViQ29udGV4dDtcbiAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gdmFsdWU7XG4gICAgdmFsdWUucHJvY2Vzc1VwZGF0ZSA9IGZ1bmN0aW9uIHByb2Nlc3NBdHRyaWJ1dGVVcGRhdGVXcmFwKHZhbHVlLCBjb250ZXh0SXRlbTIsIG93bmVyU3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZSh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgZWxlbWVudCwgbmFtZSwgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiB7IHN1YkNvbnRleHQsIG9uT3V0cHV0IH07XG59XG4iLCJpbXBvcnQgeyBwcm9jZXNzU3Vic2NyaWJlQXR0cmlidXRlIH0gZnJvbSBcIi4vcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZS5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlKG5hbWUsIHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5lbGVtZW50LCBfdGFnSnNWYXIsIC8vIGl0cyB0aGUgc2FtZSBhcyB0aGUgdmFsdWVcbmNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCB7IHN1YkNvbnRleHQgfSA9IHByb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbiAgICBlbGVtZW50LCB2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgaWYgKCFzdWJDb250ZXh0Lmhhc0VtaXR0ZWQpIHtcbiAgICAgICAgZW1pdFN1YlNjcmlwdGlvbkFzSXModmFsdWUsIHN1YkNvbnRleHQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBlbWl0U3ViU2NyaXB0aW9uQXNJcyh2YWx1ZSwgc3ViQ29udGV4dCkge1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gc3ViQ29udGV4dC50YWdKc1ZhcjtcbiAgICBjb25zdCBvbk91dHB1dCA9IHRhZ0pzVmFyLm9uT3V0cHV0OyAvLyB2YWx1ZS5vbk91dHB1dFxuICAgIGNvbnN0IG9ic2VydmFibGVzID0gdmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgbGV0IG9iVmFsdWUgPSBvYnNlcnZhYmxlc1swXT8udmFsdWUgfHwgdmFsdWUud2l0aERlZmF1bHQ7XG4gICAgLy8gc3ViQ29udGV4dC5oYXNFbWl0dGVkID0gdHJ1ZVxuICAgIC8vIHN1YkNvbnRleHQubGFzdFZhbHVlc1swXSA9IG9iVmFsdWVcbiAgICBpZiAodmFsdWUuY2FsbGJhY2spIHtcbiAgICAgICAgb2JWYWx1ZSA9IHZhbHVlLmNhbGxiYWNrKG9iVmFsdWUpO1xuICAgIH1cbiAgICBvbk91dHB1dChvYlZhbHVlLCB0cnVlLCBzdWJDb250ZXh0KTtcbn1cbiIsImltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gXCIuLi90YWcvaW5kZXguanNcIjtcbmltcG9ydCB7IHByb2Nlc3NTdWJzY3JpYmVXaXRoIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvcHJvY2Vzc1N1YnNjcmliZVdpdGguZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGRlbGV0ZUFuZFVuc3Vic2NyaWJlIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlIH0gZnJvbSBcIi4vcHJvY2Vzc1N1YnNjcmliZVdpdGhBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbi8qKiBIYXZlIGFuIGh0bWwgdGFnZ2VkIHZhbHVlIGFzIHZhbHVlIG9mIHN1YnNjcmliZSBlbWlzc2lvbnMsIHdpdGggaW5pdGlhbCBkZWZhdWx0IHZhbHVlIGVtaXNzaW9uLiBBdXRvbWF0aWNhbGx5IHVuc3Vic2NyaWJlcyBmb3IgeW91ICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlV2l0aChPYnNlcnZhYmxlLCB3aXRoRGVmYXVsdCwgY2FsbGJhY2spIHtcbiAgICAvLyBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKSBhcyBBbnlTdXBwb3J0XG4gICAgLy8gY29uc3QgY29udGV4dCA9IGdldFN1cHBvcnRXaXRoU3RhdGUoc3VwcG9ydCkuY29udGV4dFxuICAgIC8qXG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRJbkN5Y2xlKCkgYXMgQ29udGV4dEl0ZW1cbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlIGFzIENvbnRleHRTdGF0ZU1ldGFcbiAgICBjb25zdCBuZXdlciA9IHN0YXRlTWV0YS5uZXdlciBhcyBDb250ZXh0U3RhdGVTdXBwb3J0XG4gICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgICBvbk91dHB1dDogYmxhbmtIYW5kbGVyLCAvLyB0aGlzIGdldHMgc2V0IHdpdGhpbiBzZXR1cFN1YnNjcmliZVxuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMuc3Vic2NyaWJlLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogcHJvY2Vzc1N1YnNjcmliZVdpdGhBdHRyaWJ1dGUsXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzU3Vic2NyaWJlV2l0aCxcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1N1YnNjcmliZVZhbHVlQ2hhbmdlZCxcbiAgICAgICAgLy8gcHJvY2Vzc1VwZGF0ZTogdGFnVmFsdWVVcGRhdGVIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIGRlc3Ryb3k6IGRlbGV0ZUFuZFVuc3Vic2NyaWJlLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgd2l0aERlZmF1bHQsXG4gICAgICAgIC8vIHN0YXRlczogbmV3ZXIuc3RhdGVzLFxuICAgICAgICBPYnNlcnZhYmxlczogW09ic2VydmFibGVdLFxuICAgIH07XG59XG4vKiogY2hlY2tzIGlzIGEgcHJldmlvdXMgdGFnIHZhciB3YXMgYSBzdWJzY3JpcHRpb24gYnV0IG5vdyBoYXMgY2hhbmdlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU3Vic2NyaWJlVmFsdWVDaGFuZ2VkKHZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIGlmICghdmFsdWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICByZXR1cm4gMTsgLy8gaXRzIG5vdCBhIHN1YnNjcmlwdGlvbiBhbnltb3JlXG4gICAgfVxuICAgIGNvbnN0IG5ld09ic2VydmVzID0gdmFsdWUuT2JzZXJ2YWJsZXM7XG4gICAgaWYgKCFuZXdPYnNlcnZlcykge1xuICAgICAgICByZXR1cm4gMjsgLy8gaXRzIG5vdCBhIHN1YnNjcmlwdGlvbiBhbnltb3JlXG4gICAgfVxuICAgIGNvbnN0IG9sZFZhbHVlID0gY29udGV4dEl0ZW0udmFsdWU7XG4gICAgY29uc3Qgb2xkT2JzZXJ2ZXMgPSBvbGRWYWx1ZS5PYnNlcnZhYmxlcztcbiAgICBpZiAoIW9sZE9ic2VydmVzIHx8IG9sZE9ic2VydmVzLmxlbmd0aCAhPT0gbmV3T2JzZXJ2ZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAzOyAvLyBub3QgdGhlIHNhbWUgc3Vic2NyaXB0aW9uXG4gICAgfVxuICAgIGNvbnN0IGFsbE1hdGNoID0gbmV3T2JzZXJ2ZXMuZXZlcnkoKG9iLCBpbmRleCkgPT4gb2IgPT09IG9sZE9ic2VydmVzW2luZGV4XSk7XG4gICAgaWYgKCFhbGxNYXRjaCkge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgcmV0dXJuIDA7IC8vIHN0aWxsIHRoZSBzYW1lXG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSBcIi4uL3RhZy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZGVsZXRlQW5kVW5zdWJzY3JpYmUsIHNldHVwU3Vic2NyaWJlIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGNoZWNrU3Vic2NyaWJlVmFsdWVDaGFuZ2VkIH0gZnJvbSBcIi4vc3Vic2NyaWJlV2l0aC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZSB9IGZyb20gXCIuL3Byb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgY2hlY2tTdGlsbFN1YnNjcmlwdGlvbiB9IGZyb20gXCIuLi90YWcvdXBkYXRlL2NoZWNrU3RpbGxTdWJzY3JpcHRpb24uZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbi8qKiBIYXZlIGFuIGh0bWwgdGFnZ2VkIHZhbHVlIGFzIHZhbHVlIG9mIHN1YnNjcmliZSBlbWlzc2lvbnMuIEF1dG9tYXRpY2FsbHkgdW5zdWJzY3JpYmVzIGZvciB5b3UgKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmUoT2JzZXJ2YWJsZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBvbk91dHB1dDogYmxhbmtIYW5kbGVyLCAvLyBnZXRzIHNldCB3aXRoaW4gc2V0dXBTdWJzY3JpYmUoKVxuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMuc3Vic2NyaWJlLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogcHJvY2Vzc1N1YnNjcmliZUF0dHJpYnV0ZSxcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHNldHVwU3Vic2NyaWJlLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrU3Vic2NyaWJlVmFsdWVDaGFuZ2VkLFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiBjaGVja1N0aWxsU3Vic2NyaXB0aW9uLFxuICAgICAgICAvLyBwcm9jZXNzVXBkYXRlOiBwcm9jZXNzVXBkYXRlU3Vic2NyaWJlLFxuICAgICAgICBkZXN0cm95OiBkZWxldGVBbmRVbnN1YnNjcmliZSxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIC8vIHN0YXRlcyxcbiAgICAgICAgT2JzZXJ2YWJsZXM6IFtPYnNlcnZhYmxlXSxcbiAgICB9O1xufVxuc3Vic2NyaWJlLmFsbCA9IHN1YnNjcmliZUFsbDtcbmZ1bmN0aW9uIHN1YnNjcmliZUFsbChzdWJqZWN0cywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKFN1YmplY3QuYWxsKHN1YmplY3RzKSwgY2FsbGJhY2spO1xufVxuIiwiaW1wb3J0IHsgZGVsZXRlQ29udGV4dFN1YkNvbnRleHQsIGd1YXJhbnRlZUluc2VydEJlZm9yZSwgb25GaXJzdFN1YkNvbnRleHQgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gXCIuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvaW5kZXguanNcIjtcbmZ1bmN0aW9uIGhhbmRsZUlubmVySFRNTCh2YWx1ZSwgY29udGV4dEl0ZW0sIG5ld1N1cHBvcnQpIHtcbiAgICArK2NvbnRleHRJdGVtLnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IG93bmVyID0gdmFsdWUub3duZXI7XG4gICAgY29uc3QgcmVhbFZhbHVlID0gb3duZXIuX2lubmVySFRNTDtcbiAgICByZWFsVmFsdWUucHJvY2Vzc0luaXQgPSByZWFsVmFsdWUub2xkUHJvY2Vzc0luaXQ7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ/LmNvbnRleHRJdGVtO1xuICAgIGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZShjb250ZXh0LCByZWFsVmFsdWUsIG5ld1N1cHBvcnQpO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0lubmVySFRNTCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGNvbnRleHRJdGVtLnN1YkNvbnRleHQgPSB7fTtcbiAgICAvLyBjb250ZXh0SXRlbS5oYW5kbGVyID0gaGFuZGxlSW5uZXJIVE1MXG4gICAgdmFsdWUucHJvY2Vzc1VwZGF0ZSA9IGhhbmRsZUlubmVySFRNTDtcbiAgICBjaGVja0lubmVySFRNTCh2YWx1ZSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSwgaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG59XG5mdW5jdGlvbiBjaGVja0lubmVySFRNTCh2YWx1ZSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSwgaW5zZXJ0QmVmb3JlT3JpZ2luYWwsIGFwcGVuZFRvKSB7XG4gICAgY29uc3QgeyBhcHBlbmRNYXJrZXIsIGluc2VydEJlZm9yZSB9ID0gZ3VhcmFudGVlSW5zZXJ0QmVmb3JlKGFwcGVuZFRvLCBpbnNlcnRCZWZvcmVPcmlnaW5hbCk7XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IGNvbnRleHRJdGVtLnN1YkNvbnRleHQ7XG4gICAgc3ViQ29udGV4dC5hcHBlbmRNYXJrZXIgPSBhcHBlbmRNYXJrZXI7XG4gICAgY29uc3Qgb3duZXIgPSB2YWx1ZS5vd25lcjtcbiAgICBjb25zdCByZWFsVmFsdWUgPSBvd25lci5faW5uZXJIVE1MO1xuICAgIHJlYWxWYWx1ZS5wcm9jZXNzSW5pdCA9IHJlYWxWYWx1ZS5vbGRQcm9jZXNzSW5pdDtcbiAgICAvKiogUmVuZGVyIHRoZSBjb250ZW50IHRoYXQgd2lsbCBDT05UQUlOIHRoZSBpbm5lckhUTUwgKi9cbiAgICBvbkZpcnN0U3ViQ29udGV4dChyZWFsVmFsdWUsIHN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCwgaW5zZXJ0QmVmb3JlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbm5lckhUTUwoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnSnNUeXBlOiAnaW5uZXJIVE1MJyxcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiAoKSA9PiAwLCAvLyBub3QgZXhwZWN0ZWQgdG8gZG8gYW55dGhpbmdcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NJbm5lckhUTUwsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IGhhbmRsZUlubmVySFRNTCxcbiAgICAgICAgZGVzdHJveTogZGVsZXRlQ29udGV4dFN1YkNvbnRleHQsXG4gICAgfTtcbn1cbiIsIi8qKlxuICogU3luYyB0d28gc3VwcG9ydHNcbiAqIEBwYXJhbSBzdXBwb3J0IEZST01cbiAqIEBwYXJhbSBuZXdlc3RTdXBwb3J0ICBPTlRPXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3luY1N1cHBvcnRzKHN1cHBvcnQsIC8vIGZyb21cbm5ld2VzdFN1cHBvcnQpIHtcbiAgICBjb25zdCBzdGF0ZU1ldGEgPSBzdXBwb3J0LmNvbnRleHQuc3RhdGU7XG4gICAgY29uc3QgbmV3ZXN0U3RhdGVNZXRhID0gbmV3ZXN0U3VwcG9ydC5jb250ZXh0LnN0YXRlO1xuICAgIGNvbnN0IGZyb21TdGF0ZXMgPSBzdGF0ZU1ldGEubmV3ZXIuc3RhdGVzO1xuICAgIGNvbnN0IHRvU3RhdGVzID0gbmV3ZXN0U3RhdGVNZXRhLm5ld2VyLnN0YXRlcztcbiAgICByZXR1cm4gc3luY1N0YXRlc0FycmF5KGZyb21TdGF0ZXMsIHRvU3RhdGVzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzeW5jU3RhdGVzQXJyYXkoZnJvbSwgb250bykge1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBmcm9tLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBnZXR0ZXIgPSBmcm9tW2luZGV4XTtcbiAgICAgICAgY29uc3Qgc2V0dGVyID0gb250b1tpbmRleF07XG4gICAgICAgIHN5bmNTdGF0ZXMoZ2V0dGVyLCBzZXR0ZXIpO1xuICAgIH1cbn1cbmxldCBnb3Q7XG5mdW5jdGlvbiBzeW5jRnJvbVN0YXRlKC4uLngpIHtcbiAgICBnb3QgPSB4O1xuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24gc3luY09udG9TdGF0ZSgpIHtcbiAgICByZXR1cm4gZ290O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN5bmNTdGF0ZXMoZnJvbSwgb250bykge1xuICAgIGZyb20oc3luY0Zyb21TdGF0ZSwgMSk7XG4gICAgb250byhzeW5jT250b1N0YXRlLCAyKTtcbn1cbi8qKiBAZGVwcmVjYXRlZCBmYXZvciB1c2luZyBzeW5jU3VwcG9ydHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBvbGRTeW5jU3RhdGVzKHN0YXRlRnJvbSwgc3RhdGVUbywgaW50b1N0YXRlcywgc3RhdGVzRnJvbSkge1xuICAgIGZvciAobGV0IGluZGV4ID0gc3RhdGVGcm9tLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhdGVGcm9tVGFyZ2V0ID0gc3RhdGVGcm9tW2luZGV4XTtcbiAgICAgICAgY29uc3QgZnJvbVZhbHVlID0gc3RhdGVGcm9tVGFyZ2V0LmdldCgpOyAvLyBnZXQgd2l0aG91dCBzZXR0aW5nXG4gICAgICAgIC8vIGNvbnN0IGZyb21WYWx1ZSA9IGdldFN0YXRlVmFsdWUoc3RhdGVGcm9tVGFyZ2V0KSAvLyBnZXQgd2l0aG91dCBzZXR0aW5nXG4gICAgICAgIGNvbnN0IHN0YXRlVG9UYXJnZXQgPSBzdGF0ZVRvW2luZGV4XTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBzdGF0ZVRvVGFyZ2V0LmNhbGxiYWNrOyAvLyBpcyBpdCBhIGxldCBzdGF0ZT9cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2soZnJvbVZhbHVlKTsgLy8gc2V0IHRoZSB2YWx1ZVxuICAgIH1cbiAgICAvLyBsb29wIHN0YXRlc0Zyb20gdG8gc2V0IG9uIHRoZSBvbGRTdGF0ZXNcbiAgICBmb3IgKGxldCBpbmRleCA9IHN0YXRlc0Zyb20ubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBvbGRWYWx1ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgZ2V0SW5kZXggPSAwO1xuICAgICAgICBjb25zdCBzdGF0ZUZyb21UYXJnZXQgPSBzdGF0ZXNGcm9tW2luZGV4XTtcbiAgICAgICAgLy8gdHJpZ2dlciBnZXR0aW5nIGFsbCBvbGQgdmFsdWVzXG4gICAgICAgIHN0YXRlRnJvbVRhcmdldChvbGRHZXRDYWxsYmFjayk7XG4gICAgICAgIC8vIHRyaWdnZXIgc2V0dGluZyB1cGRhdGVkIHZhbHVlc1xuICAgICAgICBpbnRvU3RhdGVzW2luZGV4XShuZXdTZXRDYWxsYmFjayk7XG4gICAgfVxufVxubGV0IGdldEluZGV4ID0gMDtcbmNvbnN0IG9sZFZhbHVlcyA9IFtdO1xuZnVuY3Rpb24gb2xkR2V0Q2FsbGJhY2soLi4uYXJncykge1xuICAgIG9sZFZhbHVlcy5wdXNoKGFyZ3MpO1xuICAgIHJldHVybiBhcmdzO1xufVxuLy8gVGhpcyBpcyB0aGUgXCJnZXRcIiBhcmd1bWVudCB0aGF0IHdpbGwgYmUgY2FsbGVkIGFuZCBhbGwgYXJndW1lbnRzIGFyZSBpZ25vcmVkXG5mdW5jdGlvbiBuZXdTZXRDYWxsYmFjayguLi5fKSB7XG4gICAgcmV0dXJuIG9sZFZhbHVlc1tnZXRJbmRleCsrXTtcbn1cbiIsImltcG9ydCB7IHBhaW50IH0gZnJvbSBcIi4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHBhaW50QWZ0ZXJzLCBwYWludGluZyB9IGZyb20gXCIuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHN5bmNTdGF0ZXNBcnJheSB9IGZyb20gXCIuLi9zdGF0ZS9zeW5jU3RhdGVzLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gXCIuL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgc2FmZVJlbmRlclN1cHBvcnQgfSBmcm9tIFwiLi9wcm9wcy9zYWZlUmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qc1wiO1xuLyoqIFVzZWQgdG8gY2FsbCBhIGZ1bmN0aW9uIHRoYXQgYmVsb25ncyB0byBhIGNhbGxpbmcgdGFnIGJ1dCBpcyBub3Qgd2l0aCByb290IGFyZ3VtZW50cyAqL1xuZXhwb3J0IGZ1bmN0aW9uIG91dHB1dChjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGJsYW5rSGFuZGxlcjsgLy8gb3V0cHV0IHVzZWQgb24gYW4gYXJndW1lbnQgdGhhdCB3YXMgbm90IHBhc3NlZCBpblxuICAgIH1cbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICBpZiAoIXN1cHBvcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXQgbXVzdCBiZSB1c2VkIGluIHJlbmRlciBzeW5jIGZhc2hpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IG93bmVyU3VwcG9ydCA9IHN1cHBvcnQub3duZXJTdXBwb3J0O1xuICAgICAgICByZXR1cm4gc3luY1dyYXBDYWxsYmFjayhhcmdzLCBjYWxsYmFjaywgb3duZXJTdXBwb3J0LmNvbnRleHQpO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc3luY1dyYXBDYWxsYmFjayhhcmdzLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgIGNvbnN0IHN0YXRlTWV0YSA9IGNvbnRleHQuc3RhdGU7XG4gICAgY29uc3QgbmV3ZXJTdGF0ZXMgPSBzdGF0ZU1ldGEubmV3ZXIuc3RhdGVzO1xuICAgIGNvbnN0IG9sZGVyU3RhdGVzID0gc3RhdGVNZXRhLm9sZGVyID8gc3RhdGVNZXRhLm9sZGVyLnN0YXRlcyA6IG5ld2VyU3RhdGVzO1xuICAgIGNvbnN0IG5ld2VzdE93bmVyID0gc3RhdGVNZXRhLm5ld2VzdDtcbiAgICAvLyBzeW5jIHRoZSBuZXcgc3RhdGVzIHRvIHRoZSBvbGQgYmVmb3JlIHRoZSBvbGQgZG9lcyBhbnkgcHJvY2Vzc2luZ1xuICAgIHN5bmNTdGF0ZXNBcnJheShuZXdlclN0YXRlcywgb2xkZXJTdGF0ZXMpO1xuICAgIGNvbnN0IGMgPSBjYWxsYmFjayguLi5hcmdzKTsgLy8gY2FsbCB0aGUgbGF0ZXN0IGNhbGxiYWNrXG4gICAgLy8gc3luYyB0aGUgb2xkIHN0YXRlcyB0byB0aGUgbmV3XG4gICAgc3luY1N0YXRlc0FycmF5KG9sZGVyU3RhdGVzLCBuZXdlclN0YXRlcyk7XG4gICAgLy8gbm93IHJlbmRlciB0aGUgb3duZXJcbiAgICBwYWludEFmdGVycy5wdXNoKFsoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdHbG9iYWwgPSBuZXdlc3RPd25lci5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgICAgIGNvbnN0IGlnbm9yZSA9IG5ld0dsb2JhbCA9PT0gdW5kZWZpbmVkIHx8IG5ld0dsb2JhbC5kZWxldGVkID09PSB0cnVlO1xuICAgICAgICAgICAgaWYgKGlnbm9yZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gaXRzIG5vdCBhIHRhZyBhbnltb3JlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICArK3BhaW50aW5nLmxvY2tzO1xuICAgICAgICAgICAgc2FmZVJlbmRlclN1cHBvcnQobmV3ZXN0T3duZXIpO1xuICAgICAgICAgICAgLS1wYWludGluZy5sb2NrcztcbiAgICAgICAgICAgIHBhaW50KCk7XG4gICAgICAgIH0sIFtdXSk7XG4gICAgcmV0dXJuIGM7XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSBcIi4uL3RhZy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgc3luY1dyYXBDYWxsYmFjayB9IGZyb20gXCIuLi90YWcvb3V0cHV0LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSwgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tIFwiLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgaW5pdFN0YXRlLCByZVN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlL3N0YXRlLnV0aWxzLmpzXCI7XG5pbXBvcnQgeyBydW5BZnRlclJlbmRlciB9IGZyb20gXCIuLi9yZW5kZXIvcnVuQWZ0ZXJSZW5kZXIuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGhhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tIH0gZnJvbSBcIi4uL3RhZy91cGRhdGUvaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20uZnVuY3Rpb24uanNcIjtcbi8qKiBVc2UgdG8gZ2FpbiBhY2Nlc3MgdG8gZWxlbWVudFxuICogQGNhbGxiYWNrIGNhbGxlZCBldmVyeSByZW5kZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvc3QoY2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGJhc2VIb3N0ID0ge1xuICAgICAgICB0YWdKc1R5cGU6IFZhbHVlVHlwZXMuaG9zdCxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IHByb2Nlc3NIb3N0QXR0cmlidXRlLFxuICAgICAgICAvLyBUT0RPOiBtYXliZSBhIGhvc3QgdmFsdWUgY2FuIGNoYW5nZT9cbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiAoKSA9PiAwLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc0hvc3QsIC8vIFRoaXMgc2hvdWxkIGJlIGEgdGhyb3cgZXJyb3IgYmVjYXVzZSBvbmx5IGF0dHJpYnV0ZSBpcyBzdXBwb3J0ZWRcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogcHJvY2Vzc0hvc3RVcGRhdGUsXG4gICAgICAgIGRlc3Ryb3k6IGRlbGV0ZUhvc3QsXG4gICAgICAgIG9wdGlvbnM6IHsgY2FsbGJhY2ssIC4uLm9wdGlvbnMgfSxcbiAgICAgICAgbWF0Y2hlc0luamVjdGlvbihpbmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGluamVjdENhbGxiYWNrID0gaW5qZWN0Py5vcHRpb25zPy5jYWxsYmFjaztcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBpbmplY3QgdGFyZ2V0IGlzIGEgaG9zdCB3aXRoIHRoZSBzYW1lIGNhbGxiYWNrXG4gICAgICAgICAgICByZXR1cm4gaW5qZWN0Q2FsbGJhY2sgPT09IGNhbGxiYWNrO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgcmV0dXJuRnVuY3Rpb24gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCBob3N0VmFsdWUgPSB7XG4gICAgICAgICAgICAuLi5yZXR1cm5GdW5jdGlvbixcbiAgICAgICAgICAgIG9wdGlvbnM6IHsgYXJndW1lbnRzOiBhcmdzLCAuLi5vcHRpb25zLCBjYWxsYmFjayB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaG9zdFZhbHVlO1xuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihyZXR1cm5GdW5jdGlvbiwgYmFzZUhvc3QpO1xuICAgIC8vIHJldHVybkZ1bmN0aW9uLm9wdGlvbnMgPSB7IGNhbGxiYWNrIH1cbiAgICByZXR1cm4gcmV0dXJuRnVuY3Rpb247XG59XG4vLyBBdHRhY2ggdGhlIGZ1bmN0aW9ucyB0byB0aGUgaG9zdCBuYW1lc3BhY2Vcbjtcbmhvc3Qub25Jbml0ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuIGhvc3QoKCkgPT4geyB9LCB7IG9uSW5pdDogY2FsbGJhY2sgfSk7XG59O1xuaG9zdC5vbkRlc3Ryb3kgPSAoY2FsbGJhY2spID0+IHtcbiAgICByZXR1cm4gaG9zdCgoKSA9PiB7IH0sIHsgb25EZXN0cm95OiBjYWxsYmFjayB9KTtcbn07XG5mdW5jdGlvbiBwcm9jZXNzSG9zdFVwZGF0ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBoYW5kbGVUYWdUeXBlQ2hhbmdlRnJvbShWYWx1ZVR5cGVzLmhvc3QsIG5ld1ZhbHVlLCBcbiAgICAvLyB0YWdKc1ZhcixcbiAgICBvd25lclN1cHBvcnQsIGNvbnRleHRJdGVtKTtcbiAgICBpZiAoaGFzQ2hhbmdlZCkge1xuICAgICAgICByZXR1cm4gaGFzQ2hhbmdlZDtcbiAgICB9XG4gICAgY29uc3Qgb2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBjb25zdCBvbGRPcHRpb25zID0gb2xkVGFnSnNWYXIub3B0aW9ucztcbiAgICAvLyBjb25zdCBlbGVtZW50ID0gKGNvbnRleHRJdGVtIGFzIGFueSBhcyBBdHRyaWJ1dGVDb250ZXh0SXRlbSkuZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgY29uc3QgbmV3SG9zdCA9IG5ld1ZhbHVlO1xuICAgIHJlU3RhdGUoY29udGV4dEl0ZW0pO1xuICAgIGNvbnN0IGFyZ3MgPSAobmV3SG9zdC5vcHRpb25zLmFyZ3VtZW50cyB8fCBvbGRPcHRpb25zLmFyZ3VtZW50cyB8fCBbXSk7XG4gICAgY29udGV4dEl0ZW0ucmV0dXJuVmFsdWUgPSBuZXdIb3N0Lm9wdGlvbnMuY2FsbGJhY2soLi4uYXJncyk7XG4gICAgcnVuQWZ0ZXJSZW5kZXIoY29udGV4dEl0ZW0pO1xufVxuZnVuY3Rpb24gcHJvY2Vzc0hvc3RBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbmVsZW1lbnQsIHRhZ0pzVmFyLCAvLyBzYW1lIGFzIHZhbHVlIG5vdCBuZWVkZWRcbmNvbnRleHRJdGVtKSB7XG4gICAgcmV0dXJuIHByb2Nlc3NIb3N0KHRhZ0pzVmFyLCBjb250ZXh0SXRlbSk7XG59XG4vKiBPbmx5IHJ1bnMgb24gaG9zdCgpIGluaXQgKi9cbmZ1bmN0aW9uIHByb2Nlc3NIb3N0KHRhZ0pzVmFyLCBjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBjb250ZXh0SXRlbS5lbGVtZW50O1xuICAgIGNvbnN0IHN0YXRlID0gY29udGV4dEl0ZW0uc3RhdGUgPSB7fTtcbiAgICBpbml0U3RhdGUoY29udGV4dEl0ZW0pO1xuICAgIHByb2Nlc3NIb3N0VGFnSnNWYXIoZWxlbWVudCwgdGFnSnNWYXIsIGNvbnRleHRJdGVtLCBzdGF0ZSk7XG4gICAgcnVuQWZ0ZXJSZW5kZXIoKTtcbn1cbi8qKiBmaXJzdCB0aW1lIHJ1biAqL1xuZnVuY3Rpb24gcHJvY2Vzc0hvc3RUYWdKc1ZhcihlbGVtZW50LCB0YWdKc1ZhciwgY29udGV4dEl0ZW0sIHN0YXRlKSB7XG4gICAgY29uc3QgYXJncyA9IHRhZ0pzVmFyLm9wdGlvbnMuYXJndW1lbnRzIHx8IFtdO1xuICAgIGNvbnN0IHJldHVyblZhbHVlID0gdGFnSnNWYXIub3B0aW9ucy5jYWxsYmFjayguLi5hcmdzKTtcbiAgICAvLyBTdG9yZSB0aGUgcmV0dXJuIHZhbHVlIGZvciB0YWcuaW5qZWN0IHRvIGFjY2Vzc1xuICAgIGNvbnRleHRJdGVtLnJldHVyblZhbHVlID0gcmV0dXJuVmFsdWU7XG4gICAgLy8gREVQUkVDQVRFRFxuICAgIGNvbnN0IG9wdGlvbnMgPSB0YWdKc1Zhci5vcHRpb25zO1xuICAgIGlmIChvcHRpb25zLm9uSW5pdCkge1xuICAgICAgICAvLyBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgICAgIG9wdGlvbnMub25Jbml0KGVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5mdW5jdGlvbiBkZWxldGVIb3N0KGNvbnRleHRJdGVtKSB7XG4gICAgKytjb250ZXh0SXRlbS51cGRhdGVDb3VudDtcbiAgICBjb25zdCBhdHRyQ29udGV4dCA9IGNvbnRleHRJdGVtO1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gYXR0ckNvbnRleHQudGFnSnNWYXI7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRhZ0pzVmFyLm9wdGlvbnM7XG4gICAgaWYgKGF0dHJDb250ZXh0LmRlc3Ryb3kkLnN1YnNjcmliZXJzLmxlbmd0aCkge1xuICAgICAgICAvLyBUT0RPOiBOb3Qgc3VyZSBpZiB0aGlzIG5lZWRlZFxuICAgICAgICBzZXRDb250ZXh0SW5DeWNsZShjb250ZXh0SXRlbSk7XG4gICAgICAgIHN5bmNXcmFwQ2FsbGJhY2soW10sIGF0dHJDb250ZXh0LmRlc3Ryb3kkLm5leHQuYmluZChhdHRyQ29udGV4dC5kZXN0cm95JCksIGNvbnRleHRJdGVtKTtcbiAgICAgICAgLy8gVE9ETzogTm90IHN1cmUgaWYgdGhpcyBuZWVkZWRcbiAgICAgICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICB9XG4gICAgLy8gREVQUkVDQVRFRFxuICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGNvZGUgYW5kIHVzZSB0YWcub25EZXN0cm95IGluc3RlYWRcbiAgICBpZiAob3B0aW9ucy5vbkRlc3Ryb3kpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGF0dHJDb250ZXh0LmVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGhvc3REZXN0cm95ID0gZnVuY3Rpb24gcHJvY2Vzc0hvc3REZXN0cm95KCkge1xuICAgICAgICAgICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0aW9ucy5vbkRlc3Ryb3koZWxlbWVudCwgdGFnSnNWYXIsIGF0dHJDb250ZXh0LCBhdHRyQ29udGV4dC5zdGF0ZSk7XG4gICAgICAgICAgICByZW1vdmVDb250ZXh0SW5DeWNsZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3RhdGVPd25lciA9IGNvbnRleHRJdGVtLnN0YXRlT3duZXI7XG4gICAgICAgIHJldHVybiBzeW5jV3JhcENhbGxiYWNrKFtdLCBob3N0RGVzdHJveSwgc3RhdGVPd25lci5jb250ZXh0KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL2luZGV4LmpzJztcbmltcG9ydCB7IGdldE92ZXJyaWRlVGFnVmFyIH0gZnJvbSAnLi9wcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VGFnVG9FbGVtZW50TWFuYWdlZChzdXBwb3J0LCBvd25lclN1cHBvcnQsIHN1YmplY3QpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gY29udGV4dC50b1JlbmRlciB8fCBjb250ZXh0LnJldHVyblZhbHVlO1xuICAgIC8vIEVYQU1QTEU6IFsnYScsJ2InXS5tYXAoeD0+IHRhZygoKSA9PiBbZGl2LHNwYW5dKS5rZXkoeCkpXG4gICAgLypcbiAgICBpZihBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgOyhuZXdWYWx1ZSBhcyBhbnkpLmtleSA9IChhcnJheVZhbHVlOiBhbnkpID0+IGtleVRhZyhhcnJheVZhbHVlLCBuZXdWYWx1ZSlcbiAgICB9XG4gICAgKi9cbiAgICBjb25zdCB0YWdKc1ZhciA9IHZhbHVlVG9UYWdKc1ZhcihuZXdWYWx1ZSk7XG4gICAgZGVsZXRlIGNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IG5ld0NvbnRleHQgPSB7XG4gICAgICAgIHVwZGF0ZUNvdW50OiAwLFxuICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXG4gICAgICAgIHRhZ0pzVmFyLFxuICAgICAgICBkZXN0cm95JDogbmV3IFN1YmplY3QoKSxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGNvbnRleHQucGxhY2Vob2xkZXIsXG4gICAgICAgIC8vIG5vdCBpbXBvcnRhbnRcbiAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgcGFyZW50Q29udGV4dDogY29udGV4dCxcbiAgICAgICAgY29udGV4dHM6IFtdLFxuICAgIH07XG4gICAgY29uc3Qgb3ZlcnJpZGVUYWdWYXIgPSBnZXRPdmVycmlkZVRhZ1Zhcihjb250ZXh0LCBuZXdDb250ZXh0LCBzdXBwb3J0LCBzdWJqZWN0KTtcbiAgICBjb250ZXh0LnRhZ0pzVmFyID0gb3ZlcnJpZGVUYWdWYXI7XG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIGJlIGNhbGxpbmcgdGhpcyBoZXJlP1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NJbml0KG5ld1ZhbHVlLCBuZXdDb250ZXh0LCBzdXBwb3J0LCBzdWJqZWN0LnBsYWNlaG9sZGVyKTtcbiAgICByZXR1cm4gc3VwcG9ydDtcbn1cbiIsImltcG9ydCB7IHByb2Nlc3NGaXJzdFRhZ1Jlc3VsdCB9IGZyb20gJy4vcHJvY2Vzc1RhZ1Jlc3VsdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldENhc3RlZFByb3BzIH0gZnJvbSAnLi4vZ2V0VGFnV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTdXBwb3J0IH0gZnJvbSAnLi4vY3JlYXRlU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBmaXJzdFRhZ1JlbmRlciB9IGZyb20gJy4uLy4uL3JlbmRlci9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uLy4uL3JlbmRlci9idWlsZEJlZm9yZUVsZW1lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZSwgaXNQcm9taXNlLCBwYWludCB9IGZyb20gJy4uLy4uL2luZGV4LmpzJztcbmltcG9ydCB7IHVwZGF0ZVRvRGlmZlZhbHVlIH0gZnJvbSAnLi91cGRhdGVUb0RpZmZWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjYXN0UHJvcHMgfSBmcm9tICcuLi9wcm9wcy9hbHRlclByb3AuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY29udmVydFRhZ1RvRWxlbWVudE1hbmFnZWQgfSBmcm9tICcuL2NvbnZlcnRUYWdUb0VsZW1lbnRNYW5hZ2VkLmZ1bmN0aW9uLmpzJztcbmZ1bmN0aW9uIGNyZWF0ZVN1cHBvcnRXaXRoUHJvcHModGVtcGxhdGVyLCBzdWJqZWN0LCBvd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBuZXdTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgb3duZXJTdXBwb3J0LmFwcFN1cHBvcnQsIHN1YmplY3QpO1xuICAgIGNvbnN0IG5ld1Byb3BzQ29uZmlnID0gbmV3U3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICBpZiAobmV3UHJvcHNDb25maWcpIHtcbiAgICAgICAgY29uc3QgY2FzdGVkUHJvcHMgPSB0ZW1wbGF0ZXIudGFnSnNUeXBlICE9PSBWYWx1ZVR5cGVzLnRhZ0NvbXBvbmVudCA/IFtdIDogZ2V0Q2FzdGVkUHJvcHModGVtcGxhdGVyLCBuZXdTdXBwb3J0KTtcbiAgICAgICAgbmV3UHJvcHNDb25maWcuY2FzdFByb3BzID0gY2FzdGVkUHJvcHM7XG4gICAgfVxuICAgIGNvbnN0IHN1cHBvcnQgPSBmaXJzdFRhZ1JlbmRlcihuZXdTdXBwb3J0LCBzdWJqZWN0LnN0YXRlLm5ld2VzdCwgLy8gZXhpc3RpbmcgdGFnXG4gICAgc3ViamVjdCk7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1JlcGxhY2VtZW50Q29tcG9uZW50KHRlbXBsYXRlciwgc3ViamVjdCwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnRXaXRoUHJvcHModGVtcGxhdGVyLCBzdWJqZWN0LCBvd25lclN1cHBvcnQpO1xuICAgIGNvbnN0IHRhZyA9IHN1cHBvcnQudGVtcGxhdGVyLnRhZztcbiAgICBpZiAoIVsnZG9tJywgJ2h0bWwnXS5pbmNsdWRlcyh0YWcudGFnSnNUeXBlKSkge1xuICAgICAgICByZXR1cm4gY29udmVydFRhZ1RvRWxlbWVudE1hbmFnZWQoc3VwcG9ydCwgb3duZXJTdXBwb3J0LCBzdWJqZWN0KTtcbiAgICB9XG4gICAgYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIHVuZGVmaW5lZCwgLy8gZWxlbWVudCBmb3IgYXBwZW5kIGNoaWxkXG4gICAgc3ViamVjdC5wbGFjZWhvbGRlcik7XG4gICAgcmV0dXJuIHN1cHBvcnQ7XG59XG4vKiogVXNlZCB3aGVuIGEgdGFnKCkgZG9lcyBub3QgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczUzNzQyNlswXSkgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVycmlkZVRhZ1Zhcihjb250ZXh0LCBuZXdDb250ZXh0LCBzdXBwb3J0LCBzdWJqZWN0KSB7XG4gICAgLy8gc3VwcG9ydC5jb250ZXh0ID0gc3ViamVjdCBhcyBTdXBwb3J0Q29udGV4dEl0ZW1cbiAgICBjb25zdCBvdmVycmlkZVRhZ1ZhciA9IHtcbiAgICAgICAgdGFnSnNUeXBlOiAndGFnLWNvbnZlcnNpb24nLFxuICAgICAgICAvLyBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogbmV3Q29udGV4dC50YWdKc1Zhci5wcm9jZXNzSW5pdEF0dHJpYnV0ZSxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlciwgLy8gY2Fubm90IGJlIGFuIGF0dHJpYnV0ZSBldmVyXG4gICAgICAgIHByb2Nlc3NJbml0OiAoX3ZhbHVlLCBfY29udGV4dEl0ZW0sIF9vd25lclN1cHBvcnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlckNvbnRlbnQgPSBjb250ZXh0LnRvUmVuZGVyIHx8IGNvbnRleHQucmV0dXJuVmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gbmV3Q29udGV4dC50YWdKc1Zhci5wcm9jZXNzSW5pdChyZW5kZXJDb250ZW50LCBuZXdDb250ZXh0LCBzdXBwb3J0LCBzdWJqZWN0LnBsYWNlaG9sZGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSA9PiB7XG4gICAgICAgICAgICArK2NvbnRleHQudXBkYXRlQ291bnQ7XG4gICAgICAgICAgICArK2NvbnRleHRJdGVtLnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgY29udmVydFZhbHVlID0gY29udGV4dC50b1JlbmRlciB8fCBjb250ZXh0LnJldHVyblZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBjb250ZXh0LnZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgb2xkVHlwZSA9IG9sZFZhbHVlLnRhZ0pzVHlwZTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1R5cGUgPSB2YWx1ZT8udGFnSnNUeXBlO1xuICAgICAgICAgICAgY29uc3QgaGFzVHlwZUNoYW5nZWQgPSBuZXdUeXBlICE9PSBvbGRUeXBlO1xuICAgICAgICAgICAgY29uc3QgaGFzQ2hhbmdlZCA9IGNoZWNrVGFnVmFsdWVDaGFuZ2UodmFsdWUsIGNvbnRleHQpO1xuICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHRoZSB0YWdDb252ZXJzaW9uIGl0c2VsZiBoYXMgY2hhbmdlZFxuICAgICAgICAgICAgY29uc3QgY2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgaGFzVHlwZUNoYW5nZWQgfHwgb3ZlcnJpZGVUYWdWYXIuaGFzVmFsdWVDaGFuZ2VkKGNvbnZlcnRWYWx1ZSwgY29udGV4dCwgLy8gYWthIGNvbnRleHRJdGVtLFxuICAgICAgICAgICAgc3VwcG9ydCk7XG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIG92ZXJyaWRlVGFnVmFyLmRlc3Ryb3koY29udGV4dCwgc3VwcG9ydCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlVG9EaWZmVmFsdWUodmFsdWUsIGNvbnRleHQsIC8vIG5ld0NvbnRleHRcbiAgICAgICAgICAgICAgICBvd25lclN1cHBvcnQsIDc4OSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q29udGV4dC52YWx1ZS5wcm9wcyA9IGNhc3RQcm9wcyh2YWx1ZS5wcm9wcywgb3duZXJTdXBwb3J0LCAxKTtcbiAgICAgICAgICAgIG5ld0NvbnRleHQudXBkYXRlc0hhbmRsZXIgPSBjb250ZXh0LnVwZGF0ZXNIYW5kbGVyO1xuICAgICAgICAgICAgaWYgKGNvbnRleHQudXBkYXRlc0hhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVzSGFuZGxlciA9IGNvbnRleHQudXBkYXRlc0hhbmRsZXI7XG4gICAgICAgICAgICAgICAgdXBkYXRlc0hhbmRsZXIobmV3Q29udGV4dC52YWx1ZS5wcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUoY29udmVydFZhbHVlLCBuZXdDb250ZXh0LCBzdXBwb3J0LCBbXSk7XG4gICAgICAgICAgICBuZXdDb250ZXh0LnZhbHVlID0gY29udmVydFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IChfdmFsdWUsIF9jb250ZXh0SXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBjb250ZXh0LnRvUmVuZGVyIHx8IGNvbnRleHQucmV0dXJuVmFsdWU7XG4gICAgICAgICAgICBjb25zdCBjaGVja1Jlc3VsdCA9IG5ld0NvbnRleHQudGFnSnNWYXIuaGFzVmFsdWVDaGFuZ2VkKG5ld1ZhbHVlLCBuZXdDb250ZXh0LCBzdXBwb3J0KTtcbiAgICAgICAgICAgIHJldHVybiBjaGVja1Jlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdHJveTogKGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpID0+IHtcbiAgICAgICAgICAgICsrY29udGV4dC51cGRhdGVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ld0NvbnRleHQudGFnSnNWYXIuZGVzdHJveShuZXdDb250ZXh0LCBzdXBwb3J0KTtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGFmdGVyRGVzdHJveShjb250ZXh0LCBvd25lclN1cHBvcnQpO1xuICAgICAgICAgICAgICAgICAgICBwYWludCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFmdGVyRGVzdHJveShjb250ZXh0LCBvd25lclN1cHBvcnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gb3ZlcnJpZGVUYWdWYXI7XG59XG5mdW5jdGlvbiBhZnRlckRlc3Ryb3koY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgZGVsZXRlIGNvbnRleHQucmV0dXJuVmFsdWU7XG4gICAgZGVsZXRlIGNvbnRleHQudG9SZW5kZXI7XG4gICAgZGVsZXRlIGNvbnRleHQuZ2xvYmFsIC8vID0ge30gYXMgYW55O1xuICAgIDtcbiAgICBjb250ZXh0LmNvbnRleHRzID0gW107XG4gICAgO1xuICAgIGNvbnRleHQuaHRtbERvbU1ldGEgPSBbXTtcbiAgICBkZWxldGUgY29udGV4dC51cGRhdGVzSGFuZGxlcjtcbiAgICAvLyBjb250ZXh0LnZhbHVlLmRlc3Ryb3koY29udGV4dCwgb3duZXJTdXBwb3J0KVxufVxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NGaXJzdFN1YmplY3RDb21wb25lbnQodGVtcGxhdGVyLCBzdWJqZWN0LCBvd25lclN1cHBvcnQsIGFwcGVuZFRvKSB7XG4gICAgY29uc3Qgc3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnRXaXRoUHJvcHModGVtcGxhdGVyLCBzdWJqZWN0LCBvd25lclN1cHBvcnQpO1xuICAgIC8vIERJU0NPVkVSIElGIHRhZygpIGRpZCBOT1QgcmV0dXJuIGRvbXxodG1sXG4gICAgY29uc3QgdGFnID0gc3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIGlmICghWydkb20nLCAnaHRtbCddLmluY2x1ZGVzKHRhZy50YWdKc1R5cGUpKSB7XG4gICAgICAgIHJldHVybiBjb252ZXJ0VGFnVG9FbGVtZW50TWFuYWdlZChzdXBwb3J0LCBvd25lclN1cHBvcnQsIHN1YmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc0ZpcnN0VGFnUmVzdWx0KHN1cHBvcnQsIGFwcGVuZFRvKTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M1Mzc0MjY6IFtbXV0gfTtcbiIsImltcG9ydCB7IGJ1aWxkQmVmb3JlRWxlbWVudCB9IGZyb20gJy4uLy4uL3JlbmRlci9idWlsZEJlZm9yZUVsZW1lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcGFpbnRBcHBlbmQsIHBhaW50QXBwZW5kcyB9IGZyb20gJy4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0ZpcnN0VGFnUmVzdWx0KHN1cHBvcnQsIGFwcGVuZFRvKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRCZWZvcmVFbGVtZW50KHN1cHBvcnQsIGFwcGVuZFRvLCB1bmRlZmluZWQpO1xuICAgIGZvciAoY29uc3QgZG9tIG9mIHJlc3VsdC5kb20pIHtcbiAgICAgICAgaWYgKGRvbS5kb21FbGVtZW50KSB7XG4gICAgICAgICAgICBwYWludEFwcGVuZHMucHVzaChbcGFpbnRBcHBlbmQsIFthcHBlbmRUbywgZG9tLmRvbUVsZW1lbnRdXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvbS5tYXJrZXIpIHtcbiAgICAgICAgICAgIHBhaW50QXBwZW5kcy5wdXNoKFtwYWludEFwcGVuZCwgW2FwcGVuZFRvLCBkb20ubWFya2VyXV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgcHJvY2Vzc0ZpcnN0U3ViamVjdENvbXBvbmVudCwgcHJvY2Vzc1JlcGxhY2VtZW50Q29tcG9uZW50IH0gZnJvbSAnLi9wcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldE5ld0dsb2JhbCB9IGZyb20gJy4vZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGFnQ29tcG9uZW50SW5pdCh2YWx1ZSwgY29udGV4dEl0ZW0sIC8vIGNvdWxkIGJlIHRhZyB2aWEgcmVzdWx0LnRhZ1xub3duZXJTdXBwb3J0LCAvLyBvd25pbmdTdXBwb3J0XG5faW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50KHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbyk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzUmVwbGFjZW1lbnRDb21wb25lbnQodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpO1xufVxuIiwiaW1wb3J0IHsgcGFpbnQsIHBhaW50aW5nIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbmRlclN1cHBvcnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyVGFnVXBkYXRlQXJyYXkoc3VwcG9ydHMpIHtcbiAgICArK3BhaW50aW5nLmxvY2tzO1xuICAgIHN1cHBvcnRzLmZvckVhY2gobWFwVGFnVXBkYXRlKTtcbiAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgIHBhaW50KCk7XG59XG5mdW5jdGlvbiBtYXBUYWdVcGRhdGUoc3VwcG9ydCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBzdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3QgZ2xvYmFsID0gY29udGV4dC5nbG9iYWw7XG4gICAgaWYgKCFnbG9iYWwpIHtcbiAgICAgICAgY29udGV4dC50YWdKc1Zhci5wcm9jZXNzVXBkYXRlKGNvbnRleHQudmFsdWUsIGNvbnRleHQsIHN1cHBvcnQub3duZXJTdXBwb3J0LCBbXSk7XG4gICAgICAgIHJldHVybjsgLy8gd2hpbGUgcmVuZGVyaW5nIGEgcGFyZW50LCBhIGNoaWxkIG1heSBoYXZlIGJlZW4gZGVsZXRlZCAocGluYm93bClcbiAgICB9XG4gICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICByZW5kZXJTdXBwb3J0KHN0YXRlTWV0YS5uZXdlc3QpO1xufVxuIiwiLyoqIEZpbGUgbGFyZ2VseSByZXNwb25zaWJsZSBmb3IgcmVhY3RpbmcgdG8gZWxlbWVudCBldmVudHMsIHN1Y2ggYXMgb25jbGljayAqL1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBnZXRVcFRhZ3MgfSBmcm9tICcuL2dldFVwVGFncy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdVcGRhdGVBcnJheSB9IGZyb20gJy4vcmVuZGVyVGFnQXJyYXkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc3luY1N1cHBvcnRzIH0gZnJvbSAnLi4vLi4vc3RhdGUvc3luY1N0YXRlcy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tUb1Jlc29sdmVQcm9taXNlKGNhbGxiYWNrUmVzdWx0LCBsYXN0LCB7IHJlc29sdmVQcm9taXNlLCByZXNvbHZlVmFsdWUgfSkge1xuICAgIGNvbnN0IGlzUHJvbSA9IGlzUHJvbWlzZShjYWxsYmFja1Jlc3VsdCk7XG4gICAgaWYgKGlzUHJvbSkge1xuICAgICAgICBjb25zdCBzdWJqZWN0ID0gbGFzdC5jb250ZXh0O1xuICAgICAgICBzdWJqZWN0LmxvY2tlZCA9IDI7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1Jlc3VsdC50aGVuKHRoZW5SZXNvbHZlQnkobGFzdCwgcmVzb2x2ZVByb21pc2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVWYWx1ZShjYWxsYmFja1Jlc3VsdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhlblJlc29sdmVCeShsYXN0LCByZXNvbHZlUHJvbWlzZSkge1xuICAgIHJldHVybiAoeCkgPT4ge1xuICAgICAgICBjb25zdCBnbG9iYWwgPSBsYXN0LmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICAvL2NsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgICAgICBjb25zdCBzdWJqZWN0ID0gbGFzdC5jb250ZXh0O1xuICAgICAgICBkZWxldGUgc3ViamVjdC5sb2NrZWQ7XG4gICAgICAgIGlmIChnbG9iYWwuZGVsZXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKHgpOyAvLyB0YWcgd2FzIGRlbGV0ZWQgZHVyaW5nIGV2ZW50IHByb2Nlc3NpbmdcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgcHJvbWlzZSBtYXkgaGF2ZSB0aGVuIGNoYW5nZWQgb2xkIHZhcmlhYmxlcywgbGV0cyB1cGRhdGUgZm9yd2FyZFxuICAgICAgICBzeW5jU3VwcG9ydHMobGFzdCwgc3ViamVjdC5zdGF0ZS5uZXdlc3QpO1xuICAgICAgICBjb25zdCB0YWdzVG9VcGRhdGUgPSBnZXRVcFRhZ3MobGFzdCk7XG4gICAgICAgIHJlbmRlclRhZ1VwZGF0ZUFycmF5KHRhZ3NUb1VwZGF0ZSk7XG4gICAgICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSh4KTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbi8qKiBVc2VkIGZvciB2YXJpYWJsZXMgdGhhdCBuZWVkIHRvIHJlbWFpbiB0aGUgc2FtZSB2YXJpYWJsZSBkdXJpbmcgcmVuZGVyIHBhc3NlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlKGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuaGFuZGxlcnMuaGFuZGxlcihkZWZhdWx0VmFsdWUpO1xufVxuIiwiaW1wb3J0IHsgdGFnIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgY2hlY2tUb1Jlc29sdmVQcm9taXNlIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9jaGVja1RvUmVzb2x2ZVByb21pc2UuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4vc3RhdGUuZnVuY3Rpb24uanMnO1xuLyoqIHJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiBvbmUgdGltZSBhbmQgbmV2ZXIgYWdhaW4uIFNhbWUgYXMgY2FsbGluZyBzdGF0ZSgoKSA9PiAuLi4pICovXG5leHBvcnQgZnVuY3Rpb24gb25Jbml0KGNhbGxiYWNrKSB7XG4gICAgc3RhdGUoKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgaWYgKGNvbnRleHQuZ2xvYmFsKSB7XG4gICAgICAgICAgICBjb25zdCBub3dTdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICAgICAgICAgIHJldHVybiBjaGVja1RvUmVzb2x2ZVByb21pc2UocmVzdWx0LCBub3dTdXBwb3J0LCB7IHJlc29sdmVQcm9taXNlLCByZXNvbHZlVmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGFnO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UoeCkge1xuICAgIHJldHVybiB4O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKHgpIHtcbiAgICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7IHN0YXRlIH0gZnJvbSBcIi4vc3RhdGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGdldENvbnRleHRJbkN5Y2xlIH0gZnJvbSBcIi4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHRhZyB9IGZyb20gXCIuLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gb25EZXN0cm95KGNhbGxiYWNrKSB7XG4gICAgc3RhdGUoZnVuY3Rpb24gc3RhdGVEZXN0cm95KCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgY29udGV4dC5kZXN0cm95JC50b0NhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFnO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgY2FsbGJhY2ssIHNldFVzZU1lbW9yeSwgc3RhdGUgfSBmcm9tICcuLi9zdGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRUZW1wbGF0ZXJSZXN1bHQgfSBmcm9tICcuLi90YWcvZ2V0VGVtcGxhdGVyUmVzdWx0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRhZ3MgfSBmcm9tICcuLi90YWcvdGFnLnV0aWxzLmpzJztcbmltcG9ydCB7IGdldFRhZ1dyYXAgfSBmcm9tICcuLi90YWcvZ2V0VGFnV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzUmVuZGVyT25jZUluaXQgfSBmcm9tICcuLi9yZW5kZXIvdXBkYXRlL3Byb2Nlc3NSZW5kZXJPbmNlSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnQ29tcG9uZW50SW5pdCB9IGZyb20gJy4uL3RhZy91cGRhdGUvcHJvY2Vzc1RhZ0NvbXBvbmVudEluaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4uL3RhZy9jaGVja1RhZ1ZhbHVlQ2hhbmdlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSB9IGZyb20gJy4uL3RhZy9kZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0uZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS90YWdWYWx1ZVVwZGF0ZUhhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUsIGdldEVsZW1lbnQgYXMgZ2V0VGFnRWxlbWVudCB9IGZyb20gJy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnSW5qZWN0IH0gZnJvbSAnLi90YWdJbmplY3QuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgb25Jbml0IGFzIHRhZ09uSW5pdCB9IGZyb20gJy4uL3N0YXRlL29uSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBvbkRlc3Ryb3kgYXMgdGFnT25EZXN0cm95IH0gZnJvbSAnLi4vc3RhdGUvb25EZXN0cm95LmZ1bmN0aW9uLmpzJztcbmxldCB0YWdDb3VudCA9IDA7XG5jb25zdCBvbkNsaWNrID0gbWFrZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyk7XG5jb25zdCBvbk1vdXNlRG93biA9IG1ha2VFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nKTtcbmZ1bmN0aW9uIG1ha2VFdmVudExpc3RlbmVyKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcih0b0JlQ2FsbGVkKSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZWQgPSBjYWxsYmFjayh0b0JlQ2FsbGVkKTtcbiAgICAgICAgLy8gcnVuIG9uZSB0aW1lXG4gICAgICAgIHN0YXRlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRUYWdFbGVtZW50KCk7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgd3JhcHBlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd3JhcHBlZDsgLy8gdGhpcyBpcyB3aGF0IHlvdSByZW1vdmVcbiAgICB9O1xufVxuY29uc3QgdGFnRWxlbWVudCA9IHtcbiAgICBnZXQ6IGdldFRhZ0VsZW1lbnQsXG4gICAgb25jbGljazogb25DbGljayxcbiAgICBjbGljazogb25DbGljayxcbiAgICBvbkNsaWNrLFxuICAgIG1vdXNlZG93bjogb25Nb3VzZURvd24sXG4gICAgb25tb3VzZWRvd246IG9uTW91c2VEb3duLFxuICAgIG9uTW91c2VEb3duOiBvbk1vdXNlRG93bixcbn07XG5kZWZpbmVHZXRTZXQoJ29uY2xpY2snLCBvbkNsaWNrKTtcbmRlZmluZUdldFNldCgnY2xpY2snLCBvbkNsaWNrKTtcbmRlZmluZUdldFNldCgnb25Nb3VzZURvd24nLCBvbk1vdXNlRG93bik7XG5kZWZpbmVHZXRTZXQoJ29ubW91c2Vkb3duJywgb25Nb3VzZURvd24pO1xuZGVmaW5lR2V0U2V0KCdtb3VzZWRvd24nLCBvbk1vdXNlRG93bik7XG5mdW5jdGlvbiBkZWZpbmVHZXRTZXQobmFtZSwgZXZlbnRGbikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsIG5hbWUsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50Rm47XG4gICAgICAgIH0sXG4gICAgICAgIHNldChmbikge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50Rm4oZm4pO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqIEhvdyB0byBoYW5kbGUgY2hlY2tpbmcgZm9yIHByb3AgY2hhbmdlcyBha2EgYXJndW1lbnQgY2hhbmdlcyAqL1xuZXhwb3J0IHZhciBQcm9wV2F0Y2hlcztcbihmdW5jdGlvbiAoUHJvcFdhdGNoZXMpIHtcbiAgICBQcm9wV2F0Y2hlc1tcIkRFRVBcIl0gPSBcImRlZXBcIjtcbiAgICAvKiogY2hlY2tzIGFsbCB2YWx1ZXMgdXAgdG8gMiBsZXZlbHMgZGVlcCAqL1xuICAgIFByb3BXYXRjaGVzW1wiU0hBTExPV1wiXSA9IFwic2hhbGxvd1wiO1xuICAgIFByb3BXYXRjaGVzW1wiTk9ORVwiXSA9IFwibm9uZVwiO1xuICAgIFByb3BXYXRjaGVzW1wiSU1NVVRBQkxFXCJdID0gXCJpbW11dGFibGVcIjtcbn0pKFByb3BXYXRjaGVzIHx8IChQcm9wV2F0Y2hlcyA9IHt9KSk7XG4vKiogV3JhcHMgYSBmdW5jdGlvbiB0YWcgaW4gYSBzdGF0ZSBtYW5hZ2VyIGFuZCBjYWxscyB3cmFwcGVkIGZ1bmN0aW9uIG9uIGV2ZW50IGN5Y2xlc1xuICogRm9yIHNpbmdsZSByZW5kZXJpbmcsIG5vIGV2ZW50IGN5Y2xlcywgdXNlOiB0YWcucmVuZGVyT25jZSA9IChwcm9wcykgPT4gaHRtbGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWcodGFnQ29tcG9uZW50LCBwcm9wV2F0Y2ggPSBQcm9wV2F0Y2hlcy5TSEFMTE9XKSB7XG4gICAgLyoqIGZ1bmN0aW9uIGRldmVsb3BlciB0cmlnZ2VycyAqL1xuICAgIGNvbnN0IHBhcmVudFdyYXAgPSBmdW5jdGlvbiB0YWdXcmFwcGVyKC4uLnByb3BzKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlciA9IGdldFRlbXBsYXRlclJlc3VsdChwcm9wV2F0Y2gsIHByb3BzKTtcbiAgICAgICAgdGVtcGxhdGVyLnRhZ0pzVHlwZSA9IFZhbHVlVHlwZXMudGFnQ29tcG9uZW50O1xuICAgICAgICB0ZW1wbGF0ZXIucHJvY2Vzc0luaXQgPSBwcm9jZXNzVGFnQ29tcG9uZW50SW5pdDtcbiAgICAgICAgdGVtcGxhdGVyLmhhc1ZhbHVlQ2hhbmdlZCA9IGNoZWNrVGFnVmFsdWVDaGFuZ2VBbmRVcGRhdGU7XG4gICAgICAgIC8vIGF0dGFjaCBtZW1vcnkgYmFjayB0byBvcmlnaW5hbCBmdW5jdGlvbiB0aGF0IGNvbnRhaW5zIGRldmVsb3BlciBkaXNwbGF5IGxvZ2ljXG4gICAgICAgIGNvbnN0IGlubmVyVGFnV3JhcCA9IGdldFRhZ1dyYXAodGVtcGxhdGVyLCBwYXJlbnRXcmFwKTtcbiAgICAgICAgaW5uZXJUYWdXcmFwLm9yaWdpbmFsID0gdGFnQ29tcG9uZW50O1xuICAgICAgICB0ZW1wbGF0ZXIud3JhcHBlciA9IGlubmVyVGFnV3JhcDtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlcjtcbiAgICB9OyAvLyB3ZSBvdmVycmlkZSB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgYW5kIHByZXRlbmQgb3JpZ2luYWwgaXMgd2hhdCdzIHJldHVybmVkXG4gICAgY29uc3QgdGFnID0gdGFnQ29tcG9uZW50O1xuICAgIHBhcmVudFdyYXAub3JpZ2luYWwgPSB0YWdDb21wb25lbnQ7XG4gICAgLy8gZ3JvdXAgdGFncyB0b2dldGhlciBhbmQgaGF2ZSBobXIgcGlja3VwXG4gICAgdGFnLnRhZ3MgPSB0YWdzO1xuICAgIHRhZy5zZXRVc2UgPSBzZXRVc2VNZW1vcnk7XG4gICAgdGFnLlZhbHVlVHlwZXMgPSBWYWx1ZVR5cGVzO1xuICAgIHRhZy50YWdJbmRleCA9IHRhZ0NvdW50Kys7IC8vIG5lZWRlZCBmb3IgdGhpbmdzIGxpa2UgSE1SXG4gICAgdGFncy5wdXNoKHBhcmVudFdyYXApO1xuICAgIGNvbnN0IHJldHVybldyYXAgPSBwYXJlbnRXcmFwO1xuICAgIC8vIHVzZWQgZm9yIGFyZ3VtZW50IHVwZGF0ZXNcbiAgICByZXR1cm5XcmFwLnVwZGF0ZXMgPSByZXR1cm5XcmFwLmlucHV0cyA9IChoYW5kbGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgICAgICBjb250ZXh0LnVwZGF0ZXNIYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gcmV0dXJuV3JhcDtcbn1cbi8qKiBVc2UgdG8gc3RydWN0dXJlIGFuZCBkZWZpbmUgYSBicm93c2VyIHRhZyByb3V0ZSBoYW5kbGVyXG4gKiBFeGFtcGxlOiBleHBvcnQgZGVmYXVsdCB0YWcucm91dGUgPSAocm91dGVQcm9wczogUm91dGVQcm9wcykgPT4gKHN0YXRlKSA9PiBodG1sYGBcbiAqL1xuZnVuY3Rpb24gcm91dGVGbihfcm91dGVQcm9wcykge1xuICAgIHRocm93IG5ldyBFcnJvcignRG8gbm90IGNhbGwgdGFnLnJvdXRlIGFzIGEgZnVuY3Rpb24gYnV0IGluc3RlYWQgc2V0IGl0IGFzOiBgdGFnLnJvdXRlID0gKHJvdXRlUHJvcHM6IFJvdXRlUHJvcHMpID0+IChzdGF0ZSkgPT4gaHRtbGBgIGAnKTtcbn1cbmZ1bmN0aW9uIHJlbmRlck9uY2VGbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvIG5vdCBjYWxsIHRhZy5yZW5kZXJPbmNlIGFzIGEgZnVuY3Rpb24gYnV0IGluc3RlYWQgc2V0IGl0IGFzOiBgKHByb3BzKSA9PiB0YWcucmVuZGVyT25jZSA9ICgpID0+IGh0bWxgYCBgJyk7XG59XG4vKiogVXNlZCB0byBjcmVhdGUgdmFyaWFibGUgc2NvcGluZyB3aGVuIGNhbGxpbmcgYSBmdW5jdGlvbiB0aGF0IGxpdmVzIHdpdGhpbiBhIHByb3AgY29udGFpbmVyIGZ1bmN0aW9uICovXG5mdW5jdGlvbiB0YWdVc2VGbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvIG5vdCBjYWxsIHRhZy51c2UgYXMgYSBmdW5jdGlvbiBidXQgaW5zdGVhZCBzZXQgaXQgYXM6IGAocHJvcHMpID0+IHRhZy51c2UgPSAodXNlKSA9PiBodG1sYGAgYCcpO1xufVxuLy8gYWN0dWFsbHkgcGxhY2luZyBvZiBpdGVtcyBpbnRvIHRhZyBtZW1vcnlcbjtcbnRhZy5lbGVtZW50ID0gdGFnRWxlbWVudDtcbnRhZy5yZW5kZXJPbmNlID0gcmVuZGVyT25jZUZuO1xudGFnLnVzZSA9IHRhZ1VzZUZuO1xudGFnLmRlZXBQcm9wV2F0Y2ggPSB0YWc7XG50YWcucm91dGUgPSByb3V0ZUZuO1xudGFnLmluamVjdCA9IHRhZ0luamVjdDtcbnRhZy5vbkluaXQgPSB0YWdPbkluaXQ7XG50YWcub25EZXN0cm95ID0gdGFnT25EZXN0cm95O1xudGFnLmFwcCA9IGZ1bmN0aW9uIChfcm91dGVUYWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvIG5vdCBjYWxsIHRhZy5yb3V0ZSBhcyBhIGZ1bmN0aW9uIGJ1dCBpbnN0ZWFkIHNldCBpdCBhczogYHRhZy5yb3V0ZSA9IChyb3V0ZVByb3BzOiBSb3V0ZVByb3BzKSA9PiAoc3RhdGUpID0+IGh0bWxgYCBgJyk7XG59O1xudGFnLmltbXV0YWJsZVByb3BzID0gZnVuY3Rpb24gaW1tdXRhYmxlUHJvcHModGFnQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIHRhZyh0YWdDb21wb25lbnQsIFByb3BXYXRjaGVzLklNTVVUQUJMRSk7XG59O1xudGFnLndhdGNoUHJvcHMgPSBmdW5jdGlvbiB3YXRjaFByb3BzKHRhZ0NvbXBvbmVudCkge1xuICAgIHJldHVybiB0YWcodGFnQ29tcG9uZW50LCBQcm9wV2F0Y2hlcy5TSEFMTE9XKTtcbn07XG4vKiBCRUxPVzogQ2FzdCBmdW5jdGlvbnMgaW50byBzZXR0ZXJzIHdpdGggbm8gZ2V0dGVycyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhZywgJ3JlbmRlck9uY2UnLCB7XG4gICAgc2V0KG9uZVJlbmRlckZ1bmN0aW9uKSB7XG4gICAgICAgIG9uZVJlbmRlckZ1bmN0aW9uLnRhZ0pzVHlwZSA9IFZhbHVlVHlwZXMucmVuZGVyT25jZTtcbiAgICAgICAgb25lUmVuZGVyRnVuY3Rpb24ucHJvY2Vzc0luaXQgPSBwcm9jZXNzUmVuZGVyT25jZUluaXQ7XG4gICAgICAgIG9uZVJlbmRlckZ1bmN0aW9uLnByb2Nlc3NVcGRhdGUgPSB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXI7XG4gICAgICAgIG9uZVJlbmRlckZ1bmN0aW9uLmRlc3Ryb3kgPSBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW07XG4gICAgICAgIG9uZVJlbmRlckZ1bmN0aW9uLmhhc1ZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIHJlbmRlck9uY2VOZXZlckNoYW5nZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkodGFnLCAndXNlJywge1xuICAgIHNldChyZW5kZXJGdW5jdGlvbikge1xuICAgICAgICByZW5kZXJGdW5jdGlvbi5vcmlnaW5hbCA9IHtcbiAgICAgICAgICAgIHNldFVzZTogc2V0VXNlTWVtb3J5LFxuICAgICAgICAgICAgdGFncyxcbiAgICAgICAgfTtcbiAgICAgICAgcmVuZGVyRnVuY3Rpb24udGFnSnNUeXBlID0gVmFsdWVUeXBlcy5zdGF0ZVJlbmRlcjtcbiAgICAgICAgcmVuZGVyRnVuY3Rpb24ucHJvY2Vzc0luaXQgPSBwcm9jZXNzVGFnQ29tcG9uZW50SW5pdDtcbiAgICAgICAgcmVuZGVyRnVuY3Rpb24ucHJvY2Vzc1VwZGF0ZSA9IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcjtcbiAgICAgICAgcmVuZGVyRnVuY3Rpb24uaGFzVmFsdWVDaGFuZ2VkID0gY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZTtcbiAgICAgICAgcmVuZGVyRnVuY3Rpb24uZGVzdHJveSA9IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbTtcbiAgICB9LFxufSk7XG4iLCJpbXBvcnQgeyBkZWVwRXF1YWwgfSBmcm9tICcuLi9kZWVwRnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCwgaW1tdXRhYmxlUHJvcE1hdGNoIH0gZnJvbSAnLi4vdGFnL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNoYWxsb3dQcm9wTWF0Y2ggfSBmcm9tICcuLi90YWcvc2hhbGxvd1Byb3BNYXRjaC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZW5kZXJVcCh0ZW1wbGF0ZXIsIHN1cHBvcnQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBzdXBwb3J0LmNvbnRleHQuZ2xvYmFsO1xuICAgIGlmIChnbG9iYWwgJiYgZ2xvYmFsLmRlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBzZWxmUHJvcENoYW5nZSA9IGhhc1Byb3BzVG9Pd25lckNoYW5nZWQodGVtcGxhdGVyLCBzdXBwb3J0KTtcbiAgICAvLyByZW5kZXIgb3duZXIgdXAgZmlyc3QgYW5kIHRoYXQgd2lsbCBjYXVzZSBtZSB0byByZS1yZW5kZXJcbiAgICBpZiAoc2VsZlByb3BDaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKiBVc2VkIHdoZW4gY3Jhd2xpbmcgdXAgdGhlIGNoYWluIG9mIGNoaWxkLXRvLXBhcmVudCB0YWdzLiBTZWUgaGFzU3VwcG9ydENoYW5nZWQgZm9yIHRoZSBkb3dud2FyZCBkaXJlY3Rpb24gKi9cbmZ1bmN0aW9uIGhhc1Byb3BzVG9Pd25lckNoYW5nZWQodGVtcGxhdGVyLCBzdXBwb3J0KSB7XG4gICAgY29uc3Qgbm93UHJvcHMgPSB0ZW1wbGF0ZXIucHJvcHM7XG4gICAgY29uc3QgcHJvcHNDb25maWcgPSBzdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIGNvbnN0IGxhdGVzdFByb3BzID0gcHJvcHNDb25maWcubGF0ZXN0O1xuICAgIGNvbnN0IGNvbXBhcmVMZW4gPSBoYXNQcm9wTGVuZ3Roc0NoYW5nZWQobm93UHJvcHMsIGxhdGVzdFByb3BzKTtcbiAgICBpZiAoY29tcGFyZUxlbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc3dpdGNoICh0ZW1wbGF0ZXIucHJvcFdhdGNoKSB7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuSU1NVVRBQkxFOlxuICAgICAgICAgICAgcmV0dXJuIGltbXV0YWJsZVByb3BNYXRjaChub3dQcm9wcywgbGF0ZXN0UHJvcHMpO1xuICAgICAgICBjYXNlIFByb3BXYXRjaGVzLlNIQUxMT1c6XG4gICAgICAgICAgICByZXR1cm4gc2hhbGxvd1Byb3BNYXRjaChub3dQcm9wcywgbGF0ZXN0UHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gIWRlZXBFcXVhbChub3dQcm9wcywgbGF0ZXN0UHJvcHMsIGRlZXBDb21wYXJlRGVwdGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BMZW5ndGhzQ2hhbmdlZChub3dQcm9wcywgbGF0ZXN0UHJvcHMpIHtcbiAgICBjb25zdCBub3dMZW4gPSBub3dQcm9wcy5sZW5ndGg7XG4gICAgY29uc3QgbGF0ZXN0TGVuID0gbGF0ZXN0UHJvcHMubGVuZ3RoO1xuICAgIHJldHVybiBub3dMZW4gIT09IGxhdGVzdExlbjtcbn1cbiIsImltcG9ydCB7IGRlZXBFcXVhbCB9IGZyb20gJy4uL2RlZXBGdW5jdGlvbnMuanMnO1xuaW1wb3J0IHsgZGVlcENvbXBhcmVEZXB0aCwgaW1tdXRhYmxlUHJvcE1hdGNoIH0gZnJvbSAnLi9oYXNTdXBwb3J0Q2hhbmdlZC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzaGFsbG93UHJvcE1hdGNoIH0gZnJvbSAnLi9zaGFsbG93UHJvcE1hdGNoLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFByb3BXYXRjaGVzIH0gZnJvbSAnLi4vdGFnSnNWYXJzL3RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgaGFzUHJvcExlbmd0aHNDaGFuZ2VkIH0gZnJvbSAnLi4vcmVuZGVyL2NoZWNrUmVuZGVyVXAuZnVuY3Rpb24uanMnO1xuLyoqXG4gKlxuICogQHBhcmFtIHByb3BzXG4gKiBAcGFyYW0gcGFzdENsb25lUHJvcHNcbiAqIEByZXR1cm5zIFdIRU4gbnVtYmVyIHRoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLiBXSEVOIGZhbHNlIHByb3BzIGhhdmUgbm90IGNoYW5nZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3BDaGFuZ2VzKHByb3BzLCAvLyBuYXR1cmFsIHByb3BzXG5wYXN0Q2xvbmVQcm9wcywgLy8gcHJldmlvdXNseSBjbG9uZWQgcHJvcHNcbnByb3BXYXRjaCkge1xuICAgIGNvbnN0IGhhc0xlbkNoYW5nZWQgPSBoYXNQcm9wTGVuZ3Roc0NoYW5nZWQocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbiAgICBpZiAoaGFzTGVuQ2hhbmdlZCkge1xuICAgICAgICByZXR1cm4gMTE7XG4gICAgfVxuICAgIHN3aXRjaCAocHJvcFdhdGNoKSB7XG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuTk9ORTpcbiAgICAgICAgICAgIHJldHVybiAxOyAvLyBhbHdheXMgcmVuZGVyXG4gICAgICAgIGNhc2UgUHJvcFdhdGNoZXMuU0hBTExPVzogLy8gZGV0ZXJtaW5pbmcgZXF1YWwgaXMgc2FtZSBhcyBpbW11dGFibGUsIGl0cyB0aGUgcHJldmlvdXMgY2xvbmluZyBzdGVwIHRoYXRzIGRpZmZlcmVudFxuICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3dQcm9wTWF0Y2gocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbiAgICAgICAgY2FzZSBQcm9wV2F0Y2hlcy5JTU1VVEFCTEU6XG4gICAgICAgICAgICByZXR1cm4gaW1tdXRhYmxlUHJvcE1hdGNoKHByb3BzLCBwYXN0Q2xvbmVQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBkZWVwUHJvcENoYW5nZUNvbXBhcmUocHJvcHMsIHBhc3RDbG9uZVByb3BzKTtcbn1cbmZ1bmN0aW9uIGRlZXBQcm9wQ2hhbmdlQ29tcGFyZShwcm9wcywgcGFzdENsb25lUHJvcHMpIHtcbiAgICAvLyBERUVQIHdhdGNoXG4gICAgbGV0IGNhc3RlZFByb3BzID0gcHJvcHM7XG4gICAgbGV0IGNhc3RlZFBhc3RQcm9wcyA9IHBhc3RDbG9uZVByb3BzO1xuICAgIGNhc3RlZFByb3BzID0gWy4uLnByb3BzXTtcbiAgICBjYXN0ZWRQYXN0UHJvcHMgPSBbLi4uKHBhc3RDbG9uZVByb3BzIHx8IFtdKV07XG4gICAgY29uc3QgYWxsRnVuY3Rpb25zTWF0Y2ggPSBjYXN0ZWRQcm9wcy5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiBvbmVQcm9wQ29tcGFyZSh2YWx1ZSwgaW5kZXgsIGNhc3RlZFByb3BzLCBjYXN0ZWRQYXN0UHJvcHMpKTtcbiAgICBpZiAoIWFsbEZ1bmN0aW9uc01hdGNoKSB7XG4gICAgICAgIHJldHVybiA3OyAvLyBhIGNoYW5nZSBoYXMgYmVlbiBkZXRlY3RlZCBieSBmdW5jdGlvbiBjb21wYXJpc29uc1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBvbmVQcm9wQ29tcGFyZSh2YWx1ZSwgaW5kZXgsIGNhc3RlZFByb3BzLCBjYXN0ZWRQYXN0UHJvcHMpIHtcbiAgICBjb25zdCBjb21wYXJlID0gY2FzdGVkUGFzdFByb3BzW2luZGV4XTtcbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IEJhc2ljVHlwZXMub2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IHN1YkNhc3RlZFByb3BzID0geyAuLi52YWx1ZSB9O1xuICAgICAgICBjb25zdCBzdWJDb21wYXJlUHJvcHMgPSB7IC4uLmNvbXBhcmUgfHwge30gfTtcbiAgICAgICAgY29uc3QgbWF0Y2hlZCA9IE9iamVjdC5lbnRyaWVzKHN1YkNhc3RlZFByb3BzKS5ldmVyeSgoW2tleSwgdmFsdWVdKSA9PiBjb21wYXJlUHJvcHModmFsdWUsIHN1YkNvbXBhcmVQcm9wc1trZXldLCAoKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgc3ViQ2FzdGVkUHJvcHNba2V5XTsgLy8gaXRzIGEgZnVuY3Rpb24gYW5kIG5vdCBuZWVkZWQgdG8gYmUgY29tcGFyZWRcbiAgICAgICAgICAgIGRlbGV0ZSBzdWJDb21wYXJlUHJvcHNba2V5XTsgLy8gaXRzIGEgZnVuY3Rpb24gYW5kIG5vdCBuZWVkZWQgdG8gYmUgY29tcGFyZWRcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmVQcm9wcyh2YWx1ZSwgY29tcGFyZSwgZnVuY3Rpb24gcHJvcENvbXBhcmVyKCkge1xuICAgICAgICBjYXN0ZWRQcm9wcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBjYXN0ZWRQYXN0UHJvcHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9KTtcbn1cbi8qKiByZXR1cm5pbmcgYSBudW1iZXIgbWVhbnMgdHJ1ZSBnb29kIGNvbXBhcmlzb24gKi9cbmZ1bmN0aW9uIGNvbXBhcmVQcm9wcyh2YWx1ZSwgY29tcGFyZSwgb25EZWxldGUpIHtcbiAgICBpZiAoISh0eXBlb2YgKHZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBFcXVhbCh2YWx1ZSwgY29tcGFyZSwgZGVlcENvbXBhcmVEZXB0aCkgPyA0IDogZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBhcmVGbiA9IGNvbXBhcmU7XG4gICAgaWYgKCEodHlwZW9mIChjb21wYXJlRm4pID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGl0cyBhIGZ1bmN0aW9uIG5vdyBidXQgd2FzIG5vdCBiZWZvcmVcbiAgICB9XG4gICAgLy8gZW5zdXJlIHdlIGFyZSBjb21wYXJpbmcgYXBwbGVzIHRvIGFwcGxlcyBhcyBmdW5jdGlvbiBnZXQgd3JhcHBlZFxuICAgIGNvbnN0IGNvbXBhcmVPcmlnaW5hbCA9IGNvbXBhcmU/Lm9yaWdpbmFsO1xuICAgIGlmIChjb21wYXJlT3JpZ2luYWwpIHtcbiAgICAgICAgY29tcGFyZSA9IGNvbXBhcmVPcmlnaW5hbDtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ2luYWwgPSB2YWx1ZS5vcmlnaW5hbDtcbiAgICBpZiAob3JpZ2luYWwpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5vcmlnaW5hbDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVTdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIGNvbnN0IGNvbXBhcmVTdHJpbmcgPSBjb21wYXJlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbHVlU3RyaW5nID09PSBjb21wYXJlU3RyaW5nKSB7XG4gICAgICAgIG9uRGVsZXRlKCk7XG4gICAgICAgIHJldHVybiA1OyAvLyBib3RoIGFyZSBmdW5jdGlvbiB0aGUgc2FtZVxuICAgIH1cbiAgICBvbkRlbGV0ZSgpO1xuICAgIHJldHVybiA2O1xufVxuIiwiaW1wb3J0IHsgaGFzUHJvcENoYW5nZXMgfSBmcm9tICcuL2hhc1Byb3BDaGFuZ2VzLmZ1bmN0aW9uLmpzJztcbi8qKiBVc2VkIHdoZW4gZGVjaWRpbmcgaWYgYSBzdXBwb3J0IHdpbGwgZXZlbiBjaGFuZ2UgKGFyZSB0aGUgYXJndW1lbnRzIHRoZSBzYW1lPykgKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNTdXBwb3J0Q2hhbmdlZChvbGRTdXBwb3J0LCBuZXdUZW1wbGF0ZXIpIHtcbiAgICBjb25zdCBsYXRlc3RQcm9wcyA9IG5ld1RlbXBsYXRlci5wcm9wcztcbiAgICBjb25zdCBwcm9wc0NvbmZpZyA9IG9sZFN1cHBvcnQucHJvcHNDb25maWc7XG4gICAgY29uc3QgcGFzdENsb25lUHJvcHMgPSBwcm9wc0NvbmZpZy5sYXRlc3Q7XG4gICAgY29uc3QgcHJvcHNDaGFuZ2VkID0gaGFzUHJvcENoYW5nZXMobGF0ZXN0UHJvcHMsIHBhc3RDbG9uZVByb3BzLCBvbGRTdXBwb3J0LnRlbXBsYXRlci5wcm9wV2F0Y2gpO1xuICAgIHJldHVybiBwcm9wc0NoYW5nZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaW1tdXRhYmxlUHJvcE1hdGNoKHByb3BzLCBwYXN0Q2xvbmVQcm9wcykge1xuICAgIC8vIGlmIGV2ZXJ5IHByb3AgdGhlIHNhbWUsIHRoZW4gbm8gY2hhbmdlc1xuICAgIGNvbnN0IGxlbiA9IHByb3BzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyArK2luZGV4KSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpbmRleF07XG4gICAgICAgIGNvbnN0IHBhc3RQcm9wID0gcGFzdENsb25lUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAocHJvcCAhPT0gcGFzdFByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTsgLy8gZmFsc2UgbWVhbnMgaGFzIG5vdCBjaGFuZ2VkXG59XG5leHBvcnQgY29uc3Qgc2hhbGxvd0NvbXBhcmVEZXB0aCA9IDM7XG5leHBvcnQgY29uc3QgZGVlcENvbXBhcmVEZXB0aCA9IDEwO1xuIiwiaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbi8qKiBJbmplY3QgYSBwYXJlbnQgdGFnIG9yIGhvc3QgaW50byB0aGUgY3VycmVudCBjb250ZXh0XG4gKiBGb3IgaG9zdCBmdW5jdGlvbnMsIHJldHVybnMgdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBob3N0IGNhbGxiYWNrXG4gKiBGb3IgdGFnIGNvbXBvbmVudHMsIHJldHVybnMgdGhlIHRhZyBpbnN0YW5jZSBpdHNlbGZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhZ0luamVjdCh0YXJnZXRJdGVtKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRJbkN5Y2xlKCk7XG4gICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGFnLmluamVjdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aGluIGEgdGFnIG9yIGhvc3QgY29udGV4dCcpO1xuICAgIH1cbiAgICAvLyBTZWFyY2ggdXAgdGhlIGNvbnRleHQgdHJlZSBmb3IgYSBtYXRjaGluZyBwYXJlbnRcbiAgICBsZXQgY3VycmVudENvbnRleHQgPSBjb250ZXh0LnBhcmVudENvbnRleHQ7XG4gICAgd2hpbGUgKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYW4gYXR0cmlidXRlcyBjb250ZXh0IHdpdGggY2hpbGQgY29udGV4dHNcbiAgICAgICAgY29uc3QgY29udGV4dHMgPSBjdXJyZW50Q29udGV4dC5jb250ZXh0cztcbiAgICAgICAgaWYgKGNvbnRleHRzKSB7XG4gICAgICAgICAgICAvLyBTZWFyY2ggd2l0aGluIHRoZSBhdHRyaWJ1dGVzIGNvbnRleHRzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJDb250ZXh0IG9mIGNvbnRleHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJDb250ZXh0LmlzQXR0ciAmJiBhdHRyQ29udGV4dC50YWdKc1Zhcj8ubWF0Y2hlc0luamVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIG1hdGNoZXNJbmplY3Rpb24gbWV0aG9kIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ckNvbnRleHQudGFnSnNWYXIubWF0Y2hlc0luamVjdGlvbih0YXJnZXRJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGhvc3QgdmFsdWVzLCByZXR1cm4gdGhlIHJldHVyblZhbHVlIGZyb20gdGhlIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRyQ29udGV4dC5yZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGNvbnRleHQgaGFzIGEgdGFnSnNWYXIgd2l0aCBtYXRjaGVzSW5qZWN0aW9uXG4gICAgICAgIGlmIChjdXJyZW50Q29udGV4dC50YWdKc1Zhcj8ubWF0Y2hlc0luamVjdGlvbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb250ZXh0LnRhZ0pzVmFyLm1hdGNoZXNJbmplY3Rpb24odGFyZ2V0SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgdGFnIGNvbXBvbmVudHMsIHJldHVybiB0aGUgdGFnIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0LnJldHVyblZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmUgdXAgdG8gdGhlIHBhcmVudCBjb250ZXh0XG4gICAgICAgIGN1cnJlbnRDb250ZXh0ID0gY3VycmVudENvbnRleHQucGFyZW50Q29udGV4dDtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IGBDb3VsZCBub3QgZmluZCBwYXJlbnQgY29udGV4dCBmb3IgdGFnLmluamVjdCAke3RhcmdldEl0ZW19YDtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIHsgdGFyZ2V0SXRlbSwgY29udGV4dCB9KTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG4iLCJpbXBvcnQgeyBpc1NraXBQcm9wVmFsdWUgfSBmcm9tICcuLi9wcm9wcy9hbHRlclByb3AuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gJy4uL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyB1cGRhdGVFeGlzdGluZ09iamVjdCB9IGZyb20gJy4vdXBkYXRlRXhpc3RpbmdPYmplY3QuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdXBkYXRlRXhpc3RpbmdBcnJheSB9IGZyb20gJy4vdXBkYXRlRXhpc3RpbmdBcnJheS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gc3luY1ByaW9yUHJvcEZ1bmN0aW9uKHByaW9yUHJvcCwgcHJvcCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCwgZGVwdGgpIHtcbiAgICBpZiAocHJpb3JQcm9wID09PSB1bmRlZmluZWQgfHwgcHJpb3JQcm9wID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cbiAgICAvLyBwcmV2ZW50IGluZmluaXRlIHJlY3Vyc2lvblxuICAgIGlmIChkZXB0aCA+IG1heERlcHRoKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChwcmlvclByb3ApID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIHRoZSBwcm9wIGkgYW0gcmVjZWl2aW5nLCBpcyBhbHJlYWR5IGJlaW5nIG1vbml0b3JlZC9jb250cm9sbGVkIGJ5IGFub3RoZXIgcGFyZW50XG4gICAgICAgIGlmIChwcm9wLm1lbSkge1xuICAgICAgICAgICAgcHJpb3JQcm9wLm1lbSA9IHByb3AubWVtO1xuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgIH1cbiAgICAgICAgcHJpb3JQcm9wLm1lbSA9IHByb3A7XG4gICAgICAgIHJldHVybiBwcmlvclByb3A7XG4gICAgfVxuICAgIGlmIChpc1NraXBQcm9wVmFsdWUocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7IC8vIG5vIGNoaWxkcmVuIHRvIGNyYXdsIHRocm91Z2hcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUV4aXN0aW5nQXJyYXkocHJvcCwgcHJpb3JQcm9wLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIGRlcHRoLCBtYXhEZXB0aCk7XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVFeGlzdGluZ09iamVjdChwcm9wLCBwcmlvclByb3AsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgZGVwdGgsIG1heERlcHRoKTtcbn1cbiIsImltcG9ydCB7IHN5bmNQcmlvclByb3BGdW5jdGlvbiB9IGZyb20gJy4vc3luY1ByaW9yUHJvcEZ1bmN0aW9uLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFeGlzdGluZ0FycmF5KHByb3AsIHByaW9yUHJvcCwgbmV3U3VwcG9ydCwgb3duZXJTdXBwb3J0LCBkZXB0aCwgbWF4RGVwdGgpIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IHByb3AubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICBjb25zdCB4ID0gcHJvcFtpbmRleF07XG4gICAgICAgIGNvbnN0IG9sZFByb3AgPSBwcmlvclByb3BbaW5kZXhdO1xuICAgICAgICBwcm9wW2luZGV4XSA9IHN5bmNQcmlvclByb3BGdW5jdGlvbihvbGRQcm9wLCB4LCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIG1heERlcHRoLCBkZXB0aCArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcDtcbn1cbiIsImltcG9ydCB7IHN5bmNQcmlvclByb3BGdW5jdGlvbiB9IGZyb20gJy4vc3luY1ByaW9yUHJvcEZ1bmN0aW9uLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFeGlzdGluZ09iamVjdChwcm9wLCBwcmlvclByb3AsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgZGVwdGgsIG1heERlcHRoKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3ApO1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBrZXlzKSB7XG4gICAgICAgIGNvbnN0IHN1YlZhbHVlID0gcHJvcFtuYW1lXTtcbiAgICAgICAgY29uc3Qgb2xkUHJvcCA9IHByaW9yUHJvcFtuYW1lXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3luY1ByaW9yUHJvcEZ1bmN0aW9uKG9sZFByb3AsIHN1YlZhbHVlLCBuZXdTdXBwb3J0LCBvd25lclN1cHBvcnQsIG1heERlcHRoLCBkZXB0aCArIDEpO1xuICAgICAgICBpZiAoc3ViVmFsdWUgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzU2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm9wLCBuYW1lKT8uc2V0O1xuICAgICAgICBpZiAoaGFzU2V0dGVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wW25hbWVdID0gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcHJvcDtcbn1cbiIsImltcG9ydCB7IGRlZXBDb21wYXJlRGVwdGgsIGhhc1N1cHBvcnRDaGFuZ2VkLCBzaGFsbG93Q29tcGFyZURlcHRoIH0gZnJvbSAnLi4vLi4vdGFnL2hhc1N1cHBvcnRDaGFuZ2VkLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNhc3RQcm9wcyB9IGZyb20gJy4uLy4uL3RhZy9wcm9wcy9hbHRlclByb3AuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyU3VwcG9ydCB9IGZyb20gJy4uL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnQgfSBmcm9tICcuLi9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuLi8uLi90YWcvdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBpc0xpa2VUYWdzIH0gZnJvbSAnLi4vLi4vdGFnL2lzTGlrZVRhZ3MuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHN5bmNQcmlvclByb3BGdW5jdGlvbiB9IGZyb20gJy4uLy4uL3RhZy91cGRhdGUvc3luY1ByaW9yUHJvcEZ1bmN0aW9uLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFeGlzdGluZ1RhZ0NvbXBvbmVudChvd25lclN1cHBvcnQsIG5ld1N1cHBvcnQsIC8vIGxhc3Rlc3RcbnN1YmplY3QpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBzdWJqZWN0Lmdsb2JhbDtcbiAgICBjb25zdCBvbGRTdXBwb3J0ID0gc3ViamVjdC5zdGF0ZS5uZXdlc3Q7XG4gICAgY29uc3Qgb2xkV3JhcHBlciA9IG9sZFN1cHBvcnQudGVtcGxhdGVyLndyYXBwZXI7XG4gICAgbGV0IG5ld1dyYXBwZXIgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci53cmFwcGVyO1xuICAgIGxldCBpc1NhbWVUYWcgPSBmYWxzZTtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci50YWdKc1R5cGU7XG4gICAgY29uc3Qgc2tpcENvbXBhcmluZyA9IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXIgPT09IHRhZ0pzVHlwZSB8fCBWYWx1ZVR5cGVzLnJlbmRlck9uY2UgPT09IHRhZ0pzVHlwZTtcbiAgICBpZiAoc2tpcENvbXBhcmluZykge1xuICAgICAgICBpc1NhbWVUYWcgPSBuZXdTdXBwb3J0LnRlbXBsYXRlci50YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMucmVuZGVyT25jZSB8fCBpc0xpa2VUYWdzKG9sZFN1cHBvcnQsIG5ld1N1cHBvcnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvbGRXcmFwcGVyICYmIG5ld1dyYXBwZXIpIHtcbiAgICAgICAgLy8gaXMgdGhpcyBwZXJoYXBzIGFuIG91dGVySFRNTCBjb21wYXJlP1xuICAgICAgICBjb25zdCBpbm5lckhUTUwgPSBvbGRTdXBwb3J0LnRlbXBsYXRlci50YWc/Ll9pbm5lckhUTUw7XG4gICAgICAgIGlmIChpbm5lckhUTUwpIHtcbiAgICAgICAgICAgIC8vIG5ld1dyYXBwZXIgPSBpbm5lckhUTUwub3V0ZXJIVE1MIGFzIGFueSBhcyBXcmFwcGVyXG4gICAgICAgICAgICBuZXdXcmFwcGVyID0gbmV3U3VwcG9ydC5vdXRlckhUTUw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkRnVuY3Rpb24gPSBvbGRXcmFwcGVyLm9yaWdpbmFsO1xuICAgICAgICBjb25zdCBuZXdGdW5jdGlvbiA9IG5ld1dyYXBwZXIub3JpZ2luYWw7XG4gICAgICAgIC8vIHN0cmluZyBjb21wYXJlIGJvdGggZnVuY3Rpb25zXG4gICAgICAgIGlzU2FtZVRhZyA9IG9sZEZ1bmN0aW9uID09PSBuZXdGdW5jdGlvbjtcbiAgICB9XG4gICAgY29uc3QgdGVtcGxhdGVyID0gbmV3U3VwcG9ydC50ZW1wbGF0ZXI7XG4gICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgc3dhcFRhZ3Moc3ViamVjdCwgdGVtcGxhdGVyLCBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBza2lwQ29tcGFyaW5nIHx8IGhhc1N1cHBvcnRDaGFuZ2VkKG9sZFN1cHBvcnQsIHRlbXBsYXRlcik7XG4gICAgLy8gZXZlcnloaW5nIGhhcyBtYXRjaGVkLCBubyBkaXNwbGF5IG5lZWRzIHVwZGF0aW5nLlxuICAgIGlmICghaGFzQ2hhbmdlZCkge1xuICAgICAgICBjb25zdCBtYXhEZXB0aCA9IHRlbXBsYXRlci5wcm9wV2F0Y2ggPT09IFByb3BXYXRjaGVzLkRFRVAgPyBkZWVwQ29tcGFyZURlcHRoIDogc2hhbGxvd0NvbXBhcmVEZXB0aDtcbiAgICAgICAgc3luY1N1cHBvcnRzKHRlbXBsYXRlciwgbmV3U3VwcG9ydCwgb2xkU3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN1YmplY3QubG9ja2VkKSB7XG4gICAgICAgIGdsb2JhbC5ibG9ja2VkLnB1c2gobmV3U3VwcG9ydCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVuZGVyU3VwcG9ydChuZXdTdXBwb3J0KTtcbiAgICArK3N1YmplY3QucmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN5bmNGdW5jdGlvblByb3BzKG5ld1N1cHBvcnQsIG9sZFN1cHBvcnQsIG93bmVyU3VwcG9ydCwgbmV3UHJvcHNBcnJheSwgLy8gdGVtcGxhdGVyLnByb3BzXG5tYXhEZXB0aCwgZGVwdGggPSAtMSkge1xuICAgIGNvbnN0IHN1YmplY3QgPSBvbGRTdXBwb3J0LmNvbnRleHQ7XG4gICAgY29uc3QgZ2xvYmFsID0gc3ViamVjdC5nbG9iYWw7XG4gICAgaWYgKCFnbG9iYWwgfHwgIXN1YmplY3Quc3RhdGUubmV3ZXN0KSB7XG4gICAgICAgIGNvbnN0IGNhc3RlZFByb3BzID0gY2FzdFByb3BzKG5ld1Byb3BzQXJyYXksIG5ld1N1cHBvcnQsIGRlcHRoKTtcbiAgICAgICAgbmV3UHJvcHNBcnJheS5wdXNoKC4uLmNhc3RlZFByb3BzKTtcbiAgICAgICAgY29uc3QgcHJvcHNDb25maWcgPSBuZXdTdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgICAgICBwcm9wc0NvbmZpZy5jYXN0UHJvcHMgPSBjYXN0ZWRQcm9wcztcbiAgICAgICAgcmV0dXJuIG5ld1Byb3BzQXJyYXk7XG4gICAgfVxuICAgIGNvbnN0IG5ld2VzdCA9IHN1YmplY3Quc3RhdGUubmV3ZXN0O1xuICAgIG9sZFN1cHBvcnQgPSBuZXdlc3QgfHwgb2xkU3VwcG9ydDtcbiAgICBjb25zdCBwcmlvclByb3BDb25maWcgPSBvbGRTdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIGNvbnN0IHByaW9yUHJvcHNBcnJheSA9IHByaW9yUHJvcENvbmZpZy5jYXN0UHJvcHM7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbmV3UHJvcHNBcnJheS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IG5ld1Byb3BzQXJyYXlbaW5kZXhdO1xuICAgICAgICBjb25zdCBwcmlvclByb3AgPSBwcmlvclByb3BzQXJyYXlbaW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHN5bmNQcmlvclByb3BGdW5jdGlvbihwcmlvclByb3AsIHByb3AsIG5ld1N1cHBvcnQsIG93bmVyU3VwcG9ydCwgbWF4RGVwdGgsIGRlcHRoICsgMSk7XG4gICAgICAgIG5ld0FycmF5LnB1c2gobmV3VmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBuZXdQcm9wc0NvbmZpZyA9IG5ld1N1cHBvcnQucHJvcHNDb25maWc7XG4gICAgbmV3UHJvcHNDb25maWcuY2FzdFByb3BzID0gbmV3QXJyYXk7XG4gICAgcmV0dXJuIG5ld0FycmF5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVQcm92aWRlcnMob2xkU3VwcG9ydCwgbmV3U3VwcG9ydCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IG9sZFN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgbGV0IHBJbmRleCA9IC0xO1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzIHx8IFtdO1xuICAgIGNvbnN0IHBMZW4gPSBwcm92aWRlcnMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAocEluZGV4KysgPCBwTGVuKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gcHJvdmlkZXJzW3BJbmRleF07XG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xuICAgICAgICBjb25zdCBwY0xlbiA9IHByb3ZpZGVyLmNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlIChpbmRleCsrIDwgcGNMZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJvdmlkZXIuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgd2FzU2FtZUdsb2JhbHMgPSBnbG9iYWwgPT09IGNoaWxkLmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICAgICAgaWYgKHdhc1NhbWVHbG9iYWxzKSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBwcm92aWRlci5jaGlsZHJlbi5wdXNoKG5ld1N1cHBvcnQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKiBFeGNoYW5nZXMgZW50aXJlIHByb3BzQ29uZmlncyAqL1xuZnVuY3Rpb24gc3luY1N1cHBvcnRzKHRlbXBsYXRlciwgc3VwcG9ydCwgb2xkU3VwcG9ydCwgb3duZXJTdXBwb3J0LCBtYXhEZXB0aCkge1xuICAgIC8vIHVwZGF0ZSBmdW5jdGlvbiByZWZzIHRvIHVzZSBsYXRlc3QgcmVmZXJlbmNlc1xuICAgIGNvbnN0IG5ld1Byb3BzID0gdGVtcGxhdGVyLnByb3BzO1xuICAgIGNvbnN0IGNhc3RlZFByb3BzID0gc3luY0Z1bmN0aW9uUHJvcHMoc3VwcG9ydCwgb2xkU3VwcG9ydCwgb3duZXJTdXBwb3J0LCBuZXdQcm9wcywgbWF4RGVwdGgpO1xuICAgIGNvbnN0IHByb3BzQ29uZmlnID0gc3VwcG9ydC5wcm9wc0NvbmZpZztcbiAgICAvLyBXaGVuIG5ldyBzdXBwb3J0IGFjdHVhbGx5IG1ha2VzIGNhbGwgdG8gcmVhbCBmdW5jdGlvbiwgdXNlIHRoZXNlIHByZSBjYXN0ZWQgcHJvcHNcbiAgICBwcm9wc0NvbmZpZy5jYXN0UHJvcHMgPSBjYXN0ZWRQcm9wcztcbiAgICBjb25zdCBsYXN0UHJvcHNDb25maWcgPSBvbGRTdXBwb3J0LnByb3BzQ29uZmlnO1xuICAgIC8vIHVwZGF0ZSBzdXBwb3J0IHRvIHRoaW5rIGl0IGhhcyBkaWZmZXJlbnQgY2xvbmVkIHByb3BzXG4gICAgbGFzdFByb3BzQ29uZmlnLmxhdGVzdCA9IHByb3BzQ29uZmlnLmxhdGVzdDtcbiAgICByZXR1cm4gb2xkU3VwcG9ydDsgLy8gaXRzIHRoZSBzYW1lIHRhZyBjb21wb25lbnQgIFxufVxuLyoqIFdhcyB0YWcsIHdpbGwgYmUgdGFnICovXG5mdW5jdGlvbiBzd2FwVGFncyhjb250ZXh0SXRlbSwgdGVtcGxhdGVyLCAvLyBuZXcgdGFnXG5vd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgY29uc3Qgb2xkZXN0U3VwcG9ydCA9IGNvbnRleHRJdGVtLnN0YXRlLm9sZGVzdDtcbiAgICBkZXN0cm95U3VwcG9ydChvbGRlc3RTdXBwb3J0LCBnbG9iYWwpO1xuICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgdGVtcGxhdGVyLnByb2Nlc3NJbml0KHRlbXBsYXRlciwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0ucGxhY2Vob2xkZXIpO1xufVxuIiwiaW1wb3J0IHsgZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveSwgdW5zdWJzY3JpYmVGcm9tIH0gZnJvbSAnLi4vdGFnL2Rlc3Ryb3lDb250ZXh0cy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuLi90YWcvdXBkYXRlL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzbWFydFJlbW92ZUtpZHMgfSBmcm9tICcuLi90YWcvc21hcnRSZW1vdmVLaWRzLmZ1bmN0aW9uLmpzJztcbi8qKiB1c2VkIHdoZW4gYSB0YWcgc3dhcHMgY29udGVudCByZXR1cm5lZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvZnREZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBsYXN0U3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IGdsb2JhbCA9IGNvbnRleHQuZ2xvYmFsO1xuICAgIGNvbnN0IHsgc3VicywgdGFncyB9ID0gZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveShjb250ZXh0LmNvbnRleHRzKTtcbiAgICBzb2Z0RGVzdHJveU9uZShjb250ZXh0KTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRhZ3MpIHtcbiAgICAgICAgY29uc3QgY0dsb2JhbCA9IGNoaWxkLmNvbnRleHQuZ2xvYmFsO1xuICAgICAgICBpZiAoY0dsb2JhbC5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc29mdERlc3Ryb3lPbmUoY2hpbGQuY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IG15U3VicyA9IGdsb2JhbC5zdWJzY3JpcHRpb25zO1xuICAgIGlmIChteVN1YnMpIHtcbiAgICAgICAgc3Vicy5mb3JFYWNoKHVuc3Vic2NyaWJlRnJvbSk7XG4gICAgfVxuICAgIGdldE5ld0dsb2JhbChjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHNvZnREZXN0cm95T25lKGNvbnRleHQpIHtcbiAgICBjb250ZXh0Lmdsb2JhbC5kZWxldGVkID0gdHJ1ZTsgLy8gdGhlIGNoaWxkcmVuIGFyZSB0cnVseSBkZXN0cm95ZWQgYnV0IHRoZSBtYWluIHN1cHBvcnQgd2lsbCBiZSBzd2FwcGVkXG4gICAgc21hcnRSZW1vdmVLaWRzKGNvbnRleHQsIFtdKTtcbn1cbiIsImltcG9ydCB7IG1vdmVQcm92aWRlcnMgfSBmcm9tICcuL3VwZGF0ZS91cGRhdGVFeGlzdGluZ1RhZ0NvbXBvbmVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzb2Z0RGVzdHJveVN1cHBvcnQgfSBmcm9tICcuL3NvZnREZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBmaXJzdFRhZ1JlbmRlciwgZ2V0U3VwcG9ydE9sZGVyU3RhdGUsIHJlUmVuZGVyVGFnIH0gZnJvbSAnLi9yZW5kZXJUYWdPbmx5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTGlrZVRhZ3MgfSBmcm9tICcuLi90YWcvaXNMaWtlVGFncy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG4vKiogVE9ETzogVGhpcyBzZWVtcyB0byBzdXBwb3J0IGJvdGggbmV3IGFuZCB1cGRhdGVzIGFuZCBzaG91bGQgYmUgc2VwYXJhdGVkPyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcldpdGhTdXBwb3J0KG5ld1N1cHBvcnQsIGxhc3RTdXBwb3J0LCAvLyBwcmV2aW91cyAoZ2xvYmFsLm5ld2VzdClcbnN1YmplY3QpIHtcbiAgICBsZXQgcmVTdXBwb3J0O1xuICAgIGRlbGV0ZSBzdWJqZWN0LnRvUmVuZGVyO1xuICAgIGlmIChnZXRTdXBwb3J0T2xkZXJTdGF0ZShsYXN0U3VwcG9ydCkpIHtcbiAgICAgICAgcmVTdXBwb3J0ID0gcmVSZW5kZXJUYWcobmV3U3VwcG9ydCwgbGFzdFN1cHBvcnQsIHN1YmplY3QpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVTdXBwb3J0ID0gZmlyc3RUYWdSZW5kZXIobmV3U3VwcG9ydCwgbGFzdFN1cHBvcnQsIHN1YmplY3QpO1xuICAgIH1cbiAgICBjb25zdCBpc0xpa2VUYWcgPSAhbGFzdFN1cHBvcnQgfHwgaXNMaWtlVGFncyhsYXN0U3VwcG9ydCwgcmVTdXBwb3J0KTtcbiAgICBpZiAoIWlzTGlrZVRhZykge1xuICAgICAgICBtb3ZlUHJvdmlkZXJzKGxhc3RTdXBwb3J0LCByZVN1cHBvcnQpO1xuICAgICAgICBzb2Z0RGVzdHJveVN1cHBvcnQobGFzdFN1cHBvcnQpO1xuICAgICAgICBjb25zdCBzdWJqZWN0ID0gcmVTdXBwb3J0LmNvbnRleHQ7XG4gICAgICAgIHN1YmplY3Quc3RhdGUub2xkZXN0ID0gcmVTdXBwb3J0O1xuICAgICAgICBzdWJqZWN0LnN0YXRlLm5ld2VzdCA9IHJlU3VwcG9ydDtcbiAgICAgICAgc3ViamVjdC5zdGF0ZS5vbGRlciA9IHN1YmplY3Quc3RhdGUubmV3ZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxhc3RTdXBwb3J0KSB7XG4gICAgICAgIGNvbnN0IHRhZyA9IGxhc3RTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgICAgIGlmICh0YWcgJiYgc3ViamVjdC5yZW5kZXJDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RUZW1wbGF0ZXIgPSBsYXN0U3VwcG9ydD8udGVtcGxhdGVyO1xuICAgICAgICAgICAgY29uc3QgbGFzdFRhZyA9IGxhc3RUZW1wbGF0ZXI/LnRhZztcbiAgICAgICAgICAgIGNoZWNrVGFnU29mdERlc3Ryb3kodGFnLCBsYXN0U3VwcG9ydCwgbGFzdFRhZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVTdXBwb3J0Lm93bmVyU3VwcG9ydCA9IG5ld1N1cHBvcnQub3duZXJTdXBwb3J0OyAvLyB8fCBsYXN0T3duZXJTdXBwb3J0KSBhcyBBbnlTdXBwb3J0XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3VwcG9ydDogcmVTdXBwb3J0LFxuICAgICAgICB3YXNMaWtlVGFnczogaXNMaWtlVGFnXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrVGFnU29mdERlc3Ryb3kodGFnLCBsYXN0U3VwcG9ydCwgbGFzdFRhZykge1xuICAgIGlmICh0YWcudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLmRvbSkge1xuICAgICAgICBjb25zdCBsYXN0RG9tID0gbGFzdFRhZz8uZG9tO1xuICAgICAgICBjb25zdCBuZXdEb20gPSB0YWcuZG9tO1xuICAgICAgICBpZiAobGFzdERvbSAhPT0gbmV3RG9tKSB7XG4gICAgICAgICAgICBzb2Z0RGVzdHJveVN1cHBvcnQobGFzdFN1cHBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxhc3RUYWcpIHtcbiAgICAgICAgY29uc3QgbGFzdFN0cmluZ3MgPSBsYXN0VGFnLnN0cmluZ3M7XG4gICAgICAgIGlmIChsYXN0U3RyaW5ncykge1xuICAgICAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gbGFzdFN0cmluZ3M/Lmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IHRhZy5zdHJpbmdzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNvZnREZXN0cm95U3VwcG9ydChsYXN0U3VwcG9ydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyByZW5kZXJXaXRoU3VwcG9ydCB9IGZyb20gJy4vcmVuZGVyV2l0aFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZyB9IGZyb20gJy4vdXBkYXRlL3Byb2Nlc3NUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdXBkYXRlU3VwcG9ydEJ5IH0gZnJvbSAnLi91cGRhdGUvdXBkYXRlU3VwcG9ydEJ5LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJFeGlzdGluZ1N1cHBvcnQobGFzdFN1cHBvcnQsIC8vIHNob3VsZCBiZSBnbG9iYWwubmV3ZXN0XG5uZXdTdXBwb3J0LCAvLyBuZXcgdG8gYmUgcmVuZGVyZWRcbnN1YmplY3QpIHtcbiAgICBjb25zdCByZXN1bHQgPSByZW5kZXJXaXRoU3VwcG9ydChuZXdTdXBwb3J0LCBsYXN0U3VwcG9ydCwgc3ViamVjdCk7XG4gICAgaWYgKHJlc3VsdC53YXNMaWtlVGFncykge1xuICAgICAgICBjb25zdCBvbGRlc3QgPSBzdWJqZWN0LnN0YXRlLm9sZGVzdDsgLy8gfHwgcmVzdWx0LnN1cHBvcnRcbiAgICAgICAgdXBkYXRlU3VwcG9ydEJ5KG9sZGVzdCwgcmVzdWx0LnN1cHBvcnQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LnN1cHBvcnQ7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzVGFnKG5ld1N1cHBvcnQsIHN1YmplY3QpO1xufVxuIiwiaW1wb3J0IHsgcmVuZGVyRXhpc3RpbmdTdXBwb3J0IH0gZnJvbSAnLi9yZW5kZXJFeGlzdGluZ1RhZy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0V2l0aFN0YXRlIH0gZnJvbSAnLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0lubGluZUh0bWwodGVtcGxhdGVyKSB7XG4gICAgcmV0dXJuIFZhbHVlVHlwZXMudGVtcGxhdGVyID09PSB0ZW1wbGF0ZXIudGFnSnNUeXBlO1xufVxuLyoqIE1haW4gZnVuY3Rpb24gdXNlZCBieSBhbGwgb3RoZXIgY2FsbGVycyB0byByZW5kZXIvdXBkYXRlIGRpc3BsYXkgb2YgYSB0YWcgY29tcG9uZW50ICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU3VwcG9ydChzdXBwb3J0KSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBnbG9iYWwgPSBzdWJqZWN0Lmdsb2JhbDtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBzdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCBpbmxpbmVIdG1sID0gaXNJbmxpbmVIdG1sKHRlbXBsYXRlcik7XG4gICAgaWYgKHN1YmplY3QubG9ja2VkKSB7XG4gICAgICAgIGdsb2JhbC5ibG9ja2VkLnB1c2goc3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBzdXBwb3J0O1xuICAgIH1cbiAgICAvLyBpcyBpdCBqdXN0IGEgdmFuaWxsYSB0YWcsIG5vdCBjb21wb25lbnQ/XG4gICAgaWYgKGlubGluZUh0bWwpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVuZGVySW5saW5lSHRtbChzdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3ViamVjdC5sb2NrZWQgPSA0O1xuICAgIGlmIChnbG9iYWwuYmxvY2tlZC5sZW5ndGgpIHtcbiAgICAgICAgc3VwcG9ydCA9IGdsb2JhbC5ibG9ja2VkLnBvcCgpO1xuICAgICAgICBnbG9iYWwuYmxvY2tlZCA9IFtdO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSByZW5kZXJFeGlzdGluZ1N1cHBvcnQoc3ViamVjdC5zdGF0ZS5uZXdlc3QsIHN1cHBvcnQsIHN1YmplY3QpO1xuICAgIGRlbGV0ZSBzdWJqZWN0LmxvY2tlZDtcbiAgICByZXR1cm4gdGFnO1xufVxuLyoqIFJlbmRlcnMgdGhlIG93bmVyIG9mIHRoZSBpbmxpbmUgSFRNTCBldmVuIGlmIHRoZSBvd25lciBpdHNlbGYgaXMgaW5saW5lIGh0bWwgKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJJbmxpbmVIdG1sKHN1cHBvcnQpIHtcbiAgICBjb25zdCBvd25lclN1cHBvcnQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpO1xuICAgIGNvbnN0IG93bkNvbnRleHQgPSBvd25lclN1cHBvcnQuY29udGV4dDtcbiAgICBjb25zdCBuZXdlc3QgPSBvd25Db250ZXh0LnN0YXRlLm5ld2VzdDtcbiAgICAvLyBGdW5jdGlvbiBiZWxvdyBtYXkgY2FsbCByZW5kZXJJbmxpbmVIdG1sIGFnYWluIGlmIG93bmVyIGlzIGp1c3QgaW5saW5lIEhUTUxcbiAgICBjb25zdCByZXN1bHQgPSByZW5kZXJTdXBwb3J0KG5ld2VzdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IGlzVGFnQ29tcG9uZW50IH0gZnJvbSBcIi4uLy4uL2lzSW5zdGFuY2UuanNcIjtcbmltcG9ydCB7IHByb3ZpZGVyc0NoYW5nZUNoZWNrIH0gZnJvbSBcIi4uLy4uL3N0YXRlL3Byb3ZpZGVyc0NoYW5nZUNoZWNrLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBpc0lubGluZUh0bWwgfSBmcm9tIFwiLi4vLi4vcmVuZGVyL3JlbmRlclN1cHBvcnQuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tIFwiLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qc1wiO1xuaW1wb3J0IHsgY2hlY2tSZW5kZXJVcCB9IGZyb20gXCIuLi8uLi9yZW5kZXIvY2hlY2tSZW5kZXJVcC5mdW5jdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVwVGFncyhzdXBwb3J0LCBzdXBwb3J0cyA9IFtdKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IHN1cHBvcnQuY29udGV4dDtcbiAgICAvLyBjb25zdCBnbG9iYWwgPSBzdXBwb3J0LmNvbnRleHQuZ2xvYmFsIGFzIFN1cHBvcnRUYWdHbG9iYWxcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBzdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCBpbmxpbmVIdG1sID0gaXNJbmxpbmVIdG1sKHRlbXBsYXRlcik7XG4gICAgY29uc3Qgb3duZXJTdXBwb3J0ID0gc3VwcG9ydC5vd25lclN1cHBvcnQ7XG4gICAgaWYgKHN1YmplY3QubG9ja2VkKSB7XG4gICAgICAgIHN1cHBvcnRzLnB1c2goc3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBzdXBwb3J0cztcbiAgICB9XG4gICAgLy8gaXMgaXQganVzdCBhIHZhbmlsbGEgdGFnLCBub3QgY29tcG9uZW50P1xuICAgIGlmIChpbmxpbmVIdG1sKSB7XG4gICAgICAgIHJldHVybiBnZXRVcFRhZ3Mob3duZXJTdXBwb3J0LCBzdXBwb3J0cyk7XG4gICAgfVxuICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgaWYgKGdsb2JhbCAmJiBnbG9iYWwuZGVsZXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gc3VwcG9ydHM7XG4gICAgfVxuICAgIGNvbnN0IG5ld1N1cHBvcnQgPSBzdXBwb3J0OyAvLyBnbG9iYWwubmV3ZXN0IGFzIEFueVN1cHBvcnRcbiAgICBjb25zdCBpc0NvbXBvbmVudCA9IGlzVGFnQ29tcG9uZW50KG5ld1N1cHBvcnQudGVtcGxhdGVyKTtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSBzdXBwb3J0LnRlbXBsYXRlci50YWdKc1R5cGU7XG4gICAgY29uc3QgY2FuQ29udGludWVVcCA9IG93bmVyU3VwcG9ydCAmJiB0YWdKc1R5cGUgIT09IFZhbHVlVHlwZXMuc3RhdGVSZW5kZXI7XG4gICAgY29uc3QgY29udGludWVVcCA9IGNhbkNvbnRpbnVlVXAgJiYgKCFpc0NvbXBvbmVudCB8fCBjaGVja1JlbmRlclVwKG5ld1N1cHBvcnQudGVtcGxhdGVyLCBuZXdTdXBwb3J0KSk7XG4gICAgaWYgKG5ld1N1cHBvcnQuY29udGV4dC5nbG9iYWwpIHtcbiAgICAgICAgY29uc3QgcHJvU3VwcG9ydHMgPSBwcm92aWRlcnNDaGFuZ2VDaGVjayhuZXdTdXBwb3J0KTtcbiAgICAgICAgc3VwcG9ydHMucHVzaCguLi5wcm9TdXBwb3J0cyk7XG4gICAgfVxuICAgIGlmIChjb250aW51ZVVwKSB7XG4gICAgICAgIGdldFVwVGFncyhvd25lclN1cHBvcnQsIHN1cHBvcnRzKTtcbiAgICAgICAgaWYgKGlzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBzdXBwb3J0cy5wdXNoKG5ld1N1cHBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBwb3J0czsgLy8gbW9yZSB0byBrZWVwIGdvaW5nIHVwLCBkbyBub3QgcHVzaCB0aGlzIGNoaWxkIGZvciByZXZpZXdcbiAgICB9XG4gICAgc3VwcG9ydHMucHVzaChuZXdTdXBwb3J0KTtcbiAgICByZXR1cm4gc3VwcG9ydHM7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG4vKiogRmlsZSBsYXJnZWx5IHJlc3BvbnNpYmxlIGZvciByZWFjdGluZyB0byBlbGVtZW50IGV2ZW50cywgc3VjaCBhcyBvbmNsaWNrICovXG5pbXBvcnQgeyBnZXRVcFRhZ3MgfSBmcm9tICcuL2dldFVwVGFncy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJUYWdVcGRhdGVBcnJheSB9IGZyb20gJy4vcmVuZGVyVGFnQXJyYXkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydFdpdGhTdGF0ZSB9IGZyb20gJy4vZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RvUmVzb2x2ZVByb21pc2UgfSBmcm9tICcuL2NoZWNrVG9SZXNvbHZlUHJvbWlzZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYmluZFN1YmplY3RDYWxsYmFjayh2YWx1ZSwgc3VwcG9ydCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgLy8gTUFJTiBFVkVOVCBDQUxMQkFDSyBQUk9DRVNTT1JcbiAgICBjb25zdCBzdWJqZWN0RnVuY3Rpb24gPSBmdW5jdGlvbiBjYWxsYmFja1JlcGxhY2VtZW50KGVsZW1lbnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGdsb2JhbC5kZWxldGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgbmV3ZXN0ID0gZ2xvYmFsLm5ld2VzdCBhcyBBbnlTdXBwb3J0IC8vIHx8IHN1YmplY3RGdW5jdGlvbi5zdXBwb3J0XG4gICAgICAgIHJldHVybiBydW5UYWdDYWxsYmFjayhzdWJqZWN0RnVuY3Rpb24udGFnRnVuY3Rpb24sIHN1YmplY3RGdW5jdGlvbi5zdXBwb3J0LCAvLyBuZXdlc3RcbiAgICAgICAgLy8gc3ViamVjdEZ1bmN0aW9uLnN0YXRlcywgLy8gbmV3ZXN0XG4gICAgICAgIGVsZW1lbnQsIGFyZ3MpO1xuICAgIH07XG4gICAgLy8gbGluayBiYWNrIHRvIG9yaWdpbmFsLiBNb3N0bHkgdXNlZCBmb3IgPGRpdiBvbmluaXQgb25kZXN0cm95PiBhbmltYXRpb25zXG4gICAgc3ViamVjdEZ1bmN0aW9uLnRhZ0Z1bmN0aW9uID0gdmFsdWU7XG4gICAgLy8gY29uc3QgY29tcG9uZW50ID0gZ2V0U3VwcG9ydFdpdGhTdGF0ZShzdXBwb3J0KVxuICAgIHN1YmplY3RGdW5jdGlvbi5zdXBwb3J0ID0gc3VwcG9ydDtcbiAgICAvLyBzdWJqZWN0RnVuY3Rpb24ub3RoZXJTdXBwb3J0ID0gY29tcG9uZW50XG4gICAgLy9jb25zdCBzdGF0ZXMgPSBjb21wb25lbnQuc3RhdGVzIC8vID8uWzBdXG4gICAgLy8gc3ViamVjdEZ1bmN0aW9uLnN0YXRlcyA9IHN0YXRlc1xuICAgIHJldHVybiBzdWJqZWN0RnVuY3Rpb247XG59XG5leHBvcnQgZnVuY3Rpb24gcnVuVGFnQ2FsbGJhY2sodmFsdWUsIHN1cHBvcnQsIFxuLy8gc3RhdGVzOiBTdGF0ZXNTZXR0ZXJbXSxcbmJpbmRUbywgYXJncykge1xuICAgIC8vIGdldCBhY3R1YWwgY29tcG9uZW50IG93bmVyIG5vdCBqdXN0IHRoZSBodG1sYGAgc3VwcG9ydFxuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldFN1cHBvcnRXaXRoU3RhdGUoc3VwcG9ydCk7XG4gICAgY29uc3Qgc3ViamVjdCA9IGNvbXBvbmVudC5jb250ZXh0O1xuICAgIC8vIGNvbnN0IGdsb2JhbCA9IHN1YmplY3QuZ2xvYmFsIGFzIFN1cHBvcnRUYWdHbG9iYWwgLy8gdGFnLnN1YmplY3QuZ2xvYmFsIGFzIFRhZ0dsb2JhbFxuICAgIHN1YmplY3QubG9ja2VkID0gMTsgLy8gcHJldmVudCBhbm90aGVyIHJlbmRlciBmcm9tIHJlLXJlbmRlcmluZyB0aGlzIHRhZ1xuICAgIC8vIHN5bmMgdGhlIG5ldyBzdGF0ZXMgdG8gdGhlIG9sZCBiZWZvcmUgdGhlIG9sZCBkb2VzIGFueSBwcm9jZXNzaW5nXG4gICAgLy8gc3luY1N0YXRlc0FycmF5KGNvbXBvbmVudC5zdWJqZWN0Lmdsb2JhbC5uZXdlc3Quc3RhdGVzLCBzdGF0ZXMpXG4gICAgLy8gQUNUVUFMIENBTExCQUNLIFRPIE9SSUdJTkFMIEZVTkNUSU9OXG4gICAgY29uc3QgY2FsbGJhY2tSZXN1bHQgPSB2YWx1ZS5hcHBseShiaW5kVG8sIGFyZ3MpO1xuICAgIC8vIHN5bmMgdGhlIG9sZCBzdGF0ZXMgdG8gdGhlIG5ld1xuICAgIC8vIHN5bmNTdGF0ZXNBcnJheShzdGF0ZXMsIGNvbXBvbmVudC5zdWJqZWN0Lmdsb2JhbC5uZXdlc3Quc3RhdGVzKVxuICAgIGRlbGV0ZSBzdWJqZWN0LmxvY2tlZDtcbiAgICBjb25zdCByZXN1bHQgPSBhZnRlclRhZ0NhbGxiYWNrKGNhbGxiYWNrUmVzdWx0LCBjb21wb25lbnQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gYWZ0ZXJUYWdDYWxsYmFjayhjYWxsYmFja1Jlc3VsdCwgbGFzdCkge1xuICAgIGNvbnN0IGdsb2JhbCA9IGxhc3QuY29udGV4dC5nbG9iYWw7XG4gICAgaWYgKGdsb2JhbD8uZGVsZXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhZ3NUb1VwZGF0ZSA9IGdldFVwVGFncyhsYXN0KTtcbiAgICByZW5kZXJUYWdVcGRhdGVBcnJheSh0YWdzVG9VcGRhdGUpO1xuICAgIHJldHVybiBjaGVja1RvUmVzb2x2ZVByb21pc2UoY2FsbGJhY2tSZXN1bHQsIGxhc3QsIHsgcmVzb2x2ZVByb21pc2UsIHJlc29sdmVWYWx1ZSB9KTtcbn1cbmNvbnN0IG5vRGF0YSA9ICduby1kYXRhLWV2ZXInO1xuY29uc3QgcHJvbWlzZU5vRGF0YSA9ICdwcm9taXNlLW5vLWRhdGEtZXZlcic7XG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gcHJvbWlzZU5vRGF0YTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVWYWx1ZSgpIHtcbiAgICByZXR1cm4gbm9EYXRhO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJ1YmJsZUV2ZW50KGV2ZW50LCByZXBsYWNlRXZlbnROYW1lLCB0YXJnZXQpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IHRhcmdldFtyZXBsYWNlRXZlbnROYW1lXTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgZXZlbnQub3JpZ2luYWxTdG9wUHJvcGFnYXRpb24gPSBldmVudC5zdG9wUHJvcGFnYXRpb247XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxTdG9wUHJvcGFnYXRpb24uY2FsbChldmVudCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSBldmVudC5vcmlnaW5hbFN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudC5vcmlnaW5hbFN0b3BQcm9wYWdhdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCBzdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgIGJ1YmJsZUV2ZW50KGV2ZW50LCByZXBsYWNlRXZlbnROYW1lLCBwYXJlbnROb2RlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBidWJibGVFdmVudCB9IGZyb20gJy4vYnViYmxlRXZlbnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFN1cHBvcnRFdmVudExpc3RlbmVyKHN1cHBvcnQsIGV2ZW50TmFtZSwgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBlbG0gPSBzdXBwb3J0LmFwcEVsZW1lbnQ7XG4gICAgY29uc3QgcmVwbGFjZUV2ZW50TmFtZSA9IGdldEV2ZW50UmVmZXJlbmNlTmFtZShldmVudE5hbWUpO1xuICAgIGlmIChldmVudE5hbWUgPT09ICdibHVyJykge1xuICAgICAgICBldmVudE5hbWUgPSAnZm9jdXNvdXQnO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gc3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IGV2ZW50UmVnID0gY29udGV4dC5ldmVudHM7XG4gICAgaWYgKCFldmVudFJlZ1tldmVudE5hbWVdKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gZnVuY3Rpb24gZXZlbnRDYWxsYmFjayhldmVudCkge1xuICAgICAgICAgICAgYnViYmxlRXZlbnQoZXZlbnQsIHJlcGxhY2VFdmVudE5hbWUsIGV2ZW50LnRhcmdldCk7XG4gICAgICAgIH07XG4gICAgICAgIGV2ZW50UmVnW2V2ZW50TmFtZV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8vIGF0dGFjaCB0byBlbGVtZW50IGFzIFwiX2NsaWNrXCIgYW5kIFwiX2tleXVwXCJcbiAgICA7XG4gICAgZWxlbWVudFtyZXBsYWNlRXZlbnROYW1lXSA9IGNhbGxiYWNrO1xuICAgIGVsZW1lbnRbZXZlbnROYW1lXSA9IGNhbGxiYWNrO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEV2ZW50UmVmZXJlbmNlTmFtZShldmVudE5hbWUpIHtcbiAgICAvLyBjYXN0IGV2ZW50cyB0aGF0IGRvIG5vdCBidWJibGUgdXAgaW50byBvbmVzIHRoYXQgZG9cbiAgICBpZiAoZXZlbnROYW1lID09PSAnYmx1cicpIHtcbiAgICAgICAgZXZlbnROYW1lID0gJ2ZvY3Vzb3V0JztcbiAgICB9XG4gICAgcmV0dXJuICdfJyArIGV2ZW50TmFtZTtcbn1cbiIsImltcG9ydCB7IGFkZFN1cHBvcnRFdmVudExpc3RlbmVyIH0gZnJvbSAnLi9hZGRTdXBwb3J0RXZlbnRMaXN0ZW5lci5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnV0ZUZ1bmN0aW9uKGVsZW1lbnQsIG5ld0F0dHJWYWx1ZSwgc3VwcG9ydCwgYXR0ck5hbWUpIHtcbiAgICBjb25zdCBmdW4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gZnVuLnRhZ0Z1bmN0aW9uKGVsZW1lbnQsIGFyZ3MpO1xuICAgIH07XG4gICAgLy8gYWNjZXNzIHRvIG9yaWdpbmFsIGZ1bmN0aW9uXG4gICAgZnVuLnRhZ0Z1bmN0aW9uID0gbmV3QXR0clZhbHVlO1xuICAgIGZ1bi5zdXBwb3J0ID0gc3VwcG9ydDtcbiAgICBhZGRTdXBwb3J0RXZlbnRMaXN0ZW5lcihzdXBwb3J0LmFwcFN1cHBvcnQsIGF0dHJOYW1lLCBlbGVtZW50LCAvLyBzdXBwb3J0LmFwcFN1cHBvcnQuYXBwRWxlbWVudCBhcyBFbGVtZW50LFxuICAgIGZ1bik7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNOb0Rpc3BsYXlWYWx1ZShhdHRyVmFsdWUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkID09PSBhdHRyVmFsdWUgfHwgbnVsbCA9PT0gYXR0clZhbHVlIHx8IGZhbHNlID09PSBhdHRyVmFsdWU7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBzZXROb25GdW5jdGlvbklucHV0VmFsdWUgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBCYXNpY1R5cGVzLCBlbXB0eSB9IGZyb20gJy4uLy4uL3RhZy9WYWx1ZVR5cGVzLmVudW0uanMnO1xuaW1wb3J0IHsgaXNTcGVjaWFsQXR0ciB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvaXNTcGVjaWFsQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTm9EaXNwbGF5VmFsdWUgfSBmcm9tICcuL2lzTm9EaXNwbGF5VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZSB9IGZyb20gJy4vcHJvY2Vzc0F0dHJpYnV0ZS5mdW5jdGlvbi5qcyc7XG4vLyBzaW5nbGUvc3RhbmQgYWxvbmUgYXR0cmlidXRlc1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTdGFuZEFsb25lQXR0cmlidXRlKHZhbHVlcywgYXR0clZhbHVlLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0LCBwYXJlbnRDb250ZXh0KSB7XG4gICAgaWYgKGlzTm9EaXNwbGF5VmFsdWUoYXR0clZhbHVlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHByb2Nlc3MgYW4gb2JqZWN0IG9mIGF0dHJpYnV0ZXMgJHt7Y2xhc3M6J3NvbWV0aGluZywgY2hlY2tlZDp0cnVlfX1cbiAgICBpZiAodHlwZW9mIGF0dHJWYWx1ZSA9PT0gQmFzaWNUeXBlcy5vYmplY3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgaXNTcGVjaWFsID0gaXNTcGVjaWFsQXR0cihuYW1lKTsgLy8gb25seSBvYmplY3QgdmFyaWFibGVzIGFyZSBldmFsdWF0ZWQgZm9yIGlzIHNwZWNpYWwgYXR0clxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyVmFsdWVbbmFtZV07XG4gICAgICAgICAgICBjb25zdCBob3dUb1NldCA9IHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIHByb2Nlc3NBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIHZhbHVlcywgZWxlbWVudCwgb3duZXJTdXBwb3J0LCBob3dUb1NldCwgY29udGV4dCwgcGFyZW50Q29udGV4dCwgaXNTcGVjaWFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJlZ3VsYXIgYXR0cmlidXRlc1xuICAgIGlmIChhdHRyVmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjsgLy8gaWdub3JlLCBkbyBub3Qgc2V0IGF0IHRoaXMgdGltZVxuICAgIH1cbiAgICBob3dUb1NldChlbGVtZW50LCBhdHRyVmFsdWUsIGVtcHR5KTtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHBhaW50Q29udGVudCB9IGZyb20gJy4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL3JlbmRlci9hdHRyaWJ1dGVzL3Byb2Nlc3NTdGFuZEFsb25lQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzTm9EaXNwbGF5VmFsdWUgfSBmcm9tICcuLi8uLi9yZW5kZXIvYXR0cmlidXRlcy9pc05vRGlzcGxheVZhbHVlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVOYW1lT25seUF0dHJWYWx1ZSh2YWx1ZXMsIGF0dHJWYWx1ZSwgbGFzdFZhbHVlLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0cywgcGFyZW50Q29udGV4dCkge1xuICAgIC8vIGNoZWNrIHRvIHJlbW92ZSBwcmV2aW91cyBhdHRyaWJ1dGUocylcbiAgICBpZiAobGFzdFZhbHVlKSB7XG4gICAgICAgIGlmIChpc05vRGlzcGxheVZhbHVlKGF0dHJWYWx1ZSkgfHwgYXR0clZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobGFzdFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIChsYXN0VmFsdWUpID09PSBCYXNpY1R5cGVzLm9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgaXNPYlN0aWxsID0gdHlwZW9mIChhdHRyVmFsdWUpID09PSBCYXNpY1R5cGVzLm9iamVjdDtcbiAgICAgICAgICAgIGlmIChpc09iU3RpbGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gbGFzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmKChhdHRyVmFsdWUgYXMgYW55KVtuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSBpbiBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhaW50Q29udGVudC5wdXNoKFtyZW1vdmVBdHRyaWJ1dGUsIFtlbGVtZW50LCBuYW1lXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBsYXN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFpbnRDb250ZW50LnB1c2goW3JlbW92ZUF0dHJpYnV0ZSwgW2VsZW1lbnQsIG5hbWVdXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NTdGFuZEFsb25lQXR0cmlidXRlKHZhbHVlcywgYXR0clZhbHVlLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0cywgcGFyZW50Q29udGV4dCk7XG59XG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSkge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xufVxuIiwiaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZUVtaXQgfSBmcm9tICcuL3Byb2Nlc3NBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3VwZGF0ZU5hbWVPbmx5QXR0clZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlbW92ZUNvbnRleHRJbkN5Y2xlLCBzZXRDb250ZXh0SW5DeWNsZSB9IGZyb20gJy4uLy4uL3RhZy9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuLyoqIEN1cnJlbnRseSB1bml2ZXJzYWxseSB1c2VkIGZvciBhbGwgYXR0cmlidXRlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVBdHRyQ29udGV4dCh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgdmFsdWVzKSB7XG4gICAgY29uc3QgYXR0ckNvbnRleHRJdGVtID0gY29udGV4dEl0ZW07XG4gICAgY29uc3QgdGFnVmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodGFnVmFsdWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGNvbnRleHRJdGVtLnZhbHVlO1xuICAgICAgICAvLyBpdHMgbm93IGEgdGFnVmFyIHZhbHVlIGJ1dCBiZWZvcmUgd2FzIG5vdFxuICAgICAgICBpZiAoIW9sZFZhbHVlPy50YWdKc1R5cGUpIHtcbiAgICAgICAgICAgIHRhZ1ZhbHVlLmlzQXR0ciA9IHRydWU7XG4gICAgICAgICAgICBzZXRDb250ZXh0SW5DeWNsZShjb250ZXh0SXRlbSk7XG4gICAgICAgICAgICB0YWdWYWx1ZS5wcm9jZXNzSW5pdEF0dHJpYnV0ZShhdHRyQ29udGV4dEl0ZW0uYXR0ck5hbWUsIHZhbHVlLCBhdHRyQ29udGV4dEl0ZW0uZWxlbWVudCwgdGFnVmFsdWUsIGF0dHJDb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBzZXROb25GdW5jdGlvbklucHV0VmFsdWUpO1xuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgICAgIGF0dHJDb250ZXh0SXRlbS50YWdKc1ZhciA9IHRhZ1ZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9sZFZhbHVlLmhhc1ZhbHVlQ2hhbmdlZCh0YWdWYWx1ZSwgY29udGV4dEl0ZW0sIC8vIHRvZG86IHdlaXJkIHR5cGluZyBzaG91bGQganVzdCBiZSBDb250ZXh0SXRlbVxuICAgICAgICBvd25lclN1cHBvcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhdHRyQ29udGV4dEl0ZW0uaXNOYW1lT25seSkge1xuICAgICAgICB1cGRhdGVOYW1lT25seUF0dHJWYWx1ZSh2YWx1ZXMsIHZhbHVlLCBhdHRyQ29udGV4dEl0ZW0udmFsdWUsIGF0dHJDb250ZXh0SXRlbS5lbGVtZW50LCAvLyBnbG9iYWwuZWxlbWVudCBhcyBFbGVtZW50LFxuICAgICAgICBvd25lclN1cHBvcnQsIGF0dHJDb250ZXh0SXRlbS5ob3dUb1NldCwgW10sIC8vIENvbnRleHQsIGJ1dCB3ZSBkb250IHdhbnQgdG8gYWx0ZXIgY3VycmVudFxuICAgICAgICBhdHRyQ29udGV4dEl0ZW0ucGFyZW50Q29udGV4dCk7XG4gICAgICAgIGF0dHJDb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnQgPSBhdHRyQ29udGV4dEl0ZW0uZWxlbWVudDtcbiAgICBwcm9jZXNzQXR0cmlidXRlRW1pdCh2YWx1ZSwgYXR0ckNvbnRleHRJdGVtLmF0dHJOYW1lLCBhdHRyQ29udGV4dEl0ZW0sIGVsZW1lbnQsIG93bmVyU3VwcG9ydCwgYXR0ckNvbnRleHRJdGVtLmhvd1RvU2V0LCBhdHRyQ29udGV4dEl0ZW0uaXNTcGVjaWFsKTtcbiAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybjtcbn1cbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IHNwZWNpYWxBdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3NwZWNpYWxBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgYmluZFN1YmplY3RDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvYmluZFN1YmplY3RDYWxsYmFjay5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBwYWludENvbnRlbnQgfSBmcm9tICcuLi9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTm9uRHluYW1pY0F0dHIgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NOYW1lVmFsdWVBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkT25lQ29udGV4dCB9IGZyb20gJy4uL2FkZE9uZUNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlQ2FsbGJhY2suZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0IH0gZnJvbSAnLi9wcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlRHluYW1pY0FycmF5QXR0cmlidXRlLCBjcmVhdGVEeW5hbWljQXR0cmlidXRlIH0gZnJvbSAnLi9jcmVhdGVEeW5hbWljQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFRhZ0pzVmFyIH0gZnJvbSAnLi9nZXRUYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZSB9IGZyb20gJy4vcHJvY2Vzc1N0YW5kQWxvbmVBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1RhZ0pzVmFyQXR0cmlidXRlIH0gZnJvbSAnLi9wcm9jZXNzVGFnSnNBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuLyoqIE1BSU4gRlVOQ1RJT04uIFNldHMgYXR0cmlidXRlIHZhbHVlLCBzdWJzY3JpYmVzIHRvIHZhbHVlIHVwZGF0ZXMgICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIHZhbHVlcywgLy8gYWxsIHRoZSB2YXJpYWJsZXMgaW5zaWRlIGh0bWxgYFxuZWxlbWVudCwgc3VwcG9ydCwgaG93VG9TZXQsIC8vICA9IGhvd1RvU2V0SW5wdXRWYWx1ZVxuY29udGV4dHMsIHBhcmVudENvbnRleHQsIGlzU3BlY2lhbCkge1xuICAgIGNvbnN0IHZhckluZGV4ID0gZ2V0VGFnSnNWYXIoYXR0ck5hbWUpO1xuICAgIGxldCBpc05hbWVWYXIgPSB2YXJJbmRleCA+PSAwIHx8ICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiAoYXR0ck5hbWUpICE9PSAnc3RyaW5nJyk7XG4gICAgbGV0IHZhbHVlSW5WYWx1ZXMgPSB2YWx1ZXNbdmFySW5kZXhdO1xuICAgIC8vIHZhbHVlIG9yIG5hbWUgZnJvbSBib2x0P1xuICAgIGlmICh2YWx1ZT8udGFnSnNUeXBlKSB7XG4gICAgICAgIHZhbHVlSW5WYWx1ZXMgPSB2YWx1ZTsgLy8gdGhlIHZhbHVlIGlzIGEgdGFnSnNWYXJcbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0ck5hbWU/LnRhZ0pzVHlwZSkge1xuICAgICAgICBpc05hbWVWYXIgPSB0cnVlO1xuICAgICAgICB2YWx1ZUluVmFsdWVzID0gYXR0ck5hbWU7IC8vIHRoZSBuYW1lIGlzIGEgdGFnSnNWYXJcbiAgICAgICAgdmFsdWUgPSBhdHRyTmFtZTtcbiAgICB9XG4gICAgY29uc3QgdGFnSnNWYXIgPSB2YWx1ZUluVmFsdWVzO1xuICAgIGlmICh0YWdKc1Zhcj8udGFnSnNUeXBlKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzVGFnSnNWYXJBdHRyaWJ1dGUodmFsdWUsIGNvbnRleHRzLCBwYXJlbnRDb250ZXh0LCB0YWdKc1ZhciwgdmFySW5kZXgsIHN1cHBvcnQsIGF0dHJOYW1lLCBlbGVtZW50LCBpc05hbWVWYXIpO1xuICAgIH1cbiAgICBpZiAoaXNOYW1lVmFyKSB7XG4gICAgICAgIC8vIG9sZCB3YXkgb2Ygc2V0dGluZyBieSBodG1sYGBcbiAgICAgICAgaWYgKHZhckluZGV4ID09PSAtMSAmJiBpc05hbWVWYXIpIHtcbiAgICAgICAgICAgIHZhbHVlSW5WYWx1ZXMgPSBhdHRyTmFtZTsgLy8gaXRzIGEgbmFtZSBvbmx5IHZhbHVlIGF0dHJpYnV0ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRleHRJdGVtID0gYWRkT25lQ29udGV4dCh2YWx1ZUluVmFsdWVzLCBjb250ZXh0cywgdHJ1ZSwgcGFyZW50Q29udGV4dCk7XG4gICAgICAgIGNvbnRleHRJdGVtLnZhbHVlSW5kZXggPSB2YXJJbmRleDtcbiAgICAgICAgY29udGV4dEl0ZW0uaXNBdHRyID0gdHJ1ZTtcbiAgICAgICAgY29udGV4dEl0ZW0uZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGNvbnRleHRJdGVtLmlzTmFtZU9ubHkgPSB0cnVlO1xuICAgICAgICBjb250ZXh0SXRlbS5ob3dUb1NldCA9IGhvd1RvU2V0O1xuICAgICAgICBjb25zdCB0YWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgICAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlID0gcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0O1xuICAgICAgICAvLyBzaW5nbGUvc3RhbmQgYWxvbmUgYXR0cmlidXRlc1xuICAgICAgICBwcm9jZXNzU3RhbmRBbG9uZUF0dHJpYnV0ZSh2YWx1ZXMsIHZhbHVlSW5WYWx1ZXMsIGVsZW1lbnQsIHN1cHBvcnQsIGhvd1RvU2V0LCBjb250ZXh0cywgcGFyZW50Q29udGV4dCk7XG4gICAgICAgIHJldHVybiBjb250ZXh0SXRlbTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEeW5hbWljQXJyYXlBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBjb250ZXh0cywgaG93VG9TZXQsIHZhbHVlcywgc3VwcG9ydC5jb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVWYXIgPSBnZXRUYWdKc1Zhcih2YWx1ZSk7XG4gICAgaWYgKHZhbHVlVmFyID49IDApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbdmFsdWVWYXJdO1xuICAgICAgICByZXR1cm4gY3JlYXRlRHluYW1pY0F0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGNvbnRleHRzLCBwYXJlbnRDb250ZXh0LCBob3dUb1NldCwgc3VwcG9ydCwgaXNTcGVjaWFsLCB2YWx1ZVZhciwgY29udGV4dHMpO1xuICAgIH1cbiAgICAvLyBzaW1wbGUgbmFtZS92YWx1ZSBhdHRyaWJ1dGVcbiAgICByZXR1cm4gcHJvY2Vzc05vbkR5bmFtaWNBdHRyKGF0dHJOYW1lLCB2YWx1ZSwgZWxlbWVudCwgaG93VG9TZXQsIGlzU3BlY2lhbCwgcGFyZW50Q29udGV4dCk7XG59XG4vKiogT25seSB1c2VkIGR1cmluZyB1cGRhdGVzICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0F0dHJpYnV0ZUVtaXQobmV3QXR0clZhbHVlLCBhdHRyTmFtZSwgc3ViamVjdCwgZWxlbWVudCwgc3VwcG9ydCwgaG93VG9TZXQsIGlzU3BlY2lhbCkge1xuICAgIC8vIHNob3VsZCB0aGUgZnVuY3Rpb24gYmUgd3JhcHBlZCBzbyBldmVyeSB0aW1lIGl0cyBjYWxsZWQgd2UgcmUtcmVuZGVyP1xuICAgIGlmIChpc0Z1bmN0aW9uKG5ld0F0dHJWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrRnVuKHN1cHBvcnQsIG5ld0F0dHJWYWx1ZSwgZWxlbWVudCwgYXR0ck5hbWUsIGlzU3BlY2lhbCwgaG93VG9TZXQsIHN1YmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZVN1YmplY3RWYWx1ZShuZXdBdHRyVmFsdWUsIGVsZW1lbnQsIGF0dHJOYW1lLCBpc1NwZWNpYWwsIGhvd1RvU2V0LCBzdXBwb3J0KTtcbn1cbi8qKiBmaWd1cmUgb3V0IHdoYXQgdHlwZSBvZiBhdHRyaWJ1dGUgd2UgYXJlIGRlYWxpbmcgd2l0aCBhbmQvb3IgZmVlZCB2YWx1ZSBpbnRvIGhhbmRsZXIgdG8gZmlndXJlIGhvdyB0byB1cGRhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQXR0cmlidXRlU3ViamVjdFZhbHVlKG5ld0F0dHJWYWx1ZSwgZWxlbWVudCwgYXR0ck5hbWUsIHNwZWNpYWwsIGhvd1RvU2V0LCBzdXBwb3J0KSB7XG4gICAgLy8gcHJvY2VzcyBhZGRpbmcvcmVtb3Zpbmcgc3R5bGUuIGNsYXNzLiAoZmFsc2UgbWVhbnMgcmVtb3ZlKVxuICAgIGlmIChzcGVjaWFsICE9PSBmYWxzZSkge1xuICAgICAgICBzcGVjaWFsQXR0cmlidXRlKGF0dHJOYW1lLCBuZXdBdHRyVmFsdWUsIGVsZW1lbnQsIHNwZWNpYWwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAobmV3QXR0clZhbHVlKSB7XG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICBwYWludENvbnRlbnQucHVzaChbcGFpbnRDb250ZW50UHVzaCwgW2VsZW1lbnQsIGF0dHJOYW1lXV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNGdW5jdGlvbihuZXdBdHRyVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzQXR0cmlidXRlRnVuY3Rpb24oZWxlbWVudCwgbmV3QXR0clZhbHVlLCBzdXBwb3J0LCBhdHRyTmFtZSk7XG4gICAgfVxuICAgIC8vIHZhbHVlIGlzIDBcbiAgICBob3dUb1NldChlbGVtZW50LCBhdHRyTmFtZSwgbmV3QXR0clZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNhbGxiYWNrRnVuKHN1cHBvcnQsIG5ld0F0dHJWYWx1ZSwgZWxlbWVudCwgYXR0ck5hbWUsIGlzU3BlY2lhbCwgaG93VG9TZXQsIHN1YmplY3QpIHtcbiAgICBjb25zdCB3cmFwcGVyID0gc3VwcG9ydC50ZW1wbGF0ZXIud3JhcHBlcjtcbiAgICBjb25zdCB0YWdKc1R5cGUgPSB3cmFwcGVyPy50YWdKc1R5cGUgfHwgd3JhcHBlcj8ub3JpZ2luYWw/LnRhZ0pzVHlwZTtcbiAgICBjb25zdCBvbmVSZW5kZXIgPSB0YWdKc1R5cGUgPT09IFZhbHVlVHlwZXMucmVuZGVyT25jZTtcbiAgICBpZiAoIW9uZVJlbmRlcikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1RhZ0NhbGxiYWNrRnVuKHN1YmplY3QsIG5ld0F0dHJWYWx1ZSwgc3VwcG9ydCwgYXR0ck5hbWUsIGVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZVN1YmplY3RWYWx1ZShuZXdBdHRyVmFsdWUsIGVsZW1lbnQsIGF0dHJOYW1lLCBpc1NwZWNpYWwsIGhvd1RvU2V0LCBzdXBwb3J0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGFnQ2FsbGJhY2tGdW4oc3ViamVjdCwgbmV3QXR0clZhbHVlLCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCkge1xuICAgIC8vIHRhZyBoYXMgc3RhdGUgYW5kIHdpbGwgbmVlZCBhbGwgZnVuY3Rpb25zIHdyYXBwZWQgdG8gY2F1c2UgcmUtcmVuZGVyc1xuICAgIG5ld0F0dHJWYWx1ZSA9IGJpbmRTdWJqZWN0Q2FsbGJhY2sobmV3QXR0clZhbHVlLCBzdXBwb3J0KTtcbiAgICBjb25zdCB0YWdKc1ZhciA9IHN1YmplY3QudGFnSnNWYXI7IC8vID0gdmFsdWVUb1RhZ0pzVmFyKG5ld0F0dHJWYWx1ZSlcbiAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlID0gcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0O1xuICAgIHJldHVybiBwcm9jZXNzQXR0cmlidXRlRnVuY3Rpb24oZWxlbWVudCwgbmV3QXR0clZhbHVlLCBzdXBwb3J0LCBhdHRyTmFtZSk7XG59XG5mdW5jdGlvbiBwYWludENvbnRlbnRQdXNoKGVsZW1lbnQsIGF0dHJOYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgcHJvY2Vzc0R5bmFtaWNOYW1lVmFsdWVBdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NOYW1lVmFsdWVBdHRyaWJ1dGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0IH0gZnJvbSAnLi9wcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0VGFnVmFySW5kZXggfSBmcm9tICcuL2dldFRhZ1ZhckluZGV4LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHZhbHVlVG9UYWdKc1ZhciB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy92YWx1ZVRvVGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uLy4uL3N1YmplY3QvU3ViamVjdC5jbGFzcy5qcyc7XG4vKiogU3VwcG9ydCBzdHJpbmcgYXR0cmlidXRlcyB3aXRoIGR5bmFtaWNzIEV4OiA8ZGl2IHN0eWxlPVwiY29sb3I6YmxhY2s7Zm9udC1zaXplOjoke2ZvbnRTaXplfTtcIj48L2Rpdj4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEeW5hbWljQXJyYXlBdHRyaWJ1dGUoYXR0ck5hbWUsIGFycmF5LCBlbGVtZW50LCBjb250ZXh0cywgaG93VG9TZXQsIC8vICA9IGhvd1RvU2V0SW5wdXRWYWx1ZVxudmFsdWVzLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAvLyBsb29wIGFsbCB0byBhdHRhY2ggY29udGV4dCBhbmQgcHJvY2Vzc29yc1xuICAgIGFycmF5LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlVmFyID0gZ2V0VGFnVmFySW5kZXgodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWVWYXIgPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgbXlJbmRleCA9IGNvbnRleHRzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHRhZ0pzVmFyID0gdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNvdW50OiAwLFxuICAgICAgICAgICAgICAgIGlzQXR0cjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyTmFtZSxcbiAgICAgICAgICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgdGFnSnNWYXIsXG4gICAgICAgICAgICAgICAgdmFsdWVJbmRleDogY29udGV4dHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQsXG4gICAgICAgICAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gY29udGV4dEl0ZW0uaGFuZGxlciA9XG4gICAgICAgICAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlID0gZnVuY3Rpb24gYXJyYXlJdGVtSGFuZGxlcih2YWx1ZSwgY29udGV4dEl0ZW0sIG5ld1N1cHBvcnQsIG5ld1ZhbHVlcykge1xuICAgICAgICAgICAgICAgICsrY29udGV4dEl0ZW0udXBkYXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgc2V0QnkobmV3VmFsdWVzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwdXNoVmFsdWUgPSB2YWx1ZXNbbXlJbmRleF07XG4gICAgICAgICAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHB1c2hWYWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHRzLnB1c2goY29udGV4dEl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gc2V0QnkodmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGNvbmNhdFZhbHVlID0gYnVpbGROZXdWYWx1ZUZyb21BcnJheShhcnJheSwgdmFsdWVzLCBzdGFydEluZGV4KS5qb2luKCcnKTtcbiAgICAgICAgaG93VG9TZXQoZWxlbWVudCwgYXR0ck5hbWUsIGNvbmNhdFZhbHVlKTtcbiAgICB9XG4gICAgc2V0QnkodmFsdWVzKTtcbiAgICByZXR1cm4gY29udGV4dHM7XG59XG5mdW5jdGlvbiBidWlsZE5ld1ZhbHVlRnJvbUFycmF5KGFycmF5LCB2YWx1ZXMsIHN0YXJ0SW5kZXgpIHtcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKChhbGwsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlVmFyID0gZ2V0VGFnVmFySW5kZXgodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWVWYXIgPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgbXlJbmRleCA9IHN0YXJ0SW5kZXgrKztcbiAgICAgICAgICAgIGNvbnN0IHB1c2hWYWx1ZSA9IHZhbHVlc1tteUluZGV4XTtcbiAgICAgICAgICAgIGFsbC5wdXNoKHB1c2hWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gYWxsO1xuICAgICAgICB9XG4gICAgICAgIGFsbC5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFsbDtcbiAgICB9LCBbXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHluYW1pY0F0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGNvbnRleHQsIHBhcmVudENvbnRleHQsIGhvd1RvU2V0LCAvLyAgPSBob3dUb1NldElucHV0VmFsdWVcbnN1cHBvcnQsIGlzU3BlY2lhbCwgdmFySW5kZXgsIGNvbnRleHRzKSB7XG4gICAgY29uc3QgdGFnSnNWYXIgPSB2YWx1ZVRvVGFnSnNWYXIodmFsdWUpO1xuICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgaXNBdHRyOiB0cnVlLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBhdHRyTmFtZSxcbiAgICAgICAgaG93VG9TZXQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IHRydWUsXG4gICAgICAgIHRhZ0pzVmFyLFxuICAgICAgICBkZXN0cm95JDogbmV3IFN1YmplY3QoKSxcbiAgICAgICAgdmFsdWVJbmRleDogdmFySW5kZXgsXG4gICAgICAgIHBhcmVudENvbnRleHQsXG4gICAgfTtcbiAgICBjb250ZXh0LnB1c2goY29udGV4dEl0ZW0pO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSBwcm9jZXNzVXBkYXRlQXR0ckNvbnRleHQ7XG4gICAgcHJvY2Vzc0R5bmFtaWNOYW1lVmFsdWVBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBjb250ZXh0SXRlbSwgZWxlbWVudCwgaG93VG9TZXQsIHN1cHBvcnQsIGlzU3BlY2lhbCwgY29udGV4dHMpO1xuICAgIGNvbnRleHRJdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtO1xufVxuIiwiaW1wb3J0IHsgc3BlY2lhbEF0dHJpYnV0ZSB9IGZyb20gJy4vc3BlY2lhbEF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgeyBzZXROb25GdW5jdGlvbklucHV0VmFsdWUgfSBmcm9tICcuL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVGFnQ2FsbGJhY2tGdW4gfSBmcm9tICcuLi8uLi9yZW5kZXIvYXR0cmlidXRlcy9wcm9jZXNzQXR0cmlidXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMgfSBmcm9tICcuLi8uLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IHByb2Nlc3NGdW5jdGlvbkF0dHIgfSBmcm9tICcuL3Byb2Nlc3NGdW5jdGlvbkF0dHIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NEeW5hbWljTmFtZVZhbHVlQXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgY29udGV4dEl0ZW0sIGVsZW1lbnQsIGhvd1RvU2V0LCBzdXBwb3J0LCBpc1NwZWNpYWwsIF9jb250ZXh0cykge1xuICAgIGNvbnRleHRJdGVtLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIGNvbnRleHRJdGVtLmhvd1RvU2V0ID0gaG93VG9TZXQ7XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBCYXNpY1R5cGVzLmZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzVGFnQ2FsbGJhY2tGdW4oY29udGV4dEl0ZW0sIHZhbHVlLCBzdXBwb3J0LCBhdHRyTmFtZSwgZWxlbWVudCk7XG4gICAgfVxuICAgIGNvbnRleHRJdGVtLmF0dHJOYW1lID0gYXR0ck5hbWU7XG4gICAgY29udGV4dEl0ZW0uaXNTcGVjaWFsID0gaXNTcGVjaWFsO1xuICAgIGlmICh2YWx1ZT8udGFnSnNUeXBlKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzVGFnSnNBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlLCBjb250ZXh0SXRlbSwgc3VwcG9ydCwgZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzTm9uRHluYW1pY0F0dHIoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBob3dUb1NldCwgaXNTcGVjaWFsLCBjb250ZXh0SXRlbSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzVGFnSnNBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIGVsZW1lbnQpIHtcbiAgICB2YWx1ZS5wcm9jZXNzSW5pdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgZWxlbWVudCwgdmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIHNldE5vbkZ1bmN0aW9uSW5wdXRWYWx1ZSk7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTm9uRHluYW1pY0F0dHIoYXR0ck5hbWUsIHZhbHVlLCBlbGVtZW50LCBob3dUb1NldCwgaXNTcGVjaWFsLCBjb250ZXh0KSB7XG4gICAgaWYgKGlzU3BlY2lhbCkge1xuICAgICAgICByZXR1cm4gc3BlY2lhbEF0dHJpYnV0ZShhdHRyTmFtZSwgdmFsdWUsIGVsZW1lbnQsIGlzU3BlY2lhbCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NGdW5jdGlvbkF0dHIodmFsdWUsIGNvbnRleHQsIGF0dHJOYW1lLCBlbGVtZW50LCBob3dUb1NldCk7XG4gICAgfVxuICAgIGhvd1RvU2V0KGVsZW1lbnQsIGF0dHJOYW1lLCB2YWx1ZSk7XG59XG4iLCIvLyB0YWdnZWRqcy1uby1jb21waWxlXG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4uLy4uL2lzSW5zdGFuY2UuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhZ0pzVmFyKGF0dHJQYXJ0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGF0dHJQYXJ0KSAmJiAndGFnSnNWYXInIGluIGF0dHJQYXJ0KVxuICAgICAgICByZXR1cm4gYXR0clBhcnQudGFnSnNWYXI7XG4gICAgcmV0dXJuIC0xO1xuICAgIC8vIHJldHVybiAoYXR0clBhcnQgYXMgVGFnVmFySWROdW0pPy50YWdKc1ZhciB8fCAtMVxufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkT25lQ29udGV4dCB9IGZyb20gJy4uL2FkZE9uZUNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVtb3ZlQ29udGV4dEluQ3ljbGUsIHNldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0V2l0aFN0YXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9nZXRTdXBwb3J0V2l0aFN0YXRlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGFnSnNWYXJBdHRyaWJ1dGUodmFsdWUsIGNvbnRleHRzLCBwYXJlbnRDb250ZXh0LCB0YWdKc1ZhciwgdmFySW5kZXgsIHN1cHBvcnQsIGF0dHJOYW1lLCBlbGVtZW50LCBpc05hbWVWYXIpIHtcbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IGFkZE9uZUNvbnRleHQodmFsdWUsIGNvbnRleHRzIHx8IFtdLCB0cnVlLCBwYXJlbnRDb250ZXh0KTtcbiAgICBjb250ZXh0SXRlbS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICBjb250ZXh0SXRlbS52YWx1ZUluZGV4ID0gdmFySW5kZXg7XG4gICAgY29udGV4dEl0ZW0uaXNBdHRyID0gdHJ1ZTtcbiAgICBjb250ZXh0SXRlbS5pc05hbWVPbmx5ID0gaXNOYW1lVmFyO1xuICAgIGNvbnRleHRJdGVtLnN0YXRlT3duZXIgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKHN1cHBvcnQpO1xuICAgIGNvbnRleHRJdGVtLnN1cHBvcnRPd25lciA9IHN1cHBvcnQ7XG4gICAgc2V0Q29udGV4dEluQ3ljbGUoY29udGV4dEl0ZW0pO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NJbml0QXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSwgLy8gdGFnSnNWYXIsXG4gICAgZWxlbWVudCwgdGFnSnNWYXIsIGNvbnRleHRJdGVtLCBzdXBwb3J0LCBzZXROb25GdW5jdGlvbklucHV0VmFsdWUpO1xuICAgIHJlbW92ZUNvbnRleHRJbkN5Y2xlKCk7XG4gICAgY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IHRhZ0pzVmFyO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uLy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFN1YmplY3QsIHZhbHVlVG9UYWdKc1ZhciB9IGZyb20gJy4uLy4uL2luZGV4LmpzJztcbi8qKiBVc2VkIGZvciBib2x0cyBsaWtlIGRpdi5zdHlsZSgoKSA9PiB7e2JhY2tncm91bmRDb2xvcjp9fSkgKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRnVuY3Rpb25BdHRyKHZhbHVlLCBwYXJlbnRDb250ZXh0LCAvLyBwYXJlbnQgY29udGV4dFxuYXR0ck5hbWUsIGVsZW1lbnQsIGhvd1RvU2V0KSB7XG4gICAgY29uc3QgaW5uZXJWYWx1ZSA9IHZhbHVlKCk7XG4gICAgY29uc3QgdGFnSnNWYXJPdmVycmlkZSA9IHtcbiAgICAgICAgdGFnSnNUeXBlOiAnZHluYW1pYy1hdHRyJyxcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiAoX3ZhbHVlLCBfY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHN1YkNvbnRleHQudGFnSnNWYXIuaGFzVmFsdWVDaGFuZ2VkKG5ld1ZhbHVlLCBzdWJDb250ZXh0LCBvd25lclN1cHBvcnQpO1xuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzSW5pdDogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBkZXN0cm95OiAoX2NvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpID0+IHtcbiAgICAgICAgICAgIHN1YkNvbnRleHQudGFnSnNWYXIuZGVzdHJveShzdWJDb250ZXh0LCBvd25lclN1cHBvcnQpO1xuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiAodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgKytjb250ZXh0SXRlbS51cGRhdGVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUoKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IG9sZFZhbHVlID0gc3ViQ29udGV4dC52YWx1ZVxuICAgICAgICAgICAgLy8gY29uc3QgbmV3VGFnSnNWYXIgPSB2YWx1ZVRvVGFnSnNWYXIobmV3VmFsdWUpXG4gICAgICAgICAgICBzdWJDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUobmV3VmFsdWUsIC8vIG5ld1RhZ0pzVmFyIGFzIGFueSxcbiAgICAgICAgICAgIHN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCwgdmFsdWVzKTtcbiAgICAgICAgICAgIHN1YkNvbnRleHQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3ViQ29udGV4dCA9IHtcbiAgICAgICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgICAgIGlzQXR0cjogdHJ1ZSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgcGFyZW50Q29udGV4dCxcbiAgICAgICAgdmFsdWU6IGlubmVyVmFsdWUsIC8vIHVzZWQgZm9yIG5ldyB2YWx1ZSBjb21wYXJpbmdcbiAgICAgICAgdGFnSnNWYXI6IHZhbHVlVG9UYWdKc1Zhcihpbm5lclZhbHVlKSxcbiAgICAgICAgLy8gVE9ETzogTm90IG5lZWRlZFxuICAgICAgICB2YWx1ZUluZGV4OiAtMSxcbiAgICAgICAgd2l0aGluT3duZXJFbGVtZW50OiB0cnVlLFxuICAgICAgICBkZXN0cm95JDogbmV3IFN1YmplY3QoKSxcbiAgICB9O1xuICAgIGNvbnN0IGNvbnRleHRJdGVtID0ge1xuICAgICAgICB1cGRhdGVDb3VudDogMCxcbiAgICAgICAgaXNBdHRyOiB0cnVlLFxuICAgICAgICBjb250ZXh0czogW3N1YkNvbnRleHRdLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBwYXJlbnRDb250ZXh0LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdGFnSnNWYXI6IHRhZ0pzVmFyT3ZlcnJpZGUsXG4gICAgICAgIC8vIFRPRE86IE5vdCBuZWVkZWRcbiAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgfTtcbiAgICBzdWJDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NJbml0QXR0cmlidXRlKGF0dHJOYW1lLCBpbm5lclZhbHVlLCBlbGVtZW50LCBzdWJDb250ZXh0LnRhZ0pzVmFyLCBzdWJDb250ZXh0LCB7fSwgaG93VG9TZXQpO1xuICAgIHJldHVybiBjb250ZXh0SXRlbTtcbn1cbiIsImltcG9ydCB7IGlzU3BlY2lhbEF0dHIgfSBmcm9tIFwiLi4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9pc1NwZWNpYWxBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NOb25EeW5hbWljQXR0ciB9IGZyb20gXCIuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3Byb2Nlc3NOYW1lVmFsdWVBdHRyaWJ1dGUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IGNoZWNrU2ltcGxlVmFsdWVDaGFuZ2UsIGRlbGV0ZVNpbXBsZUF0dHJpYnV0ZSB9IGZyb20gXCIuL2dldFNpbXBsZVRhZ1Zhci5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc0F0dHJpYnV0ZVVwZGF0ZSB9IGZyb20gXCIuL3Byb2Nlc3NBdHRyaWJ1dGVVcGRhdGUuZnVuY3Rpb24uanNcIjtcbi8qKiBpbml0IHJ1bm5lciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTaW1wbGVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIC8vIFRlbXBsYXRlVmFsdWUgfCBTdHJpbmdUYWcgfCBTdWJzY3JpYmVWYWx1ZSB8IFNpZ25hbE9iamVjdCxcbmVsZW1lbnQsIHRhZ0pzVmFyLCBjb250ZXh0SXRlbSwgX293bmVyU3VwcG9ydCwgaG93VG9TZXQpIHtcbiAgICAvLyBmdW5jdGlvbiBzd2FwcGluZ1xuICAgIHRhZ0pzVmFyLmRlc3Ryb3kgPSBkZWxldGVTaW1wbGVBdHRyaWJ1dGU7XG4gICAgdGFnSnNWYXIuaGFzVmFsdWVDaGFuZ2VkID0gY2hlY2tTaW1wbGVWYWx1ZUNoYW5nZTtcbiAgICB0YWdKc1Zhci5wcm9jZXNzVXBkYXRlID0gKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzQXR0cmlidXRlVXBkYXRlKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBlbGVtZW50LCBuYW1lLCBob3dUb1NldCk7XG4gICAgfTtcbiAgICBjb25zdCBpc1NwZWNpYWwgPSBpc1NwZWNpYWxBdHRyKG5hbWUpO1xuICAgIHByb2Nlc3NOb25EeW5hbWljQXR0cihuYW1lLCB2YWx1ZSwgZWxlbWVudCwgaG93VG9TZXQsIGlzU3BlY2lhbCwgY29udGV4dEl0ZW0pO1xuICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gdGFnSnNWYXI7XG59XG4iLCJpbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tIFwiLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGNhc3RUZXh0VmFsdWUgfSBmcm9tICcuLi9jYXN0VGV4dFZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50QmVmb3JlVGV4dCwgcGFpbnRDb21tYW5kcywgYWRkUGFpbnRSZW1vdmVyIH0gZnJvbSBcIi4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgQmFzaWNUeXBlcyB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc1VwZGF0ZVJlZ3VsYXJWYWx1ZSB9IGZyb20gXCIuLi90YWcvdXBkYXRlL3Byb2Nlc3NSZWd1bGFyVmFsdWUuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IHByb2Nlc3NTaW1wbGVBdHRyaWJ1dGUgfSBmcm9tIFwiLi9wcm9jZXNzU2ltcGxlQXR0cmlidXRlLmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVTaW1wbGVBdHRyaWJ1dGUoY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dEl0ZW0uZWxlbWVudDtcbiAgICBjb25zdCBuYW1lID0gY29udGV4dEl0ZW0uYXR0ck5hbWU7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2ltcGxlVGFnVmFyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnSnNUeXBlOiAnc2ltcGxlJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBwcm9jZXNzU2ltcGxlQXR0cmlidXRlLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc1NpbXBsZVZhbHVlSW5pdCxcbiAgICAgICAgZGVzdHJveTogZGVsZXRlU2ltcGxlVmFsdWUsXG4gICAgICAgIC8vIFRPRE86IGdldCB0byB1c2luZyBvbmx5IGNoZWNrU2ltcGxlVmFsdWVDaGFuZ2VcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja1VwZGF0ZURlbGV0ZVNpbXBsZVZhbHVlQ2hhbmdlLCAvLyBGb3IgYXR0cmlidXRlcywgdGhpcyBnZXRzIHN3aXRjaGVkIHRvIGNoZWNrU2ltcGxlVmFsdWVDaGFuZ2VcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogcHJvY2Vzc1N0cmluZ1VwZGF0ZSwgLy8gRm9yIGF0dHJpYnV0ZXMsIHRoaXMgZ2V0cyBzd2l0Y2hlZCB0byBwcm9jZXNzQXR0cmlidXRlVXBkYXRlXG4gICAgICAgIC8vIHByb2Nlc3NVcGRhdGU6IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlciwgLy8gRm9yIGF0dHJpYnV0ZXMsIHRoaXMgZ2V0cyBzd2l0Y2hlZCB0byBwcm9jZXNzQXR0cmlidXRlVXBkYXRlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTdHJpbmdVcGRhdGUobmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgaWYgKG5ld1ZhbHVlID09PSBjb250ZXh0SXRlbS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZShjb250ZXh0SXRlbSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCk7XG59XG5mdW5jdGlvbiBwcm9jZXNzU2ltcGxlVmFsdWVJbml0KHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29uc3QgY2FzdGVkVmFsdWUgPSBjYXN0VGV4dFZhbHVlKHZhbHVlKTtcbiAgICBpbnNlcnRCZWZvcmUgPSBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcjtcbiAgICAvLyBhbHdheXMgaW5zZXJ0QmVmb3JlIGZvciBjb250ZW50XG4gICAgY29uc3QgcGFpbnQgPSBjb250ZXh0SXRlbS5wYWludCA9IFtwYWludEJlZm9yZVRleHQsIFtpbnNlcnRCZWZvcmUsIGNhc3RlZFZhbHVlLCBmdW5jdGlvbiBhZnRlclNpbXBsZVZhbHVlKHgpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0SXRlbS5zaW1wbGVWYWx1ZUVsbSA9IHg7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbnRleHRJdGVtLnBhaW50O1xuICAgICAgICAgICAgfSwgJ3Byb2Nlc3NTaW1wbGVWYWx1ZUluaXQnXV07XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKHBhaW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVTaW1wbGVWYWx1ZShjb250ZXh0KSB7XG4gICAgaWYgKCFjb250ZXh0LnNpbXBsZVZhbHVlRWxtICYmIGNvbnRleHQucGFpbnQpIHtcbiAgICAgICAgY29udGV4dC5wYWludFswXSA9IGJsYW5rSGFuZGxlcjtcbiAgICAgICAgcmV0dXJuOyAvLyBJJ20gYmVpbmcgZGVsZXRlZCBiZWZvcmUgbXkgZmlyc3QgcmVuZGVyIGV2ZW4gb2NjdXJyZWRcbiAgICB9XG4gICAgY29uc3QgZWxtID0gY29udGV4dC5zaW1wbGVWYWx1ZUVsbTtcbiAgICBkZWxldGUgY29udGV4dC5zaW1wbGVWYWx1ZUVsbTtcbiAgICBhZGRQYWludFJlbW92ZXIoZWxtLCAnZGVsZXRlU2ltcGxlVmFsdWUnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1NpbXBsZVZhbHVlQ2hhbmdlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IGlzQmFkVmFsdWUgPSBuZXdWYWx1ZSA9PT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGlzUmVndWxhclVwZGF0ZSA9IGlzQmFkVmFsdWUgfHwgbmV3VmFsdWUgPT09IGNvbnRleHRJdGVtLnZhbHVlOyAvLyAhKHR5cGVvZihuZXdWYWx1ZSkgPT09IEJhc2ljVHlwZXMub2JqZWN0KVxuICAgIGlmIChpc1JlZ3VsYXJVcGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIDA7IC8vIG5vIG5lZWQgdG8gZGVzdHJveSwganVzdCB1cGRhdGUgZGlzcGxheVxuICAgIH1cbiAgICByZXR1cm4gNjsgLy8gJ2NoYW5nZWQtc2ltcGxlLXZhbHVlJ1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVXBkYXRlRGVsZXRlU2ltcGxlVmFsdWVDaGFuZ2UobmV3VmFsdWUsIGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3QgaXNCYWRWYWx1ZSA9IG5ld1ZhbHVlID09PSBudWxsIHx8IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNSZWd1bGFyVXBkYXRlID0gaXNCYWRWYWx1ZSB8fCAhKHR5cGVvZiAobmV3VmFsdWUpID09PSBCYXNpY1R5cGVzLm9iamVjdCk7XG4gICAgaWYgKGlzUmVndWxhclVwZGF0ZSkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgY2F1c2UgYWxsIG90aGVyIHZhbHVlcyB0byByZW5kZXJcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZVJlZ3VsYXJWYWx1ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pO1xuICAgICAgICByZXR1cm4gMDsgLy8gbm8gbmVlZCB0byBkZXN0cm95LCBqdXN0IHVwZGF0ZSBkaXNwbGF5XG4gICAgfVxuICAgIGRlbGV0ZVNpbXBsZVZhbHVlKGNvbnRleHRJdGVtKTtcbiAgICByZXR1cm4gNjsgLy8gJ2NoYW5nZWQtc2ltcGxlLXZhbHVlJ1xufVxuIiwiaW1wb3J0IHsgY2FzdFRleHRWYWx1ZSB9IGZyb20gJy4uLy4uL2Nhc3RUZXh0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcGFpbnRCZWZvcmVUZXh0LCBwYWludENvbW1hbmRzLCBwYWludENvbnRlbnQsIHNldENvbnRlbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0U2ltcGxlVGFnVmFyIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL2dldFNpbXBsZVRhZ1Zhci5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZVJlZ3VsYXJWYWx1ZSh2YWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICBjb25zdCBjYXN0ZWRWYWx1ZSA9IGNhc3RUZXh0VmFsdWUodmFsdWUpO1xuICAgIGlmIChjb250ZXh0SXRlbS5wYWludCkge1xuICAgICAgICAvLyBpdHMgYWxyZWFkeSBwYWludGluZywganVzdCBwcm92aWRlIG5ldyB0ZXh0IHBhaW50W2Z1bmN0aW9uLCBbZWxlbWVudCwgdGV4dF1dXG4gICAgICAgIGNvbnRleHRJdGVtLnBhaW50WzFdWzFdID0gY2FzdGVkVmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb2xkQ2xvbmUgPSBjb250ZXh0SXRlbS5zaW1wbGVWYWx1ZUVsbTsgLy8gcGxhY2Vob2xkZXJcbiAgICBwYWludENvbnRlbnQucHVzaChbc2V0Q29udGVudCwgW2Nhc3RlZFZhbHVlLCBvbGRDbG9uZV1dKTtcbn1cbi8qKiBVc2VkIGR1cmluZyB1cGRhdGVzIHRoYXQgd2VyZSBhbm90aGVyIHZhbHVlL3RhZyBmaXJzdCBidXQgbm93IHNpbXBsZSBzdHJpbmcgKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTm93UmVndWxhclZhbHVlKHZhbHVlLCBjb250ZXh0SXRlbSkge1xuICAgIGNvbnRleHRJdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IGdldFNpbXBsZVRhZ1Zhcih2YWx1ZSk7XG4gICAgY29uc3QgYmVmb3JlID0gY29udGV4dEl0ZW0ucGxhY2Vob2xkZXI7XG4gICAgY29uc3QgY2FzdGVkVmFsdWUgPSBjYXN0VGV4dFZhbHVlKHZhbHVlKTtcbiAgICBjb25zdCBwYWludCA9IGNvbnRleHRJdGVtLnBhaW50ID0gW3BhaW50QmVmb3JlVGV4dCwgW2JlZm9yZSwgY2FzdGVkVmFsdWUsIGZ1bmN0aW9uIGNsZWFuUmVndWxhclZhbHVlKHgpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0SXRlbS5zaW1wbGVWYWx1ZUVsbSA9IHg7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbnRleHRJdGVtLnBhaW50O1xuICAgICAgICAgICAgfSwgJ3Byb2Nlc3NOb3dSZWd1bGFyVmFsdWUnXV07XG4gICAgcGFpbnRDb21tYW5kcy5wdXNoKHBhaW50KTtcbn1cbiIsImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lBcnJheUNvbnRleHQgfSBmcm9tICcuL2Rlc3Ryb3lBcnJheUNvbnRleHQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQXJyYXlWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgc3ViamVjdCkge1xuICAgIC8vIG5vIGxvbmdlciBhbiBhcnJheT9cbiAgICBpZiAoIWlzQXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIGRlc3Ryb3lBcnJheUNvbnRleHQoc3ViamVjdCk7XG4gICAgICAgIHJldHVybiA5OyAvLyAnYXJyYXknXG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi4vdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNvbXBhcmVBcnJheUl0ZW1zIH0gZnJvbSAnLi9jb21wYXJlQXJyYXlJdGVtcy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0gfSBmcm9tICcuLi9jcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0uZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NUYWdBcnJheShjb250ZXh0SXRlbSwgdmFsdWUsIC8vIGFycnkgb2YgVGFnIGNsYXNzZXNcbm93bmVyU3VwcG9ydCwgYXBwZW5kVG8pIHtcbiAgICBjb25zdCBub0xhc3QgPSBjb250ZXh0SXRlbS5sYXN0QXJyYXkgPT09IHVuZGVmaW5lZDtcbiAgICBpZiAobm9MYXN0KSB7XG4gICAgICAgIGNvbnRleHRJdGVtLmxhc3RBcnJheSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBsYXN0QXJyYXkgPSBjb250ZXh0SXRlbS5sYXN0QXJyYXk7XG4gICAgbGV0IHJ1bnRpbWVJbnNlcnRCZWZvcmUgPSBjb250ZXh0SXRlbS5wbGFjZWhvbGRlcjtcbiAgICBsZXQgcmVtb3ZlZCA9IDA7XG4gICAgLyoqIPCfl5HvuI8gcmVtb3ZlIHByZXZpb3VzIGl0ZW1zIGZpcnN0ICovXG4gICAgY29uc3QgZmlsdGVyZWRMYXN0ID0gW107XG4gICAgLy8gaWYgbm90IGZpcnN0IHRpbWUsIHRoZW4gY2hlY2sgZm9yIGRlbGV0ZXNcbiAgICBpZiAoIW5vTGFzdCkge1xuICAgICAgICAvLyBvbiBlYWNoIGxvb3AgY2hlY2sgdGhlIG5ldyBsZW5ndGhcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxhc3RBcnJheS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBsYXN0QXJyYXlbaW5kZXhdO1xuICAgICAgICAgICAgLy8g8J+Rge+4jyBDT01QQVJFICYgUkVNT1ZFXG4gICAgICAgICAgICBjb25zdCBuZXdSZW1vdmVkID0gY29tcGFyZUFycmF5SXRlbXModmFsdWUsIGluZGV4LCBsYXN0QXJyYXksIHJlbW92ZWQpO1xuICAgICAgICAgICAgaWYgKG5ld1JlbW92ZWQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZExhc3QucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvIHRoZSBzYW1lIG51bWJlciBhZ2FpbiBiZWNhdXNlIGl0IHdhcyBhIG1pZCBkZWxldGVcbiAgICAgICAgICAgIGlmIChuZXdSZW1vdmVkID09PSAyKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVkID0gcmVtb3ZlZCArIG5ld1JlbW92ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dEl0ZW0ubGFzdEFycmF5ID0gZmlsdGVyZWRMYXN0O1xuICAgIH1cbiAgICBjb25zdCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBjb25zdCBuZXdTdWJqZWN0ID0gcmV2aWV3QXJyYXlJdGVtKHZhbHVlLCBpbmRleCwgY29udGV4dEl0ZW0ubGFzdEFycmF5LCBvd25lclN1cHBvcnQsIHJ1bnRpbWVJbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbiAgICAgICAgcnVudGltZUluc2VydEJlZm9yZSA9IG5ld1N1YmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxufVxuZnVuY3Rpb24gcmV2aWV3QXJyYXlJdGVtKGFycmF5LCBpbmRleCwgbGFzdEFycmF5LCBvd25lclN1cHBvcnQsIHJ1bnRpbWVJbnNlcnRCZWZvcmUsIC8vIHVzZWQgZHVyaW5nIHVwZGF0ZXNcbmFwcGVuZFRvKSB7XG4gICAgY29uc3QgaXRlbSA9IGFycmF5W2luZGV4XTtcbiAgICBjb25zdCBwcmV2aW91cyA9IGxhc3RBcnJheVtpbmRleF07XG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiByZXZpZXdQcmV2aW91c0FycmF5SXRlbShpdGVtLCBwcmV2aW91cywgbGFzdEFycmF5LCBvd25lclN1cHBvcnQsIGluZGV4LCBydW50aW1lSW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHRJdGVtID0gY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtKGl0ZW0sIG93bmVyU3VwcG9ydCwgbGFzdEFycmF5LCBydW50aW1lSW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG4gICAgLy8gQWRkZWQgdG8gcHJldmlvdXMgYXJyYXlcbiAgICBsYXN0QXJyYXkucHVzaChjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtO1xufVxuZnVuY3Rpb24gcmV2aWV3UHJldmlvdXNBcnJheUl0ZW0odmFsdWUsIGl0ZW1TdWJqZWN0LCBsYXN0QXJyYXksIG93bmVyU3VwcG9ydCwgaW5kZXgsIHJ1bnRpbWVJbnNlcnRCZWZvcmUsIC8vIHVzZWQgZHVyaW5nIHVwZGF0ZXNcbmFwcGVuZFRvKSB7XG4gICAgY29uc3QgY291bGRCZVNhbWUgPSBsYXN0QXJyYXkubGVuZ3RoID4gaW5kZXg7XG4gICAgaWYgKGNvdWxkQmVTYW1lKSB7XG4gICAgICAgIHRhZ1ZhbHVlVXBkYXRlSGFuZGxlcih2YWx1ZSwgaXRlbVN1YmplY3QsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBpdGVtU3ViamVjdDtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0odmFsdWUsIG93bmVyU3VwcG9ydCwgbGFzdEFycmF5LCBydW50aW1lSW5zZXJ0QmVmb3JlLCBhcHBlbmRUbyk7XG4gICAgLy8gQWRkZWQgdG8gcHJldmlvdXMgYXJyYXlcbiAgICBsYXN0QXJyYXkucHVzaChjb250ZXh0SXRlbSk7XG4gICAgcmV0dXJuIGNvbnRleHRJdGVtO1xufVxuIiwiaW1wb3J0IHsgY2hlY2tBcnJheVZhbHVlQ2hhbmdlIH0gZnJvbSAnLi4vdGFnL2NoZWNrRGVzdHJveVByZXZpb3VzLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NUYWdBcnJheSB9IGZyb20gJy4uL3RhZy91cGRhdGUvYXJyYXlzL3Byb2Nlc3NUYWdBcnJheS5qcyc7XG5pbXBvcnQgeyB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIgfSBmcm9tICcuLi90YWcvdXBkYXRlL3RhZ1ZhbHVlVXBkYXRlSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZXN0cm95QXJyYXlDb250ZXh0IH0gZnJvbSAnLi4vdGFnL2Rlc3Ryb3lBcnJheUNvbnRleHQuZnVuY3Rpb24uanMnO1xuLyoqIGhvdyB0byBwcm9jZXNzIGFuIGFycmF5ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJyYXlUYWdWYXIodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdKc1R5cGU6ICdhcnJheScsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogcHJvY2Vzc0FycmF5SW5pdCxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogcHJvY2Vzc0FycmF5VXBkYXRlcyxcbiAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiBjaGVja0FycmF5VmFsdWVDaGFuZ2UsXG4gICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lBcnJheUNvbnRleHQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NBcnJheVVwZGF0ZXMobmV3VmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICArK2NvbnRleHRJdGVtLnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IHRhZ1VwZGF0ZVJlc3BvbnNlID0gdGFnVmFsdWVVcGRhdGVIYW5kbGVyKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICBpZiAodGFnVXBkYXRlUmVzcG9uc2UgPT09IDApIHtcbiAgICAgICAgcHJvY2Vzc1RhZ0FycmF5KGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzQXJyYXlJbml0KHZhbHVlLCAvLyBUZW1wbGF0ZVZhbHVlIHwgU3RyaW5nVGFnIHwgU3Vic2NyaWJlVmFsdWUgfCBTaWduYWxPYmplY3QsXG5jb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBfaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGNvbnN0IHN1YlZhbHVlID0gdmFsdWU7XG4gICAgcHJvY2Vzc1RhZ0FycmF5KGNvbnRleHRJdGVtLCBzdWJWYWx1ZSwgb3duZXJTdXBwb3J0LCBhcHBlbmRUbyk7XG59XG4iLCJpbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBnZXRTaW1wbGVUYWdWYXIgfSBmcm9tICcuL2dldFNpbXBsZVRhZ1Zhci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRBcnJheVRhZ1ZhciB9IGZyb20gJy4vZ2V0QXJyYXlUYWdKc1Zhci5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKSB7XG4gICAgY29uc3QgdGFnSnNUeXBlID0gdmFsdWU/LnRhZ0pzVHlwZTtcbiAgICBpZiAodGFnSnNUeXBlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEJhc2ljVGFnVmFyKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEJhc2ljVGFnVmFyKHZhbHVlKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBnZXRBcnJheVRhZ1Zhcih2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRTaW1wbGVUYWdWYXIodmFsdWUpO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgcGFpbnRBcHBlbmQsIHBhaW50QXBwZW5kcyB9IGZyb20gJy4uLy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkb21Qcm9jZXNzQ29udGV4dEl0ZW0gfSBmcm9tICcuLi8uLi9pbnRlcnBvbGF0aW9ucy9vcHRpbWl6ZXJzL2RvbVByb2Nlc3NDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyB2YWx1ZVRvVGFnSnNWYXIgfSBmcm9tICcuLi8uLi90YWdKc1ZhcnMvdmFsdWVUb1RhZ0pzVmFyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi8uLi9zdWJqZWN0L1N1YmplY3QuY2xhc3MuanMnO1xuLyoqIFVzZWQgYnkgYXJyYXlzIGFuZCBzdWJjb250ZXh0IGNyZWF0b3JzIGxpa2Ugc3Vic2NyaWJlLiBNdXN0IHByb3ZpZGUgaW5zZXJ0QmVmb3JlIE9SIGFwcGVuZFRvICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQW5kUHJvY2Vzc0NvbnRleHRJdGVtKHZhbHVlLCBvd25lclN1cHBvcnQsIGNvbnRleHRzLCBpbnNlcnRCZWZvcmUsIC8vIHVzZWQgZHVyaW5nIHVwZGF0ZXNcbmFwcGVuZFRvKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGVtcHR5KTtcbiAgICBjb25zdCBjb250ZXh0SXRlbSA9IHtcbiAgICAgICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0YWdKc1ZhcjogdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKSxcbiAgICAgICAgd2l0aGluT3duZXJFbGVtZW50OiBmYWxzZSxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGVsZW1lbnQsXG4gICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgICAgICAvLyBUT0RPOiBUaGlzIHdpbGwgbmVlZCB0byBiZSBwYXNzZWQgaW5cbiAgICAgICAgcGFyZW50Q29udGV4dDogb3duZXJTdXBwb3J0LmNvbnRleHQsXG4gICAgICAgIHZhbHVlSW5kZXg6IGNvbnRleHRzLmxlbmd0aCxcbiAgICB9O1xuICAgIGlmICghYXBwZW5kVG8pIHtcbiAgICAgICAgY29udGV4dEl0ZW0ucGxhY2Vob2xkZXIgPSBpbnNlcnRCZWZvcmU7XG4gICAgfVxuICAgIGRvbVByb2Nlc3NDb250ZXh0SXRlbSh2YWx1ZSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgaWYgKGFwcGVuZFRvKSB7XG4gICAgICAgIHBhaW50QXBwZW5kcy5wdXNoKFtwYWludEFwcGVuZCwgW2FwcGVuZFRvLCBlbGVtZW50XV0pO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dEl0ZW07XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0gfSBmcm9tICcuL2NyZWF0ZUFuZFByb2Nlc3NDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gb25GaXJzdFN1YkNvbnRleHQodmFsdWUsIHN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0ID9cbmluc2VydEJlZm9yZSkge1xuICAgIHN1YkNvbnRleHQuaGFzRW1pdHRlZCA9IHRydWU7XG4gICAgcmV0dXJuIHN1YkNvbnRleHQuY29udGV4dEl0ZW0gPSBjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0odmFsdWUsIG93bmVyU3VwcG9ydCwgW10sIGluc2VydEJlZm9yZSk7XG59XG4iLCJpbXBvcnQgeyBwYWludEFwcGVuZCwgcGFpbnRBcHBlbmRzIH0gZnJvbSAnLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGd1YXJhbnRlZUluc2VydEJlZm9yZShhcHBlbmRUbywgaW5zZXJ0QmVmb3JlKSB7XG4gICAgbGV0IGFwcGVuZE1hcmtlcjtcbiAgICAvLyBkbyB3ZSBuZWVkIHRvIGFwcGVuZCBub3cgYnV0IHByb2Nlc3Mgc3Vic2NyaXB0aW9uIGxhdGVyP1xuICAgIGlmIChhcHBlbmRUbykge1xuICAgICAgICBhcHBlbmRNYXJrZXIgPSBpbnNlcnRCZWZvcmUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlbXB0eSk7XG4gICAgICAgIHBhaW50QXBwZW5kcy5wdXNoKFtwYWludEFwcGVuZCwgW2FwcGVuZFRvLCBpbnNlcnRCZWZvcmVdXSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFwcGVuZE1hcmtlcixcbiAgICAgICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gICAgfTtcbn1cbiIsImltcG9ydCB7IGNoZWNrU3RpbGxTdWJzY3JpcHRpb24gfSBmcm9tICcuL2NoZWNrU3RpbGxTdWJzY3JpcHRpb24uZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZW1pdFN1YkNvbnRleHQgfSBmcm9tICcuL3Byb2Nlc3NTdWJzY3JpYmVXaXRoLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVXBkYXRlU3Vic2NyaWJlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgcmVzdWx0TnVtID0gY2hlY2tTdGlsbFN1YnNjcmlwdGlvbihuZXdWYWx1ZSwgLy8gc3ViVmFsdWUsXG4gICAgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgaWYgKGNvbnRleHRJdGVtLmhhc0VtaXR0ZWQgIT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgT2JzZXJ2YWJsZXMgPSBjb250ZXh0SXRlbS52YWx1ZS5PYnNlcnZhYmxlcztcbiAgICAgICAgaWYgKCFPYnNlcnZhYmxlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IE9ic2VydmFibGUgPSBPYnNlcnZhYmxlc1swXTtcbiAgICAgICAgLy8gY29uc3Qgc3ViVmFsdWUgPSBPYnNlcnZhYmxlLnZhbHVlXG4gICAgICAgIGlmICghKCd2YWx1ZScgaW4gT2JzZXJ2YWJsZSkpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gaXRzIG5ldmVyIGVtaXR0ZWRcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0TnVtID09PSAwICYmIG5ld1ZhbHVlLmNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YkNvbnRleHQgPSBjb250ZXh0SXRlbS5zdWJDb250ZXh0O1xuICAgICAgICBlbWl0U3ViQ29udGV4dChuZXdWYWx1ZSwgc3ViQ29udGV4dCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgcGFpbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi4vLi4vc3RhdGUvc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBmb3JjZVVwZGF0ZUV4aXN0aW5nVmFsdWUgfSBmcm9tICcuL2ZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZWxldGVTdWJDb250ZXh0IH0gZnJvbSAnLi9kZWxldGVDb250ZXh0U3ViQ29udGV4dC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBvbkZpcnN0U3ViQ29udGV4dCB9IGZyb20gJy4vb25GaXJzdFN1YkNvbnRleHQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ3VhcmFudGVlSW5zZXJ0QmVmb3JlIH0gZnJvbSAnLi4vZ3VhcmFudGVlSW5zZXJ0QmVmb3JlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHZhbHVlVG9UYWdKc1ZhciB9IGZyb20gJy4uLy4uL3RhZ0pzVmFycy92YWx1ZVRvVGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZSB9IGZyb20gJy4vcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSwgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi9jeWNsZXMvc2V0Q29udGV4dEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU3Vic2NyaWJlKHZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmVPcmlnaW5hbCwgLy8gb3B0aW9uYWwgYnV0IHdpbGwgYWx3YXlzIGJlIG1hZGVcbmFwcGVuZFRvKSB7XG4gICAgY29uc3Qgb2JzZXJ2YWJsZXMgPSB2YWx1ZS5PYnNlcnZhYmxlcztcbiAgICBjb25zdCB7IGFwcGVuZE1hcmtlciwgaW5zZXJ0QmVmb3JlIH0gPSBndWFyYW50ZWVJbnNlcnRCZWZvcmUoYXBwZW5kVG8sIGluc2VydEJlZm9yZU9yaWdpbmFsKTtcbiAgICBsZXQgb25PdXRwdXQgPSBmdW5jdGlvbiBvblN1YlZhbHVlKHZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KSB7XG4gICAgICAgIG9uRmlyc3RTdWJDb250ZXh0KHZhbHVlLCBzdWJDb250ZXh0LCBvd25lclN1cHBvcnQsIGluc2VydEJlZm9yZSk7XG4gICAgICAgIGNoZWNrVG9QYWludChzeW5jUnVuKTtcbiAgICAgICAgLy8gTVVUQVRJT046IGZyb20gbm93IG9uIGp1c3QgcnVuIHVwZGF0ZVxuICAgICAgICBvbk91dHB1dCA9IHN1YkNvbnRleHQudGFnSnNWYXIub25PdXRwdXQgPSBmdW5jdGlvbiBzdWJzY3JpcHRpb25VcGRhdGUodXBkYXRlVmFsdWUsIHN5bmNSdW4sIHN1YkNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFDb250ZXh0ID0gc3ViQ29udGV4dC5jb250ZXh0SXRlbTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZShhQ29udGV4dCwgdXBkYXRlVmFsdWUsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICBhQ29udGV4dC50YWdKc1Zhci5wcm9jZXNzVXBkYXRlKHVwZGF0ZVZhbHVlLCBhQ29udGV4dCwgb3duZXJTdXBwb3J0LCBbdXBkYXRlVmFsdWVdKTtcbiAgICAgICAgICAgIC8vIHByb2Nlc3NVcGRhdGVDb250ZXh0KG93bmVyU3VwcG9ydClcbiAgICAgICAgICAgIGFDb250ZXh0LnZhbHVlID0gdXBkYXRlVmFsdWU7XG4gICAgICAgICAgICBjaGVja1RvUGFpbnQoc3luY1J1bik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gc2V0dXBTdWJzY3JpYmVDYWxsYmFja1Byb2Nlc3NvcihvYnNlcnZhYmxlcywgb3duZXJTdXBwb3J0LCAodmFsdWUsIHN5bmNSdW4sIHN1YkNvbnRleHQpID0+IG9uT3V0cHV0KHZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KSwgdmFsdWUsIGNvbnRleHRJdGVtKTtcbiAgICBzdWJDb250ZXh0LmFwcGVuZE1hcmtlciA9IGFwcGVuZE1hcmtlcjtcbiAgICBjb250ZXh0SXRlbS5zdWJDb250ZXh0ID0gc3ViQ29udGV4dDtcbiAgICB2YWx1ZS5wcm9jZXNzVXBkYXRlID0gcHJvY2Vzc1VwZGF0ZVN1YnNjcmliZTtcbiAgICB2YWx1ZS5vbk91dHB1dCA9IG9uT3V0cHV0O1xuICAgIHJldHVybiBzdWJDb250ZXh0O1xufVxuLyoqIEFmdGVyIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiB5b3UgbmVlZCB0byBzZXQgYGNvbnRleHRJdGVtLnN1YkNvbnRleHQgPSBzdWJDb250ZXh0YCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU3Vic2NyaWJlQ2FsbGJhY2tQcm9jZXNzb3Iob2JzZXJ2YWJsZXMsIG93bmVyU3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0ID9cbm9uT3V0cHV0LCB0YWdKc1ZhciwgY29udGV4dEl0ZW0pIHtcbiAgICAvLyBjb25zdCBjb21wb25lbnQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKG93bmVyU3VwcG9ydClcbiAgICAvLyBvblZhbHVlIG11dGF0ZXMgc28gZnVuY3Rpb24gYmVsb3cgY2FsbHMgb3JpZ2luYWwgYW5kIG11dGF0aW9uXG4gICAgZnVuY3Rpb24gc3ViVmFsdWVIYW5kbGVyKHZhbHVlLCBpbmRleCkge1xuICAgICAgICBzdWJDb250ZXh0Lmxhc3RWYWx1ZXNbaW5kZXhdID0ge1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB0YWdKc1ZhcjogdmFsdWVUb1RhZ0pzVmFyKHZhbHVlKSxcbiAgICAgICAgICAgIG9sZFRhZ0pzVmFyOiBzdWJDb250ZXh0Lmxhc3RWYWx1ZXNbaW5kZXhdPy50YWdKc1ZhclxuICAgICAgICB9O1xuICAgICAgICB2YWx1ZXNIYW5kbGVyKHN1YkNvbnRleHQubGFzdFZhbHVlcywgaW5kZXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWx1ZXNIYW5kbGVyKG5ld1ZhbHVlcywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbmV3ZXN0UGFyZW50VGFnSnNWYXIgPSBzdWJDb250ZXh0LnRhZ0pzVmFyO1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IG5ld2VzdFBhcmVudFRhZ0pzVmFyPy5jYWxsYmFjaztcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzZXRDb250ZXh0SW5DeWNsZShjb250ZXh0SXRlbSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZVZhbHVlID0gbmV3ZXN0UGFyZW50VGFnSnNWYXIuY2FsbGJhY2soLi4ubmV3VmFsdWVzLm1hcCh4ID0+IHgudmFsdWUpKTtcbiAgICAgICAgICAgIG9uT3V0cHV0KHJlc3BvbnNlVmFsdWUsIHN5bmNSdW4sIHN1YkNvbnRleHQpO1xuICAgICAgICAgICAgcmVtb3ZlQ29udGV4dEluQ3ljbGUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvbk91dHB1dChuZXdWYWx1ZXNbaW5kZXhdLnZhbHVlLCBzeW5jUnVuLCBzdWJDb250ZXh0KTtcbiAgICB9XG4gICAgbGV0IHN5bmNSdW4gPSB0cnVlO1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSB7XG4gICAgICAgIGxhc3RWYWx1ZXM6IFtdLFxuICAgICAgICBzdWJWYWx1ZUhhbmRsZXIsXG4gICAgICAgIHZhbHVlc0hhbmRsZXIsXG4gICAgICAgIHRhZ0pzVmFyLFxuICAgICAgICBzdWJzY3JpcHRpb25zOiBbXSxcbiAgICB9O1xuICAgIC8vIEhJTlQ6IE11c3Qgc3Vic2NyaWJlIEFGVEVSIGluaXRpYWwgdmFyaWFibGUgY3JlYXRlZCBhYm92ZSBpbmNhc2Ugc3Vic2NyaWJpbmcgY2F1c2VzIGltbWVkaWF0ZSBydW5cbiAgICBvYnNlcnZhYmxlcy5mb3JFYWNoKChvYnNlcnZhYmxlLCBpbmRleCkgPT4ge1xuICAgICAgICBzeW5jUnVuID0gdHJ1ZTtcbiAgICAgICAgc3ViQ29udGV4dC5zdWJzY3JpcHRpb25zLnB1c2gob2JzZXJ2YWJsZS5zdWJzY3JpYmUodmFsdWUgPT4gc3ViVmFsdWVIYW5kbGVyKHZhbHVlLCBpbmRleCkpKTtcbiAgICAgICAgc3luY1J1biA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHRhZ0pzVmFyLm9uT3V0cHV0ID0gb25PdXRwdXQ7XG4gICAgcmV0dXJuIHN1YkNvbnRleHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zdWJzY3JpYmVDb250ZXh0KGNvbnRleHRJdGVtKSB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm47IC8vIFRPRE86IHdvbmRlciB3aHkgdGhpcyBoYXBwZW5zLCBtYXliZSBzdWJzY3JpcHRpb24gbmV2ZXIgZW1pdHM/XG4gICAgfVxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9ucztcbiAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAgICBkZWxldGUgY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVBbmRVbnN1YnNjcmliZShjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KSB7XG4gICAgKytjb250ZXh0SXRlbS51cGRhdGVDb3VudDtcbiAgICBjb25zdCBzdWJDb250ZXh0ID0gY29udGV4dEl0ZW0uc3ViQ29udGV4dDtcbiAgICB1bnN1YnNjcmliZUNvbnRleHQoY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBkZWxldGVTdWJDb250ZXh0KHN1YkNvbnRleHQsIG93bmVyU3VwcG9ydCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tUb1BhaW50KHN5bmNSdW4pIHtcbiAgICBpZiAoIXN5bmNSdW4gJiYgIXNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdXBwb3J0KSB7XG4gICAgICAgIHBhaW50KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgc2V0dXBTdWJzY3JpYmUgfSBmcm9tICcuL3NldHVwU3Vic2NyaWJlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuLi9WYWx1ZVR5cGVzLmVudW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTaWduYWwodmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIF9pbnNlcnRCZWZvcmUsIGFwcGVuZFRvKSB7XG4gICAgY29uc3Qgc3ViVmFsdWUgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5zdWJzY3JpYmUsXG4gICAgICAgIHN0YXRlczogW10sXG4gICAgICAgIE9ic2VydmFibGVzOiBbdmFsdWVdLFxuICAgIH07XG4gICAgc2V0dXBTdWJzY3JpYmUoc3ViVmFsdWUsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQsIF9pbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbn1cbiIsImltcG9ydCB7IHN0YXRlIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1NpZ25hbCB9IGZyb20gJy4uL3RhZy91cGRhdGUvcHJvY2Vzc1NpZ25hbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBkZWxldGVBbmRVbnN1YnNjcmliZSB9IGZyb20gJy4uL3RhZy91cGRhdGUvc2V0dXBTdWJzY3JpYmUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQgfSBmcm9tICcuLi90YWdKc1ZhcnMvc3Vic2NyaWJlV2l0aC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlU3Vic2NyaWJlIH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzVXBkYXRlU3Vic2NyaWJlLmZ1bmN0aW9uLmpzJztcbi8qKiBDaGVja3MgaWYgcmVuZGVyaW5nIGN5Y2xlIGluIHByb2Nlc3MuIFRoZW4gY3JlYXRlcyBvYmplY3Qgd2l0aCBcInZhbHVlXCIga2V5IGFuZCBhYmlsaXR5IHRvIFwic3Vic2NyaWJlXCIgdG8gdmFsdWUgY2hhbmdlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbChpbml0aWFsVmFsdWUpIHtcbiAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICBpZiAoc3VwcG9ydCkge1xuICAgICAgICByZXR1cm4gc3RhdGUoKCkgPT4gU2lnbmFsKGluaXRpYWxWYWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gU2lnbmFsKGluaXRpYWxWYWx1ZSk7XG59XG4vKiogQ3JlYXRlcyBvYmplY3Qgd2l0aCBcInZhbHVlXCIga2V5IGFuZCBhYmlsaXR5IHRvIFwic3Vic2NyaWJlXCIgdG8gdmFsdWUgY2hhbmdlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNpZ25hbChpbml0aWFsVmFsdWUpIHtcbiAgICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZW1pdCA9IChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICAvLyBOb3RpZnkgYWxsIHN1YnNjcmliZXJzXG4gICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2sobmV3VmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5zaWduYWwsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tTdWJzY3JpYmVWYWx1ZUNoYW5nZWQsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzU2lnbmFsLFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiBwcm9jZXNzVXBkYXRlU3Vic2NyaWJlLFxuICAgICAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgZW1pdChuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlc3Ryb3k6IGRlbGV0ZUFuZFVuc3Vic2NyaWJlLFxuICAgICAgICBlbWl0LFxuICAgICAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlKTsgLy8gZW1pdCBpbml0aWFsIHZhbHVlXG4gICAgICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgLy8gUmV0dXJuIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uXG4gICAgICAgICAgICBjb25zdCB1bnN1YiA9ICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBzdXBwb3J0IHRyYWRpdGlvbmFsIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICB1bnN1Yi51bnN1YnNjcmliZSA9IHVuc3ViO1xuICAgICAgICAgICAgcmV0dXJuIHVuc3ViO1xuICAgICAgICB9LFxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0LCBkZWZpbmVWYWx1ZU9uIH0gZnJvbSAnLi9TdWJqZWN0LmNsYXNzLmpzJztcbmV4cG9ydCBjbGFzcyBWYWx1ZVN1YmplY3QgZXh0ZW5kcyBTdWJqZWN0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcih2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1cGVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5IHdpdGggdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgY2FsbGJhY2sodGhpcy52YWx1ZSwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVmFsdWVTdWJqZWN0aXZlIGV4dGVuZHMgU3ViamVjdCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIodmFsdWUpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgIGRlZmluZVZhbHVlT24odGhpcyk7IC8vIGlmIHlvdSBleHRlbmQgdGhpcyBBTkQgaGF2ZSBhIGNvbnN0cnVjdG9yLCB5b3UgbXVzdCBjYWxsIHRoaXMgaW4geW91ciBleHRlbnNpb25cbiAgICB9XG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1cGVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIGltbWVkaWF0ZWx5IHdpdGggdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgY2FsbGJhY2sodGhpcy5fdmFsdWUsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHdpbGxDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHJldHVybiAoKGxhc3RWYWx1ZSwgdXRpbHMpID0+IHtcbiAgICAgICAgdXRpbHMuc2V0SGFuZGxlcigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2sobGFzdFZhbHVlLCB1dGlscy5uZXh0KTtcbiAgICB9KTtcbn1cbi8qKiAucGlwZSggcHJvbWlzZSgoeCkgPT4gUHJvbWlzZS5yZXNvbHZlKDQ0KSkgKSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpbGxQcm9taXNlKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuICgobGFzdFZhbHVlLCB1dGlscykgPT4ge1xuICAgICAgICB1dGlscy5zZXRIYW5kbGVyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pOyAvLyBkbyBub3RoaW5nIG9uIGluaXRpYWwgcmV0dXJuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKGxhc3RWYWx1ZSk7XG4gICAgICAgIHJlc3VsdC50aGVuKHggPT4gdXRpbHMubmV4dCh4KSk7XG4gICAgfSk7XG59XG4vKiogLnBpcGUoIHdpbGxTdWJzY3JpYmUoKHgpID0+IG5ldyBWYWx1ZVN1YmplY3QoNDQpKSApICovXG5leHBvcnQgY29uc3Qgd2lsbFN1YnNjcmliZSA9IChjYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiAoKGxhc3RWYWx1ZSwgdXRpbHMpID0+IHtcbiAgICAgICAgdXRpbHMuc2V0SGFuZGxlcigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9KTsgLy8gZG8gbm90aGluZyBvbiBpbml0aWFsIHJldHVyblxuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayhsYXN0VmFsdWUpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSByZXN1bHQuc3Vic2NyaWJlKHggPT4ge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB1dGlscy5uZXh0KHgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgeyBWYWx1ZVN1YmplY3QgfSBmcm9tICcuLi9zdWJqZWN0L2luZGV4LmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9nZXRTdXBwb3J0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuL3N0YXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IG9sZFN5bmNTdGF0ZXMgfSBmcm9tICcuL3N5bmNTdGF0ZXMuZnVuY3Rpb24uanMnO1xuLyoqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gd2F0Y2ggYXJyYXkgY2hhbmdlcywgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSB0cmlnZ2VyZWQuXG4gKiBUcmlnZ2VycyBvbiBpbml0aWFsIHdhdGNoIHNldHVwLiBUSVA6IHRyeSB3YXRjaC5ub0luaXQoKVxuICogQHBhcmFtIGN1cnJlbnRWYWx1ZXMgVFtdXG4gKiBAcGFyYW0gY2FsbGJhY2sgV2F0Y2hDYWxsYmFja1xuICogQHJldHVybnMgVFtdXG4gKi9cbmV4cG9ydCBjb25zdCB3YXRjaCA9ICgoY3VycmVudFZhbHVlcywgY2FsbGJhY2spID0+IHtcbiAgICByZXR1cm4gc2V0dXBXYXRjaChjdXJyZW50VmFsdWVzLCBjYWxsYmFjayk7XG59KTtcbmNvbnN0IGRlZmF1bHRGaW5hbGx5ID0gKHgpID0+IHg7XG5mdW5jdGlvbiBuZXdXYXRjaChzZXR1cCkge1xuICAgIGNvbnN0IG1ldGhvZCA9IChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICByZXR1cm4gc2V0dXBXYXRjaChjdXJyZW50VmFsdWVzLCBjYWxsYmFjaywgc2V0dXApO1xuICAgIH07XG4gICAgbWV0aG9kLnNldHVwID0gc2V0dXA7XG4gICAgZGVmaW5lT25NZXRob2QoKCkgPT4gbWV0aG9kLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG4vKipcbiAqIHB1dHMgYWJvdmUgZnVuY3Rpb25hbGl0eSB0b2dldGhlclxuICogQHBhcmFtIGN1cnJlbnRWYWx1ZXMgdmFsdWVzIGJlaW5nIHdhdGNoZWRcbiAqIEBwYXJhbSBjYWxsYmFjayAoY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlcykgPT4gcmVzb2x2ZVRvVmFsdWVcbiAqIEBwYXJhbSBwYXJhbTJcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IHNldHVwV2F0Y2ggPSAoY3VycmVudFZhbHVlcywgY2FsbGJhY2ssIHsgaW5pdCwgYmVmb3JlLCBmaW5hbCA9IGRlZmF1bHRGaW5hbGx5LCB9ID0ge30pID0+IHtcbiAgICBjb25zdCBwcmV2aW91cyA9IHN0YXRlKHtcbiAgICAgICAgcGFzdFJlc3VsdDogdW5kZWZpbmVkLFxuICAgICAgICB2YWx1ZXM6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICBjb25zdCBwcmV2aW91c1ZhbHVlcyA9IHByZXZpb3VzLnZhbHVlcztcbiAgICAvLyBGaXJzdCB0aW1lIHJ1bm5pbmcgd2F0Y2g/XG4gICAgaWYgKHByZXZpb3VzVmFsdWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGJlZm9yZSAmJiAhYmVmb3JlKGN1cnJlbnRWYWx1ZXMpKSB7XG4gICAgICAgICAgICBwcmV2aW91cy52YWx1ZXMgPSBjdXJyZW50VmFsdWVzO1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzLnBhc3RSZXN1bHQ7IC8vIGRvIG5vdCBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhc3RlZEluaXQgPSBpbml0IHx8IGNhbGxiYWNrO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYXN0ZWRJbml0KGN1cnJlbnRWYWx1ZXMsIHByZXZpb3VzVmFsdWVzKTtcbiAgICAgICAgcHJldmlvdXMucGFzdFJlc3VsdCA9IGZpbmFsKHJlc3VsdCk7XG4gICAgICAgIHByZXZpb3VzLnZhbHVlcyA9IGN1cnJlbnRWYWx1ZXM7XG4gICAgICAgIHJldHVybiBwcmV2aW91cy5wYXN0UmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBhbGxFeGFjdCA9IGN1cnJlbnRWYWx1ZXMuZXZlcnkoKGl0ZW0sIGluZGV4KSA9PiBpdGVtID09PSBwcmV2aW91c1ZhbHVlc1tpbmRleF0pO1xuICAgIGlmIChhbGxFeGFjdCkge1xuICAgICAgICByZXR1cm4gcHJldmlvdXMucGFzdFJlc3VsdDtcbiAgICB9XG4gICAgaWYgKGJlZm9yZSAmJiAhYmVmb3JlKGN1cnJlbnRWYWx1ZXMpKSB7XG4gICAgICAgIHByZXZpb3VzLnZhbHVlcyA9IGN1cnJlbnRWYWx1ZXM7XG4gICAgICAgIHJldHVybiBwcmV2aW91cy5wYXN0UmVzdWx0OyAvLyBkbyBub3QgY29udGludWVcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2soY3VycmVudFZhbHVlcywgcHJldmlvdXNWYWx1ZXMpO1xuICAgIHByZXZpb3VzLnBhc3RSZXN1bHQgPSBmaW5hbChyZXN1bHQpO1xuICAgIHByZXZpb3VzVmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgcHJldmlvdXNWYWx1ZXMucHVzaCguLi5jdXJyZW50VmFsdWVzKTtcbiAgICByZXR1cm4gcHJldmlvdXMucGFzdFJlc3VsdDtcbn07XG5mdW5jdGlvbiBkZWZpbmVPbk1ldGhvZChnZXRXYXRjaCwgYXR0YWNoVG8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXR0YWNoVG8sICdub0luaXQnLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhdGNoID0gZ2V0V2F0Y2goKTtcbiAgICAgICAgICAgIHdhdGNoLnNldHVwLmluaXQgPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2g7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGF0dGFjaFRvLCAnYXNTdWJqZWN0Jywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRXYXRjaCA9IGdldFdhdGNoKCk7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFN1cHBvcnQgPSBzdGF0ZSgoKSA9PiBnZXRTdXBwb3J0SW5DeWNsZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IHN1YmplY3QgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgY29uc3Qgb2xkU3RhdGUgPSBzdGF0ZSgoKSA9PiAoe1xuICAgICAgICAgICAgICAgIHN0YXRlOiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3RhdGUsXG4gICAgICAgICAgICAgICAgc3RhdGVzOiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3RhdGVzLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gKGN1cnJlbnRWYWx1ZXMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0dXBXYXRjaChjdXJyZW50VmFsdWVzLCAoY3VycmVudFZhbHVlcywgcHJldmlvdXNWYWx1ZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm93U3VwcG9ydCA9IGdldFN1cHBvcnRJbkN5Y2xlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldFRvID0gY2FsbGJhY2soY3VycmVudFZhbHVlcywgcHJldmlvdXNWYWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93U3VwcG9ydCAhPT0gZmlyc3RTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdlc3RTdGF0ZSA9IG9sZFN0YXRlLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGZpcnN0U3VwcG9ydC5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZGVzdFN0YXRlU3VwcG9ydCA9IHN0YXRlTWV0YS5vbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZGVzdFN0YXRlID0gb2xkZXN0U3RhdGVTdXBwb3J0LnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U3RhdGVzID0gb2xkU3RhdGUuc3RhdGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkU3RhdGVzID0gb2xkZXN0U3RhdGVTdXBwb3J0LnN0YXRlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFN5bmNTdGF0ZXMobmV3ZXN0U3RhdGUsIG9sZGVzdFN0YXRlLCBuZXdTdGF0ZXMsIG9sZFN0YXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdC5uZXh0KHNldFRvKTtcbiAgICAgICAgICAgICAgICB9LCBvbGRXYXRjaC5zZXR1cCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbWV0aG9kLnNldHVwID0gb2xkV2F0Y2guc2V0dXA7XG4gICAgICAgICAgICBkZWZpbmVPbk1ldGhvZCgoKSA9PiBtZXRob2QsIG1ldGhvZCk7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhdHRhY2hUbywgJ3RydXRoeScsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgY29uc3Qgd2F0Y2ggPSBnZXRXYXRjaCgpO1xuICAgICAgICAgICAgd2F0Y2guc2V0dXAuYmVmb3JlID0gKGN1cnJlbnRWYWx1ZXMpID0+IGN1cnJlbnRWYWx1ZXMuZXZlcnkoeCA9PiB4KTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaDtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXR0YWNoVG87XG59XG5kZWZpbmVPbk1ldGhvZCgoKSA9PiBuZXdXYXRjaCh7fSksIHdhdGNoKTtcbiIsImltcG9ydCB7IFN1YmplY3QsIFZhbHVlU3ViamVjdCB9IGZyb20gJy4uL3N1YmplY3QvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4vc3RhdGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgb2xkU3luY1N0YXRlcyB9IGZyb20gJy4vc3luY1N0YXRlcy5mdW5jdGlvbi5qcyc7XG4vKiogQ3JlYXRlIGEgU3ViamVjdCB0aGF0IG9uIHVwZGF0ZXMgd2lsbCBzeW5jIHN0YXRlIHZhbHVlcyB0byBrZWVwIGNoYWluZWQgZnVuY3Rpb25zIHVzaW5nIGxhdGVzdCB2YXJpYWJsZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJqZWN0KGluaXRpYWxWYWx1ZSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmIChzdXBwb3J0KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdChpbml0aWFsVmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdWJqZWN0KGluaXRpYWxWYWx1ZSk7XG59XG5zdWJqZWN0Ll92YWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG9sZGVzdFN0YXRlID0gc3RhdGUoZnVuY3Rpb24gc3ViamVjdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdGU6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZSxcbiAgICAgICAgICAgIHN0YXRlczogc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLnN0YXRlcyxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBub3dTdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICByZXR1cm4gc3RhdGUoZnVuY3Rpb24gc3ViamVjdFZhbHVlKCkge1xuICAgICAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFZhbHVlU3ViamVjdCh2YWx1ZSkucGlwZSh4ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBub3dTdXBwb3J0LmNvbnRleHQ7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZU1ldGEgPSBjb250ZXh0LnN0YXRlO1xuICAgICAgICAgICAgY29uc3QgbmV3ZXIgPSBzdGF0ZU1ldGEubmV3ZXI7XG4gICAgICAgICAgICBvbGRTeW5jU3RhdGVzKG5ld2VyLnN0YXRlLCBvbGRlc3RTdGF0ZS5zdGF0ZSwgbmV3ZXIuc3RhdGVzLCBvbGRlc3RTdGF0ZS5zdGF0ZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBhbGwoYXJncykge1xuICAgIGNvbnN0IG9sZGVzdFN0YXRlID0gc3RhdGUoKCkgPT4gKHtcbiAgICAgICAgc3RhdGU6IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5zdGF0ZSxcbiAgICAgICAgc3RhdGVzOiBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3RhdGVzLFxuICAgIH0pKTtcbiAgICBjb25zdCBub3dTdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTtcbiAgICByZXR1cm4gU3ViamVjdC5hbGwoYXJncykucGlwZSh4ID0+IHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IG5vd1N1cHBvcnQuY29udGV4dDtcbiAgICAgICAgY29uc3Qgc3RhdGVNZXRhID0gY29udGV4dC5zdGF0ZTtcbiAgICAgICAgY29uc3QgbmV3ZXIgPSBzdGF0ZU1ldGEubmV3ZXI7XG4gICAgICAgIGlmIChuZXdlcikge1xuICAgICAgICAgICAgb2xkU3luY1N0YXRlcyhuZXdlci5zdGF0ZSwgb2xkZXN0U3RhdGUuc3RhdGUsIG5ld2VyLnN0YXRlcywgb2xkZXN0U3RhdGUuc3RhdGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDtcbiAgICB9KTtcbn1cbnN1YmplY3QuYWxsID0gYWxsO1xuIiwiaW1wb3J0IHsgc2V0VXNlTWVtb3J5IH0gZnJvbSAnLi9zZXRVc2VNZW1vcnkub2JqZWN0LmpzJztcbi8qKiBVc2VkIGZvciB2YXJpYWJsZXMgdGhhdCBuZWVkIHRvIHJlbWFpbiB0aGUgc2FtZSB2YXJpYWJsZSBkdXJpbmcgcmVuZGVyIHBhc3Nlcy4gSWYgZGVmYXVsdFZhbHVlIGlzIGEgZnVuY3Rpb24gaXQgaXMgY2FsbGVkIG9ubHkgb25jZSwgaXRzIHJldHVybiB2YWx1ZSBpcyBmaXJzdCBzdGF0ZSwgYW5kIGxldCB2YWx1ZSBjYW4gY2hhbmdlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlcyhzZXR0ZXIpIHtcbiAgICBjb25zdCBjb25maWcgPSBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWc7XG4gICAgcmV0dXJuIGNvbmZpZy5oYW5kbGVycy5zdGF0ZXNIYW5kbGVyKHNldHRlcik7XG59XG4iLCJpbXBvcnQgeyBzaWduYWwgfSBmcm9tICcuL3NpZ25hbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzdGF0ZXMgfSBmcm9tICcuL3N0YXRlcy5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyB3YXRjaCB9IGZyb20gJy4vd2F0Y2guZnVuY3Rpb24uanMnO1xuLyoqXG4gKiBFbmFibGVzIHRoZSBhYmlsaXR5IHRvIG1haW50YWluIGEgY2hhbmdlIHRvIGEgcHJvcHMgdmFsdWUgdW50aWwgdGhlIHByb3AgaXRzZWxmIGNoYW5nZXNcbiAqIEBwYXJhbSBwcm9wIHR5cGljYWxseSB0aGUgbmFtZSBvZiBhbiBleGlzdGluZyBwcm9wXG4gKiBAcmV0dXJucyBpbW1lZGlhdGVseSBjYWxsIHRoZSByZXR1cm5lZCBmdW5jdGlvbjogbGV0UHJvcCh5KSh4ID0+IFt5LCB5PXhdKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGV0UHJvcChzZXR0ZXIpIHtcbiAgICBjb25zdCBwcm9wU3RhdGVzMiA9IHNpZ25hbChbXSk7XG4gICAgY29uc3QgcGFzc2VzID0gc2lnbmFsKDApO1xuICAgIGNvbnN0IHBhc3NlZE9uID0gc2lnbmFsKDApO1xuICAgIGxldCBub3dWYWx1ZXMgPSBbXTtcbiAgICBsZXQgcGFzc2VkID0gMDtcbiAgICBwYXNzZWRPbi52YWx1ZSA9IHBhc3Nlcy52YWx1ZTtcbiAgICBzZXR0ZXIoKC4uLnZhbHVlcykgPT4ge1xuICAgICAgICBub3dWYWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHJldHVybiBwcm9wU3RhdGVzMi52YWx1ZTtcbiAgICB9KTtcbiAgICAvLyBXaGVuIHRoZSB3YXRjaGVkIHZhcmlhYmxlIGNoYW5nZXMsIHRoZW4gdGhlIGxvY2FsIHByb3AgdmFyaWFibGUgaGFzIHRvIHVwZGF0ZVxuICAgIHdhdGNoKG5vd1ZhbHVlcywgKCkgPT4ge1xuICAgICAgICArK3Bhc3NlZDsgLy8gZmlyc3QgdGltZSB2YWx1ZXMgYW5kIGNoYW5nZWQgdmFsdWVzIGNhdXNlIG5ldyBzdGF0ZVxuICAgICAgICBwcm9wU3RhdGVzMi52YWx1ZSA9IG5vd1ZhbHVlcztcbiAgICAgICAgc2V0dGVyKCgpID0+IG5vd1ZhbHVlcyk7XG4gICAgfSk7XG4gICAgLy8gY2FsbGVkIGFuZCBvbmx5IHVzZWQgZHVyaW5nIHN5bmMnaW5nIHByb2Nlc3Nlc1xuICAgIHN0YXRlcygoX3gsIGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAvLyBub3cgaXRzIGNvbGxlY3Rpb24gb2YgdmFyaWFibGVzIHRpbWVcbiAgICAgICAgaWYgKHBhc3NlZCkge1xuICAgICAgICAgICAgc2V0dGVyKCguLi52YWx1ZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGlvbiB8fCBkaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFN0YXRlczIudmFsdWUgPSB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wU3RhdGVzMi52YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGFzc2VkT24udmFsdWUgPSBwYXNzZXMudmFsdWU7XG4gICAgICAgICAgICArK3Bhc3Nlcy52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIGluIGFuIGluc3luYyBjYWxsLCB3ZSBkbyBub3QgY2FyZSBhYm91dCB0aGUgdmFsdWVzIGhlcmVcbiAgICAgICAgc2V0dGVyKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wU3RhdGVzMi52YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgKytwYXNzZWQ7XG4gICAgcmV0dXJuIHByb3BTdGF0ZXMyLnZhbHVlO1xufVxuIiwiaW1wb3J0IHsgZ2V0U3VwcG9ydEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHNldFVzZU1lbW9yeSB9IGZyb20gJy4vc2V0VXNlTWVtb3J5Lm9iamVjdC5qcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJy4vc3RhdGUuZnVuY3Rpb24uanMnO1xuZnVuY3Rpb24gZ2V0QmxhbmtEaWZmTWVtb3J5KCkge1xuICAgIHJldHVybiB7IHN0YXRlRGlmZjogMCwgcHJvdmlkZXI6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0IGNvbnN0IHByb3ZpZGVycyA9IHtcbiAgICBjcmVhdGU6IChjb25zdHJ1Y3RNZXRob2QpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGVEaWZmTWVtb3J5ID0gc3RhdGUoZ2V0QmxhbmtEaWZmTWVtb3J5KTtcbiAgICAgICAgLy8gbWltaWMgaG93IG1hbnkgc3RhdGVzIHdlcmUgY2FsbGVkIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgIGlmIChzdGF0ZURpZmZNZW1vcnkuc3RhdGVEaWZmKSB7XG4gICAgICAgICAgICBsZXQgeCA9IHN0YXRlRGlmZk1lbW9yeS5zdGF0ZURpZmY7XG4gICAgICAgICAgICB3aGlsZSAoeC0tKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHN0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN0YXRlKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ29uZmlnID0gc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnO1xuICAgICAgICAgICAgY29uc3Qgb2xkU3RhdGVDb3VudCA9IHN0YXRlQ29uZmlnLnN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIFByb3ZpZGVycyB3aXRoIHByb3ZpZGVyIHJlcXVpcmVtZW50cyBqdXN0IG5lZWQgdG8gdXNlIHByb3ZpZGVycy5jcmVhdGUoKSBhbmQgcHJvdmlkZXJzLmluamVjdCgpXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGNvbnN0cnVjdE1ldGhvZC5wcm90b3R5cGUgPyBuZXcgY29uc3RydWN0TWV0aG9kKCkgOiBjb25zdHJ1Y3RNZXRob2QoKTtcbiAgICAgICAgICAgIGNvbnN0IHN1cHBvcnQgPSBzdGF0ZUNvbmZpZy5zdXBwb3J0O1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVEaWZmID0gc3RhdGVDb25maWcuc3RhdGUubGVuZ3RoIC0gb2xkU3RhdGVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0ge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdE1ldGhvZCxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICBzdGF0ZURpZmYsXG4gICAgICAgICAgICAgICAgb3duZXI6IHN1cHBvcnQsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXRlRGlmZk1lbW9yeS5wcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgY29uc3QgZ2xvYmFsID0gc3VwcG9ydC5jb250ZXh0Lmdsb2JhbDtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgPSBnbG9iYWwucHJvdmlkZXJzIHx8IFtdO1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xuICAgICAgICAgICAgc3RhdGVEaWZmTWVtb3J5LnN0YXRlRGlmZiA9IHN0YXRlRGlmZjtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNtID0gY29uc3RydWN0TWV0aG9kO1xuICAgICAgICBjb25zdCBjb21wYXJlVG8gPSBjbS5jb21wYXJlVG8gPSBjbS50b1N0cmluZygpO1xuICAgICAgICBzdGF0ZURpZmZNZW1vcnkucHJvdmlkZXIuY29uc3RydWN0TWV0aG9kLmNvbXBhcmVUbyA9IGNvbXBhcmVUbztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHsobmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVCkgfCAoKSA9PiBUfSBjb25zdHJ1Y3RvclxuICAgICAqIEByZXR1cm5zIHtUfVxuICAgICAqL1xuICAgIGluamVjdDogcHJvdmlkZXJJbmplY3Rcbn07XG5mdW5jdGlvbiBwcm92aWRlckluamVjdChjb25zdHJ1Y3Rvcikge1xuICAgIC8vIGZpbmQgb25jZSwgcmV0dXJuIHNhbWUgZXZlcnkgdGltZSBhZnRlclxuICAgIHJldHVybiBzdGF0ZShmdW5jdGlvbiBwcm92aWRlckluamVjdFN0YXRlKCkge1xuICAgICAgICAvLyBjb25zdCBtZW1vcnkgPSBzZXRVc2UubWVtb3J5XG4gICAgICAgIGNvbnN0IGNtID0gY29uc3RydWN0b3I7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVUbyA9IGNtLmNvbXBhcmVUbyA9IGNtLmNvbXBhcmVUbyB8fCBjb25zdHJ1Y3Rvci50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydEluQ3ljbGUoKTsgLy8gbWVtb3J5LnN0YXRlQ29uZmlnLnN1cHBvcnQgYXMgQW55U3VwcG9ydFxuICAgICAgICBjb25zdCBwcm92aWRlcnMgPSBbXTtcbiAgICAgICAgbGV0IG93bmVyID0ge1xuICAgICAgICAgICAgb3duZXJTdXBwb3J0OiBzdXBwb3J0Lm93bmVyU3VwcG9ydFxuICAgICAgICB9O1xuICAgICAgICB3aGlsZSAob3duZXIub3duZXJTdXBwb3J0KSB7XG4gICAgICAgICAgICBjb25zdCBvd25HbG9iYWwgPSBvd25lci5vd25lclN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgICAgICBjb25zdCBvd25lclByb3ZpZGVycyA9IG93bkdsb2JhbC5wcm92aWRlcnM7XG4gICAgICAgICAgICBpZiAoIW93bmVyUHJvdmlkZXJzKSB7XG4gICAgICAgICAgICAgICAgb3duZXIgPSBvd25lci5vd25lclN1cHBvcnQ7IC8vIGNhdXNlIHJlbG9vcCBjaGVja2luZyBuZXh0IHBhcmVudFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBvd25lclByb3ZpZGVycy5maW5kKHByb3ZpZGVyID0+IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaChwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uc3RydWN0b3JNYXRjaCA9IHByb3ZpZGVyLmNvbnN0cnVjdE1ldGhvZC5jb21wYXJlVG8gPT09IGNvbXBhcmVUbztcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RydWN0b3JNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwcm92aWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdsb2JhbCA9IHN1cHBvcnQuY29udGV4dC5nbG9iYWw7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gZ2xvYmFsLnByb3ZpZGVycyA9IGdsb2JhbC5wcm92aWRlcnMgfHwgW107XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLmNoaWxkcmVuLnB1c2goc3VwcG9ydCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyLmluc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3duZXIgPSBvd25lci5vd25lclN1cHBvcnQ7IC8vIGNhdXNlIHJlbG9vcCBjaGVja2luZyBuZXh0IHBhcmVudFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1zZyA9IGBDb3VsZCBub3QgaW5qZWN0IHByb3ZpZGVyOiAke2NvbnN0cnVjdG9yLm5hbWV9ICR7Y29uc3RydWN0b3J9YDtcbiAgICAgICAgY29uc29sZS53YXJuKGAke21zZ30uIEF2YWlsYWJsZSBwcm92aWRlcnNgLCBwcm92aWRlcnMpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9KTtcbn1cbiIsImV4cG9ydCBjbGFzcyBUYWdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlcnJvckNvZGUsIGRldGFpbHMgPSB7fSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gVGFnRXJyb3IubmFtZTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0geyAuLi5kZXRhaWxzLCBlcnJvckNvZGUgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQXJyYXlOb0tleUVycm9yIGV4dGVuZHMgVGFnRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ2FycmF5LW5vLWtleS1lcnJvcicsIGRldGFpbHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBBcnJheU5vS2V5RXJyb3IubmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3RhdGVNaXNtYXRjaEVycm9yIGV4dGVuZHMgVGFnRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ3N0YXRlLW1pc21hdGNoLWVycm9yJywgZGV0YWlscyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFN0YXRlTWlzbWF0Y2hFcnJvci5uYW1lO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTeW5jQ2FsbGJhY2tFcnJvciBleHRlbmRzIFRhZ0Vycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBkZXRhaWxzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsICdzeW5jLWNhbGxiYWNrLWVycm9yJywgZGV0YWlscyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFN5bmNDYWxsYmFja0Vycm9yLm5hbWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgcmVuZGVyU3VwcG9ydCB9IGZyb20gJy4uL3JlbmRlci9yZW5kZXJTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL2lzSW5zdGFuY2UuanMnO1xuaW1wb3J0IHsgZmluZFN0YXRlU3VwcG9ydFVwQ29udGV4dCB9IGZyb20gJy4uL2ludGVycG9sYXRpb25zL2F0dHJpYnV0ZXMvZ2V0U3VwcG9ydFdpdGhTdGF0ZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxsYmFja1N0YXRlVXBkYXRlKGNvbnRleHQsIF9vbGRTdGF0ZXMsIGNhbGxiYWNrLCAuLi5hcmdzKSB7XG4gICAgLy8gTkVXRVNUIFVQREFURSBPTERFU1Q6IGVuc3VyZSB0aGF0IHRoZSBvbGRlc3QgaGFzIHRoZSBsYXRlc3QgdmFsdWVzIGZpcnN0XG4gICAgLy9zeW5jU3RhdGVzQXJyYXkobmV3ZXN0U3VwcG9ydC5zdGF0ZXMsIG9sZFN0YXRlcylcbiAgICAvLyBydW4gdGhlIGNhbGxiYWNrXG4gICAgY29uc3QgbWF5YmVQcm9taXNlID0gY2FsbGJhY2soLi4uYXJncyk7XG4gICAgY29uc3QgbmV3ZXN0U3VwcG9ydCA9IGZpbmRTdGF0ZVN1cHBvcnRVcENvbnRleHQoY29udGV4dCk7XG4gICAgLy8gY29uc3QgbmV3ZXN0U3VwcG9ydCA9IGNvbnRleHQuc3RhdGUubmV3ZXN0IGFzIEFueVN1cHBvcnRcbiAgICBpZiAobmV3ZXN0U3VwcG9ydCkge1xuICAgICAgICAvLyBjb250ZXh0Lmdsb2JhbCAmJiBcbiAgICAgICAgaWYgKG5ld2VzdFN1cHBvcnQuY29udGV4dC5nbG9iYWwpIHtcbiAgICAgICAgICAgIHJlbmRlclN1cHBvcnQobmV3ZXN0U3VwcG9ydCk7IC8vIFRPRE86IHJlbW92ZVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC50YWdKc1Zhci5wcm9jZXNzVXBkYXRlKGNvbnRleHQudmFsdWUsIGNvbnRleHQsIG5ld2VzdFN1cHBvcnQsIC8vIG93bmVyU3VwcG9ydCxcbiAgICAgICAgICAgIFtdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKG1heWJlUHJvbWlzZSkpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5nbG9iYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU3VwcG9ydChuZXdlc3RTdXBwb3J0KTsgLy8gVE9ETzogcmVtb3ZlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUoY29udGV4dC52YWx1ZSwgY29udGV4dCwgbmV3ZXN0U3VwcG9ydCwgLy8gb3duZXJTdXBwb3J0LFxuICAgICAgICAgICAgICAgICAgICBbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbn1cbiIsImltcG9ydCBjYWxsYmFja1N0YXRlVXBkYXRlIGZyb20gJy4vY2FsbGJhY2tTdGF0ZVVwZGF0ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuL3N0YXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldENvbnRleHRJbkN5Y2xlIH0gZnJvbSAnLi4vdGFnL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG4vKiogV3JhcCBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYmFjay4gQWZ0ZXIgdGhlIHdyYXBwZXIgYW5kIGZ1bmN0aW9uIGFyZSBjYWxsZWQsIGEgcmVuZGVyaW5nIGN5Y2xlIHdpbGwgdXBkYXRlIGRpc3BsYXkgKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxsYmFjayhjYWxsYmFjaykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgIGNvbnN0IGNhbGxiYWNrU3RhdGUgPSBzdGF0ZSh7XG4gICAgICAgIGNhbGxiYWNrLFxuICAgIH0pO1xuICAgIC8vIGVuc3VyZSBvbmx5IG9uZSB0cmlnZ2VyIGluc3RhbmNlIGNyZWF0ZWQgYW5kIGFsd2F5cyByZXR1cm5lZFxuICAgIGNvbnN0IGNhbGxiYWNrVHJpZ2dlciA9IHN0YXRlKCgpID0+IGNyZWF0ZVRyaWdnZXIoY29udGV4dCwgc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLCAvLyBzZXRVc2VNZW1vcnkuc3RhdGVDb25maWcuc3RhdGVBcnJheVxuICAgIGNhbGxiYWNrU3RhdGUpKTtcbiAgICAvLyBhbHdheXMgdXBkYXRlIGNhbGxiYWNrIHRvIGxhdGVzdCBpbiBjeWNsZVxuICAgIGNhbGxiYWNrU3RhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICByZXR1cm4gY2FsbGJhY2tUcmlnZ2VyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRyaWdnZXIoY29udGV4dCwgb2xkU3RhdGUsIGNhbGxiYWNrU3RhdGUpIHtcbiAgICBjb25zdCBvbGRTdGF0ZXMgPSBvbGRTdGF0ZS5zdGF0ZXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRyaWdnZXIoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tTdGF0ZVVwZGF0ZShjb250ZXh0LCBvbGRTdGF0ZXMsIGNhbGxiYWNrU3RhdGUuY2FsbGJhY2ssIC4uLmFyZ3MpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuL3NldFVzZU1lbW9yeS5vYmplY3QuanMnO1xuaW1wb3J0IHsgU3luY0NhbGxiYWNrRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgY3JlYXRlVHJpZ2dlciB9IGZyb20gJy4vY2FsbGJhY2suZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuLi90YWcvY3ljbGVzL3NldENvbnRleHRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBjb25zdCBjYWxsYmFja01ha2VyID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0SW5DeWNsZSgpO1xuICAgIC8vIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpXG4gICAgLy8gY2FsbGJhY2sgYXMgdHlwZW9mIGlubmVyQ2FsbGJhY2tcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgc3luY0Vycm9yO1xuICAgIH1cbiAgICBjb25zdCBvbGRTdGF0ZSA9IHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZzsgLy8gLnN0YXRlQXJyYXlcbiAgICByZXR1cm4gZnVuY3Rpb24gdHJpZ2dlck1ha2VyKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVUcmlnZ2VyKGNvbnRleHQsIG9sZFN0YXRlLCB7IGNhbGxiYWNrIH0pO1xuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHN5bmNFcnJvciA9IG5ldyBTeW5jQ2FsbGJhY2tFcnJvcignY2FsbGJhY2soKSB3YXMgY2FsbGVkIG91dHNpZGUgb2Ygc3luY2hyb25vdXMgcmVuZGVyaW5nLiBVc2UgYGNhbGxiYWNrID0gY2FsbGJhY2tNYWtlcigpYCB0byBjcmVhdGUgYSBjYWxsYmFjayB0aGF0IGNvdWxkIGJlIGNhbGxlZCBvdXQgb2Ygc3luYyB3aXRoIHJlbmRlcmluZycpO1xuIiwiaW1wb3J0IHsgc3RhdGUgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4uL3RhZy9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU2lnbmFsIH0gZnJvbSAnLi9zaWduYWwuZnVuY3Rpb24uanMnO1xuLyoqIHJldHVybnMgYSBzaWduYWwgdGhhdCBjb250YWlucyBhbiBhcnJheSBhbmQgbW9ja3MgYWN0aW5nIGxpa2UgYW4gYXJyYXkgdG8gc3VwcG9ydCByb290IGFycmF5IGZ1bmN0aW9uYWxpdHkgKi9cbmV4cG9ydCBmdW5jdGlvbiBhcnJheShpbml0aWFsVmFsdWUgPSBbXSkge1xuICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0SW5DeWNsZSgpO1xuICAgIGlmIChzdXBwb3J0KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSgoKSA9PiBmaXJzdFNpZ25hbChTaWduYWwoaW5pdGlhbFZhbHVlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RTaWduYWwoU2lnbmFsKGluaXRpYWxWYWx1ZSkpO1xufVxuZnVuY3Rpb24gZmlyc3RTaWduYWwoc2lnKSB7XG4gICAgY29uc3QgZWRpdG9ycyA9IFsncHVzaCcsICdwb3AnLCAnc3BsaWNlJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnXTtcbiAgICBjb25zdCByZWFkZXJzID0gWydtYXAnLCAncmVkdWNlJywgJ2ZvckVhY2gnLCAnZXZlcnknXTtcbiAgICBjb25zdCBvdmVyd3JpdGVFbWl0dGVyID0gKGFjdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gcmVzaWduYWxbYWN0aW9uXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzaWcudmFsdWVbYWN0aW9uXSguLi5hcmdzKTtcbiAgICAgICAgICAgIHNpZy5lbWl0KHNpZy52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgcmVzaWduYWwgPSBuZXcgUHJveHkoc2lnLCB7XG4gICAgICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIC8vIElmIGFjY2Vzc2luZyBudW1lcmljIGluZGV4IGxpa2UgJzAnLCAnMScsIGV0Yy5cbiAgICAgICAgICAgIGlmICghaXNOYU4ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnLnZhbHVlW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdsZW5ndGgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZy52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWRpdG9ycy5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdmVyd3JpdGVFbWl0dGVyKHByb3ApO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiBzaWcudmFsdWVbcHJvcF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZWFkZXJzLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZy52YWx1ZVtwcm9wXS5iaW5kKHNpZy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFpc05hTihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHNpZy52YWx1ZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHNpZy5lbWl0KHNpZy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgICAgICBzaWcudmFsdWUubGVuZ3RoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgc2lnLmVtaXQoc2lnLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFwcGxpZXMgdG8gdGhlIHNpZ25hbCBhbmQgbm90IHRoZSBzaWduYWwudmFsdWUgYXJyYXlcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHNpZ1twcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzaWduYWw7XG59XG4iLCJpbXBvcnQgeyBzZXRVc2VNZW1vcnkgfSBmcm9tICcuLi8uLi9zdGF0ZS9pbmRleC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dEluQ3ljbGUoKSB7XG4gICAgcmV0dXJuIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5jb250ZXh0O1xufVxuLyoqIEdldHMgdGhlIGN1cnJlbnQgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggdGFnZ2VkanMgZG9jdW1lbnQgcHJvY2Vzc2luZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnQoKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRJbkN5Y2xlKCk7XG4gICAgcmV0dXJuIGNvbnRleHQuZWxlbWVudDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZXh0SW5DeWNsZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFVzZU1lbW9yeS5zdGF0ZUNvbmZpZy5jb250ZXh0ID0gY29udGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDb250ZXh0SW5DeWNsZSgpIHtcbiAgICBkZWxldGUgc2V0VXNlTWVtb3J5LnN0YXRlQ29uZmlnLmNvbnRleHQ7XG59XG4iLCJpbXBvcnQgeyByZW1vdmVDb250ZXh0SW5DeWNsZSwgc2V0Q29udGV4dEluQ3ljbGUgfSBmcm9tICcuL2N5Y2xlcy9zZXRDb250ZXh0SW5DeWNsZS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1VwZGF0ZUNvbnRleHQoc3VwcG9ydCwgY29udGV4dHMpIHtcbiAgICBjb25zdCB0aGlzVGFnID0gc3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXNUYWcudmFsdWVzO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgY29uc3QgbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHtcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZU9uZUNvbnRleHQodmFsdWVzLCBpbmRleCwgY29udGV4dHMsIHN1cHBvcnQpO1xuICAgICAgICArK2luZGV4O1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dHM7XG59XG4vKiogcmV0dXJucyBib29sZWFuIG9mIGRpZCByZW5kZXIgKi9cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVPbmVDb250ZXh0KHZhbHVlcywgLy8gdGhlIGludGVycG9sYXRlZCB2YWx1ZXNcbmluZGV4LCBjb250ZXh0cywgb3duZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgY29udGV4dEl0ZW0gPSBjb250ZXh0c1tpbmRleF07XG4gICAgaWYgKGNvbnRleHRJdGVtLmRlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzb21lIHZhbHVlcywgbGlrZSBzdHlsZSwgZ2V0IHJlYXJyYW5nZWQgYW5kIHRoZXJlIHZhbHVlIGFwcGVhcmFuY2UgbWF5IG5vdCBtYXRjaCBjb250ZXh0IGFwcGVhcmFuY2VcbiAgICBjb25zdCB2YWx1ZUluZGV4ID0gY29udGV4dEl0ZW0udmFsdWVJbmRleDtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlc1t2YWx1ZUluZGV4XTtcbiAgICAvLyBSZW1vdmVkLCBsZXQgdGhlIHRhZ0pzVmFycyBkbyB0aGUgY2hlY2tpbmdcbiAgICAvLyBEbyBub3QgY29udGludWUgaWYgdGhlIHZhbHVlIGlzIGp1c3QgdGhlIHNhbWVcbiAgICAvKlxuICAgIGlmKG5ld1ZhbHVlID09PSBjb250ZXh0SXRlbS52YWx1ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgICovXG4gICAgY29uc3QgdGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICBzZXRDb250ZXh0SW5DeWNsZShjb250ZXh0SXRlbSk7XG4gICAgdGFnSnNWYXIucHJvY2Vzc1VwZGF0ZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgdmFsdWVzKTtcbiAgICByZW1vdmVDb250ZXh0SW5DeWNsZSgpO1xuICAgIGNvbnRleHRJdGVtLnZhbHVlID0gbmV3VmFsdWU7XG59XG4iLCJpbXBvcnQgeyBwYWludCwgcGFpbnRpbmcgfSBmcm9tICcuLi9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzVXBkYXRlQ29udGV4dCB9IGZyb20gJy4uLy4uL3RhZy9wcm9jZXNzVXBkYXRlQ29udGV4dC5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3VwcG9ydEJ5KG9sZGVyU3VwcG9ydCwgbmV3ZXJTdXBwb3J0KSB7XG4gICAgY29uc3QgY29udGV4dHMgPSBvbGRlclN1cHBvcnQuY29udGV4dC5jb250ZXh0cztcbiAgICB1cGRhdGVTdXBwb3J0VmFsdWVzQnkob2xkZXJTdXBwb3J0LCBuZXdlclN1cHBvcnQpO1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgcHJvY2Vzc1VwZGF0ZUNvbnRleHQob2xkZXJTdXBwb3J0LCBjb250ZXh0cyk7XG4gICAgLS1wYWludGluZy5sb2NrcztcbiAgICBwYWludCgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVN1cHBvcnRWYWx1ZXNCeShvbGRlclN1cHBvcnQsIG5ld2VyU3VwcG9ydCkge1xuICAgIGNvbnN0IG5ld1RlbXBsYXRlID0gbmV3ZXJTdXBwb3J0LnRlbXBsYXRlcjtcbiAgICBjb25zdCB0ZW1wVGFnID0gbmV3ZXJTdXBwb3J0LnRlbXBsYXRlci50YWc7XG4gICAgY29uc3QgdmFsdWVzID0gbmV3VGVtcGxhdGUudmFsdWVzIHx8IHRlbXBUYWcudmFsdWVzO1xuICAgIGNvbnN0IHRhZyA9IG9sZGVyU3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIHRhZy52YWx1ZXMgPSB2YWx1ZXM7XG59XG4iLCJpbXBvcnQgeyBCYXNpY1R5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGlzVGFnQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaXNJbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBnZXROZXdHbG9iYWwgfSBmcm9tICcuL2dldE5ld0dsb2JhbC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBoYW5kbGVTdGlsbFRhZyB9IGZyb20gJy4vaGFuZGxlU3RpbGxUYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdXBkYXRlRXhpc3RpbmdUYWdDb21wb25lbnQgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXBkYXRlL3VwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZVN1cHBvcnQgfSBmcm9tICcuLi9jcmVhdGVTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbi8qKiByZXN1bHQgaXMgYW4gaW5kaWNhdGlvbiB0byBpZ25vcmUgZnVydGhlciBwcm9jZXNzaW5nIGJ1dCB0aGF0IGRvZXMgbm90IHNlZW0gaW4gdXNlIGFueW1vcmUgKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlVcGRhdGVUb1RhZyhjb250ZXh0SXRlbSwgbmV3VmFsdWUsIC8vIG5ld1ZhbHVlXG5vd25lclN1cHBvcnQpIHtcbiAgICBjb25zdCBpc0NvbXAgPSBpc1RhZ0NvbXBvbmVudChuZXdWYWx1ZSk7XG4gICAgaWYgKGlzQ29tcCkge1xuICAgICAgICBpZiAoY29udGV4dEl0ZW0uZ2xvYmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdldE5ld0dsb2JhbChjb250ZXh0SXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dEl0ZW0ub2xkVGFnSnNWYXIgPSBjb250ZXh0SXRlbS50YWdKc1ZhcjtcbiAgICAgICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBuZXdWYWx1ZTtcbiAgICAgICAgcHJlcGFyZVVwZGF0ZVRvQ29tcG9uZW50KG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGRldGVjdCBpZiBwcmV2aW91cyB2YWx1ZSB3YXMgYSB0YWdcbiAgICBjb25zdCBnbG9iYWwgPSBjb250ZXh0SXRlbS5nbG9iYWw7XG4gICAgaWYgKGdsb2JhbCkge1xuICAgICAgICBjb250ZXh0SXRlbS5vbGRUYWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgICAgICBjb250ZXh0SXRlbS50YWdKc1ZhciA9IG5ld1ZhbHVlO1xuICAgICAgICAvLyBpdHMgaHRtbC9kb20gYmFzZWQgdGFnXG4gICAgICAgIGNvbnN0IHN1cHBvcnQgPSBjb250ZXh0SXRlbS5zdGF0ZS5uZXdlc3Q7XG4gICAgICAgIGlmIChzdXBwb3J0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChuZXdWYWx1ZSkgPT09IEJhc2ljVHlwZXMuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZVN0aWxsVGFnKHN1cHBvcnQsIGNvbnRleHRJdGVtLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICBuZXdWYWx1ZS5wcm9jZXNzSW5pdChuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0ucGxhY2Vob2xkZXIpO1xuICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgY29udGV4dEl0ZW0udGFnSnNWYXIgPSBuZXdWYWx1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHByZXBhcmVVcGRhdGVUb0NvbXBvbmVudCh0ZW1wbGF0ZXIsIGNvbnRleHRJdGVtLCBvd25lclN1cHBvcnQpIHtcbiAgICAvLyBXaGVuIGxhc3QgdmFsdWUgd2FzIG5vdCBhIGNvbXBvbmVudFxuICAgIGlmICghY29udGV4dEl0ZW0uc3RhdGUubmV3ZXN0KSB7XG4gICAgICAgIDtcbiAgICAgICAgdGVtcGxhdGVyLnByb2Nlc3NJbml0KHRlbXBsYXRlciwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0ucGxhY2Vob2xkZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN1cHBvcnQgPSBjcmVhdGVTdXBwb3J0KHRlbXBsYXRlciwgb3duZXJTdXBwb3J0LCBvd25lclN1cHBvcnQuYXBwU3VwcG9ydCwgY29udGV4dEl0ZW0pO1xuICAgIHVwZGF0ZUV4aXN0aW5nVGFnQ29tcG9uZW50KG93bmVyU3VwcG9ydCwgc3VwcG9ydCwgLy8gbGF0ZXN0IHZhbHVlXG4gICAgY29udGV4dEl0ZW0pO1xufVxuIiwiaW1wb3J0IHsgdXBkYXRlU3VwcG9ydEJ5IH0gZnJvbSAnLi4vLi4vcmVuZGVyL3VwZGF0ZS91cGRhdGVTdXBwb3J0QnkuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY3JlYXRlU3VwcG9ydCB9IGZyb20gJy4uL2NyZWF0ZVN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVN0aWxsVGFnKG9sZFN1cHBvcnQsIHN1YmplY3QsIHZhbHVlLCBvd25lclN1cHBvcnQpIHtcbiAgICAvLyBWYWx1ZSBpcyByZXN1bHQgb2YgZWl0aGVyIHRhZygoKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMTQwNThbMF0pKSBvciAoKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMTQwNThbMV0pXG4gICAgbGV0IHRlbXBsYXRlciA9IHZhbHVlLnRlbXBsYXRlciB8fCB2YWx1ZTtcbiAgICBjb25zdCBvbGRUdGFnID0gb2xkU3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIGlmIChvbGRUdGFnKSB7XG4gICAgICAgIGNvbnN0IGlubmVySFRNTCA9IG9sZFR0YWcuX2lubmVySFRNTDtcbiAgICAgICAgaWYgKGlubmVySFRNTCkge1xuICAgICAgICAgICAgLy8gVmFsdWUgaGFzIGlubmVySFRNTCB0aGF0IGlzIGVpdGhlciB0YWcoKSBvciBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMTQwNThbMl0pXG4gICAgICAgICAgICB0ZW1wbGF0ZXIgPSB2YWx1ZS5vdXRlckhUTUwgfHwgdmFsdWUuX2lubmVySFRNTC5vdXRlckhUTUw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdmFsdWVTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgb3duZXJTdXBwb3J0LmFwcFN1cHBvcnQsIHN1YmplY3QpO1xuICAgIGNvbnN0IGxhc3RTdWJqZWN0ID0gb2xkU3VwcG9ydC5jb250ZXh0O1xuICAgIGNvbnN0IG9sZGVzdCA9IGxhc3RTdWJqZWN0LnN0YXRlLm9sZGVzdDtcbiAgICB1cGRhdGVTdXBwb3J0Qnkob2xkZXN0LCB2YWx1ZVN1cHBvcnQpO1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczExNDA1ODogW1tdLCBbXSwgW11dIH07XG4iLCJpbXBvcnQgeyBCYXNpY1R5cGVzLCBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgdHJ5VXBkYXRlVG9UYWcgfSBmcm9tICcuL3RyeVVwZGF0ZVRvVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi8uLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IHByb2Nlc3NUYWdBcnJheSB9IGZyb20gJy4vYXJyYXlzL3Byb2Nlc3NUYWdBcnJheS5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTm93UmVndWxhclZhbHVlIH0gZnJvbSAnLi9wcm9jZXNzUmVndWxhclZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldEFycmF5VGFnVmFyIH0gZnJvbSAnLi4vLi4vdGFnSnNWYXJzL2dldEFycmF5VGFnSnNWYXIuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRvRGlmZlZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgb3duZXJTdXBwb3J0LCBpZ25vcmVPckRlc3Ryb3llZCkge1xuICAgIC8vIGlzIG5ldyB2YWx1ZSBhIHRhZz9cbiAgICBjb25zdCB0YWdKc1R5cGUgPSBuZXdWYWx1ZSAmJiBuZXdWYWx1ZS50YWdKc1R5cGU7XG4gICAgaWYgKHRhZ0pzVHlwZSkge1xuICAgICAgICBpZiAodGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnJlbmRlck9uY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnlVcGRhdGVUb1RhZyhjb250ZXh0SXRlbSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIHByb2Nlc3NUYWdBcnJheShjb250ZXh0SXRlbSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIGNvbnRleHRJdGVtLm9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgICAgIGNvbnRleHRJdGVtLnRhZ0pzVmFyID0gZ2V0QXJyYXlUYWdWYXIobmV3VmFsdWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKG5ld1ZhbHVlKSA9PT0gQmFzaWNUeXBlcy5mdW5jdGlvbikge1xuICAgICAgICBjb250ZXh0SXRlbS52YWx1ZSA9IG5ld1ZhbHVlOyAvLyBkbyBub3QgcmVuZGVyIGZ1bmN0aW9ucyB0aGF0IGFyZSBub3QgZXhwbGljaXR5IGRlZmluZWQgYXMgdGFnIGh0bWwgcHJvY2Vzc2luZ1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpZ25vcmVPckRlc3Ryb3llZCkgeyAvLyBUT0RPOiBpcyB0aGlzIGNoZWNrIHJlYWxseSBuZWVkZWQ/XG4gICAgICAgIHByb2Nlc3NOb3dSZWd1bGFyVmFsdWUobmV3VmFsdWUsIGNvbnRleHRJdGVtKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB1cGRhdGVUb0RpZmZWYWx1ZSB9IGZyb20gJy4vdXBkYXRlVG9EaWZmVmFsdWUuZnVuY3Rpb24uanMnO1xuLyoqIHVzZWQgdG8gaGFuZGxlIHdoZW4gdmFsdWUgd2FzIHN1YnNjcmliZSBidXQgbm93IGlzIHNvbWV0aGluZyBlbHNlICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20ob3JpZ2luYWxUeXBlLCBuZXdWYWx1ZSwgb3duZXJTdXBwb3J0LCBjb250ZXh0SXRlbSkge1xuICAgIGNvbnN0IGlzRGlmZmVyZW50ID0gIW5ld1ZhbHVlIHx8ICFuZXdWYWx1ZS50YWdKc1R5cGUgfHwgbmV3VmFsdWUudGFnSnNUeXBlICE9PSBvcmlnaW5hbFR5cGU7XG4gICAgaWYgKGlzRGlmZmVyZW50KSB7XG4gICAgICAgIGNvbnN0IG9sZFRhZ0pzVmFyID0gY29udGV4dEl0ZW0udGFnSnNWYXI7XG4gICAgICAgIG9sZFRhZ0pzVmFyLmRlc3Ryb3koY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCk7XG4gICAgICAgIHVwZGF0ZVRvRGlmZlZhbHVlKG5ld1ZhbHVlLCBjb250ZXh0SXRlbSwgLy8gc3ViU3ViQ29udGV4dCxcbiAgICAgICAgb3duZXJTdXBwb3J0LCA5OSk7XG4gICAgICAgIHJldHVybiA5OTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGhhbmRsZVRhZ1R5cGVDaGFuZ2VGcm9tIH0gZnJvbSAnLi9oYW5kbGVUYWdUeXBlQ2hhbmdlRnJvbS5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tTdGlsbFN1YnNjcmlwdGlvbihuZXdWYWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCkge1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSBjb250ZXh0SXRlbS5zdWJDb250ZXh0O1xuICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBoYW5kbGVUYWdUeXBlQ2hhbmdlRnJvbShWYWx1ZVR5cGVzLnN1YnNjcmliZSwgbmV3VmFsdWUsIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0pO1xuICAgIGlmIChoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJldHVybiBoYXNDaGFuZ2VkO1xuICAgIH1cbiAgICBpZiAoIXN1YkNvbnRleHQgfHwgIXN1YkNvbnRleHQuaGFzRW1pdHRlZCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgc3ViQ29udGV4dC50YWdKc1ZhciA9IG5ld1ZhbHVlO1xuICAgIHN1YkNvbnRleHQudmFsdWVzSGFuZGxlcihzdWJDb250ZXh0Lmxhc3RWYWx1ZXMsIDApO1xuICAgIHJldHVybiAwO1xufVxuIiwiaW1wb3J0IHsgbmV3U3VwcG9ydEJ5VGVtcGxhdGVyLCBwcm9jZXNzVGFnLCB0YWdGYWtlVGVtcGxhdGVyIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3VwZGF0ZS9wcm9jZXNzVGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldE5ld0dsb2JhbCB9IGZyb20gJy4vZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NOZXdTdWJqZWN0VGFnIH0gZnJvbSAnLi9wcm9jZXNzTmV3U3ViamVjdFRhZy5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0RvbVRhZ0luaXQodmFsdWUsIC8vIFN0cmluZ1RhZyxcbmNvbnRleHRJdGVtLCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbm93bmVyU3VwcG9ydCwgLy8gb3duaW5nU3VwcG9ydFxuaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGNvbnN0IHRhZyA9IHZhbHVlO1xuICAgIGxldCB0ZW1wbGF0ZXIgPSB0YWcudGVtcGxhdGVyO1xuICAgIGlmICghdGVtcGxhdGVyKSB7XG4gICAgICAgIHRlbXBsYXRlciA9IHRhZ0Zha2VUZW1wbGF0ZXIodGFnKTtcbiAgICB9XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHRJdGVtKTtcbiAgICBpZiAoYXBwZW5kVG8pIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NOZXdTdWJqZWN0VGFnKHRlbXBsYXRlciwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgYXBwZW5kVG8sIGluc2VydEJlZm9yZSk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXRlTWV0YSA9IGNvbnRleHRJdGVtLnN0YXRlID0gY29udGV4dEl0ZW0uc3RhdGUgfHwge307XG4gICAgc3RhdGVNZXRhLm5ld2VzdCA9IG5ld1N1cHBvcnRCeVRlbXBsYXRlcih0ZW1wbGF0ZXIsIG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0pO1xuICAgIHJldHVybiBwcm9jZXNzVGFnKG93bmVyU3VwcG9ydCwgY29udGV4dEl0ZW0pO1xufVxuIiwiLy8gdGFnZ2VkanMtbm8tY29tcGlsZVxuaW1wb3J0IHsgVmFsdWVUeXBlcyB9IGZyb20gJy4vVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRJbkN5Y2xlIH0gZnJvbSAnLi9jeWNsZXMvZ2V0U3VwcG9ydEluQ3ljbGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc0RvbVRhZ0luaXQgfSBmcm9tICcuL3VwZGF0ZS9wcm9jZXNzRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBjaGVja1RhZ1ZhbHVlQ2hhbmdlQW5kVXBkYXRlIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlIH0gZnJvbSAnLi91cGRhdGUvZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlciB9IGZyb20gJy4vdXBkYXRlL3RhZ1ZhbHVlVXBkYXRlSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0gfSBmcm9tICcuL2Rlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbS5mdW5jdGlvbi5qcyc7XG4vKiogVXNlZCB0byBvdmVycmlkZSB0aGUgaHRtbGBgIHByb2Nlc3NpbmcgdGhhdCB3aWxsIGZpcnN0IHJlbmRlciBvdXRlckhUTUwgYW5kIHRoZW4gaXRzIGlubmVySFRNTCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NPdXRlckRvbVRhZ0luaXQodmFsdWUsIGNvbnRleHRJdGVtLCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbm93bmVyU3VwcG9ydCwgLy8gb3duaW5nU3VwcG9ydFxuaW5zZXJ0QmVmb3JlLCBhcHBlbmRUbykge1xuICAgIGNvbnN0IG91dGVySFRNTCA9IHZhbHVlLm91dGVySFRNTDtcbiAgICBwcm9jZXNzRG9tVGFnSW5pdChvdXRlckhUTUwsIGNvbnRleHRJdGVtLCAvLyBjb3VsZCBiZSB0YWcgdmlhIHJlc3VsdC50YWdcbiAgICBvd25lclN1cHBvcnQsIC8vIG93bmluZ1N1cHBvcnRcbiAgICBpbnNlcnRCZWZvcmUsIGFwcGVuZFRvKTtcbiAgICAvLyBjb250ZXh0SXRlbS5oYW5kbGVyID0gZnVuY3Rpb24gb3V0RG9tVGFnSGFubGRlcihcbiAgICBjb25zdCB0YWdKc1ZhciA9IGNvbnRleHRJdGVtLnRhZ0pzVmFyO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUgPSBmdW5jdGlvbiBvdXREb21UYWdIYW5sZGVyKHZhbHVlLCBjb250ZXh0SXRlbTIsIG5ld1N1cHBvcnQpIHtcbiAgICAgICAgZm9yY2VVcGRhdGVFeGlzdGluZ1ZhbHVlKGNvbnRleHRJdGVtMiwgdmFsdWU/Lm91dGVySFRNTCB8fCB2YWx1ZSwgbmV3U3VwcG9ydCk7XG4gICAgfTtcbiAgICAvLyBUT0RPOiBOb3QgYmVzdCBpZGVhIHRvIHN3YXAgb3V0IHRoZSBvcmlnaW5hbCB2YWx1ZXMgY2hhbmdlQ2hlY2tlclxuICAgIHZhbHVlLmhhc1ZhbHVlQ2hhbmdlZCA9IGNoZWNrT3V0ZXJUYWdWYWx1ZUNoYW5nZTtcbn1cbmZ1bmN0aW9uIGNoZWNrT3V0ZXJUYWdWYWx1ZUNoYW5nZShuZXdWYWx1ZSwgY29udGV4dEl0ZW0pIHtcbiAgICByZXR1cm4gY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZShuZXdWYWx1ZSwgLy8gKG5ld1ZhbHVlIGFzIFRhZyk/Lm91dGVySFRNTCB8fCBuZXdWYWx1ZSxcbiAgICBjb250ZXh0SXRlbSk7XG59XG4vKiogdGFnKGh0bWxgYCkgV2hlbiBydW50aW1lIGlzIGluIGJyb3dzZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJpbmdUYWcoc3RyaW5ncywgdmFsdWVzKSB7XG4gICAgY29uc3QgdGFnID0ge1xuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIG93bmVyU3VwcG9ydDogZ2V0U3VwcG9ydEluQ3ljbGUoKSxcbiAgICAgICAgdGFnSnNUeXBlOiBWYWx1ZVR5cGVzLnRhZyxcbiAgICAgICAgcHJvY2Vzc0luaXRBdHRyaWJ1dGU6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NEb21UYWdJbml0LFxuICAgICAgICBwcm9jZXNzVXBkYXRlOiB0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSxcbiAgICAgICAgZGVzdHJveTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBzdHJpbmdzLFxuICAgICAgICAvKiogVXNlZCB3aXRoaW4gYW4gYXJyYXkubWFwKCkgdGhhdCByZXR1cm5zIGh0bWwgYWthIGFycmF5Lm1hcCh4ID0+IGh0bWxgYC5rZXkoeCkpICovXG4gICAgICAgIGtleShhcnJheVZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5VGFnKGFycmF5VmFsdWUsIHRhZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBha2Egc2V0SW5uZXJIVE1MICovXG4gICAgICAgIHNldEhUTUw6IGZ1bmN0aW9uIHNldEhUTUwoaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICBpbm5lckhUTUwub3V0ZXJIVE1MID0gdGFnO1xuICAgICAgICAgICAgdGFnLl9pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgICAgICAgICBpbm5lckhUTUwub2xkUHJvY2Vzc0luaXQgPSBpbm5lckhUTUwucHJvY2Vzc0luaXQ7XG4gICAgICAgICAgICAvLyBUT0RPOiBOb3QgYmVzdCBpZGVhIHRvIG92ZXJyaWRlIHRoZSBpbml0XG4gICAgICAgICAgICBpbm5lckhUTUwucHJvY2Vzc0luaXQgPSBwcm9jZXNzT3V0ZXJEb21UYWdJbml0O1xuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIFVzZWQgd2l0aGluIHRoZSBvdXRlckhUTUwgdGFnIHRvIHNpZ25pZnkgdGhhdCBpdCBjYW4gdXNlIGlubmVySFRNTCAqL1xuICAgICAgICBhY2NlcHRJbm5lckhUTUw6IGZ1bmN0aW9uIGFjY2VwdElubmVySFRNTCh1c2VUYWdWYXIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGRhdGF0eXBlXG4gICAgICAgICAgICB1c2VUYWdWYXIub3duZXIgPSB0YWc7XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9LFxuICAgICAgICBodG1sOiBmdW5jdGlvbiBodG1sKHN0cmluZ3MsIHZhbHVlcykge1xuICAgICAgICAgICAgdGFnLmNoaWxkcmVuID0geyBzdHJpbmdzLCB2YWx1ZXMgfTtcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsICdpbm5lckhUTUwnLCB7XG4gICAgICAgIHNldChpbm5lckhUTUwpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWcuc2V0SFRNTChpbm5lckhUTUwpO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0YWc7XG59XG5leHBvcnQgZnVuY3Rpb24ga2V5VGFnKGFycmF5VmFsdWUsIHRhZykge1xuICAgIGtleVRhZyhhcnJheVZhbHVlLCB0YWcpO1xuICAgIHRhZy5hcnJheVZhbHVlID0gYXJyYXlWYWx1ZTtcbiAgICByZXR1cm4gdGFnO1xufVxuIiwiaW1wb3J0IHsgZ2V0RG9tVGFnIH0gZnJvbSAnLi9nZXREb21UYWcuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgUHJvcFdhdGNoZXMgfSBmcm9tICcuLi90YWdKc1ZhcnMvdGFnLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFRlbXBsYXRlclJlc3VsdCB9IGZyb20gJy4vZ2V0VGVtcGxhdGVyUmVzdWx0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN0cmluZ1RhZyB9IGZyb20gJy4vcHJvY2Vzc091dGVyRG9tVGFnSW5pdC5mdW5jdGlvbi5qcyc7XG4vKiogVXNlZCBhcyBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMTY3NzNbMV0pICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbChzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgICBjb25zdCBzdHJpbmdUYWcgPSBnZXRTdHJpbmdUYWcoc3RyaW5ncywgdmFsdWVzKTtcbiAgICBjb25zdCB0ZW1wbGF0ZXIgPSBnZXRUZW1wbGF0ZXJSZXN1bHQoUHJvcFdhdGNoZXMuTk9ORSk7XG4gICAgdGVtcGxhdGVyLnRhZyA9IHN0cmluZ1RhZztcbiAgICBzdHJpbmdUYWcudGVtcGxhdGVyID0gdGVtcGxhdGVyO1xuICAgIHJldHVybiBzdHJpbmdUYWc7XG59XG5odG1sLmRvbSA9IGZ1bmN0aW9uIChkb20sIC4uLnZhbHVlcykge1xuICAgIHJldHVybiBnZXREb21UYWcoZG9tLCB2YWx1ZXMpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxMTY3NzM6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiB9XV0gfTtcbiIsIi8vIHRhZ2dlZGpzLW5vLWNvbXBpbGVcbmltcG9ydCB7IFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4vY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NEb21UYWdJbml0IH0gZnJvbSAnLi91cGRhdGUvcHJvY2Vzc0RvbVRhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSB9IGZyb20gJy4uL2luZGV4LmpzJztcbmltcG9ydCB7IHByb2Nlc3NPdXRlckRvbVRhZ0luaXQgfSBmcm9tICcuL3Byb2Nlc3NPdXRlckRvbVRhZ0luaXQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdGFnVmFsdWVVcGRhdGVIYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUvdGFnVmFsdWVVcGRhdGVIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGJsYW5rSGFuZGxlciB9IGZyb20gJy4uL3JlbmRlci9kb20vYmxhbmtIYW5kbGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSB9IGZyb20gJy4vZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLmZ1bmN0aW9uLmpzJztcbi8qKiBXaGVuIGNvbXBpbGVkIHRvIHRoZW4gcnVuIGluIGJyb3dzZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREb21UYWcoZG9tLCB2YWx1ZXMpIHtcbiAgICBjb25zdCB0YWcgPSB7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgb3duZXJTdXBwb3J0OiBnZXRTdXBwb3J0SW5DeWNsZSgpLFxuICAgICAgICBkb20sXG4gICAgICAgIHRhZ0pzVHlwZTogVmFsdWVUeXBlcy5kb20sXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgIHByb2Nlc3NJbml0OiBwcm9jZXNzRG9tVGFnSW5pdCxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogdGFnVmFsdWVVcGRhdGVIYW5kbGVyLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrVGFnVmFsdWVDaGFuZ2VBbmRVcGRhdGUsXG4gICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lTdXBwb3J0QnlDb250ZXh0SXRlbSxcbiAgICAgICAga2V5OiBmdW5jdGlvbiBrZXlGdW4oYXJyYXlWYWx1ZSkge1xuICAgICAgICAgICAgdGFnLmFycmF5VmFsdWUgPSBhcnJheVZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRhZztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SFRNTDogZnVuY3Rpb24gc2V0SFRNTChpbm5lckhUTUwpIHtcbiAgICAgICAgICAgIGlubmVySFRNTC5vdXRlckhUTUwgPSB0YWc7XG4gICAgICAgICAgICB0YWcuX2lubmVySFRNTCA9IGlubmVySFRNTDtcbiAgICAgICAgICAgIGlubmVySFRNTC5vbGRQcm9jZXNzSW5pdCA9IGlubmVySFRNTC5wcm9jZXNzSW5pdDtcbiAgICAgICAgICAgIC8vIFRPRE86IE5vdCBiZXN0IGlkZWEgdG8gb3ZlcnJpZGUgdGhlIGluaXRcbiAgICAgICAgICAgIGlubmVySFRNTC5wcm9jZXNzSW5pdCA9IHByb2Nlc3NPdXRlckRvbVRhZ0luaXQ7XG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9LFxuICAgICAgICAvKiogVXNlZCB3aXRoaW4gdGhlIG91dGVySFRNTCB0YWcgdG8gc2lnbmlmeSB0aGF0IGl0IGNhbiB1c2UgaW5uZXJIVE1MICovXG4gICAgICAgIGFjY2VwdElubmVySFRNTDogZnVuY3Rpb24gYWNjZXB0SW5uZXJIVE1MKHVzZVRhZ1Zhcikge1xuICAgICAgICAgICAgLy8gVE9ETzogZGF0YXR5cGVcbiAgICAgICAgICAgIHVzZVRhZ1Zhci5vd25lciA9IHRhZztcbiAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgIH0sXG4gICAgICAgIGh0bWw6IHtcbiAgICAgICAgICAgIGRvbTogZnVuY3Rpb24gZG9tKGRvbSwgLy8gT2JqZWN0Q2hpbGRyZW5cbiAgICAgICAgICAgIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIHRhZy5jaGlsZHJlbiA9IHsgZG9tOiBkb20sIHZhbHVlcyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsICdpbm5lckhUTUwnLCB7XG4gICAgICAgIHNldChpbm5lckhUTUwpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWcuc2V0SFRNTChpbm5lckhUTUwpO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB0YWc7XG59XG4iLCJpbXBvcnQgeyBWYWx1ZVR5cGVzIH0gZnJvbSAnLi4vdGFnL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBhcHBFbGVtZW50cywgYnVpbGRCZWZvcmVFbGVtZW50IH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgcHJvY2Vzc1JlcGxhY2VtZW50Q29tcG9uZW50IH0gZnJvbSAnLi4vdGFnL3VwZGF0ZS9wcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclRhZ0VsZW1lbnQoc3VwcG9ydCwgZWxlbWVudCwgZ2xvYmFsLCAvLyBUT0RPOiByZW1vdmVcbnRlbXBsYXRlciwgYXBwLCBwbGFjZWhvbGRlcikge1xuICAgIGNvbnN0IGNvbnRleHQgPSBzdXBwb3J0LmNvbnRleHQ7XG4gICAgY29udGV4dC5zdGF0ZS5vbGRlc3QgPSBzdXBwb3J0O1xuICAgIGNvbnRleHQuc3RhdGUubmV3ZXN0ID0gc3VwcG9ydDtcbiAgICAvLyBDb3B5IG5ld2VyIHRvIG9sZGVyIHdoZW4gcmVzZXR0aW5nXG4gICAgY29udGV4dC5zdGF0ZS5vbGRlciA9IGNvbnRleHQuc3RhdGUubmV3ZXI7XG4gICAgLy8gVE9ETzogV09SS0lORyBIRVJFIHRvIGltcGxlbWVudCBoaWdoZXIgbGV2ZWwgdGFnRWxlbWVudCB1c2luZyBtb2NrIGVsZW1lbnRzXG4gICAgY29uc3QgdGFnID0gc3VwcG9ydC50ZW1wbGF0ZXIudGFnO1xuICAgIGlmICghWydkb20nLCAnaHRtbCddLmluY2x1ZGVzKHRhZy50YWdKc1R5cGUpKSB7XG4gICAgICAgIGNvbnRleHQuY29udGV4dHMgPSBbXTtcbiAgICAgICAgY29uc3QgbmV3RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG5ld0ZyYWdtZW50LmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgY29uc3QgcmVwbGFjZVJlc3VsdCA9IHByb2Nlc3NSZXBsYWNlbWVudENvbXBvbmVudChzdXBwb3J0LnRlbXBsYXRlciwgY29udGV4dCwgc3VwcG9ydCk7XG4gICAgICAgIC8vIHJldHVybiByZXBsYWNlUmVzdWx0IGFzIGFueVxuICAgICAgICByZXR1cm4gbmV3RnJhZ21lbnQ7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUuZGVidWcoJ/Cfj7fvuI8gQnVpbGRpbmcgZWxlbWVudCBpbnRvIHRhZy4uLicsIHtlbGVtZW50LCBhcHAsIHN1cHBvcnR9KVxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkQmVmb3JlRWxlbWVudChzdXBwb3J0LCBlbGVtZW50LCB1bmRlZmluZWQpO1xuICAgIGxldCBzZXRVc2UgPSB0ZW1wbGF0ZXIuc2V0VXNlO1xuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlICE9PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IHdyYXAgPSBhcHA7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gd3JhcC5vcmlnaW5hbDtcbiAgICAgICAgc2V0VXNlID0gb3JpZ2luYWwuc2V0VXNlO1xuICAgICAgICBvcmlnaW5hbC5pc0FwcCA9IHRydWU7XG4gICAgfVxuICAgIDtcbiAgICBlbGVtZW50LnNldFVzZSA9IHNldFVzZTtcbiAgICBlbGVtZW50LlZhbHVlVHlwZXMgPSBWYWx1ZVR5cGVzO1xuICAgIGFwcEVsZW1lbnRzLnB1c2goeyBlbGVtZW50LCBzdXBwb3J0IH0pO1xuICAgIHJldHVybiBwdXREb3duVGFnRG9tKHBsYWNlaG9sZGVyLCByZXN1bHQpO1xufVxuZnVuY3Rpb24gcHV0RG93blRhZ0RvbShwbGFjZWhvbGRlciwgcmVzdWx0KSB7XG4gICAgY29uc3QgbmV3RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgbmV3RnJhZ21lbnQuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuICAgIGZvciAoY29uc3QgZG9tSXRlbSBvZiByZXN1bHQuZG9tKSB7XG4gICAgICAgIHB1dE9uZURvbURvd24oZG9tSXRlbSwgbmV3RnJhZ21lbnQpO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmRlYnVnKCfwn4+377iPIEVsZW1lbnQgVGFnIERPTSBidWlsdCDinIUnKVxuICAgIHJldHVybiBuZXdGcmFnbWVudDtcbn1cbmZ1bmN0aW9uIHB1dE9uZURvbURvd24oZG9tLCBuZXdGcmFnbWVudCkge1xuICAgIGlmIChkb20uZG9tRWxlbWVudCkge1xuICAgICAgICBuZXdGcmFnbWVudC5hcHBlbmRDaGlsZChkb20uZG9tRWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChkb20ubWFya2VyKSB7XG4gICAgICAgIG5ld0ZyYWdtZW50LmFwcGVuZENoaWxkKGRvbS5tYXJrZXIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGdldEJhc2VTdXBwb3J0LCB1cGdyYWRlQmFzZVRvU3VwcG9ydCB9IGZyb20gJy4vY3JlYXRlSHRtbFN1cHBvcnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWROZXdCYXNlU3VwcG9ydCh0ZW1wbGF0ZXIsIHN1YmplY3QsIGFwcEVsZW1lbnQpIHtcbiAgICBjb25zdCBuZXdTdXBwb3J0ID0gZ2V0QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBzdWJqZWN0KTtcbiAgICB1cGdyYWRlQmFzZVRvU3VwcG9ydCh0ZW1wbGF0ZXIsIG5ld1N1cHBvcnQsIG5ld1N1cHBvcnQpO1xuICAgIG5ld1N1cHBvcnQuYXBwRWxlbWVudCA9IGFwcEVsZW1lbnQ7XG4gICAgLy8gSW5pdGlhbGl6ZSBvbGRlci9uZXdlciB3aXRoIGVtcHR5IHN0YXRlIGlmIGZpcnN0IHJlbmRlclxuICAgIGlmICghc3ViamVjdC5zdGF0ZS5vbGRlc3QpIHtcbiAgICAgICAgc3ViamVjdC5zdGF0ZS5vbGRlc3QgPSBuZXdTdXBwb3J0O1xuICAgICAgICBzdWJqZWN0LnN0YXRlLm9sZGVyID0gc3ViamVjdC5zdGF0ZS5uZXdlcjtcbiAgICB9XG4gICAgc3ViamVjdC5zdGF0ZS5uZXdlc3QgPSBuZXdTdXBwb3J0O1xuICAgIHJldHVybiBuZXdTdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgdGFncyB9IGZyb20gJy4uL3RhZy90YWcudXRpbHMuanMnO1xuaW1wb3J0IHsgZW1wdHksIFZhbHVlVHlwZXMgfSBmcm9tICcuLi90YWcvVmFsdWVUeXBlcy5lbnVtLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lTdXBwb3J0IH0gZnJvbSAnLi9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwYWludCwgcGFpbnRpbmcgfSBmcm9tICcuL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZVN1cHBvcnQgfSBmcm9tICcuLi90YWcvY3JlYXRlU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBydW5BZnRlclN1cHBvcnRSZW5kZXIgfSBmcm9tICcuL3J1bkFmdGVyUmVuZGVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGV4ZWN1dGVXcmFwIH0gZnJvbSAnLi9leGVjdXRlV3JhcC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZWdpc3RlclRhZ0VsZW1lbnQgfSBmcm9tICcuL3JlZ2lzdGVyTmV3VGFnRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBsb2FkTmV3QmFzZVN1cHBvcnQgfSBmcm9tICcuLi90YWcvbG9hZE5ld0Jhc2VTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHJlU3RhdGVTdXBwb3J0IH0gZnJvbSAnLi4vc3RhdGUvc3RhdGUudXRpbHMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRhZ0VsZW1lbnQoYXBwLCBnbG9iYWwsIHRlbXBsYXRlciwgdGVtcGxhdGVyMiwgZWxlbWVudCwgY29udGV4dCwgaXNBcHBGdW5jdGlvbikge1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZW1wdHkpO1xuICAgIHRhZ3MucHVzaCgodGVtcGxhdGVyLndyYXBwZXIgfHwgeyBvcmlnaW5hbDogdGVtcGxhdGVyIH0pKTtcbiAgICBjb250ZXh0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHJ1bldyYXBwZXIodGVtcGxhdGVyLCBwbGFjZWhvbGRlciwgZWxlbWVudCwgY29udGV4dCwgaXNBcHBGdW5jdGlvbik7XG4gICAgZ2xvYmFsLmlzQXBwID0gdHJ1ZTtcbiAgICBpZiAoaXNBcHBGdW5jdGlvbikge1xuICAgICAgICB0ZW1wbGF0ZXIyLnRhZyA9IHN1cHBvcnQudGVtcGxhdGVyLnRhZztcbiAgICB9XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHRhZ0VsZW1lbnQsIGVsZW1lbnQgcmVjZWl2ZWQgaXMgdHlwZSAke3R5cGVvZiBlbGVtZW50fSBhbmQgbm90IHR5cGUgRWxlbWVudGApO1xuICAgIH1cbiAgICAvLyBlbmFibGVzIGhtciBkZXN0cm95IHNvIGl0IGNhbiBjb250cm9sIGVudGlyZSBhcHBcbiAgICA7XG4gICAgZWxlbWVudC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBldmVudHMgPSBjb250ZXh0LmV2ZW50cztcbiAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZXZlbnRzID0ge307XG4gICAgICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgICAgIGNvbnN0IHRvQXdhaXQgPSBkZXN0cm95U3VwcG9ydChzdXBwb3J0LCBnbG9iYWwpOyAvLyBuZXZlciByZXR1cm4gYW55dGhpbmcgaGVyZVxuICAgICAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgICAgICBwYWludCgpO1xuICAgICAgICByZXR1cm4gdG9Bd2FpdDtcbiAgICB9O1xuICAgICsrcGFpbnRpbmcubG9ja3M7XG4gICAgY29uc3QgbmV3RnJhZ21lbnQgPSByZWdpc3RlclRhZ0VsZW1lbnQoc3VwcG9ydCwgZWxlbWVudCwgZ2xvYmFsLCB0ZW1wbGF0ZXIsIGFwcCwgcGxhY2Vob2xkZXIpO1xuICAgIC0tcGFpbnRpbmcubG9ja3M7XG4gICAgcGFpbnQoKTtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKG5ld0ZyYWdtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdXBwb3J0LFxuICAgICAgICB0YWdzLFxuICAgICAgICBWYWx1ZVR5cGVzLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcnVuV3JhcHBlcih0ZW1wbGF0ZXIsIHBsYWNlaG9sZGVyLCBhcHBFbGVtZW50LCBzdWJqZWN0LCBpc0FwcEZ1bmN0aW9uKSB7XG4gICAgc3ViamVjdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgIGNvbnN0IG9sZGVzdCA9IHN1YmplY3Quc3RhdGUub2xkZXN0O1xuICAgIGNvbnN0IG5ld2VzdCA9IHN1YmplY3Quc3RhdGUubmV3ZXN0O1xuICAgIGNvbnN0IGlzRmlyc3RSZW5kZXIgPSBuZXdlc3QgPT09IG9sZGVzdDtcbiAgICBjb25zdCBuZXdTdXBwb3J0ID0gY3JlYXRlU3VwcG9ydCh0ZW1wbGF0ZXIsIG5ld2VzdCwgbmV3ZXN0LmFwcFN1cHBvcnQsIC8vIG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0IGFzIEFueVN1cHBvcnQsXG4gICAgc3ViamVjdCk7XG4gICAgaWYgKCFpc0ZpcnN0UmVuZGVyKSB7XG4gICAgICAgIGNvbnN0IG9sZGVyU3RhdGVDb250ZXh0ID0gc3ViamVjdC5zdGF0ZS5vbGRlcjtcbiAgICAgICAgcmVTdGF0ZVN1cHBvcnQobmV3U3VwcG9ydCwgbmV3ZXN0LCBvbGRlclN0YXRlQ29udGV4dC5zdGF0ZSk7XG4gICAgfVxuICAgIGlmICh0ZW1wbGF0ZXIudGFnSnNUeXBlID09PSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlU3RhdGVXcmFwKHRlbXBsYXRlciwgaXNBcHBGdW5jdGlvbiwgbmV3U3VwcG9ydCwgc3ViamVjdCwgYXBwRWxlbWVudCk7XG4gICAgfVxuICAgIC8vIENhbGwgdGhlIGFwcHMgZnVuY3Rpb24gZm9yIG91ciB0YWcgdGVtcGxhdGVyXG4gICAgY29uc3Qgd3JhcHBlciA9IHRlbXBsYXRlci53cmFwcGVyO1xuICAgIGNvbnN0IG5vd1N1cHBvcnQgPSB3cmFwcGVyKG5ld1N1cHBvcnQsIHN1YmplY3QpO1xuICAgIHJ1bkFmdGVyU3VwcG9ydFJlbmRlcihuZXdTdXBwb3J0KTtcbiAgICByZXR1cm4gbm93U3VwcG9ydDtcbn1cbmZ1bmN0aW9uIGV4ZWN1dGVTdGF0ZVdyYXAodGVtcGxhdGVyLCBpc0FwcEZ1bmN0aW9uLCBuZXdTdXBwb3J0LCBzdWJqZWN0LCBhcHBFbGVtZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gKHRlbXBsYXRlci53cmFwcGVyIHx8IHsgb3JpZ2luYWw6IHRlbXBsYXRlciB9KTtcbiAgICBpZiAoIWlzQXBwRnVuY3Rpb24pIHtcbiAgICAgICAgY29uc3QgbmV3U3VwcG9ydCA9IGxvYWROZXdCYXNlU3VwcG9ydCh0ZW1wbGF0ZXIsIHN1YmplY3QsIGFwcEVsZW1lbnQpO1xuICAgICAgICBydW5BZnRlclN1cHBvcnRSZW5kZXIobmV3U3VwcG9ydCk7XG4gICAgICAgIHJldHVybiBuZXdTdXBwb3J0O1xuICAgIH1cbiAgICBleGVjdXRlV3JhcCh0ZW1wbGF0ZXIsIHJlc3VsdCwgbmV3U3VwcG9ydCk7XG4gICAgcnVuQWZ0ZXJTdXBwb3J0UmVuZGVyKG5ld1N1cHBvcnQpO1xuICAgIHJldHVybiBuZXdTdXBwb3J0O1xufVxuIiwiaW1wb3J0IHsgZ2V0TmV3R2xvYmFsIH0gZnJvbSAnLi91cGRhdGUvZ2V0TmV3R2xvYmFsLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IEJhc2ljVHlwZXMsIFZhbHVlVHlwZXMgfSBmcm9tICcuL1ZhbHVlVHlwZXMuZW51bS5qcyc7XG5pbXBvcnQgeyBkZXN0cm95U3VwcG9ydCB9IGZyb20gJy4uL3JlbmRlci9kZXN0cm95U3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBQcm9wV2F0Y2hlcyB9IGZyb20gJy4vaW5kZXguanMnO1xuaW1wb3J0IHsgaW5pdFN0YXRlIH0gZnJvbSAnLi4vc3RhdGUvc3RhdGUudXRpbHMuanMnO1xuaW1wb3J0IHsgaXNUYWdDb21wb25lbnQgfSBmcm9tICcuLi9pc0luc3RhbmNlLmpzJztcbmltcG9ydCB7IGNoZWNrVGFnVmFsdWVDaGFuZ2VBbmRVcGRhdGUgfSBmcm9tICcuL2NoZWNrVGFnVmFsdWVDaGFuZ2UuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIH0gZnJvbSAnLi9kZXN0cm95U3VwcG9ydEJ5Q29udGV4dEl0ZW0uZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyVGFnRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9yZW5kZXJUYWdFbGVtZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGxvYWROZXdCYXNlU3VwcG9ydCB9IGZyb20gJy4vbG9hZE5ld0Jhc2VTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRhZ1ZhbHVlVXBkYXRlSGFuZGxlciB9IGZyb20gJy4vdXBkYXRlL3RhZ1ZhbHVlVXBkYXRlSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBzZXRTdXBwb3J0SW5DeWNsZSB9IGZyb20gJy4vY3ljbGVzL2dldFN1cHBvcnRJbkN5Y2xlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9zdWJqZWN0L1N1YmplY3QuY2xhc3MuanMnO1xuaWYgKHR5cGVvZiAoZG9jdW1lbnQpID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChkb2N1bWVudC50YWdnZWRKcykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ/Cfj7fvuI/wn4+377iPIE11bHRpcGxlIHZlcnNpb25zIG9mIHRhZ2dlZGpzIGFyZSBsb2FkZWQuIE1heSBjYXVzZSBpc3N1ZXMuJyk7XG4gICAgfVxuICAgIGRvY3VtZW50LnRhZ2dlZEpzID0gdHJ1ZTtcbn1cbmV4cG9ydCBjb25zdCBhcHBFbGVtZW50cyA9IFtdO1xuLyoqXG4gKlxuICogQHBhcmFtIGFwcCB0YWdnZWRqcyB0YWdcbiAqIEBwYXJhbSBlbGVtZW50IEhUTUxFbGVtZW50XG4gKiBAcGFyYW0gcHJvcHMgb2JqZWN0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnRWxlbWVudChhcHAsIGVsZW1lbnQsIHByb3BzKSB7XG4gICAgY29uc3QgYXBwRWxtSW5kZXggPSBhcHBFbGVtZW50cy5maW5kSW5kZXgoYXBwRWxtID0+IGFwcEVsbS5lbGVtZW50ID09PSBlbGVtZW50KTtcbiAgICBpZiAoYXBwRWxtSW5kZXggPj0gMCkge1xuICAgICAgICBjb25zdCBzdXBwb3J0ID0gYXBwRWxlbWVudHNbYXBwRWxtSW5kZXhdLnN1cHBvcnQ7XG4gICAgICAgIGRlc3Ryb3lTdXBwb3J0KHN1cHBvcnQsIHN1cHBvcnQuY29udGV4dC5nbG9iYWwpO1xuICAgICAgICBhcHBFbGVtZW50cy5zcGxpY2UoYXBwRWxtSW5kZXgsIDEpO1xuICAgICAgICAvLyBhbiBlbGVtZW50IGFscmVhZHkgaGFkIGFuIGFwcCBvbiBpdFxuICAgICAgICBjb25zb2xlLndhcm4oJ0ZvdW5kIGFuZCBkZXN0cm95ZWQgYXBwIGVsZW1lbnQgYWxyZWFkeSByZW5kZXJlZCB0byBlbGVtZW50JywgeyBlbGVtZW50IH0pO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgdGhlIGFwcCB3aGljaCByZXR1cm5zIFtwcm9wcywgcnVuT25lVGltZUZ1bmN0aW9uXVxuICAgIGxldCB0ZW1wbGF0ZXIgPSAoKCkgPT4gdGVtcGxhdGVyMihwcm9wcykpO1xuICAgIHRlbXBsYXRlci5wcm9wV2F0Y2ggPSBQcm9wV2F0Y2hlcy5OT05FO1xuICAgIHRlbXBsYXRlci50YWdKc1R5cGUgPSBWYWx1ZVR5cGVzLnN0YXRlUmVuZGVyO1xuICAgIHRlbXBsYXRlci5wcm9jZXNzVXBkYXRlID0gdGFnVmFsdWVVcGRhdGVIYW5kbGVyO1xuICAgIC8vIHRvZG86IHByb3BzIHNob3VsZCBiZSBhbiBhcnJheVxuICAgIHRlbXBsYXRlci5wcm9wcyA9IFtwcm9wc107XG4gICAgdGVtcGxhdGVyLmlzQXBwID0gdHJ1ZTtcbiAgICAvLyBjcmVhdGUgb2JzZXJ2YWJsZSB0aGUgYXBwIGxpdmVzIG9uXG4gICAgY29uc3Qgc3ViamVjdCA9IGdldE5ld1N1YmplY3QodGVtcGxhdGVyLCBlbGVtZW50KTtcbiAgICBjb25zdCBnbG9iYWwgPSBzdWJqZWN0Lmdsb2JhbDtcbiAgICBjb25zdCBuZXdlc3QgPSBzdWJqZWN0LnN0YXRlLm5ld2VzdDtcbiAgICBpbml0U3RhdGUobmV3ZXN0LmNvbnRleHQpO1xuICAgIHNldFN1cHBvcnRJbkN5Y2xlKG5ld2VzdCk7XG4gICAgbGV0IHRlbXBsYXRlcjIgPSBhcHAocHJvcHMpO1xuICAgIGNvbnN0IGlzQXBwRnVuY3Rpb24gPSB0eXBlb2YgdGVtcGxhdGVyMiA9PSBCYXNpY1R5cGVzLmZ1bmN0aW9uO1xuICAgIGlmICghaXNBcHBGdW5jdGlvbikge1xuICAgICAgICBpZiAoIWlzVGFnQ29tcG9uZW50KHRlbXBsYXRlcjIpKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZXIudGFnID0gdGVtcGxhdGVyMjtcbiAgICAgICAgICAgIHRlbXBsYXRlcjIgPSBhcHA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJqZWN0LnN0YXRlLm5ld2VzdC5wcm9wc0NvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBsYXRlc3Q6IFtwcm9wc10sXG4gICAgICAgICAgICAgICAgY2FzdFByb3BzOiBbcHJvcHNdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRlbXBsYXRlci5wcm9wV2F0Y2ggPSB0ZW1wbGF0ZXIyLnByb3BXYXRjaDtcbiAgICAgICAgICAgIHRlbXBsYXRlci50YWdKc1R5cGUgPSB0ZW1wbGF0ZXIyLnRhZ0pzVHlwZTtcbiAgICAgICAgICAgIHRlbXBsYXRlci53cmFwcGVyID0gdGVtcGxhdGVyMi53cmFwcGVyO1xuICAgICAgICAgICAgdGVtcGxhdGVyID0gdGVtcGxhdGVyMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyVGFnRWxlbWVudChhcHAsIGdsb2JhbCwgdGVtcGxhdGVyLCB0ZW1wbGF0ZXIyLCBlbGVtZW50LCBzdWJqZWN0LCBpc0FwcEZ1bmN0aW9uKTtcbn1cbmZ1bmN0aW9uIGdldE5ld1N1YmplY3QodGVtcGxhdGVyLCBhcHBFbGVtZW50KSB7XG4gICAgY29uc3QgdGFnSnNWYXIgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ3RlbXBsYXRlcicsXG4gICAgICAgIGhhc1ZhbHVlQ2hhbmdlZDogY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSxcbiAgICAgICAgZGVzdHJveTogZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdDogZnVuY3Rpb24gYXBwRG9Ob3RoaW5nKCkge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnZG8gbm90aGluZyBhcHAgZnVuY3Rpb24nKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZTogdGFnVmFsdWVVcGRhdGVIYW5kbGVyLFxuICAgIH07XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgICAgIHZhbHVlOiB0ZW1wbGF0ZXIsXG4gICAgICAgIHZhbHVlSW5kZXg6IDAsXG4gICAgICAgIGRlc3Ryb3kkOiBuZXcgU3ViamVjdCgpLFxuICAgICAgICB3aXRoaW5Pd25lckVsZW1lbnQ6IGZhbHNlLCAvLyBpIGFtIHRoZSBoaWdoZXN0IG93bmVyXG4gICAgICAgIHJlbmRlckNvdW50OiAwLFxuICAgICAgICBnbG9iYWw6IHVuZGVmaW5lZCwgLy8gZ2V0cyBzZXQgYmVsb3cgaW4gZ2V0TmV3R2xvYmFsKClcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICAvLyBwYXJlbnRDb250ZXh0OiB1bmRlZmluZWQgYXMgYW55LFxuICAgICAgICB0YWdKc1ZhcixcbiAgICB9O1xuICAgIC8vIHNldHMgbmV3IGdsb2JhbCBvbiBjb250ZXh0XG4gICAgZ2V0TmV3R2xvYmFsKGNvbnRleHQpO1xuICAgIC8vIFRPRE86IGV2ZW50cyBhcmUgb25seSBuZWVkZWQgb24gdGhlIGJhc2UgYW5kIG5vdCBldmVyeSBzdXBwb3J0XG4gICAgLy8gZm9yIGNsaWNrIGV2ZW50cyBhbmQgc3VjaCByZWFkIGF0IGEgaGlnaGVyIGxldmVsXG4gICAgY29udGV4dC5ldmVudHMgPSB7fTtcbiAgICBsb2FkTmV3QmFzZVN1cHBvcnQodGVtcGxhdGVyLCBjb250ZXh0LCBhcHBFbGVtZW50KTtcbiAgICByZXR1cm4gY29udGV4dDtcbn1cbiIsImltcG9ydCB7IGlzRnVuY3Rpb24sIGlzT2JqZWN0IH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgc2V0Qm9vbGVhbkF0dHJpYnV0ZSwgc2V0Tm9uRnVuY3Rpb25JbnB1dFZhbHVlLCBzZXRTaW1wbGVBdHRyaWJ1dGUgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2hvd1RvU2V0SW5wdXRWYWx1ZS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRQdXNoS2lkIH0gZnJvbSAnLi9kZXNpZ25FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmZ1bmN0aW9uIGNhbGxiYWNrV3JhcHBlcihpdGVtLCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY2xvbmUgPSBnZXRQdXNoS2lkKGl0ZW0sIGl0ZW0uZWxlbWVudEZ1bmN0aW9ucyk7XG4gICAgcmV0dXJuIGNhbGxiYWNrV3JhcHBlcjIoY2xvbmUsIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gY2FsbGJhY2tXcmFwcGVyMihpdGVtLCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgZnVuY3Rpb24gd3JhcENhbGxiYWNrKGUpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBDYWxsYmFjay50b0NhbGxiYWNrKGUpO1xuICAgIH1cbiAgICB3cmFwQ2FsbGJhY2sudG9DYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIGl0ZW0ubGlzdGVuZXJzLnB1c2goW2V2ZW50TmFtZSwgd3JhcENhbGxiYWNrXSk7XG4gICAgaXRlbS5hbGxMaXN0ZW5lcnMucHVzaChbZXZlbnROYW1lLCB3cmFwQ2FsbGJhY2tdKTtcbiAgICByZXR1cm4gaXRlbTtcbn1cbmZ1bmN0aW9uIGF0dHIoaXRlbSwgYXJncykge1xuICAgIGNvbnN0IGNsb25lID0gZ2V0UHVzaEtpZChpdGVtLCBpdGVtLmVsZW1lbnRGdW5jdGlvbnMpO1xuICAgIGNsb25lLmF0dHJpYnV0ZXMucHVzaChhcmdzKTtcbiAgICBpZiAoaXNWYWx1ZUZvckNvbnRleHQoYXJnc1swXSkpIHtcbiAgICAgICAgcmVnaXN0ZXJNb2NrQXR0ckNvbnRleHQoYXJnc1swXSwgY2xvbmUpOyAvLyB0aGUgYXR0ck5hbWUgaXMgYSBmdW5jdGlvbiBvciBUYWdKc1ZhclxuICAgIH1cbiAgICBlbHNlIGlmIChpc1ZhbHVlRm9yQ29udGV4dChhcmdzWzFdKSkge1xuICAgICAgICByZWdpc3Rlck1vY2tBdHRyQ29udGV4dChhcmdzWzFdLCBjbG9uZSk7IC8vIHRoZSBhdHRyVmFsdWUgaXMgYSBmdW5jdGlvbiBvciBUYWdKc1ZhclxuICAgIH1cbiAgICByZXR1cm4gY2xvbmU7XG59XG5mdW5jdGlvbiBhdHRyMihpdGVtLCBhcmdzKSB7XG4gICAgLy8gY29uc3QgY2xvbmUgPSBnZXRQdXNoS2lkKGl0ZW0gYXMgYW55LCBpdGVtLmVsZW1lbnRGdW5jdGlvbnMpXG4gICAgLy8gY2xvbmUuYXR0cmlidXRlcy5wdXNoKGFyZ3MgYXMgQXR0cmlidXRlKVxuICAgIGl0ZW0uYXR0cmlidXRlcy5wdXNoKGFyZ3MpO1xuICAgIGlmIChpc1ZhbHVlRm9yQ29udGV4dChhcmdzWzBdKSkge1xuICAgICAgICByZWdpc3Rlck1vY2tBdHRyQ29udGV4dChhcmdzWzBdLCBpdGVtKTsgLy8gdGhlIGF0dHJOYW1lIGlzIGEgZnVuY3Rpb24gb3IgVGFnSnNWYXJcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNWYWx1ZUZvckNvbnRleHQoYXJnc1sxXSkpIHtcbiAgICAgICAgcmVnaXN0ZXJNb2NrQXR0ckNvbnRleHQoYXJnc1sxXSwgaXRlbSk7IC8vIHRoZSBhdHRyVmFsdWUgaXMgYSBmdW5jdGlvbiBvciBUYWdKc1ZhclxuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50RnVuY3Rpb25zKGl0ZW0pIHtcbiAgICAvKiogVXNlZCBmb3IgYWxsIGVsZW1lbnQgY2FsbGJhY2tzICovXG4gICAgZnVuY3Rpb24gbWFrZUNhbGxiYWNrKGV2ZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tXcmFwcGVyKGl0ZW0sIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlQXR0cmlidXRlSGFuZGxlcihhdHRyTmFtZSwgaG93VG9TZXQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBnZXRQdXNoS2lkKGl0ZW0sIGl0ZW0uZWxlbWVudEZ1bmN0aW9ucyk7XG4gICAgICAgICAgICBjbG9uZS5hdHRyaWJ1dGVzLnB1c2goW2F0dHJOYW1lLCB2YWx1ZSwgZmFsc2UsIGhvd1RvU2V0XSk7XG4gICAgICAgICAgICBpZiAoaXNWYWx1ZUZvckNvbnRleHQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJNb2NrQXR0ckNvbnRleHQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY2FsbGFibGVzID0ge1xuICAgICAgICBvbkNsaWNrOiBtYWtlQ2FsbGJhY2soJ2NsaWNrJyksXG4gICAgICAgIC8vIG9uY2xpY2s6IG1ha2VDYWxsYmFjaygnY2xpY2snKSxcbiAgICAgICAgLy8gY2xpY2s6IG1ha2VDYWxsYmFjaygnY2xpY2snKSxcbiAgICAgICAgb25DaGFuZ2U6IG1ha2VDYWxsYmFjaygnb25jaGFuZ2UnKSxcbiAgICAgICAgLy8gb25jaGFuZ2U6IG1ha2VDYWxsYmFjaygnb25jaGFuZ2UnKSxcbiAgICAgICAgLy8gY2hhbmdlOiBtYWtlQ2FsbGJhY2soJ29uY2hhbmdlJyksXG4gICAgICAgIG9uS2V5dXA6IG1ha2VDYWxsYmFjaygnb25rZXl1cCcpLFxuICAgICAgICAvLyBvbmtleXVwOiBtYWtlQ2FsbGJhY2soJ29ua2V5dXAnKSxcbiAgICAgICAgLy8ga2V5dXA6IG1ha2VDYWxsYmFjaygnb25rZXl1cCcpLFxuICAgICAgICAvKiBhcHBseSBhdHRyaWJ1dGUgdmlhIGF0dHIobmFtZTogc3RyaW5nLCB2YWx1ZT86IGFueSk6ICoqL1xuICAgICAgICBhdHRyOiAoLi4uYXJncykgPT4gYXR0cihpdGVtLCBhcmdzKSxcbiAgICAgICAgLyoqIFVzZWQgZm9yIHNldHRpbmcgYXJyYXkgaW5kZXgta2V5IHZhbHVlICovXG4gICAgICAgIGtleTogZnVuY3Rpb24gKGFycmF5VmFsdWUpIHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHRoaXMuYXJyYXlWYWx1ZSA9IGFycmF5VmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBjYWxsYWJsZXM7XG59XG5mdW5jdGlvbiBzZXRDbGFzc1ZhbHVlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuOyAvLyBob3dUb1NldElucHV0T2JqZWN0VmFsdWUoZWxlbWVudCwgbmFtZSwgdmFsdWUgYXMgUmVjb3JkPHN0cmluZywgYW55PilcbiAgICB9XG4gICAgc2V0U2ltcGxlQXR0cmlidXRlKGVsZW1lbnQsIG5hbWUsIHZhbHVlKTtcbn1cbi8qKiB1c2VkIGR1cmluZyB1cGRhdGVzICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJNb2NrQXR0ckNvbnRleHQodmFsdWUsIG1vY2tFbG0pIHtcbiAgICBpZiAoIW1vY2tFbG0uY29udGV4dHMpIHtcbiAgICAgICAgbW9ja0VsbS5jb250ZXh0cyA9IFtdO1xuICAgIH1cbiAgICBtb2NrRWxtLmNvbnRleHRzLnB1c2godmFsdWUpO1xufVxuLyoqIHVzZWQgZHVyaW5nIHVwZGF0ZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck1vY2tDaGlsZENvbnRleHQodmFsdWUsIG1vY2tFbG0pIHtcbiAgICBpZiAoIW1vY2tFbG0uY29udGV4dHMpIHtcbiAgICAgICAgbW9ja0VsbS5jb250ZXh0cyA9IFtdO1xuICAgIH1cbiAgICBtb2NrRWxtLmNvbnRleHRzLnB1c2godmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsdWVGb3JDb250ZXh0KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzRnVuY3Rpb24odmFsdWUpIHx8IHZhbHVlPy50YWdKc1R5cGU7XG59XG5mdW5jdGlvbiBzZXR1cEF0dHIoYXR0ck5hbWUsIGhvd1RvU2V0KSB7XG4gICAgcmV0dXJuIChpdGVtLCB2YWx1ZSkgPT4gYXR0cjIoaXRlbSwgW2F0dHJOYW1lLCB2YWx1ZSwgZmFsc2UsIGhvd1RvU2V0XSk7XG59XG5mdW5jdGlvbiBtYWtlQ2FsbGJhY2soZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIChpdGVtLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tXcmFwcGVyMihpdGVtLCBldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxuY29uc3QgY2FsbGFibGVzID0ge1xuICAgIGNoZWNrZWQ6IHNldHVwQXR0cignY2hlY2tlZCcsIHNldEJvb2xlYW5BdHRyaWJ1dGUpLFxuICAgIHNlbGVjdGVkOiBzZXR1cEF0dHIoJ3NlbGVjdGVkJywgc2V0Qm9vbGVhbkF0dHJpYnV0ZSksXG4gICAgLyoqIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIHgpICAqL1xuICAgIGNsYXNzOiBzZXR1cEF0dHIoJ2NsYXNzJywgc2V0Q2xhc3NWYWx1ZSksXG4gICAgb25DbGljazogbWFrZUNhbGxiYWNrKCdjbGljaycpLFxuICAgIG9uQ2hhbmdlOiBtYWtlQ2FsbGJhY2soJ29uY2hhbmdlJyksXG4gICAgb25LZXl1cDogbWFrZUNhbGxiYWNrKCdvbmtleXVwJyksXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGxvb3BPYmplY3RBdHRyaWJ1dGVzKGl0ZW0sIG9iamVjdCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5lbnRyaWVzKG9iamVjdCkucmVkdWNlKChhbGwsIFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKG5hbWUgaW4gY2FsbGFibGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGFibGVzW25hbWVdKGl0ZW0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gaXRlbVtuYW1lXSh2YWx1ZSlcbiAgICAgICAgLy8gcmV0dXJuIGF0dHIyKGFsbCwgW25hbWUsIHZhbHVlXSBhcyBhbnkpXG4gICAgICAgIHJldHVybiBhdHRyMihpdGVtLCBbbmFtZSwgdmFsdWUsIGZhbHNlLCBzZXROb25GdW5jdGlvbklucHV0VmFsdWVdKTtcbiAgICB9LCBpdGVtKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgY2FzdFRleHRWYWx1ZSB9IGZyb20gJy4uL2Nhc3RUZXh0VmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL2luZGV4LmpzJztcbmltcG9ydCB7IHBhaW50Q29tbWFuZHMgfSBmcm9tICcuLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgdmFsdWVUb1RhZ0pzVmFyIH0gZnJvbSAnLi4vdGFnSnNWYXJzL2luZGV4LmpzJztcbmltcG9ydCB7IHByb2Nlc3NFbGVtZW50VmFyIH0gZnJvbSAnLi9wcm9jZXNzRWxlbWVudFZhci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRWxlbWVudFZhckZ1bmN0aW9uIH0gZnJvbSAnLi9wcm9jZXNzRWxlbWVudFZhckZ1bmN0aW9uLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQ2hpbGRyZW4oaW5uZXJIVE1MLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMsIGVsZW1lbnQsIC8vIGFwcGVuZFRvXG5wYWludEJ5KSB7XG4gICAgaW5uZXJIVE1MLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaXRlbTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVTaW1wbGVJbm5lclZhbHVlKGl0ZW0sIGVsZW1lbnQsIHBhaW50QnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtID09PSBudWxsIHx8IGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVNpbXBsZUlubmVyVmFsdWUoaXRlbSwgZWxlbWVudCwgcGFpbnRCeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udGFnSnNUeXBlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBwcm9jZXNzRWxlbWVudFZhcihpdGVtLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMpO1xuICAgICAgICAgICAgcGFpbnRDb21tYW5kcy5wdXNoKFtwYWludEJ5LCBbZWxlbWVudCwgbmV3RWxlbWVudF1dKTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWxEb21NZXRhID0gY29udGV4dC5odG1sRG9tTWV0YTtcbiAgICAgICAgICAgIGh0bWxEb21NZXRhLnB1c2goe1xuICAgICAgICAgICAgICAgIG5uOiBuZXdFbGVtZW50LnRhZ05hbWUsXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudDogbmV3RWxlbWVudCxcbiAgICAgICAgICAgICAgICAvLyBhdDogbmV3RWxlbWVudC5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGF0OiBbXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0VsZW1lbnRWYXJGdW5jdGlvbihpdGVtLCBlbGVtZW50LCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMsIHBhaW50QnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9jZXNzTm9uRWxlbWVudChpdGVtLCBjb250ZXh0LCBhZGRlZENvbnRleHRzLCBlbGVtZW50LCBvd25lclN1cHBvcnQsIHBhaW50QnkpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NOb25FbGVtZW50KGl0ZW0sIGNvbnRleHQsIGFkZGVkQ29udGV4dHMsIGVsZW1lbnQsIG93bmVyU3VwcG9ydCwgcGFpbnRCeSkge1xuICAgIGNvbnN0IHRhZ0pzVmFyID0gdmFsdWVUb1RhZ0pzVmFyKGl0ZW0pO1xuICAgIGNvbnN0IG5ld0NvbnRleHQgPSB7XG4gICAgICAgIHVwZGF0ZUNvdW50OiAwLFxuICAgICAgICB2YWx1ZTogaXRlbSxcbiAgICAgICAgcGFyZW50Q29udGV4dDogY29udGV4dCxcbiAgICAgICAgdGFnSnNWYXIsXG4gICAgICAgIC8vIFRPRE86IE5vdCBuZWVkZWRcbiAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgfTtcbiAgICBhZGRlZENvbnRleHRzLnB1c2gobmV3Q29udGV4dCk7XG4gICAgbmV3Q29udGV4dC5wbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBwYWludENvbW1hbmRzLnB1c2goW3BhaW50QnksIFtlbGVtZW50LCBuZXdDb250ZXh0LnBsYWNlaG9sZGVyXV0pO1xuICAgIHRhZ0pzVmFyLnByb2Nlc3NJbml0KGl0ZW0sIG5ld0NvbnRleHQsIC8vIGNvbnRleHQsIC8vIG5ld0NvbnRleHQsXG4gICAgb3duZXJTdXBwb3J0LCBuZXdDb250ZXh0LnBsYWNlaG9sZGVyKTtcbiAgICByZXR1cm4gbmV3Q29udGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVTaW1wbGVJbm5lclZhbHVlKHZhbHVlLCBlbGVtZW50LCBwYWludEJ5KSB7XG4gICAgY29uc3QgY2FzdGVkVmFsdWUgPSBjYXN0VGV4dFZhbHVlKHZhbHVlKTtcbiAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY2FzdGVkVmFsdWUpO1xuICAgIHBhaW50Q29tbWFuZHMucHVzaChbcGFpbnRCeSwgW2VsZW1lbnQsIHRleHRdXSk7XG4gICAgcmV0dXJuIHRleHQ7XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgYmxhbmtIYW5kbGVyIH0gZnJvbSAnLi4vcmVuZGVyL2RvbS9ibGFua0hhbmRsZXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcHJvY2Vzc05vbkVsZW1lbnQgfSBmcm9tICcuL3Byb2Nlc3NDaGlsZHJlbi5mdW5jdGlvbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnRWYXJGdW5jdGlvbihpdGVtLCBlbGVtZW50LCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMsIHBhaW50QnkpIHtcbiAgICBjb25zdCBzdWJDb250ZXh0cyA9IFtdO1xuICAgIGNvbnN0IHN1YkNvbnRleHQgPSB7XG4gICAgICAgIHVwZGF0ZUNvdW50OiAwLFxuICAgICAgICBwYXJlbnRDb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBjb250ZXh0czogc3ViQ29udGV4dHMsXG4gICAgICAgIHZhbHVlOiBpdGVtLFxuICAgICAgICBodG1sRG9tTWV0YTogW10sXG4gICAgICAgIHRhZ0pzVmFyOiB7XG4gICAgICAgICAgICB0YWdKc1R5cGU6ICdkeW5hbWljLXRleHQnLFxuICAgICAgICAgICAgaGFzVmFsdWVDaGFuZ2VkOiAoKSA9PiAwLFxuICAgICAgICAgICAgcHJvY2Vzc0luaXQ6IGJsYW5rSGFuZGxlcixcbiAgICAgICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsXG4gICAgICAgICAgICBkZXN0cm95OiAoX2MsIG93bmVyU3VwcG9ydCkgPT4ge1xuICAgICAgICAgICAgICAgICsrc3ViQ29udGV4dC51cGRhdGVDb3VudDtcbiAgICAgICAgICAgICAgICBzdWJDb250ZXh0cy5mb3JFYWNoKHN1YlN1YiA9PiBzdWJTdWIudGFnSnNWYXIuZGVzdHJveShzdWJTdWIsIG93bmVyU3VwcG9ydCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2Nlc3NVcGRhdGU6ICh2YWx1ZSwgY29udGV4dEl0ZW0sIG93bmVyU3VwcG9ydCwgdmFsdWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgKytzdWJDb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUoYVN1YkNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGFTdWJDb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUobmV3VmFsdWUsIGFTdWJDb250ZXh0LCBvd25lclN1cHBvcnQsIHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgYVN1YkNvbnRleHQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBjb250ZXh0SXRlbS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFRPRE86IE5vdCBuZWVkZWRcbiAgICAgICAgdmFsdWVJbmRleDogLTEsXG4gICAgICAgIHdpdGhpbk93bmVyRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgZGVzdHJveSQ6IG5ldyBTdWJqZWN0KCksXG4gICAgfTtcbiAgICBhZGRlZENvbnRleHRzLnB1c2goc3ViQ29udGV4dCk7XG4gICAgY29uc3QgYVN1YkNvbnRleHQgPSBwcm9jZXNzTm9uRWxlbWVudChpdGVtKCksIGNvbnRleHQsIHN1YkNvbnRleHQuY29udGV4dHMsIGVsZW1lbnQsIG93bmVyU3VwcG9ydCwgcGFpbnRCeSk7XG4gICAgcmV0dXJuIGFTdWJDb250ZXh0O1xufVxuIiwiaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgYWRkU3VwcG9ydEV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2FkZFN1cHBvcnRFdmVudExpc3RlbmVyLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnRXaXRoU3RhdGUgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL2dldFN1cHBvcnRXaXRoU3RhdGUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgcmVuZGVyVGFnVXBkYXRlQXJyYXkgfSBmcm9tICcuLi9pbnRlcnBvbGF0aW9ucy9hdHRyaWJ1dGVzL3JlbmRlclRhZ0FycmF5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NBdHRyaWJ1dGVBcnJheSB9IGZyb20gJy4uL3JlbmRlci9kb20vcHJvY2Vzc0F0dHJpYnV0ZUFycmF5LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHBhaW50QXBwZW5kIH0gZnJvbSAnLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NDaGlsZHJlbiB9IGZyb20gJy4vcHJvY2Vzc0NoaWxkcmVuLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRWxlbWVudFZhcih2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0LCBhZGRlZENvbnRleHRzKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodmFsdWUudGFnTmFtZSk7XG4gICAgY29udGV4dC5lbGVtZW50ID0gZWxlbWVudDtcbiAgICBwcm9jZXNzQXR0cmlidXRlQXJyYXkodmFsdWUuYXR0cmlidXRlcywgW10sIC8vIHZhbHVlcyxcbiAgICBlbGVtZW50LCBvd25lclN1cHBvcnQsIGNvbnRleHQsIC8vIGNvbnRleHQucGFyZW50Q29udGV4dCxcbiAgICBhZGRlZENvbnRleHRzKTtcbiAgICBwcm9jZXNzQ2hpbGRyZW4odmFsdWUuaW5uZXJIVE1MLCBjb250ZXh0LCBvd25lclN1cHBvcnQsIGFkZGVkQ29udGV4dHMsIGVsZW1lbnQsIHBhaW50QXBwZW5kKTtcbiAgICB2YWx1ZS5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXAgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuU2NvcGUgPSB2YWx1ZS5saXN0ZW5lcnNbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgdG9DYWxsID0gbGlzdGVuU2NvcGVbMV07XG4gICAgICAgICAgICBjb25zdCBzdGF0ZVN1cHBvcnQgPSBnZXRTdXBwb3J0V2l0aFN0YXRlKG93bmVyU3VwcG9ydCk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVDb3VudCA9IHN0YXRlU3VwcG9ydC5jb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdG9DYWxsKC4uLmFyZ3MpO1xuICAgICAgICAgICAgaWYgKHVwZGF0ZUNvdW50ID09PSBzdGF0ZVN1cHBvcnQuY29udGV4dC51cGRhdGVDb3VudCkge1xuICAgICAgICAgICAgICAgIHJlbmRlclRhZ1VwZGF0ZUFycmF5KFtzdGF0ZVN1cHBvcnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclRhZ1VwZGF0ZUFycmF5KFtzdGF0ZVN1cHBvcnQuY29udGV4dC5zdGF0ZS5uZXdlc3RdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdwcm9taXNlLW5vLWRhdGEtZXZlcic7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ25vLWRhdGEtZXZlcic7XG4gICAgICAgIH07XG4gICAgICAgIGFkZFN1cHBvcnRFdmVudExpc3RlbmVyKG93bmVyU3VwcG9ydC5hcHBTdXBwb3J0LCBsaXN0ZW5lclswXSwgLy8gZXZlbnROYW1lXG4gICAgICAgIGVsZW1lbnQsIHdyYXApO1xuICAgIH0pO1xuICAgIHJldHVybiBlbGVtZW50O1xufVxuIiwiaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgcGFpbnQsIHBhaW50aW5nIH0gZnJvbSAnLi4vcmVuZGVyL3BhaW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lDb250ZXh0SHRtbCB9IGZyb20gJy4uL3RhZy9zbWFydFJlbW92ZUtpZHMuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lEZXNpZ25FbGVtZW50KGNvbnRleHQsIG93bmVyU3VwcG9ydCkge1xuICAgICsrY29udGV4dC51cGRhdGVDb3VudDtcbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQuY29udGV4dHM7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICBpZiAoY29udGV4dHMubGVuZ3RoKSB7XG4gICAgICAgIGRlc3Ryb3lEZXNpZ25CeUNvbnRleHRzKGNvbnRleHRzLCBvd25lclN1cHBvcnQsIHByb21pc2VzKTtcbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICArK3BhaW50aW5nLmxvY2tzO1xuICAgICAgICAgICAgICAgIGRlc3Ryb3lDb250ZXh0SHRtbChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgY29udGV4dC5odG1sRG9tTWV0YVxuICAgICAgICAgICAgICAgIGNvbnRleHQuaHRtbERvbU1ldGEgPSBbXTtcbiAgICAgICAgICAgICAgICAtLXBhaW50aW5nLmxvY2tzO1xuICAgICAgICAgICAgICAgIHBhaW50KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95Q29udGV4dEh0bWwoY29udGV4dCk7XG4gICAgLy8gZGVsZXRlIGNvbnRleHQuaHRtbERvbU1ldGFcbiAgICBjb250ZXh0Lmh0bWxEb21NZXRhID0gW107XG59XG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveURlc2lnbkJ5Q29udGV4dHMoY29udGV4dHMsIG93bmVyU3VwcG9ydCwgcHJvbWlzZXMpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gY29udGV4dHNbMF07XG4gICAgY29uc3QgcmVzdWx0ID0gY29udGV4dC50YWdKc1Zhci5kZXN0cm95KGNvbnRleHQsIG93bmVyU3VwcG9ydCk7XG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlcy5wdXNoKHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc3Ryb3lEZXNpZ25CeUNvbnRleHRzKGNvbnRleHRzLnNsaWNlKDEsIGNvbnRleHRzLmxlbmd0aCksIG93bmVyU3VwcG9ydCwgcHJvbWlzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChjb250ZXh0Lmh0bWxEb21NZXRhKSB7XG4gICAgICAgIGRlc3Ryb3lDb250ZXh0SHRtbChjb250ZXh0KTtcbiAgICAgICAgZGVsZXRlIGNvbnRleHQuaHRtbERvbU1ldGE7XG4gICAgfVxuICAgIGlmIChjb250ZXh0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBkZXN0cm95RGVzaWduQnlDb250ZXh0cyhjb250ZXh0cy5zbGljZSgxLCBjb250ZXh0cy5sZW5ndGgpLCBvd25lclN1cHBvcnQsIHByb21pc2VzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyB1cGRhdGVUb0RpZmZWYWx1ZSB9IGZyb20gJy4uL3RhZy91cGRhdGUvdXBkYXRlVG9EaWZmVmFsdWUuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveURlc2lnbkVsZW1lbnQgfSBmcm9tICcuL2Rlc3Ryb3lEZXNpZ25FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRGVzaWduRWxlbWVudFVwZGF0ZSh2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0KSB7XG4gICAgKytjb250ZXh0LnVwZGF0ZUNvdW50O1xuICAgIGNvbnN0IGhhc0NoYW5nZWQgPSBjaGVja1RhZ0VsZW1lbnRWYWx1ZUNoYW5nZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgZGVzdHJveURlc2lnbkVsZW1lbnQoY29udGV4dCwgb3duZXJTdXBwb3J0KTtcbiAgICAgICAgdXBkYXRlVG9EaWZmVmFsdWUodmFsdWUsIGNvbnRleHQsIG93bmVyU3VwcG9ydCwgNzg5KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBob3cgYXJndW1lbnRzIGdldCB1cGRhdGVkIHdpdGhpbiBmdW5jdGlvblxuICAgIGlmIChjb250ZXh0LnVwZGF0ZXNIYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZXNIYW5kbGVyID0gY29udGV4dC51cGRhdGVzSGFuZGxlcjtcbiAgICAgICAgdXBkYXRlc0hhbmRsZXIodmFsdWUucHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQuY29udGV4dHM7XG4gICAgY29uc3QgdkNvbnRleHRzID0gdmFsdWUuY29udGV4dHMgfHwgW107XG4gICAgY29uc3Qgb2dMaXN0ZW5lcnMgPSBjb250ZXh0LnRhZ0pzVmFyLmFsbExpc3RlbmVycztcbiAgICBjb25zdCBhbGxMaXN0ZW5lcnMgPSB2YWx1ZS5hbGxMaXN0ZW5lcnM7XG4gICAgYWxsTGlzdGVuZXJzLmZvckVhY2goKG5ld0xpc3RlbmVyLCBpbmRleCkgPT4ge1xuICAgICAgICAvLyBlbnN1cmUgdGhlIGxhdGVzdCBjYWxsYmFjayBpcyBhbHdheXMgY2FsbGVkLiBOZWVkZWQgZm9yIGZ1bmN0aW9ucyB3aXRoaW4gYXJyYXkgbWFwc1xuICAgICAgICBjb25zdCB3cmFwQ2FsbGJhY2sgPSBvZ0xpc3RlbmVyc1tpbmRleF1bMV07XG4gICAgICAgIHdyYXBDYWxsYmFjay50b0NhbGxiYWNrID0gbmV3TGlzdGVuZXJbMV0udG9DYWxsYmFjaztcbiAgICB9KTtcbiAgICBjb250ZXh0cy5mb3JFYWNoKChjb250ZXh0LCBpbmRleCkgPT4ge1xuICAgICAgICBjb250ZXh0LnRhZ0pzVmFyLnByb2Nlc3NVcGRhdGUodkNvbnRleHRzW2luZGV4XSwgLy8gY29udGV4dC52YWx1ZSxcbiAgICAgICAgY29udGV4dCwgb3duZXJTdXBwb3J0KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1RhZ0VsZW1lbnRWYWx1ZUNoYW5nZSh2YWx1ZSwgY29udGV4dCkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gY29udGV4dC52YWx1ZTtcbiAgICBpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAwOyAvLyBoYXMgbm90IGNoYW5nZWRcbiAgICB9XG4gICAgLy8gcmV0dXJuIDEgLy8gaXQgaGFzIGNoYW5nZWRcbiAgICBjb25zdCBoYXNDaGFuZ2VkID0gIXZhbHVlIHx8IHZhbHVlLnRhZ0pzVHlwZSAhPT0gJ2VsZW1lbnQnO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gMSA6IDA7XG59XG4iLCJpbXBvcnQgeyBwYWludEJlZm9yZSwgcGFpbnRDb21tYW5kcyB9IGZyb20gJy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBlbGVtZW50RnVuY3Rpb25zLCBpc1ZhbHVlRm9yQ29udGV4dCwgbG9vcE9iamVjdEF0dHJpYnV0ZXMsIHJlZ2lzdGVyTW9ja0NoaWxkQ29udGV4dCB9IGZyb20gJy4vZWxlbWVudEZ1bmN0aW9ucy5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRWxlbWVudFZhciB9IGZyb20gJy4vcHJvY2Vzc0VsZW1lbnRWYXIuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveURlc2lnbkVsZW1lbnQgfSBmcm9tICcuL2Rlc3Ryb3lEZXNpZ25FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLCBjaGVja1RhZ0VsZW1lbnRWYWx1ZUNoYW5nZSB9IGZyb20gJy4vcHJvY2Vzc0Rlc2lnbkVsZW1lbnRVcGRhdGUuZnVuY3Rpb24uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlc2lnbkVsZW1lbnQodGFnTmFtZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB7XG4gICAgICAgIHRhZ0pzVHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICBwcm9jZXNzSW5pdEF0dHJpYnV0ZTogYmxhbmtIYW5kbGVyLFxuICAgICAgICBwcm9jZXNzSW5pdCxcbiAgICAgICAgZGVzdHJveTogZGVzdHJveURlc2lnbkVsZW1lbnQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrVGFnRWxlbWVudFZhbHVlQ2hhbmdlLFxuICAgICAgICB0YWdOYW1lLFxuICAgICAgICBpbm5lckhUTUw6IFtdLFxuICAgICAgICBhdHRyaWJ1dGVzOiBbXSxcbiAgICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgICAgYWxsTGlzdGVuZXJzOiBbXSxcbiAgICAgICAgZWxlbWVudEZ1bmN0aW9ucyxcbiAgICB9O1xuICAgIGNvbnN0IHB1c2hLaWQgPSBnZXRQdXNoS2lkKGVsZW1lbnQsIGVsZW1lbnRGdW5jdGlvbnMpO1xuICAgIHB1c2hLaWQudGFnTmFtZSA9IHRhZ05hbWU7XG4gICAgcmV0dXJuIHB1c2hLaWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVzaEtpZChlbGVtZW50LCBfZWxtRnVuY3Rpb25zKSB7XG4gICAgY29uc3QgcHVzaEtpZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0VsZW1lbnQgPSB7IC4uLnB1c2hLaWQgfTtcbiAgICAgICAgbmV3RWxlbWVudC5hdHRyaWJ1dGVzID0gWy4uLnB1c2hLaWQuYXR0cmlidXRlc107XG4gICAgICAgIG5ld0VsZW1lbnQubGlzdGVuZXJzID0gWy4uLnB1c2hLaWQubGlzdGVuZXJzXTtcbiAgICAgICAgbmV3RWxlbWVudC5hbGxMaXN0ZW5lcnMgPSBbLi4ucHVzaEtpZC5hbGxMaXN0ZW5lcnNdO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KGFyZ3NbMF0pICYmXG4gICAgICAgICAgICAhYXJnc1swXS50YWdKc1R5cGUgLy8gVE9ETzogbmVlZCBiZXR0ZXIgYXR0cmlidXRlIGRldGVjdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICAgIGxvb3BPYmplY3RBdHRyaWJ1dGVzKG5ld0VsZW1lbnQsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgYXJncy5zcGxpY2UoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3RWxlbWVudC5pbm5lckhUTUwgPSBhcmdzO1xuICAgICAgICAvLyByZXZpZXcgZWFjaCBjaGlsZCBmb3IgcG90ZW50aWFsIHRvIGJlIGNvbnRleHRcbiAgICAgICAgYXJncy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWx1ZUZvckNvbnRleHQoYXJnKSkge1xuICAgICAgICAgICAgICAgIGlmIChhcmcudGFnSnNUeXBlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5hbGxMaXN0ZW5lcnMucHVzaCguLi5hcmcuYWxsTGlzdGVuZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5jb250ZXh0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFyZ3VtZW50IGlzIGFuIGVsZW1lbnQgc28gcHVzaCB1cCBpdHMgY29udGV4dHMgaW50byBtaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld0VsZW1lbnQuY29udGV4dHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmNvbnRleHRzID0gYXJnLmNvbnRleHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5jb250ZXh0cy5wdXNoKC4uLmFyZy5jb250ZXh0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWdpc3Rlck1vY2tDaGlsZENvbnRleHQoYXJnLCBuZXdFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihwdXNoS2lkLCBlbGVtZW50KTtcbiAgICBPYmplY3QuYXNzaWduKHB1c2hLaWQsIGVsZW1lbnRGdW5jdGlvbnMocHVzaEtpZCkpO1xuICAgIHB1c2hLaWQuYXR0cmlidXRlcyA9IFsuLi5lbGVtZW50LmF0dHJpYnV0ZXNdO1xuICAgIHB1c2hLaWQubGlzdGVuZXJzID0gWy4uLmVsZW1lbnQubGlzdGVuZXJzXTtcbiAgICBwdXNoS2lkLmFsbExpc3RlbmVycyA9IFsuLi5lbGVtZW50LmFsbExpc3RlbmVyc107XG4gICAgcmV0dXJuIHB1c2hLaWQ7XG59XG5mdW5jdGlvbiBwcm9jZXNzSW5pdCh2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb250ZXh0LmNvbnRleHRzID0gW107IC8vIGFkZGVkIGNvbnRleHRzXG4gICAgY29udGV4dC5odG1sRG9tTWV0YSA9IFtdO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBwcm9jZXNzRWxlbWVudFZhcih2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0LCBjb250ZXh0LmNvbnRleHRzKTtcbiAgICBwYWludENvbW1hbmRzLnB1c2goW3BhaW50QmVmb3JlLCBbaW5zZXJ0QmVmb3JlLCBlbGVtZW50LCAnZGVzaWduRWxlbWVudC5wcm9jZXNzSW5pdCddXSk7XG4gICAgY29uc3QgZG9tID0ge1xuICAgICAgICBubjogdmFsdWUudGFnTmFtZSxcbiAgICAgICAgZG9tRWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgYXQ6IHZhbHVlLmF0dHJpYnV0ZXMsIC8vIFRPRE86IG1vc3QgbGlrZWx5IGRvZXMgbm90aGluZ1xuICAgIH07XG4gICAgY29udGV4dC5odG1sRG9tTWV0YSA9IFtkb21dO1xuICAgIHJldHVybiBlbGVtZW50O1xufVxuIiwiaW1wb3J0IHsgcGFpbnQsIHBhaW50QmVmb3JlLCBwYWludGluZyB9IGZyb20gJy4uL3JlbmRlci9wYWludC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBibGFua0hhbmRsZXIgfSBmcm9tICcuLi9yZW5kZXIvZG9tL2JsYW5rSGFuZGxlci5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBlbGVtZW50RnVuY3Rpb25zIH0gZnJvbSAnLi9lbGVtZW50RnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lEZXNpZ25CeUNvbnRleHRzIH0gZnJvbSAnLi9kZXN0cm95RGVzaWduRWxlbWVudC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzRGVzaWduRWxlbWVudFVwZGF0ZSwgY2hlY2tUYWdFbGVtZW50VmFsdWVDaGFuZ2UgfSBmcm9tICcuL3Byb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHByb2Nlc3NDaGlsZHJlbiB9IGZyb20gJy4vcHJvY2Vzc0NoaWxkcmVuLmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IGdldFB1c2hLaWQgfSBmcm9tICcuL2Rlc2lnbkVsZW1lbnQuZnVuY3Rpb24uanMnO1xuaW1wb3J0IHsgZGVzdHJveUNvbnRleHRIdG1sIH0gZnJvbSAnLi4vdGFnL3NtYXJ0UmVtb3ZlS2lkcy5mdW5jdGlvbi5qcyc7XG4vKiogdXNlZCB3aGVuIHlvdSBkbyBOT1QgaGF2ZSBhIHJvb3QgZWxlbWVudCByZXR1cm5lZCBmb3IgeW91ciBmdW5jdGlvbiAqL1xuZXhwb3J0IGNvbnN0IG5vRWxlbWVudCA9IG5vRWxlbWVudE1ha2VyKCk7XG5leHBvcnQgZnVuY3Rpb24gbm9FbGVtZW50TWFrZXIoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHtcbiAgICAgICAgdGFnSnNUeXBlOiAnZWxlbWVudCcsXG4gICAgICAgIHByb2Nlc3NJbml0QXR0cmlidXRlOiBibGFua0hhbmRsZXIsIC8vIGl0cyBuZXZlciBhbiBhdHRyaWJ1dGVcbiAgICAgICAgcHJvY2Vzc0luaXQ6IHByb2Nlc3NOb0VsbUluaXQsXG4gICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lOb0VsZW1lbnQsXG4gICAgICAgIHByb2Nlc3NVcGRhdGU6IHByb2Nlc3NEZXNpZ25FbGVtZW50VXBkYXRlLFxuICAgICAgICBoYXNWYWx1ZUNoYW5nZWQ6IGNoZWNrVGFnRWxlbWVudFZhbHVlQ2hhbmdlLFxuICAgICAgICB0YWdOYW1lOiAnbm8tZWxlbWVudCcsXG4gICAgICAgIGlubmVySFRNTDogW10sXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtdLFxuICAgICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgICBhbGxMaXN0ZW5lcnM6IFtdLFxuICAgICAgICBlbGVtZW50RnVuY3Rpb25zLFxuICAgIH07XG4gICAgY29uc3QgcHVzaEtpZCA9IGdldFB1c2hLaWQoZWxlbWVudCwgZWxlbWVudEZ1bmN0aW9ucyk7XG4gICAgcHVzaEtpZC50YWdOYW1lID0gJ25vLWVsZW1lbnQnO1xuICAgIHJldHVybiBwdXNoS2lkO1xufVxuZnVuY3Rpb24gcHJvY2Vzc05vRWxtSW5pdCh2YWx1ZSwgY29udGV4dCwgb3duZXJTdXBwb3J0LCBpbnNlcnRCZWZvcmUpIHtcbiAgICBjb250ZXh0LmNvbnRleHRzID0gW107IC8vIGFkZGVkIGNvbnRleHRzXG4gICAgY29udGV4dC5odG1sRG9tTWV0YSA9IFtdO1xuICAgIHByb2Nlc3NDaGlsZHJlbih2YWx1ZS5pbm5lckhUTUwsIGNvbnRleHQsIG93bmVyU3VwcG9ydCwgY29udGV4dC5jb250ZXh0cywgaW5zZXJ0QmVmb3JlLCBwYWludEJlZm9yZSk7XG59XG5mdW5jdGlvbiBkZXN0cm95Tm9FbGVtZW50KGNvbnRleHQsIG93bmVyU3VwcG9ydCkge1xuICAgICsrY29udGV4dC51cGRhdGVDb3VudDtcbiAgICBjb25zdCBjb250ZXh0cyA9IGNvbnRleHQuY29udGV4dHM7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICBpZiAoY29udGV4dHMubGVuZ3RoKSB7XG4gICAgICAgIGRlc3Ryb3lEZXNpZ25CeUNvbnRleHRzKGNvbnRleHRzLCBvd25lclN1cHBvcnQsIHByb21pc2VzKTtcbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY29udGV4dCcsIHsgY29udGV4dCwgY29udGV4dHMgfSk7XG4gICAgICAgICAgICAgICAgKytwYWludGluZy5sb2NrcztcbiAgICAgICAgICAgICAgICBkZXN0cm95Q29udGV4dEh0bWwoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGNvbnRleHQuaHRtbERvbU1ldGFcbiAgICAgICAgICAgICAgICBjb250ZXh0Lmh0bWxEb21NZXRhID0gW107XG4gICAgICAgICAgICAgICAgLS1wYWludGluZy5sb2NrcztcbiAgICAgICAgICAgICAgICBwYWludCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBkZXNpZ25FbGVtZW50IH0gZnJvbSAnLi9kZXNpZ25FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCB7IG5vRWxlbWVudCB9IGZyb20gJy4vbm9FbGVtZW50LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCBjb25zdCBidXR0b24gPSBkZXNpZ25FbGVtZW50KCdidXR0b24nKTtcbmV4cG9ydCBjb25zdCBzZWxlY3QgPSBkZXNpZ25FbGVtZW50KCdzZWxlY3QnKTtcbmV4cG9ydCBjb25zdCBvcHRpb24gPSBkZXNpZ25FbGVtZW50KCdvcHRpb24nKTtcbmV4cG9ydCBjb25zdCBpbnB1dCA9IGRlc2lnbkVsZW1lbnQoJ2lucHV0Jyk7XG4vLyBIRUFEICYgU1VQUE9SVCBFTEVNRU5UU1xuZXhwb3J0IGNvbnN0IGh0bWxEb2MgPSBkZXNpZ25FbGVtZW50KCdodG1sJyk7IC8vIFRPRE86IGdldCB0aGlzIG5hbWVkIHRvIGh0bWxcbmV4cG9ydCBjb25zdCBoZWFkID0gZGVzaWduRWxlbWVudCgnaGVhZCcpO1xuZXhwb3J0IGNvbnN0IHRpdGxlID0gZGVzaWduRWxlbWVudCgndGl0bGUnKTtcbmV4cG9ydCBjb25zdCBtZXRhID0gZGVzaWduRWxlbWVudCgnbWV0YScpO1xuZXhwb3J0IGNvbnN0IGxpbmsgPSBkZXNpZ25FbGVtZW50KCdsaW5rJyk7XG5leHBvcnQgY29uc3QgYm9keSA9IGRlc2lnbkVsZW1lbnQoJ2JvZHknKTtcbmV4cG9ydCBjb25zdCBub3NjcmlwdCA9IGRlc2lnbkVsZW1lbnQoJ25vc2NyaXB0Jyk7XG4vLyBCTE9DSyBFTEVNRU5UU1xuZXhwb3J0IGNvbnN0IGhyID0gZGVzaWduRWxlbWVudCgnaHInKTtcbmV4cG9ydCBjb25zdCBoMSA9IGRlc2lnbkVsZW1lbnQoJ2gxJyk7XG5leHBvcnQgY29uc3QgaDIgPSBkZXNpZ25FbGVtZW50KCdoMicpO1xuZXhwb3J0IGNvbnN0IGgzID0gZGVzaWduRWxlbWVudCgnaDMnKTtcbmV4cG9ydCBjb25zdCBoNCA9IGRlc2lnbkVsZW1lbnQoJ2g0Jyk7XG5leHBvcnQgY29uc3QgaDUgPSBkZXNpZ25FbGVtZW50KCdoNScpO1xuZXhwb3J0IGNvbnN0IGg2ID0gZGVzaWduRWxlbWVudCgnaDYnKTtcbmV4cG9ydCBjb25zdCBvbCA9IGRlc2lnbkVsZW1lbnQoJ29sJyk7XG5leHBvcnQgY29uc3QgbGkgPSBkZXNpZ25FbGVtZW50KCdsaScpO1xuZXhwb3J0IGNvbnN0IGRpdiA9IGRlc2lnbkVsZW1lbnQoJ2RpdicpO1xuZXhwb3J0IGNvbnN0IGZpZWxkc2V0ID0gZGVzaWduRWxlbWVudCgnZmllbGRzZXQnKTtcbmV4cG9ydCBjb25zdCBsZWdlbmQgPSBkZXNpZ25FbGVtZW50KCdsZWdlbmQnKTtcbi8vIFRBQkxFIEVMRU1FTlRTXG5leHBvcnQgY29uc3QgdGFibGUgPSBkZXNpZ25FbGVtZW50KCd0YWJsZScpO1xuZXhwb3J0IGNvbnN0IHRyID0gZGVzaWduRWxlbWVudCgndHInKTtcbmV4cG9ydCBjb25zdCB0ZCA9IGRlc2lnbkVsZW1lbnQoJ3RkJyk7XG5leHBvcnQgY29uc3QgdGggPSBkZXNpZ25FbGVtZW50KCd0aCcpO1xuLy8gSU5MSU5FIEVMRU1FTlRTXG5leHBvcnQgY29uc3QgcCA9IGRlc2lnbkVsZW1lbnQoJ3AnKTtcbmV4cG9ydCBjb25zdCBhID0gZGVzaWduRWxlbWVudCgnYScpO1xuZXhwb3J0IGNvbnN0IHNwYW4gPSBkZXNpZ25FbGVtZW50KCdzcGFuJyk7XG5leHBvcnQgY29uc3Qgc3Ryb25nID0gZGVzaWduRWxlbWVudCgnc3Ryb25nJyk7XG5leHBvcnQgY29uc3Qgc21hbGwgPSBkZXNpZ25FbGVtZW50KCdzbWFsbCcpO1xuZXhwb3J0IGNvbnN0IGxhYmVsID0gZGVzaWduRWxlbWVudCgnbGFiZWwnKTtcbmV4cG9ydCBjb25zdCBzdXAgPSBkZXNpZ25FbGVtZW50KCdzdXAnKTtcbiIsImV4cG9ydCAqIGZyb20gJy4vdGFnL2luZGV4LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vc3RhdGUvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9yZW5kZXIvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9zdWJqZWN0L2luZGV4LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdGFnSnNWYXJzL2luZGV4LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJwb2xhdGlvbnMvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lcnJvcnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pc0luc3RhbmNlLmpzJztcbmV4cG9ydCB7IHN0YXRlcyB9IGZyb20gJy4vc3RhdGUvc3RhdGVzLmZ1bmN0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdGFnL2NyZWF0ZUh0bWxTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZXJwb2xhdGlvbnMvYXR0cmlidXRlcy9ob3dUb1NldElucHV0VmFsdWUuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9UYWdKc0V2ZW50LnR5cGUuanMnO1xuaW1wb3J0IHsgZmlyc3RUYWdSZW5kZXIsIHJlUmVuZGVyVGFnIH0gZnJvbSAnLi9yZW5kZXIvcmVuZGVyVGFnT25seS5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJTdXBwb3J0IH0gZnJvbSAnLi9yZW5kZXIvcmVuZGVyU3VwcG9ydC5mdW5jdGlvbi5qcyc7XG5pbXBvcnQgeyByZW5kZXJXaXRoU3VwcG9ydCB9IGZyb20gJy4vcmVuZGVyL3JlbmRlcldpdGhTdXBwb3J0LmZ1bmN0aW9uLmpzJztcbmltcG9ydCB7IHRhZ0VsZW1lbnQgfSBmcm9tICcuL3RhZy90YWdFbGVtZW50LmpzJztcbmltcG9ydCB7IHBhaW50IH0gZnJvbSAnLi9yZW5kZXIvcGFpbnQuZnVuY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZWVwRnVuY3Rpb25zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZWxlbWVudHMvaW5kZXguanMnO1xuZXhwb3J0IGNvbnN0IGhtciA9IHtcbiAgICB0YWdFbGVtZW50LCByZW5kZXJXaXRoU3VwcG9ydCwgcmVuZGVyU3VwcG9ydCxcbiAgICBmaXJzdFRhZ1JlbmRlciwgcmVSZW5kZXJUYWcsIHBhaW50LFxufTtcbiIsImltcG9ydCB7IGNhbGxiYWNrLCBvbkRlc3Ryb3ksIHN0YXRlLCBWYWx1ZVN1YmplY3QgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmNvbnN0IGdldEhhc2ggPSAoKSA9PiB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSkgfHwgJy8nO1xuLyoqIEBkZXByZWNhdGVkIC0gb25seSBzaG91bGQgcnVuIG9uY2UgKi9cbmNvbnN0IEhhc2hSb3V0ZXIgPSAob25IYXNoQ2hhbmdlKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBvbkhhc2hDaGFuZ2UoZ2V0SGFzaCgpKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gbGlzdGVuZXI7XG59O1xuLyoqIEhvb2sgaW50byBicm93c2VyIHdpbmRvdyBoYXNoIGNoYW5nZXMgYW5kIGNhdXNlIHN0YXRlIHRvIHJlbmRlciBhZnRlciBjaGFuZ2UgKi9cbmV4cG9ydCBjb25zdCB1c2VIYXNoUm91dGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IG1lbW9yeSA9IHN0YXRlKCgpID0+ICh7XG4gICAgICAgIHJvdXRlOiBnZXRIYXNoKCksXG4gICAgICAgIGxvY2F0aW9uOiB3aW5kb3cubG9jYXRpb24sXG4gICAgfSkpO1xuICAgIC8vIFdoYXQgdG8gcnVuIG9uIGNoYW5nZSBhbmQgc2lnbmlmeSBhIHN0YXRlIGNoYW5nZSB3aWxsIG9jY3VyLiBPbmx5IGZpcnN0IGluc3RhbmNlIGlzIHVzZWQgYmVsb3cgaW4gbGlzdGVuZXJcbiAgICBjb25zdCBvbkhhc2hDaGFuZ2UgPSBjYWxsYmFjaygocm91dGUpID0+IG1lbW9yeS5yb3V0ZSA9IGdldEhhc2goKSk7XG4gICAgLy8gcnVucyBmdW5jdGlvbiBjYWxsIG9ubHkgb25jZVxuICAgIGNvbnN0IGxpc3RlbmVyID0gc3RhdGUoKCkgPT4ge1xuICAgICAgICByZXR1cm4gSGFzaFJvdXRlcihvbkhhc2hDaGFuZ2UpO1xuICAgIH0pO1xuICAgIG9uRGVzdHJveSgoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGxpc3RlbmVyKSk7XG4gICAgcmV0dXJuIG1lbW9yeTtcbn07XG4vKiogSG9vayBpbnRvIGJyb3dzZXIgd2luZG93IGhhc2ggY2hhbmdlcyBhbmQgY2F1c2Ugc3RhdGUgdG8gcmVuZGVyIGFmdGVyIGNoYW5nZSAqL1xuZXhwb3J0IGNvbnN0IGhhc2hSb3V0ZXJTdWJqZWN0ID0gKCkgPT4ge1xuICAgIGNvbnN0IG1lbW9yeSA9IHtcbiAgICAgICAgcm91dGU6IGdldEhhc2goKSxcbiAgICAgICAgbG9jYXRpb246IHdpbmRvdy5sb2NhdGlvbixcbiAgICB9O1xuICAgIC8vIFdoYXQgdG8gcnVuIG9uIGNoYW5nZSBhbmQgc2lnbmlmeSBhIHN0YXRlIGNoYW5nZSB3aWxsIG9jY3VyLiBPbmx5IGZpcnN0IGluc3RhbmNlIGlzIHVzZWQgYmVsb3cgaW4gbGlzdGVuZXJcbiAgICBjb25zdCBvbkhhc2hDaGFuZ2UgPSBjYWxsYmFjaygocm91dGUpID0+IHtcbiAgICAgICAgbWVtb3J5LnJvdXRlID0gZ2V0SGFzaCgpO1xuICAgICAgICBzdWJqZWN0Lm5leHQobWVtb3J5KTtcbiAgICB9KTtcbiAgICAvLyBydW5zIGZ1bmN0aW9uIGNhbGwgb25seSBvbmNlXG4gICAgY29uc3QgbGlzdGVuZXIgPSBIYXNoUm91dGVyKG9uSGFzaENoYW5nZSk7XG4gICAgb25EZXN0cm95KCgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgbGlzdGVuZXIpKTtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFZhbHVlU3ViamVjdChtZW1vcnkpO1xuICAgIHJldHVybiBzdWJqZWN0O1xufTtcbiIsImltcG9ydCB7IHN1YnNjcmliZSwgZGl2LCBhIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBoYXNoUm91dGVyU3ViamVjdCwgdXNlSGFzaFJvdXRlciB9IGZyb20gXCIuL3RvZG8vSGFzaFJvdXRlci5mdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1lbnVOYW1lQnlJdGVtKHJvdXRlcikge1xuICAgIGNvbnN0IHJvdXRlID0gcm91dGVyLnJvdXRlO1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcm91dGVyLmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGlmIChwYXRobmFtZSAmJiByb3V0ZSA9PT0gJ2NvdW50ZXJzLycpIHtcbiAgICAgICAgcmV0dXJuICdjb3VudGVycyc7XG4gICAgfVxuICAgIGlmIChwYXRobmFtZSAmJiByb3V0ZSA9PT0gJ2NvbnRlbnQvJykge1xuICAgICAgICByZXR1cm4gJ2NvbnRlbnQnO1xuICAgIH1cbiAgICBjb25zdCBpc0lzb2xhdGVkID0gcGF0aG5hbWUuZW5kc1dpdGgoJ2lzb2xhdGVkLmh0bWwnKTtcbiAgICBpZiAoaXNJc29sYXRlZCkge1xuICAgICAgICByZXR1cm4gJ2lzb2xhdGVkJztcbiAgICB9XG4gICAgY29uc3QgaXNUb2RvID0gcGF0aG5hbWUuaW5jbHVkZXMoJ3RvZG8vd3d3Jyk7XG4gICAgaWYgKGlzVG9kbykge1xuICAgICAgICByZXR1cm4gJ3RvZG8nO1xuICAgIH1cbiAgICByZXR1cm4gJ2hvbWUnO1xufVxuZXhwb3J0IGNvbnN0IG1lbnUgPSAoKSA9PiB7XG4gICAgY29uc3Qgcm91dGVyID0gaGFzaFJvdXRlclN1YmplY3QoKTtcbiAgICByZXR1cm4gc3Vic2NyaWJlKHJvdXRlciwgaXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IG1lbnVOYW1lID0gZ2V0TWVudU5hbWVCeUl0ZW0oaXRlbSk7XG4gICAgICAgIHJldHVybiBkaXYoYSh7XG4gICAgICAgICAgICAnc3R5bGUub3BhY2l0eSc6IF8gPT4gbWVudU5hbWUgPT09ICdob21lJyA/ICcuNScgOiAnMScsXG4gICAgICAgICAgICBocmVmOiBfID0+IG1lbnVOYW1lID09PSAnaG9tZScgPyB1bmRlZmluZWQgOiAnIy8nXG4gICAgICAgIH0sICdob21lJyksICcgLSAnLCBhKHtcbiAgICAgICAgICAgICdzdHlsZS5vcGFjaXR5JzogXyA9PiBtZW51TmFtZSA9PT0gJ2lzb2xhdGVkJyA/ICcuNScgOiAnMScsXG4gICAgICAgICAgICBocmVmOiBfID0+IG1lbnVOYW1lID09PSAnaXNvbGF0ZWQnID8gdW5kZWZpbmVkIDogJ2lzb2xhdGVkLmh0bWwnXG4gICAgICAgIH0sICdpc29sYXRlZCcpLCAnIC0gJywgYSh7XG4gICAgICAgICAgICAnc3R5bGUub3BhY2l0eSc6IF8gPT4gbWVudU5hbWUgPT09ICdjb3VudGVycycgPyAnLjUnIDogJzEnLFxuICAgICAgICAgICAgaHJlZjogXyA9PiBtZW51TmFtZSA9PT0gJ2NvdW50ZXJzJyA/IHVuZGVmaW5lZCA6ICcjY291bnRlcnMvJ1xuICAgICAgICB9LCAnY291bnRlcnMnKSwgJyAtICcsIGEoe1xuICAgICAgICAgICAgJ3N0eWxlLm9wYWNpdHknOiBfID0+IG1lbnVOYW1lID09PSAnY29udGVudCcgPyAnLjUnIDogJzEnLFxuICAgICAgICAgICAgaHJlZjogXyA9PiBtZW51TmFtZSA9PT0gJ2NvbnRlbnQnID8gdW5kZWZpbmVkIDogJyNjb250ZW50LydcbiAgICAgICAgfSwgJ2NvbnRlbnQnKSwgJyAtICcsIGEoe1xuICAgICAgICAgICAgJ3N0eWxlLm9wYWNpdHknOiBfID0+IG1lbnVOYW1lID09PSAndG9kbycgPyAnLjUnIDogJzEnLFxuICAgICAgICAgICAgaHJlZjogXyA9PiBtZW51TmFtZSA9PT0gJ3RvZG8nID8gdW5kZWZpbmVkIDogJ3RvZG8vd3d3LydcbiAgICAgICAgfSwgJ3RvZG8gYXBwJyksICcgLSAnLCBhKHsgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vQWNrZXJBcHBsZS90YWdnZWRqc1wiLCB0YXJnZXQ6IFwiX2JsYW5rXCIgfSwgJ3JlcG8nKSk7XG4gICAgfSk7XG59O1xuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVudU5hbWUoKSB7XG4gICAgY29uc3Qgcm91dGVyID0gdXNlSGFzaFJvdXRlcigpO1xuICAgIGNvbnN0IHJvdXRlID0gcm91dGVyLnJvdXRlO1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcm91dGVyLmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGlmIChwYXRobmFtZSAmJiByb3V0ZSA9PT0gJ2NvdW50ZXJzLycpIHtcbiAgICAgICAgcmV0dXJuICdjb3VudGVycyc7XG4gICAgfVxuICAgIGlmIChwYXRobmFtZSAmJiByb3V0ZSA9PT0gJ2NvbnRlbnQvJykge1xuICAgICAgICByZXR1cm4gJ2NvbnRlbnQnO1xuICAgIH1cbiAgICBjb25zdCBpc0lzb2xhdGVkID0gcGF0aG5hbWUuZW5kc1dpdGgoJ2lzb2xhdGVkLmh0bWwnKTtcbiAgICBpZiAoaXNJc29sYXRlZCkge1xuICAgICAgICByZXR1cm4gJ2lzb2xhdGVkJztcbiAgICB9XG4gICAgY29uc3QgaXNUb2RvID0gcGF0aG5hbWUuaW5jbHVkZXMoJ3RvZG8vd3d3Jyk7XG4gICAgaWYgKGlzVG9kbykge1xuICAgICAgICByZXR1cm4gJ3RvZG8nO1xuICAgIH1cbiAgICByZXR1cm4gJ2hvbWUnO1xufVxuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tICd0YWdnZWRqcyc7XG5leHBvcnQgY29uc3QgbW91c2VPdmVyVGFnID0gdGFnKCh7IGxhYmVsLCBtZW1vcnksIH0pID0+IHtcbiAgICBsZXQgbW91c2VPdmVyRWRpdFNob3cgPSBmYWxzZTtcbiAgICBsZXQgZWRpdCA9IGZhbHNlO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgbW91c2VPdmVyRWRpdFNob3csIGVkaXQgfV0gPSBnZXQoeyBtb3VzZU92ZXJFZGl0U2hvdywgZWRpdCB9KSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczE0MDQwN1swXSwgKCkgPT4gbW91c2VPdmVyRWRpdFNob3cgPSB0cnVlLCAoKSA9PiBtb3VzZU92ZXJFZGl0U2hvdyA9IGZhbHNlLCBsYWJlbCwgbWVtb3J5LmNvdW50ZXIsIG1vdXNlT3ZlckVkaXRTaG93IHx8ICdmYWxzZScsICgpID0+ICsrbWVtb3J5LmNvdW50ZXIsIChlZGl0IHx8IG1vdXNlT3ZlckVkaXRTaG93KSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nLCAoKSA9PiBlZGl0ID0gIWVkaXQpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTQwNDA3OiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS0gbW91c2VPdmVyVGFnIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJhY2tncm91bmQtY29sb3I6cHVycGxlO3BhZGRpbmc6LjJlbTtmbGV4OjFcIl0sIFtcIm1vdXNlb3ZlclwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wibW91c2VvdXRcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJtb3VzZW92ZXIgLSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisrY291bnRlclwiIH1dIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGUudmlzaWJpbGl0eVwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBcInN0eWxlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKame+4jyZuYnNwO1wiIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgZGl2LCBzbWFsbCwgc3BhbiwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgcmVuZGVyQ291bnREaXYgPSB0YWcoKHsgcmVuZGVyQ291bnQsIG5hbWUgfSkgPT4ge1xuICAgIHJlbmRlckNvdW50RGl2LnVwZGF0ZXMoeCA9PiBbeyByZW5kZXJDb3VudCwgbmFtZSB9XSA9IHgpO1xuICAgIHJldHVybiBkaXYoc21hbGwoYCgke25hbWV9IHJlbmRlciBjb3VudGAsIHNwYW4oeyBpZDogYCR7bmFtZX1fcmVuZGVyX2NvdW50YCB9LCBfID0+IHJlbmRlckNvdW50KSwgYClgKSk7XG59KTtcbiIsImltcG9ydCB7IG1vdXNlT3ZlclRhZyB9IGZyb20gXCIuL21vdXNlb3Zlci50YWcuanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBzdGF0ZXMsIGh0bWwsIHRhZywgU3ViamVjdCwgY2FsbGJhY2tNYWtlciwgVmFsdWVTdWJqZWN0LCBjYWxsYmFjaywgc3ViamVjdCwgc3Vic2NyaWJlLCBob3N0LCBkaXYsIGJ1dHRvbiwgc3BhbiwgaW5wdXQsIGZpZWxkc2V0LCBsZWdlbmQsIHNtYWxsIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5jb25zdCBsb2FkU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbmNvbnN0IHRlc3QgPSB0YWcoKCkgPT4ge1xuICAgIHJldHVybiBkaXYoJ2hlbGxvIGNvbXBsZXggd29ybGQnKTtcbiAgICAvKlxuICAgIHRlc3QucmVuZGVyKFxuICAgICAgZGl2KCdoZWxsbyBjb21wbGV4IHdvcmxkJylcbiAgICApXG4gIFxuICAgIHJldHVybiBkaXYoJ2hlbGxvIHNpbXBsZSB3b3JsZCcpKi9cbn0pO1xuZXhwb3J0IGNvbnN0IGNvdW50ZXJzID0gdGFnLmltbXV0YWJsZVByb3BzKCh7IGFwcENvdW50ZXJTdWJqZWN0IH0sIF8gPSAnY291bnRlcnNEZWJ1ZycpID0+IHtcbiAgICByZXR1cm4gZGl2KCc8IS0tY291bnRlcnMtLT4nLCB0ZXN0KCksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCIgfSwgZGl2KCfwn5GJIFN1YnNjcmlwdGlvbiBjb3VudDonLCBzcGFuKHsgaWQ6IFwi8J+RiS1jb3VudGVyLXN1Yi1jb3VudFwiIH0sIHN1YnNjcmliZShTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JCkpKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4gY29uc29sZS5pbmZvKCdzdWJzJywgU3ViamVjdC5nbG9iYWxTdWJzKVxuICAgIH0sICdsb2cgc3VicycpLCBkaXYoYnV0dG9uKHtcbiAgICAgICAgaWQ6IFwiY291bnRlcnMtYXBwLWNvdW50ZXItc3ViamVjdC1idXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4gYXBwQ291bnRlclN1YmplY3QubmV4dCgoYXBwQ291bnRlclN1YmplY3QudmFsdWUgfHwgMCkgKyAxKVxuICAgIH0sICfwn42SICsrYXBwIHN1YmplY3QnKSwgc3Bhbign8J+NkiAnLCBzcGFuKHsgaWQ6IFwiYXBwLWNvdW50ZXJzLWRpc3BsYXlcIiB9LCBzdWJzY3JpYmUoYXBwQ291bnRlclN1YmplY3QpKSksIHNwYW4oJ/CfjZIgJywgc3Bhbih7IGlkOiBcImFwcC1jb3VudGVycy1zdWJqZWN0LWRpc3BsYXlcIiB9LCBhcHBDb3VudGVyU3ViamVjdC52YWx1ZSkpKSksIGlubmVyQ291bnRlckNvbnRlbnQoKSk7XG59KTtcbmNvbnN0IGlubmVyQ291bnRlcnMgPSB0YWcuZGVlcFByb3BXYXRjaCgoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4gKG90aGVyQ291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgZWxtSW5pdENvdW50ID0gMCwgX18gPSArK3JlbmRlckNvdW50KSA9PiB7XG4gICAgaW5uZXJDb3VudGVycy51cGRhdGVzKHggPT4ge1xuICAgICAgICA7XG4gICAgICAgIFt7IHByb3BDb3VudGVyLCBpbmNyZWFzZVByb3BDb3VudGVyIH1dID0geDtcbiAgICB9KTtcbiAgICByZXR1cm4gZGl2KGRpdi5hdHRyKGhvc3Qub25Jbml0KCgpID0+IHtcbiAgICAgICAgcmV0dXJuICsrZWxtSW5pdENvdW50O1xuICAgIH0pKSh7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiIH0sIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiIH0sICfwn5SlIGVsbUluaXRDb3VudDonLCBzcGFuKHsgaWQ6IFwi8J+UpS1pbml0LWNvdW50ZXJcIiB9LCBfID0+IHtcbiAgICAgICAgcmV0dXJuIGVsbUluaXRDb3VudDtcbiAgICB9KSksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiIH0sIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIuKdpO+4jy1pbm5lci1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6IGluY3JlYXNlUHJvcENvdW50ZXJcbiAgICB9LCAn4p2k77iPLWlubmVyLWNvdW50ZXIgcHJvcENvdW50ZXI6JywgXyA9PiB7XG4gICAgICAgIHJldHVybiBwcm9wQ291bnRlcjtcbiAgICB9KSwgc3Bhbign4p2k77iPICcsIHNwYW4oeyBpZDogXCLinaTvuI8taW5uZXItZGlzcGxheVwiIH0sIF8gPT4gcHJvcENvdW50ZXIpKSksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiIH0sIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIvCfpL8tZGVlcC1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrb3RoZXJDb3VudGVyXG4gICAgfSwgJ/CfpL8gb3RoZXJDb3VudGVyOicsIF8gPT4gb3RoZXJDb3VudGVyKSwgc3Bhbign8J+kvyAnLCBzcGFuKHsgaWQ6IFwi8J+kvy1kZWVwLWRpc3BsYXlcIiB9LCBfID0+IG90aGVyQ291bnRlcikpKSksIGRpdigncmVuZGVyQ291bnQ6JywgXyA9PiByZW5kZXJDb3VudCksIF8gPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2lubmVyX2NvdW50ZXJzJyB9KSk7XG59KTtcbmNvbnN0IHNoYWxsb3dQcm9wQ291bnRlcnMgPSB0YWcud2F0Y2hQcm9wcygoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDsgLy8gZm9yIGRlYnVnZ2luZ1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M5NzMyODA3WzBdLCBpbmNyZWFzZVByb3BDb3VudGVyLCBwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsICgpID0+ICsrb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzaGFsbG93X2NvdW50ZXJzJyB9KSk7XG59KTtcbmNvbnN0IGltbXV0YWJsZVByb3BDb3VudGVycyA9IHRhZy5pbW11dGFibGVQcm9wcygoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDsgLy8gZm9yIGRlYnVnZ2luZ1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M5NzMyODA3WzFdLCBpbmNyZWFzZVByb3BDb3VudGVyLCBwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsICgpID0+ICsrb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdpbW11dGFibGVfY291bnRlcnMnIH0pKTtcbn0pO1xuY29uc3Qgbm9XYXRjaFByb3BDb3VudGVycyA9IHRhZygoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciwgfSkgPT4ge1xuICAgIGxldCBvdGhlckNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IG5vV2F0Y2hQcm9wQ291bnRlcnMgPSAnbm9XYXRjaFByb3BDb3VudGVycyc7IC8vIGp1c3QgYSBuYW1lIHRvIHBpY2t1cFxuICAgIHN0YXRlcyhnZXQgPT4gW3sgb3RoZXJDb3VudGVyLCByZW5kZXJDb3VudCwgbm9XYXRjaFByb3BDb3VudGVycyB9XSA9IGdldCh7IG90aGVyQ291bnRlciwgcmVuZGVyQ291bnQsIG5vV2F0Y2hQcm9wQ291bnRlcnMgfSkpO1xuICAgICsrcmVuZGVyQ291bnQ7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzOTczMjgwN1syXSwgaW5jcmVhc2VQcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiArK290aGVyQ291bnRlciwgb3RoZXJDb3VudGVyLCBvdGhlckNvdW50ZXIsIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnbm93YXRjaF9jb3VudGVycycgfSkpO1xufSk7XG5leHBvcnQgY29uc3QgaW5uZXJDb3VudGVyQ29udGVudCA9IHRhZygoKSA9PiAoc3RhdGVzUmVuZGVyQ291bnQgPSAwLCBzdGF0ZXNSZW5kZXJDb3VudDIgPSAwLCBjb3VudGVyID0gMCwgY291bnRlcjIgPSAwLCByZW5kZXJDb3VudCA9IDAsIHByb3BDb3VudGVyID0gMCwgaW5pdENvdW50ZXIgPSAwLCBjYWxsYmFja3MgPSBjYWxsYmFja01ha2VyKCksIGNhbGxiYWNrVG8gPSBjYWxsYmFjayh6ID0+IHtcbiAgICBjb3VudGVyMiA9IHo7XG59KSwgaW5jcmVhc2VQcm9wQ291bnRlciA9ICgpID0+IHtcbiAgICArK3Byb3BDb3VudGVyO1xufSwgaW1tdXRhYmxlUHJvcHMgPSB7IHByb3BDb3VudGVyLCBpbmNyZWFzZVByb3BDb3VudGVyIH0sIGNhbGxiYWNrVGVzdFN1YiA9IG5ldyBTdWJqZWN0KGNvdW50ZXIpLCBjYWxsYmFja1Rlc3RTdWIyID0gbmV3IFN1YmplY3QoMCksIGNhbGxiYWNrVGVzdFN1YjMgPSBuZXcgU3ViamVjdCgpLCBwaXBlZFN1YmplY3QwID0gbmV3IFZhbHVlU3ViamVjdCgnMjIyJyksIFxuLy8gU3RhdGUgYXMgYSBjYWxsYmFjayBvbmx5IG5lZWRlZCBzbyBwaXBlZFN1YmplY3QxIGhhcyB0aGUgbGF0ZXN0IHZhbHVlXG5pbmNyZWFzZUNvdW50ZXIgPSAoKSA9PiB7XG4gICAgKytjb3VudGVyO1xuICAgIHBpcGVkU3ViamVjdDAubmV4dCgnMzMzLScgKyBjb3VudGVyKTtcbn0sIHBpcGVkU3ViamVjdDEgPSBTdWJqZWN0LmFsbChbcGlwZWRTdWJqZWN0MCwgY2FsbGJhY2tUZXN0U3ViXSksIHBpcGVkU3ViamVjdDIgPSBzdWJqZWN0LmFsbChbcGlwZWRTdWJqZWN0MCwgY2FsbGJhY2tUZXN0U3ViXSksIHBpcGVkU3ViamVjdDMgPSBzdWJqZWN0LmFsbChbcGlwZWRTdWJqZWN0MCwgY2FsbGJhY2tUZXN0U3ViLCBjYWxsYmFja1Rlc3RTdWIzXSksIG1lbW9yeSA9IHsgY291bnRlcjogMCB9LCBcbi8vIGNyZWF0ZSBhbiBvYmplY3QgdGhhdCByZW1haW5zIHRoZSBzYW1lXG5yZWFkU3RhcnRUaW1lID0gRGF0ZS5ub3coKSkgPT4ge1xuICAgICsraW5pdENvdW50ZXI7XG4gICAgY29uc29sZS5pbmZvKCdjb3VudGVyc0RlYnVnLnRzOiDwn5GJIGkgc2hvdWxkIG9ubHkgZXZlciBydW4gb25jZScpO1xuICAgIGNhbGxiYWNrVGVzdFN1Yi5zdWJzY3JpYmUoY2FsbGJhY2tzKHkgPT4ge1xuICAgICAgICBjb3VudGVyID0geTtcbiAgICB9KSk7XG4gICAgY2FsbGJhY2tUZXN0U3ViLnN1YnNjcmliZShjYWxsYmFja1RvKTtcbiAgICBpZiAoaW1tdXRhYmxlUHJvcHMucHJvcENvdW50ZXIgIT09IHByb3BDb3VudGVyKSB7XG4gICAgICAgIGltbXV0YWJsZVByb3BzID0geyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9O1xuICAgIH1cbiAgICArK3JlbmRlckNvdW50OyAvLyBmb3IgZGVidWdnaW5nXG4gICAgcmV0dXJuIGRpdihkaXYoJ2luaXRDb3VudGVyOicsIF8gPT4gaW5pdENvdW50ZXIpLCBkaXYoJ/CfmLEgc3RhdGVzUmVuZGVyQ291bnQ6JywgXyA9PiBzdGF0ZXNSZW5kZXJDb3VudCwgYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgKytzdGF0ZXNSZW5kZXJDb3VudDtcbiAgICAgICAgfVxuICAgIH0sICfwn5ixICsrc3RhdGVzUmVuZGVyQ291bnQnKSksIGRpdign8J+YsfCfmLEgc3RhdGVzUmVuZGVyQ291bnQyOicsIF8gPT4gc3RhdGVzUmVuZGVyQ291bnQyLCBidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICArK3N0YXRlc1JlbmRlckNvdW50MjtcbiAgICAgICAgfSxcbiAgICB9LCAn8J+YsfCfmLEgKytzdGF0ZXNSZW5kZXJDb3VudDInKSksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCIgfSwgaW5wdXQoe1xuICAgICAgICBpZDogXCJzZXQtbWFpbi1jb3VudGVyLWlucHV0XCIsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBcImlucHV0IGNvdW50ZXIgdmFsdWVcIixcbiAgICAgICAgb25LZXl1cDogZSA9PiAoY291bnRlciA9IE51bWJlcihlLnRhcmdldC52YWx1ZSkgfHwgMClcbiAgICB9KSwgZGl2KGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIuKdpO+4jy1pbmNyZWFzZS1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6IGluY3JlYXNlUHJvcENvdW50ZXJcbiAgICB9LCAn4p2k77iPIHByb3BDb3VudGVyOicsIF8gPT4gcHJvcENvdW50ZXIpLCBzcGFuKCfinaTvuI8gJywgc3Bhbih7IGlkOiBcIuKdpO+4jy1jb3VudGVyLWRpc3BsYXlcIiB9LCBfID0+IHByb3BDb3VudGVyKSkpLCBkaXYoYnV0dG9uKHtcbiAgICAgICAgaWQ6IFwi8J+lpi1zdGFuZGFsb25lLWNvdW50ZXJcIixcbiAgICAgICAgb25DbGljazogaW5jcmVhc2VDb3VudGVyLFxuICAgIH0sICfwn6WmIHN0YW5kIGFsb25lIGNvdW50ZXJzJyksIHNwYW4oJ/CfpaYgJywgc3Bhbih7IGlkOiBcIvCfpaYtc3RhbmRhbG9uZS1kaXNwbGF5XCIgfSwgXyA9PiBjb3VudGVyKSkpLCBfID0+IGNvdW50ZXIgPiAxICYmIGRpdihidXR0b24oe1xuICAgICAgICBpZDogXCJjb25kaXRpb25hbC1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6IGluY3JlYXNlQ291bnRlcixcbiAgICB9LCAnY29uZGl0aW9uYWwgY291bnRlcjonLCBfID0+IGNvdW50ZXIpKSwgc3Bhbign8J+lpiAnLCBzcGFuKHsgaWQ6IFwiY29uZGl0aW9uYWwtZGlzcGxheVwiIH0sIF8gPT4gY291bnRlcikpKSwgZGl2KGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIvCfpaYtc3ViamVjdC1pbmNyZWFzZS1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGNhbGxiYWNrVGVzdFN1Yi5uZXh0KGNvdW50ZXIgKyAxKVxuICAgIH0sICcrK3N1YmplY3Q8PicpLCBzcGFuKCfwn6WmPCcsIHNwYW4oeyBpZDogXCJzdWJqZWN0LWNvdW50ZXItc3ViamVjdC1kaXNwbGF5XCIgfSwgc3Vic2NyaWJlKGNhbGxiYWNrVGVzdFN1YikpLCAnPicpKSwgZGl2KGJ1dHRvbih7XG4gICAgICAgIGlkOiBcIvCfpaYtc3ViamVjdC1pbmNyZWFzZS1hc3luYy1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrVGVzdFN1YjIubmV4dChjYWxsYmFja1Rlc3RTdWIyLnZhbHVlICsgMSk7XG4gICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH1cbiAgICB9LCAn8J+UgCDwn6WmICsrc3ViamVjdDw+JyksIHNwYW4oJ/CflIAg8J+lpjwnLCBzcGFuKHsgaWQ6IFwic3ViamVjdC1hc3luYy1jb3VudGVyLXN1YmplY3QtZGlzcGxheVwiIH0sIHN1YnNjcmliZShjYWxsYmFja1Rlc3RTdWIyKSksICc+JykpLCBmaWVsZHNldChsZWdlbmQoJ/CfqoggcGlwZWRTdWJqZWN0IDEnKSwgZGl2KHNtYWxsKHNwYW4oeyBpZDogXCLwn6qILXBpcGVkU3ViamVjdFwiIH0sIHN1YnNjcmliZShwaXBlZFN1YmplY3QxLCAoKSA9PiBjb3VudGVyKSkpKSksIGZpZWxkc2V0KGxlZ2VuZCgn8J+qiCBwaXBlZFN1YmplY3QgMicpLCBkaXYoc21hbGwoc3Bhbih7IGlkOiBcIvCfqogtcGlwZWRTdWJqZWN0LTJcIiB9LCBzdWJzY3JpYmUocGlwZWRTdWJqZWN0MiwgKCkgPT4gY291bnRlcikpKSkpLCBmaWVsZHNldChsZWdlbmQoJ/CfqoggcGlwZWRTdWJqZWN0IDMnKSwgZGl2KHNtYWxsKHNwYW4oeyBpZDogXCLwn6qILXBpcGVkU3ViamVjdC0zXCIgfSwgc3Vic2NyaWJlKHBpcGVkU3ViamVjdDMsIChhKSA9PiB7XG4gICAgICAgIHJldHVybiAnaGVsbG8gd29ybGQnO1xuICAgIH0pKSkpKSwgZmllbGRzZXQobGVnZW5kKCdzaGFyZWQgbWVtb3J5JyksIGRpdih7XG4gICAgICAgIGNsYXNzOiB7IGJvbGQ6IHRydWUsICd0ZXh0LWJsdWUnOiB0cnVlIH0sXG4gICAgICAgIHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6LjVlbVwiXG4gICAgfSwgXyA9PiBtb3VzZU92ZXJUYWcoeyBsYWJlbDogJ2EtYS3wn5i7JywgbWVtb3J5IH0pLCBfID0+IG1vdXNlT3ZlclRhZyh7IGxhYmVsOiAnYi1iLfCfmLsnLCBtZW1vcnkgfSkpLCAnbWVtb3J5LmNvdW50ZXI68J+YuycsIF8gPT4gbWVtb3J5LmNvdW50ZXIsIGJ1dHRvbih7IG9uQ2xpY2s6ICgpID0+ICsrbWVtb3J5LmNvdW50ZXIgfSwgJ2luY3JlYXNlIPCfmLsnKSksIGZpZWxkc2V0KGxlZ2VuZCgnaW5uZXIgY291bnRlcicpLCBfID0+IGlubmVyQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSksIGZpZWxkc2V0KGxlZ2VuZCgnc2hhbGxvdyBwcm9wcycpLCBfID0+IHNoYWxsb3dQcm9wQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSksIGZpZWxkc2V0KGxlZ2VuZCgnaW1tdXRhYmxlIHByb3BzJyksIF8gPT4gaW1tdXRhYmxlUHJvcENvdW50ZXJzKGltbXV0YWJsZVByb3BzKSksIGZpZWxkc2V0KGxlZ2VuZCgnbm93YXRjaCBwcm9wcycpLCBfID0+IG5vV2F0Y2hQcm9wQ291bnRlcnMoeyBwcm9wQ291bnRlciwgaW5jcmVhc2VQcm9wQ291bnRlciB9KSksIGRpdih7IHN0eWxlOiBcImZvbnQtc2l6ZTowLjhlbTtvcGFjaXR5OjAuOFwiIH0sICfijJrvuI8gcGFnZSBsb2FkIHRvIGRpc3BsYXkgaW5cXHUwMEEwJywgc3Bhbi5hdHRyKGhvc3Qub25Jbml0KChlbGVtZW50KSA9PiBlbGVtZW50LmlubmVyVGV4dCA9IChEYXRlLm5vdygpIC0gbG9hZFN0YXJ0VGltZSkudG9TdHJpbmcoKSkpKCctJyksICdtcycpLCBkaXYoeyBzdHlsZTogXCJmb250LXNpemU6MC44ZW07b3BhY2l0eTowLjhcIiB9LCAn4oya77iPIHJlYWQgaW5cXHUwMEEwJywgc3Bhbi5hdHRyKGhvc3Qub25Jbml0KChlbGVtZW50KSA9PiBlbGVtZW50LmlubmVyVGV4dCA9IChEYXRlLm5vdygpIC0gcmVhZFN0YXJ0VGltZSkudG9TdHJpbmcoKSkpKCctJyksICdtcycpLCBfID0+IHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjb3VudGVycycgfSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzOTczMjgwNzogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn5KnLXNoYWxsb3ctY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn5KnIHByb3BDb3VudGVyOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLinaTvuI/wn5KnIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn5KnLXNoYWxsb3ctZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiYm9yZGVyOjFweCBkYXNoZWQgYmxhY2s7cGFkZGluZzoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+Spy1zaGFsbG93LWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+SpyBvdGhlckNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkqcgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfkqctc2hhbGxvdy1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLinaTvuI/wn6qoLWltbXV0YWJsZS1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfqqggcHJvcENvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfqqggXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4j/CfqqgtaW1tdXRhYmxlLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfqqgtaW1tdXRhYmxlLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+qqCBvdGhlckNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfqqggXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfqqgtaW1tdXRhYmxlLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggZGFzaGVkIGJsYWNrO3BhZGRpbmc6MWVtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4j/Cfmqstbm93YXRjaC1jb3VudGVyXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfmqsgcHJvcENvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKdpO+4j/CfmqsgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIuKdpO+4j/Cfmqstbm93YXRjaC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJib3JkZXI6MXB4IGRhc2hlZCBibGFjaztwYWRkaW5nOjFlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn5qrLW5vd2F0Y2gtY291bnRlclwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5qrIG90aGVyQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+aqyBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+aqy1ub3dhdGNoLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudDpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlLCBzdGF0ZXMsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGNvbHVtbkVkaXRvciA9IHRhZygoeyBuYW1lLCBhcnJheSwgaW5jbHVkZWQsIGNvbHVtbk5hbWVzLCBhbGxDb2x1bW5OYW1lcyB9KSA9PiB7XG4gICAgbGV0IG1vdXNlT3ZlckVkaXRTaG93ID0gZmFsc2U7XG4gICAgbGV0IGVkaXQgPSBmYWxzZTtcbiAgICBsZXQgZWRpdEZvcm11bGEgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgZm9ybXVsYXMgPSBzdGF0ZShbXSk7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgbW91c2VPdmVyRWRpdFNob3csIGVkaXQsIGVkaXRGb3JtdWxhXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgbW91c2VPdmVyRWRpdFNob3csIGVkaXQsIGVkaXRGb3JtdWxhXG4gICAgfSkpO1xuICAgIGNvbnN0IGdvQWxsID0gKCkgPT4ge1xuICAgICAgICBjb2x1bW5OYW1lcy5sZW5ndGggPSAwO1xuICAgICAgICBjb2x1bW5OYW1lcy5wdXNoKC4uLmFsbENvbHVtbk5hbWVzKTtcbiAgICB9O1xuICAgIGNvbnN0IGdvT25seSA9ICgpID0+IHtcbiAgICAgICAgY29sdW1uTmFtZXMubGVuZ3RoID0gMDtcbiAgICAgICAgY29sdW1uTmFtZXMucHVzaChuYW1lKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjb2x1bW5OYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29sdW1uTmFtZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5OYW1lcy5wdXNoKG5hbWUpO1xuICAgIH1cbiAgICBjb25zdCBhZGRTdW1Gb3JtdWxhID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzdHJpbmdGb3JtdWxhID0gYFxuICAgICAgYXJyYXkucmVkdWNlKChhbGwsIGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpdGVtWycke25hbWV9J11cbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKSA/IGFsbCA6IChhbGwgKyB2YWx1ZSlcbiAgICAgIH0sIDApXG4gICAgYDtcbiAgICAgICAgZm9ybXVsYXMucHVzaCh7XG4gICAgICAgICAgICB0aXRsZTogJ3N1bScsXG4gICAgICAgICAgICBzdHJpbmdGb3JtdWxhLFxuICAgICAgICAgICAgdmFsdWU6IHNhbmRib3hSdW5FdmFsKHN0cmluZ0Zvcm11bGEsIHsgYXJyYXkgfSlcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1cGRhdGVGb3JtdWxhID0gKGZvcm11bGEsIG5ld0Zvcm11bGEpID0+IHtcbiAgICAgICAgZm9ybXVsYS5zdHJpbmdGb3JtdWxhID0gbmV3Rm9ybXVsYTtcbiAgICAgICAgZm9ybXVsYS52YWx1ZSA9IHNhbmRib3hSdW5FdmFsKG5ld0Zvcm11bGEsIHsgYXJyYXkgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzBdLCB0b2dnbGUsIGluY2x1ZGVkICYmICdjaGVja2VkJywgbmFtZSwgKCkgPT4gbW91c2VPdmVyRWRpdFNob3cgPSB0cnVlLCAoKSA9PiBtb3VzZU92ZXJFZGl0U2hvdyA9IGZhbHNlLCAoZWRpdCB8fCBtb3VzZU92ZXJFZGl0U2hvdykgPyAndmlzaWJsZScgOiAnaGlkZGVuJywgKCkgPT4gZWRpdCA9ICFlZGl0LCBpbmNsdWRlZCAmJiBjb2x1bW5OYW1lcy5sZW5ndGggIT09IGFsbENvbHVtbk5hbWVzLmxlbmd0aCA/IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQzMTY5MVsxXSwgZ29BbGwpIDogaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzJdLCBnb09ubHkpLCBlZGl0ICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQzMTY5MVszXSwgZWRpdEZvcm11bGEgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDMxNjkxWzRdLCAoZXZ0KSA9PiB1cGRhdGVGb3JtdWxhKGVkaXRGb3JtdWxhLCBldnQudGFyZ2V0LnZhbHVlKSwgZWRpdEZvcm11bGEudmFsdWUpLCBmb3JtdWxhcy5tYXAoZm9ybXVsYSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0MzE2OTFbNV0sIGZvcm11bGEudGl0bGUsICgpID0+IGVkaXRGb3JtdWxhID0gZm9ybXVsYSwgZm9ybXVsYS52YWx1ZSkua2V5KGZvcm11bGEpKSwgYWRkU3VtRm9ybXVsYSkpO1xufSk7XG5mdW5jdGlvbiBzYW5kYm94UnVuRXZhbChzdHJpbmdGb3JtdWxhLCBjb250ZXh0ID0ge30pIHtcbiAgICByZXR1cm4gc2FuZGJveEV2YWwoc3RyaW5nRm9ybXVsYSwgeyBpc05hTiwgTWF0aCwgTnVtYmVyLCBEYXRlLCAuLi5jb250ZXh0IH0pO1xufVxuLy8gZXhlY3V0ZSBzY3JpcHQgaW4gcHJpdmF0ZSBjb250ZXh0XG5mdW5jdGlvbiBzYW5kYm94RXZhbChzcmMsIGN0eCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICAgIHJldHVybiBzcmM7XG4gICAgfVxuICAgIGN0eCA9IG5ldyBQcm94eShjdHgsIHsgaGFzOiAoKSA9PiB0cnVlIH0pO1xuICAgIGxldCBmdW5jID0gKG5ldyBGdW5jdGlvbihcIndpdGgodGhpcykgeyByZXR1cm4gKFwiICsgc3JjICsgXCIpfVwiKSk7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjdHgpO1xufVxuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQzMTY5MTogW1t7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY3Vyc29yOnBvaW50ZXI7XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAxIH1dXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDtcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJtb3VzZW92ZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF0sIFtcIm1vdXNlb3V0XCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZS52aXNpYmlsaXR5XCIsIHsgXCJ0YWdKc1ZhclwiOiA1IH0sIFwic3R5bGVcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4pqZ77iPJm5ic3A7XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY29sb3I6Ymx1ZTtcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWxsXCIgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiY29sb3I6Ymx1ZTtcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwib25seVwiIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJTtwYWRkaW5nOjAuM2VtO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZvbnQtc2l6ZTowLjdlbTt0ZXh0LWFsaWduOmNlbnRlcjtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ29sdW1uIFNldHRpbmdzXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1bVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowLjNlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZWRpdCBmb3JtdWxhXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIuKcj++4j1wiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBhcnJheVRhYmxlID0gdGFnKCh7IGFycmF5LCBcbi8vIHNob3dMZXZlbHMsXG5zaG93QWxsLCBzaG93S2lkcywgdG9nZ2xlQ29sdW1uRGlhbG9nLCBjb2x1bW5OYW1lcywgZm9ybWF0Q2hhbmdlLCBhbGxvd01heGltaXplLCBldmVyeVNpbXBsZVZhbHVlLCB9KSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFswXSwgYXJyYXkubGVuZ3RoICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFsxXSwgY29sdW1uTmFtZXMubWFwKGtleSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxMjIxODRbMl0sIHRvZ2dsZUNvbHVtbkRpYWxvZyAmJiAncG9pbnRlcicsIHRvZ2dsZUNvbHVtbkRpYWxvZywga2V5KS5rZXkoa2V5KSkpLCBhcnJheS5tYXAocm93ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczEyMjE4NFszXSwgY29sdW1uTmFtZXMubWFwKG5hbWUgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTIyMTg0WzRdLCBkdW1wKHtcbiAgICAgICAgdmFsdWU6IHJvd1tuYW1lXSxcbiAgICAgICAgc2hvd0xldmVsczogMCxcbiAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgc2hvd0tpZHM6IHNob3dBbGwgfHwgc2hvd0tpZHMsXG4gICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgfSkpLmtleShyb3dbbmFtZV0pKSkua2V5KHJvdykpKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczEyMjE4NDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IHRhYmxlIC0tPjwhLS0gb3ZlcmZsb3cteTogc2Nyb2xsOyAtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXgtaGVpZ2h0OiA4MDBweDttYXgtd2lkdGg6MTAwdnc7b3ZlcmZsb3c6IHNjcm9sbDtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0YWJsZVwiLCBcImF0XCI6IFtbXCJjZWxscGFkZGluZ1wiLCBcIjJcIl0sIFtcImNlbGxzcGFjaW5nXCIsIFwiMlwiXSwgW1wiYm9yZGVyXCIsIFwiMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGJvZHlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcInRoZWFkXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicG9zaXRpb246IHN0aWNreTt0b3A6IDA7Zm9udC1zaXplOiAwLjhlbTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0clwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwidGhcIiwgXCJhdFwiOiBbW1wic3R5bGUuY3Vyc29yXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIFwic3R5bGVcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcInRyXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBhcnJheURpc3BsYXkgPSB0YWcoKHsgYXJyYXksIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLCBjb2x1bW5OYW1lcywgZm9ybWF0Q2hhbmdlLCB0b2dnbGVDb2x1bW5EaWFsb2csIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTUyMTI3WzBdLCBhcnJheS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1WYWx1ZUtleXMoaXRlbSwgY29sdW1uTmFtZXMpO1xuICAgICAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTUyMTI3WzFdLCBkdW1wKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgc2hvd0xldmVscyxcbiAgICAgICAgICAgIHNob3dBbGwsXG4gICAgICAgICAgICBzaG93S2lkczogdHJ1ZSwgLy8gc2hvd0FsbCB8fCBzaG93S2lkcyxcbiAgICAgICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICAgICAgb25IZWFkZXJDbGljazogdG9nZ2xlQ29sdW1uRGlhbG9nLFxuICAgICAgICAgICAgYWxsb3dNYXhpbWl6ZSxcbiAgICAgICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgICAgIH0pKS5rZXkoaW5kZXgpO1xuICAgIH0pKTtcbn0pO1xuZnVuY3Rpb24gcGFyYW1WYWx1ZUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSkge1xuICAgIGlmIChbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddLmluY2x1ZGVzKHR5cGVvZiAoaW5wdXRPYmplY3QpKSkge1xuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0T2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJPYmplY3RCeUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSk7XG59XG5mdW5jdGlvbiBmaWx0ZXJPYmplY3RCeUtleXMoaW5wdXRPYmplY3QsIGtleXNBcnJheSkge1xuICAgIGlmICgha2V5c0FycmF5KSB7XG4gICAgICAgIC8vIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKGlucHV0T2JqZWN0KVxuICAgICAgICAvLyByZXR1cm4gey4uLmlucHV0T2JqZWN0fSAvLyBtdXN0IGJlIGNsb25lIHNvIHVuY2hlY2tpbmcgaXRlbXMgZG9lcyBub3QgY2hhbmdlIG9yaWdpbmFsIG9iamVjdFxuICAgICAgICByZXR1cm4gaW5wdXRPYmplY3Q7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlcmVkT2JqZWN0ID0ge307XG4gICAga2V5c0FycmF5LmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGlucHV0T2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgfHwga2V5IGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBmaWx0ZXJlZE9iamVjdFtrZXldID0gaW5wdXRPYmplY3Rba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZE9iamVjdDtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MxNTIxMjc6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV1dIH07XG4iLCJpbXBvcnQgeyBjb2x1bW5FZGl0b3IgfSBmcm9tIFwiLi9jb2x1bW5FZGl0b3IuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBodG1sLCBzdGF0ZSwgc3RhdGVzLCB0YWcsIHdhdGNoIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBhcnJheVRhYmxlIH0gZnJvbSBcIi4vYXJyYXlUYWJsZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IGFycmF5RGlzcGxheSB9IGZyb20gXCIuL2FycmF5RGlzcGxheS50YWdcIjtcbmV4cG9ydCBjb25zdCBhcnJheXNEaXNwbGF5ID0gdGFnKCh7IHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLCBhcnJheSwgYXJyYXlWaWV3LCBmb3JtYXRDaGFuZ2UsIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICAvLyB1c2VkIHRvIGRpc3BsYXkgbGlzdCBvZiBhbGwgcG9zc2libGUgY29sdW1uc1xuICAgIGNvbnN0IGFsbENvbHVtbk5hbWVzID0gd2F0Y2goW2FycmF5LCBhcnJheS5sZW5ndGhdLCAoKSA9PiBhcnJheS5sZW5ndGggPyBnZXRBbGxLZXlzKGFycmF5KSA6IFtdKTtcbiAgICAvLyBhbiBlZGl0YWJsZSBsaXN0IG9mIGNvbHVtbiBuYW1lc1xuICAgIGxldCBjb2x1bW5OYW1lcyA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBkZWZhdWx0Q29sdW1uTmFtZXMgPSB3YXRjaChbYWxsQ29sdW1uTmFtZXNdLCAoKSA9PiBbLi4uYWxsQ29sdW1uTmFtZXNdKTtcbiAgICBsZXQgc2hvd0NvbHVtbkRpYWxvZyA9IGZhbHNlO1xuICAgIGNvbnN0IHVuaXF1ZUlkID0gc3RhdGUoKCkgPT4gJ2NvbHVtbkRpYWxvZycgKyBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgc3RhdGVzKGdldCA9PiBbeyBjb2x1bW5OYW1lcywgc2hvd0NvbHVtbkRpYWxvZyB9XSA9IGdldCh7IGNvbHVtbk5hbWVzLCBzaG93Q29sdW1uRGlhbG9nIH0pKTtcbiAgICB3YXRjaC5ub0luaXQoW2RlZmF1bHRDb2x1bW5OYW1lcy5sZW5ndGhdLCAoKSA9PiB7XG4gICAgICAgIGlmICghY29sdW1uTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbHVtbk5hbWVzID0gZGVmYXVsdENvbHVtbk5hbWVzO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgdG9nZ2xlQ29sdW1uRGlhbG9nID0gKCkgPT4ge1xuICAgICAgICBzaG93Q29sdW1uRGlhbG9nID0gIXNob3dDb2x1bW5EaWFsb2c7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh1bmlxdWVJZCk7XG4gICAgICAgIGlmIChzaG93Q29sdW1uRGlhbG9nKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5jbG9zZSgpOyAvLyA8LSBlbGVtZW50IGhhcyBvbmNsb3NlIGV2ZW50IHRoYXQgaXMgY2FsbGVkIHNsb3dcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgYXJyYXlUYWcgPSBhcnJheVZpZXcgPT09ICd0YWJsZScgPyBhcnJheVRhYmxlKHtcbiAgICAgICAgc2hvd0FsbCwgc2hvd0tpZHMsXG4gICAgICAgIGFycmF5LCB0b2dnbGVDb2x1bW5EaWFsb2csXG4gICAgICAgIGNvbHVtbk5hbWVzOiBjb2x1bW5OYW1lcyB8fCBhbGxDb2x1bW5OYW1lcyxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLCBldmVyeVNpbXBsZVZhbHVlLFxuICAgIH0pIDogYXJyYXlEaXNwbGF5KHtcbiAgICAgICAgYXJyYXksIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGNvbHVtbk5hbWVzOiBjb2x1bW5OYW1lcyB8fCBhbGxDb2x1bW5OYW1lcyxcbiAgICAgICAgdG9nZ2xlQ29sdW1uRGlhbG9nLFxuICAgICAgICBhbGxvd01heGltaXplLCBldmVyeVNpbXBsZVZhbHVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ2MzE3MVswXSwgYXJyYXlUYWcsIHVuaXF1ZUlkLCBhbGxDb2x1bW5OYW1lcy5tYXAobmFtZSA9PiB7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVkID0gY29sdW1uTmFtZXMgPT09IHVuZGVmaW5lZCB8fCBjb2x1bW5OYW1lcy5pbmNsdWRlcyhuYW1lKTtcbiAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ2MzE3MVsxXSwgY29sdW1uRWRpdG9yKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgIGluY2x1ZGVkLFxuICAgICAgICAgICAgY29sdW1uTmFtZXM6IGNvbHVtbk5hbWVzIHx8IGRlZmF1bHRDb2x1bW5OYW1lcyxcbiAgICAgICAgICAgIGFsbENvbHVtbk5hbWVzLFxuICAgICAgICB9KSkua2V5KG5hbWUpO1xuICAgIH0pLCB0b2dnbGVDb2x1bW5EaWFsb2cpO1xufSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsS2V5cyhhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoKGFsbCwgeCkgPT4ge1xuICAgICAgICBpZiAoeCAmJiB0eXBlb2YgKHgpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmtleXMoeCkuZm9yRWFjaCgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhbGwuaW5jbHVkZXMoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBhbHJlYWR5IGhhdmUgaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWxsLnB1c2goeCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH0sIFtdKTtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M0NjMxNzE6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiZGlhbG9nXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowXCJdLCBbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJkdW1wLWRpYWxvZ1wiXSwgW1wibW91c2Vkb3duXCIsIFwidmFyIHIgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyhyLnRvcDw9ZXZlbnQuY2xpZW50WSYmZXZlbnQuY2xpZW50WTw9ci50b3Arci5oZWlnaHQmJnIubGVmdDw9ZXZlbnQuY2xpZW50WCYmZXZlbnQuY2xpZW50WDw9ci5sZWZ0K3Iud2lkdGgpIHx8IHRoaXMuY2xvc2UoKVwiXSwgW1wiZHJhZ3N0YXJ0XCIsIFwiY29uc3Qge2UsZHQsdH0gPSB7dDp0aGlzLGU6ZXZlbnQsZHQ6ZXZlbnQuZGF0YVRyYW5zZmVyfTtjb25zdCBkPXQuZHJhZz10LmRyYWd8fHt4OjAseTowfTtkLmluaXRYPWQueDtkLnN0YXJ0WD1ldmVudC5jbGllbnRYLXQub2Zmc2V0TGVmdDtkLnN0YXJ0WT1ldmVudC5jbGllbnRZLXQub2Zmc2V0VG9wO3Qub25kcmFnb3Zlcj1lLnRhcmdldC5vbmRyYWdvdmVyPShlKT0+ZS5wcmV2ZW50RGVmYXVsdCgpO2R0LmVmZmVjdEFsbG93ZWQ9J21vdmUnO2R0LmRyb3BFZmZlY3Q9J21vdmUnXCJdLCBbXCJkcmFnXCIsIFwiY29uc3Qge3QsZSxkdCxkfT17ZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXIsZDp0aGlzLmRyYWd9OyBpZihlLmNsaWVudFg9PT0wKSByZXR1cm47ZC54ID0gZC54ICsgZS5vZmZzZXRYIC0gZC5zdGFydFg7IGQueSA9IGQueSArIGUub2Zmc2V0WSAtIGQuc3RhcnRZOyB0aGlzLnN0eWxlLmxlZnQgPSBkLnggKyAncHgnOyB0aGlzLnN0eWxlLnRvcCA9IGQueSsncHgnO1wiXSwgW1wiZHJhZ2VuZFwiLCBcImNvbnN0IHt0LGUsZH09e3Q6dGhpcyxlOmV2ZW50LGQ6dGhpcy5kcmFnfTtpZiAoZC5pbml0WCA9PT0gZC54KSB7ZC54PWQueCtlLm9mZnNldFgtKGQuc3RhcnRYLWQueCk7ZC55PWQueStlLm9mZnNldFktKGQuc3RhcnRZLWQueSk7dGhpcy5zdHlsZS50cmFuc2Zvcm09dHJhbnNsYXRlM2QoZC54KydweCcsIGQueSsncHgnLCAwKX07dGhpcy5kcmFnZ2FibGU9ZmFsc2VcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtO2JhY2tncm91bmQtY29sb3I6IzY2Njtjb2xvcjp3aGl0ZTtcIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNvbHVtbiBNb2RpZmllclwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCVcIl0sIFtcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+FpyBjbG9zZVwiIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtmbGV4LXdyYXA6d3JhcFwiXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy13YXJuaW5nXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGFycmF5c0Rpc3BsYXkgfSBmcm9tIFwiLi9hcnJheXNEaXNwbGF5LmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgaHRtbCwgbGV0UHJvcCwgc3RhdGUsIHN0YXRlcywgdGFnLCB3YXRjaCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGR1bXBBcnJheSA9IHRhZygoeyAvLyBkdW1wQXJyYXlcbmtleSwgdmFsdWUsIHNob3csIHNob3dBbGwsIHNob3dLaWRzLCBcbi8vIGFycmF5VmlldyxcbnNob3dMZXZlbHMsIGZvcm1hdENoYW5nZSwgYWxsb3dNYXhpbWl6ZSwgZXZlcnlTaW1wbGVWYWx1ZSwgfSkgPT4ge1xuICAgIGxldCBzaG93TG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGFycmF5VmlldyA9IHVuZGVmaW5lZDtcbiAgICBsZXQgbWF4aW1pemUgPSBmYWxzZTtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IHNob3dMb3dlciwgYXJyYXlWaWV3LCBtYXhpbWl6ZSB9XSA9IGdldCh7IHNob3dMb3dlciwgYXJyYXlWaWV3LCBtYXhpbWl6ZSB9KSk7XG4gICAgbGV0UHJvcChnZXQgPT4gW3Nob3dLaWRzXSA9IGdldChzaG93S2lkcykpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93QWxsXSA9IGdldChzaG93QWxsKSk7XG4gICAgd2F0Y2gubm9Jbml0KFtzaG93XSwgKFtzaG93XSkgPT4gc2hvd0xvd2VyID0gc2hvdyk7XG4gICAgd2F0Y2gubm9Jbml0KFtzaG93QWxsXSwgKFtzaG93QWxsXSkgPT4gc2hvd0xvd2VyID0gc2hvd0FsbCk7XG4gICAgY29uc3QgbWF4aW1pemVJZCA9IHN0YXRlKCgpID0+ICdtYXhpbWl6ZS1kdW1wLScgKyBwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgY29uc3QgdG9nZ2xlTWF4aW1pemUgPSAoKSA9PiB7XG4gICAgICAgIG1heGltaXplID0gIW1heGltaXplO1xuICAgICAgICBpZiAobWF4aW1pemUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1heGltaXplSWQpLnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtaW5pbWl6ZSA9ICgpID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1heGltaXplSWQpLmNsb3NlKCk7XG4gICAgY29uc3QgZHVtcEJvZHkgPSAoc2hvd0FsbCB8fCBzaG93TG93ZXIgfHwgc2hvd0tpZHMgfHwgKHNob3dMb3dlciA9PSB1bmRlZmluZWQgJiYgc2hvd0xldmVscyA+IDApKTtcbiAgICBjb25zdCBnZXRIZWFkZXIgPSAoYWxsb3dNYXhpbWl6ZSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc5MzcwWzBdLCAoKSA9PiB7XG4gICAgICAgIGlmIChzaG93TG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dBbGwgPSBzaG93S2lkcyA9IHNob3dMb3dlciA9ICFkdW1wQm9keTtcbiAgICAgICAgfVxuICAgICAgICBzaG93QWxsID0gc2hvd0tpZHMgPSBzaG93TG93ZXIgPSAhc2hvd0xvd2VyO1xuICAgIH0sIGtleSwgYXJyYXlWaWV3ID09PSAndGFibGUnID8gJ2JvbGQnIDogJycsICgpID0+IGFycmF5VmlldyA9IGFycmF5VmlldyA9PT0gJ3RhYmxlJyA/IHVuZGVmaW5lZCA6ICd0YWJsZScsIGFycmF5VmlldyA9PT0gJ3RhYmxlJyA/ICdmbGV4JyA6ICd0YWJsZScsIHZhbHVlLmxlbmd0aCwgYWxsb3dNYXhpbWl6ZSAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NzkzNzBbMV0sIHRvZ2dsZU1heGltaXplKSk7XG4gICAgY29uc3QgZGlzcGxheU9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dMZXZlbHMsIHNob3dBbGwsIHNob3dLaWRzLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIGFycmF5OiB2YWx1ZSxcbiAgICAgICAgYXJyYXlWaWV3OiBhcnJheVZpZXcsXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgfTtcbiAgICBjb25zdCBnZXRCb2R5ID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc5MzcwWzJdLCBhcnJheXNEaXNwbGF5KGRpc3BsYXlPcHRpb25zKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3OTM3MFszXSwgZ2V0SGVhZGVyKGFsbG93TWF4aW1pemUpLCBkdW1wQm9keSAmJiBnZXRCb2R5KCksIG1heGltaXplSWQsIG1heGltaXplICYmIGdldEhlYWRlcihmYWxzZSksIG1heGltaXplICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3OTM3MFs0XSwgYXJyYXlzRGlzcGxheSh7IC4uLmRpc3BsYXlPcHRpb25zLCBhbGxvd01heGltaXplOiBmYWxzZSB9KSksIG1pbmltaXplKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczQ3OTM3MDogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1hcnJheS1sYWJlbFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJzdXBcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJvcGFjaXR5OjgwJTtmb250LXNpemU6NzUlO3BhZGRpbmctbGVmdDowLjRlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO1wiXSwgW1wic3R5bGUuZm9udC13ZWlnaHRcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJzdHlsZVwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dIH0sIHsgXCJublwiOiBcInN1cFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6ODAlO2ZvbnQtc2l6ZTo3NSU7cGFkZGluZy1sZWZ0OjAuNGVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiW1wiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgICZuYnNwO1wiIH0sIHsgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTBweDtoZWlnaHQ6MTBweDtib3JkZXI6MXB4IHNvbGlkIHdoaXRlO2JvcmRlci10b3Atd2lkdGg6M3B4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO1wiXV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IGRpc3BsYXlzIHdyYXAgLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidGFnZ2VkanMtYXJyYXktYm9keVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGFycmF5IC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLWFycmF5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBtYXhpbWl6ZSAtLT5cIiB9LCB7IFwibm5cIjogXCJkaWFsb2dcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOjBcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcImR1bXAtZGlhbG9nXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJ2YXIgciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7KHIudG9wPD1ldmVudC5jbGllbnRZJiZldmVudC5jbGllbnRZPD1yLnRvcCtyLmhlaWdodCYmci5sZWZ0PD1ldmVudC5jbGllbnRYJiZldmVudC5jbGllbnRYPD1yLmxlZnQrci53aWR0aCkgfHwgdGhpcy5jbG9zZSgpXCJdLCBbXCJkcmFnc3RhcnRcIiwgXCJjb25zdCB7ZSxkdCx0fSA9IHt0OnRoaXMsZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXJ9O2NvbnN0IGQ9dC5kcmFnPXQuZHJhZ3x8e3g6MCx5OjB9O2QuaW5pdFg9ZC54O2Quc3RhcnRYPWV2ZW50LmNsaWVudFgtdC5vZmZzZXRMZWZ0O2Quc3RhcnRZPWV2ZW50LmNsaWVudFktdC5vZmZzZXRUb3A7dC5vbmRyYWdvdmVyPWUudGFyZ2V0Lm9uZHJhZ292ZXI9KGUpPT5lLnByZXZlbnREZWZhdWx0KCk7ZHQuZWZmZWN0QWxsb3dlZD0nbW92ZSc7ZHQuZHJvcEVmZmVjdD0nbW92ZSdcIl0sIFtcImRyYWdcIiwgXCJjb25zdCB7dCxlLGR0LGR9PXtlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2ZlcixkOnRoaXMuZHJhZ307IGlmKGUuY2xpZW50WD09PTApIHJldHVybjtkLnggPSBkLnggKyBlLm9mZnNldFggLSBkLnN0YXJ0WDsgZC55ID0gZC55ICsgZS5vZmZzZXRZIC0gZC5zdGFydFk7IHRoaXMuc3R5bGUubGVmdCA9IGQueCArICdweCc7IHRoaXMuc3R5bGUudG9wID0gZC55KydweCc7XCJdLCBbXCJkcmFnZW5kXCIsIFwiY29uc3Qge3QsZSxkfT17dDp0aGlzLGU6ZXZlbnQsZDp0aGlzLmRyYWd9O2lmIChkLmluaXRYID09PSBkLngpIHtkLng9ZC54K2Uub2Zmc2V0WC0oZC5zdGFydFgtZC54KTtkLnk9ZC55K2Uub2Zmc2V0WS0oZC5zdGFydFktZC55KTt0aGlzLnN0eWxlLnRyYW5zZm9ybT10cmFuc2xhdGUzZChkLngrJ3B4JywgZC55KydweCcsIDApfTt0aGlzLmRyYWdnYWJsZT1mYWxzZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJVwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlIGFycmF5XCIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ0ZXh0LWFsaWduOmxlZnQ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO21hcmdpbjowLjJlbTtnYXA6MC4yZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dXSB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGNvcHlUZXh0KHRleHQpIHtcbiAgICB2YXIgY29weVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGNvcHlUZXh0LnZhbHVlID0gdGV4dDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvcHlUZXh0KTtcbiAgICBjb3B5VGV4dC5zZWxlY3QoKTtcbiAgICBjb3B5VGV4dC5zZXRTZWxlY3Rpb25SYW5nZSgwLCA5OTk5OSk7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29weVRleHQpO1xufVxuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGNvcHlUZXh0IH0gZnJvbSBcIi4vY29weVRleHQuZnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBkdW1wU2ltcGxlKHsga2V5LCB2YWx1ZSwgb25IZWFkZXJDbGljaywgZXZlcnlTaW1wbGVWYWx1ZSB9KSB7XG4gICAgY29uc3QgaXNMaW5rVmFsdWUgPSB2YWx1ZS5zZWFyY2ggJiYgKHZhbHVlLnNsaWNlKDAsIDgpID09PSAnaHR0cHM6Ly8nIHx8IHZhbHVlLnNsaWNlKDAsIDcpID09PSAnaHR0cDovLycpO1xuICAgIC8vIGNvbnN0IHJlc3VsdCA9IGV2ZXJ5U2ltcGxlVmFsdWUgJiYgZXZlcnlTaW1wbGVWYWx1ZSh2YWx1ZSwga2V5KVxuICAgIGxldCBkaXNwbGF5VmFsdWU7XG4gICAgaWYgKGV2ZXJ5U2ltcGxlVmFsdWUpIHtcbiAgICAgICAgZGlzcGxheVZhbHVlID0gc2ltcGxlVmFsdWUoeyB2YWx1ZSwgZXZlcnlTaW1wbGVWYWx1ZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRpc3BsYXlWYWx1ZSA9IGlzTGlua1ZhbHVlID8gbGlua1ZhbHVlKHZhbHVlKSA6IHNpbXBsZVZhbHVlKHsgdmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMF0sIGtleSAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMV0sIG9uSGVhZGVyQ2xpY2sgJiYgXCJwb2ludGVyXCIsIG9uSGVhZGVyQ2xpY2ssIGtleSksIGRpc3BsYXlWYWx1ZSk7XG59XG5jb25zdCBzaW1wbGVWYWx1ZSA9IHRhZygoeyB2YWx1ZSwgZXZlcnlTaW1wbGVWYWx1ZSB9KSA9PiB7XG4gICAgY29uc3QgaXNMaWtlTnVsbCA9IFt1bmRlZmluZWQsIG51bGwsICdudWxsJ10uaW5jbHVkZXModmFsdWUpO1xuICAgIGNvbnN0IG51bWJlciA9IHZhbHVlO1xuICAgIGNvbnN0IGlzTGFyZ2VOdW1iZXIgPSAhaXNOYU4obnVtYmVyKSAmJiBudW1iZXIgPiAxMDAwMDAwMDAwO1xuICAgIGNvbnN0IHRpdGxlID0gIWlzTGFyZ2VOdW1iZXIgPyAnJyA6IGdldExhcmdlTnVtYmVyVGl0bGUobnVtYmVyKTtcbiAgICBsZXQgZG93blRpbWUgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW2Rvd25UaW1lXSA9IGdldChkb3duVGltZSkpO1xuICAgIGNvbnN0IHN0YXJ0TW91c2VEb3duID0gKCkgPT4ge1xuICAgICAgICBkb3duVGltZSA9IERhdGUubm93KCk7XG4gICAgfTtcbiAgICBjb25zdCBtYXJrTW91c2VVcCA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGRvd25UaW1lID4gMzAwKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gYSBtYW51YWwgZHJhZyBjb3B5IGlzIHRha2luZyBwbGFjZVxuICAgICAgICB9XG4gICAgICAgIGNvcHlUZXh0KHZhbHVlKTsgLy8gYSByZWd1bGFyIGNsaWNrIHRvb2sgcGxhY2VcbiAgICB9O1xuICAgIGxldCBkaXNwbGF5VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoZXZlcnlTaW1wbGVWYWx1ZSkge1xuICAgICAgICBkaXNwbGF5VmFsdWUgPSBldmVyeVNpbXBsZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgZGlzcGxheVZhbHVlID0gZGlzcGxheVZhbHVlID09PSBudWxsICYmICdudWxsJyB8fCBkaXNwbGF5VmFsdWUgPT09IGZhbHNlICYmICdmYWxzZScgfHwgZGlzcGxheVZhbHVlID09PSB1bmRlZmluZWQgJiYgJ3VuZGVmaW5lZCcgfHwgZGlzcGxheVZhbHVlO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MyNDY5NzhbMl0sIHN0YXJ0TW91c2VEb3duLCBtYXJrTW91c2VVcCwgaXNMaWtlTnVsbCA/ICdyZ2JhKDAsMCwwLC41KScgOiAnJywgKHZhbHVlID09PSB0cnVlICYmICcjMjhhNTRjJykgfHxcbiAgICAgICAgKHZhbHVlID09PSBmYWxzZSAmJiAnI2U0MjExMicpIHx8XG4gICAgICAgIGlzTGlrZU51bGwgJiYgJ3doaXRlJyB8fCAnJywgdGl0bGUsIGRpc3BsYXlWYWx1ZSk7XG59KTtcbmZ1bmN0aW9uIGdldExhcmdlTnVtYmVyVGl0bGUobnVtYmVyKSB7XG4gICAgcmV0dXJuIG51bWJlciA+IDk0NjcwMjgwMDAwMCA/XG4gICAgICAgICdNaWxsaXNlY29uZHMgPiBVbml4IGVwb2NoOlxcbicgKyAobmV3IERhdGUobnVtYmVyKS50b0xvY2FsZVN0cmluZygpKSA6XG4gICAgICAgICdTZWNvbmRzID4gVW5peCBlcG9jaDpcXG4nICsgKG5ldyBEYXRlKG51bWJlciAqIDEwMDApLnRvTG9jYWxlU3RyaW5nKCkpO1xufVxuY29uc3QgbGlua1ZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0Njk3OFszXSwgKCkgPT4gY29weVRleHQodmFsdWUpLCB2YWx1ZSwgdmFsdWUpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyNDY5Nzg6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjc1JTtmbGV4OjEgMSAxMGVtO2NvbG9yOiMxMTExMTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1zaW1wbGUtbGFiZWxcIl0sIFtcInN0eWxlLmN1cnNvclwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBcInN0eWxlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJjdXJzb3I6cG9pbnRlcjtcIl0sIFtcImNsYXNzXCIsIFwiaG92ZXItYmctd2FybmluZyBhY3RpdmUtYmctZW5lcmdpemVkXCJdLCBbXCJtb3VzZWRvd25cIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcIm1vdXNldXBcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF0sIFtcInN0eWxlLmJhY2tncm91bmQtY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgXCJzdHlsZVwiXSwgW1wic3R5bGUuY29sb3JcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgXCJzdHlsZVwiXSwgW1widGl0bGVcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dLCBbeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiaHJlZlwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1widGFyZ2V0XCIsIFwiX2JsYW5rXCJdLCBbXCJjbGFzc1wiLCBcImhvdmVyLWJnLXdhcm5pbmcgYWN0aXZlLWJnLWVuZXJnaXplZFwiXSwgW1widGl0bGVcIiwgXCJ0YXAgdG8gY29weVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBsZXRQcm9wLCBzdGF0ZSwgc3RhdGVzLCB0YWcsIHdhdGNoIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmV4cG9ydCBjb25zdCBkdW1wT2JqZWN0ID0gdGFnKCh7IC8vIGR1bXBPYmplY3RcbmtleSwgc2hvd0tpZHMsIHNob3csIHNob3dMZXZlbHMsIHZhbHVlLCBzaG93QWxsLCBvbkhlYWRlckNsaWNrLCBmb3JtYXRDaGFuZ2UsIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICBsZXQgc2hvd0xvd2VyID0gdW5kZWZpbmVkO1xuICAgIGxldCBtYXhpbWl6ZSA9IGZhbHNlO1xuICAgIGNvbnN0IG1heGltaXplSWQgPSBzdGF0ZSgoKSA9PiAnbWF4aW1pemUtZHVtcC0nICsgcGVyZm9ybWFuY2Uubm93KCkpO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvd0xvd2VyLCBtYXhpbWl6ZSB9XSA9IGdldCh7IHNob3dMb3dlciwgbWF4aW1pemUgfSkpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93S2lkc10gPSBnZXQoc2hvd0tpZHMpKTtcbiAgICB3YXRjaC5ub0luaXQoW3Nob3ddLCAoW3Nob3ddKSA9PiBzaG93TG93ZXIgPSBzaG93KTtcbiAgICB3YXRjaC5ub0luaXQoW3Nob3dBbGxdLCAoW3Nob3dBbGxdKSA9PiBzaG93TG93ZXIgPSBzaG93QWxsKTtcbiAgICBjb25zdCBjb250aW51ZUR1bXAgPSAha2V5IHx8IHNob3dLaWRzIHx8IHNob3dMb3dlciB8fCAoc2hvd0xvd2VyID09PSB1bmRlZmluZWQgJiYgc2hvd0xldmVscyA+IDApO1xuICAgIGNvbnN0IHRvZ2dsZU1heGltaXplID0gKCkgPT4ge1xuICAgICAgICBtYXhpbWl6ZSA9ICFtYXhpbWl6ZTtcbiAgICAgICAgaWYgKG1heGltaXplKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXhpbWl6ZUlkKS5zaG93TW9kYWwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbWluaW1pemUgPSAoKSA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXhpbWl6ZUlkKS5jbG9zZSgpO1xuICAgIGNvbnN0IGdldEhlYWQgPSAoYWxsb3dNYXhpbWl6ZSkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDcwMjQ0WzBdLCBzaG93TG93ZXIgPyAnYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6YmxhY2s7JyA6ICcnLCAoKSA9PiB7XG4gICAgICAgIGlmIChzaG93TG93ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3dBbGwgPSBzaG93S2lkcyA9IHNob3dMb3dlciA9ICEoc2hvd0FsbCB8fCBzaG93S2lkcyB8fCBzaG93TG93ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNob3dLaWRzID0gc2hvd0xvd2VyID0gIXNob3dMb3dlcjtcbiAgICB9LCBrZXksIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgsIGFsbG93TWF4aW1pemUgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDcwMjQ0WzFdLCB0b2dnbGVNYXhpbWl6ZSkpO1xuICAgIGNvbnN0IGdldER1bXBCb2R5ID0gKGFsbG93TWF4aW1pemUpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3MDI0NFsyXSwgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NzAyNDRbM10sICF2YWx1ZSB8fCB0eXBlb2YgKHZhbHVlKSAhPT0gJ29iamVjdCcgPyAnZmxleDogMSAxIDEwZW07JyA6ICdmbGV4LWdyb3c6MTsnLCBkdW1wKHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGtleSxcbiAgICAgICAgc2hvdzogc2hvd0xvd2VyLFxuICAgICAgICBzaG93QWxsLFxuICAgICAgICBzaG93TGV2ZWxzOiBzaG93TGV2ZWxzIC0gMSxcbiAgICAgICAgc2hvd0tpZHM6IHNob3dBbGwgfHwgc2hvd0tpZHMsXG4gICAgICAgIGlzUm9vdER1bXA6IGZhbHNlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgIGV2ZXJ5U2ltcGxlVmFsdWUsXG4gICAgfSkpLmtleShrZXkpKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczQ3MDI0NFs0XSwga2V5ICYmIGdldEhlYWQoYWxsb3dNYXhpbWl6ZSksIGNvbnRpbnVlRHVtcCAmJiBnZXREdW1wQm9keShhbGxvd01heGltaXplKSwgbWF4aW1pemVJZCwgbWF4aW1pemUgJiYgZ2V0SGVhZChmYWxzZSksIG1heGltaXplICYmIGdldER1bXBCb2R5KGZhbHNlKSwgbWluaW1pemUpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDcwMjQ0OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1vYmplY3QtbGFiZWxcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJhXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwic3VwXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwib3BhY2l0eTo4MCU7Zm9udC1zaXplOjc1JTtwYWRkaW5nLWxlZnQ6MC40ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ7XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ9XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgJm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJ3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JvcmRlcjoxcHggc29saWQgd2hpdGU7Ym9yZGVyLXRvcC13aWR0aDozcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7XCJdXSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLW9iamVjdC1ib2R5LXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSByZWN1cnNlIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJ0YWdnZWRqcy1vYmplY3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDogMSAxIDEwZW07dGV4dC1hbGlnbjpsZWZ0O1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLW9iamVjdC13cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLSBtYXhpbWl6ZSAtLT5cIiB9LCB7IFwibm5cIjogXCJkaWFsb2dcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOjBcIl0sIFtcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcImR1bXAtZGlhbG9nXCJdLCBbXCJtb3VzZWRvd25cIiwgXCJ2YXIgciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7KHIudG9wPD1ldmVudC5jbGllbnRZJiZldmVudC5jbGllbnRZPD1yLnRvcCtyLmhlaWdodCYmci5sZWZ0PD1ldmVudC5jbGllbnRYJiZldmVudC5jbGllbnRYPD1yLmxlZnQrci53aWR0aCkgfHwgdGhpcy5jbG9zZSgpXCJdLCBbXCJkcmFnc3RhcnRcIiwgXCJjb25zdCB7ZSxkdCx0fSA9IHt0OnRoaXMsZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXJ9O2NvbnN0IGQ9dC5kcmFnPXQuZHJhZ3x8e3g6MCx5OjB9O2QuaW5pdFg9ZC54O2Quc3RhcnRYPWV2ZW50LmNsaWVudFgtdC5vZmZzZXRMZWZ0O2Quc3RhcnRZPWV2ZW50LmNsaWVudFktdC5vZmZzZXRUb3A7dC5vbmRyYWdvdmVyPWUudGFyZ2V0Lm9uZHJhZ292ZXI9KGUpPT5lLnByZXZlbnREZWZhdWx0KCk7ZHQuZWZmZWN0QWxsb3dlZD0nbW92ZSc7ZHQuZHJvcEVmZmVjdD0nbW92ZSdcIl0sIFtcImRyYWdcIiwgXCJjb25zdCB7dCxlLGR0LGR9PXtlOmV2ZW50LGR0OmV2ZW50LmRhdGFUcmFuc2ZlcixkOnRoaXMuZHJhZ307IGlmKGUuY2xpZW50WD09PTApIHJldHVybjtkLnggPSBkLnggKyBlLm9mZnNldFggLSBkLnN0YXJ0WDsgZC55ID0gZC55ICsgZS5vZmZzZXRZIC0gZC5zdGFydFk7IHRoaXMuc3R5bGUubGVmdCA9IGQueCArICdweCc7IHRoaXMuc3R5bGUudG9wID0gZC55KydweCc7XCJdLCBbXCJkcmFnZW5kXCIsIFwiY29uc3Qge3QsZSxkfT17dDp0aGlzLGU6ZXZlbnQsZDp0aGlzLmRyYWd9O2lmIChkLmluaXRYID09PSBkLngpIHtkLng9ZC54K2Uub2Zmc2V0WC0oZC5zdGFydFgtZC54KTtkLnk9ZC55K2Uub2Zmc2V0WS0oZC5zdGFydFktZC55KTt0aGlzLnN0eWxlLnRyYW5zZm9ybT10cmFuc2xhdGUzZChkLngrJ3B4JywgZC55KydweCcsIDApfTt0aGlzLmRyYWdnYWJsZT1mYWxzZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6LjI1ZW1cIl0sIFtcIm1vdXNlZG93blwiLCBcInRoaXMucGFyZW50Tm9kZS5kcmFnZ2FibGU9dHJ1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6MTAwJVwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlIG9iamVjdFwiIH1dIH1dIH1dIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBjb3B5VGV4dCB9IGZyb20gXCIuL2NvcHlUZXh0LmZ1bmN0aW9uXCI7XG5leHBvcnQgY29uc3QgY29udHJvbFBhbmVsID0gdGFnKCh7IHZhbHVlLCBmb3JtYXQsIHNob3dBbGwsIGZvcm1hdENoYW5nZSwgc2hvd0FsbENoYW5nZSwgfSkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M0NDA4MzNbMF0sICFmb3JtYXQgfHwgZm9ybWF0ID09PSAnZmxleCcgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDQwODMzWzFdLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIiArXG4gICAgICAgIChzaG93QWxsID8gJ2JhY2tncm91bmQtY29sb3I6IzMzY2Q1ZjsnIDogJ2JhY2tncm91bmQtY29sb3I6IzQ0NDQ0NCcpLCAoKSA9PiBzaG93QWxsQ2hhbmdlKHNob3dBbGwgPSAhc2hvd0FsbCkpLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIiArXG4gICAgICAgICghZm9ybWF0IHx8IGZvcm1hdCA9PT0gJ2ZsZXgnID8gJ2JhY2tncm91bmQtY29sb3I6IzMzY2Q1ZjsnIDogJ2JhY2tncm91bmQtY29sb3I6IzQ0NDQ0NCcpLCAoKSA9PiBmb3JtYXRDaGFuZ2UoZm9ybWF0ID0gJ2ZsZXgnKSwgXCJtYXJnaW46MXB4O2JvcmRlci1yYWRpdXM6NXB4O2NvbG9yOndoaXRlO2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXg7cGFkZGluZy1sZWZ0OjAuMmVtO3BhZGRpbmctcmlnaHQ6MC4yZW07XCIgK1xuICAgICAgICAoZm9ybWF0ID09PSAnanNvbicgPyAnYmFja2dyb3VuZC1jb2xvcjojMzNjZDVmOycgOiAnYmFja2dyb3VuZC1jb2xvcjojNDQ0NDQ0JyksICgpID0+IGZvcm1hdENoYW5nZShmb3JtYXQgPSAnanNvbicpLCAoKSA9PiBjb3B5QXNKc29uVGV4dCh2YWx1ZSkpO1xufSk7XG5mdW5jdGlvbiBjb3B5QXNKc29uVGV4dCh2YWx1ZSkge1xuICAgIGNvbnN0IHRleHQgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMik7XG4gICAgY29weVRleHQodGV4dCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDQwODMzOiBbW3sgXCJublwiOiBcInN0eWxlXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRpYWxvZy5kdW1wLWRpYWxvZzo6YmFja2Ryb3Age1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjcpOyAvKiBTZXQgYSBzZW1pLXRyYW5zcGFyZW50IGJsYWNrIGJhY2tncm91bmQgKi9cXG4gICAgICB9XFxuXFxuICAgICAgLmNoaWxkLW1hcmdpbi14eHMge21hcmdpbjowLjJlbTt9XFxuICAgICAgXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLmhvdmVyLWJnLXdhcm5pbmc6aG92ZXIge2JhY2tncm91bmQtY29sb3I6I2ZjZjhlM31cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuaG92ZXItYmctYmFsYW5jZWQ6aG92ZXIge2JhY2tncm91bmQtY29sb3I6IzMzY2Q1Zn1cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuYWN0aXZlLWJnLWVuZXJnaXplZDphY3RpdmUge2JhY2tncm91bmQtY29sb3I6I2ZmYzkwMH1cXG4gICAgICAudGFnZ2VkanMtZHVtcCAuYmctZGFyayB7YmFja2dyb3VuZC1jb2xvcjojNDQ0NDQ0fVxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC5iZy1iYWxhbmNlZCB7YmFja2dyb3VuZC1jb2xvcjojMzNjZDVmfVxcbiAgICAgIFxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1vYmplY3Qge21hcmdpbjowLjJlbTtwYWRkaW5nOjAuMmVtO292ZXJmbG93OmF1dG87ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO31cXG4gICAgICAudGFnZ2VkanMtZHVtcCAudGFnZ2VkanMtb2JqZWN0LWxhYmVsIHtcXG4gICAgICAgIHBhZGRpbmc6MC4yZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZvbnQtc2l6ZTo2NSU7Y29sb3I6d2hpdGU7XFxuICAgICAgICBib3JkZXItY29sb3I6d2hpdGU7ZmxleC1ncm93OjE7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzODdlZjU7XFxuICAgICAgfVxcblxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1zaW1wbGUtbGFiZWwge1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDoxcHg7Ym9yZGVyLWJvdHRvbS1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6YmxhY2s7Zm9udC1zaXplOjY1JTtib3JkZXItY29sb3I6d2hpdGU7bGluZS1oZWlnaHQ6IDk1JTtmb250LXdlaWdodDpib2xkO1xcbiAgICAgIH1cXG5cXG4gICAgICAudGFnZ2VkanMtZHVtcCAudGFnZ2VkanMtb2JqZWN0LWJvZHktd3JhcCB7XFxuICAgICAgICBkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXBcXG4gICAgICB9XFxuXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLW9iamVjdC13cmFwIHtcXG4gICAgICAgIGZvbnQtc2l6ZTo5MCU7Y29sb3I6IzExMTExMTtiYWNrZ3JvdW5kLWNvbG9yOiNkOWVkZjc7Ym9yZGVyOjFweCBzb2xpZCBibGFjaztib3JkZXItcmFkaXVzOjVweDtmbGV4LWRpcmVjdGlvbjogY29sdW1uO2Rpc3BsYXk6ZmxleDtcXG4gICAgICB9XFxuICAgICAgXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLWFycmF5LWxhYmVsIHtcXG4gICAgICAgIHBhZGRpbmc6MC4yZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZsZXgtZ3JvdzoxO2ZvbnQtc2l6ZTo2NSU7Ym9yZGVyLWNvbG9yOndoaXRlO2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6I2VmNDczYTtcXG4gICAgICB9XFxuXFxuICAgICAgLnRhZ2dlZGpzLWR1bXAgLnRhZ2dlZGpzLWFycmF5LWJvZHkge1xcbiAgICAgICAgdGV4dC1hbGlnbjpsZWZ0O2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDttYXJnaW46MC4yZW07Z2FwOjAuMmVtXFxuICAgICAgfVxcbiAgICAgIFxcbiAgICAgIC50YWdnZWRqcy1kdW1wIC50YWdnZWRqcy1hcnJheS13cmFwIHtcXG4gICAgICAgIGNvbG9yOiMxMTExMTE7YmFja2dyb3VuZC1jb2xvcjojZjJkZWRlO2JvcmRlcjoxcHggc29saWQgYmxhY2s7Ym9yZGVyLXJhZGl1czo1cHg7ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtkaXNwbGF5OmZsZXhcXG4gICAgICB9XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwid2lkdGg6IDEwMCU7bGluZS1oZWlnaHQ6IDkwJTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwb3NpdGlvbjpyZWxhdGl2ZTtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7Zm9udC1zaXplOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTE4cHg7cmlnaHQ6LTZweFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy1iYWxhbmNlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJmbGV4XCIgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXSwgW1wiY2xhc3NcIiwgXCJob3Zlci1iZy1iYWxhbmNlZFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJqc29uXCIgfV0gfSwgeyBcIm5uXCI6IFwiYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbjoxcHg7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6d2hpdGU7YWxpZ24taXRlbXM6Y2VudGVyO2Rpc3BsYXk6ZmxleDtwYWRkaW5nLWxlZnQ6MC4yZW07cGFkZGluZy1yaWdodDowLjJlbTtcIl0sIFtcImNsYXNzXCIsIFwiYmctZGFyayBob3Zlci1iZy1iYWxhbmNlZCBhY3RpdmUtYmctZW5lcmdpemVkXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvcHlcIiB9XSB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcImNsYXNzXCIsIFwiaG92ZXItYmctYmFsYW5jZWRcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJ0aXRsZVwiLCBcImhpZGUvc2hvdyBhbGwgc3ViIG9iamVjdHNcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GBXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBvbkluaXQsIHRhZywgbGV0UHJvcCwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wQXJyYXkgfSBmcm9tIFwiLi9kdW1wQXJyYXkudGFnXCI7XG5pbXBvcnQgeyBkdW1wU2ltcGxlIH0gZnJvbSBcIi4vZHVtcFNpbXBsZS50YWdcIjtcbmltcG9ydCB7IGR1bXBPYmplY3QgfSBmcm9tIFwiLi9kdW1wT2JqZWN0LnRhZ1wiO1xuaW1wb3J0IHsgY29udHJvbFBhbmVsIH0gZnJvbSBcIi4vY29udHJvbFBhbmVsLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IGR1bXAgPSB0YWcoKHsgLy8gZHVtcCB0YWdcbmtleSwgdmFsdWUsIHNob3dLaWRzID0gZmFsc2UsIHNob3dMZXZlbHMgPSAtMSwgc2hvd0FsbCA9IGZhbHNlLCBmb3JtYXQgPSAnZmxleCcsIGZvcm1hdENoYW5nZSA9IHggPT4gZm9ybWF0ID0geCwgaXNSb290RHVtcCA9IHRydWUsIG9uSGVhZGVyQ2xpY2ssIGFsbG93TWF4aW1pemUsIGV2ZXJ5U2ltcGxlVmFsdWUsIH0pID0+IHtcbiAgICBpZiAoaXNSb290RHVtcCAmJiBhbGxvd01heGltaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsb3dNYXhpbWl6ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGlzT2JqZWN0ID0gKCkgPT4gdmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBPYmplY3Q7XG4gICAgY29uc3QgdHlwaW5nID0gdmFsdWUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgKHZhbHVlKTtcbiAgICBsZXQgc2hvdyA9IGZhbHNlO1xuICAgIGxldFByb3AoZ2V0ID0+IFtmb3JtYXRdID0gZ2V0KGZvcm1hdCkpO1xuICAgIGxldFByb3AoZ2V0ID0+IFtzaG93QWxsXSA9IGdldChzaG93QWxsKSk7XG4gICAgbGV0UHJvcChnZXQgPT4gW3Nob3dMZXZlbHNdID0gZ2V0KHNob3dMZXZlbHMpKTtcbiAgICBsZXQgYXJyYXlWaWV3ID0gdW5kZWZpbmVkO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvdywgYXJyYXlWaWV3IH1dID0gZ2V0KHsgc2hvdywgYXJyYXlWaWV3IH0pKTtcbiAgICBvbkluaXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBsZXZlbHNEZWZpbmVkID0gKHNob3dMZXZlbHMgPj0gMCAmJiBzaG93TGV2ZWxzKTtcbiAgICAgICAgLy8gZGV0ZWN0IGF1dG8gbGV2ZWxzIChkZWZhdWx0KSBhbmQgaWYgb2JqZWN0IGxldHMgb25seSBzaG93IDIgbGV2ZWxzIGRlZXBcbiAgICAgICAgY29uc3QgYXV0b1Nob3dPYmplY3RMZXZlbHMgPSBzaG93TGV2ZWxzID09PSAtMSAmJiAha2V5ICYmIGlzT2JqZWN0KCk7XG4gICAgICAgIHNob3dMZXZlbHMgPSBsZXZlbHNEZWZpbmVkIHx8IChhdXRvU2hvd09iamVjdExldmVscyA/IDIgOiAwKTtcbiAgICAgICAgaWYgKHNob3dMZXZlbHMgPiAwKSB7XG4gICAgICAgICAgICBzaG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qIElGIDE6IHVuZGVmaW5lZCBFTFNFIGdvdG8gc2ltcGxlVGVtcGxhdGUgKi9cbiAgICBpZiAoW251bGwsIHVuZGVmaW5lZF0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBkdW1wU2ltcGxlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6IHR5cGluZyxcbiAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyogSUYgMjogc2ltcGxlIHZhbHVlIEVMU0UgZ290byBvYmplY3RUZW1wbGF0ZSAqL1xuICAgIGlmIChbJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ3N0cmluZyddLmluY2x1ZGVzKHR5cGluZykpIHtcbiAgICAgICAgcmV0dXJuIGR1bXBTaW1wbGUoeyBrZXk6IGtleSwgdmFsdWUsIG9uSGVhZGVyQ2xpY2ssIGV2ZXJ5U2ltcGxlVmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRPYmplY3RUZW1wbGF0ZSh7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzaG93S2lkcyxcbiAgICAgICAga2V5LFxuICAgICAgICBvbkhlYWRlckNsaWNrLFxuICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICBmb3JtYXQsXG4gICAgICAgIGlzUm9vdER1bXAsXG4gICAgICAgIHNob3dBbGwsXG4gICAgICAgIHNob3dBbGxDaGFuZ2U6ICh4KSA9PiBzaG93QWxsID0geCxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICBzaG93LFxuICAgICAgICBzaG93TGV2ZWxzLFxuICAgICAgICBhbGxvd01heGltaXplLFxuICAgIH0pO1xufSk7XG5sZXQgZHVtcENvdW50ID0gMDtcbmNvbnN0IGdldE9iamVjdFRlbXBsYXRlID0gKHsgdmFsdWUsIHNob3dLaWRzLCBrZXksIG9uSGVhZGVyQ2xpY2ssIGV2ZXJ5U2ltcGxlVmFsdWUsIGZvcm1hdCwgaXNSb290RHVtcCwgc2hvd0FsbCwgc2hvd0FsbENoYW5nZSwgZm9ybWF0Q2hhbmdlLCBzaG93LCBzaG93TGV2ZWxzLCBhbGxvd01heGltaXplLCB9KSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIGlmICghc2hvd0tpZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMDYxODhbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkdW1wU2ltcGxlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdmFsdWU6ICdudWxsJyxcbiAgICAgICAgICAgIG9uSGVhZGVyQ2xpY2ssXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkodmFsdWUpOyAvLyAoIWZvcm1hdCB8fCBmb3JtYXQ9PT0nZmxleCcpICYmICgodmFsdWUgYXMgYW55KS5wdXNoICYmICh2YWx1ZSBhcyBhbnkpLnBvcClcbiAgICBjb25zdCBnZXRBcnJheUR1bXAgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBkdW1wQXJyYXkoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBzaG93LFxuICAgICAgICAgICAgLy8gYXJyYXlWaWV3LFxuICAgICAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgICAgIHNob3dLaWRzLFxuICAgICAgICAgICAgc2hvd0xldmVscyxcbiAgICAgICAgICAgIGZvcm1hdENoYW5nZSxcbiAgICAgICAgICAgIGFsbG93TWF4aW1pemUsXG4gICAgICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGdldE9iamVjdER1bXAgPSAoKSA9PiBkdW1wT2JqZWN0KHtcbiAgICAgICAga2V5LFxuICAgICAgICBzaG93LFxuICAgICAgICAvLyBzaG93Q2hhbmdlOiB4ID0+IHNob3dDaGFuZ2VWYWx1ZShzaG93ID0geCksXG4gICAgICAgIHNob3dLaWRzLFxuICAgICAgICBzaG93TGV2ZWxzLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2hvd0FsbCxcbiAgICAgICAgZm9ybWF0Q2hhbmdlLFxuICAgICAgICBvbkhlYWRlckNsaWNrLFxuICAgICAgICBhbGxvd01heGltaXplLFxuICAgICAgICBldmVyeVNpbXBsZVZhbHVlLFxuICAgIH0pO1xuICAgIGNvbnN0IGdldEpzb25EdW1wID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzA2MTg4WzFdLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMikpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMDYxODhbMl0sIGB0YWdnZWRqcy1kdW1wLSR7KytkdW1wQ291bnR9YCwgaXNSb290RHVtcCAmJiBjb250cm9sUGFuZWwoe1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZm9ybWF0LFxuICAgICAgICBzaG93QWxsLFxuICAgICAgICBzaG93QWxsQ2hhbmdlLFxuICAgICAgICBmb3JtYXRDaGFuZ2UsXG4gICAgfSksIChmb3JtYXQgPT09ICdqc29uJyAmJiBnZXRKc29uRHVtcCgpKSB8fCAoaXNBcnJheSA/IGdldEFycmF5RHVtcCgpIDogZ2V0T2JqZWN0RHVtcCgpKSk7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczMwNjE4ODogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJubyBraWRzXCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCU7aGVpZ2h0OjI1dmg7bWluLWhlaWdodDo0MDBweDtjb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO1wiXSwgW1wiZGlzYWJsZWRcIl0sIFtcIndyYXBcIiwgXCJvZmZcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJjbGFzc1wiLCBcInRhZ2dlZGpzLWR1bXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcywgc3RhdGUgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGR1bXAgfSBmcm9tIFwiLi9kdW1wXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IGR1bXBDb250ZW50ID0gdGFnKCgpID0+IHtcbiAgICBsZXQgdXNlckpzb25TdHJpbmcgPSAnJztcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGxldCB1c2VySnNvbiA9ICcnO1xuICAgIGxldCBiYWRFdmFsID0gZmFsc2U7XG4gICAgc3RhdGVzKGdldCA9PiBbeyB1c2VySnNvblN0cmluZywgcmVuZGVyQ291bnQsIHVzZXJKc29uLCBiYWRFdmFsIH1dID0gZ2V0KHsgdXNlckpzb25TdHJpbmcsIHJlbmRlckNvdW50LCB1c2VySnNvbiwgYmFkRXZhbCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICAvLyBjb25zdCB1c2VySnNvbiA9IEpTT04ucGFyc2UodXNlckpzb25TdHJpbmcpXG4gICAgY29uc3QgY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHVzZXJKc29uU3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdXNlckpzb24gPSBzYW5kYm94RXZhbCh1c2VySnNvblN0cmluZywge30pO1xuICAgICAgICAgICAgdXNlckpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh1c2VySnNvbiwgbnVsbCwgMik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgYmFkRXZhbCA9IHRydWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEpTT04ucGFyc2UodXNlckpzb25TdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHVzZXJKc29uID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZXJyKS5yZWR1Y2UoKGEsIGtleSkgPT4gKGFba2V5XSA9IGVycltrZXldKSAmJiBhIHx8IGEsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2FtcGxlRHVtcCA9IHN0YXRlKCgpID0+ICh7XG4gICAgICAgIHNob3dMZXZlbHM6IDE1LFxuICAgICAgICBzaG93QWxsOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdGVzdDoge1xuICAgICAgICAgICAgICAgIGFub3RoZXJPbmU6IDIyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJyYXlUZXN0OiBbe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc29tZXRoaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgc3RyZWV0OiAnNDM2MScgfSxcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdpbiB0aGlzJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsgc3RyZWV0OiAnMjIzNScgfSxcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICd3b3JsZCcsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB7IHN0cmVldDogJzQ3ODUnIH0sXG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTgzNjMyWzBdLCBjaGFuZ2UsIHVzZXJKc29uID09PSBcIlwiID8gXCJcIiA6IHVzZXJKc29uU3RyaW5nLCB1c2VySnNvbiA9PT0gXCJcIiA/IFwiXCIgOiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxODM2MzJbMV0sIGR1bXAoe1xuICAgICAgICB2YWx1ZTogdXNlckpzb25cbiAgICB9KSksIGR1bXAoc2FtcGxlRHVtcCksIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdkdW1wQ29udGVudCcgfSkpO1xufSk7XG4vLyBleGVjdXRlIHNjcmlwdCBpbiBwcml2YXRlIGNvbnRleHRcbmZ1bmN0aW9uIHNhbmRib3hFdmFsKHNyYywgY3R4KSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG4gICAgY3R4ID0gbmV3IFByb3h5KGN0eCwgeyBoYXM6ICgpID0+IHRydWUgfSk7XG4gICAgbGV0IGZ1bmMgPSAobmV3IEZ1bmN0aW9uKFwid2l0aCh0aGlzKSB7IHJldHVybiAoXCIgKyBzcmMgKyBcIil9XCIpKTtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGN0eCk7XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTgzNjMyOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDthbGlnbi1pdGVtOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtnYXA6LjVlbTtwYWRkaW5nOi41ZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtaW4td2lkdGg6MzAwcHg7bWluLWhlaWdodDo0MDBweDtmbGV4OjFcIl0sIFtcImlkXCIsIFwidGFnZ2VkanMtZHVtcC11c2VyLXRleHRhcmVhXCJdLCBbXCJ3cmFwXCIsIFwib2ZmXCJdLCBbXCJwbGFjZWhvbGRlclwiLCBcInBhc3RlIGpzb24gaGVyZVwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1heC13aWR0aDo5MDBweFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleDoxO21pbi13aWR0aDoxMTBweDt3aWR0aDoxMDAlO21heC13aWR0aDo5MDBweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjUpO21pbi13aWR0aDozMDBweFwiXSwgW1wiaWRcIiwgXCJ0YWdnZWRqcy1kdW1wLXVzZXItcmVzdWx0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGeCh7IGZ4SW4sIGZ4T3V0LCBcbi8vIHN0YWdnZXJCeSA9IDMwMCxcbm91dFBvc2l0aW9uQWJzb2x1dGUgPSB0cnVlLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW46IChpbnB1dCwgc3RhZ2dlcikgPT4gYW5pbWF0ZUluaXQoe1xuICAgICAgICAgICAgZnhOYW1lOiBmeEluLFxuICAgICAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgIH0sIHN0YWdnZXIpLFxuICAgICAgICBvdXQ6IChpbnB1dCwgc3RhZ2dlcikgPT4gYW5pbWF0ZURlc3Ryb3koe1xuICAgICAgICAgICAgZnhOYW1lOiBmeE91dCxcbiAgICAgICAgICAgIG91dFBvc2l0aW9uQWJzb2x1dGUsXG4gICAgICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgfSwgc3RhZ2dlciksXG4gICAgfTtcbn1cbmNvbnN0IGFuaW1hdGVJbml0ID0gYXN5bmMgKHsgdGFyZ2V0LCBmeE5hbWUgPSAnZmFkZUluVXAnIH0sIHN0YWdnZXIpID0+IHtcbiAgICB0YXJnZXQuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBpZiAoc3RhZ2dlcikge1xuICAgICAgICBhd2FpdCB3YWl0KHN0YWdnZXIpO1xuICAgIH1cbiAgICB0YXJnZXQuc3R5bGUub3BhY2l0eSA9ICcxJztcbiAgICByZXR1cm4gYWRkQ2xhc3Nlc1RvKGZ4TmFtZSwgdGFyZ2V0KTtcbn07XG5jb25zdCBhbmltYXRlRGVzdHJveSA9IGFzeW5jICh7IHRhcmdldCwgb3V0UG9zaXRpb25BYnNvbHV0ZSA9IHRydWUsIGZ4TmFtZSA9ICdmYWRlT3V0VXAnLCB9LCBzdGFnZ2VyKSA9PiB7XG4gICAgaWYgKG91dFBvc2l0aW9uQWJzb2x1dGUpIHtcbiAgICAgICAgY2FwdHVyZUVsZW1lbnRQb3NpdGlvbih0YXJnZXQpO1xuICAgIH1cbiAgICBpZiAoc3RhZ2dlcikge1xuICAgICAgICBhd2FpdCB3YWl0KHN0YWdnZXIpO1xuICAgIH1cbiAgICByZXR1cm4gYWRkQ2xhc3Nlc1RvKGZ4TmFtZSwgdGFyZ2V0KTtcbn07XG5mdW5jdGlvbiBhZGRDbGFzc2VzVG8oZnhOYW1lLCB0YXJnZXQpIHtcbiAgICBsZXQgcmVzO1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiByZXNpbmF0ZShyZXNvbHZlKSB7XG4gICAgICAgIHJlcyA9IHJlc29sdmU7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaGFuZGxlQW5pbWF0aW9uRW5kKGV2ZW50KSB7XG4gICAgICAgIC8vIE9wdGlvbmFsOiBtYWtlIHN1cmUgdGhlIGV2ZW50IGlzIGZyb20gdGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IHRhcmdldClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGVfX2FuaW1hdGVkJywgJ2FuaW1hdGVfXycgKyBmeE5hbWUpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICAgICAgcmVzKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdhbmltYXRlX19hbmltYXRlZCcsICdhbmltYXRlX18nICsgZnhOYW1lKTtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbi8vIGFic29sdXRlXG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVsZW1lbnRQb3NpdGlvbihlbGVtZW50KSB7XG4gICAgZWxlbWVudC5zdHlsZS56SW5kZXggPSBlbGVtZW50LnN0eWxlLnpJbmRleCB8fCAxO1xuICAgIGNvbnN0IHRvVG9wID0gZWxlbWVudC5vZmZzZXRUb3AgKyAncHgnO1xuICAgIGNvbnN0IHRvTGVmdCA9IGVsZW1lbnQub2Zmc2V0TGVmdCArICdweCc7XG4gICAgY29uc3QgdG9XaWR0aCA9IChlbGVtZW50LmNsaWVudFdpZHRoICsgKGVsZW1lbnQub2Zmc2V0V2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoKSArIDEpICsgJ3B4JztcbiAgICBjb25zdCB0b0hlaWdodCA9IChlbGVtZW50LmNsaWVudEhlaWdodCArIChlbGVtZW50Lm9mZnNldEhlaWdodCAtIGVsZW1lbnQuY2xpZW50SGVpZ2h0KSArIDEpICsgJ3B4JztcbiAgICBjb25zdCBmaXggPSAoKSA9PiB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gdG9Ub3A7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IHRvTGVmdDtcbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRvV2lkdGg7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdG9IZWlnaHQ7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIH07XG4gICAgLy8gZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICAvLyBhbGxvdyBvdGhlciBlbGVtZW50cyB0aGF0IGFyZSBiZWluZyByZW1vdmVkIHRvIGhhdmUgYSBtb21lbnQgdG8gZmlndXJlIG91dCB3aGVyZSB0aGV5IGN1cnJlbnRseSBzaXRcbiAgICBzZXRUaW1lb3V0KGZpeCwgMCk7XG59XG5mdW5jdGlvbiB3YWl0KHRpbWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KHJlcywgdGltZSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVGeC5mdW5jdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVGeCB9IGZyb20gXCIuL2NyZWF0ZUZ4LmZ1bmN0aW9uLmpzXCI7XG5pbXBvcnQgeyBhZGRQYWludFJlbW92ZUF3YWl0LCBnZXRJbm5lckhUTUwsIGhvc3QsIGh0bWwgfSBmcm9tIFwidGFnZ2VkanNcIjtcbi8qKiBwcmVmZXJyZWQgKi9cbmV4cG9ydCBjb25zdCB7IGluOiBmYWRlSW5VcCwgb3V0OiBmYWRlT3V0RG93biB9ID0gY3JlYXRlRngoe1xuICAgIGZ4SW46ICdmYWRlSW5VcCcsXG4gICAgZnhPdXQ6ICdmYWRlT3V0RG93bidcbn0pO1xuZXhwb3J0IGNvbnN0IHsgaW46IGZhZGVJbkRvd24sIG91dDogZmFkZU91dFVwIH0gPSBjcmVhdGVGeCh7XG4gICAgZnhJbjogJ2ZhZGVJbkRvd24nLFxuICAgIGZ4T3V0OiAnZmFkZU91dFVwJ1xufSk7XG5leHBvcnQgY29uc3QgeyBpbjogZmFkZUluLCBvdXQ6IGZhZGVPdXQgfSA9IGNyZWF0ZUZ4KHtcbiAgICBmeEluOiAnZmFkZUluJyxcbiAgICBmeE91dDogJ2ZhZGVPdXQnLFxufSk7XG4vKiogR3JvdXAgY3JlYXRlZCBhbmltYXRpb25zIHRvZ2V0aGVyIHdpdGggc3RhZ2dlcmluZyAqL1xuZXhwb3J0IGNvbnN0IGZ4R3JvdXAgPSAoeyBzdGFnZ2VyID0gMTAwLCBmeEluLCBmeE91dCwgZHVyYXRpb24gPSAnMnMnLCBpbk5hbWUgPSAnZmFkZUluVXAnLCBvdXROYW1lID0gJ2ZhZGVPdXREb3duJywgb3V0UG9zaXRpb25BYnNvbHV0ZSA9IGZhbHNlLCB9ID0ge30pID0+IHtcbiAgICBsZXQgc3RhZ2dlclRpbWUgPSAwO1xuICAgIGNvbnN0IHNldHVwID0gc2V0dXBGeChmdW5jdGlvbiBvbkluaXQoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWFuaW1hdGUtZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgICAgIGNvbnN0IHRvdGFsU3RhZ2dlciA9IHN0YWdnZXIgKiAoc3RhZ2dlclRpbWUrKyk7XG4gICAgICAgIHJldHVybiBzZXR1cC5meEluKHsgdGFyZ2V0OiBlbGVtZW50IH0sIHRvdGFsU3RhZ2dlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAtLXN0YWdnZXJUaW1lO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiBvbkRlc3Ryb3koZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWFuaW1hdGUtZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgICAgIGNvbnN0IHRvdGFsU3RhZ2dlciA9IHN0YWdnZXIgKiAoc3RhZ2dlclRpbWUrKyk7XG4gICAgICAgIGNvbnN0IGRlc3Ryb3lQcm9taXNlID0gc2V0dXAuZnhPdXQoeyB0YXJnZXQ6IGVsZW1lbnQgfSwgdG90YWxTdGFnZ2VyKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC0tc3RhZ2dlclRpbWU7XG4gICAgICAgIH0pO1xuICAgICAgICBhZGRQYWludFJlbW92ZUF3YWl0KGRlc3Ryb3lQcm9taXNlKTtcbiAgICAgICAgcmV0dXJuIGRlc3Ryb3lQcm9taXNlO1xuICAgIH0sIGZ4SW4sIGZ4T3V0LCBpbk5hbWUsIG91dE5hbWUsIFxuICAgIC8vIHN0YWdnZXIsXG4gICAgb3V0UG9zaXRpb25BYnNvbHV0ZSk7XG4gICAgcmV0dXJuIHNldHVwLmhvc3Q7XG59O1xuLyoqIFVzZWQgYXMgYSBob3N0IG9uIGVsZW1lbnQuIDxkaXYgJHtmeCgpfT4gKi9cbmV4cG9ydCBjb25zdCBmeCA9ICh7IGZ4SW4sIGZ4T3V0LCBzdGFnZ2VyLCBpbk5hbWUgPSAnZmFkZUluVXAnLCBvdXROYW1lID0gJ2ZhZGVPdXREb3duJywgZHVyYXRpb24gPSAnLjJzJywgb3V0UG9zaXRpb25BYnNvbHV0ZSA9IGZhbHNlLCB9ID0ge30pID0+IHtcbiAgICBjb25zdCBzZXR1cCA9IHNldHVwRngoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1hbmltYXRlLWR1cmF0aW9uJywgZHVyYXRpb24pO1xuICAgICAgICByZXR1cm4gc2V0dXAuZnhJbih7IHRhcmdldDogZWxlbWVudCB9LCBzdGFnZ2VyKTtcbiAgICB9LCAoZWxlbWVudCkgPT4ge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWFuaW1hdGUtZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgICAgIGNvbnN0IGRlc3Ryb3lQcm9taXNlID0gc2V0dXAuZnhPdXQoeyB0YXJnZXQ6IGVsZW1lbnQgfSwgc3RhZ2dlcik7XG4gICAgICAgIGFkZFBhaW50UmVtb3ZlQXdhaXQoZGVzdHJveVByb21pc2UpO1xuICAgICAgICByZXR1cm4gZGVzdHJveVByb21pc2U7XG4gICAgfSwgZnhJbiwgZnhPdXQsIGluTmFtZSwgb3V0TmFtZSwgXG4gICAgLy8gc3RhZ2dlcixcbiAgICBvdXRQb3NpdGlvbkFic29sdXRlKTtcbiAgICByZXR1cm4gc2V0dXAuaG9zdDtcbn07XG5mdW5jdGlvbiBzZXR1cEZ4KG9uSW5pdCwgb25EZXN0cm95LCBmeEluLCBmeE91dCwgaW5OYW1lLCBvdXROYW1lLCBcbi8vIHN0YWdnZXI6IG51bWJlciB8IHVuZGVmaW5lZCxcbm91dFBvc2l0aW9uQWJzb2x1dGUpIHtcbiAgICBpZiAoIWZ4SW4gfHwgIWZ4T3V0KSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBjcmVhdGVGeCh7XG4gICAgICAgICAgICBmeEluOiBpbk5hbWUsXG4gICAgICAgICAgICBmeE91dDogb3V0TmFtZSxcbiAgICAgICAgICAgIC8vIHN0YWdnZXJCeTogc3RhZ2dlcixcbiAgICAgICAgICAgIG91dFBvc2l0aW9uQWJzb2x1dGUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWZ4SW4pIHtcbiAgICAgICAgICAgIGZ4SW4gPSBjcmVhdGVkLmluO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZnhPdXQpIHtcbiAgICAgICAgICAgIGZ4T3V0ID0gY3JlYXRlZC5vdXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZnhJbiwgZnhPdXQsXG4gICAgICAgIGhvc3Q6IGhvc3QoKCkgPT4gdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBvbkluaXQsXG4gICAgICAgICAgICBvbkRlc3Ryb3ksXG4gICAgICAgIH0pXG4gICAgfTtcbn1cbi8qKiBAZGVwcmVjYXRlZCAtIEluc3RlYWQgdXNlIDxkaXYgJHtmeCgpfT4gLi4uIFVzZSBvbiBodG1sIGVsZW1lbnRzIHRvIGhhdmUgdGhlbSBhbmltYXRlZCBpbiBhbmQgb3V0ICovXG5leHBvcnQgZnVuY3Rpb24gYW5pbWF0ZVdyYXAoeyBmeEluLCBmeE91dCwgZHVyYXRpb24gPSAnLjJzJywgb3V0UG9zaXRpb25BYnNvbHV0ZSA9IGZhbHNlLCB9ID0ge1xuICAgIGR1cmF0aW9uOiAnLjJzJyxcbiAgICBvdXRQb3NpdGlvbkFic29sdXRlOiBmYWxzZSxcbn0pIHtcbiAgICBpZiAoIWZ4SW4gfHwgIWZ4T3V0KSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBjcmVhdGVGeCh7XG4gICAgICAgICAgICBmeEluOiAnZmFkZUluVXAnLFxuICAgICAgICAgICAgZnhPdXQ6ICdmYWRlT3V0RG93bicsXG4gICAgICAgICAgICBvdXRQb3NpdGlvbkFic29sdXRlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFmeEluKSB7XG4gICAgICAgICAgICBmeEluID0gY3JlYXRlZC5pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ4T3V0KSB7XG4gICAgICAgICAgICBmeE91dCA9IGNyZWF0ZWQub3V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGlubmVySFRNTCA9IGdldElubmVySFRNTCgpO1xuICAgIHJldHVybiBodG1sIGBcbiAgICA8ZGl2IG9uaW5pdD0ke2Z4SW59IG9uZGVzdHJveT0ke2Z4T3V0fSBzdHlsZS4tLWFuaW1hdGUtZHVyYXRpb249JHtkdXJhdGlvbn0+JHtpbm5lckhUTUx9PC9kaXY+XG4gIGAuYWNjZXB0SW5uZXJIVE1MKGlubmVySFRNTCk7XG59XG4vKiogVXNlIG9uIGh0bWwgZWxlbWVudHMsIHdpdGhpbiBhIGxvb3AsIHRvIGhhdmUgdGhlbSBhbmltYXRlZCBpbiBhbmQgb3V0ICovXG5leHBvcnQgZnVuY3Rpb24gYW5pbWF0ZUxvb3AoeyBmeEluLCBmeE91dCwgZHVyYXRpb24gPSAnLjJzJywgb3V0UG9zaXRpb25BYnNvbHV0ZSA9IHRydWUsIH0gPSB7XG4gICAgZHVyYXRpb246ICcuMnMnLFxuICAgIG91dFBvc2l0aW9uQWJzb2x1dGU6IHRydWUsXG59KSB7XG4gICAgaWYgKCFmeEluIHx8ICFmeE91dCkge1xuICAgICAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRngoe1xuICAgICAgICAgICAgZnhJbjogJ2ZhZGVJblVwJyxcbiAgICAgICAgICAgIGZ4T3V0OiAnZmFkZU91dERvd24nLFxuICAgICAgICAgICAgb3V0UG9zaXRpb25BYnNvbHV0ZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFmeEluKSB7XG4gICAgICAgICAgICBmeEluID0gY3JlYXRlZC5pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ4T3V0KSB7XG4gICAgICAgICAgICBmeE91dCA9IGNyZWF0ZWQub3V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGlubmVySFRNTCA9IGdldElubmVySFRNTCgpO1xuICAgIHJldHVybiBodG1sIGBcbiAgICA8ZGl2IG9uaW5pdD0ke2Z4SW59IG9uZGVzdHJveT0ke2Z4T3V0fSBzdHlsZS4tLWFuaW1hdGUtZHVyYXRpb249JHtkdXJhdGlvbn0+JHtpbm5lckhUTUx9PC9kaXY+XG4gIGAuYWNjZXB0SW5uZXJIVE1MKGlubmVySFRNTCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBodG1sLCB0YWcsIFZhbHVlU3ViamVjdCwgc3RhdGUsIHN0YXRlcywgc3Vic2NyaWJlLCBTdWJqZWN0LCBnZXRJbm5lckhUTUwsIGRpdiwgaW5wdXQsIHNlbGVjdCwgb3B0aW9uIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBkdW1wQ29udGVudCB9IGZyb20gXCIuL2R1bXBDb250ZW50LnRhZ1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnRcIjtcbmltcG9ydCB7IGZ4IH0gZnJvbSBcInRhZ2dlZGpzLWFuaW1hdGUtY3NzXCI7XG5leHBvcnQgY29uc3QgdGVzdFN0YWdnZXJCeSA9IDIwO1xuY29uc3Qgb3V0ZXJIdG1sID0gKHN0YWdnZXJCeSA9IDEwKSA9PiB7XG4gICAgY29uc3QgaW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MKCk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1swXSwgZngoeyBzdGFnZ2VyOiBzdGFnZ2VyQnksIGR1cmF0aW9uOiAnLjFzJyB9KSwgaW5uZXJIVE1MKS5hY2NlcHRJbm5lckhUTUwoaW5uZXJIVE1MKTtcbn07XG5leHBvcnQgY29uc3QgY29uY2F0U3R5bGVzID0gdGFnKChpbm5lckhUTUwpID0+IHtcbiAgICBjb25jYXRTdHlsZXMudXBkYXRlcyh4ID0+IFtpbm5lckhUTUxdID0geCk7XG4gICAgbGV0IHdpZHRoID0gMTtcbiAgICBsZXQgYm9yZGVyQ29sb3IgPSAnd2hpdGUnO1xuICAgIHJldHVybiBkaXYoZGl2KHtcbiAgICAgICAgaWQ6IFwiZHluYW1pYy1ib3JkZXItZWxlbWVudFwiLFxuICAgICAgICBzdHlsZTogXyA9PiBgYm9yZGVyLXdpZHRoOiR7d2lkdGh9cHg7Ym9yZGVyLWNvbG9yOiR7Ym9yZGVyQ29sb3J9O2JvcmRlci1zdHlsZTpzb2xpZDtgXG4gICAgfSwgaW5uZXJIVE1MKSwgZGl2KCdib3JkZXJXaWR0aDonLCBpbnB1dCh7XG4gICAgICAgIGlkOiBcImR5bmFtaWMtYm9yZGVyLXdpZHRoXCIsXG4gICAgICAgIHR5cGU6IFwicmFuZ2VcIixcbiAgICAgICAgbWluOiBcIjBcIixcbiAgICAgICAgbWF4OiBcIjEwXCIsXG4gICAgICAgIHN0ZXA6IFwiMVwiLFxuICAgICAgICB2YWx1ZTogXyA9PiB3aWR0aCxcbiAgICAgICAgb25DaGFuZ2U6IGV2ZW50ID0+IHdpZHRoID0gTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICB9KSwgJyAtICcsIF8gPT4gd2lkdGgsICdweCcpLCBkaXYoJ2JvcmRlckNvbG9yOicsIHNlbGVjdCh7XG4gICAgICAgIGlkOiBcImR5bmFtaWMtYm9yZGVyLWNvbG9yXCIsXG4gICAgICAgIG9uQ2hhbmdlOiBldmVudCA9PiBib3JkZXJDb2xvciA9IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIH0sIG9wdGlvbih7IHZhbHVlOiBcIlwiLCBzZWxlY3RlZDogXyA9PiBib3JkZXJDb2xvciA9PT0gJycgfSksIG9wdGlvbih7IHZhbHVlOiBcImJsYWNrXCIsIHNlbGVjdGVkOiBfID0+IGJvcmRlckNvbG9yID09PSAnYmxhY2snIH0sICdibGFjaycpLCBvcHRpb24oeyB2YWx1ZTogXCJibHVlXCIsIHNlbGVjdGVkOiBfID0+IGJvcmRlckNvbG9yID09PSAnYmx1ZScgfSwgJ2JsdWUnKSwgb3B0aW9uKHsgdmFsdWU6IFwid2hpdGVcIiwgc2VsZWN0ZWQ6IF8gPT4gYm9yZGVyQ29sb3IgPT09ICd3aGl0ZScgfSwgJ3doaXRlJykpKSk7XG59KTtcbmV4cG9ydCBjb25zdCBjb250ZW50ID0gdGFnKCgpID0+IHtcbiAgICBjb25zdCB2czAgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KDApKTtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIGxldCBvcmFuZ2VUb2dnbGUgPSB0cnVlO1xuICAgIGxldCBib2xkVG9nZ2xlID0gZmFsc2U7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCBzdGFnZ2VyQnkgPSB0ZXN0U3RhZ2dlckJ5O1xuICAgIGxldCBzaG93SGlkZUZ4ID0gZmFsc2U7XG4gICAgY29uc3QgY291bnRzID0gc3RhdGUoKCkgPT4gbmV3IFN1YmplY3QoeyBhZGRlZDogMCwgcmVtb3ZlZDogMCB9KSk7XG4gICAgc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICAgICAgcmVuZGVyQ291bnQsIG9yYW5nZVRvZ2dsZSwgYm9sZFRvZ2dsZSwgY291bnRlciwgc2hvd0hpZGVGeCwgc3RhZ2dlckJ5LFxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIHJlbmRlckNvdW50LCBvcmFuZ2VUb2dnbGUsIGJvbGRUb2dnbGUsIGNvdW50ZXIsIHNob3dIaWRlRngsIHN0YWdnZXJCeSxcbiAgICB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICBjb25zdCBkb20gPSBbe1xuICAgICAgICAgICAgbm46ICdiJywgY2g6IFt7XG4gICAgICAgICAgICAgICAgICAgIG5uOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHRjOiAnYmlnJyxcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICB9XTtcbiAgICBjb25zdCBpbmplY3Rpb25UZXN0ID0gJzxzY3JpcHQ+YWxlcnQoXCJpIHNob3VsZCBuZXZlciBydW4gYnV0IGJlIHNlZW4gb24gcGFnZVwiKTwvc2NyaXB0Pic7XG4gICAgY29uc3QgcGlwZSA9IHN1YnNjcmliZSh2czAsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1sxXSwgKCkgPT4ge1xuICAgICAgICAgICAgKytjb3VudGVyO1xuICAgICAgICB9LCBjb3VudGVyLCAoKSA9PiB2czAubmV4dCh2czAudmFsdWUgKyAxKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1syXSwgY291bnRlciwgcGlwZSwgKCkgPT4gKytjb3VudGVyLCBjb3VudGVyLCAoKSA9PiBzaG93SGlkZUZ4ID0gIXNob3dIaWRlRngsIHNob3dIaWRlRnggJiYgKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1szXSwgZngoeyBkdXJhdGlvbjogJzEwbXMnIH0pKSksIHNob3dIaWRlRnggJiYgKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY0NzY2M1s0XSwgZngoeyBkdXJhdGlvbjogJzEwbXMnLCBzdGFnZ2VyOiBzdGFnZ2VyQnkgfSkpKSwgc2hvd0hpZGVGeCAmJiAoaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzVdLCBmeCh7IGR1cmF0aW9uOiAnMTBtcycsIHN0YWdnZXI6IHN0YWdnZXJCeSAqIDIgfSkpKSwgc2hvd0hpZGVGeCAmJiAob3V0ZXJIdG1sKHN0YWdnZXJCeSkuaW5uZXJIVE1MID0gaW5uZXJIdG1sVGFnKCkpLCBzdWJzY3JpYmUoY291bnRzLCBjb3VudHMgPT4gY291bnRzLmFkZGVkKSwgc3Vic2NyaWJlKGNvdW50cywgY291bnRzID0+IGNvdW50cy5yZW1vdmVkKSwgZXZlbnQgPT4gc3RhZ2dlckJ5ID0gTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSksIGNvbmNhdFN0eWxlcyhodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NDc2NjNbNl0pKSwgZHVtcENvbnRlbnQoKSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2NvbnRlbnQnIH0pLCBudW1iZXJlZE5vUGFyZW50cygpLCBudW1iZXJlZE5vUGFyZW50cygpLCBpbmplY3Rpb25UZXN0LCBodG1sLmRvbShkb20pLCBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NDc2NjNbN10pLCBcIjNweCBzb2xpZCBvcmFuZ2VcIiwgb3JhbmdlVG9nZ2xlID8gXCIzcHggc29saWQgb3JhbmdlXCIgOiBcIjNweCBzb2xpZCBncmVlblwiLCAoKSA9PiBvcmFuZ2VUb2dnbGUgPSAhb3JhbmdlVG9nZ2xlLCBvcmFuZ2VUb2dnbGUsIGJvbGRUb2dnbGUgPyB7IHN0eWxlOiAnZm9udC13ZWlnaHQ6Ym9sZDsnIH0gOiB7fSwgKCkgPT4gYm9sZFRvZ2dsZSA9ICFib2xkVG9nZ2xlLCBib2xkVG9nZ2xlID8gJ3RydWUnIDogJ2ZhbHNlJywgNTQsICdoZWxsbycsIDAsIGZhbHNlLCBudWxsLCB1bmRlZmluZWQsIHRydWUsICd7JywgJ30nLCAneycsICd9JywgJzxkaXY+aGVsbG88L2Rpdj4nLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnY29udGVudCcgfSkpO1xufSk7XG5jb25zdCBudW1iZXJlZE5vUGFyZW50cyA9ICgpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjQ3NjYzWzhdLCAndGVzdDAnLCAndGVzdDEnLCAndGVzdDMnKTtcbn07XG5jb25zdCBpbm5lckh0bWxUYWcgPSB0YWcoKCkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2NDc2NjNbOV0pO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjQ3NjYzOiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm91dGVyLWh0bWwtZngtdGVzdFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAwIH1dLCBbXCJzdHlsZS5ib3JkZXJcIiwgXCIxcHggc29saWQgb3JhbmdlXCIsIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dLCBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2UgaW5zaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2UgdnMwXCIgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIGNvbnRlbnQtZGVidWctdGVzdGluZyAtLT5cIiB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInBpcGVkIHN1YmplY3QgY2xpY2sgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBpcGUtY291bnRlci1jbGljay1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIG91dHNpZGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhpZGUgc2hvd1wiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtdG9nZ2xlLWZ4XCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZ2dsZSBoaWRlc2hvdyBmeFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJhZGRlZDogXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtZngtYWRkZWRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA5IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwO1xcbiAgICAgICAgICByZW1vdmVkOiBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1meC1yZW1vdmVkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN0YWdnZXJCeTpcIiB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwicmFuZ2VcIl0sIFtcIm1pblwiLCBcIjEwXCJdLCBbXCJtYXhcIiwgXCIzMDBcIl0sIFtcInN0ZXBcIiwgXCIxXCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDExIH0sIG51bGxdXSB9XSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEyIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJEdW1wIENvbnRlbnRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNCB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm5vUGFyZW50VGFnRmllbGRzZXRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiTm8gUGFyZW50IFRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNSB9XSB9LCB7IFwibm5cIjogXCJoclwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm5vUGFyZW50c1Rlc3QyLXN0YXJ0XCJdXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNiB9LCB7IFwibm5cIjogXCJoclwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIm5vUGFyZW50c1Rlc3QyLWVuZFwiXV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW07XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluamVjdGlvbiB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0aW9uLXRlc3RcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbmplY3Rpb24gdGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNyB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJoZWxsby1iaWctZG9tLXdvcmxkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGVsbG8gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTggfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIHdvcmxkXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaGVsbG8tYmlnLXN0cmluZy13b3JsZFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhlbGxvIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiB3b3JsZFwiIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0YWd2YXIgaW5qZWN0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdC10YWd2YXItMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiYjNTg7dGFndmFyMCYjNTg7XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPT09XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0LXJlYWQtdGFndmFyLTBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6dGFndmEmI3g3MjswOlwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluamVjdC10YWd2YXItMVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiYjNTg7dGFndmFyeDB4JiM1ODtcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI9PT1cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3QtcmVhZC10YWd2YXItMVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjp0YWd2YXJ4MHg6XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5qZWN0LXRhZ3Zhci0yXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJiM1ODt0YWd2YXIwJiM1ODtcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI9PT1cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmplY3QtcmVhZC10YWd2YXItMlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjp0YWd2YSYjeDcyOzA6XCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3R5bGUtc2ltcGxlLWJvcmRlci1vcmFuZ2VcIl0sIFtcInN0eWxlLmJvcmRlclwiLCBcIjNweCBzb2xpZCBvcmFuZ2VcIiwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInNpbXBsZSBvcmFuZ2UgYm9yZGVyXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3R5bGUtdmFyLWJvcmRlci1vcmFuZ2VcIl0sIFtcInN0eWxlLmJvcmRlclwiLCB7IFwidGFnSnNWYXJcIjogMjAgfSwgXCJzdHlsZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInZhciBvcmFuZ2UgYm9yZGVyXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN0eWxlLXRvZ2dsZS1ib3JkZXItb3JhbmdlXCJdLCBbXCJzdHlsZS5ib3JkZXJcIiwgeyBcInRhZ0pzVmFyXCI6IDIxIH0sIFwic3R5bGVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0b2dnbGUgb3JhbmdlIGJvcmRlclwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInRvZ2dsZS1ib3JkZXItb3JhbmdlXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMjIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJvcmFuZ2UgdG9nZ2xlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIzIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzdHlsZS10b2dnbGUtYm9sZFwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAyNCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZ2dsZSBvcmFuZ2UgYm9yZGVyXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwidG9nZ2xlLWJvbGRcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAyNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImJvbGQgdG9nZ2xlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI2IH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImhlbGxvLXNwYWNpbmctZG9tLXdvcmxkXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiB3b3JsZHNcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtmb250LXNpemU6MC44ZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ6ZXJvIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjAgWW91IHNob3VsZCBzZWUgXFxcIjBcXFwiIGhlcmUgPT4gXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDI5IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvb2YgeW91IGNhbm5vdCBzZWUgZmFsc2UgdmFsdWVzIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImZhbHNlIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjEgWW91IHNob3VsZCBzZWUgXFxcIlxcXCIgaGVyZSA9PiBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm51bGwgdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuMiBZb3Ugc2hvdWxkIHNlZSBcXFwiXFxcIiBoZXJlID0+IFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidW5kZWZpbmVkIHRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjMgWW91IHNob3VsZCBzZWUgXFxcIlxcXCIgaGVyZSA9PiBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1wcm9vZiB5b3UgY2FuIHNlZSB0cnVlIGJvb2xlYW5zIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRydWUgdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlAuNCBZb3Ugc2hvdWxkIHNlZSBcXFwidHJ1ZVxcXCIgaGVyZSA9PiBcXFwiXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1wcm9vZiB5b3UgY2FuIHRyeSB0byB1c2UgdGhlIHRhZ1ZhciBzeW50YXggLS0+XCIgfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQLjUgWW91IHNob3VsZCBzZWUgXFxcInsyMn1cXFwiIGhlcmUgPT4gXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM0IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjIyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMzUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiUC42IFlvdSBzaG91bGQgc2VlIFxcXCJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzNiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJfX3RhZ1ZhcjBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiIGhlcmUgPT4gXFxcIntfX3RhZ1ZhcjB9XFxcIlwiIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic2hvdWxkIGJlIGEgc2FmZSBzdHJpbmcgbm8gaHRtbCZuYnNwO1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWRvbS1wYXJzZS0wLTBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXFwiJmx0O2RpdiZndDtoZWxsbyZsdDsvZGl2Jmd0O1xcXCJcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDtcXG4gICAgICAgIGhlcmUgPT4mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1kb20tcGFyc2UtMC0xXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxcIlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDM4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcXCJcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzOSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcIm5hbWVcIiwgXCJ0ZXN0LXRoZS10ZXN0ZXJcIl0sIFt7IFwidGFnSnNWYXJcIjogMCB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRlc3QgdGhlIHRlc3RlciAtIDBcIiB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJuYW1lXCIsIFwidGVzdC10aGUtdGVzdGVyXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0ZXN0IHRoZSB0ZXN0ZXIgLSAxXCIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wibmFtZVwiLCBcInRlc3QtdGhlLXRlc3RlclwiXSwgW3sgXCJ0YWdKc1ZhclwiOiAwIH1dXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwidGVzdCB0aGUgdGVzdGVyIC0gMlwiIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgICB0ZXN0IHRoZSB0ZXN0ZXIyXFxuICAgICAgXCIgfV0sIFt7IFwibm5cIjogXCJiXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImJpZ1wiIH1dIH1dLCBbeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb250ZW50MVwiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvbnRlbnQyXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29udGVudDNcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb250ZW50NFwiIH0sIHsgXCJublwiOiBcImhyXCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lciBodG1sIHRhZ1wiIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgc3RhdGVzLCBTdWJqZWN0LCBzdWJqZWN0LCB0YWcsIFZhbHVlU3ViamVjdGl2ZSwgc2lnbmFsLCBzdWJzY3JpYmUsIG5vRWxlbWVudCwgZGl2LCBzcGFuLCBidXR0b24sIGhyLCBmaWVsZHNldCwgbGVnZW5kIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xubGV0IG91dHNpZGVDb3VudCA9IDA7XG4vKiogdGhpcyB0YWcgcmVuZGVycyBvbmx5IG9uY2UgKi9cbmV4cG9ydCBjb25zdCBvbmVSZW5kZXIgPSB0YWcoKCkgPT4ge1xuICAgIGNvbnN0IGNvdW50ZXIgPSBuZXcgVmFsdWVTdWJqZWN0aXZlKDApO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICArK291dHNpZGVDb3VudDtcbiAgICBjb25zdCB4ID0gU3ViamVjdC5hbGwoWzAsICdhbGwnLCA0XSk7XG4gICAgaWYgKG91dHNpZGVDb3VudCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpc3N1ZSBzdGFydGVkIScpO1xuICAgIH1cbiAgICByZXR1cm4gbm9FbGVtZW50KHN1YnNjcmliZSh4LnBpcGUoeCA9PiBKU09OLnN0cmluZ2lmeSh4KSkpLCBkaXYoc3Bhbign8J+RjScsIHNwYW4oeyBpZDogXCLwn5GNLWNvdW50ZXItZGlzcGxheVwiIH0sIHN1YnNjcmliZShjb3VudGVyLCB4ID0+IHgpKSksIGJ1dHRvbih7IHR5cGU6IFwiYnV0dG9uXCIsIGlkOiBcIvCfkY0tY291bnRlci1idXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgKytjb3VudGVyLnZhbHVlO1xuICAgICAgICB9XG4gICAgfSwgJysr8J+RjScpKSwgXyA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnb25lUmVuZGVyX3RhZ190cycgfSksIGhyLCBmaWVsZHNldChsZWdlbmQoJ2luc2lkZU11bHRpUmVuZGVyJyksIF8gPT4gaW5zaWRlTXVsdGlSZW5kZXIoKSkpO1xufSk7XG4vKiogdGhpcyB0YWcgcmVuZGVycyBvbiBldmVyeSBldmVudCBidXQgc2hvdWxkIG5vdCBjYXVzZSBwYXJlbnQgdG8gcmUtcmVuZGVyICovXG5jb25zdCBpbnNpZGVNdWx0aVJlbmRlciA9IHRhZygoKSA9PiAoY291bnRlciQgPSBzdWJqZWN0KDApLCBjb3VudGVyU2lnbmFsJCA9IHNpZ25hbCgwKSwgY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgLy8gc3RhdGUgY2FuIGJlIHVzZWQgYnV0IGl0IG5ldmVyIHVwZGF0ZXNcbl8gPSBzdGF0ZXMoZ2V0ID0+IFt7IHJlbmRlckNvdW50LCBjb3VudGVyIH1dID0gZ2V0KHsgcmVuZGVyQ291bnQsIGNvdW50ZXIgfSkpKSA9PiB7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMjI3NzY4NlswXSwgc3Vic2NyaWJlKGNvdW50ZXIkKSwgY291bnRlclNpZ25hbCQsIGNvdW50ZXIsICgpID0+IHtcbiAgICAgICAgKytjb3VudGVyO1xuICAgICAgICBjb3VudGVyJC5uZXh0KGNvdW50ZXIpO1xuICAgICAgICBjb3VudGVyU2lnbmFsJC52YWx1ZSA9IGNvdW50ZXI7XG4gICAgfSwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2luc2lkZU11bHRpUmVuZGVyJyB9KSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyMjc3Njg2OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GN8J+UqCBzdWIgY291bnRlci1zdWJqZWN0LWRpc3BsYXk6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfkY3wn5SoLWNvdW50ZXItc3ViamVjdC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+RjfCfk6Egc2lnbmFsIGNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfk6Etc2lnbmFsLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnJcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkY3wn5SoIHN1YiBjb3VudGVyXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfkY3wn5SoLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiaWRcIiwgXCLwn5GN8J+UqC1jb3VudGVyLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDMgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIrK/CfkY3wn5GNXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cIiB9XV0gfTtcbiIsImltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyBydW5Jc29sYXRlZFRlc3RzIH0gZnJvbSBcIi4vaXNvbGF0ZWRBcHAudGVzdFwiO1xubGV0IHRlc3RUaW1lb3V0ID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBydW5UZXN0aW5nKG1hbnVhbCA9IHRydWUsIHRlc3RzLCBydW5TdGFydEVuZFRlc3RzKSB7XG4gICAgaWYgKHRlc3RUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0ZXN0VGltZW91dCk7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYPCfj4MgQ2xlYXJlZCBwcmV2aW91cyB0ZXN0aW5nIHRvIHN0YXJ0IGFnYWluLi4uYCk7XG4gICAgfVxuICAgIGNvbnN0IHdhaXRGb3IgPSAyMDAwO1xuICAgIHRlc3RUaW1lb3V0ID0gc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRlc3RzID0gdGVzdHMgfHwgc3RvcmFnZS52aWV3cztcbiAgICAgICAgY29uc29sZS5kZWJ1Zyhg8J+PgyBQcmVwYXJlIHRlc3Qgc3VpdGVzLi4uYCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJ1bklzb2xhdGVkVGVzdHModGVzdHMsIHJ1blN0YXJ0RW5kVGVzdHMpO1xuICAgICAgICBpZiAoIW1hbnVhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGFsZXJ0KCfinIUgYWxsIGFwcCB0ZXN0cyBwYXNzZWQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbGVydCgn4p2MIHRlc3RzIGZhaWxlZC4gU2VlIGNvbnNvbGUgZm9yIG1vcmUgZGV0YWlscycpO1xuICAgIH0sIHdhaXRGb3IpOyAvLyBjYXVzZSBkZWxheSB0byBiZSBzZXBhcmF0ZSBmcm9tIHJlbmRlcnNcbn1cbiIsImltcG9ydCB7IFZpZXdUeXBlcyB9IGZyb20gXCIuL3NlY3Rpb25TZWxlY3Rvci50YWdcIjtcbmltcG9ydCB7IGV4ZWN1dGVCcm93c2VyVGVzdHMgfSBmcm9tIFwiLi90ZXN0aW5nL3Rlc3RSdW5uZXJcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW5Jc29sYXRlZFRlc3RzKHZpZXdzLCBydW5TdGFydEVuZFRlc3RzID0gdHJ1ZSkge1xuICAgIGNvbnNvbGUubG9nKCfwn4+DIHJ1bklzb2xhdGVkVGVzdHM6IExvYWRpbmcgdGVzdHMgZm9yIHZpZXdzOicsIHZpZXdzKTtcbiAgICBsZXQgdGVzdENvdW50ID0gMDtcbiAgICBpZiAocnVuU3RhcnRFbmRUZXN0cykge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vc3RhcnQudGVzdC5qcycpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Db250ZW50KSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vY29udGVudC50ZXN0Jyk7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9kdW1wQ29udGVudC50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlN1YnNjcmlwdGlvbnMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9zdWJzY3JpcHRpb25zLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQ291bnRlcnMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9jb3VudGVycy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlByb3BzKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vcHJvcHMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Qcm92aWRlckRlYnVnKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vcHJvdmlkZXJzLnRlc3QnKTtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2luamVjdGlvblRlc3RpbmcudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5UYWdTd2l0Y2hEZWJ1ZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3RhZ1N3aXRjaC50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkNoaWxkKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vY2hpbGQudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5BcnJheXMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9hcnJheXMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5NaXJyb3JpbmcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9taXJyb3IudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgaWYgKHZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5XYXRjaFRlc3RpbmcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi93YXRjaC50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkZ1bkluUHJvcHNUYWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9mdW5JblByb3BzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQXR0cmlidXRlRGVidWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9hdHRyaWJ1dGVzLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuT25lUmVuZGVyKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vb25lUmVuZGVyLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuVG9kbykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3RvZG9zLnRlc3QnKTtcbiAgICAgICAgKyt0ZXN0Q291bnQ7XG4gICAgfVxuICAgIGlmICh2aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuRGVzdHJveXMpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9kZXN0cm95cy50ZXN0Jyk7XG4gICAgICAgICsrdGVzdENvdW50O1xuICAgIH1cbiAgICBpZiAodmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkJhc2ljKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vYmFzaWMudGVzdCcpO1xuICAgICAgICArK3Rlc3RDb3VudDtcbiAgICB9XG4gICAgY29uc29sZS5kZWJ1Zyhg8J+PgyBSdW5uaW5nICR7dGVzdENvdW50fSB0ZXN0IHN1aXRlcy4uLmApO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXhlY3V0ZUJyb3dzZXJUZXN0cygpO1xuICAgICAgICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgICBjb25zb2xlLmluZm8oYOKchSB0ZXN0cyBjb21wbGV0ZWQgaW4gJHt0aW1lfW1zYCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgdGVzdHMgZmFpbGVkOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFN1YmplY3QsIGRpdiwgaDMsIGlucHV0LCBsYWJlbCwgYSwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBydW5UZXN0aW5nIH0gZnJvbSBcIi4vcnVuVGVzdGluZy5mdW5jdGlvblwiO1xuaW1wb3J0IHsgb3V0cHV0U2VjdGlvbnMgfSBmcm9tIFwiLi9yZW5kZXJlZFNlY3Rpb25zLnRhZ1wiO1xuY2xhc3MgYiB7XG59XG5leHBvcnQgdmFyIFZpZXdUeXBlcztcbihmdW5jdGlvbiAoVmlld1R5cGVzKSB7XG4gICAgVmlld1R5cGVzW1wiQmFzaWNcIl0gPSBcImJhc2ljXCI7XG4gICAgVmlld1R5cGVzW1wiRGVzdHJveXNcIl0gPSBcImRlc3Ryb3lzXCI7XG4gICAgVmlld1R5cGVzW1wiVG9kb1wiXSA9IFwidG9kb1wiO1xuICAgIFZpZXdUeXBlc1tcIkZ1bkluUHJvcHNUYWdcIl0gPSBcImZ1bkluUHJvcHNUYWdcIjtcbiAgICBWaWV3VHlwZXNbXCJPbmVSZW5kZXJcIl0gPSBcIm9uZVJlbmRlclwiO1xuICAgIFZpZXdUeXBlc1tcIldhdGNoVGVzdGluZ1wiXSA9IFwid2F0Y2hUZXN0aW5nXCI7XG4gICAgVmlld1R5cGVzW1wiTWlycm9yaW5nXCJdID0gXCJtaXJyb3JpbmdcIjtcbiAgICBWaWV3VHlwZXNbXCJDb250ZW50XCJdID0gXCJjb250ZW50XCI7XG4gICAgVmlld1R5cGVzW1wiQXJyYXlzXCJdID0gXCJhcnJheXNcIjtcbiAgICBWaWV3VHlwZXNbXCJDb3VudGVyc1wiXSA9IFwiY291bnRlcnNcIjtcbiAgICBWaWV3VHlwZXNbXCJUYWJsZURlYnVnXCJdID0gXCJ0YWJsZURlYnVnXCI7XG4gICAgVmlld1R5cGVzW1wiUHJvcHNcIl0gPSBcInByb3BzXCI7XG4gICAgVmlld1R5cGVzW1wiQ2hpbGRcIl0gPSBcImNoaWxkXCI7XG4gICAgVmlld1R5cGVzW1wiVGFnU3dpdGNoRGVidWdcIl0gPSBcInRhZ1N3aXRjaERlYnVnXCI7XG4gICAgVmlld1R5cGVzW1wiUHJvdmlkZXJEZWJ1Z1wiXSA9IFwicHJvdmlkZXJEZWJ1Z1wiO1xuICAgIFZpZXdUeXBlc1tcIkF0dHJpYnV0ZURlYnVnXCJdID0gXCJhdHRyaWJ1dGVEZWJ1Z1wiO1xuICAgIFZpZXdUeXBlc1tcIlN1YnNjcmlwdGlvbnNcIl0gPSBcInN1YnNjcmlwdGlvbnNcIjtcbn0pKFZpZXdUeXBlcyB8fCAoVmlld1R5cGVzID0ge30pKTtcbmV4cG9ydCBjb25zdCBzdG9yYWdlID0gZ2V0U2NvcGVkU3RvcmFnZSgpO1xuZnVuY3Rpb24gZ2V0U2NvcGVkU3RvcmFnZSgpIHtcbiAgICBjb25zdCBzdHJpbmcgPSBsb2NhbFN0b3JhZ2UudGFnZ2VkanMgfHwgSlNPTi5zdHJpbmdpZnkoeyBhdXRvVGVzdDogdHJ1ZSwgdmlld3M6IE9iamVjdC52YWx1ZXMoVmlld1R5cGVzKSB9KTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHJpbmcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVTY29wZWRTdG9yYWdlKCkge1xuICAgIGxvY2FsU3RvcmFnZS50YWdnZWRqcyA9IEpTT04uc3RyaW5naWZ5KHN0b3JhZ2UpO1xufVxuY29uc3QgZGVmYXVsdFZpZXdUeXBlcyA9IE9iamVjdC52YWx1ZXMoVmlld1R5cGVzKTtcbmV4cG9ydCBjb25zdCBzZWN0aW9uU2VsZWN0b3IgPSB0YWcoKHZpZXdUeXBlcyA9IGRlZmF1bHRWaWV3VHlwZXMpID0+IHtcbiAgICAvLyBTb3J0IHZpZXdUeXBlcyBhbHBoYWJldGljYWxseVxuICAgIGNvbnN0IHNvcnRlZFZpZXdUeXBlcyA9IFsuLi52aWV3VHlwZXNdXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpXG4gICAgICAgIC5tYXAodHlwZSA9PiAoe1xuICAgICAgICB0eXBlLFxuICAgICAgICBtZXRhOiBvdXRwdXRTZWN0aW9ucy5maW5kKHMgPT4gcy52aWV3ID09PSB0eXBlKSxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGRpdihoMygn4a2fIFNlY3Rpb25zJyksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtnYXA6MWVtO2ZsZXgtd3JhcDp3cmFwO21hcmdpbjoxZW07XCIgfSwgXyA9PiBzb3J0ZWRWaWV3VHlwZXMubWFwKCh7IG1ldGEsIHR5cGUgfSkgPT4gZGl2KHsgc3R5bGU6IFwiZmxleDowIDAgYXV0bzttaW4td2lkdGg6MTUwcHg7d2hpdGUtc3BhY2U6bm93cmFwO1wiIH0sIGlucHV0KHtcbiAgICAgICAgbmFtZTogXyA9PiAndmlldy10eXBlLScgKyB0eXBlLFxuICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgIGlkOiBfID0+ICd2aWV3LXR5cGUtJyArIHR5cGUsXG4gICAgICAgIGNoZWNrZWQ6IF8gPT4gc3RvcmFnZS52aWV3cy5pbmNsdWRlcyh0eXBlKSxcbiAgICAgICAgb25DbGljazogKCkgPT4gdG9nZ2xlVmlld1R5cGUodHlwZSksXG4gICAgfSksIF8gPT4gbWV0YT8uZW1vamkgPyBtZXRhLmVtb2ppICsgJyAnIDogbnVsbCwgbGFiZWwoeyBmb3I6IF8gPT4gJ3ZpZXctdHlwZS0nICsgdHlwZSB9LCAnICcsIF8gPT4gdHlwZSksICcgJywgYSh7XG4gICAgICAgIGhyZWY6IF8gPT4gYGlzb2xhdGVkLmh0bWwjJHt0eXBlfWAsXG4gICAgICAgIHN0eWxlOiBcImZvbnQtc2l6ZTouNmVtO3RleHQtZGVjb3JhdGlvbjpub25lO1wiLFxuICAgIH0sICfwn5SXJyksICcgJywgYSh7XG4gICAgICAgIGhyZWY6IF8gPT4gYCMke3R5cGV9YCxcbiAgICAgICAgc3R5bGU6IFwiZm9udC1zaXplOi42ZW07XCIsXG4gICAgfSwgJ+KGl++4jycpKS5rZXkodHlwZSkpLCBfID0+IHZpZXdUeXBlcy5sZW5ndGggPiAxICYmIFtcbiAgICAgICAgZGl2KGxhYmVsKHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHZpZXdUeXBlcy5mb3JFYWNoKHZpZXdUeXBlID0+IHtcbiAgICAgICAgICAgICAgICAvLyB2aWV3Q2hhbmdlZC5uZXh0KHt2aWV3VHlwZSwgY2hlY2tUZXN0aW5nOiBmYWxzZX0pXG4gICAgICAgICAgICAgICAgYWN0aXZhdGUodmlld1R5cGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzYXZlU2NvcGVkU3RvcmFnZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgJyBhbGwnKSksXG4gICAgICAgIGRpdihsYWJlbCh7XG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB2aWV3VHlwZXMuZm9yRWFjaCh2aWV3VHlwZSA9PiB7XG4gICAgICAgICAgICAgICAgZGVhY3RpdmF0ZSh2aWV3VHlwZSk7XG4gICAgICAgICAgICAgICAgc2F2ZVNjb3BlZFN0b3JhZ2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sICcgbm9uZScpKVxuICAgIF0pKTtcbn0pO1xuZnVuY3Rpb24gdG9nZ2xlVmlld1R5cGUodHlwZSwgY2hlY2tUZXN0aW5nID0gdHJ1ZSkge1xuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgIGRlYWN0aXZhdGUodHlwZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2aWV3Q2hhbmdlZC5uZXh0KHsgdHlwZSwgY2hlY2tUZXN0aW5nIH0pO1xuICAgIH1cbiAgICBzYXZlU2NvcGVkU3RvcmFnZSgpO1xufVxuZXhwb3J0IGNvbnN0IHZpZXdDaGFuZ2VkID0gbmV3IFN1YmplY3QoKTtcbmZ1bmN0aW9uIGRlYWN0aXZhdGUodHlwZSkge1xuICAgIChzdG9yYWdlLnZpZXdzID0gc3RvcmFnZS52aWV3cy5maWx0ZXIoeCA9PiB4ICE9PSB0eXBlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUodHlwZSwgY2hlY2tUZXN0aW5nID0gdHJ1ZSkge1xuICAgIHN0b3JhZ2Uudmlld3MucHVzaCh0eXBlKTtcbiAgICBpZiAoY2hlY2tUZXN0aW5nICYmIHN0b3JhZ2UuYXV0b1Rlc3QpIHtcbiAgICAgICAgcnVuVGVzdGluZygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGh0bWwsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IGFycmF5RnVuVGFnID0gdGFnKChpdGVtLCBkZWxldGVJdGVtKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxOTM0N1swXSwgaXRlbSwgKCkgPT4gZGVsZXRlSXRlbShpdGVtKSkpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE5MzQ3OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImJvcmRlcjoxcHggc29saWQgYmxhY2s7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkZWxldGVcIiB9XSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGh0bWwsIG91dHB1dCwgc3RhdGVzLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBhcnJheUZ1blRhZyB9IGZyb20gXCIuL2FycmF5RnVuLnRhZ1wiO1xuaW1wb3J0IHsgbWFpbiB9IGZyb20gXCIuL2Z1bkluUHJvcHMudGFnXCI7XG5leHBvcnQgY29uc3QgZnVuSW5Qcm9wc0NoaWxkID0gdGFnKChhcmcwLCBtYWluUHJvcCwgbXlGdW5jdGlvbjMpID0+IChvdGhlciA9ICdvdGhlcicsIGNvdW50ZXIgPSAwLCByZW5kZXJDb3VudCA9IDAsIF9fID0gc3RhdGVzKGdldCA9PiBbeyBvdGhlciwgY291bnRlciwgcmVuZGVyQ291bnQgfV0gPSBnZXQoeyBvdGhlciwgY291bnRlciwgcmVuZGVyQ291bnQgfSkpLCBfID0gKytyZW5kZXJDb3VudCwgeyBhZGRBcnJheUl0ZW0sIG15RnVuY3Rpb24sIGRlbGV0ZUl0ZW0sIGNoaWxkLCBhcnJheSB9ID0gYXJnMCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNTk4NjY5WzBdLCBtYWluUHJvcC5mdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbWFpblByb3AuY291bnQsIGNoaWxkLm15Q2hpbGRGdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbXlGdW5jdGlvbi5vcmlnaW5hbCA/ICd0YWdnamVkanMtd3JhcHBlZCcgOiAnbm93cmFwJywgbXlGdW5jdGlvbiwgb3V0cHV0KGNoaWxkLm15Q2hpbGRGdW5jdGlvbiksIG15RnVuY3Rpb24zLCBtYWluLmZ1bmN0aW9uLCAoKSA9PiArK2NvdW50ZXIsIGFycmF5Lmxlbmd0aCwgYXJyYXkubWFwKGl0ZW0gPT4gYXJyYXlGdW5UYWcoaXRlbSwgZGVsZXRlSXRlbSkua2V5KGl0ZW0pKSwgYWRkQXJyYXlJdGVtLCBjb3VudGVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnZnVuSW5Qcm9wc190YWdfY2hpbGQnIH0pKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNTk4NjY5OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibWFpbkZ1bmN0aW9uOlwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkRnVuY3Rpb246XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIm15RnVuY3Rpb246XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJmdW5faW5fcHJvcDFcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+ksCArK29iamVjdCBhcmd1bWVudFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImZ1bl9pbl9wcm9wMlwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6SwICsrY2hpbGQubXlDaGlsZEZ1bmN0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZnVuX2luX3Byb3AzXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIivwn6SwICthcmd1bWVudFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfho4gKyttYWluXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA4IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKyttZVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZCBhcnJheSBsZW5ndGg6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJhZGRBcnJheUl0ZW1cIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEyIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dXSB9O1xuIiwiaW1wb3J0IHsgaW5wdXQsIHRhZywgYnV0dG9uIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudFwiO1xuZXhwb3J0IGNvbnN0IGFkZEFycmF5Q29tcG9uZW50ID0gdGFnKChhZGRBcnJheUl0ZW0pID0+IChyZW5kZXJDb3VudCA9IDAsIF9fID0gKytyZW5kZXJDb3VudCwgaGFuZGxlS2V5VXAgPSAoZSkgPT4ge1xuICAgIGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xuICAgICAgICBhZGRBcnJheUl0ZW0odmFsdWUpO1xuICAgICAgICBlLnRhcmdldC52YWx1ZSA9IFwiXCI7XG4gICAgfVxufSkgPT4ge1xuICAgIGNvbnN0IHggPSBbXG4gICAgICAgIGlucHV0KHtcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgb25LZXl1cDogaGFuZGxlS2V5VXAsXG4gICAgICAgICAgICBvbkNoYW5nZTogKGUpID0+IHsgYWRkQXJyYXlJdGVtKGUudGFyZ2V0LnZhbHVlKTsgZS50YXJnZXQudmFsdWUgPSAnJzsgfSxcbiAgICAgICAgfSksXG4gICAgICAgIGJ1dHRvbih7IHR5cGU6IFwiYnV0dG9uXCIsIG9uQ2xpY2s6IGFkZEFycmF5SXRlbSB9LCAnYWRkIGJ5IG91dHNpZGUnKSxcbiAgICAgICAgXyA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnYWRkQXJyYXlDb21wb25lbnQnIH0pXG4gICAgXTtcbiAgICByZXR1cm4geDtcbn0pO1xuIiwiaW1wb3J0IHsgYnV0dG9uLCBzcGFuLCBkaXYsIHN0cm9uZywgaHIsIHRhZyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnRcIjtcbmltcG9ydCB7IGZ1bkluUHJvcHNDaGlsZCB9IGZyb20gXCIuL2Z1bkluUHJvcHNDaGlsZC50YWdcIjtcbmltcG9ydCB7IGFkZEFycmF5Q29tcG9uZW50IH0gZnJvbSBcIi4vYWRkQXJyYXlDb21wb25lbnQudGFnXCI7XG5leHBvcnQgY29uc3QgbWFpbiA9IHtcbiAgICBmdW5jdGlvbjogKCkgPT4gKyttYWluLmNvdW50LFxuICAgIGNvdW50OiAwLFxufTtcbmV4cG9ydCBkZWZhdWx0IHRhZygoKSA9PiAoYXJyYXkgPSBbXSwgY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgc2hvd0NoaWxkID0gdHJ1ZSwgc29tZXRoaW5nRWxzZSA9ICdhJywgbXlGdW5jdGlvbiA9ICgpID0+ICsrY291bnRlciwgXyA9ICsrcmVuZGVyQ291bnQsIGFkZEFycmF5SXRlbSA9ICh4KSA9PiB7XG4gICAgYXJyYXkgPSBhcnJheS5tYXAoeCA9PiB4KTtcbiAgICBhcnJheS5wdXNoKHR5cGVvZiAoeCkgPT09ICdzdHJpbmcnID8geCA6ICdwdXNoJyArIGFycmF5Lmxlbmd0aCk7XG59LCBkZWxldGVJdGVtID0gKGl0ZW0pID0+IGFycmF5ID0gYXJyYXkuZmlsdGVyKHggPT4geCAhPT0gaXRlbSkpID0+IGRpdihidXR0b24oeyBpZDogXCJmdW4tcGFyZW50LWJ1dHRvblwiLCBvbkNsaWNrOiBteUZ1bmN0aW9uIH0sICfwn6SwICsrcGFyZW50JyksIHNwYW4oeyBpZDogXCJmdW5faW5fcHJvcF9kaXNwbGF5XCIgfSwgXyA9PiBjb3VudGVyKSwgXyA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnZnVuSW5Qcm9wc190YWdfcGFyZW50JyB9KSwgZGl2KHN0cm9uZygn8J+GjiBtYWluOicpLCBzcGFuKHsgaWQ6IFwibWFpbl93cmFwX3N0YXRlXCIgfSwgXyA9PiBtYWluLmZ1bmN0aW9uLm9yaWdpbmFsID8gJ3RhZ2dqZWRqcy13cmFwcGVkJyA6ICdub3dyYXAnKSwgJzonLCBfID0+IG1haW4uY291bnQpLCBidXR0b24oe1xuICAgIGlkOiBcInRvZ2dsZS1mdW4taW4tY2hpbGRcIixcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHNob3dDaGlsZCA9ICFzaG93Q2hpbGRcbn0sICd0b2dnbGUgY2hpbGQnKSwgJ2FycmF5IGxlbmd0aDogJywgYXJyYXkubGVuZ3RoLCBidXR0b24oeyBvbkNsaWNrOiBhZGRBcnJheUl0ZW0gfSwgJ3Jlc2V0IGFkZCcpLCBocigpLCBfID0+IHNob3dDaGlsZCAmJiBmdW5JblByb3BzQ2hpbGQoe1xuICAgIG15RnVuY3Rpb24sIGFycmF5LCBhZGRBcnJheUl0ZW0sIGRlbGV0ZUl0ZW0sXG4gICAgY2hpbGQ6IHsgbXlDaGlsZEZ1bmN0aW9uOiBteUZ1bmN0aW9uIH1cbn0sIG1haW4sIG15RnVuY3Rpb24pLCBfID0+IGFkZEFycmF5Q29tcG9uZW50KGFkZEFycmF5SXRlbSkpKTtcbiIsImltcG9ydCB7IHN0YXRlcywgaHRtbCwgdGFnIH0gZnJvbSAndGFnZ2VkanMnO1xuZXhwb3J0IGNvbnN0IEl0ZW0gPSB0YWcuaW1tdXRhYmxlUHJvcHMoKHRvZG8sIGRpc3BhdGNoLCBpbmRleCkgPT4gKGVkaXRpbmcgPSBmYWxzZSwgXyA9IHN0YXRlcyhnZXQgPT4gW2VkaXRpbmddID0gZ2V0KGVkaXRpbmcpKSkgPT4ge1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzNDk5NzZbMF0sIHRvZG8uY29tcGxldGVkLCBlZGl0aW5nLCAhZWRpdGluZyA/IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczM0OTk3NlsxXSwgdG9kby5jb21wbGV0ZWQgJiYgJ+KchScsIChlKSA9PiBkaXNwYXRjaC50b2dnbGVJdGVtKHRvZG8sIGluZGV4KSwgdG9kby5jb21wbGV0ZWQgJiYgJ2NoZWNrZWQnLCAoKSA9PiBkaXNwYXRjaC50b2dnbGVJdGVtKHRvZG8sIGluZGV4KSwgKCkgPT4gZWRpdGluZyA9ICFlZGl0aW5nLCB0b2RvLnRpdGxlLCAoKSA9PiBkaXNwYXRjaC5yZW1vdmVJdGVtQnlJbmRleChpbmRleCkpIDogaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzQ5OTc2WzJdLCB0b2RvLnRpdGxlLCAoKSA9PiBlZGl0aW5nID0gZmFsc2UsIChlKSA9PiBoYW5kbGVLZXkoZSwgdGl0bGUgPT4ge1xuICAgICAgICBoYW5kbGVVcGRhdGUodGl0bGUsIHRvZG8sIGluZGV4LCBkaXNwYXRjaCk7XG4gICAgICAgIGVkaXRpbmcgPSBmYWxzZTtcbiAgICB9KSkpO1xufSk7XG5mdW5jdGlvbiBoYW5kbGVVcGRhdGUodGl0bGUsIHRvZG8sIGluZGV4LCBkaXNwYXRjaCkge1xuICAgIGlmICh0aXRsZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGlzcGF0Y2gucmVtb3ZlSXRlbSh0b2RvLmlkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXNwYXRjaC51cGRhdGVUb0J5SW5kZXgodG9kbywgeyB0aXRsZSB9LCBpbmRleCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlS2V5KGUsIG9uVmFsaWQpIHtcbiAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgb25WYWxpZCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbjtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MzNDk5NzY6IFtbeyBcIm5uXCI6IFwibGlcIiwgXCJhdFwiOiBbW1wiY2xhc3MuY29tcGxldGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIFwiY2xhc3NcIl0sIFtcImNsYXNzLmVkaXRpbmdcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgXCJjbGFzc1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ2aWV3XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1widmFsdWVcIiwgXCJ0b2dnbGVcIl1dIH0sIHsgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidG9nZ2xlXCJdLCBbXCJ0eXBlXCIsIFwiY2hlY2tib3hcIl0sIFt7IFwidGFnSnNWYXJcIjogMiB9XSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJkYXRhLXRlc3RpZFwiLCBcInRvZG8taXRlbS1sYWJlbFwiXSwgW1wiZGJsY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcImRlc3Ryb3lcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+Xke+4jyBkZXN0cm95XCIgfV0gfV0gfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJpbnB1dC1jb250YWluZXJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJpbnB1dFwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImVkaXQtdG9kby1pbnB1dFwiXSwgW1widHlwZVwiLCBcInRleHRcIl0sIFtcImF1dG9mb2N1c1wiXSwgW1wiY2xhc3NcIiwgXCJlZGl0XCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiYmx1clwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wia2V5ZG93blwiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwibGFiZWxcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ2aXN1YWxseS1oaWRkZW5cIl0sIFtcImh0bWxmb3JcIiwgXCJ0b2RvLWlucHV0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiRWRpdCBUb2RvIElucHV0XCIgfV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGhhbmRsZUtleSB9IGZyb20gXCIuL2l0ZW0uanNcIjtcbmV4cG9ydCBjb25zdCBIZWFkZXIgPSAoZGlzcGF0Y2gpID0+IHRhZy5yZW5kZXJPbmNlID0gKCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNDc4NjBbMF0sIChlKSA9PiB7XG4gICAgY29uc3QgZW50ZXIgPSBoYW5kbGVLZXkoZSwgdGl0bGUgPT4gZGlzcGF0Y2guYWRkSXRlbSh0aXRsZSkpO1xuICAgIGlmIChlbnRlcikge1xuICAgICAgICBlLnRhcmdldC52YWx1ZSA9IFwiXCI7XG4gICAgfVxufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNDc4NjA6IFtbeyBcIm5uXCI6IFwiaGVhZGVyXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwiaGVhZGVyXCJdLCBbXCJkYXRhLXRlc3RpZFwiLCBcImhlYWRlclwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImgxXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInRvZG9zXCIgfV0gfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1wiYXV0b2ZvY3VzXCJdLCBbXCJjbGFzc1wiLCBcIm5ldy10b2RvXCJdLCBbXCJwbGFjZWhvbGRlclwiLCBcIldoYXQgbmVlZHMgdG8gYmUgZG9uZT9cIl0sIFtcImtleWRvd25cIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgdGFnLCBodG1sIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgRm9vdGVyID0gdGFnLmltbXV0YWJsZVByb3BzKCh0b2Rvc0NvdW50LCByZW1vdmVDb21wbGV0ZWQsIHJvdXRlLCBhY3RpdmVUb2RvQ291bnQpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczc3MTU2WzBdLCBhY3RpdmVUb2RvQ291bnQsIGFjdGl2ZVRvZG9Db3VudCA+IDEgJiYgXCJzXCIsIHJvdXRlID09PSBcIi9cIiwgcm91dGUgPT09IFwiL2FjdGl2ZVwiLCByb3V0ZSA9PT0gXCIvY29tcGxldGVkXCIsICh0b2Rvc0NvdW50IC0gYWN0aXZlVG9kb0NvdW50KSA+IDAgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzcxNTZbMV0sICgpID0+IHJlbW92ZUNvbXBsZXRlZCgpKSkpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczc3MTU2OiBbW3sgXCJublwiOiBcImZvb3RlclwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcImZvb3RlclwiXSwgW1wiZGF0YS10ZXN0aWRcIiwgXCJmb290ZXJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwidG9kby1jb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIGl0ZW1cIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBsZWZ0IVwiIH1dIH0sIHsgXCJublwiOiBcInVsXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwiZmlsdGVyc1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxpXCIsIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2RvLXZpZXctYWxsLWxpbmtcIl0sIFtcImNsYXNzLnNlbGVjdGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIFwiY2xhc3NcIl0sIFtcImhyZWZcIiwgXCIjL1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkFsbFwiIH1dIH1dIH0sIHsgXCJublwiOiBcImxpXCIsIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2RvLXZpZXctYWN0aXZlLWxpbmtcIl0sIFtcImNsYXNzLnNlbGVjdGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiAzIH0sIFwiY2xhc3NcIl0sIFtcImhyZWZcIiwgXCIjL2FjdGl2ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkFjdGl2ZVwiIH1dIH1dIH0sIHsgXCJublwiOiBcImxpXCIsIFwiY2hcIjogW3sgXCJublwiOiBcImFcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2RvLXZpZXctY29tcGxldGVkLWxpbmtcIl0sIFtcImNsYXNzLnNlbGVjdGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIFwiY2xhc3NcIl0sIFtcImhyZWZcIiwgXCIjL2NvbXBsZXRlZFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNvbXBsZXRlZFwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0sIFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJjbGVhci1jb21wbGV0ZWRcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiQ2xlYXIgY29tcGxldGVkXCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBIZWFkZXIgfSBmcm9tIFwiLi9jb21wb25lbnRzL2hlYWRlci5qc1wiO1xuaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSBcIi4vY29tcG9uZW50cy9mb290ZXIuanNcIjtcbmltcG9ydCB7IHRvZG9SZWR1Y2VyIH0gZnJvbSBcIi4vcmVkdWNlci5qc1wiO1xuaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgdXNlSGFzaFJvdXRlciB9IGZyb20gXCIuL0hhc2hSb3V0ZXIuZnVuY3Rpb24uanNcIjtcbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi9jb21wb25lbnRzL2l0ZW0uanNcIjtcbmV4cG9ydCBjb25zdCB0b2RvcyA9IFtdO1xuY29uc3QgZGlzcGF0Y2ggPSB0b2RvUmVkdWNlcih0b2Rvcyk7XG5leHBvcnQgY29uc3QgdG9kb0FwcCA9ICgpID0+IHtcbiAgICBjb25zdCByb3V0ZSA9IHVzZUhhc2hSb3V0ZXIoKS5yb3V0ZTtcbiAgICBjb25zdCBhY3RpdmVUb2RvQ291bnQgPSB0b2Rvcy5maWx0ZXIoKHRvZG8pID0+ICF0b2RvLmNvbXBsZXRlZCkubGVuZ3RoO1xuICAgIGNvbnN0IGlzQWN0aXZlUm91dGUgPSByb3V0ZSA9PT0gXCIvYWN0aXZlXCI7XG4gICAgY29uc3QgaXNDb21wbGV0ZWRSb3V0ZSA9IHJvdXRlID09PSBcIi9jb21wbGV0ZWRcIjtcbiAgICBjb25zdCB2aXNpYmxlVG9kb3MgPSBpc0FjdGl2ZVJvdXRlICYmIHRvZG9zLmZpbHRlcih0b2RvID0+ICF0b2RvLmNvbXBsZXRlZCkgfHxcbiAgICAgICAgaXNDb21wbGV0ZWRSb3V0ZSAmJiB0b2Rvcy5maWx0ZXIodG9kbyA9PiB0b2RvLmNvbXBsZXRlZCkgfHwgdG9kb3M7XG4gICAgY29uc3QgdG9kb0NvdW50ID0gdG9kb3MubGVuZ3RoO1xuICAgIGNvbnN0IG5ld01hcCA9IHZpc2libGVUb2Rvcy5tYXAoKHRvZG8sIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBJdGVtKHRvZG8sIGRpc3BhdGNoLCBpbmRleCkua2V5KHRvZG8uaWQpO1xuICAgIH0pO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNDMxODBbMF0sIC8qYXV0b1Rlc3RpbmdDb250cm9scyhbVmlld1R5cGVzLlRvZG9dLCBmYWxzZSkqLyBmYWxzZSwgSGVhZGVyKGRpc3BhdGNoKSwgdG9kb0NvdW50ID4gMCAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNDMxODBbMV0sIGFjdGl2ZVRvZG9Db3VudCA8IDEgPyAxIDogMCwgKGUpID0+IGRpc3BhdGNoLnRvZ2dsZUFsbChlLnRhcmdldC5jaGVja2VkKSwgbmV3TWFwLCBGb290ZXIodG9kb0NvdW50LCBkaXNwYXRjaC5yZW1vdmVDb21wbGV0ZWQsIHJvdXRlLCBhY3RpdmVUb2RvQ291bnQpKSk7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE0MzE4MDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfV0sIFt7IFwibm5cIjogXCJtYWluXCIsIFwiYXRcIjogW1tcImNsYXNzXCIsIFwibWFpblwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZ2dsZS1hbGwtY29udGFpbmVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJ0b2dnbGUtYWxsXCJdLCBbXCJjbGFzc1wiLCBcInRvZ2dsZS1hbGxcIl0sIFtcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW1wiY2hlY2tlZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJjbGFzc1wiLCBcInRvZ2dsZS1hbGwtbGFiZWxcIl0sIFtcImZvclwiLCBcInRvZ2dsZS1hbGxcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJUb2dnbGUgQWxsIElucHV0XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidWxcIiwgXCJhdFwiOiBbW1wiY2xhc3NcIiwgXCJ0b2RvLWxpc3Qgc2hvdy1wcmlvcml0eVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICAgIFwiIH1dXSB9O1xuIiwiZnVuY3Rpb24gdXVpZCgpIHtcbiAgICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9kb1JlZHVjZXIodG9kb3MpIHtcbiAgICBmdW5jdGlvbiBhZGRJdGVtKHRpdGxlKSB7XG4gICAgICAgIHRvZG9zLnB1c2goeyBpZDogdXVpZCgpLCB0aXRsZSwgY29tcGxldGVkOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVJdGVtKGlkKSB7XG4gICAgICAgIHJldHVybiB0b2Rvcy5maWx0ZXIoKHQpID0+IHQuaWQgIT09IGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlSXRlbUJ5SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdG9kb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b2dnbGVJdGVtKHRvZG8sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVUb0J5SW5kZXgodG9kbywgeyBjb21wbGV0ZWQ6ICF0b2RvLmNvbXBsZXRlZCB9LCBpbmRleCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbCgpIHtcbiAgICAgICAgdG9kb3MgPSBbXTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b2dnbGVBbGwoY29tcGxldGVkKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gdG9kb3MubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgLS1pbmRleCkge1xuICAgICAgICAgICAgdG9kb3NbaW5kZXhdID0ge1xuICAgICAgICAgICAgICAgIC4uLnRvZG9zW2luZGV4XSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2RvcztcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQ29tcGxldGVkKCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRvZG9zLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh0b2Rvc1tpbmRleF0uY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgdG9kb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9kb3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVRvQnlJbmRleCh0b2RvLCBwYXJ0aWFsLCBpbmRleCkge1xuICAgICAgICB0b2Rvc1tpbmRleF0gPSB7IC4uLnRvZG8sIC4uLnBhcnRpYWwgfTtcbiAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRJdGVtLFxuICAgICAgICByZW1vdmVJdGVtLFxuICAgICAgICB0b2dnbGVJdGVtLFxuICAgICAgICByZW1vdmVBbGwsXG4gICAgICAgIHRvZ2dsZUFsbCxcbiAgICAgICAgcmVtb3ZlQ29tcGxldGVkLFxuICAgICAgICByZW1vdmVJdGVtQnlJbmRleCxcbiAgICAgICAgY29tcGxldGVJdGVtOiBmdW5jdGlvbiBjb21wbGV0ZUl0ZW0odG9kbywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVUb0J5SW5kZXgodG9kbywgeyBjb21wbGV0ZWQ6IHRydWUgfSwgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVJdGVtQnlJbmRleDogZnVuY3Rpb24gdXBkYXRlSXRlbUJ5SW5kZXgodG9kbywgaW5kZXgpIHtcbiAgICAgICAgICAgIHRvZG9zW2luZGV4XSA9IHsgLi4udG9kbyB9O1xuICAgICAgICAgICAgcmV0dXJuIHRvZG9zO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVUb0J5SW5kZXgsXG4gICAgfTtcbn1cbjtcbiIsImltcG9ydCB7IGh0bWwsIHN0YXRlcywgdGFnLCBpc1N1YmplY3RJbnN0YW5jZSwgZmllbGRzZXQsIGRpdiwgbGVnZW5kLCBzcGFuLCBidXR0b24gfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5leHBvcnQgY29uc3QgaW5uZXJIdG1sVGVzdCA9IHRhZygoX3Byb3BzLCBiLCAvLyBUT0RPOiByZW1vdmUsIG5vdCBpbiB1c2VcbmNoaWxkcmVuKSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgaW5uZXJIdG1sVGVzdC51cGRhdGVzKHggPT4gW19wcm9wcywgYiwgY2hpbGRyZW5dID0geCk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gZmllbGRzZXQoeyBpZDogXCJpbm5lckh0bWxUZXN0cy0xXCIgfSwgbGVnZW5kKCdubyBwcm9wcyB0ZXN0JyksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoycHggc29saWQgcHVycGxlO1wiIH0sIF8gPT4gY2hpbGRyZW4pLCBkaXYoXyA9PiBgaXNTdWJqZWN0SW5zdGFuY2U6JHtpc1N1YmplY3RJbnN0YW5jZShjaGlsZHJlbil9YCksIGRpdihfID0+IGBpc1N1YmplY3RUYWdBcnJheToke2NoaWxkcmVuIGluc3RhbmNlb2YgQXJyYXl9YCksIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcImlubmVySHRtbFRlc3QtY291bnRlci1idXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4gKytjb3VudGVyLFxuICAgIH0sIF8gPT4gYGluY3JlYXNlIGlubmVySHRtbFRlc3QgJHtjb3VudGVyfWApLCBzcGFuKHsgaWQ6IFwiaW5uZXJIdG1sVGVzdC1jb3VudGVyLWRpc3BsYXlcIiB9LCBfID0+IGNvdW50ZXIpLCBfID0+IHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdpbm5lckh0bWxUZXN0JyB9KSk7XG59KTtcbmV4cG9ydCBjb25zdCBpbm5lckh0bWxQcm9wc1Rlc3QgPSB0YWcoKHgsIGNoaWxkcmVuKSA9PiAoY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgXyA9IHN0YXRlcyhnZXQgPT4gW3sgY291bnRlciwgcmVuZGVyQ291bnQgfV0gPSBnZXQoeyBjb3VudGVyLCByZW5kZXJDb3VudCB9KSksIF9fID0gKytyZW5kZXJDb3VudCkgPT4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMTI3MDkwWzBdLCB4LCBjaGlsZHJlbiwgKCkgPT4gKytjb3VudGVyLCBjb3VudGVyLCBjb3VudGVyLCAvKnJlbmRlckNvdW50RGl2KHJlbmRlckNvdW50KSovIGZhbHNlKSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTI3MDkwOiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1pbm5lckh0bWxUZXN0cy5qcy0tPlwiIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sVGVzdHMtMlwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbm5lckhUTUwgUHJvcHM6IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxQcm9wc1Rlc3QtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImluY3JlYXNlIGlubmVySHRtbFByb3BzVGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxQcm9wc1Rlc3QtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGdldElubmVySFRNTCwgaHRtbCwgc3RhdGVzLCB0YWcsIGZpZWxkc2V0LCBsZWdlbmQsIGRpdiB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgaW5uZXJIdG1sUHJvcHNUZXN0LCBpbm5lckh0bWxUZXN0IH0gZnJvbSBcIi4vaW5uZXJIdG1sVGVzdHMuanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5jb25zdCB0ZXN0MjIgPSB0YWcoKGEsIGIsIGNoaWxkcmVuKSA9PiB7XG4gICAgdGVzdDIyLnVwZGF0ZXMoeCA9PiBbYSwgYiwgY2hpbGRyZW5dID0geCk7XG4gICAgcmV0dXJuIGZpZWxkc2V0KGxlZ2VuZCgneHh4eHgnKSwgZGl2KCdoZWxsbyBvdGhlciB3b3JsZCcsIF8gPT4gYSwgJyAtICcsIF8gPT4gYiksIGRpdih7IHN0eWxlOiBcImJvcmRlcjoycHggc29saWQgcmVkO1wiIH0sICcqKionLCBfID0+IGNoaWxkcmVuLCAnKioqJykpO1xufSk7XG5jb25zdCBub1RhZ1Rlc3QgPSAoKSA9PiB7XG4gICAgY29uc3QgaW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MKCk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczgwMTk3NFswXSwgMTEsIGlubmVySFRNTCwgMjIpLmFjY2VwdElubmVySFRNTChpbm5lckhUTUwpO1xufTtcbmV4cG9ydCBjb25zdCBjaGlsZCA9IHRhZygoXyA9ICdjaGlsZFRlc3RzJykgPT4gKHJlbmRlckNvdW50ID0gMCwgY291bnRlciA9IDAsIF8gPSBzdGF0ZXMoZ2V0ID0+IFt7IHJlbmRlckNvdW50LCBjb3VudGVyIH1dID0gZ2V0KHsgcmVuZGVyQ291bnQsIGNvdW50ZXIgfSkpLCBfXyA9ICsrcmVuZGVyQ291bnQpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczgwMTk3NFsxXSwgdGVzdDIyKDEsIDIsIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczgwMTk3NFsyXSwgRGF0ZS5ub3coKSkpLCBpbm5lckh0bWxUZXN0KHt9LCAyLCBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MDE5NzRbM10sICgpID0+ICsrY291bnRlciwgY291bnRlciwgcmVuZGVyQ291bnQsIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjaGlsZFRlc3RzLWlubmVySHRtbFRlc3QnIH0pKSksIG5vVGFnVGVzdCgpLmlubmVySFRNTCA9IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczgwMTk3NFs0XSwgKCkgPT4gKytjb3VudGVyLCBjb3VudGVyLCByZW5kZXJDb3VudCwgY291bnRlciwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2NoaWxkVGVzdHMtaW5uZXJIdG1sVGVzdC1jJyB9KSksIGlubmVySHRtbFByb3BzVGVzdCgyMiwgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODAxOTc0WzVdLCAoKSA9PiArK2NvdW50ZXIsIGNvdW50ZXIsIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdpbm5lckh0bWxQcm9wc1Rlc3QgY2hpbGQnIH0pKSksIGNoaWxkQXNQcm9wVGVzdCh7IGNoaWxkOiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M4MDE5NzRbNl0sICgpID0+ICsrY291bnRlciwgY291bnRlciwgY291bnRlcikgfSksICgpID0+ICsrY291bnRlciwgY291bnRlciwgcmVuZGVyQ291bnQsIGNvdW50ZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjaGlsZFRlc3RzJyB9KSkpO1xuY29uc3QgY2hpbGRBc1Byb3BUZXN0ID0gdGFnKCh7IGNoaWxkIH0pID0+IHtcbiAgICBjaGlsZEFzUHJvcFRlc3QudXBkYXRlcyh4ID0+IFt7IGNoaWxkIH1dID0geCk7XG4gICAgcmV0dXJuIGZpZWxkc2V0KGxlZ2VuZCgnY2hpbGQgYXMgcHJvcCcpLCBfID0+IGNoaWxkKTtcbn0pO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczgwMTk3NDogW1t7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibm9UYWdUZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItLS1cIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisrK1wiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXg6MiAyIDIwZW1cIl0sIFtcImlkXCIsIFwiY2hpbGRyZW4tdGVzdFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZFRlc3RzXCIgfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBcXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkVGVzdHMtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkK4gaW5jcmVhc2UgY2hpbGRUZXN0cyBvdXRzaWRlIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiIC0gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGRUZXN0cy1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA5IH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYWJjLTEyMy1cIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImhyXCIgfV0gfV0sIFt7IFwibm5cIjogXCJiXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkZpZWxkIHNldCBib2R5IEFcIiB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFRlc3QtY2hpbGRUZXN0cy1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QriAoQSkgaW5jcmVhc2UgY2hpbGRUZXN0cyBpbnNpZGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICAgIFwiIH1dLCBbeyBcIm5uXCI6IFwiYlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJGaWVsZCBzZXQgYm9keSBDXCIgfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxUZXN0LWNoaWxkVGVzdHMtYnV0dG9uLWNcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QriAoQykgaW5jcmVhc2UgY2hpbGRUZXN0cyBpbnNpZGUgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5uZXJIdG1sVGVzdC1jaGlsZFRlc3RzLWRpc3BsYXktY1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgXCIgfV0sIFt7IFwibm5cIjogXCJiXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkZpZWxkIHNldCBib2R5IEJcIiB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImlubmVySHRtbFByb3BzVGVzdC1jaGlsZFRlc3RzLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CuIChCKSBpbmNyZWFzZSBjaGlsZFRlc3RzIGluc2lkZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbm5lckh0bWxQcm9wc1Rlc3QtY2hpbGRUZXN0cy1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICBcIiB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgICAgIGhlbGxvIGNoaWxkIGFzIHByb3AgdGVzdFwiIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkLWFzLXByb3AtdGVzdC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QriBjaGlsZCBhcyBwcm9wIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNoaWxkLWFzLXByb3AtdGVzdC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XV0gfTtcbiIsImltcG9ydCB7IG9uRGVzdHJveSwgc2lnbmFsLCB0YWcsIGhvc3QsIHNwYW4sIGJ1dHRvbiwgZGl2IH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xubGV0IGRlc3Ryb3lDb3VudCA9IHNpZ25hbCgwKTsgLy8gbGV0cyB1c2UgU2lnbmFsc1xuZXhwb3J0IGNvbnN0IGRlc3Ryb3lzID0gdGFnKCgpID0+IChvbiA9IHRydWUsIHJlbmRlckNvdW50ID0gMCwgX18gPSArK3JlbmRlckNvdW50KSA9PiBkaXYoJ2Rlc3Ryb3lDb3VudDogJywgc3Bhbih7IGlkOiBcImRlc3Ryb3lDb3VudFwiIH0sIF8gPT4gZGVzdHJveUNvdW50KSwgJ29uL29mZjogJywgXyA9PiBvbiwgXyA9PiBvbiAmJiB0b0Rlc3Ryb3koKSwgYnV0dG9uKHtcbiAgICBpZDogXCJ0b2dnbGUtZGVzdHJveXNcIiwgdHlwZTogXCJidXR0b25cIixcbiAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIG9uID0gIW9uO1xuICAgIH0sXG59LCBfID0+IG9uID8gJ2Rlc3Ryb3knIDogJ3Jlc3RvcmUnKSwgKCkgPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ2Rlc3Ryb3lzJyB9KSkpO1xuY29uc3QgdG9EZXN0cm95ID0gdGFnKCgpID0+IChfID0gb25EZXN0cm95KCgpID0+ICsrZGVzdHJveUNvdW50LnZhbHVlKSkgPT4gZGl2LmF0dHIoaG9zdC5vbkRlc3Ryb3koKCkgPT4ge1xuICAgICsrZGVzdHJveUNvdW50LnZhbHVlO1xufSkpKHtcbiAgICBpZDogXCJkZXN0cm95YWJsZS1jb250ZW50XCIsIHN0eWxlOiBcImJvcmRlcjoxcHggc29saWQgb3JhbmdlO1wiXG59LCAnd2lsbCBiZSBkZXN0cm95ZWQnKSk7XG4iLCJpbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gJy4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzJztcbmltcG9ydCB7IGh0bWwsIHN0YXRlcywgdGFnIH0gZnJvbSAndGFnZ2VkanMnO1xuZXhwb3J0IGNvbnN0IGFycmF5U2NvcmVEYXRhID0gdGFnKCh7IHNjb3JlLCBwbGF5ZXJJbmRleCB9KSA9PiB7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFtyZW5kZXJDb3VudF0gPSBnZXQocmVuZGVyQ291bnQpKTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2Nzg3OFswXSwgc2NvcmUuZnJhbWUsIGBzY29yZS1kYXRhLSR7cGxheWVySW5kZXh9LSR7c2NvcmUuZnJhbWV9LWluc2lkZS1idXR0b25gLCAoKSA9PiArK3Njb3JlLnNjb3JlLCBzY29yZS5zY29yZSwgYHNjb3JlLWRhdGEtJHtwbGF5ZXJJbmRleH0tJHtzY29yZS5mcmFtZX0taW5zaWRlLWRpc3BsYXlgLCBzY29yZS5zY29yZSwgKCkgPT4gKytyZW5kZXJDb3VudCwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3Njb3JlRGF0YScgKyBzY29yZS5mcmFtZSB9KSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M2Nzg3ODogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgZnJhbWU6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImlubmVyIHNjb3JlIGJ1dHRvbiArK1wiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA2IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW5jcmVhc2UgcmVuZGVyQ291bnRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV1dIH07XG4iLCJpbXBvcnQgeyBmeCwgZnhHcm91cCB9IGZyb20gJ3RhZ2dlZGpzLWFuaW1hdGUtY3NzJztcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSAnLi9yZW5kZXJDb3VudC5jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgYXJyYXlTY29yZURhdGEgfSBmcm9tICcuL2FycmF5U2NvcmVEYXRhLnRhZy5qcyc7XG5pbXBvcnQgeyB0YWcsIGFycmF5LCBzdWJzY3JpYmUsIGRpdiwgZmllbGRzZXQsIGxlZ2VuZCwgYnV0dG9uLCBzcGFuLCBzdXAgfSBmcm9tICd0YWdnZWRqcyc7XG5leHBvcnQgY29uc3QgYXJyYXlzID0gdGFnKCgpID0+IHtcbiAgICBjb25zdCBwbGF5ZXJzID0gW107XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgY29uc3Qgc2lnbmFsQXJyYXkgPSBhcnJheShbJ2QnLCAnZScsICdmJ10pO1xuICAgIGNvbnN0IHNpbXBsZUFycmF5ID0gWydhJywgJ2InLCAnYyddO1xuICAgIGNvbnN0IGFycmF5RnggPSBmeEdyb3VwKHsgc3RhZ2dlcjogMTAsIGR1cmF0aW9uOiAnLjFzJyB9KTtcbiAgICBjb25zdCBnZXROZXdQbGF5ZXIgPSAoKSA9PiAoe1xuICAgICAgICBuYW1lOiAnUGVyc29uICcgKyBwbGF5ZXJzLmxlbmd0aCxcbiAgICAgICAgc2NvcmVzOiAnMCwnLnJlcGVhdCgvKmZyYW1lQ291bnQqLyAwKS5zcGxpdCgnLCcpLm1hcCgoX3YsIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgZnJhbWU6IGluZGV4ICsgMSxcbiAgICAgICAgICAgIHNjb3JlOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KSArIDFcbiAgICAgICAgfSkpXG4gICAgfSk7XG4gICAgY29uc3QgcmVtb3ZlUGxheWVyQnlJbmRleCA9IChpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBwbGF5ZXIgPSBwbGF5ZXJzW2luZGV4XTtcbiAgICAgICAgcGxheWVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBwbGF5ZXIuZWRpdCA9ICFwbGF5ZXIuZWRpdDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGFkZEFycmF5U2lnbmFsKGxvb3BUaW1lcykge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9vcFRpbWVzOyArK2luZGV4KSB7XG4gICAgICAgICAgICBzaWduYWxBcnJheVtzaWduYWxBcnJheS5sZW5ndGhdID0gc2lnbmFsQXJyYXkubGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gZGl2KHNwYW4oJ2NvdW50IGRpc3BsYXk6Jywgc3Bhbih7IGlkOiBcImFycmF5cy1jb3VudGVyLWRpc3BsYXlcIiB9LCBfID0+IGNvdW50ZXIpKSwgZmllbGRzZXQobGVnZW5kKCdzaWduYWwgYXJyYXkgdGVzdCAnLCBzdXAoeyBpZDogXCJzaWduYWwtYXJyYXktY291bnRcIiB9LCBfID0+IHNpZ25hbEFycmF5Lmxlbmd0aCkpLCBkaXYoeyBzdHlsZTogXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiIH0sIHN1YnNjcmliZShzaWduYWxBcnJheSwgYXJyYXkgPT4ge1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKCh4LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRpdih7XG4gICAgICAgICAgICAgICAgYXR0cjogYXJyYXlGeCxcbiAgICAgICAgICAgICAgICBpZDogXyA9PiBgc2lnbmFsLWFycmF5LWl0ZW0tJHtpbmRleH1gLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBcImJvcmRlcjoxcHggc29saWQgYmxhY2s7Ym9yZGVyLXJhZGl1czouMmVtXCJcbiAgICAgICAgICAgIH0sICdpbmRleDonLCBfID0+IGluZGV4LCAnIGNvdW50ZXI6Jywgc3Bhbih7IGlkOiBfID0+IGBzaWduYWwtYXJyYXktaXRlbS1jb3VudGVyLWRpc3BsYXktJHtpbmRleH1gIH0sIF8gPT4gY291bnRlciksICcgY29udGVudDonLCBfID0+IHgsICcgbGVuZ3RoOicsIF8gPT4gc2lnbmFsQXJyYXkubGVuZ3RoLCBidXR0b24oe1xuICAgICAgICAgICAgICAgIGlkOiBgc2lnbmFsLWFycmF5LWl0ZW0tZGVsZXRlLWJ0bi0ke2luZGV4fWAsXG4gICAgICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzaWduYWxBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sICfwn5eR77iPIGRlbGV0ZSBzdWJzY3JpYmUnKSwgYnV0dG9uKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrY291bnRlclxuICAgICAgICAgICAgfSwgJysrY291bnRlciAnLCBfID0+IGNvdW50ZXIpKS5rZXkoeCk7XG4gICAgICAgIH0pO1xuICAgIH0pLCBcbiAgICAvKiogYWRkaXRpb25hbCBidXR0b25zL2NvbnRyb2xzICovXG4gICAgZGl2KGJ1dHRvbih7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIGlkOiBcInNpZ25hbC1hcnJheS1pbmNyZWFzZS1jb3VudGVyXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrY291bnRlclxuICAgIH0sICcrK2NvdW50ZXIgJywgXyA9PiBjb3VudGVyKSwgYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgaWQ6IFwicHVzaC1zaWduYWwtYXJyYXktYnRuXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGFkZEFycmF5U2lnbmFsKDEpXG4gICAgfSwgJ2FkZCBudW1iZXInKSwgYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4gYWRkQXJyYXlTaWduYWwoMTApXG4gICAgfSwgJ2FkZCAxMCBudW1iZXInKSwgYnV0dG9uKHtcbiAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2lnbmFsQXJyYXlbc2lnbmFsQXJyYXkubGVuZ3RoXSA9IHNpZ25hbEFycmF5Lmxlbmd0aC50b1N0cmluZygpO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICB9LCAnYWRkIG51bWJlciBieSBkZWxheScpLCBidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBzaWduYWxBcnJheS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICB9LCAnZGVsYXkgY2xlYXIgYXJyYXknKSkpKSwgZmllbGRzZXQoeyBzdHlsZTogXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiIH0sIGxlZ2VuZCgnc2ltcGxlIGFycmF5IHRlc3QgLSBsZW5ndGg6JywgXyA9PiBzaW1wbGVBcnJheS5sZW5ndGgpLCBfID0+IHNpbXBsZUFycmF5Lm1hcCgoeCwgaW5kZXgpID0+IGRpdignY291bnRlcjonLCBfID0+IGNvdW50ZXIsICcgaW5kZXg6JywgXyA9PiBpbmRleCwgJyB4OicsIF8gPT4geCwgJyBsZW5ndGg6JywgXyA9PiBzaW1wbGVBcnJheS5sZW5ndGgsIGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHNpbXBsZUFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9LCAn8J+Xke+4jyBkZWxldGUgc2ltcGxlJykpLmtleSh4KSksIGRpdihidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiArK2NvdW50ZXJcbiAgICB9LCAnKytjb3VudGVyICcsIF8gPT4gY291bnRlciksIGJ1dHRvbih7XG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHNpbXBsZUFycmF5W3NpbXBsZUFycmF5Lmxlbmd0aF0gPSBzaW1wbGVBcnJheS5sZW5ndGgudG9TdHJpbmcoKVxuICAgIH0sICdhZGQgbnVtYmVyJykpKSwgZmllbGRzZXQobGVnZW5kKCdnYW1lIHdpdGggcGxheWVycycpLCBkaXYoeyBzdHlsZTogXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiIH0sIGRpdigncGxheWVycyBjb3VudDonLCBfID0+IHtcbiAgICAgICAgcmV0dXJuIHBsYXllcnMubGVuZ3RoO1xuICAgIH0pLCBfID0+IHtcbiAgICAgICAgcmV0dXJuIHBsYXllcnMubWFwKChwbGF5ZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0UGxheWVyRGlzcGxheShwbGF5ZXIsIGluZGV4LCBwbGF5ZXJzLCBnZXROZXdQbGF5ZXIsIHJlbW92ZVBsYXllckJ5SW5kZXgpLmtleShwbGF5ZXIubmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH0pLCBidXR0b24oe1xuICAgICAgICBpZDogXCJhcnJheS10ZXN0LXB1c2gtaXRlbVwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICB9XG4gICAgfSwgJ3B1c2ggaXRlbSAnLCBwbGF5ZXJzLmxlbmd0aCArIDEpLCBidXR0b24oe1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgIH1cbiAgICB9LCAncHVzaCAzIGl0ZW1zJyksIGJ1dHRvbih7IG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgICAgIHBsYXllcnMucHVzaChnZXROZXdQbGF5ZXIoKSk7XG4gICAgICAgICAgICBwbGF5ZXJzLnB1c2goZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICAgICAgcGxheWVycy5wdXNoKGdldE5ld1BsYXllcigpKTtcbiAgICAgICAgfSB9LCAncHVzaCA5IGl0ZW1zJyksIF8gPT4gcGxheWVycy5sZW5ndGggPiAwICYmXG4gICAgICAgIGJ1dHRvbih7XG4gICAgICAgICAgICBhdHRyOiBmeCh7IGR1cmF0aW9uOiAnLjFzJyB9KSxcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHBsYXllcnMubGVuZ3RoID0gMFxuICAgICAgICB9LCAncmVtb3ZlIGFsbCcpKSwgXyA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAnYXJyYXlUZXN0cy50cycgfSkpO1xufSk7XG5jb25zdCBnZXRQbGF5ZXJEaXNwbGF5ID0gdGFnKChwbGF5ZXIsIGluZGV4LCBwbGF5ZXJzLCBnZXROZXdQbGF5ZXIsIHJlbW92ZVBsYXllckJ5SW5kZXgpID0+IHtcbiAgICBnZXRQbGF5ZXJEaXNwbGF5LnVwZGF0ZXMoeCA9PiB7XG4gICAgICAgIFtwbGF5ZXIsIGluZGV4LCBwbGF5ZXJzLCBnZXROZXdQbGF5ZXIsIHJlbW92ZVBsYXllckJ5SW5kZXhdID0geDtcbiAgICB9KTtcbiAgICByZXR1cm4gZGl2KHtcbiAgICAgICAgc3R5bGU6IFwiYmFja2dyb3VuZC1jb2xvcjpibGFjaztcIixcbiAgICAgICAgYXR0cjogZngoeyBkdXJhdGlvbjogJy4xcycgfSlcbiAgICB9LCBkaXYoXyA9PiBgbmFtZToke3BsYXllci5uYW1lfWApLCBkaXYoXyA9PiB7XG4gICAgICAgIHJldHVybiBgaW5kZXg6JHtpbmRleH1gO1xuICAgIH0pLCBkaXYoeyBzdHlsZTogXCJiYWNrZ3JvdW5kLWNvbG9yOnB1cnBsZTtwYWRkaW5nOi41ZW1cIiB9LCAnc2NvcmVzOicsIF8gPT4gcGxheWVyLnNjb3Jlcy5tYXAoKHNjb3JlLCBwbGF5ZXJJbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gcGxheWVyU2NvcmVEaXNwbGF5KHBsYXllckluZGV4LCBzY29yZSkua2V5KHNjb3JlKTtcbiAgICB9KSksIF8gPT4gcGxheWVyLmVkaXQgJiYgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgcmVtb3ZlUGxheWVyQnlJbmRleChpbmRleCk7XG4gICAgICAgIH1cbiAgICB9LCAncmVtb3ZlJyksIF8gPT4gcGxheWVyLmVkaXQgJiYgYnV0dG9uKHtcbiAgICAgICAgaWQ6IF8gPT4gYHBsYXllci1yZW1vdmUtcHJvbWlzZS1idG4tJHtpbmRleH1gLFxuICAgICAgICBvbkNsaWNrOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXIuZWRpdCA9ICFwbGF5ZXIuZWRpdDtcbiAgICAgICAgICAgIHJlbW92ZVBsYXllckJ5SW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuICdwbGF5ZXItcmVtb3ZlLXByb21pc2UtYnRuLXh4JztcbiAgICAgICAgfVxuICAgIH0sICdyZW1vdmUgYnkgcHJvbWlzZScpLCBidXR0b24oe1xuICAgICAgICBpZDogXyA9PiBgcGxheWVyLWVkaXQtYnRuLSR7aW5kZXh9YCxcbiAgICAgICAgb25DbGljazogKCkgPT4gcGxheWVyLmVkaXQgPSAhcGxheWVyLmVkaXRcbiAgICB9LCAnZWRpdCcpLCBidXR0b24oe1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXJzLnNwbGljZShpbmRleCwgMCwgZ2V0TmV3UGxheWVyKCkpO1xuICAgICAgICB9XG4gICAgfSwgJ2FkZCBiZWZvcmUnKSk7XG59KTtcbmNvbnN0IHBsYXllclNjb3JlRGlzcGxheSA9IHRhZygocGxheWVySW5kZXgsIHNjb3JlKSA9PiB7XG4gICAgcmV0dXJuIGRpdih7XG4gICAgICAgIGNsYXNzOiBcImFuaW1hdGVfX3Nsb3dcIixcbiAgICAgICAgYXR0cjogZngoeyBkdXJhdGlvbjogJy4xcycgfSlcbiAgICB9LCBmaWVsZHNldChsZWdlbmQoYnV0dG9uKHtcbiAgICAgICAgaWQ6IF8gPT4gYHNjb3JlLWRhdGEtJHtwbGF5ZXJJbmRleH0tJHtzY29yZS5mcmFtZX0tb3V0c2lkZS1idXR0b25gLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiArK3Njb3JlLnNjb3JlXG4gICAgfSwgXyA9PiBgb3V0ZXIgc2NvcmUgYnV0dG9uICsrJHtzY29yZS5zY29yZX1gKSwgc3Bhbih7XG4gICAgICAgIGlkOiBfID0+IGBzY29yZS1kYXRhLSR7cGxheWVySW5kZXh9LSR7c2NvcmUuZnJhbWV9LW91dHNpZGUtZGlzcGxheWBcbiAgICB9LCBfID0+IHNjb3JlLnNjb3JlKSksIF8gPT4gYXJyYXlTY29yZURhdGEoeyBzY29yZSwgcGxheWVySW5kZXggfSkpKTtcbn0pO1xuIiwiaW1wb3J0IHsgdGFnLCBkaXYsIHNlbGVjdCwgb3B0aW9uLCBoMywgYnV0dG9uLCBzcGFuIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuZXhwb3J0IGNvbnN0IHRhZ1N3aXRjaERlYnVnID0gdGFnKChfdCA9ICd0YWdTd2l0Y2hEZWJ1ZycpID0+IHtcbiAgICBsZXQgc2VsZWN0ZWRUYWcgPSBudWxsO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgZnVuY3Rpb24gY2hhbmdlU2VsZWN0ZWRUYWcoZXZlbnQpIHtcbiAgICAgICAgc2VsZWN0ZWRUYWcgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGlmIChzZWxlY3RlZFRhZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkVGFnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RlZFRhZyA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRhZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gZGl2KGRpdih7IGlkOiBcInNlbGVjdFRhZy13cmFwXCIgfSwgJ3NlbGVjdGVkVGFnOiB8Jywgc3Bhbih7IGlkOiBcInNlbGVjdFRhZy1kaXNwbGF5XCIgfSwgKCkgPT4gc2VsZWN0ZWRUYWcgPT09IG51bGwgJiYgJ251bGwnIHx8XG4gICAgICAgIHNlbGVjdGVkVGFnID09PSB1bmRlZmluZWQgJiYgJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgc2VsZWN0ZWRUYWcgPT09ICcnICYmICdlbXB0eS1zdHJpbmcnIHx8XG4gICAgICAgIHNlbGVjdGVkVGFnKSwgJ3wnKSwgc2VsZWN0KHtcbiAgICAgICAgaWQ6IFwidGFnLXN3aXRjaC1kcm9wZG93blwiLFxuICAgICAgICBvbkNoYW5nZTogY2hhbmdlU2VsZWN0ZWRUYWdcbiAgICB9LCBvcHRpb24oKSwgXG4gICAgLyogVE9ETzogaW1wbGVtZW50IHNlbGVjdGVkIGF0dHJpYnV0ZSAqL1xuICAgIG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBcIlwiLFxuICAgICAgICBzZWxlY3RlZDogKCkgPT4gdHlwZW9mIChzZWxlY3RlZFRhZykgPT09ICdzdHJpbmcnICYmICFzZWxlY3RlZFRhZy5sZW5ndGggPyB7IHNlbGVjdGVkOiB0cnVlIH0gOiB7fVxuICAgIH0sICdlbXB0eS1zdHJpbmcnKSwgb3B0aW9uKHtcbiAgICAgICAgdmFsdWU6IFwidW5kZWZpbmVkXCIsXG4gICAgICAgIHNlbGVjdGVkOiAoKSA9PiBzZWxlY3RlZFRhZyA9PT0gdW5kZWZpbmVkID8geyBzZWxlY3RlZDogdHJ1ZSB9IDoge31cbiAgICB9LCAndW5kZWZpbmVkJyksIG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBcIm51bGxcIixcbiAgICAgICAgc2VsZWN0ZWQ6ICgpID0+IHNlbGVjdGVkVGFnID09PSBudWxsXG4gICAgfSwgJ251bGwnKSwgb3B0aW9uKHtcbiAgICAgICAgdmFsdWU6IFwiMVwiLFxuICAgICAgICBzZWxlY3RlZDogKCkgPT4gc2VsZWN0ZWRUYWcgPT09ICcxJ1xuICAgIH0sICd0YWcgMScpLCBvcHRpb24oe1xuICAgICAgICB2YWx1ZTogXCIyXCIsXG4gICAgICAgIHNlbGVjdGVkOiAoKSA9PiBzZWxlY3RlZFRhZyA9PT0gJzInXG4gICAgfSwgJ3RhZyAyJyksIG9wdGlvbih7XG4gICAgICAgIHZhbHVlOiBcIjNcIixcbiAgICAgICAgc2VsZWN0ZWQ6ICgpID0+IHNlbGVjdGVkVGFnID09PSAnMydcbiAgICB9LCAndGFnIDMnKSksIGRpdih7XG4gICAgICAgIGlkOiBcInN3aXRjaC10ZXN0cy13cmFwXCIsXG4gICAgICAgIHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO1wiXG4gICAgfSwgZGl2KHsgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBibHVlO2ZsZXgtZ3JvdzoxXCIgfSwgaDMoJ1Rlc3QgMSAtIHN0cmluZyB8IFRhZycpLCBkaXYoKCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKHNlbGVjdGVkVGFnKSB7XG4gICAgICAgICAgICBjYXNlIG51bGw6IHJldHVybiAnbnVsbCwgc2VsZWN0IHRhZyBiZWxvdyc7XG4gICAgICAgICAgICBjYXNlIFwiXCI6IHJldHVybiBkaXYoeyBpZDogXCJlbXB0eS1zdHJpbmctMVwiIH0pO1xuICAgICAgICAgICAgY2FzZSAnMSc6IHJldHVybiB0YWcxKHsgdGl0bGU6ICd2YWx1ZSBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgY2FzZSAnMic6IHJldHVybiB0YWcyKHsgdGl0bGU6ICd2YWx1ZSBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgY2FzZSAnMyc6IHJldHVybiB0YWczKHsgdGl0bGU6ICd2YWx1ZSBzd2l0Y2gnIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnc2VsZWN0IHRhZyBiZWxvdyc7XG4gICAgfSkpLCBkaXYoeyBzdHlsZTogXCJib3JkZXI6MXB4IHNvbGlkIGJsdWU7ZmxleC1ncm93OjFcIiB9LCBoMygnVGVzdCAyIC0gVGFnJyksIGRpdigoKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoc2VsZWN0ZWRUYWcpIHtcbiAgICAgICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGl2KHsgaWQ6IFwic2VsZWN0LXRhZy1hYm92ZVwiIH0sICdudWxsLCBzZWxlY3QgdGFnIGFib3ZlJyk7XG4gICAgICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpdih7IGlkOiBcInNlbGVjdC10YWctYWJvdmVcIiB9LCAnZW1wdHktc3RyaW5nLCBzZWxlY3QgdGFnIGFib3ZlJyk7XG4gICAgICAgICAgICBjYXNlICcxJzogcmV0dXJuIHRhZzEoeyB0aXRsZTogJ3RhZyBzd2l0Y2gnIH0pO1xuICAgICAgICAgICAgY2FzZSAnMic6IHJldHVybiB0YWcyKHsgdGl0bGU6ICd0YWcgc3dpdGNoJyB9KTtcbiAgICAgICAgICAgIGNhc2UgJzMnOiByZXR1cm4gdGFnMyh7IHRpdGxlOiAndGFnIHN3aXRjaCcgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpdih7IGlkOiBcInNlbGVjdC10YWctYWJvdmVcIiB9LCAnc2VsZWN0IHRhZyBhYm92ZScpO1xuICAgIH0pKSwgZGl2KHsgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBibHVlO2ZsZXgtZ3JvdzoxXCIgfSwgaDMoJ1Rlc3QgMyAtIHRlcm5hcnkgKG9ubHkgMSBvciAzIHNob3dzKScpLCBkaXYoKCkgPT4gc2VsZWN0ZWRUYWcgPT09ICczJyA/IHRhZzMoeyB0aXRsZTogJ3Rlcm5hcnkgc2ltcGxlJyB9KSA6IHRhZzEoeyB0aXRsZTogJ3Rlcm5hcnkgc2ltcGxlJyB9KSkpLCBkaXYoeyBzdHlsZTogXCJib3JkZXI6MXB4IHNvbGlkIGJsdWU7ZmxleC1ncm93OjFcIiB9LCBoMygnVGVzdCAzLjIgLSB0ZXJuYXJ5IHZpYSBwcm9wIChvbmx5IDEgb3IgMyBzaG93cyknKSwgZGl2KCgpID0+IHRlcm5hcnlQcm9wVGVzdCh7IHNlbGVjdGVkVGFnIH0pKSksIGRpdih7XG4gICAgICAgIGlkOiBcImFycmF5U3dpdGNoaW5nLXRlc3Qtd3JhcFwiLFxuICAgICAgICBzdHlsZTogXCJib3JkZXI6MXB4IHNvbGlkIHJlZDtmbGV4LWdyb3c6MVwiXG4gICAgfSwgaDMoJ1Rlc3QgNCAtIGFycmF5U3dpdGNoaW5nJyksIGRpdih7IGlkOiBcImFycmF5U3dpdGNoaW5nLXdyYXBcIiB9LCAoKSA9PiBhcnJheVN3aXRjaGluZyh7IHNlbGVjdGVkVGFnIH0pKSkpLCAoKSA9PiByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAndGFnU3dpdGNoRGVidWcnIH0pKTtcbn0pO1xuZXhwb3J0IGNvbnN0IHRlcm5hcnlQcm9wVGVzdCA9IHRhZygoeyBzZWxlY3RlZFRhZyB9KSA9PiB7XG4gICAgdGVybmFyeVByb3BUZXN0LmlucHV0cyh4ID0+IFt7IHNlbGVjdGVkVGFnIH1dID0geCk7XG4gICAgcmV0dXJuIGRpdih7IGlkOiBcInRlcm5hcnlQcm9wVGVzdC13cmFwXCIgfSwgKCkgPT4gYCR7c2VsZWN0ZWRUYWd9OmAsIChjb250ZXh0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gc2VsZWN0ZWRUYWcgPT09ICczJyA/IHRhZzMoeyB0aXRsZTogJ3Rlcm5hcnlQcm9wVGVzdCcgfSkgOiB0YWcxKHsgdGl0bGU6ICd0ZXJuYXJ5UHJvcFRlc3QnIH0pO1xuICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfSk7XG59KTtcbmV4cG9ydCBjb25zdCB0YWcxID0gdGFnKCh7IHRpdGxlIH0pID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICB0YWcxLmlucHV0cyh4ID0+IFt7IHRpdGxlIH1dID0geCk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gZGl2KHtcbiAgICAgICAgaWQ6IFwidGFnMVwiLFxuICAgICAgICBzdHlsZTogXCJib3JkZXI6MXB4IHNvbGlkIG9yYW5nZTtcIlxuICAgIH0sIGRpdih7IGlkOiBcInRhZ1N3aXRjaC0xLWhlbGxvXCIgfSwgKCkgPT4gYEhlbGxvIDEgJHt0aXRsZX0gV29ybGRgKSwgYnV0dG9uKHsgb25DbGljazogKCkgPT4gKytjb3VudGVyIH0sICgpID0+IGBpbmNyZWFzZSAke2NvdW50ZXJ9YCksICgpID0+IHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICd0YWcxJyB9KSk7XG59KTtcbmV4cG9ydCBjb25zdCB0YWcyID0gdGFnKCh7IHRpdGxlIH0pID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICAvL3RhZzIuaW5wdXRzKHggPT4gW3t0aXRsZX1dID0geClcbiAgICArK3JlbmRlckNvdW50O1xuICAgIC8vcmV0dXJuIDIyXG4gICAgcmV0dXJuIGRpdih7XG4gICAgICAgIGlkOiBcInRhZzJcIixcbiAgICAgICAgc3R5bGU6IFwiYm9yZGVyOjFweCBzb2xpZCBvcmFuZ2U7XCJcbiAgICB9LCBkaXYoeyBpZDogXCJ0YWdTd2l0Y2gtMi1oZWxsb1wiIH0sICgpID0+IGBIZWxsbyAyICR7dGl0bGV9IFdvcmxkYCksIGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+ICsrY291bnRlclxuICAgIH0sICgpID0+IGBpbmNyZWFzZSAke2NvdW50ZXJ9YCksICgpID0+IHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICd0YWcxJyB9KSk7XG59KTtcbmV4cG9ydCBjb25zdCB0YWczID0gdGFnKCh7IHRpdGxlIH0pID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICB0YWczLmlucHV0cyh4ID0+IFt7IHRpdGxlIH1dID0geCk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gZGl2KHtcbiAgICAgICAgaWQ6IFwidGFnM1wiLFxuICAgICAgICBzdHlsZTogXCJib3JkZXI6MXB4IHNvbGlkIG9yYW5nZTtcIlxuICAgIH0sIGRpdih7IGlkOiBcInRhZ1N3aXRjaC0zLWhlbGxvXCIgfSwgKCkgPT4gYEhlbGxvIDMgJHt0aXRsZX0gV29ybGRgKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4gKytjb3VudGVyXG4gICAgfSwgKCkgPT4gYGluY3JlYXNlICR7Y291bnRlcn1gKSwgKCkgPT4gcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3RhZzEnIH0pKTtcbn0pO1xuZXhwb3J0IGNvbnN0IGFycmF5U3dpdGNoaW5nID0gKHsgc2VsZWN0ZWRUYWcgfSkgPT4ge1xuICAgIHN3aXRjaCAoc2VsZWN0ZWRUYWcpIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICByZXR1cm4gYGl0cyBhbiB1bmRlZmluZWQgdmFsdWVgO1xuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICByZXR1cm4gYGl0cyBhIG51bGwgdmFsdWVgO1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICAgICAgLy8gVE9ETzogPz8/IHNob3VsZCBiZSBlbXB0eSBzdHJpbmdcbiAgICAgICAgICAgIHJldHVybiBgc3BhY2VgOyAvLyB0ZXN0cyBob3cgLnByZXZpb3VzU2libGluZyB3b3Jrc1xuICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgIHJldHVybiB0YWcxKHsgdGl0bGU6IGB0YWcgJHtzZWxlY3RlZFRhZ31gIH0pO1xuICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgIHJldHVybiBbJ2InLCAnYyddLm1hcCh4ID0+IHRhZzIoeyB0aXRsZTogYGFycmF5ICR7c2VsZWN0ZWRUYWd9ICR7eH1gIH0pLmtleSh4KSk7XG4gICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgICAgcmV0dXJuIFsnZCcsICdlJywgJ2YnXS5tYXAoeCA9PiB0YWczKHsgdGl0bGU6IGBhcnJheSAke3NlbGVjdGVkVGFnfSAke3h9YCB9KS5rZXkoeCkpO1xuICAgIH1cbiAgICByZXR1cm4gYG5vdGhpbmcgdG8gc2hvdyBmb3IgaW4gYXJyYXlzYDtcbn07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IG1pcnJvcmluZyA9IHRhZygoKSA9PiB7XG4gICAgY29uc3QgdGFnID0gdGFnQ291bnRlcigpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNTY3MzRbMF0sIHRhZywgdGFnKTtcbn0pO1xuY29uc3QgdGFnQ291bnRlciA9ICgpID0+IHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgc3RhdGVzKGdldCA9PiBbY291bnRlcl0gPSBnZXQoY291bnRlcikpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNTY3MzRbMV0sIGNvdW50ZXIsICgpID0+ICsrY291bnRlciwgY291bnRlcik7XG59O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYWxsU3RyaW5ncyA9IHsgYWxsU3RyaW5nczE1NjczNDogW1t7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY291bnRlcjBcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjb3VudGVyMVwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgY291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfqp5cIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibWlycm9yLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibWlycm9yLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCBzdGF0ZXMsIHN0YXRlLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5leHBvcnQgY29uc3Qgc3RhdGVQcm9wRGVidWcgPSAocHJvcENvdW50ZXIsIGNoaWxkKSA9PiB0YWcudXNlID0gKF8gPSBzdGF0ZSgnc3RhdGVQcm9wRGVidWcudGFnLnRzJyksIC8vIHNvbWV0aGluZyB0byBiZSBzZWVuIGluIGNvbnNvbGVcbmVkaXQgPSBmYWxzZSwgcmVuZGVyQ291bnQgPSAwLCBfX18gPSBzdGF0ZXMoZ2V0ID0+IFt7IGVkaXQsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgZWRpdCwgcmVuZGVyQ291bnQgfSkpLCBfXyA9ICsrcmVuZGVyQ291bnQpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczUzOTI5WzBdLCBwcm9wQ291bnRlciwgKCkgPT4gZWRpdCA9ICFlZGl0LCBlZGl0LCBjaGlsZCwgcmVuZGVyQ291bnREaXYoeyByZW5kZXJDb3VudCwgbmFtZTogJ3N0YXRlUHJvcERlYnVnLXRhZycgfSkpO1xuZXhwb3J0IGRlZmF1bHQgc3RhdGVQcm9wRGVidWc7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNTM5Mjk6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuICBwcm9wQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImVkaXQgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJjaGlsZDogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXCIgfV1dIH07XG4iLCJpbXBvcnQgeyB3YXRjaCwgaHRtbCwgdGFnLCBsZXRQcm9wLCBzdGF0ZSwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJDb3VudERpdiB9IGZyb20gXCIuL3JlbmRlckNvdW50LmNvbXBvbmVudC5qc1wiO1xuaW1wb3J0IHN0YXRlUHJvcERlYnVnVGFnIGZyb20gXCIuL3N0YXRlUHJvcERlYnVnLnRhZy5qc1wiO1xuZXhwb3J0IGNvbnN0IHByb3BzRGVidWdNYWluID0gdGFnKChfID0gJ3Byb3BzRGVidWdNYWluJykgPT4gKHN5bmNQcm9wTnVtYmVyID0gMCwgcHJvcE51bWJlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgcHJvcHNKc29uID0geyB0ZXN0OiAzMywgeDogJ3knIH0sIGRhdGUgPSBzdGF0ZSgoKSA9PiBuZXcgRGF0ZSgpKSwganNvbiA9IEpTT04uc3RyaW5naWZ5KHByb3BzSnNvbiwgbnVsbCwgMiksIHN0YXRlUHJvcERpc3BsYXkgPSB0cnVlLCBfID0gc3RhdGVzKGdldCA9PiBbe1xuICAgICAgICBzeW5jUHJvcE51bWJlciwgcHJvcE51bWJlciwgcmVuZGVyQ291bnQsIHByb3BzSnNvbiwgZGF0ZSwgc3RhdGVQcm9wRGlzcGxheSxcbiAgICB9XSA9IGdldCh7XG4gICAgc3luY1Byb3BOdW1iZXIsIHByb3BOdW1iZXIsIHJlbmRlckNvdW50LCBwcm9wc0pzb24sIGRhdGUsIHN0YXRlUHJvcERpc3BsYXksXG59KSkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTgzMTVbMF0sIChldmVudCkgPT4gcHJvcHNKc29uID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQudmFsdWUpLCBqc29uLCBqc29uLCArK3JlbmRlckNvdW50LCAoKSA9PiArK3Byb3BOdW1iZXIsIHByb3BOdW1iZXIsIHByb3BOdW1iZXIsIHByb3BzRGVidWcoe1xuICAgIHByb3BOdW1iZXIsXG4gICAgcHJvcHNKc29uLFxuICAgIHByb3BOdW1iZXJDaGFuZ2U6IHggPT4ge1xuICAgICAgICBwcm9wTnVtYmVyID0geDtcbiAgICB9XG59KSwgc3luY1Byb3BOdW1iZXIsICgpID0+ICsrc3luY1Byb3BOdW1iZXIsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdzeW5jX3Byb3BzX2NhbGxiYWNrJyB9KSwgc3luY1Byb3BEZWJ1Zyh7XG4gICAgc3luY1Byb3BOdW1iZXIsXG4gICAgcHJvcE51bWJlckNoYW5nZTogeCA9PiBzeW5jUHJvcE51bWJlciA9IHgsXG4gICAgcGFyZW50VGVzdDogeCA9PiB4LCAvLyBjYXVzZXMgbm8gY2hhbmdlLCBob3dldmVyIHRoZSB0YWcgZGlkICsrY291bnRlciB0byBpdHNlbGYgd2hpY2ggc2hvdWxkIHJlbmRlclxufSksIHN0YXRlUHJvcERpc3BsYXkgJiYgc3RhdGVQcm9wRGVidWdUYWcocHJvcE51bWJlciwgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzE5ODMxNVsxXSkpLCAoKSA9PiBzdGF0ZVByb3BEaXNwbGF5ID0gIXN0YXRlUHJvcERpc3BsYXksIGRhdGUsIHRpbWVzdGFtcFRvVmFsdWVzKGRhdGUpLmRhdGUsIChldmVudCkgPT4ge1xuICAgIGNvbnN0IG5ld0RhdGVTdHJpbmcgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKG5ld0RhdGVTdHJpbmcpO1xufSwgcHJvcERhdGVEZWJ1Zyh7IGRhdGUgfSkpKTtcbmNvbnN0IHByb3BEYXRlRGVidWcgPSB0YWcoKHsgZGF0ZSB9KSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MzMTk4MzE1WzJdLCBkYXRlKSk7XG4vKiogVGVzdHMgY2FsbGluZyBhIHByb3BlcnR5IHRoYXQgaXMgYSBmdW5jdGlvbiBpbW1lZGlhdGVseSB3aGljaCBzaG91bGQgY2F1c2UgcmVuZGVyaW5nICovXG5jb25zdCBzeW5jUHJvcERlYnVnID0gdGFnKCh7IHN5bmNQcm9wTnVtYmVyLCBwcm9wTnVtYmVyQ2hhbmdlLCBwYXJlbnRUZXN0LCB9KSA9PiAoXyA9IHN0YXRlKCdzeW5jUHJvcERlYnVnJyksIC8vIHNvbWV0aGluZyB0byBzZWUgaW4gY29uc29sZVxuY291bnRlciA9IDAsIHJlbmRlckNvdW50ID0gMCwgX18gPSBzdGF0ZXMoZ2V0ID0+IFt7IGNvdW50ZXIsIHJlbmRlckNvdW50IH1dID0gZ2V0KHsgY291bnRlciwgcmVuZGVyQ291bnQgfSkpKSA9PiB7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICBpZiAoc3luY1Byb3BOdW1iZXIgJSAyID09PSAxKSB7XG4gICAgICAgIHByb3BOdW1iZXJDaGFuZ2Uoc3luY1Byb3BOdW1iZXIgPSBzeW5jUHJvcE51bWJlciArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzMzE5ODMxNVszXSwgc3luY1Byb3BOdW1iZXIsICgpID0+IHByb3BOdW1iZXJDaGFuZ2UoKytzeW5jUHJvcE51bWJlciksIGNvdW50ZXIsIHBhcmVudFRlc3QoY291bnRlciksICgpID0+IHtcbiAgICAgICAgcGFyZW50VGVzdCgrK2NvdW50ZXIpO1xuICAgIH0sIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdjaGlsZF9zeW5jX3Byb3BzX2NhbGxiYWNrJyB9KSk7XG59KTtcbmNvbnN0IHByb3BzRGVidWcgPSB0YWcoKHsgcHJvcE51bWJlciwgcHJvcHNKc29uLCBwcm9wTnVtYmVyQ2hhbmdlLCB9KSA9PiAoXyA9IHN0YXRlKCdwcm9wc0RlYnVnJyksIC8vIHNvbWV0aGluZyB0byBzZWUgaW4gY29uc29sZVxucmVuZGVyQ291bnQgPSAwLCBwcm9wTnVtYmVyQ2hhbmdlQ291bnQgPSAwLCBcbi8vIHNpbXBsZSB3YXkgdG8gbG9jYWxseSBvbmx5IHVwZGF0ZSBhbiBhcmd1bWVudFxuX19fID0gbGV0UHJvcChnZXQgPT4gW3Byb3BOdW1iZXJdID0gZ2V0KHByb3BOdW1iZXIpKSwgXG4vLyBfX18gPSBsZXRQcm9wKHByb3BOdW1iZXIpKHggPT4gW3Byb3BOdW1iZXIsIHByb3BOdW1iZXIgPSB4XSksXG4vLyBwb29yIHdheSB0byB1cGRhdGUgYW4gYXJndW1lbnRcbm15UHJvcE51bWJlciA9IHByb3BOdW1iZXIsIF9zdGF0ZXMgPSBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgIHJlbmRlckNvdW50LCBwcm9wTnVtYmVyQ2hhbmdlQ291bnQsIG15UHJvcE51bWJlcixcbiAgICB9XSA9IGdldCh7XG4gICAgcmVuZGVyQ291bnQsIHByb3BOdW1iZXJDaGFuZ2VDb3VudCwgbXlQcm9wTnVtYmVyLFxufSkpLCBfXyA9IHdhdGNoKFtwcm9wTnVtYmVyXSwgKCkgPT4gbXlQcm9wTnVtYmVyID0gcHJvcE51bWJlciksIHdhdGNoUmVzdWx0cyA9IHdhdGNoKFtteVByb3BOdW1iZXJdLCAoKSA9PiArK3Byb3BOdW1iZXJDaGFuZ2VDb3VudCkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTgzMTVbNF0sIChldmVudCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIE9iamVjdC5hc3NpZ24ocHJvcHNKc29uLCB2YWx1ZSk7XG59LCBKU09OLnN0cmluZ2lmeShwcm9wc0pzb24sIG51bGwsIDIpLCBKU09OLnN0cmluZ2lmeShwcm9wc0pzb24sIG51bGwsIDIpLCBKU09OLnN0cmluZ2lmeSh3YXRjaFJlc3VsdHMsIG51bGwsIDIpLCAoKSA9PiBwcm9wTnVtYmVyQ2hhbmdlKCsrbXlQcm9wTnVtYmVyKSwgbXlQcm9wTnVtYmVyLCBteVByb3BOdW1iZXIsICgpID0+ICsrcHJvcE51bWJlciwgcHJvcE51bWJlciwgcHJvcE51bWJlciwgKCkgPT4gKytyZW5kZXJDb3VudCwgKytyZW5kZXJDb3VudCwgKCkgPT4gKytteVByb3BOdW1iZXIsIG15UHJvcE51bWJlciwgcHJvcE51bWJlckNoYW5nZUNvdW50LCBwcm9wRm5VcGRhdGVUZXN0KHtcbiAgICBwcm9wTnVtYmVyOiBteVByb3BOdW1iZXIsXG4gICAgY2FsbGJhY2s6ICgpID0+ICsrbXlQcm9wTnVtYmVyXG59KSkpO1xuY29uc3QgcHJvcEZuVXBkYXRlVGVzdCA9IHRhZy5pbW11dGFibGVQcm9wcygoeyBwcm9wTnVtYmVyLCBjYWxsYmFjaywgfSkgPT4gKF8gPSBzdGF0ZSgncHJvcEZuVXBkYXRlVGVzdCcpLCAvLyBzb21ldGhpbmcgdG8gc2VlIGluIGNvbnNvbGVcbnJlbmRlckNvdW50ID0gMCwgX18gPSBzdGF0ZXMoZ2V0ID0+IFtyZW5kZXJDb3VudF0gPSBnZXQocmVuZGVyQ291bnQpKSkgPT4ge1xuICAgICsrcmVuZGVyQ291bnQ7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczMxOTgzMTVbNV0sIGNhbGxiYWNrLCBwcm9wTnVtYmVyLCBwcm9wTnVtYmVyLCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAncHJvcEZuVXBkYXRlVGVzdCcgfSkpO1xufSk7XG5mdW5jdGlvbiB0aW1lc3RhbXBUb1ZhbHVlcyh0aW1lc3RhbXApIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIGNvbnN0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgY29uc3QgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGNvbnN0IGhvdXJzID0gU3RyaW5nKGRhdGUuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICBjb25zdCBtaW51dGVzID0gU3RyaW5nKGRhdGUuZ2V0TWludXRlcygpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGU6IGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWAsXG4gICAgICAgIHRpbWU6IGAke2hvdXJzfToke21pbnV0ZXN9YFxuICAgIH07XG59XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMzE5ODMxNTogW1t7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXBcIl0sIFtcImlkXCIsIFwidGV4dGFyZWF3cmFwXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJoZWlnaHQ6MjAwcHg7Zm9udC1zaXplOjAuNmVtO3dpZHRoOjEwMCU7bWF4LXdpZHRoOjQwMHB4XCJdLCBbXCJpZFwiLCBcInByb3BzLWRlYnVnLXRleHRhcmVhXCJdLCBbXCJ3cmFwXCIsIFwib2ZmXCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInByZVwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIocmVuZGVyQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS0wLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDQgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn6WpIHByb3BOdW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNEZWJ1Zy3wn6WpLTAtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3luYyBwcm9wcyBjYWxsYmFja1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgc3luY1Byb3BOdW1iZXI6IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzeW5jLXByb3AtbnVtYmVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgKytcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdGF0ZSBwcm9wXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTIgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEzIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93XCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRhdGUgcHJvcFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImRhdGU6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTQgfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImRhdGVcIl0sIFtcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNSB9LCBudWxsXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNyB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNoaWxkIGlubmVySHRtbCDwn5G2XCIgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkYXRlOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tc3luY1Byb3BEZWJ1ZyBodG1sLS0+XCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgY2hpbGQgc3luY1Byb3BOdW1iZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN5bmMtcHJvcC1jaGlsZC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzeW5jLXByb3AtY2hpbGQtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfpaEgKytcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNvdW50ZXI6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN5bmMtcHJvcC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInBhcmVudFRlc3RcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm90aGluZy1wcm9wLWNvdW50ZXItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm90aGluZy1wcm9wLWNvdW50ZXItYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisrXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gIFwiIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLXByb3BzRGVidWcuanMtLT5cIiB9LCB7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQcm9wcyBKc29uXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dGFyZWFcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmb250LXNpemU6MC42ZW07aGVpZ2h0OjIwMHB4O3dpZHRoOjEwMCU7O21heC13aWR0aDo0MDBweFwiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJwcmVcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tPGRpdiBzdHlsZT1cXFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwXFxcIj48L2Rpdj4tLT5cIiB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImgzXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlByb3BzIE51bWJlclwiIH1dIH0sIHsgXCJublwiOiBcInRleHRhcmVhXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZm9udC1zaXplOjAuNmVtO2hlaWdodDoyMDBweDt3aWR0aDoxMDAlO2NvbG9yOndoaXRlO1wiXSwgW1wid3JhcFwiLCBcIm9mZlwiXSwgW1wiZGlzYWJsZWRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc0RlYnVnLfCfpaktMS1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QhCDwn6WpIG15IHByb3BOdW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNEZWJ1Zy3wn6WpLTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS0yLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CEIPCfpakgbG9jYWwgbGV0UHJvcCBwcm9wTnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDggfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS1sZXQtcHJvcC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1widGl0bGVcIiwgXCJ0ZXN0IG9mIGluY3JlYXNpbmcgcmVuZGVyIGNvdW50IGFuZCBub3RoaW5nIGVsc2VcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInJlbmRlckNvdW50IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTIgfSwgbnVsbF0sIFtcInRpdGxlXCIsIFwib25seSBjaGFuZ2VzIG51bWJlciBsb2NhbGx5IGJ1dCBpZiBjaGFuZ2UgYnkgcGFyZW50IHRoYW4gdGhhdCBpcyB0aGUgbnVtYmVyXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QhCDwn6WpIGxvY2FsIHNldCBteVByb3BOdW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIihwcm9wTnVtYmVyQ2hhbmdlQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInByb3BzRGVidWct8J+lqS1jaGFuZ2UtY291bnQtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE0IH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImgzXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkZuIHVwZGF0ZSB0ZXN0XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTUgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiICAgIFxcblwiIH1dLCBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicHJvcHNPbmVMZXZlbEZ1blVwZGF0ZS3wn6WpLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5CEIPCfpakgbG9jYWwgJiAxLXBhcmVudCBpbmNyZWFzZSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwcm9wc09uZUxldmVsRnVuVXBkYXRlLfCfpaktZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9LCB7IFwibm5cIjogXCJzbWFsbFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm9wYWNpdHk6LjVcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0aGUgY291bnQgaGVyZSBhbmQgd2l0aGluIHBhcmVudCBpbmNyZWFzZXMgYnV0IG5vdCBpbiBwYXJlbnQgcGFyZW50XCIgfV0gfV1dIH07XG4iLCJpbXBvcnQgeyBodG1sLCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCBkaWFsb2cgPSB0YWcoKHByb3ZpZGVyQ2xhc3MpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0ODgwNVswXSwgKCkgPT4gcHJvdmlkZXJDbGFzcy5zaG93RGlhbG9nID0gZmFsc2UsIHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZyA/IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczI0ODgwNVsxXSwgSlNPTi5zdHJpbmdpZnkocHJvdmlkZXJDbGFzcywgbnVsbCwgMikpIDogJ25vIGRpYWxvZycpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyNDg4MDU6IFtbeyBcIm5uXCI6IFwiZGlhbG9nXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzowXCJdLCBbXCJpZFwiLCBcInByb3ZpZGVyX2RlYnVnX2RpYWxvZ1wiXSwgW1wibW91c2Vkb3duXCIsIFwidmFyIHIgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyhyLnRvcDw9ZXZlbnQuY2xpZW50WSYmZXZlbnQuY2xpZW50WTw9ci50b3Arci5oZWlnaHQmJnIubGVmdDw9ZXZlbnQuY2xpZW50WCYmZXZlbnQuY2xpZW50WDw9ci5sZWZ0K3Iud2lkdGgpIHx8IHRoaXMuY2xvc2UoKVwiXSwgW1wiZHJhZ3N0YXJ0XCIsIFwiY29uc3Qge2UsZHQsdH0gPSB7dDp0aGlzLGU6ZXZlbnQsZHQ6ZXZlbnQuZGF0YVRyYW5zZmVyfTtjb25zdCBkPXQuZHJhZz10LmRyYWd8fHt4OjAseTowfTtkLmluaXRYPWQueDtkLnN0YXJ0WD1ldmVudC5jbGllbnRYLXQub2Zmc2V0TGVmdDtkLnN0YXJ0WT1ldmVudC5jbGllbnRZLXQub2Zmc2V0VG9wO3Qub25kcmFnb3Zlcj1lLnRhcmdldC5vbmRyYWdvdmVyPShlKT0+ZS5wcmV2ZW50RGVmYXVsdCgpO2R0LmVmZmVjdEFsbG93ZWQ9J21vdmUnO2R0LmRyb3BFZmZlY3Q9J21vdmUnXCJdLCBbXCJkcmFnXCIsIFwiY29uc3Qge3QsZSxkdCxkfT17ZTpldmVudCxkdDpldmVudC5kYXRhVHJhbnNmZXIsZDp0aGlzLmRyYWd9OyBpZihlLmNsaWVudFg9PT0wKSByZXR1cm47ZC54ID0gZC54ICsgZS5vZmZzZXRYIC0gZC5zdGFydFg7IGQueSA9IGQueSArIGUub2Zmc2V0WSAtIGQuc3RhcnRZOyB0aGlzLnN0eWxlLmxlZnQgPSBkLnggKyAncHgnOyB0aGlzLnN0eWxlLnRvcCA9IGQueSsncHgnO1wiXSwgW1wiZHJhZ2VuZFwiLCBcImNvbnN0IHt0LGUsZH09e3Q6dGhpcyxlOmV2ZW50LGQ6dGhpcy5kcmFnfTtpZiAoZC5pbml0WCA9PT0gZC54KSB7ZC54PWQueCtlLm9mZnNldFgtKGQuc3RhcnRYLWQueCk7ZC55PWQueStlLm9mZnNldFktKGQuc3RhcnRZLWQueSk7dGhpcy5zdHlsZS50cmFuc2Zvcm09dHJhbnNsYXRlM2QoZC54KydweCcsIGQueSsncHgnLCAwKX07dGhpcy5kcmFnZ2FibGU9ZmFsc2VcIl0sIFtcImNsb3NlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicGFkZGluZzouMjVlbVwiXSwgW1wibW91c2Vkb3duXCIsIFwidGhpcy5wYXJlbnROb2RlLmRyYWdnYWJsZT10cnVlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiZGlhbG9nIHRpdGxlXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJwYWRkaW5nOi4yNWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJidXR0b25cIl0sIFtcImNsaWNrXCIsIFwicHJvdmlkZXJfZGVidWdfZGlhbG9nLmNsb3NlKClcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4WnIGNsb3NlXCIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJ3cmFwXCIsIFwib2ZmXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSB9XV0gfTtcbiIsImltcG9ydCB7IGhvc3QsIHN0YXRlIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3QgaW5qZWN0aW9uV3JhcCA9IGhvc3QoKHNlbGVjdGVkLCBzZWxlY3RlZENoYW5nZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldHMgPSBzdGF0ZShbXSk7XG4gICAgcmV0dXJuIHsgc2VsZWN0ZWQsIHRhcmdldHMgfTtcbn0pO1xuIiwiaW1wb3J0IHsgaG9zdCwgdGFnIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyBpbmplY3Rpb25XcmFwIH0gZnJvbSBcIi4vaW5qZWN0aW9uV3JhcC5ob3N0XCI7XG5leHBvcnQgY29uc3QgaW5qZWN0aW9uVGFyZ2V0ID0gaG9zdCgodmFsdWUpID0+IHtcbiAgICBjb25zdCB3cmFwSG9zdCA9IHRhZy5pbmplY3QoaW5qZWN0aW9uV3JhcCk7XG4gICAgdGFnXG4gICAgICAgIC5vbkluaXQoKCkgPT4gd3JhcEhvc3QudGFyZ2V0cy5wdXNoKHZhbHVlKSlcbiAgICAgICAgLm9uRGVzdHJveSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gd3JhcEhvc3QudGFyZ2V0cy5maW5kSW5kZXgoKHgpID0+IHggPT09IHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgd3JhcEhvc3QudGFyZ2V0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmVsZW1lbnRcbiAgICAgICAgLm9uY2xpY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IHdyYXBIb3N0LnNlbGVjdGVkLmZpbmRJbmRleCgoeCkgPT4geCA9PT0gdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB3cmFwSG9zdC5zZWxlY3RlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd3JhcEhvc3Quc2VsZWN0ZWQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuIiwiaW1wb3J0IHsgdGFnLCBodG1sLCBzdGF0ZSB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgaW5qZWN0aW9uV3JhcCB9IGZyb20gXCIuL2hvc3RUZXN0cy9pbmplY3Rpb25XcmFwLmhvc3RcIjtcbmltcG9ydCB7IGluamVjdGlvblRhcmdldCB9IGZyb20gXCIuL2hvc3RUZXN0cy9pbmplY3Rpb25UYXJnZXQuaG9zdFwiO1xuZXhwb3J0IGNvbnN0IGluamVjdGlvblRhZyA9IHRhZygoKSA9PiB7XG4gICAgY29uc3QgaXRlbXMgPSBzdGF0ZSgoKSA9PiBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOV0ubWFwKGlkID0+ICh7IGlkIH0pKSk7XG4gICAgY29uc3Qgc2VsZWN0ZWRUZXN0ID0gc3RhdGUoW10pO1xuICAgIGNvbnN0IHdyYXBIb3N0ID0gaW5qZWN0aW9uV3JhcChzZWxlY3RlZFRlc3QsIChuZXdTZWxlY3RlZCkgPT4ge1xuICAgICAgICBzZWxlY3RlZFRlc3QubGVuZ3RoID0gMDtcbiAgICAgICAgc2VsZWN0ZWRUZXN0LnB1c2goLi4ubmV3U2VsZWN0ZWQpO1xuICAgIH0pO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNzE1MjRbMF0sIHNlbGVjdGVkVGVzdC5sZW5ndGgsIHdyYXBIb3N0LCBpdGVtcy5tYXAoeCA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3MxNzE1MjRbMV0sIGBpbmplY3Rpb24tdGVzdC1pdGVtLSR7eC5pZH1gLCBpbmplY3Rpb25UYXJnZXQoeCksIHNlbGVjdGVkVGVzdC5pbmNsdWRlcyh4KSA/ICcjNENBRjUwJyA6ICcjMjE5NkYzJywgc2VsZWN0ZWRUZXN0LmluY2x1ZGVzKHgpID8gJzNweCBzb2xpZCAjMzMzJyA6ICcxcHggc29saWQgIzk5OScsIHsgY2hlY2tlZDogc2VsZWN0ZWRUZXN0LmluY2x1ZGVzKHgpID8gdHJ1ZSA6IGZhbHNlIH0sIHguaWQpKSwgc2VsZWN0ZWRUZXN0Lmxlbmd0aCA+IDBcbiAgICAgICAgPyBzZWxlY3RlZFRlc3QubWFwKHggPT4geC5pZCkuam9pbignLCAnKVxuICAgICAgICA6ICdObyBpdGVtcyBzZWxlY3RlZC4gQ2xpY2sgdG8gc2VsZWN0IGl0ZW1zLicpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzMTcxNTI0OiBbW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcInBhZGRpbmc6IDIwcHg7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaDJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiSW5qZWN0aW9uIFRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzZWxlY3RlZDogXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJcXG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgIzY2NjtcXG4gICAgICAgICAgZ2FwOjFlbTtcXG4gICAgICAgICAgYmFja2dyb3VuZDogI2YwZjBmMDtcXG4gICAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgICAgbWluLWhlaWdodDogMzAwcHg7XFxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAgIGRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtcXG4gICAgICAgIFwiXSwgW1wiaWRcIiwgXCJpbmplY3Rpb24tdGVzdGluZy13cmFwLWhvc3RcIl0sIFt7IFwidGFnSnNWYXJcIjogMSB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWFyZ2luLXRvcDogMjBweDsgcGFkZGluZzogMTBweDsgYmFja2dyb3VuZDogIzMzMzsgY29sb3I6IHdoaXRlO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImgzXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlNlbGVjdGVkIEl0ZW1zOlwiIH1dIH0sIHsgXCJublwiOiBcInBcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJtYXJnaW4tdG9wOiAxMHB4OyBjb2xvcjogIzY2NjtcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiSW5zdHJ1Y3Rpb25zOlwiIH1dIH0sIHsgXCJublwiOiBcImJyXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiLSBDbGljayB0byBzZWxlY3QvZGVzZWxlY3QgaXRlbXNcIiB9LCB7IFwibm5cIjogXCJiclwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0gQ2xpY2sgb24gZW1wdHkgc3BhY2UgdG8gZGVzZWxlY3QgYWxsXCIgfSwgeyBcIm5uXCI6IFwiYnJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItIFNlbGVjdGVkIGl0ZW1zIHdpbGwgYmUgaGlnaGxpZ2h0ZWQgaW4gZ3JlZW5cIiB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIlxcbiAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgICAgICAgY29sb3I6IGJsYWNrO1xcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xcbiAgICAgICAgICAgICAgXCJdLCBbXCJpZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW3sgXCJ0YWdKc1ZhclwiOiAxIH1dLCBbXCJzdHlsZS5iYWNrZ3JvdW5kXCIsIHsgXCJ0YWdKc1ZhclwiOiAyIH0sIFwic3R5bGVcIl0sIFtcInN0eWxlLmJvcmRlclwiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcImNoZWNrYm94XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDQgfV1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkl0ZW0gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XV0gfTtcbiIsImltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50LmpzXCI7XG5pbXBvcnQgeyBkaWFsb2cgfSBmcm9tIFwiLi9wcm92aWRlckRpYWxvZy50YWcuanNcIjtcbmltcG9ydCB7IGh0bWwsIHRhZywgcHJvdmlkZXJzLCBzdGF0ZSwgY2FsbGJhY2tNYWtlciwgU3ViamVjdCwgb25Jbml0LCBzdGF0ZXMsIGhvc3QgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IGZ4IH0gZnJvbSBcInRhZ2dlZGpzLWFuaW1hdGUtY3NzXCI7XG5pbXBvcnQgeyBpbmplY3Rpb25UYWcgfSBmcm9tIFwiLi9pbmplY3Rpb25UZXN0aW5nLnRhZy5qc1wiO1xuZXhwb3J0IGNsYXNzIFRhZ0RlYnVnUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRhZ0RlYnVnID0gMDtcbiAgICAgICAgdGhpcy5zaG93RGlhbG9nID0gZmFsc2U7XG4gICAgfVxufVxuY29uc3QgUHJvdmlkZXJGdW5jID0gKCkgPT4gKHsgY291bnRlcjogMCB9KTtcbmV4cG9ydCBmdW5jdGlvbiB0YWdEZWJ1Z1Byb3ZpZGVyKCkge1xuICAgIGNvbnN0IHVwcGVyID0gcHJvdmlkZXJzLmNyZWF0ZSh1cHBlclRhZ0RlYnVnUHJvdmlkZXIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVwcGVyLFxuICAgICAgICB0ZXN0OiAwXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1cHBlclRhZ0RlYnVnUHJvdmlkZXIoKSB7XG4gICAgc3RhdGUoJ2Vuc3VyZSBzdGF0ZXMgaW4gcHJvdmlkZXJzIGFyZSBzdGFibGUnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAndXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyJyxcbiAgICAgICAgdGVzdDogMFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgcHJvdmlkZXJEZWJ1ZyA9IHRhZygoX3ggPSAncHJvdmlkZXJEZWJ1Z0Jhc2UnKSA9PiB7XG4gICAgLy8gcHJvdmlkZXJEZWJ1Z0Jhc2UsIGhhcyBwcm92aWRlclxuICAgIHByb3ZpZGVycy5jcmVhdGUoUHJvdmlkZXJGdW5jKTsgLy8gdGVzdCB0aGF0IGFuIGFycm93IGZ1bmN0aW9uIGNhbiBiZSBhIHByb3ZpZGVyXG4gICAgY29uc3QgcHJvdmlkZXJDbGFzcyA9IHByb3ZpZGVycy5jcmVhdGUoVGFnRGVidWdQcm92aWRlcik7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBwcm92aWRlcnMuY3JlYXRlKHRhZ0RlYnVnUHJvdmlkZXIpO1xuICAgIGxldCBwcm9wQ291bnRlciA9IDA7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgICAgICBwcm9wQ291bnRlciwgcmVuZGVyQ291bnQsXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgcHJvcENvdW50ZXIsIHJlbmRlckNvdW50LFxuICAgIH0pKTtcbiAgICBpZiAocHJvdmlkZXJDbGFzcy5zaG93RGlhbG9nKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm92aWRlcl9kZWJ1Z19kaWFsb2cnKS5zaG93TW9kYWwoKTtcbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVswXSwgcHJvdmlkZXIudGVzdCwgcHJvdmlkZXIudXBwZXI/LnRlc3QgfHwgJz8nLCBwcm92aWRlckNsYXNzLnRhZ0RlYnVnIHx8ICc/JywgKCkgPT4gKytwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCAoKSA9PiArK3Byb3ZpZGVyLnVwcGVyLnRlc3QsIHByb3ZpZGVyLnVwcGVyLnRlc3QsIHByb3ZpZGVyLnVwcGVyLnRlc3QsICgpID0+ICsrcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZywgcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZywgcHJvdmlkZXJDbGFzcy50YWdEZWJ1ZywgKCkgPT4gKytwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsIHByb3BDb3VudGVyLCAoKSA9PiBwcm92aWRlckNsYXNzLnNob3dEaWFsb2cgPSB0cnVlLCBwcm92aWRlckNsYXNzLnNob3dEaWFsb2csIHByb3ZpZGVyQ2hpbGREZWJ1Zyh7XG4gICAgICAgIHByb3BDb3VudGVyLFxuICAgICAgICBwcm9wQ291bnRlckNoYW5nZTogeCA9PiB7XG4gICAgICAgICAgICBwcm9wQ291bnRlciA9IHg7XG4gICAgICAgIH1cbiAgICB9KSwgcmVuZGVyQ291bnQsIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdwcm92aWRlckRlYnVnQmFzZScgfSksIGRpYWxvZyhwcm92aWRlckNsYXNzKSwgaW5DeWNsZUNvbnRleHRDb21tcygpKTtcbn0pO1xuLypcbmNvbnN0IHRhZ1N3aXRjaGluZ1dpdGhQcm92aWRlciA9IHRhZygoKSA9PiAoXG4gIHVwcGVyUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KCB1cHBlclRhZ0RlYnVnUHJvdmlkZXIgKVxuKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzFdLCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCAlIDIgPT0gMCA/ICdvZmYnIDogJ29uJywgdGFnU3dpdGNoaW5nUHJvQ2hpbGQxKCksIHVwcGVyUHJvdmlkZXIudGVzdCAlIDIgPT0gMCA/IG51bGwgOiB0YWdTd2l0Y2hpbmdQcm9DaGlsZDIoKSkpXG4qL1xuLypcbmNvbnN0IHRhZ1N3aXRjaGluZ1Byb0NoaWxkMSA9IHRhZygoKSA9PiAoXG4gIHVwcGVyUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KCB1cHBlclRhZ0RlYnVnUHJvdmlkZXIgKSxcbikgPT4gdXBwZXJQcm92aWRlci50ZXN0ICUgMiA9PSAwID8gbnVsbCA6IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbMl0sICgpID0+ICsrdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QsIHVwcGVyUHJvdmlkZXIudGVzdCkpXG5cbmNvbnN0IHRhZ1N3aXRjaGluZ1Byb0NoaWxkMiA9IHRhZygoKSA9PiAoXG4gIHVwcGVyUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KCB1cHBlclRhZ0RlYnVnUHJvdmlkZXIgKVxuKSA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzNdLCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QpKSovXG4vKiBjaGlsZCBvZiBtYWluIHByb3ZpZGVyIHRlc3RpbmcgKi9cbmNvbnN0IHByb3ZpZGVyQ2hpbGREZWJ1ZyA9IHRhZygoeyBwcm9wQ291bnRlciwgcHJvcENvdW50ZXJDaGFuZ2UsIF8gPSAncHJvdmlkZXJEZWJ1Zy5qc0BjaGlsZCcsIH0pID0+IHtcbiAgICBjb25zdCBmdW5jUHJvdmlkZXIgPSBwcm92aWRlcnMuaW5qZWN0KFByb3ZpZGVyRnVuYyk7IC8vIHRlc3QgdGhhdCBhbiBhcnJvdyBmdW5jdGlvbiBjYW4gYmUgYSBwcm92aWRlclxuICAgIGNvbnN0IHByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCh0YWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBjb25zdCBwcm92aWRlckNsYXNzID0gcHJvdmlkZXJzLmluamVjdChUYWdEZWJ1Z1Byb3ZpZGVyKTtcbiAgICBjb25zdCB1cHBlclByb3ZpZGVyID0gcHJvdmlkZXJzLmluamVjdCh1cHBlclRhZ0RlYnVnUHJvdmlkZXIpO1xuICAgIGxldCBzaG93UHJvUHJvcHMgPSBmYWxzZTtcbiAgICBsZXQgcmVuZGVyQ291bnQgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3sgc2hvd1Byb1Byb3BzLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IHNob3dQcm9Qcm9wcywgcmVuZGVyQ291bnQgfSkpO1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBjYWxsYmFja1Rlc3RTdWIgPSBzdGF0ZSgoKSA9PiBuZXcgU3ViamVjdCgpKTtcbiAgICBvbkluaXQoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmluZm8oJ3Byb3ZpZGVyRGVidWcudHM6IPCfkYkg8J+RiSBpIHNob3VsZCBvbmx5IGV2ZXIgcnVuIG9uY2UnKTtcbiAgICAgICAgY2FsbGJhY2tUZXN0U3ViLnN1YnNjcmliZSh4ID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrcygoeSkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnRlc3QgPSB4O1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVs0XSwgKCkgPT4gKytwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCBwcm92aWRlci50ZXN0LCAoKSA9PiArK3VwcGVyUHJvdmlkZXIudGVzdCwgdXBwZXJQcm92aWRlci50ZXN0LCB1cHBlclByb3ZpZGVyLnRlc3QsICgpID0+ICsrZnVuY1Byb3ZpZGVyLmNvdW50ZXIsIGZ1bmNQcm92aWRlci5jb3VudGVyLCBmdW5jUHJvdmlkZXIuY291bnRlciwgKCkgPT4gY2FsbGJhY2tUZXN0U3ViLm5leHQocHJvdmlkZXIudGVzdCArIDEpLCBwcm92aWRlci50ZXN0LCAoKSA9PiArK3Byb3ZpZGVyQ2xhc3MudGFnRGVidWcsIHByb3ZpZGVyQ2xhc3MudGFnRGVidWcsIHByb3ZpZGVyQ2xhc3MudGFnRGVidWcsICgpID0+IHByb3BDb3VudGVyQ2hhbmdlKCsrcHJvcENvdW50ZXIpLCBwcm9wQ291bnRlciwgcHJvcENvdW50ZXIsICgpID0+IHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZyA9IHRydWUsIHByb3ZpZGVyQ2xhc3Muc2hvd0RpYWxvZywgKCkgPT4gc2hvd1Byb1Byb3BzID0gIXNob3dQcm9Qcm9wcywgc2hvd1Byb1Byb3BzID8gJ2hpZGUnIDogJ3Nob3cnLCBzaG93UHJvUHJvcHMgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVs1XSwgZngoKSwgdGVzdFByb3ZpZGVyQXNQcm9wcyhwcm92aWRlckNsYXNzKSksIHJlbmRlckNvdW50LCByZW5kZXJDb3VudERpdih7IHJlbmRlckNvdW50LCBuYW1lOiAncHJvdmlkZXJEZWJ1Z0lubmVyJyB9KSk7XG59KTtcbmNvbnN0IHRlc3RQcm92aWRlckFzUHJvcHMgPSB0YWcoKHByb3ZpZGVyQ2xhc3MpID0+IHtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNjg1NzkyOVs2XSwgSlNPTi5zdHJpbmdpZnkocHJvdmlkZXJDbGFzcywgbnVsbCwgMikpO1xufSk7XG5jb25zdCBpbkN5Y2xlUGFyZW50ID0gaG9zdCgoY29sb3IgPSAncmVkJykgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0YWcuZWxlbWVudC5nZXQoKTtcbiAgICBlbGVtZW50LnN0eWxlLmJvcmRlciA9ICcycHggc29saWQgJyArIGNvbG9yO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICBlbGVtZW50LnN0eWxlLmdhcCA9ICcxZW0nO1xuICAgIGNvbnN0IHJ0biA9IHsgY29sb3IsIHRpdGxlOiAnaW5DeWNsZVBhcmVudCcgfTtcbiAgICByZXR1cm4gcnRuO1xufSk7XG5jb25zdCBpbkN5Y2xlQ2hpbGQgPSBob3N0KChjb2xvciA9ICdncmVlbicpID0+IHtcbiAgICBjb25zdCBwYXJlbnQgPSB0YWcuaW5qZWN0KGluQ3ljbGVQYXJlbnQpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0YWcuZWxlbWVudC5nZXQoKTtcbiAgICBlbGVtZW50LnN0eWxlLmJvcmRlciA9ICcycHggc29saWQgJyArIGNvbG9yO1xuICAgIGVsZW1lbnQuc3R5bGUuZmxleCA9ICcxJztcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGB3b25kZXJmdWwgLSBwYXJlbnQoJHtwYXJlbnQuY29sb3J9KWA7XG59KTtcbmNvbnN0IGluQ3ljbGVDaGlsZDIgPSBob3N0KChjb2xvciA9ICdncmVlbicpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGFnLmVsZW1lbnQuZ2V0KCk7XG4gICAgZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkICcgKyBjb2xvcjtcbiAgICBlbGVtZW50LnN0eWxlLmZsZXggPSAnMSc7XG59KTtcbmNvbnN0IGluQ3ljbGVDaGlsZDMgPSBob3N0KChjb2xvciA9ICdncmVlbicpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGFnLmVsZW1lbnQuZ2V0KCk7XG4gICAgZWxlbWVudC5zdHlsZS5jb2xvciA9IGNvbG9yO1xufSk7XG5jb25zdCBjb2xvck9wdGlvbnMgPSBbJ3JlZCcsICdibHVlJywgJ2dyZWVuJywgJ3B1cnBsZScsICdvcmFuZ2UnXTtcbmNvbnN0IGluQ3ljbGVDb250ZXh0Q29tbXMgPSB0YWcoKCkgPT4ge1xuICAgIGxldCBjeWNsZUNvbG9yUGFyZW50ID0gJ3JlZCc7XG4gICAgbGV0IGN5Y2xlQ29sb3JDaGlsZCA9ICdncmVlbic7XG4gICAgbGV0IGN5Y2xlQ29sb3JDaGlsZDIgPSAnZ3JlZW4nO1xuICAgIGxldCBoaWRlU2hvd0N5Y2xlcyA9IGZhbHNlO1xuICAgIHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgICAgIGN5Y2xlQ29sb3JQYXJlbnQsIGN5Y2xlQ29sb3JDaGlsZCwgY3ljbGVDb2xvckNoaWxkMiwgaGlkZVNob3dDeWNsZXMsXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgY3ljbGVDb2xvclBhcmVudCwgY3ljbGVDb2xvckNoaWxkLCBjeWNsZUNvbG9yQ2hpbGQyLCBoaWRlU2hvd0N5Y2xlcyxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbN10sICFoaWRlU2hvd0N5Y2xlcywgZSA9PiBoaWRlU2hvd0N5Y2xlcyA9ICFoaWRlU2hvd0N5Y2xlcywgIWhpZGVTaG93Q3ljbGVzICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbOF0sIGUgPT4gY3ljbGVDb2xvclBhcmVudCA9IGUudGFyZ2V0LnZhbHVlLCBjb2xvck9wdGlvbnMubWFwKGNvbG9yID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbOV0sIGNvbG9yLCBjeWNsZUNvbG9yUGFyZW50ID09PSBjb2xvciwgY29sb3IpLmtleShjb2xvcikpLCBlID0+IGN5Y2xlQ29sb3JDaGlsZCA9IGUudGFyZ2V0LnZhbHVlLCBjb2xvck9wdGlvbnMubWFwKGNvbG9yID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY4NTc5MjlbMTBdLCBjb2xvciwgY3ljbGVDb2xvckNoaWxkID09PSBjb2xvciwgY29sb3IpLmtleShjb2xvcikpLCBlID0+IGN5Y2xlQ29sb3JDaGlsZDIgPSBlLnRhcmdldC52YWx1ZSwgY29sb3JPcHRpb25zLm1hcChjb2xvciA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2ODU3OTI5WzExXSwgY29sb3IsIGN5Y2xlQ29sb3JDaGlsZDIgPT09IGNvbG9yLCBjb2xvcikua2V5KGNvbG9yKSksIGluamVjdGlvblRhZygpLCBpbkN5Y2xlUGFyZW50KGN5Y2xlQ29sb3JQYXJlbnQpLCBpbkN5Y2xlQ2hpbGQoY3ljbGVDb2xvckNoaWxkKSwgaW5DeWNsZUNoaWxkMihjeWNsZUNvbG9yQ2hpbGQyKSwgaW5DeWNsZUNoaWxkMyhjeWNsZUNvbG9yQ2hpbGQyKSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjg1NzkyOTogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvdmlkZXJEZWJ1Zy5qcy0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicHJvdmlkZXIudGVzdCBzdWdhci1kYWRkeS03N1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzdHJvbmdcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicHJvdmlkZXIudXBwZXI/LnRlc3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInByb3ZpZGVyQ2xhc3MudGFnRGVidWdcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI6XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42MLTAtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgaW5jcmVhc2UgcHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NjCBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0wLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTAtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLkgaW5jcmVhc2UgdXBwZXIucHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuSBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItdXBwZXIt8J+MuS0wLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42ALTAtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYAgaW5jcmVhc2UgcHJvdmlkZXIgY2xhc3MgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTAgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42AIFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42ALTAtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm9wLfCfkLctMC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkLcgKytwcm9wQ291bnRlciBpbiBwYXJlbnQgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5C3IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm9wLfCfkLctMC1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTQgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxNSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfkqwgdG9nZ2xlIGRpYWxvZyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxNiB9XSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTcgfV0gfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudCBvdXRlcjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcIm5hbWVcIiwgXCJyZW5kZXJfY291bnRfb3V0ZXJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxOCB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxOSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG5cXG4gICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMjAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiXFxuXFxuICAgIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIxIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcbiAgXCIgfV0sIFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItc3dpdGNoLfCfjLktMC1idXR0b25cIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuSBpbmNyZWFzZSBzd2l0Y2gucHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuVwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci1zd2l0Y2gt8J+MuS0wLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImhyXCIgfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN0YXR1ZTpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfSwgeyBcIm5uXCI6IFwiaHJcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA1IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlxcblwiIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXN3aXRjaC3wn4y5LTEtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLkgaW5jcmVhc2Ugc3dpdGNoLnByb3ZpZGVyLnRlc3QgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLlcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXItc3dpdGNoLfCfjLktMS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci1zd2l0Y2gt8J+MuS0yLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5IGluY3JlYXNlIHN3aXRjaC5wcm92aWRlci50ZXN0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn4y5XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLXN3aXRjaC3wn4y5LTItZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tcHJvdmlkZXJEZWJ1Zy5qc0BjaGlsZC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci3wn42MLTEtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYwgaW5jcmVhc2UgcHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NjCBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NjC0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTEtYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjLkgaW5jcmVhc2UgdXBwZXIucHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+MuVwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbmNyZWFzZS1wcm92aWRlci11cHBlci3wn4y5LTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLWFycm93LXByb3ZpZGVyLeKaoe+4jy0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDYgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLimqHvuI8gaW5jcmVhc2UgdXBwZXIucHJvdmlkZXIudGVzdCBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi4pqh77iPXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLWFycm93LXByb3ZpZGVyLeKaoe+4jy0xLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJzdWJqZWN0LWluY3JlYXNlLWNvdW50ZXJcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiA5IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NjCBzdWJqZWN0IGluY3JlYXNlOlwiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NjCBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwic3ViamVjdC1jb3VudGVyLWRpc3BsYXlcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvdmlkZXIt8J+NgC0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDExIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+NgCBpbmNyZWFzZSBwcm92aWRlciBjbGFzcyBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMiB9XSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfjYAgXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3ZpZGVyLfCfjYAtMS1kaXNwbGF5XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluY3JlYXNlLXByb3At8J+Qty0xLWJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDE0IH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QtyArK3Byb3BDb3VudGVyIGluIGNoaWxkIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE1IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+QtyBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaW5jcmVhc2UtcHJvcC3wn5C3LTEtZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDE2IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTcgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5KsIHRvZ2dsZSBkaWFsb2cgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTggfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxOSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiBwcm92aWRlciBhcyBwcm9wc1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIxIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJyZW5kZXJDb3VudCBpbm5lcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJcXG4gICAgICBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyMyB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImgzXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlByb3ZpZGVyIGFzIFByb3BzXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSwgW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS1wcm92aWRlckRlYnVnLmpzQFRlc3RQcm92aWRlckFzUHJvcHMtLT5cIiB9LCB7IFwibm5cIjogXCJ0ZXh0YXJlYVwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIndpZHRoOjEwMCU7Zm9udC1zaXplOjAuNmVtXCJdLCBbXCJ3cmFwXCIsIFwib2ZmXCJdLCBbXCJyb3dzXCIsIFwiMjBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dLCBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbi1jeWNsZS1jb250ZXh0LWNvbW1zXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxhYmVsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcImlucHV0XCIsIFwiYXRcIjogW1tcInR5cGVcIiwgXCJjaGVja2JveFwiXSwgW1wiY2hlY2tlZFwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJJbi1DeWNsZSBDb250ZXh0IENvbW11bmljYXRpb25cIiB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWFyZ2luLWJvdHRvbTogMWVtXCJdLCBbXCJpZFwiLCBcImZpZWxkc2V0LWJvZHktd3JhcFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxhYmVsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIlBhcmVudCBDb2xvcjogXCIgfSwgeyBcIm5uXCI6IFwic2VsZWN0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFyZW50LWNvbG9yLXNlbGVjdFwiXSwgW1wiY2hhbmdlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9LCB7IFwibm5cIjogXCJsYWJlbFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcIm1hcmdpbi1sZWZ0OiAxZW1cIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJDaGlsZCBDb2xvcjogXCIgfSwgeyBcIm5uXCI6IFwic2VsZWN0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGQtY29sb3Itc2VsZWN0XCJdLCBbXCJjaGFuZ2VcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dIH0sIHsgXCJublwiOiBcImxhYmVsXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWFyZ2luLWxlZnQ6IDFlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIkNoaWxkIENvbG9yMjogXCIgfSwgeyBcIm5uXCI6IFwic2VsZWN0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY2hpbGQtY29sb3Itc2VsZWN0LTJcIl0sIFtcImNoYW5nZVwiLCB7IFwidGFnSnNWYXJcIjogNCB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwiZHJhZy1kcm9wLXdyYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJoM1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJEcmFnIFNlbGVjdGlvbiBUZXN0aW5nXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJpbi1jeWNsZS1wYXJlbnRcIl0sIFt7IFwidGFnSnNWYXJcIjogNyB9XV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluLWN5Y2xlLWNoaWxkXCJdLCBbeyBcInRhZ0pzVmFyXCI6IDggfV1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImluLWN5Y2xlLWNoaWxkLTJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3b25kZXJmdWwgdG9vXFxuICAgICAgICAgICAgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInBhcnQgMlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH1dIH1dIH1dIH1dLCBbeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJzZWxlY3RlZFwiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0sIFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgeyBcInRhZ0pzVmFyXCI6IDAgfSwgbnVsbF0sIFtcInNlbGVjdGVkXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSwgW3sgXCJublwiOiBcIm9wdGlvblwiLCBcImF0XCI6IFtbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogMCB9LCBudWxsXSwgW1wic2VsZWN0ZWRcIiwgeyBcInRhZ0pzVmFyXCI6IDEgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnLCBzdGF0ZXMgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCB0YWJsZURlYnVnID0gdGFnKCgpID0+IHtcbiAgICBsZXQgc2hvd0NlbGwgPSB0cnVlO1xuICAgIHN0YXRlcyhnZXQgPT4gW3Nob3dDZWxsXSA9IGdldChzaG93Q2VsbCkpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M1Mjc4MlswXSwgNSwgNSwgc2hvd0NlbGwgJiYgaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNTI3ODJbMV0pLCBzaG93Q2VsbCAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M1Mjc4MlsyXSkpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNTI3ODI6IFtbeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwibWF4LWhlaWdodDogODAwcHg7b3ZlcmZsb3cteTogc2Nyb2xsO1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRhYmxlXCIsIFwiYXRcIjogW1tcImNlbGxwYWRkaW5nXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdLCBbXCJjZWxsc3BhY2luZ1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXSwgW1wiYm9yZGVyXCIsIFwiMVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRoZWFkXCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwicG9zaXRpb246IHN0aWNreTt0b3A6IDA7XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidHJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGhcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGVsbG9cIiB9XSB9LCB7IFwibm5cIjogXCJ0aFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoZWxsb1wiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDIgfV0gfV0gfSwgeyBcIm5uXCI6IFwidGJvZHlcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidHJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid29ybGRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3b3JsZFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfV0gfV0gfV0gfV0gfV0sIFt7IFwibm5cIjogXCJ0ZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJoZWxsbyAyIHRoZWFkIGNlbGxcIiB9XSB9XSwgW3sgXCJublwiOiBcInRkXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIndvcmxkIDIgdGJvZHkgY2VsbFwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgd2F0Y2gsIGh0bWwsIHRhZywgc3RhdGVzLCBzdWJzY3JpYmUsIGNhbGxiYWNrIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5leHBvcnQgY29uc3Qgd2F0Y2hUZXN0aW5nID0gdGFnLmRlZXBQcm9wV2F0Y2goKCkgPT4gKHN0YXRlTnVtID0gMCwgc3RhdGVOdW1DaGFuZ2VDb3VudCA9IDAsIHNsb3dDaGFuZ2VDb3VudCA9IDAsIHN1YmplY3RDaGFuZ2VDb3VudCA9IDAsIHRydXRoQ2hhbmdlID0gZmFsc2UsIHRydXRoQ2hhbmdlQ291bnQgPSAwLCB0cnV0aFN1YkNoYW5nZUNvdW50ID0gMCwgX3N0YXRlcyA9IHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgc3RhdGVOdW0sIHN0YXRlTnVtQ2hhbmdlQ291bnQsIHNsb3dDaGFuZ2VDb3VudCwgc3ViamVjdENoYW5nZUNvdW50LFxuICAgICAgICB0cnV0aENoYW5nZSwgdHJ1dGhDaGFuZ2VDb3VudCxcbiAgICAgICAgdHJ1dGhTdWJDaGFuZ2VDb3VudCxcbiAgICB9XSA9IGdldCh7XG4gICAgc3RhdGVOdW0sIHN0YXRlTnVtQ2hhbmdlQ291bnQsIHNsb3dDaGFuZ2VDb3VudCwgc3ViamVjdENoYW5nZUNvdW50LFxuICAgIHRydXRoQ2hhbmdlLCB0cnV0aENoYW5nZUNvdW50LFxuICAgIHRydXRoU3ViQ2hhbmdlQ291bnQsXG59KSksIF8gPSB3YXRjaChbc3RhdGVOdW1dLCAoKSA9PiArK3N0YXRlTnVtQ2hhbmdlQ291bnQpLCB3YXRjaFByb3BOdW1TbG93ID0gd2F0Y2gubm9Jbml0KFtzdGF0ZU51bV0sIGNhbGxiYWNrKCgpID0+ICsrc2xvd0NoYW5nZUNvdW50KSksIHdhdGNoUHJvcE51bVN1YmplY3QgPSB3YXRjaC5hc1N1YmplY3QoW3N0YXRlTnVtXSwgY2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiArK3N1YmplY3RDaGFuZ2VDb3VudDtcbn0pKSwgd2F0Y2hUcnV0aCA9IHdhdGNoLnRydXRoeShbdHJ1dGhDaGFuZ2VdLCBjYWxsYmFjaygoKSA9PiArK3RydXRoQ2hhbmdlQ291bnQpKSwgd2F0Y2hUcnV0aEFzU3ViID0gd2F0Y2gudHJ1dGh5LmFzU3ViamVjdChbdHJ1dGhDaGFuZ2VdLCBjYWxsYmFjaygodHJ1dGhDaGFuZ2UpID0+IHtcbiAgICArK3RydXRoU3ViQ2hhbmdlQ291bnQ7XG4gICAgcmV0dXJuIHRydXRoU3ViQ2hhbmdlQ291bnQ7XG59KSkpID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczIxODc2MTNbMF0sIHN0YXRlTnVtLCAoKSA9PiArK3N0YXRlTnVtLCBzdGF0ZU51bUNoYW5nZUNvdW50LCBzbG93Q2hhbmdlQ291bnQsIHdhdGNoUHJvcE51bVNsb3csIHN1YmplY3RDaGFuZ2VDb3VudCwgc3Vic2NyaWJlKHdhdGNoUHJvcE51bVN1YmplY3QpLCB0cnV0aENoYW5nZSA/ICd0cnVlJyA6ICdmYWxzZScsIHdhdGNoVHJ1dGggfHwgJ2ZhbHNlJywgdHJ1dGhDaGFuZ2VDb3VudCwgc3Vic2NyaWJlKHdhdGNoVHJ1dGhBc1N1YiksIHRydXRoU3ViQ2hhbmdlQ291bnQsICgpID0+IHRydXRoQ2hhbmdlID0gIXRydXRoQ2hhbmdlLCB0cnV0aENoYW5nZSA/ICd0cnVlJyA6ICdmYWxzZScpKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3MyMTg3NjEzOiBbW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjwhLS0gd2F0Y2hUZXN0aW5nLnRhZy50cyAtLT5zdGF0ZU51bTpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwid2F0Y2gtdGVzdGluZy1udW0tZGlzcGxheVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwid2F0Y2gtdGVzdGluZy1udW0tYnV0dG9uXCJdLCBbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIisrIHN0YXRlTnVtXCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN0YXRlTnVtQ2hhbmdlQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInN0YXRlTnVtQ2hhbmdlQ291bnRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42EIHNsb3dDaGFuZ2VDb3VudFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+NhC1zbG93Q2hhbmdlQ291bnRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAzIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJzbWFsbFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ3YXRjaFByb3BOdW1TbG93OlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn42ELXdhdGNoUHJvcE51bVNsb3dcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn42E4oCN8J+fqyBzdWJqZWN0Q2hhbmdlQ291bnRcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfjYTigI3wn5+rLXN1YmplY3RDaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIih3YXRjaFByb3BOdW1TdWJqZWN0OlwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn42E4oCN8J+fqy13YXRjaFByb3BOdW1TdWJqZWN0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIpXCIgfV0gfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIvCfprcgdHJ1dGhDaGFuZ2VcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfprctdHJ1dGhDaGFuZ2VcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzaW1wbGUgdHJ1dGhcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwid2F0Y2hUcnV0aDpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty13YXRjaFRydXRoXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKHRydXRoQ2hhbmdlQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfprctdHJ1dGhDaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKVwiIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0cnV0aCBzdWJqZWN0XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInNtYWxsXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIndhdGNoVHJ1dGhBc1N1YjpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwi8J+mty13YXRjaFRydXRoQXNTdWJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMCB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwic21hbGxcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiKHRydXRoU3ViQ2hhbmdlQ291bnQ6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcIvCfprctdHJ1dGhTdWJDaGFuZ2VDb3VudFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDExIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIilcIiB9XSB9XSB9XSB9LCB7IFwibm5cIjogXCJidXR0b25cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCLwn6a3LXRydXRoQ2hhbmdlLWJ1dHRvblwiXSwgW1widHlwZVwiLCBcImJ1dHRvblwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDEyIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+mtyB0b2dnbGUgdG8gXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTMgfV0gfV0gfV1dIH07XG4iLCJpbXBvcnQgeyB0YWcsIFN1YmplY3QsIFZhbHVlU3ViamVjdCwgc3Vic2NyaWJlV2l0aCwgc3Vic2NyaWJlLCBzcGFuLCBkaXYsIGJ1dHRvbiwgZmllbGRzZXQsIGxlZ2VuZCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuZXhwb3J0IGNvbnN0IHN1YnNjcmliZUF0dHJpYnV0ZXMgPSB0YWcoKCkgPT4ge1xuICAgIGNvbnN0IHN1YkNvbG9yJCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgY29uc3Qgc3ViQ29sb3JQdXJwbGVPcmFuZ2UkID0gbmV3IFZhbHVlU3ViamVjdCgncHVycGxlJyk7XG4gICAgY29uc3Qgc3ViQ29sb3JHcmVlblllbGxvdyQgPSBuZXcgVmFsdWVTdWJqZWN0KCdncmVlbicpO1xuICAgIGxldCBzaG91bGRIaWRlQXR0cmlidXRlcyA9IGZhbHNlO1xuICAgIGNvbnN0IGF0dHJpYnV0ZUNvbnRlbnQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChzaG91bGRIaWRlQXR0cmlidXRlcylcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgcmV0dXJuIGRpdih7XG4gICAgICAgICAgICBzdHlsZTogXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbTtmb250LXNpemU6MC44ZW1cIixcbiAgICAgICAgICAgIGlkOiBcInN1YnNjcmliZS1hdHRyaWJ1dGVzLXdyYXBcIlxuICAgICAgICB9LCBkaXYoeyBzdHlsZTogXCJkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjFlbVwiIH0sIGZpZWxkc2V0KHsgc3R5bGU6IFwiZmxleC1ncm93OjFcIiB9LCBsZWdlbmQoJ3N1YnNjcmliZSBzcGVjaWFsIGF0dHJpYnV0ZScpLCBzcGFuKHtcbiAgICAgICAgICAgIGlkOiBcInN1YnNjcmliZS1zdHlsZS1kb3QtYmctY29sb3ItY2hhbmdlclwiLFxuICAgICAgICAgICAgc3R5bGU6IHN1YnNjcmliZVdpdGgoc3ViQ29sb3IkLCAncmVkJywgKHN1YkNvbG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgYmFja2dyb3VuZENvbG9yOiBzdWJDb2xvciB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgJ2JhY2tncm91bmQgY29sb3IgY2hhbmdlcicpKSwgZmllbGRzZXQoeyBzdHlsZTogXCJmbGV4LWdyb3c6MVwiIH0sIGxlZ2VuZCgnc3Vic2NyaWJlIHN0eWxlIGF0dHJpYnV0ZScpLCBzcGFuKHtcbiAgICAgICAgICAgIGlkOiBcInN1YnNjcmliZS1zdHlsZS1iZy1jb2xvclwiLFxuICAgICAgICAgICAgc3R5bGU6IHN1YnNjcmliZVdpdGgoc3ViQ29sb3IkLCAncmVkJywgc3ViQ29sb3IgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBgYmFja2dyb3VuZC1jb2xvcjoke3N1YkNvbG9yfWA7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCAnc3Vic2NyaWJlIGJnIGNvbG9yJykpLCBmaWVsZHNldCh7IHN0eWxlOiBcImZsZXgtZ3JvdzoxXCIgfSwgbGVnZW5kKCdzb21ldGltZXMgc3Vic2NyaWJlIHN0eWxlIGF0dHJpYnV0ZScpLCBzcGFuKHtcbiAgICAgICAgICAgIGlkOiBcIm11bHRpcGxlLXN1YnNjcmliZS1iZy1jb2xvclwiLFxuICAgICAgICAgICAgc3R5bGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHN1YkNvbG9yJC52YWx1ZSA9PT0gJ2JsdWUnICYmXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZShzdWJDb2xvclB1cnBsZU9yYW5nZSQsIHN1YkNvbG9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnYmFja2dyb3VuZC1jb2xvcjonICsgc3ViQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHN1YkNvbG9yJC52YWx1ZSA9PT0gJ3JlZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmUoc3ViQ29sb3JHcmVlblllbGxvdyQsIHN1YkNvbG9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdiYWNrZ3JvdW5kLWNvbG9yOicgKyBzdWJDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yOnBpbms7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgJ211bHRpcGxlIHN1YnNjcmliZSBiZyBjb2xvcicpKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGZpZWxkc2V0KHsgc3R5bGU6IFwiZmxleC1ncm93OjFcIiB9LCBsZWdlbmQoJ3N1YnNjcmliZSBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gYC0gc2hvdWxkSGlkZUF0dHJpYnV0ZXM6ICR7c2hvdWxkSGlkZUF0dHJpYnV0ZXN9YDtcbiAgICB9KSwgYXR0cmlidXRlQ29udGVudCwgYnV0dG9uKHtcbiAgICAgICAgaWQ6IFwidG9nZ2xlLWNvbG9yLWJ0blwiLFxuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sb3IgPSBzdWJDb2xvciQudmFsdWU7XG4gICAgICAgICAgICBzdWJDb2xvciQubmV4dChjdXJyZW50Q29sb3IgPT09ICdyZWQnID8gJ2JsdWUnIDogJ3JlZCcpO1xuICAgICAgICB9XG4gICAgfSwgYFRvZ2dsZSBDb2xvciAoYCwgc3Vic2NyaWJlKHN1YkNvbG9yJCksICcpJyksIGJ1dHRvbih7XG4gICAgICAgIGlkOiAndG9nZ2xlLWF0dHJpYnV0ZXMtYnRuJyxcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHNob3VsZEhpZGVBdHRyaWJ1dGVzID0gIXNob3VsZEhpZGVBdHRyaWJ1dGVzO1xuICAgICAgICB9XG4gICAgfSwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gc2hvdWxkSGlkZUF0dHJpYnV0ZXMgPyAnU2hvdycgOiAnSGlkZSc7XG4gICAgfSwgJyBBdHRyaWJ1dGVzJyksIGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHN1YkNvbG9yJC5uZXh0KCcnKSxcbiAgICAgICAgaWQ6IFwiY2xlYXItY29sb3ItYnRuXCIsXG4gICAgICAgIHR5cGU6ICdidXR0b24nXG4gICAgfSwgYENsZWFyIENvbG9yYCksIGBzdWJzY3JpcHRpb25zOiBgLCBzcGFuKHsgaWQ6ICdzdWJzY3JpcHRpb25zLWNvdW50JyB9LCBzdWJzY3JpYmVXaXRoKFN1YmplY3QuZ2xvYmFsU3ViQ291bnQkLCBTdWJqZWN0Lmdsb2JhbFN1YkNvdW50JC52YWx1ZSkpKTtcbn0pO1xuIiwiaW1wb3J0IHsgZGl2LCBmaWVsZHNldCwgaDMsIGhyLCBpbnB1dCwgbGVnZW5kLCBsaSwgb2wsIG9wdGlvbiwgc2VsZWN0LCB0YWcgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmltcG9ydCB7IHN1YnNjcmliZUF0dHJpYnV0ZXMgfSBmcm9tIFwiLi9zdWJzY3JpYmVBdHRyaWJ1dGVzLnRhZ1wiO1xuZXhwb3J0IGNvbnN0IGF0dHJpYnV0ZURlYnVnID0gdGFnKCgpID0+IHtcbiAgICBsZXQgc2VsZWN0ZWQgPSAnYSc7XG4gICAgbGV0IGlzT3JhbmdlID0gdHJ1ZTtcbiAgICByZXR1cm4gZGl2KGlucHV0KHtcbiAgICAgICAgaWQ6IFwiYXR0ci1pbnB1dC1hYmNcIixcbiAgICAgICAgcGxhY2Vob2xkZXI6IFwiYSBiIG9yIGNcIixcbiAgICAgICAgb25DaGFuZ2U6IChldmVudCkgPT4gc2VsZWN0ZWQgPSBldmVudC50YXJnZXQudmFsdWVcbiAgICB9KSwgc2VsZWN0KHtcbiAgICAgICAgb25DaGFuZ2U6IGUgPT4gc2VsZWN0ZWQgPSBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgaWQ6IFwic2VsZWN0LXNhbXBsZS1kcm9wLWRvd25cIlxuICAgIH0sIFsnYScsICdiJywgJ2MnXS5tYXAoaXRlbSA9PiBvcHRpb24oe1xuICAgICAgICB2YWx1ZTogaXRlbSxcbiAgICAgICAgc2VsZWN0ZWQ6ICgpID0+IGl0ZW0gPT0gc2VsZWN0ZWRcbiAgICB9LCBpdGVtLCAnIC0gJywgXyA9PiBpdGVtID09IHNlbGVjdGVkID8gJ3RydWUnIDogJ2ZhbHNlJykpKSwgc2VsZWN0KHtcbiAgICAgICAgb25DaGFuZ2U6IGUgPT4gc2VsZWN0ZWQgPSBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgaWQ6IFwic2VsZWN0LXNhbXBsZS1kcm9wLWRvd24tY2xvbmVcIlxuICAgIH0sIFsnYScsICdiJywgJ2MnXS5tYXAoaXRlbSA9PiBvcHRpb24oe1xuICAgICAgICB2YWx1ZTogaXRlbSxcbiAgICAgICAgc2VsZWN0ZWQ6ICgpID0+IGl0ZW0gPT0gc2VsZWN0ZWRcbiAgICB9LCBpdGVtLCAnIC0gJywgaXRlbSA9PSBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScpKSksIGhyLCBoMygnU3BlY2lhbCBBdHRyaWJ1dGVzJyksIGRpdihpbnB1dCh7XG4gICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgICAgaWQ6IFwidG9nZ2xlLWJhY2tncm91bmRzXCIsXG4gICAgICAgIGNoZWNrZWQ6ICgpID0+IGlzT3JhbmdlICYmICdjaGVja2VkJyxcbiAgICAgICAgb25DaGFuZ2U6IChldmVudCkgPT4gaXNPcmFuZ2UgPSBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgIH0pLCAoKSA9PiBgIC0gdG9nZ2xlIGJhY2tncm91bmRzOiR7aXNPcmFuZ2UgPyAndHJ1ZScgOiAnZmFsc2UnfWApLCBkaXYoeyBzdHlsZTogXCJkaXNwbGF5OiBmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIiB9LCBvbChsaShkaXYoe1xuICAgICAgICBpZDogXCJhdHRyLXN0eWxlLXN0cmluZ3NcIixcbiAgICAgICAgc3R5bGU6IF8gPT4gKHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNPcmFuZ2UgPyAnb3JhbmdlJyA6ICcnLFxuICAgICAgICAgICAgY29sb3I6IGlzT3JhbmdlID8gJ2JsYWNrJyA6ICcnLFxuICAgICAgICB9KVxuICAgIH0sIFwic3R5bGUuYmFja2dyb3VuZC1jb2xvcj0keydvcmFuZ2UnfVwiKSksIGxpKGRpdih7XG4gICAgICAgIGlkOiBcImF0dHItY2xhc3MtYm9vbGVhbnNcIixcbiAgICAgICAgY2xhc3M6ICgpID0+ICh7XG4gICAgICAgICAgICAnYmFja2dyb3VuZC1vcmFuZ2UnOiBpc09yYW5nZSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgICAgICd0ZXh0LWJsYWNrJzogaXNPcmFuZ2UgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgfSwgKCkgPT4gYGNsYXNzLmJhY2tncm91bmQtb3JhbmdlPSR7aXNPcmFuZ2V9YCkpLCBsaShkaXYoe1xuICAgICAgICBpZDogXCJhdHRyLWlubGluZS1jbGFzc1wiLFxuICAgICAgICBjbGFzczogKCkgPT4gaXNPcmFuZ2UgPyAnYmFja2dyb3VuZC1vcmFuZ2UgdGV4dC1ibGFjaycgOiAnJ1xuICAgIH0sIFwiY2xhc3M9JHsnYmFja2dyb3VuZC1vcmFuZ2UgdGV4dC1ibGFjayd9XCIpKSwgbGkoZGl2KHtcbiAgICAgICAgaWQ6IFwiYXR0ci1keW5hbWljLWlubGluZS1jbGFzc1wiLFxuICAgICAgICBjbGFzczogKCkgPT4gJ3RleHQtd2hpdGUnICsgKGlzT3JhbmdlID8gJyBiYWNrZ3JvdW5kLW9yYW5nZScgOiAnJylcbiAgICB9LCBcImNsYXNzPSR7J2JhY2tncm91bmQtb3JhbmdlJ30gYnV0IGFsd2F5cyB3aGl0ZVwiKSkpKSwgZmllbGRzZXQoeyBzdHlsZTogXCJtYXJnaW4tdG9wOiAxZW1cIiB9LCBsZWdlbmQoJ3N0eWxlIG9iamVjdCBhdHRyaWJ1dGUnKSwgZGl2KHtcbiAgICAgICAgaWQ6IFwic3R5bGUtb2JqZWN0LXRlc3RcIixcbiAgICAgICAgc3R5bGU6IF8gPT4gKHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNPcmFuZ2UgPyAnb3JhbmdlJyA6ICdsaWdodGdyZXknLFxuICAgICAgICAgICAgcGFkZGluZzogJzEwcHgnLFxuICAgICAgICAgICAgYm9yZGVyOiAnMnB4IHNvbGlkIGJsYWNrJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogaXNPcmFuZ2UgPyAnOHB4JyA6ICc0cHgnLFxuICAgICAgICAgICAgYm94U2hhZG93OiBpc09yYW5nZSA/ICcycHggMnB4IDRweCByZ2JhKDAsMCwwLDAuMyknIDogJ25vbmUnXG4gICAgICAgIH0pXG4gICAgfSwgJ1N0eWxlIG9iamVjdCB0ZXN0JyksIGRpdih7XG4gICAgICAgIGlkOiBcInN0eWxlLXNldC1wcm9wZXJ0eS10ZXN0XCIsXG4gICAgICAgIHN0eWxlOiBfID0+ICh7XG4gICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6IGlzT3JhbmdlID8gJ3JlZCcgOiAnYmx1ZScsXG4gICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc1cHgnLFxuICAgICAgICAgICAgJ21hcmdpbi10b3AnOiAnMTBweCdcbiAgICAgICAgfSlcbiAgICB9LCAnc3R5bGUgcHJvcGVydHkgdGVzdCcpKSwgXyA9PiBzdWJzY3JpYmVBdHRyaWJ1dGVzKCkpO1xufSk7XG4iLCJpbXBvcnQgeyBkaXYsIHRhZywgYnV0dG9uLCBzZWxlY3QsIG9wdGlvbiwgc3BhbiwgaDIsIHAgfSBmcm9tIFwidGFnZ2VkanNcIjtcbmV4cG9ydCBjb25zdCBiYXNpYyA9IHRhZygoKSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IHNob3dEaXYgPSB0cnVlO1xuICAgIHJlbmRlckNvdW50Kys7XG4gICAgcmV0dXJuIGRpdihoMignQmFzaWMgQ29tcG9uZW50JyksIHAoXyA9PiBgQ291bnRlcjogJHtjb3VudGVyfWApLCBwKF8gPT4gYFJlbmRlciBDb3VudDogJHtyZW5kZXJDb3VudH1gKSwgYnV0dG9uKHtcbiAgICAgICAgb25DbGljazogKCkgPT4gY291bnRlcisrXG4gICAgfSwgJ0luY3JlbWVudCBDb3VudGVyJyksIGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHNob3dEaXYgPSAhc2hvd0RpdlxuICAgIH0sIF8gPT4gYFRvZ2dsZSBEaXYgKCR7c2hvd0RpdiA/ICdIaWRlJyA6ICdTaG93J30pYCksIF8gPT4gc2hvd0RpdiAmJiBib2x0VGFnKGNvdW50ZXIpKTtcbn0pO1xuY29uc3QgYm9sdFRhZyA9IHRhZygocGFyZW50Q291bnRlcikgPT4ge1xuICAgIGxldCBjbGlja0NvdW50ID0gMDtcbiAgICBsZXQgY29sb3IgPSAncmVkJztcbiAgICBib2x0VGFnLnVwZGF0ZXMoeCA9PiBbcGFyZW50Q291bnRlcl0gPSB4KTtcbiAgICByZXR1cm4gZGl2KCgpID0+IGBjb2xvcjogJHtjb2xvcn1gLCBzZWxlY3QoeyBvbkNoYW5nZTogZSA9PiBjb2xvciA9IGUudGFyZ2V0LnZhbHVlIH0sIG9wdGlvbih7IHZhbHVlOiAncmVkJyB9LCAncmVkJyksIG9wdGlvbih7IHZhbHVlOiAnZ3JlZW4nIH0sICdncmVlbicpKSwgKCkgPT4gYXJyYXlCb2x0VGVzdChwYXJlbnRDb3VudGVyKSwgc3Bhbih7IHN0eWxlOiBfID0+ICdjb2xvcjonICsgY29sb3IgfSwgJ2hlbGxvIG15IHNwYW4gd29ybGQnKSwgZGl2KHsgc3R5bGU6IF8gPT4gJ2NvbG9yOicgKyBjb2xvciB9LCAnaGVsbG8gbXkgZGl2IHdvcmxkJyksIGJ1dHRvbih7IG9uQ2xpY2s6ICgpID0+ICsrY2xpY2tDb3VudCB9LCAnY2xpY2sgbWUnKSwgZGl2KF8gPT4gYGNsaWNrIGNvdW50cyAke2NsaWNrQ291bnR9YCksIGRpdihfID0+IGBwYXJlbnQgY291bnRlcjogJHtwYXJlbnRDb3VudGVyfWApLCBkaXYoXyA9PiBgY29tYmluZWQgY291bnRlcnM6ICR7Y2xpY2tDb3VudCArIHBhcmVudENvdW50ZXJ9YCkpO1xufSk7XG5jb25zdCBhcnJheUJvbHRUZXN0ID0gdGFnKChwYXJlbnRDb3VudGVyKSA9PiB7XG4gICAgYXJyYXlCb2x0VGVzdC51cGRhdGVzKHggPT4gW3BhcmVudENvdW50ZXJdID0geCk7XG4gICAgbGV0IGlubmVyQ291bnRlciA9IDA7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZGl2KCdoZWxsbyBhcnJheSBib2x0IDAnKSxcbiAgICAgICAgZGl2KCdoZWxsbyBhcnJheSBib2x0IDEnKSxcbiAgICAgICAgZGl2KGBpbm5lckNvdW50ZXI6IGAsIF8gPT4gaW5uZXJDb3VudGVyKSxcbiAgICAgICAgZGl2KCgpID0+IGBwYXJlbnQgY291bnRlcjogJHtwYXJlbnRDb3VudGVyfWApLFxuICAgICAgICBidXR0b24oeyBvbkNsaWNrOiAoKSA9PiArK2lubmVyQ291bnRlciB9LCAnaW5uZXIgY291bnRlcicpXG4gICAgXTtcbn0pO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sLCBJdGVyYXRvciAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xuICByZXR1cm4gZy5uZXh0ID0gdmVyYigwKSwgZ1tcInRocm93XCJdID0gdmVyYigxKSwgZ1tcInJldHVyblwiXSA9IHZlcmIoMiksIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBBc3luY0l0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBBc3luY0l0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpLCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbnZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICB2YXIgYXIgPSBbXTtcbiAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgIHJldHVybiBhcjtcbiAgfTtcbiAgcmV0dXJuIG93bktleXMobyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlLCBpbm5lcjtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICAgIGlmIChhc3luYykgaW5uZXIgPSBkaXNwb3NlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgaWYgKGlubmVyKSBkaXNwb3NlID0gZnVuY3Rpb24oKSB7IHRyeSB7IGlubmVyLmNhbGwodGhpcyk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOyB9IH07XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIHZhciByLCBzID0gMDtcbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAociA9IGVudi5zdGFjay5wb3AoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFyLmFzeW5jICYmIHMgPT09IDEpIHJldHVybiBzID0gMCwgZW52LnN0YWNrLnB1c2gociksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4obmV4dCk7XG4gICAgICAgIGlmIChyLmRpc3Bvc2UpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gci5kaXNwb3NlLmNhbGwoci52YWx1ZSk7XG4gICAgICAgICAgaWYgKHIuYXN5bmMpIHJldHVybiBzIHw9IDIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHMgfD0gMTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzID09PSAxKSByZXR1cm4gZW52Lmhhc0Vycm9yID8gUHJvbWlzZS5yZWplY3QoZW52LmVycm9yKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24ocGF0aCwgcHJlc2VydmVKc3gpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiICYmIC9eXFwuXFwuP1xcLy8udGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwuKHRzeCkkfCgoPzpcXC5kKT8pKCg/OlxcLlteLi9dKz8pPylcXC4oW2NtXT8pdHMkL2ksIGZ1bmN0aW9uIChtLCB0c3gsIGQsIGV4dCwgY20pIHtcbiAgICAgICAgICByZXR1cm4gdHN4ID8gcHJlc2VydmVKc3ggPyBcIi5qc3hcIiA6IFwiLmpzXCIgOiBkICYmICghZXh0IHx8ICFjbSkgPyBtIDogKGQgKyBleHQgKyBcIi5cIiArIGNtLnRvTG93ZXJDYXNlKCkgKyBcImpzXCIpO1xuICAgICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX2VzRGVjb3JhdGUsXG4gIF9fcnVuSW5pdGlhbGl6ZXJzLFxuICBfX3Byb3BLZXksXG4gIF9fc2V0RnVuY3Rpb25OYW1lLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbiAgX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24sXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU2FmZVN1YnNjcmliZXIoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHJlc29sdmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEVNUFRZX1NVQlNDUklQVElPTiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmN1cnJlbnRPYnNlcnZlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IEFycmF5LmZyb20oX3RoaXMub2JzZXJ2ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYXNFcnJvciA9IF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdWJqZWN0LnByb3RvdHlwZSwgXCJvYnNlcnZlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9ic2VydmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG4gICAgICAgIGlmIChoYXNFcnJvciB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICAgICAgb2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICAgICAgYXJyUmVtb3ZlKG9ic2VydmVycywgc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0ZShpbml0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc0xpZnQoc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KGZ1bmN0aW9uIChsaWZ0ZWRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5pdChsaWZ0ZWRTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmFibGUgdG8gbGlmdCB1bmtub3duIE9ic2VydmFibGUgdHlwZScpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWZ0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgcmV0dXJuIG5ldyBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSk7XG59XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3BlcmF0b3JTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplLCBzaG91bGRVbnN1YnNjcmliZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub25GaW5hbGl6ZSA9IG9uRmluYWxpemU7XG4gICAgICAgIF90aGlzLnNob3VsZFVuc3Vic2NyaWJlID0gc2hvdWxkVW5zdWJzY3JpYmU7XG4gICAgICAgIF90aGlzLl9uZXh0ID0gb25OZXh0XG4gICAgICAgICAgICA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX25leHQ7XG4gICAgICAgIF90aGlzLl9lcnJvciA9IG9uRXJyb3JcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fZXJyb3I7XG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IG9uQ29tcGxldGVcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT3BlcmF0b3JTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkVW5zdWJzY3JpYmUgfHwgdGhpcy5zaG91bGRVbnN1YnNjcmliZSgpKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VkXzEgPSB0aGlzLmNsb3NlZDtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICFjbG9zZWRfMSAmJiAoKF9hID0gdGhpcy5vbkZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBPcGVyYXRvclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydCB2YXIgaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXdhaXQsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yXzEoKSB7XG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdChyZWFkZXIucmVhZCgpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0LCBfX2F3YWl0KHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY1ZhbHVlcywgX19hd2FpdGVyLCBfX2dlbmVyYXRvciwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UsIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gaW5uZXJGcm9tKGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVByb21pc2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlcG9ydFVuaGFuZGxlZEVycm9yKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSXRlcmFibGUoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVyYWJsZV8xID0gX192YWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKTsgIWl0ZXJhYmxlXzFfMS5kb25lOyBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmFibGVfMV8xICYmICFpdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBpdGVyYWJsZV8xLnJldHVybikpIF9hLmNhbGwoaXRlcmFibGVfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkpO1xufVxuZnVuY3Rpb24gcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XG4gICAgdmFyIGVfMiwgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jSXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoYXN5bmNJdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs2LCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbm5lckZyb20uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGVTY2hlZHVsZS5qcy5tYXAiLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsRmluYWxpemVyKSB7XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhY3RpdmUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgIWJ1ZmZlci5sZW5ndGggJiYgIWFjdGl2ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBleHBhbmQgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgYWN0aXZlKys7XG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViU2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIGlubmVyU3ViU2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoICYmIGFjdGl2ZSA8IGNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IG51bGwgfHwgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbEZpbmFsaXplcigpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4vbWVyZ2VBbGwnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbCgpIHtcbiAgICByZXR1cm4gbWVyZ2VBbGwoMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuL21lcmdlTWFwJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIG1lcmdlTWFwKGlkZW50aXR5LCBjb25jdXJyZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuL2lzU2NoZWR1bGVyJztcbmZ1bmN0aW9uIGxhc3QoYXJyKSB7XG4gICAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJncy5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSwgZGVsYXkpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7IH0sIGRlbGF5KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmFibGUgY2Fubm90IGJlIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXRBbGwgfSBmcm9tICcuLi9vcGVyYXRvcnMvY29uY2F0QWxsJztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGwoKShmcm9tKGFyZ3MsIHBvcFNjaGVkdWxlcihhcmdzKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlZCB9IGZyb20gJy4uL3NjaGVkdWxlZC9zY2hlZHVsZWQnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBjb25jYXQgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbmNhdCc7XG5pbXBvcnQgeyBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YWx1ZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IHBvcFNjaGVkdWxlcih2YWx1ZXMpO1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgKHNjaGVkdWxlciA/IGNvbmNhdCh2YWx1ZXMsIHNvdXJjZSwgc2NoZWR1bGVyKSA6IGNvbmNhdCh2YWx1ZXMsIHNvdXJjZSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXJ0V2l0aC5qcy5tYXAiLCJpbXBvcnQgeyBzdWJzY3JpYmVXaXRoLCBodG1sLCB0YWcsIFZhbHVlU3ViamVjdCwgc3RhdGUsIGNvbWJpbmVMYXRlc3QsIHdpbGxQcm9taXNlLCBzdWJzY3JpYmUsIFN1YmplY3QsIGhvc3QsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgU3ViamVjdCBhcyBSeFN1YmplY3QsIHN0YXJ0V2l0aCB9IGZyb20gXCJyeGpzXCI7XG5leHBvcnQgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IHRhZygoKSA9PiB7XG4gICAgY29uc3Qgc3ViMCA9IHN0YXRlKCgpID0+IG5ldyBTdWJqZWN0KCkpO1xuICAgIGNvbnN0IHN1YjEgPSBzdGF0ZSgoKSA9PiBuZXcgVmFsdWVTdWJqZWN0KDMpKTtcbiAgICBjb25zdCBzdWJBcnJheSA9IHN0YXRlKCgpID0+IG5ldyBWYWx1ZVN1YmplY3QoWydhJywgJ2InLCAnYyddKSk7XG4gICAgY29uc3QgdnMwID0gc3RhdGUoKCkgPT4gbmV3IFZhbHVlU3ViamVjdCgwKSk7XG4gICAgY29uc3QgdnMxID0gc3RhdGUoKCkgPT4gbmV3IFZhbHVlU3ViamVjdCgxKSk7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1swXSwgc3Vic2NyaWJlKHN1YjApLCBzdWJzY3JpYmUoc3ViQXJyYXksIGFycmF5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCh4ID0+IGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1sxXSwgeCkua2V5KHgpKTtcbiAgICB9KSwgc3Vic2NyaWJlKHN1YkFycmF5LCBhcnJheSA9PiB7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoeCA9PiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2Nzg1MjdbMl0sIHgsIHgpLmtleSh4KSk7XG4gICAgfSksIHN1YnNjcmliZVdpdGgoc3ViMCwgLTEpLCBzdWJzY3JpYmUodnMwKSwgc3Vic2NyaWJlKHZzMCwgKCkgPT4gNTUpLCB0ZXN0SG9zdCgpLCBzdWJzY3JpYmUoY29tYmluZUxhdGVzdChbdnMwLCB2czFdKS5waXBlKHggPT4geFsxXSkpLCBzdWJzY3JpYmUoY29tYmluZUxhdGVzdChbdnMwLCB2czFdKS5waXBlKHdpbGxQcm9taXNlKHggPT4gUHJvbWlzZS5yZXNvbHZlKGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1szXSkpKSkpLCBwYXNzU3Vic2NyaXB0aW9uKHsgc3ViMCwgc3ViMSB9KSk7XG59KTtcbmNvbnN0IHBhc3NTdWJzY3JpcHRpb24gPSB0YWcoKHsgc3ViMCwgc3ViMSwgfSkgPT4ge1xuICAgIGxldCBvbk9mZiA9IGZhbHNlO1xuICAgIC8vIGNvbnN0IG9iID0gc3RhdGUoKCkgPT4gbmV3IE9ic2VydmFibGUoKSkgYXMgYW55XG4gICAgY29uc3Qgb2IgPSBzdGF0ZSgoKSA9PiBuZXcgUnhTdWJqZWN0KCkpO1xuICAgIHN0YXRlcyhnZXQgPT4gW29uT2ZmXSA9IGdldChvbk9mZikpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2Nzg1MjdbNF0sIHN1YnNjcmliZShzdWIwKSwgKCkgPT4gc3ViMC5uZXh0KChzdWIwLnZhbHVlIHx8IDApICsgMSksICgpID0+IG9iLm5leHQoc3ViMC52YWx1ZSA9IChzdWIwLnZhbHVlIHx8IDApICsgMSksICgpID0+IG9uT2ZmID0gIW9uT2ZmLCBvbk9mZiA/ICdzaG93JyA6ICdoaWRlJywgb25PZmYsIG9uT2ZmICYmIHN1YnNjcmliZShzdWIwKSwgb25PZmYgJiYgc3Vic2NyaWJlKHN1YjAsIG51bWJlckZ1biksIG9uT2ZmICYmIHN1YnNjcmliZShzdWIwLCBudW1iZXJUYWcpLCBzdWJzY3JpYmUoc3ViMSwgbnVtYmVyVGFnKSwgc3Vic2NyaWJlKG9iLCBudW1iZXJUYWcpLCBzdWJzY3JpYmUob2IucGlwZShzdGFydFdpdGgoMzMpKSwgbnVtYmVyVGFnKSwgc3Vic2NyaWJlKG9iLnBpcGUoc3RhcnRXaXRoKHVuZGVmaW5lZCkpLCAoeCkgPT4gbnVtYmVyVGFnKHgpKSwgc3Vic2NyaWJlKG9iLCAoeCkgPT4gbnVtYmVyVGFnKHgpKSk7XG59KTtcbmNvbnN0IG51bWJlckZ1biA9ICh4KSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1s1XSwgeCk7XG59O1xuY29uc3QgbnVtYmVyVGFnID0gdGFnKCh4KSA9PiB7XG4gICAgcmV0dXJuIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1s2XSwgeCk7XG59KTtcbmNvbnN0IHRlc3RIb3N0ID0gdGFnKCgpID0+IHtcbiAgICBsZXQgaGlkZVNob3cgPSB0cnVlO1xuICAgIGxldCBkZXN0cm95Q291bnQgPSAwO1xuICAgIGxldCBjbGlja0NvdW50ZXIgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgICAgIGhpZGVTaG93LCBkZXN0cm95Q291bnQsIGNsaWNrQ291bnRlcixcbiAgICAgICAgfV0gPSBnZXQoe1xuICAgICAgICBoaWRlU2hvdywgZGVzdHJveUNvdW50LCBjbGlja0NvdW50ZXIsXG4gICAgfSkpO1xuICAgIHJldHVybiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M2Nzg1MjdbN10sIGhpZGVTaG93ICYmIGh0bWwuZG9tKGFsbFN0cmluZ3MuYWxsU3RyaW5nczY3ODUyN1s4XSwgaG9zdCgoKSA9PiB0YWcuZWxlbWVudC5nZXQoKS5pbm5lckhUTUwgPSBEYXRlLm5vdygpLnRvU3RyaW5nKCksIHtcbiAgICAgICAgb25EZXN0cm95OiAoKSA9PiArK2Rlc3Ryb3lDb3VudCxcbiAgICB9KSwgKCkgPT4gKytjbGlja0NvdW50ZXIsIGNsaWNrQ291bnRlciksICgpID0+IGhpZGVTaG93ID0gIWhpZGVTaG93LCBkZXN0cm95Q291bnQpO1xufSk7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBhbGxTdHJpbmdzID0geyBhbGxTdHJpbmdzNjc4NTI3OiBbW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJTdWJzY3JpYmUoKVwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtO2ZvbnQtc2l6ZTowLjhlbVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWJzY3JpYmVcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIwID09PSBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1zdWJzY3JpYmUtc3ViMFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4LWdyb3c6MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWJzY3JpYmUgbWFwXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiMCA9PT0gXCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtc3Vic2NyaWJlLXN1Yi1tYXBcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3Vic2NyaWJlIHNlbGVjdFwiIH1dIH0sIHsgXCJublwiOiBcInNlbGVjdFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJvcHRpb25cIiwgXCJhdFwiOiBbW1widmFsdWVcIiwgXCJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzZWxlY3Qgb3B0aW9uXCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInN1YnNjcmliZSB3aXRoIGRlZmF1bHRcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIwID09PSBcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1zdWJzY3JpYmUtc3ViMC13aXRoXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMyB9XSB9XSB9LCB7IFwibm5cIjogXCJmaWVsZHNldFwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImZsZXgtZ3JvdzoxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwibGVnZW5kXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInZhbHVlIHN1YmplY3RcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIwID09PSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwicGlwZWQgc3ViamVjdFwiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LXN1YmplY3QtcGlwZS1kaXNwbGF5MFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjU1XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiJm5ic3A7PT09Jm5ic3A7XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtc3ViamVjdC1waXBlLWRpc3BsYXkxXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNSB9XSB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA2IH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29tYmluZUxhdGVzdFwiIH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZS1kaXNwbGF5MFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjFcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCImbmJzcDs9PT0mbmJzcDtcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiY29udGVudC1jb21iaW5lTGF0ZXN0LXBpcGUtZGlzcGxheTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA3IH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiY29tYmluZUxhdGVzdCBwaXBlZCBodG1sXCIgfV0gfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcImNvbnRlbnQtY29tYmluZUxhdGVzdC1waXBlSHRtbC1kaXNwbGF5MFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYm9sZCA3N1wiIH1dIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIiZuYnNwOz09PSZuYnNwO1wiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJjb250ZW50LWNvbWJpbmVMYXRlc3QtcGlwZUh0bWwtZGlzcGxheTFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH1dIH1dIH1dIH1dIH1dIH0sIHsgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcImlkXCIsIFwibm9QYXJlbnRUYWdGaWVsZHNldFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJQYXNzIHN1YnNjcmlwdGlvblwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDkgfV0gfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCLwn5GJXCIgfSwgeyBcIm5uXCI6IFwic3Ryb25nXCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwi8J+RiFwiIH1dLCBbeyBcIm5uXCI6IFwib3B0aW9uXCIsIFwiYXRcIjogW1tcInZhbHVlXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSwgW3sgXCJublwiOiBcImJcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiYm9sZCA3N1wiIH1dIH1dLCBbeyBcIm5uXCI6IFwic3BhblwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJzdWItdmFsdWU6XCIgfSwgeyBcIm5uXCI6IFwic3BhblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1vdXRwdXRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAwIH1dIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItaW5jcmVhc2VcIl0sIFtcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAxIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3ViMCBpbmNyZWFzZVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItbmV4dFwiXSwgW1wiY2xpY2tcIiwgeyBcInRhZ0pzVmFyXCI6IDIgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJvYiBpbmNyZWFzZVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItaGlkZS1zaG93XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMyB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhpZGUvc2hvdyBvbi9vZmYgPSBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA0IH1dIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwib25PZmZWYWx1ZTpcIiB9LCB7IFwibm5cIjogXCJzcGFuXCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1oaWRlU2hvdy12YWx1ZVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDUgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInN0cm9uZ1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0ZXN0IDBcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4MFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjB8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDYgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHwwXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInN0cm9uZ1wiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ0ZXN0IDFcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4MVwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjF8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDcgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHwxXCIgfV0gfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDJcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCIyfHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiA4IH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8MlwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXgzXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiM3x8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogOSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDNcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4NFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjR8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEwIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8NFwiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJpZFwiLCBcInBhc3NlZC1pbi1zdWItZXg0XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiNXx8XCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMTEgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwifHw1XCIgfV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiYXRcIjogW1tcImlkXCIsIFwicGFzc2VkLWluLXN1Yi1leDRcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI2fHxcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxMiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ8fDZcIiB9XSB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJwYXNzZWQtaW4tc3ViLWV4NFwiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIjd8fFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDEzIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcInx8N1wiIH1dIH1dLCBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwieW91ciBmdW4gbnVtYmVyIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfV0sIFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJ5b3VyIHRhZyBudW1iZXIgXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMCB9XSwgW3sgXCJublwiOiBcImZpZWxkc2V0XCIsIFwiYXRcIjogW1tcInN0eWxlXCIsIFwiZmxleC1ncm93OjFcIl1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJsZWdlbmRcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaG9zdFwiIH1dIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImlkXCIsIFwiaG9zdEhpZGVTaG93XCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImhpZGUvc2hvd1wiIH1dIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkZXN0cm95Q291bnQ6IFwiIH0sIHsgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJob3N0RGVzdHJveUNvdW50XCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMiB9XSB9XSB9XSB9XSwgW3sgXCJublwiOiBcInNwYW5cIiwgXCJhdFwiOiBbW1wiaWRcIiwgXCJob3N0ZWRDb250ZW50XCJdLCBbeyBcInRhZ0pzVmFyXCI6IDAgfV1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMSB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImNsaWNrQ291bnRlcjpcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgZGl2LCB0YWcsIGEsIGZpZWxkc2V0LCBsZWdlbmQsIGJ1dHRvbiB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgb25lUmVuZGVyIH0gZnJvbSBcIi4vb25lUmVuZGVyLnRhZ1wiO1xuaW1wb3J0IHsgc3RvcmFnZSwgVmlld1R5cGVzIH0gZnJvbSBcIi4vc2VjdGlvblNlbGVjdG9yLnRhZ1wiO1xuaW1wb3J0IGZ1bkluUHJvcHNUYWcgZnJvbSBcIi4vZnVuSW5Qcm9wcy50YWdcIjtcbmltcG9ydCB7IHRvZG9BcHAgfSBmcm9tIFwiLi90b2RvL3RvZG9zLmFwcFwiO1xuaW1wb3J0IHsgY2hpbGQgfSBmcm9tIFwiLi9jaGlsZFRlc3RzLnRhZ1wiO1xuaW1wb3J0IHsgZGVzdHJveXMgfSBmcm9tIFwiLi9kZXN0cm95cy50YWdcIjtcbmltcG9ydCB7IGFycmF5cyB9IGZyb20gXCIuL2FycmF5cy50YWdcIjtcbmltcG9ydCB7IHRhZ1N3aXRjaERlYnVnIH0gZnJvbSBcIi4vdGFnU3dpdGNoRGVidWcuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBtaXJyb3JpbmcgfSBmcm9tIFwiLi9taXJyb3JpbmcudGFnXCI7XG5pbXBvcnQgeyBwcm9wc0RlYnVnTWFpbiB9IGZyb20gXCIuL1Byb3BzRGVidWcudGFnXCI7XG5pbXBvcnQgeyBwcm92aWRlckRlYnVnIH0gZnJvbSBcIi4vcHJvdmlkZXJzLnRhZ1wiO1xuaW1wb3J0IHsgY291bnRlcnMgfSBmcm9tIFwiLi9jb3VudGVyc0RlYnVnXCI7XG5pbXBvcnQgeyB0YWJsZURlYnVnIH0gZnJvbSBcIi4vdGFibGVEZWJ1Zy5jb21wb25lbnRcIjtcbmltcG9ydCB7IGNvbnRlbnQgfSBmcm9tIFwiLi9jb250ZW50LnRhZ1wiO1xuaW1wb3J0IHsgd2F0Y2hUZXN0aW5nIH0gZnJvbSBcIi4vd2F0Y2hUZXN0aW5nLnRhZ1wiO1xuaW1wb3J0IHsgYXR0cmlidXRlRGVidWcgfSBmcm9tIFwiLi9hdHRyaWJ1dGVEZWJ1Zy50YWdcIjtcbmltcG9ydCB7IGJhc2ljIH0gZnJvbSBcIi4vYmFzaWMudGFnXCI7XG5pbXBvcnQgeyBzdWJzY3JpcHRpb25zIH0gZnJvbSBcIi4vc3Vic2NyaXB0aW9ucy50YWdcIjtcbmV4cG9ydCBjb25zdCBvdXRwdXRTZWN0aW9ucyA9IFt7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5CYXNpYywgdGFnOiBiYXNpYywgZW1vamk6ICfwn5SiJ1xuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLk9uZVJlbmRlciwgdGFnOiBvbmVSZW5kZXIsIGVtb2ppOiAnMe+4j+KDoydcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Qcm9wcywgdGFnOiBwcm9wc0RlYnVnTWFpbiwgZW1vamk6ICfwn6ezJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5XYXRjaFRlc3RpbmcsIHRhZzogd2F0Y2hUZXN0aW5nLCBlbW9qaTogJ+KMmu+4jycsXG4gICAgfSwge1xuICAgICAgICB2aWV3OiBWaWV3VHlwZXMuVGFibGVEZWJ1ZywgdGFnOiB0YWJsZURlYnVnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLlByb3ZpZGVyRGVidWcsIHRhZzogcHJvdmlkZXJEZWJ1ZyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5UYWdTd2l0Y2hEZWJ1ZywgdGFnOiB0YWdTd2l0Y2hEZWJ1ZywgZW1vamk6ICfwn5SAJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5NaXJyb3JpbmcsIHRhZzogbWlycm9yaW5nLCBlbW9qaTogJ/Cfqp4nLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkFycmF5cywgdGFnOiBhcnJheXMsIGVtb2ppOiAn4qCHJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Db250ZW50LCB0YWc6IGNvbnRlbnQsIGVtb2ppOiAn8J+TsCcsXG4gICAgICAgIGRlYnVnOiB0cnVlLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkNoaWxkLCB0YWc6IGNoaWxkLCBlbW9qaTogJ/CfkbYnLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkRlc3Ryb3lzLCB0YWc6IGRlc3Ryb3lzLCBlbW9qaTogJ/Cfl5HvuI8nLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkZ1bkluUHJvcHNUYWcsIHRhZzogZnVuSW5Qcm9wc1RhZywgZW1vamk6ICfwn6ShJ1xuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLkF0dHJpYnV0ZURlYnVnLCB0YWc6IGF0dHJpYnV0ZURlYnVnLCBlbW9qaTogJ/Cfj7knLFxuICAgIH0sIHtcbiAgICAgICAgdmlldzogVmlld1R5cGVzLlRvZG8sIHRhZzogdGFnKHRvZG9BcHApLCBlbW9qaTogJ+Kcj++4jydcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5Db3VudGVycywgdGFnOiBjb3VudGVycywgZW1vamk6ICfwn5KvJyxcbiAgICB9LCB7XG4gICAgICAgIHZpZXc6IFZpZXdUeXBlcy5TdWJzY3JpcHRpb25zLCB0YWc6IHN1YnNjcmlwdGlvbnMsIGVtb2ppOiAn8J+ToScsXG4gICAgfV07XG5leHBvcnQgY29uc3QgcmVuZGVyZWRTZWN0aW9ucyA9IHRhZygoYXBwQ291bnRlclN1YmplY3QsIHZpZXdUeXBlcyA9IHN0b3JhZ2Uudmlld3MpID0+IHtcbiAgICBjb25zdCB2aXNpYmxlU2VjdGlvbnMgPSBvdXRwdXRTZWN0aW9ucy5maWx0ZXIoc2VjdGlvbiA9PiB7XG4gICAgICAgIGlmICh2aWV3VHlwZXMuaW5jbHVkZXMoc2VjdGlvbi52aWV3KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KS5tYXAoKHsgdmlldywgdGl0bGUsIGVtb2ppLCB0YWcsIC4uLmV4dHJhIH0pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSB8fCB2aWV3LFxuICAgICAgICAgICAgb3V0cHV0OiB2aWV3ID09PSBWaWV3VHlwZXMuQ291bnRlcnMgPyB0YWcoeyBhcHBDb3VudGVyU3ViamVjdCB9KSA6IHRhZygpLFxuICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgIGVtb2ppLFxuICAgICAgICAgICAgLi4uZXh0cmEsXG4gICAgICAgIH07XG4gICAgfSkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAvLyBTb3J0IGFscGhhYmV0aWNhbGx5IGJ5IHZpZXcgbmFtZVxuICAgICAgICByZXR1cm4gYS52aWV3LmxvY2FsZUNvbXBhcmUoYi52aWV3KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGl2KHsgc3R5bGU6IFwiZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2dhcDoxZW1cIiB9LCBfID0+IHZpc2libGVTZWN0aW9ucy5tYXAoKHNlY3Rpb24pID0+IGdldFNlY3Rpb24oc2VjdGlvbikua2V5KHNlY3Rpb24udmlldykpKTtcbn0pO1xuY29uc3QgZ2V0U2VjdGlvbiA9IChzZWN0aW9uKSA9PiB7XG4gICAgY29uc3QgeyBlbW9qaSwgdmlldywgdGl0bGUsIG91dHB1dCwgZGVidWcgfSA9IHNlY3Rpb247XG4gICAgcmV0dXJuIGRpdih7IHN0eWxlOiBcImZsZXg6MiAyIDIwZW1cIiB9LCBhKHsgaWQ6IHZpZXcgfSwgJzwhLS0g4pqT77iPIC0tPicpLCBmaWVsZHNldChsZWdlbmQoZW1vamksICcgJywgdGl0bGUpLCBkaXYoe1xuICAgICAgICBpZDogXCJtYW55LXNlY3Rpb24tY29udGVudHNcIixcbiAgICAgICAgJ3N0eWxlLmRpc3BsYXknOiBfID0+IHNlY3Rpb24uY29udGVudEhpZGUgPyAnbm9uZScgOiAnJ1xuICAgIH0sIG91dHB1dCksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtcIiB9LCBidXR0b24oe1xuICAgICAgICBzdHlsZTogXCJmbGV4OjE7XCIsXG4gICAgICAgIGlkOiAnc2VjdGlvbl8nICsgc2VjdGlvbi52aWV3LFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBzZWN0aW9uLmNvbnRlbnRIaWRlID0gIXNlY3Rpb24uY29udGVudEhpZGUsXG4gICAgICAgICdzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yJzogXyA9PiBzZWN0aW9uLmNvbnRlbnRIaWRlID8gJ2dyZXknIDogJydcbiAgICB9LCAn8J+Rge+4jyBoaWRlL3Nob3cnKSkpLCBkaXYoeyBzdHlsZTogXCJmb250LXNpemU6MC42ZW07dGV4dC1hbGlnbjpyaWdodDtcIiB9LCBhKHsgaHJlZjogXCIjdG9wXCIgfSwgJ+KPqycpKSk7XG59O1xuIiwiaW1wb3J0IHsgaHRtbCwgdGFnLCBvbkluaXQsIGNhbGxiYWNrTWFrZXIsIG9uRGVzdHJveSwgc3RhdGVzIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5jb25zdCB0ZXN0MGludGVydmFsID0gMzAwMDtcbmNvbnN0IHRlc3QxaW50ZXJ2YWwgPSA2MDAwO1xuZXhwb3J0IGNvbnN0IGludGVydmFsVGVzdGVyMCA9IHRhZygoKSA9PiB7XG4gICAgbGV0IGludGVydmFsQ291bnQgPSAwO1xuICAgIGxldCBpbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgIGxldCBpbnRlcnZhbElkMiA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcmVuZGVyQ291bnRlciA9IDA7XG4gICAgbGV0IGN1cnJlbnRUaW1lID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7XG4gICAgICAgICAgICBpbnRlcnZhbENvdW50LCBpbnRlcnZhbElkLCBpbnRlcnZhbElkMiwgcmVuZGVyQ291bnRlciwgY3VycmVudFRpbWUsXG4gICAgICAgIH1dID0gZ2V0KHtcbiAgICAgICAgaW50ZXJ2YWxDb3VudCwgaW50ZXJ2YWxJZCwgaW50ZXJ2YWxJZDIsIHJlbmRlckNvdW50ZXIsIGN1cnJlbnRUaW1lLFxuICAgIH0pKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBpbmNyZWFzZSA9ICgpID0+ICsraW50ZXJ2YWxDb3VudDtcbiAgICBjb25zdCBzdGFydEludGVydmFsID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmluZm8oJ/Cfn6IgaW50ZXJ2YWwgdGVzdCAwIHN0YXJ0ZWQuLi4nKTtcbiAgICAgICAgdHJhY2tUaW1lKCk7XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBpbmNyZWFzZSgpO1xuICAgICAgICB9KSwgdGVzdDBpbnRlcnZhbCk7XG4gICAgfTtcbiAgICBjb25zdCBzdG9wSW50ZXJ2YWwgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZDIpO1xuICAgICAgICBpbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgICAgICBpbnRlcnZhbElkMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc29sZS5pbmZvKCfwn5uRIGludGVydmFsIHRlc3QgMCBzdG9wcGVkJyk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiB0cmFja1RpbWUoKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgaW50ZXJ2YWxJZDIgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lICsgNTAwO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRlc3QwaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCA1MDApO1xuICAgICAgICBjb25zb2xlLmluZm8oJ+KWtu+4jyBpbnRlcnZhbCBzdGFydGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IHRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGludGVydmFsSWQgfHwgaW50ZXJ2YWxJZDIpIHtcbiAgICAgICAgICAgIHN0b3BJbnRlcnZhbCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0SW50ZXJ2YWwoKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlbGF5SW5jcmVhc2UgPSAoKSA9PiBzZXRUaW1lb3V0KGNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY3VycmVudFRpbWUgPSBjdXJyZW50VGltZSArIDIwMDtcbiAgICB9KSwgMTAwMCk7XG4gICAgb25Jbml0KHN0YXJ0SW50ZXJ2YWwpO1xuICAgIG9uRGVzdHJveShzdG9wSW50ZXJ2YWwpO1xuICAgICsrcmVuZGVyQ291bnRlcjtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODM4MDA4WzBdLCB0ZXN0MGludGVydmFsLCBpbnRlcnZhbElkLCBpbmNyZWFzZSwgaW50ZXJ2YWxDb3VudCwgcmVuZGVyQ291bnRlciwgdGVzdDBpbnRlcnZhbCwgY3VycmVudFRpbWUsIGN1cnJlbnRUaW1lLCB0b2dnbGUsIGludGVydmFsSWQgfHwgaW50ZXJ2YWxJZDIgPyAncmVkJyA6ICdncmVlbicsIGRlbGF5SW5jcmVhc2UpO1xufSk7XG5leHBvcnQgY29uc3QgaW50ZXJ2YWxUZXN0ZXIxID0gdGFnKCgpID0+IHtcbiAgICBsZXQgaW50ZXJ2YWxDb3VudCA9IDA7XG4gICAgbGV0IGludGVydmFsSWQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGludGVydmFsSWQyID0gdW5kZWZpbmVkO1xuICAgIGxldCByZW5kZXJDb3VudGVyID0gMDtcbiAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuICAgIHN0YXRlcyhnZXQgPT4gW3tcbiAgICAgICAgICAgIGludGVydmFsQ291bnQsIGludGVydmFsSWQsIGludGVydmFsSWQyLCByZW5kZXJDb3VudGVyLCBjdXJyZW50VGltZVxuICAgICAgICB9XSA9IGdldCh7XG4gICAgICAgIGludGVydmFsQ291bnQsIGludGVydmFsSWQsIGludGVydmFsSWQyLCByZW5kZXJDb3VudGVyLCBjdXJyZW50VGltZVxuICAgIH0pKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrTWFrZXIoKTtcbiAgICBjb25zdCBpbmNyZWFzZSA9ICgpID0+ICsraW50ZXJ2YWxDb3VudDtcbiAgICBmdW5jdGlvbiB0cmFja1RpbWUoKSB7XG4gICAgICAgIGN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgaW50ZXJ2YWxJZDIgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lICsgNTAwO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRlc3QxaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLCA1MDApO1xuICAgIH1cbiAgICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQyKTtcbiAgICAgICAgaW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaW50ZXJ2YWxJZDIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnNvbGUuaW5mbygn8J+UtCBpbnRlcnZhbCAxIHN0b3BwZWQnKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRvZ2dsZUludGVydmFsKCkge1xuICAgICAgICBpZiAoaW50ZXJ2YWxJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmluZm8oJ/Cfn6IgaW50ZXJ2YWwgdGVzdCAxIHN0YXJ0ZWQuLi4nKTtcbiAgICAgICAgdHJhY2tUaW1lKCk7XG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChjYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBpbmNyZWFzZSgpO1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdzbG93IGludGVydmFsIHJhbicpO1xuICAgICAgICB9KSwgdGVzdDFpbnRlcnZhbCk7XG4gICAgfVxuICAgIG9uSW5pdCh0b2dnbGVJbnRlcnZhbCk7XG4gICAgb25EZXN0cm95KGRlc3Ryb3kpO1xuICAgICsrcmVuZGVyQ291bnRlcjtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzODM4MDA4WzFdLCB0ZXN0MWludGVydmFsLCBpbnRlcnZhbElkLCBpbmNyZWFzZSwgaW50ZXJ2YWxDb3VudCwgcmVuZGVyQ291bnRlciwgdGVzdDFpbnRlcnZhbCwgY3VycmVudFRpbWUsIGN1cnJlbnRUaW1lLCB0b2dnbGVJbnRlcnZhbCwgaW50ZXJ2YWxJZCA/ICdyZWQnIDogJ2dyZWVuJyk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M4MzgwMDg6IFtbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiPCEtLWludGVydmFsRGVidWcuanMtLT5cIiB9LCB7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaW50ZXJ2YWwgdHlwZSAxIGF0IFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibXNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbnRlcnZhbElkOiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcInJhbmdlXCJdLCBbXCJtaW5cIiwgXCIwXCJdLCBbXCJtYXhcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF0sIFtcInN0ZXBcIiwgXCIxXCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItLVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOCB9LCBudWxsXSwgW1wic3R5bGUuYmFja2dyb3VuZC1jb2xvclwiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhcnQvc3RvcFwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMTAgfSwgbnVsbF1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJkZWxheSBpbmNyZWFzZSBjdXJyZW50VGltZVwiIH1dIH1dLCBbeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcImludGVydmFsIHR5cGUgMiB3aXRoIFwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDAgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwibXNcIiB9XSB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJpbnRlcnZhbElkOiBcIiB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAxIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogMiB9LCBudWxsXV0sIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDMgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiOlwiIH0sIHsgXCJublwiOiBcInRleHRcIiwgXCJ2XCI6IDQgfV0gfSwgeyBcIm5uXCI6IFwiaW5wdXRcIiwgXCJhdFwiOiBbW1widHlwZVwiLCBcInJhbmdlXCJdLCBbXCJtaW5cIiwgXCIwXCJdLCBbXCJtYXhcIiwgeyBcInRhZ0pzVmFyXCI6IDUgfSwgbnVsbF0sIFtcInN0ZXBcIiwgXCIxXCJdLCBbXCJ2YWx1ZVwiLCB7IFwidGFnSnNWYXJcIjogNiB9LCBudWxsXV0gfSwgeyBcIm5uXCI6IFwiZGl2XCIsIFwiY2hcIjogW3sgXCJublwiOiBcInRleHRcIiwgXCJ0Y1wiOiBcIi0tXCIgfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogNyB9LCB7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCItLVwiIH1dIH0sIHsgXCJublwiOiBcImJ1dHRvblwiLCBcImF0XCI6IFtbXCJ0eXBlXCIsIFwiYnV0dG9uXCJdLCBbXCJjbGlja1wiLCB7IFwidGFnSnNWYXJcIjogOCB9LCBudWxsXSwgW1wic3R5bGUuYmFja2dyb3VuZC1jb2xvclwiLCB7IFwidGFnSnNWYXJcIjogOSB9LCBcInN0eWxlXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwic3RhcnQvc3RvcFwiIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgaW50ZXJ2YWxUZXN0ZXIwLCBpbnRlcnZhbFRlc3RlcjEgfSBmcm9tIFwiLi9pbnRlcnZhbERlYnVnXCI7XG5pbXBvcnQgeyBodG1sLCB0YWcsIHN0YXRlcyB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgZnggfSBmcm9tIFwidGFnZ2VkanMtYW5pbWF0ZS1jc3NcIjtcbmV4cG9ydCBjb25zdCB0YWdEZWJ1ZyA9IHRhZygoKSA9PiB7XG4gICAgbGV0IF9maXJzdFN0YXRlID0gJ3RhZ0pzRGVidWcuanMnO1xuICAgIGxldCBzaG93SW50ZXJ2YWxzID0gZmFsc2U7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBzdGF0ZXMoZ2V0ID0+IFt7IF9maXJzdFN0YXRlLCBzaG93SW50ZXJ2YWxzLCByZW5kZXJDb3VudCB9XSA9IGdldCh7IF9maXJzdFN0YXRlLCBzaG93SW50ZXJ2YWxzLCByZW5kZXJDb3VudCB9KSk7XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gaHRtbC5kb20oYWxsU3RyaW5ncy5hbGxTdHJpbmdzNzc1MDBbMF0sICgpID0+IHNob3dJbnRlcnZhbHMgPSAhc2hvd0ludGVydmFscywgc2hvd0ludGVydmFscyAmJiBodG1sLmRvbShhbGxTdHJpbmdzLmFsbFN0cmluZ3M3NzUwMFsxXSwgZngoKSwgaW50ZXJ2YWxUZXN0ZXIwKCksIGludGVydmFsVGVzdGVyMSgpKSk7XG59KTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGFsbFN0cmluZ3MgPSB7IGFsbFN0cmluZ3M3NzUwMDogW1t7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCI8IS0tIHRhZ0RlYnVnLmpzIC0tPlwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbXCJzdHlsZVwiLCBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtnYXA6MWVtXCJdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwiZmllbGRzZXRcIiwgXCJhdFwiOiBbW1wic3R5bGVcIiwgXCJmbGV4OjIgMiAyMGVtXCJdLCBbXCJpZFwiLCBcImRlYnVnLWludGVydmFsc1wiXV0sIFwiY2hcIjogW3sgXCJublwiOiBcImxlZ2VuZFwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidGNcIjogXCJJbnRlcnZhbCBUZXN0aW5nXCIgfV0gfSwgeyBcIm5uXCI6IFwiYnV0dG9uXCIsIFwiYXRcIjogW1tcImNsaWNrXCIsIHsgXCJ0YWdKc1ZhclwiOiAwIH0sIG51bGxdXSwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInRjXCI6IFwiaGlkZS9zaG93XCIgfV0gfSwgeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9XSB9XSwgW3sgXCJublwiOiBcImRpdlwiLCBcImF0XCI6IFtbeyBcInRhZ0pzVmFyXCI6IDAgfV1dLCBcImNoXCI6IFt7IFwibm5cIjogXCJkaXZcIiwgXCJjaFwiOiBbeyBcIm5uXCI6IFwidGV4dFwiLCBcInZcIjogMSB9XSB9LCB7IFwibm5cIjogXCJoclwiIH0sIHsgXCJublwiOiBcImRpdlwiLCBcImNoXCI6IFt7IFwibm5cIjogXCJ0ZXh0XCIsIFwidlwiOiAyIH1dIH1dIH1dXSB9O1xuIiwiaW1wb3J0IHsgYnV0dG9uLCBzcGFuLCBkaXYsIGZpZWxkc2V0LCBsZWdlbmQsIHNtYWxsLCBhLCB0YWcsIFN1YmplY3QsIGNhbGxiYWNrTWFrZXIsIG9uRGVzdHJveSwgc3Vic2NyaWJlIH0gZnJvbSBcInRhZ2dlZGpzXCI7XG5pbXBvcnQgeyByZW5kZXJlZFNlY3Rpb25zIH0gZnJvbSBcIi4vcmVuZGVyZWRTZWN0aW9ucy50YWdcIjtcbmltcG9ydCB7IHJlbmRlckNvdW50RGl2IH0gZnJvbSBcIi4vcmVuZGVyQ291bnQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBzZWN0aW9uU2VsZWN0b3IgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyB0YWdEZWJ1ZyB9IGZyb20gXCIuL3RhZ0pzRGVidWdcIjtcbmltcG9ydCB7IHJ1blRlc3RzIH0gZnJvbSBcIi4vdGVzdHNcIjtcbmV4cG9ydCBjb25zdCBob21lUGFnZSA9IHRhZygoKSA9PiB7XG4gICAgbGV0IHNob3dTZWN0aW9ucyA9IHRydWU7XG4gICAgbGV0IGFwcENvdW50ZXIgPSAwO1xuICAgIGxldCB0b2dnbGVWYWx1ZSA9IGZhbHNlO1xuICAgIGxldCB0ZXN0VGltZW91dCA9IG51bGw7XG4gICAgbGV0IGFwcENvdW50ZXJTdWJqZWN0ID0gbmV3IFN1YmplY3QoYXBwQ291bnRlcik7XG4gICAgbGV0IHJlbmRlckNvdW50ID0gMDtcbiAgICBsZXQgdGVzdEVtb2ppID0gJ/Cfn6YnO1xuICAgIGNvbnN0IHRvZ2dsZSA9ICgpID0+IHtcbiAgICAgICAgdG9nZ2xlVmFsdWUgPSAhdG9nZ2xlVmFsdWU7XG4gICAgfTtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjYWxsYmFja01ha2VyKCk7XG4gICAgY29uc3Qgb25UZXN0Q29tcGxldGUgPSBjYWxsYmFja3Moc3VjY2VzcyA9PiB0ZXN0RW1vamkgPSBzdWNjZXNzID8gJ+KchScgOiAn4p2MJyk7XG4gICAgLy8gaWYgSSBhbSBkZXN0cm95ZWQgYmVmb3JlIG15IHRlc3QgcnVucywgcHJldmVudCB0ZXN0IGZyb20gcnVubmluZ1xuICAgIG9uRGVzdHJveShmdW5jdGlvbiBhcHBPbkRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0ZXN0VGltZW91dCk7XG4gICAgICAgIHRlc3RUaW1lb3V0ID0gbnVsbDtcbiAgICB9KTtcbiAgICBjb25zb2xlLmluZm8oJzHvuI/ig6MgYXBwIGluaXQgc2hvdWxkIG9ubHkgcnVuIG9uY2UnKTtcbiAgICBmaXJlVGVzdGluZyhmYWxzZSwgb25UZXN0Q29tcGxldGUpO1xuICAgIGFwcENvdW50ZXJTdWJqZWN0LnN1YnNjcmliZShjYWxsYmFja3MoeCA9PiBhcHBDb3VudGVyID0geCkpO1xuICAgIGZ1bmN0aW9uIGZpcmVUZXN0aW5nKG1hbnVhbCA9IHRydWUsIG9uQ29tcGxldGUgPSAoKSA9PiB1bmRlZmluZWQpIHtcbiAgICAgICAgdGVzdEVtb2ppID0gJ/Cfn6YnO1xuICAgICAgICBjb25zdCB3YWl0Rm9yID0gMjAwMDtcbiAgICAgICAgdGVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ/Cfj4Mg8J+Pg+KAjeKZgO+4jyDwn4+D4oCN4pmC77iPIFJ1bm5pbmcgdGVzdHMuLi4g8J+Pg+KAjeKZgu+4j+KAjeKeoe+4jyDwn4+D4oCN4pmA77iP4oCN4p6h77iPIPCfj4PigI3inqHvuI94Jyk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5UZXN0cygpO1xuICAgICAgICAgICAgb25Db21wbGV0ZShyZXN1bHQpO1xuICAgICAgICAgICAgaWYgKCFtYW51YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ+KchSBhbGwgYXBwIHRlc3RzIHBhc3NlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFsZXJ0KCfinYwgdGVzdHMgZmFpbGVkLiBTZWUgY29uc29sZSBmb3IgbW9yZSBkZXRhaWxzJyk7XG4gICAgICAgIH0sIHdhaXRGb3IpOyAvLyBjYXVzZSBkZWxheSB0byBiZSBzZXBhcmF0ZSBmcm9tIHJlbmRlcnNcbiAgICB9XG4gICAgKytyZW5kZXJDb3VudDtcbiAgICByZXR1cm4gZGl2KGJ1dHRvbih7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IGZpcmVUZXN0aW5nKHRydWUsIG9uVGVzdENvbXBsZXRlKVxuICAgIH0sICdydW4gdGVzdHMgJywgdGVzdEVtb2ppKSwgZmllbGRzZXQobGVnZW5kKCdkaXJlY3QgYXBwIHRlc3RzJyksIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcImFwcC1jb3VudGVyLXN1YmplY3QtYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGFwcENvdW50ZXJTdWJqZWN0Lm5leHQoYXBwQ291bnRlciArIDEpO1xuICAgICAgICB9XG4gICAgfSwgJ/CfjZIgKythcHAgc3ViamVjdCcpLCBidXR0b24oe1xuICAgICAgICBpZDogXCJhcHAtY291bnRlci1idXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4gKythcHBDb3VudGVyXG4gICAgfSwgJ/CfjZIgKythcHAnKSwgc3Bhbign8J+NkiAnLCBzcGFuKHsgaWQ6IFwiYXBwLWNvdW50ZXItZGlzcGxheVwiIH0sIF8gPT4gYXBwQ291bnRlcikpLCBzcGFuKCfwn42SJDwnLCBzcGFuKHsgaWQ6IFwiYXBwLWNvdW50ZXItc3ViamVjdC1kaXNwbGF5XCIgfSwgXyA9PiBzdWJzY3JpYmUoYXBwQ291bnRlclN1YmplY3QpKSwgJz4nKSwgc3Bhbign8J+NkiQudmFsdWU8Jywgc3Bhbih7IGlkOiBcImFwcC1jb3VudGVyLXN1YmplY3QtdmFsdWUtZGlzcGxheVwiIH0sIF8gPT4gYXBwQ291bnRlclN1YmplY3QudmFsdWUpLCAnPicpLCBidXR0b24oe1xuICAgICAgICBpZDogXCJ0b2dnbGUtdGVzdFwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB0b2dnbGUoKVxuICAgIH0sICd0b2dnbGUgdGVzdCAnLCBfID0+IHRvZ2dsZVZhbHVlKSksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6bm93cmFwO2dhcDoxZW07anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XCIgfSwgXyA9PiByZW5kZXJDb3VudERpdih7IG5hbWU6ICdhcHAnLCByZW5kZXJDb3VudCB9KSwgZGl2KHNtYWxsKCcoc3Vic2NyaXB0aW9uIGNvdW50OiAnLCBzdWJzY3JpYmUoU3ViamVjdC5nbG9iYWxTdWJDb3VudCQpLCAnKScpKSksIGEoeyBuYW1lOiBcInRvcFwiLCBpZDogXCJ0b3BcIiB9KSwgc2VjdGlvblNlbGVjdG9yKCksIGRpdih7IGlkOiBcInRhZ0RlYnVnLWZ4LXdyYXBcIiB9LCBidXR0b24oe1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiBzaG93U2VjdGlvbnMgPSAhc2hvd1NlY3Rpb25zXG4gICAgfSwgJ3RvZ2dsZSBzZWN0aW9ucycpLCBfID0+IHNob3dTZWN0aW9ucyAmJiByZW5kZXJlZFNlY3Rpb25zKGFwcENvdW50ZXJTdWJqZWN0KSwgdGFnRGVidWcoKSkpO1xufSk7XG4iLCJpbXBvcnQgeyBvdXRwdXRTZWN0aW9ucyB9IGZyb20gXCIuL3JlbmRlcmVkU2VjdGlvbnMudGFnXCI7XG5pbXBvcnQgeyBzdG9yYWdlLCBWaWV3VHlwZXMgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG4vLyBpbXBvcnQgeyBtb2NoYUxvYWRlZCB9IGZyb20gXCIuL3Rlc3RpbmcvaW5pdGlhbGl6ZS1tb2NoYS1jaGFpXCIgLy8gTm8gbG9uZ2VyIG5lZWRlZFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blRlc3RzKCkge1xuICAgIGNvbnNvbGUubG9nKCfwn4+DIHJ1blRlc3RzOiBJbXBvcnRpbmcgdGVzdHMuLi4nKTtcbiAgICAvLyBBbHdheXMgcnVuIGJhc2ljIGFuZCBzdGFydCB0ZXN0c1xuICAgIGF3YWl0IGltcG9ydCgnLi9iYXNpYy50ZXN0Jyk7IC8vIG5vdCBpbiBnaC1wYWdlc1xuICAgIGF3YWl0IGltcG9ydCgnLi9zdGFydC50ZXN0LmpzJyk7XG4gICAgLy8gQ29uZGl0aW9uYWxseSBpbXBvcnQgdGVzdHMgYmFzZWQgb24gY2hlY2tib3ggc3RhdGVzXG4gICAgLy8gTWFwIFZpZXdUeXBlcyB0byB0ZXN0IGZpbGVzXG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkNvbnRlbnQpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9jb250ZW50LnRlc3QnKTtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2R1bXBDb250ZW50LnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgY29udGVudCB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuU3Vic2NyaXB0aW9ucykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3N1YnNjcmlwdGlvbnMudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBzdWJzY3JpcHRpb25zIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5Db3VudGVycykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2NvdW50ZXJzLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgY291bnRlcnMgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlByb3BzKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vcHJvcHMudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBwcm9wcyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuVGFnU3dpdGNoRGVidWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi90YWdTd2l0Y2gudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyB0YWdTd2l0Y2ggdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkFycmF5cykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL2FycmF5cy50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIGFycmF5cyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuTWlycm9yaW5nKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vbWlycm9yLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgbWlycm9yaW5nIHRlc3RzICh1bmNoZWNrZWQpJyk7XG4gICAgfVxuICAgIGlmIChzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKFZpZXdUeXBlcy5PbmVSZW5kZXIpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9vbmVSZW5kZXIudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBvbmVSZW5kZXIgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkZ1bkluUHJvcHNUYWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9mdW5JblByb3BzLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgZnVuSW5Qcm9wc1RhZyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuQXR0cmlidXRlRGVidWcpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi9hdHRyaWJ1dGVzLnRlc3QnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfij63vuI8gU2tpcHBpbmcgYXR0cmlidXRlRGVidWcgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkRlc3Ryb3lzKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vZGVzdHJveXMudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBkZXN0cm95cyB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuV2F0Y2hUZXN0aW5nKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vd2F0Y2gudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyB3YXRjaFRlc3RpbmcgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLkNoaWxkKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnQoJy4vY2hpbGQudGVzdCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ+KPre+4jyBTa2lwcGluZyBjaGlsZCB0ZXN0cyAodW5jaGVja2VkKScpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZS52aWV3cy5pbmNsdWRlcyhWaWV3VHlwZXMuUHJvdmlkZXJEZWJ1ZykpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0KCcuL3Byb3ZpZGVycy50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIHByb3ZpZGVyRGVidWcgdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgaWYgKHN0b3JhZ2Uudmlld3MuaW5jbHVkZXMoVmlld1R5cGVzLlRvZG8pKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydCgnLi90b2Rvcy50ZXN0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygn4o+t77iPIFNraXBwaW5nIHRvZG8gdGVzdHMgKHVuY2hlY2tlZCknKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpOyAvL3BlcmZvcm1hbmNlLm5vdygpXG4gICAgICAgIC8vIFJ1biB0ZXN0cyB3aXRoIG91ciBicm93c2VyIHRlc3QgcnVubmVyXG4gICAgICAgIGlmICh3aW5kb3cubW9jaGEpIHtcbiAgICAgICAgICAgIC8vIExlZ2FjeSBNb2NoYSBzdXBwb3J0IGlmIHN0aWxsIGF2YWlsYWJsZVxuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5tb2NoYS5ydW4oKGZhaWx1cmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYCR7ZmFpbHVyZXN9IHRlc3QocykgZmFpbGVkYCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBVc2Ugb3VyIGN1c3RvbSBicm93c2VyIHRlc3QgcnVubmVyXG4gICAgICAgICAgICBjb25zdCB7IGV4ZWN1dGVCcm93c2VyVGVzdHMgfSA9IGF3YWl0IGltcG9ydCgnLi90ZXN0aW5nL3Rlc3RSdW5uZXInKTtcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBleGVjdXRlQnJvd3NlclRlc3RzKCk7XG4gICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rlc3RzIGZhaWxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnQ7IC8vIHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRcbiAgICAgICAgY29uc29sZS5pbmZvKGDinIUgYWxsIHRlc3RzIHBhc3NlZCBpbiAke3RpbWV9bXNgKTtcbiAgICAgICAgLy8gY2xvc2UgYW5kIGhpZGUgb25seSBhY3RpdmUgc2VjdGlvbnNcbiAgICAgICAgb3V0cHV0U2VjdGlvbnNcbiAgICAgICAgICAgIC5maWx0ZXIoc2VjdGlvbiA9PiBzdG9yYWdlLnZpZXdzLmluY2x1ZGVzKHNlY3Rpb24udmlldykpXG4gICAgICAgICAgICAubWFwKHNlY3Rpb24gPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlY3Rpb25fJyArIHNlY3Rpb24udmlldyk7XG4gICAgICAgICAgICBpZiAoZWxtKSB7XG4gICAgICAgICAgICAgICAgZWxtLmNsaWNrKCk7IC8vIGNhdXNlIGhpZGUgY29udGVudFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgdGVzdHMgZmFpbGVkOiAnICsgZXJyb3IubWVzc2FnZSwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgc3RhdGVzLCB0YWcsIG5vRWxlbWVudCwgYnV0dG9uLCBoMSwgaHIsIGRpdiB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgbWVudSwgdXNlTWVudU5hbWUgfSBmcm9tIFwiLi9tZW51LnRhZ1wiO1xuaW1wb3J0IHsgaW5uZXJDb3VudGVyQ29udGVudCB9IGZyb20gXCIuL2NvdW50ZXJzRGVidWdcIjtcbmltcG9ydCB7IGNvbnRlbnQgfSBmcm9tIFwiLi9jb250ZW50LnRhZ1wiO1xuaW1wb3J0IHsgZnggfSBmcm9tIFwidGFnZ2VkanMtYW5pbWF0ZS1jc3NcIjtcbmltcG9ydCB7IGhvbWVQYWdlIH0gZnJvbSBcIi4vaG9tZVBhZ2UudGFnXCI7XG5jb25zdCBhcHBEYXRlID0gRGF0ZS5ub3coKTtcbmZ1bmN0aW9uIGFwcEZ1bigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcnVuQXBwRnVuKG1lbnVOYW1lID0gdXNlTWVudU5hbWUoKSkge1xuICAgICAgICBsZXQgc2hvd0hpZGUgPSBmYWxzZTtcbiAgICAgICAgc3RhdGVzKGdldCA9PiBbeyBzaG93SGlkZSB9XSA9IGdldCh7IHNob3dIaWRlIH0pKTtcbiAgICAgICAgY29uc29sZS5pbmZvKCfwn42SIE1haW4gYXBwIHJlbmRlcmVkJywgYXBwRGF0ZSk7XG4gICAgICAgIHJldHVybiBub0VsZW1lbnQoJzwhLS1hcHAuanMtLT4nLCBoMSh7IGlkOiBcImgxLWFwcFwiIH0sIGDwn4+377iPIFRhZ2dlZEpzIC0gJHsyICsgMn1gKSwgYnV0dG9uKHsgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHNob3dIaWRlID0gIXNob3dIaWRlLFxuICAgICAgICB9LCAnc2hvdy9oaWRlICcsIF8gPT4gc2hvd0hpZGUpLCBfID0+IHNob3dIaWRlICYmIGZ4VGFnKCksIG1lbnUoKSwgXyA9PiBtZW51TmFtZSA9PT0gJ2hvbWUnICYmIGhvbWVQYWdlKCksIF8gPT4gbWVudU5hbWUgPT09ICdjb3VudGVycycgJiYgaW5uZXJDb3VudGVyQ29udGVudCgpLCBfID0+IG1lbnVOYW1lID09PSAnY29udGVudCcgJiYgY29udGVudCgpKTtcbiAgICB9O1xufVxuYXBwRnVuLmlzQXBwID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBBcHAgPSB0YWcoYXBwRnVuKTtcbmNvbnN0IGZ4VGFnID0gdGFnKCgpID0+IG5vRWxlbWVudChociwgZGl2KHsgYXR0cjogZngoeyBkdXJhdGlvbjogJy4xcycgfSkgfSwgJ0hlbGxvIGFuaW1hdGVkIHdvcmxkJyksIGhyKSk7XG4iLCJpbXBvcnQgeyB0YWcsIGlucHV0LCBidXR0b24sIGRpdiB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgc2F2ZVNjb3BlZFN0b3JhZ2UsIHN0b3JhZ2UgfSBmcm9tIFwiLi9zZWN0aW9uU2VsZWN0b3IudGFnXCI7XG5pbXBvcnQgeyBydW5UZXN0aW5nIH0gZnJvbSBcIi4vcnVuVGVzdGluZy5mdW5jdGlvblwiO1xuZXhwb3J0IGNvbnN0IGF1dG9UZXN0aW5nQ29udHJvbHMgPSB0YWcoKHRlc3RzLCBydW5TdGFydEVuZFRlc3RzKSA9PiB7XG4gICAgaWYgKHN0b3JhZ2UuYXV0b1Rlc3QpIHtcbiAgICAgICAgcnVuVGVzdGluZyhmYWxzZSwgdGVzdHMsIHJ1blN0YXJ0RW5kVGVzdHMpO1xuICAgIH1cbiAgICByZXR1cm4gZGl2KCdhdXRvIHRlc3RpbmcgJywgaW5wdXQoe1xuICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgIG9uQ2hhbmdlOiB0b2dnbGVBdXRvVGVzdGluZyxcbiAgICAgICAgY2hlY2tlZDogXyA9PiBzdG9yYWdlLmF1dG9UZXN0LFxuICAgIH0pLCBidXR0b24oe1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiBydW5UZXN0aW5nKHRydWUsIHRlc3RzLCBydW5TdGFydEVuZFRlc3RzKSxcbiAgICB9LCAncnVuIHRlc3RzJykpO1xufSk7XG5mdW5jdGlvbiB0b2dnbGVBdXRvVGVzdGluZygpIHtcbiAgICBzdG9yYWdlLmF1dG9UZXN0ID0gc3RvcmFnZS5hdXRvVGVzdCA9ICFzdG9yYWdlLmF1dG9UZXN0O1xuICAgIHNhdmVTY29wZWRTdG9yYWdlKCk7XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0LCB0YWcsIHN1YnNjcmliZSwgaDEsIGRpdiwgYnV0dG9uLCBzcGFuLCBmaWVsZHNldCwgbGVnZW5kLCBzbWFsbCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgcmVuZGVyQ291bnREaXYgfSBmcm9tIFwiLi9yZW5kZXJDb3VudC5jb21wb25lbnRcIjtcbmltcG9ydCB7IGFjdGl2YXRlLCBzZWN0aW9uU2VsZWN0b3IsIHZpZXdDaGFuZ2VkIH0gZnJvbSBcIi4vc2VjdGlvblNlbGVjdG9yLnRhZ1wiO1xuaW1wb3J0IHsgcmVuZGVyZWRTZWN0aW9ucyB9IGZyb20gXCIuL3JlbmRlcmVkU2VjdGlvbnMudGFnXCI7XG5pbXBvcnQgeyBhdXRvVGVzdGluZ0NvbnRyb2xzIH0gZnJvbSBcIi4vYXV0b1Rlc3RpbmdDb250cm9scy50YWdcIjtcbmltcG9ydCB7IG1lbnUgfSBmcm9tIFwiLi9tZW51LnRhZ1wiO1xuaW1wb3J0IHsgaGFzaFJvdXRlclN1YmplY3QgfSBmcm9tIFwiLi90b2RvL0hhc2hSb3V0ZXIuZnVuY3Rpb25cIjtcbmV4cG9ydCBkZWZhdWx0IHRhZygoKSA9PiB7XG4gICAgY29uc3QgXyA9ICdpc29sYXRlZCBhcHAgc3RhdGUnO1xuICAgIGxldCByZW5kZXJDb3VudCA9IDA7XG4gICAgbGV0IGFwcENvdW50ZXIgPSAwO1xuICAgIGNvbnN0IGFwcENvdW50ZXJTdWJqZWN0ID0gbmV3IFN1YmplY3QoYXBwQ291bnRlcik7XG4gICAgbGV0IHRvZ2dsZVZhbHVlID0gZmFsc2U7XG4gICAgY29uc3QgdG9nZ2xlID0gKCkgPT4gdG9nZ2xlVmFsdWUgPSAhdG9nZ2xlVmFsdWU7XG4gICAgLy8gY2FsbGJhY2sgPSBjYWxsYmFja01ha2VyKCksXG4gICAgY29uc3Qgcm91dGUgPSBoYXNoUm91dGVyU3ViamVjdCgpLnZhbHVlLnJvdXRlLnNwbGl0KCcvJylcbiAgICAgICAgLy8gY29uc3Qgcm91dGUgPSB1c2VIYXNoUm91dGVyKCkucm91dGUuc3BsaXQoJy8nKVxuICAgICAgICAubWFwKHggPT4geC50cmltKCkpXG4gICAgICAgIC5maWx0ZXIoaGFzTGVuZ3RoID0+IGhhc0xlbmd0aC5sZW5ndGgpO1xuICAgIGxldCB2aWV3VHlwZXMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHJvdXRlLmxlbmd0aCkge1xuICAgICAgICB2aWV3VHlwZXMgPSByb3V0ZTtcbiAgICB9XG4gICAgY29uc29sZS5pbmZvKCcx77iP4oOjIGFwcCBpbml0IHNob3VsZCBvbmx5IHJ1biBvbmNlJyk7XG4gICAgYXBwQ291bnRlclN1YmplY3Quc3Vic2NyaWJlKHggPT4gYXBwQ291bnRlciA9IHhcbiAgICAvLyBjYWxsYmFjayh4ID0+IHtcbiAgICAvL2FwcENvdW50ZXIgPSB4XG4gICAgLy8gfSkgLy8gYSBsZXQgdmFyaWFibGUgaXMgZXhwZWN0ZWQgdG8gbWFpbnRhaW4gbmV3IHZhbHVlIG92ZXIgcmVuZGVyIGN5Y2xlcyBmb3J3YXJkXG4gICAgKTtcbiAgICArK3JlbmRlckNvdW50O1xuICAgIHJldHVybiBkaXYoJzwhLS1pc29sYXRlZEFwcC5qcy0tPicsIGgxKHsgaWQ6IFwiYXBwXCIgfSwgJ/Cfj7fvuI8gVGFnZ2VkSnMgLSBpc29sYXRlZCcpLCBkaXYoeyBzdHlsZTogXCJvcGFjaXR5Oi42XCIgfSwgJyhubyBITVIpJyksIGRpdih7IHN0eWxlOiBcIm9wYWNpdHk6LjZcIiB9LCAncm91dGU6ICcsIHJvdXRlKSwgbWVudSgpLCBkaXYoZmllbGRzZXQobGVnZW5kKCdkaXJlY3QgYXBwIHRlc3RzJyksIGJ1dHRvbih7XG4gICAgICAgIGlkOiBcImFwcC1jb3VudGVyLXN1YmplY3QtYnV0dG9uXCIsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIGFwcENvdW50ZXJTdWJqZWN0Lm5leHQoYXBwQ291bnRlciArIDEpO1xuICAgICAgICB9XG4gICAgfSwgJ/CfjZIgKythcHAgc3ViamVjdCcpLCBidXR0b24oe1xuICAgICAgICBpZDogXCJhcHAtY291bnRlci1idXR0b25cIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgKythcHBDb3VudGVyO1xuICAgICAgICB9XG4gICAgfSwgJ/CfjZIgKythcHAnKSwgc3Bhbign8J+NkiAnLCBzcGFuKHsgaWQ6IFwiYXBwLWNvdW50ZXItZGlzcGxheVwiIH0sIGFwcENvdW50ZXIpKSwgc3Bhbign8J+NkiQ8Jywgc3Bhbih7IGlkOiBcImFwcC1jb3VudGVyLXN1YmplY3QtZGlzcGxheVwiIH0sIHN1YnNjcmliZShhcHBDb3VudGVyU3ViamVjdCkpLCAnPicpLCBzcGFuKCfwn42SJC52YWx1ZTwnLCBzcGFuKHsgaWQ6IFwiYXBwLWNvdW50ZXItc3ViamVjdC12YWx1ZS1kaXNwbGF5XCIgfSwgXyA9PiBhcHBDb3VudGVyU3ViamVjdC52YWx1ZSksICc+JyksIGJ1dHRvbih7IGlkOiBcInRvZ2dsZS10ZXN0XCIsIG9uQ2xpY2s6IHRvZ2dsZSB9LCAndG9nZ2xlIHRlc3QgJywgXyA9PiB0b2dnbGVWYWx1ZSwgJ3RydWUnKSksIGF1dG9UZXN0aW5nQ29udHJvbHModmlld1R5cGVzKSksIGRpdih7IHN0eWxlOiBcImRpc3BsYXk6ZmxleDtmbGV4LXdyYXA6bm93cmFwO2dhcDoxZW07anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XCIgfSwgcmVuZGVyQ291bnREaXYoeyBuYW1lOiAnYXBwJywgcmVuZGVyQ291bnQgfSksIGRpdihzbWFsbCgnKHN1YnNjcmlwdGlvbiBjb3VudDogJywgc3Vic2NyaWJlKFN1YmplY3QuZ2xvYmFsU3ViQ291bnQkKSwgJyknKSkpLCBzZWN0aW9uU2VsZWN0b3Iodmlld1R5cGVzKSwgZGl2KHsgaWQ6IFwidGFnRGVidWctZngtd3JhcFwiIH0sIHJlbmRlcmVkU2VjdGlvbnMoYXBwQ291bnRlclN1YmplY3QsIHZpZXdUeXBlcyksIHJlbmRlckNvdW50RGl2KHsgcmVuZGVyQ291bnQsIG5hbWU6ICdpc29sYXRlZEFwcCcgfSkpKTtcbn0pO1xudmlld0NoYW5nZWQuc3Vic2NyaWJlKCh7IHR5cGUsIGNoZWNrVGVzdGluZyB9KSA9PiB7XG4gICAgYWN0aXZhdGUodHlwZSwgY2hlY2tUZXN0aW5nKTtcbn0pO1xuIiwiaW1wb3J0IHsgdGFnRWxlbWVudCB9IGZyb20gXCJ0YWdnZWRqc1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwLnRhZ1wiO1xuaW1wb3J0IElzb2xhdGVkQXBwIGZyb20gXCIuL2lzb2xhdGVkQXBwXCI7XG5leHBvcnQgZnVuY3Rpb24gcnVuKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYXBwJylbMF07XG4gICAgY29uc3QgcGF0aG5hbWUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgY29uc3QgbG9jYXRpb25TcGxpdCA9IHBhdGhuYW1lLnNwbGl0KCcvJykuZmlsdGVyKHggPT4geCk7XG4gICAgY29uc3QgbG9jYXRpb24gPSBsb2NhdGlvblNwbGl0WzBdPy50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb2NhdGlvbiAmJiBbJ2lzb2xhdGVkLmh0bWwnLCAnaW5kZXgtc3RhdGljLmh0bWwnXS5pbmNsdWRlcyhsb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICB0YWdFbGVtZW50KElzb2xhdGVkQXBwLCBlbGVtZW50LCB7IHRlc3Q6IDEgfSk7XG4gICAgICAgIGNvbnN0IGVuZCA9IERhdGUubm93KCkgLSBzdGFydDtcbiAgICAgICAgY29uc29sZS5pbmZvKGDij7HvuI8gaXNvbGF0ZWQgcmVuZGVyIGluICR7ZW5kfW1zYCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRhZ0VsZW1lbnQoQXBwLCBlbGVtZW50LCB7IHRlc3Q6IDEgfSk7XG4gICAgY29uc3QgZW5kID0gRGF0ZS5ub3coKSAtIHN0YXJ0O1xuICAgIGNvbnNvbGUuaW5mbyhg4o+x77iPIHJlbmRlcmVkIGluICR7ZW5kfW1zYCk7XG59XG4iXSwibmFtZXMiOlsiZnhUaW1lIiwiZGVsYXkiLCJ0aW1lIiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJpdCIsInNpZ25hbEFycmF5Q291bnQiLCJpbml0aWFsQ291bnQiLCJOdW1iZXIiLCJpbm5lclRleHQiLCJ0b0JlIiwiaSIsImFzeW5jIiwicHVzaEJ0biIsImNsaWNrIiwibmV3Q291bnQiLCJjb3VudGVyRGlzcGxheSIsImNvdW50ZXJWYWx1ZSIsImFycmF5TGVuZ3RoIiwiaXRlbUNvdW50ZXIiLCJ0b0JlRGVmaW5lZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm5ld0NvdW50ZXJWYWx1ZSIsImlkIiwidmFsdWUiLCJjdXJyZW50Q291bnQiLCJzaWdDb3VudCIsIm5ld0NvdW50MSIsIml0ZW1Db3VudDIiLCJjb3VudCIsImJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiaW5zaWRlQ291bnQiLCJpbnNpZGVFbG0iLCJpbnNpZGVEaXNwbGF5IiwiaW5kZXhWYWx1ZSIsIm91dHNpZGVFbG0iLCJvdXRzaWRlRGlzcGxheSIsIm91dHNpZGVWYWx1ZSIsInRvU3RyaW5nIiwieCIsIl9jbGljayIsInJlc3VsdCIsInJlc3VsdDIiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsIkFycmF5IiwiY2xhc3NMaXN0IiwiaW5jbHVkZXMiLCJkeW5hbWljQ2xhc3NMaXN0IiwiYmdDb2xvckNoYW5nZXIiLCJzdWJzY3JpYmVCZ0NvbG9yIiwibXVsdGlwbGVTdWJzY3JpYmVCZ0NvbG9yIiwidG9nZ2xlQ29sb3JCdG4iLCJjbGVhckNvbG9yQnRuIiwidG9nZ2xlQXR0cmlidXRlc0J0biIsInN1YnNjcmlwdGlvbnNDb3VudCIsImFmdGVySGlkZUNvdW50IiwiYWZ0ZXJTaG93Q291bnQiLCJzdHlsZU9iamVjdFRlc3QiLCJ0b2dnbGVCdG4iLCJjaGVja2VkIiwicGFkZGluZyIsImJvcmRlciIsImJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsInN0eWxlUHJvcGVydHlUZXN0IiwiY29sb3IiLCJtYXJnaW5Ub3AiLCJ0b2dnbGVUZXN0IiwiZm9udFdlaWdodCIsImVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImh0bWwiLCJwYXJlbnROb2RlIiwiaW5uZXJIVE1MIiwicmVwbGFjZSIsInRyaW0iLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwicnVucyIsImZpcnN0UnVuIiwiY291bnRlcklucHV0IiwiY3VycmVudFN1YnMiLCJleHBlY3RlZFJlbmRlckNvdW50IiwicmVuZGVyQ291bnQiLCJwcmVJbml0Q291bnRlciIsInNwZWVkQ2xpY2tDb3VudFRlc3QiLCJwaXBlMCIsInBpcGUyIiwicGlwZTMiLCJwaXBlZFN1YkRpc3BsYXkiLCJzdWJqZWN0Q291bnREaXNwbGF5IiwiY2xpY2tTcGVlZEFtb3VudCIsImNvdW50ZXJRdWVyeSIsImRpc3BsYXlRdWVyeSIsImluY3JlYXNlT3V0ZXJDb3VudGVyUXVlcnkiLCJjbGlja0NvdW50IiwiZWxtIiwicHJvcENvdW50ZXJCdG5FbG0iLCJjb25zb2xlIiwiaW5kZXgiLCJ0aW1lRW5kIiwiZGlzcGxheVF1ZXJ5VGltZSIsImRlc0NvdW50MCIsIm9sZERlc3Ryb3lDb3VudCIsImRlc3Ryb3lDb3VudCIsInVwZGF0ZWRDb3VudCIsImRDb250ZW50Q291bnQiLCJyZXN1bHRFbG1zIiwicmVzdWx0RWxtczIiLCJsb2ciLCJnZXRJdGVtcyIsIml0ZW1zIiwiaXRlbSIsInB1c2giLCJnZXRDaGVja2JveGVzIiwibWFwIiwiZ2V0Q2hlY2tlZENvdW50IiwiZmlsdGVyIiwiY2IiLCJyZXNldENoZWNrYm94ZXMiLCJmb3JFYWNoIiwiY2hlY2tib3giLCJpbmplY3Rpb25UZXN0aW5nV3JhcCIsImNoZWNrYm94ZXMiLCJpdGVtMFN0eWxlIiwiZ2V0QXR0cmlidXRlIiwiaXRlbTFTdHlsZSIsImNvdW50ZXIiLCJwcm9wc1RleHRhcmVhIiwiZnVuVXBkYXRlVmFsdWUiLCJjaGFuZ2VkIiwib3duZXJIVE1MIiwicGFyZW50SFRNTCIsImNoaWxkSFRNTCIsIm93bmVyTnVtIiwicGFyZW50TnVtIiwiY2hpbGROdW0iLCJwcm9wQ291bnRlciIsInN5bmNDb3VudGVyIiwicGFyZW50RWxlbWVudCIsInN0eWxlcyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJoYXNSZWQiLCJib3JkZXJTdHlsZSIsImNoaWxkRWxlbWVudCIsImhhc0dyZWVuIiwiY29udGFpbnMiLCJwYXJlbnRDb2xvclNlbGVjdCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImJ1YmJsZXMiLCJoYXNCbHVlIiwiY2hpbGRDb2xvclNlbGVjdCIsImhhc1B1cnBsZSIsImNoaWxkMkVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImNoaWxkMkNvbG9yU2VsZWN0IiwiaGFzT3JhbmdlIiwiY3VycmVudCIsImFmdGVyQ2xpY2siLCJpbmNyZWFzZSIsImhpZGVTaG93IiwiaGlkZVNob3dWYWx1ZSIsInN1YlZhbHVlIiwiemVyb3MiLCJvbmVzIiwiX2V4MUh0bWwiLCJleHBlY3RlZEV4MUh0bWwiLCJleDBIdG1sIiwiZXgxSHRtbCIsImhvc3REZXN0cm95Q291bnQiLCJpc05hTiIsImRyb3Bkb3duIiwib25jaGFuZ2UiLCJ0YXJnZXQiLCJ0d29Db3VudCIsImNyZWF0ZUV4cGVjdCIsImFjdHVhbCIsImNhbGxlckxpbmUiLCJFcnJvciIsInN0YWNrIiwic3BsaXQiLCJleHBlY3RlZCIsIm1lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJmdWxsTWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnJvciIsInVuZGVmaW5lZCIsInRvQmVVbmRlZmluZWQiLCJ0b0JlR3JlYXRlclRoYW4iLCJ0b0hhdmVMZW5ndGgiLCJhY3R1YWxXaXRoTGVuZ3RoIiwibm90IiwiaXNWaXRlc3QiLCJnbG9iYWxUaGlzIiwidml0ZXN0Iiwidml0ZXN0RXhwZWN0IiwiZXhwZWN0IiwibWF0Y2hlcnMiLCJ0byIsImJlIiwiZ3JlYXRlclRoYW4iLCJzZWxlY3RvciIsImVsbUNvdW50IiwicXVlcnkiLCJxIiwiZm9jdXMiLCJjbGlja0J5SWQiLCJjbGlja09uZSIsImtleWRvd25PbiIsImlucHV0Iiwia2V5Iiwia2V5RXZlbnQiLCJLZXlib2FyZEV2ZW50Iiwia2V5dXBPbiIsImNoYW5nZU9uZSIsImNoYW5nZUVsbSIsImJ5SWQiLCJodG1sQnlJZCIsImNhbmNlbGFibGUiLCJjaGFuZ2VFdmVudCIsInRyaWdnZXJDaGFuZ2VFbG0iLCJzbGVlcCIsIm1zIiwicmVzb2x2ZSIsImV4cGVjdEVsbUNvdW50IiwiZWxlbWVudHMiLCJmb3VuZCIsImV4cGVjdE1hdGNoZWRIdG1sIiwicXVlcmllcyIsInJlZHVjZSIsImFsbCIsImxhc3RIdG1sIiwicG9wIiwiZXhwZWN0SFRNTCIsImV4cGVjdGVkSHRtbCIsInRlc3RDb3VudGVyU2VsZWN0ZWRFbGVtZW50cyIsImNvdW50ZXJCdXR0b25zIiwiY291bnRlckRpc3BsYXlzIiwiZWxlbWVudENvdW50RXhwZWN0ZWQiLCJjb3VudGVyQnV0dG9uU2VsZWN0IiwiY291bnRlckRpc3BsYXlTZWxlY3QiLCJ0ZXN0UXVhbnRpZmllciIsImluY3JlYXNlQ291bnRlciIsImJvZHkiLCJ0ZXN0Q291bnRlckVsZW1lbnRzIiwidGVzdER1ZWxDb3VudGVyRWxlbWVudHMiLCJzZXRzIiwiYnV0dG9uMCIsImRpc3BsYXkwIiwic2hpZnQiLCJidXR0b25RdWVyeSIsImlwMCIsImJ1dHRvbjEiLCJkaXNwbGF5MSIsImRpc3BsYXkxRWxlbWVudCIsImlwMUNoZWNrIiwic2Vjb25kSW5jcmVhc2UiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJjdXJyZW50U3VpdGUiLCJzdWl0ZXMiLCJNYXAiLCJ0ZXN0UXVldWUiLCJzdWl0ZUhvb2tzIiwibmFtZSIsImZuIiwidGVzdCIsInN1aXRlIiwic3VpdGVUZXN0cyIsImdldCIsInNldCIsInByZXZpb3VzU3VpdGUiLCJob29rcyIsImV4ZWN1dGVCcm93c2VyVGVzdHMiLCJwYXNzZWQiLCJmYWlsZWQiLCJmYWlsdXJlcyIsInRlc3RzQnlTdWl0ZSIsInN1aXRlTmFtZSIsInRlc3RzIiwiaW5kZW50IiwiaG9vayIsImFmdGVyRXJyb3IiLCJmdWxsTmFtZSIsImxpbmUiLCJjbGVhciIsInJ1blRvZG9TcGVlZG9tZXRlciIsIm5ld1RvZG8iLCJkZWxldGVCdXR0b25zIiwibnVtYmVyT2ZJdGVtc1RvQWRkIiwidG9kb0lucHV0IiwibG9jYXRpb24iLCJoYXNoIiwidG9kb1RvZ2dsZTIiLCJldmVudCIsIk1vdXNlRXZlbnQiLCJ2aWV3IiwiZWRpdElucHV0Iiwic2xvd0NvdW50Iiwic3RhcnRDb3VudCIsInRydXRoU3RhcnRDb3VudCIsImRpc3BsYXkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YXJpYWJsZVByZWZpeCIsInZhcmlhYmxlU3VmZml4IiwiaXNTcGVjaWFsQXR0ciIsImF0dHJOYW1lIiwic3RhcnRzV2l0aCIsInNwZWNpYWxBY3Rpb24iLCJpc1NwZWNpYWxBY3Rpb24iLCJwbGFjZWhvbGRlclJlZ2V4IiwiUmVnRXhwIiwiZ2V0VGFnVmFySW5kZXgiLCJzZWFyY2giLCJmcmFnRmluZEFueSIsIm9uZG91YmxlY2xpY2siLCJyZWdleEF0dHIiLCJyZWdleFRhZ09yZyIsInBhcnNlSFRNTCIsInZhbHVlUG9zaXRpb25zIiwiY3VycmVudEVsZW1lbnQiLCJ2YWx1ZUluZGV4IiwicG9zaXRpb24iLCJyZWdleFRhZyIsInJlbW92ZUNvbW1lbnRSZWdYIiwibWF0Y2giLCJwcmVwcm9jZXNzVGFnc0luQ29tbWVudHMiLCJ0YWdNYXRjaCIsImV4ZWMiLCJmdWxsTWF0Y2giLCJ0YWdOYW1lIiwiYXR0clN0cmluZyIsImlzQ2xvc2luZ1RhZyIsImlzU2VsZkNsb3NpbmciLCJlbmRzV2l0aCIsInNsaWNlIiwidGV4dFZhck1hdGNoZXMiLCJzcGxpdEJ5VGFnVmFyIiwiZmFrZVRhZ3NSZWdFeCIsInB1c2hUZXh0VG8iLCJhdHRyaWJ1dGVzIiwiYXR0ck1hdGNoIiwicGFyc2VBdHRyU3RyaW5nIiwibm4iLCJhdCIsImNoIiwidGV4dE5vZGUiLCJwdXNoVG8iLCJ0YyIsInBvc3RQcm9jZXNzVGFnc0luQ29tbWVudHMiLCJpbnB1dFN0cmluZyIsIm5vdEVtcHR5U3RyaW5nTWFwcGVyIiwicGFydCIsImF0dHJWYWx1ZSIsIm5vdEVtcHR5Iiwibm9WYWx1ZSIsImxvd2VyTmFtZSIsInRvTG93ZXJDYXNlIiwiZml4ZWROYW1lIiwiZXZlbnROYW1lIiwiY2xlYW5FdmVudE5hbWUiLCJ2YWx1ZU5hbWUiLCJ3aG9sZVZhbHVlIiwiYXR0clNldCIsImF0dHJWYWx1ZVNwbGl0IiwiZmluZFJlYWxUYWdzUmVnRXgiLCJpc1NwZWNpYWwiLCJ1bnNoaWZ0IiwicmVhbFRhZ3NSZWdFeCIsInNob3J0RnJvbnQiLCJyZXBsYWNlbWVudCIsImh0bWxJbnRlcnBvbGF0aW9uVG9Eb21NZXRhIiwic3RyaW5ncyIsInZhbHVlcyIsImh0bWxTdHJpbmciLCJzYW5pdGl6ZWRGcmFnbWVudHMiLCJyZXN1bHRzIiwic2FmZUZyYWdtZW50IiwiZGlmZiIsImJhbGFuY2VBcnJheUJ5QXJyYXlzIiwiYWRkUGxhY2Vob2xkZXJzIiwiaHRtbEludGVycG9sYXRpb25Ub1BsYWNlaG9sZGVycyIsImpvaW4iLCJlbXB0eSIsIkJhc2ljVHlwZXMiLCJJbW11dGFibGVUeXBlcyIsInRhZyIsImRvbSIsInRlbXBsYXRlciIsInRhZ0NvbXBvbmVudCIsInRhZ0FycmF5IiwiaG9zdCIsInN1YnNjcmliZSIsInNpZ25hbCIsInJlbmRlck9uY2UiLCJzdGF0ZVJlbmRlciIsInZlcnNpb24iLCJEYXRlIiwibm93IiwicmVwbGFjZVBsYWNlaG9sZGVycyIsInZhbHVlQ291bnQiLCJjdXJyZW50VGFpbCIsImxvb3BUYWlsIiwiYXR0cnMiLCJwcm9jZXNzQXR0cmlidXRlcyIsImNoaWxkcmVuIiwiaW5uZXJMb29wVGFpbCIsImV4YW1pbmVDaGlsZCIsImNoaWxkIiwidGV4dENoaWxkIiwic3RyaW5nIiwic2Vjb25kTWF0Y2giLCJ3SW5kZXgiLCJwYXJzZUludCIsInZhckNvbnRlbnQiLCJhZnRlciIsInNwbGljZSIsInYiLCJsYXN0SW5kZXgiLCJtYXBwZWQiLCJ0YWdKc1ZhciIsImxlbmd0aE1hcHBlciIsImxhc3RSdW5zIiwiZ2V0RG9tTWV0YSIsInN0cmluZ0lkIiwiYXJyYXkiLCJnZXRTdHJpbmdzSWQiLCJsYXN0UnVuIiwibWF0Y2hlcyIsImV2ZXJ5IiwiaXNMYXN0UnVuTWF0Y2hlZCIsImRvbU1ldGFNYXAiLCJ0ZW1wbGF0ZSIsImludGVycG9sYXRpb24iLCJwYWludENvbW1hbmRzIiwicGFpbnRSZW1vdmVzIiwicGFpbnRBcHBlbmRzIiwicGFpbnRBZnRlcnMiLCJwYWludGluZyIsImxvY2tzIiwicmVtb3ZlTG9ja3MiLCJzZXRDb250ZW50IiwidGV4dCIsInBhaW50IiwicmVtb3ZlcyIsImNvbnRlbnQiLCJydW5QYWludFJlbW92ZXMiLCJydW5QYWludEN5Y2xlcyIsIm5vd1BhaW50QWZ0ZXJzIiwicnVuQWZ0ZXJDeWNsZSIsImFkZFBhaW50UmVtb3ZlciIsImNhbGxlciIsInBhaW50UmVtb3ZlciIsIl9jYWxsZXIiLCJpbmZvIiwicmVtb3ZlQ2hpbGQiLCJwYWludEJlZm9yZSIsInJlbGF0aXZlIiwiaW5zZXJ0QmVmb3JlIiwicGFpbnRBcHBlbmQiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRDbGVhbmVyIiwiY3JlYXRlRWxlbWVudCIsInRvUGxhaW5UZXh0RWxtIiwiY3JlYXRlVGV4dE5vZGUiLCJwYWludEJlZm9yZVRleHQiLCJjYWxsYmFjayIsInRleHRFbG0iLCJwYWludEJlZm9yZUVsZW1lbnRTdHJpbmciLCJwYWludEFwcGVuZEVsZW1lbnRTdHJpbmciLCJkZWxldGVDb250ZXh0U3ViQ29udGV4dCIsImNvbnRleHRJdGVtIiwib3duZXJTdXBwb3J0IiwidXBkYXRlQ291bnQiLCJkZWxldGVTdWJDb250ZXh0Iiwic3ViQ29udGV4dCIsImRlbGV0ZWQiLCJhcHBlbmRNYXJrZXIiLCJoYXNFbWl0dGVkIiwic3ViQ29udGV4dEl0ZW0iLCJkZXN0cm95IiwiaXNTdGF0aWNUYWciLCJ0YWdKc1R5cGUiLCJpc1RhZ0NvbXBvbmVudCIsInRhZ1R5cGUiLCJpc1N1YmplY3RJbnN0YW5jZSIsInN1YmplY3QiLCJmdW5jdGlvbiIsImlzUHJvbWlzZSIsInRoZW4iLCJvYmplY3QiLCJpc0FycmF5IiwiZ2V0TmV3R2xvYmFsIiwic3RhdGUiLCJuZXdlciIsInN0YXRlcyIsImdsb2JhbCIsImJsb2NrZWQiLCJnZXRTdXBwb3J0SW5DeWNsZSIsInNldFVzZU1lbW9yeSIsInN0YXRlQ29uZmlnIiwic3VwcG9ydCIsInNldFN1cHBvcnRJbkN5Y2xlIiwic2V0Q29udGV4dEluQ3ljbGUiLCJjb250ZXh0IiwiZmluZFN0YXRlU3VwcG9ydFVwQ29udGV4dCIsInN0YXRlTWV0YSIsIm5ld2VzdCIsInBhcmVudENvbnRleHQiLCJnZXRTdXBwb3J0V2l0aFN0YXRlIiwiY29tcG9uZW50IiwicmV0dXJuQXJncyIsImFyZ3MiLCJmaXJzdFN0YXRlc0hhbmRsZXIiLCJzZXR0ZXIiLCJjb25maWciLCJzdGF0ZXNJbmRleCIsInJlU3RhdGVzSGFuZGxlciIsIm9sZFN0YXRlcyIsInByZXZTdXBwb3J0IiwibGFzdFZhbHVlcyIsIl9hcmdzIiwiaW5pdFN0YXRlIiwiaGFuZGxlcnMiLCJoYW5kbGVyIiwicnVuRmlyc3RTdGF0ZSIsInN0YXRlc0hhbmRsZXIiLCJyZWFycmF5IiwicmVTdGF0ZUJ5UHJldiIsInByZXZTdGF0ZSIsInJ1blJlc3RhdGUiLCJyZVN0YXRlU3VwcG9ydCIsIm5ld1N1cHBvcnQiLCJTdGF0ZUVjaG9CYWNrIiwiZ2V0U3RhdGVWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsImNoZWNrVmFsdWUiLCJnZXRDYWxsYmFja1ZhbHVlIiwicmVzdGF0ZSIsImdldENvbnRleHRJbkN5Y2xlIiwibXNnIiwiaW5pdFZhbHVlIiwib3JpZ2luYWwiLCJjb21iaW5lTGF0ZXN0Iiwic3ViamVjdHMiLCJvdXRwdXQiLCJTdWJqZWN0Iiwic3Vic2NyaWJlV2l0aCIsInZhbHVlc1NlZW4iLCJzZXRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsImNsb25lcyIsInN1YnNjcmlwdGlvbnMiLCJnZXRTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVycyIsImNvdW50U3ViamVjdCIsImdsb2JhbFN1YkNvdW50JCIsIm5leHQiLCJ1bnN1YnNjcmliZSIsImZpbmRJbmRleCIsInN1YiIsInJlbW92ZVN1YkZyb21BcnJheSIsInZhbFN1YiIsImFkZCIsInJ1blBpcGVkTWV0aG9kcyIsIm1ldGhvZHMiLCJvbkNvbXBsZXRlIiwiY2xvbmVNZXRob2RzIiwiZmlyc3RNZXRob2QiLCJuZXdWYWx1ZSIsIm1ldGhvZFJlc3BvbnNlIiwic2V0SGFuZGxlciIsImNvbnN0cnVjdG9yIiwib25TdWJzY3JpcHRpb24iLCJ0aGlzIiwiaXNTdWJqZWN0IiwiYmluZCIsImFyZ3VtZW50cyIsIm9yZ0NhbGxiYWNrIiwibGFzdFZhbHVlIiwiZW1pdCIsInN1YnMiLCJ0b1Byb21pc2UiLCJ0b0NhbGxiYWNrIiwicnVudGltZVN1YiIsInRhZ0pzVW5zdWIiLCJwaXBlIiwib3BlcmF0aW9ucyIsInNldE1ldGhvZHMiLCJhcmciLCJkZWZpbmVWYWx1ZU9uIiwiX3ZhbHVlIiwidGFnQ2xvc2VkJCIsImZvcmNlVXBkYXRlRXhpc3RpbmdWYWx1ZSIsImlnbm9yZU9yRGVzdHJveWVkIiwiaGFzVmFsdWVDaGFuZ2VkIiwidXBkYXRlVG9EaWZmVmFsdWUiLCJkb21Qcm9jZXNzQ29udGV4dEl0ZW0iLCJhcHBlbmRUbyIsImxvY2tlZCIsInByb2Nlc3NJbml0IiwicmVtb3ZlQ29udGV4dEluQ3ljbGUiLCJjYXN0VGV4dFZhbHVlIiwic3BlY2lhbEF0dHJpYnV0ZSIsInNwZWNpYWxOYW1lIiwiYXV0b2ZvY3VzIiwiYXV0b3NlbGVjdCIsIm5hbWVzIiwicGFpbnRTdHlsZSIsImNsYXNzTGlzdEFkZCIsImNsYXNzTGlzdFJlbW92ZSIsInByb2Nlc3NTcGVjaWFsQ2xhc3MiLCJzbWFsbE5hbWUiLCJzZXRQcm9wZXJ0eSIsInJlbW92ZSIsInNlbGVjdCIsImhvd1RvU2V0SW5wdXRPYmplY3RWYWx1ZSIsInNldE9iamVjdFZhbHVlIiwic2V0UHJvcGVydHlWYWx1ZSIsImhvd1RvU2V0U3RhbmRBbG9uZUF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJzZXROb25GdW5jdGlvbklucHV0VmFsdWUiLCJzZXRTaW1wbGVBdHRyaWJ1dGUiLCJzZXRCb29sZWFuQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiaGFuZGxlUHJvdmlkZXJDaGFuZ2VzIiwiYXBwU3VwcG9ydCIsInByb3ZpZGVyIiwidGFnc1dpdGhQcm92aWRlciIsIm1lbW9yeSIsImNoaWxkVGFncyIsImNTdWJqZWN0IiwiZ2V0VGFnc1dpdGhQcm92aWRlciIsIm1hcFRvU3VwcG9ydCIsImRlZXBDbG9uZSIsIm1heERlcHRoIiwibWFrZURlZXBDbG9uZSIsImNsb25lIiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJkZWVwRXF1YWwiLCJvYmoxIiwib2JqMiIsImlzRGVlcEVxdWFsIiwiZm4wIiwiZm4xIiwiZ2V0VGltZSIsImlzQXJyYXlEZWVwRXF1YWwiLCJrZXlzMSIsImtleXMiLCJrZXlzMiIsImlzT2JqZWN0RGVlcEVxdWFsIiwic2hhbGxvd1Byb3BNYXRjaCIsInByb3BzIiwicGFzdENsb25lUHJvcHMiLCJsZW4iLCJwYXN0UHJvcCIsIm9iRW50cmllcyIsImVudHJpZXMiLCJzdWJJdGVtIiwib2JqZWN0SXRlbU1hdGNoZXMiLCJwYXN0VmFsdWUiLCJjbG9uZVZhbHVlQXJyYXkiLCJjbG9uZVRhZ0pzVmFsdWUiLCJzaGFsbG93TWFwcGVyIiwic2hhbGxvd0NvbXBhcmVEZXB0aCIsImRlZXBNYXBwZXIiLCJkZWVwQ29tcGFyZURlcHRoIiwiZ2V0QmFzZVN1cHBvcnQiLCJjYXN0ZWRQcm9wcyIsImJhc2VTdXBwb3J0IiwidXBncmFkZUJhc2VUb1N1cHBvcnQiLCJwcm9wc0NvbmZpZyIsImNhc3RQcm9wcyIsInByb3BXYXRjaCIsIlByb3BXYXRjaGVzIiwiSU1NVVRBQkxFIiwibGF0ZXN0IiwiU0hBTExPVyIsImNsb25lUHJvcHNCeSIsInJ1bkJlZm9yZURlc3Ryb3kiLCJwcm92aWRlcnMiLCJkZXN0cm95JCIsImRlc3Ryb3lDb250ZXh0cyIsImxhc3RBcnJheSIsImNoaWxkVmFsdWUiLCJpU3VicyIsInVuc3Vic2NyaWJlRnJvbSIsImNvbnRleHRzIiwiZ2V0Q2hpbGRUYWdzVG9Tb2Z0RGVzdHJveSIsInRhZ3MiLCJzdWJUYWdzIiwiZnJvbSIsImNvbXBhcmVBcnJheUl0ZW1zIiwicmVtb3ZlZCIsIm5ld0xlbmd0aCIsImxlc3NMZW5ndGgiLCJwcmV2Q29udGV4dCIsImRlc3Ryb3lBcnJheUl0ZW0iLCJvbGRLZXkiLCJuZXdWYWx1ZVRhZyIsImlzRGlmZiIsImFycmF5VmFsdWUiLCJydW5BcnJheUl0ZW1EaWZmIiwib2xkZXN0IiwiZGVzdHJveVN1cHBvcnQiLCJkZXN0cm95QXJyYXlJdGVtQnlHbG9iYWwiLCJkZXN0cm95QXJyYXlDb250ZXh0IiwiZGVzdHJveUFycmF5IiwiZGVzdHJveUNsb25lIiwibWFya2VyIiwiZG9tRWxlbWVudCIsInNtYXJ0UmVtb3ZlS2lkcyIsImFsbFByb21pc2VzIiwid2l0aGluT3duZXJFbGVtZW50Iiwic3VwcG9ydE93bmVyIiwiaG9zdERlc3Ryb3kiLCJzaW1wbGVWYWx1ZUVsbSIsInN1Ykdsb2JhbCIsInNtYXJ0UmVtb3ZlQnlDb250ZXh0IiwiZGVzdHJveUNvbnRleHRIdG1sIiwiaHRtbERvbU1ldGEiLCJkZXN0cm95SHRtbERvbU1ldGEiLCJwcm9taXNlcyIsIndyYXBwZXIiLCJyZXR1cm5WYWx1ZSIsImlzTGlrZVRhZ3MiLCJvbGRTdXBwb3J0IiwiaXNMaWtlIiwiaXNMaWtlQmFzZVRhZ3MiLCJfaW5uZXJIVE1MIiwib3V0ZXJIVE1MIiwidGVtcGxhdGVyMCIsInRlbXBsYXRlcjEiLCJuZXdUYWciLCJvbGRUYWciLCJkb21NZXRhMCIsImRvbU1ldGExIiwiaXNMaWtlRG9tVGFncyIsImxpa2UiLCJzdHJpbmdzMCIsInN0cmluZ3MxIiwidmFsdWVzMCIsInZhbHVlczEiLCJ2YWx1ZXNMZW5ndGhzTWF0Y2giLCJhbGxWYXJzTWF0Y2giLCJjb21wYXJlVG8iLCJpc0xpa2VWYWx1ZVNldHMiLCJpc0xpa2VTdHJpbmdUYWdzIiwiZGVzdHJveVN1cHBvcnRCeUNvbnRleHRJdGVtIiwiZGVzdHJveVN1cHBvcnRDb250ZXh0IiwiY2hlY2tUYWdWYWx1ZUNoYW5nZUFuZFVwZGF0ZSIsImxhc3RTdXBwb3J0IiwidHJ5VXBkYXRlVG9UYWciLCJpc1RhZyIsImFkZE9uZUNvbnRleHQiLCJ2YWx1ZVRvVGFnSnNWYXIiLCJhdHRhY2hEeW5hbWljRG9tIiwiZGVwdGgiLCJwbGFjZWhvbGRlciIsInByb2Nlc3NBdHRyaWJ1dGVBcnJheSIsImF0dHJpYnV0ZUNvbnRleHRzIiwiYXR0ciIsImhvd1RvU2V0IiwibmV3Q29udGV4dCIsInByb2Nlc3NBdHRyaWJ1dGUiLCJhdHRhY2hEb21FbGVtZW50Iiwibm9kZSIsImF0dGFjaERvbUVsZW1lbnRzIiwibm9kZXMiLCJuZXdOb2RlIiwiYXR0YWNoRG9tVGV4dCIsIm5ld1BhcmVudENvbnRleHQiLCJpc0F0dHJzIiwib3duZXIiLCJidWlsZEJlZm9yZUVsZW1lbnQiLCJvbGRlciIsImRvbU1ldGEiLCJ0aGlzVGFnIiwibG9hZERvbU1ldGEiLCJhdHRhY2hIdG1sRG9tTWV0YSIsInByb2Nlc3NUYWciLCJwaCIsInRhZ0Zha2VUZW1wbGF0ZXIiLCJwcm9jZXNzSW5pdEF0dHJpYnV0ZSIsInByb2Nlc3NUYWdJbml0IiwicHJvY2Vzc1VwZGF0ZSIsIm5ld1N1cHBvcnRCeVRlbXBsYXRlciIsImNyZWF0ZUh0bWxTdXBwb3J0IiwicHJvY2Vzc05ld1N1YmplY3RUYWciLCJ0YWdWYWx1ZVVwZGF0ZUhhbmRsZXIiLCJnZXRUZW1wbGF0ZXJSZXN1bHQiLCJtYXRjaGVzSW5qZWN0aW9uIiwiaW5qZWN0Iiwic2FmZVJlbmRlclN1cHBvcnQiLCJpc0lubGluZUh0bWwiLCJyZW5kZXJJbmxpbmVIdG1sIiwicmVuZGVyRXhpc3RpbmdTdXBwb3J0IiwiY2hlY2tQcm9wIiwiYWx0ZXJQcm9wIiwiYWxyZWFkeSIsIm1lbSIsIndyYXAiLCJ0b0NhbGwiLCJjYWxsV2l0aCIsIm93bmVyQ29udGV4dCIsIm5vQ3ljbGUiLCJjYWxsYmFja1Jlc3VsdCIsImFwcGx5IiwicnVuIiwiY2FsbGJhY2tQcm9wT3duZXIiLCJhc3NpZ24iLCJnZXRQcm9wV3JhcCIsImlzU2tpcFByb3BWYWx1ZSIsImFmdGVyQ2hlY2tQcm9wIiwiY2hlY2tBcnJheVByb3AiLCJnZXRzZXQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjaGVja09iamVjdFByb3AiLCJvcmlnaW5hbFZhbHVlIiwibmV3UHJvcCIsImV4ZWN1dGVXcmFwIiwidXNlU3VwcG9ydCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJzdGF0ZWxlc3MiLCJjcmVhdGVTdXBwb3J0IiwiZ2V0Q2FzdGVkUHJvcHMiLCJERUVQIiwicHJlQ2FzdGVkUHJvcHMiLCJsYXN0UHJvcHNDb25maWciLCJsYXN0Q2FzdFByb3BzIiwic3luY0Z1bmN0aW9uUHJvcHMiLCJydW5BZnRlclN1cHBvcnRSZW5kZXIiLCJydW5BZnRlclJlbmRlciIsInNhdmVTdGF0ZSIsImNsZWFyU3RhdGVDb25maWciLCJjYWxsVGFnIiwicmVTdXBwb3J0IiwicmVSZW5kZXJUYWciLCJmaXJzdFRhZ1JlbmRlciIsInByb2Nlc3NSZW5kZXJPbmNlSW5pdCIsIm9uZVJlbmRlclRvU3VwcG9ydCIsInByb2Nlc3NTdWJzY3JpYmVXaXRoIiwiZW1pdFN1YkNvbnRleHQiLCJvYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZXMiLCJzdWJWYWx1ZUhhbmRsZXIiLCJ3aXRoRGVmYXVsdCIsImVtaXRWYWx1ZSIsInByb2Nlc3NBdHRyaWJ1dGVVcGRhdGUiLCJ0YWdWYWx1ZSIsIm5ld1RhZ1ZhciIsImlzQXR0ciIsInByb2Nlc3NTdWJzY3JpYmVBdHRyaWJ1dGUiLCJfdGFnSnNWYXIiLCJ1bnN1YnNjcmliZUNvbnRleHQiLCJvbk91dHB1dCIsImNhbGxiYWNrVmFsdWUiLCJzeW5jUnVuIiwicHJvY2Vzc05vbkR5bmFtaWNBdHRyIiwiY2hlY2tUb1BhaW50Iiwic2V0dXBTdWJzY3JpYmVDYWxsYmFja1Byb2Nlc3NvciIsImNvbnRleHRJdGVtMiIsInByb2Nlc3NTdWJzY3JpYmVXaXRoQXR0cmlidXRlIiwib2JzZXJ2YWJsZXMiLCJvYlZhbHVlIiwiZW1pdFN1YlNjcmlwdGlvbkFzSXMiLCJPYnNlcnZhYmxlIiwibmV3T2JzZXJ2ZXMiLCJvbGRPYnNlcnZlcyIsIm9iIiwiY2hlY2tTdGlsbFN1YnNjcmlwdGlvbiIsImhhbmRsZUlubmVySFRNTCIsInJlYWxWYWx1ZSIsIm9sZFByb2Nlc3NJbml0IiwicHJvY2Vzc0lubmVySFRNTCIsImluc2VydEJlZm9yZU9yaWdpbmFsIiwiZ3VhcmFudGVlSW5zZXJ0QmVmb3JlIiwib25GaXJzdFN1YkNvbnRleHQiLCJjaGVja0lubmVySFRNTCIsInN5bmNTdGF0ZXNBcnJheSIsIm9udG8iLCJzeW5jU3RhdGVzIiwiZ290Iiwic3luY0Zyb21TdGF0ZSIsInN5bmNPbnRvU3RhdGUiLCJvbGRTeW5jU3RhdGVzIiwic3RhdGVGcm9tIiwic3RhdGVUbyIsImludG9TdGF0ZXMiLCJzdGF0ZXNGcm9tIiwiZnJvbVZhbHVlIiwib2xkVmFsdWVzIiwiZ2V0SW5kZXgiLCJzdGF0ZUZyb21UYXJnZXQiLCJvbGRHZXRDYWxsYmFjayIsIm5ld1NldENhbGxiYWNrIiwiXyIsInN5bmNXcmFwQ2FsbGJhY2siLCJuZXdlclN0YXRlcyIsIm9sZGVyU3RhdGVzIiwibmV3ZXN0T3duZXIiLCJjIiwibmV3R2xvYmFsIiwib3B0aW9ucyIsImJhc2VIb3N0IiwicHJvY2Vzc0hvc3RBdHRyaWJ1dGUiLCJwcm9jZXNzSG9zdCIsInByb2Nlc3NIb3N0VXBkYXRlIiwiZGVsZXRlSG9zdCIsImluamVjdENhbGxiYWNrIiwicmV0dXJuRnVuY3Rpb24iLCJoYXNDaGFuZ2VkIiwiaGFuZGxlVGFnVHlwZUNoYW5nZUZyb20iLCJvbGRPcHRpb25zIiwibmV3SG9zdCIsInJlU3RhdGUiLCJvbkluaXQiLCJwcm9jZXNzSG9zdFRhZ0pzVmFyIiwiYXR0ckNvbnRleHQiLCJvbkRlc3Ryb3kiLCJzdGF0ZU93bmVyIiwiY29udmVydFRhZ1RvRWxlbWVudE1hbmFnZWQiLCJ0b1JlbmRlciIsIm92ZXJyaWRlVGFnVmFyIiwiX2NvbnRleHRJdGVtIiwiX293bmVyU3VwcG9ydCIsInJlbmRlckNvbnRlbnQiLCJjb252ZXJ0VmFsdWUiLCJvbGRUeXBlIiwibmV3VHlwZSIsImhhc1R5cGVDaGFuZ2VkIiwiY2hlY2tUYWdWYWx1ZUNoYW5nZSIsInVwZGF0ZXNIYW5kbGVyIiwiYWZ0ZXJEZXN0cm95IiwiZ2V0T3ZlcnJpZGVUYWdWYXIiLCJjcmVhdGVTdXBwb3J0V2l0aFByb3BzIiwibmV3UHJvcHNDb25maWciLCJwcm9jZXNzUmVwbGFjZW1lbnRDb21wb25lbnQiLCJwcm9jZXNzRmlyc3RTdWJqZWN0Q29tcG9uZW50IiwicHJvY2Vzc0ZpcnN0VGFnUmVzdWx0IiwicHJvY2Vzc1RhZ0NvbXBvbmVudEluaXQiLCJfaW5zZXJ0QmVmb3JlIiwicmVuZGVyVGFnVXBkYXRlQXJyYXkiLCJzdXBwb3J0cyIsIm1hcFRhZ1VwZGF0ZSIsInJlbmRlclN1cHBvcnQiLCJjaGVja1RvUmVzb2x2ZVByb21pc2UiLCJsYXN0IiwicmVzb2x2ZVByb21pc2UiLCJyZXNvbHZlVmFsdWUiLCJuZXdlc3RTdXBwb3J0IiwibmV3ZXN0U3RhdGVNZXRhIiwic3luY1N1cHBvcnRzIiwiZ2V0VXBUYWdzIiwidGhlblJlc29sdmVCeSIsInRhZ0NvdW50Iiwib25DbGljayIsIm1ha2VFdmVudExpc3RlbmVyIiwib25Nb3VzZURvd24iLCJ0eXBlIiwidG9CZUNhbGxlZCIsIndyYXBwZWQiLCJhZGRFdmVudExpc3RlbmVyIiwidGFnRWxlbWVudCIsIm9uY2xpY2siLCJtb3VzZWRvd24iLCJvbm1vdXNlZG93biIsImRlZmluZUdldFNldCIsImV2ZW50Rm4iLCJwYXJlbnRXcmFwIiwiaW5uZXJUYWdXcmFwIiwiZ2V0VGFnV3JhcCIsInNldFVzZSIsIlZhbHVlVHlwZXMiLCJ0YWdJbmRleCIsInJldHVybldyYXAiLCJ1cGRhdGVzIiwiaW5wdXRzIiwiY2hlY2tSZW5kZXJVcCIsInNlbGZQcm9wQ2hhbmdlIiwibm93UHJvcHMiLCJsYXRlc3RQcm9wcyIsImhhc1Byb3BMZW5ndGhzQ2hhbmdlZCIsImltbXV0YWJsZVByb3BNYXRjaCIsImhhc1Byb3BzVG9Pd25lckNoYW5nZWQiLCJoYXNQcm9wQ2hhbmdlcyIsIk5PTkUiLCJjYXN0ZWRQYXN0UHJvcHMiLCJjb21wYXJlIiwic3ViQ2FzdGVkUHJvcHMiLCJzdWJDb21wYXJlUHJvcHMiLCJtYXRjaGVkIiwiY29tcGFyZVByb3BzIiwib25lUHJvcENvbXBhcmUiLCJkZWVwUHJvcENoYW5nZUNvbXBhcmUiLCJvbkRlbGV0ZSIsImNvbXBhcmVPcmlnaW5hbCIsInVzZSIsImRlZXBQcm9wV2F0Y2giLCJyb3V0ZSIsIl9yb3V0ZVByb3BzIiwidGFyZ2V0SXRlbSIsImN1cnJlbnRDb250ZXh0IiwiYXBwIiwiX3JvdXRlVGFnIiwiaW1tdXRhYmxlUHJvcHMiLCJ3YXRjaFByb3BzIiwib25lUmVuZGVyRnVuY3Rpb24iLCJyZW5kZXJGdW5jdGlvbiIsInN5bmNQcmlvclByb3BGdW5jdGlvbiIsInByaW9yUHJvcCIsIm9sZFByb3AiLCJ1cGRhdGVFeGlzdGluZ0FycmF5IiwiaGFzU2V0dGVyIiwidXBkYXRlRXhpc3RpbmdPYmplY3QiLCJ1cGRhdGVFeGlzdGluZ1RhZ0NvbXBvbmVudCIsIm9sZFdyYXBwZXIiLCJuZXdXcmFwcGVyIiwiaXNTYW1lVGFnIiwic2tpcENvbXBhcmluZyIsInN3YXBUYWdzIiwibmV3VGVtcGxhdGVyIiwiaGFzU3VwcG9ydENoYW5nZWQiLCJuZXdQcm9wcyIsIm5ld1Byb3BzQXJyYXkiLCJwcmlvclByb3BzQXJyYXkiLCJuZXdBcnJheSIsInNvZnREZXN0cm95U3VwcG9ydCIsInNvZnREZXN0cm95T25lIiwicmVuZGVyV2l0aFN1cHBvcnQiLCJnZXRTdXBwb3J0T2xkZXJTdGF0ZSIsImlzTGlrZVRhZyIsImxhc3RUZW1wbGF0ZXIiLCJsYXN0VGFnIiwibGFzdERvbSIsImxhc3RTdHJpbmdzIiwib2xkTGVuZ3RoIiwiY2hlY2tUYWdTb2Z0RGVzdHJveSIsInBJbmRleCIsInBMZW4iLCJwY0xlbiIsIm1vdmVQcm92aWRlcnMiLCJ3YXNMaWtlVGFncyIsInVwZGF0ZVN1cHBvcnRCeSIsImlubGluZUh0bWwiLCJpc0NvbXBvbmVudCIsImNvbnRpbnVlVXAiLCJwcm9TdXBwb3J0cyIsInByb3NXaXRoQ2hhbmdlcyIsImhhc0NoYW5nZSIsInByb3ZpZGVyc0NoYW5nZUNoZWNrIiwiYmluZFN1YmplY3RDYWxsYmFjayIsInN1YmplY3RGdW5jdGlvbiIsImJpbmRUbyIsInRhZ3NUb1VwZGF0ZSIsImFmdGVyVGFnQ2FsbGJhY2siLCJydW5UYWdDYWxsYmFjayIsInRhZ0Z1bmN0aW9uIiwibm9EYXRhIiwicHJvbWlzZU5vRGF0YSIsImJ1YmJsZUV2ZW50IiwicmVwbGFjZUV2ZW50TmFtZSIsInN0b3BwZWQiLCJvcmlnaW5hbFN0b3BQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJhZGRTdXBwb3J0RXZlbnRMaXN0ZW5lciIsImFwcEVsZW1lbnQiLCJnZXRFdmVudFJlZmVyZW5jZU5hbWUiLCJldmVudFJlZyIsImV2ZW50cyIsImxpc3RlbmVyIiwicHJvY2Vzc0F0dHJpYnV0ZUZ1bmN0aW9uIiwibmV3QXR0clZhbHVlIiwiZnVuIiwiaXNOb0Rpc3BsYXlWYWx1ZSIsInByb2Nlc3NTdGFuZEFsb25lQXR0cmlidXRlIiwicHJvY2Vzc1VwZGF0ZUF0dHJDb250ZXh0IiwiYXR0ckNvbnRleHRJdGVtIiwib2xkVmFsdWUiLCJpc05hbWVPbmx5IiwidXBkYXRlTmFtZU9ubHlBdHRyVmFsdWUiLCJvbmVSZW5kZXIiLCJwcm9jZXNzVGFnQ2FsbGJhY2tGdW4iLCJwcm9jZXNzQXR0cmlidXRlU3ViamVjdFZhbHVlIiwiY2FsbGJhY2tGdW4iLCJwcm9jZXNzQXR0cmlidXRlRW1pdCIsImNyZWF0ZUR5bmFtaWNBcnJheUF0dHJpYnV0ZSIsInN0YXJ0SW5kZXgiLCJzZXRCeSIsImNvbmNhdFZhbHVlIiwibXlJbmRleCIsInB1c2hWYWx1ZSIsImJ1aWxkTmV3VmFsdWVGcm9tQXJyYXkiLCJuZXdWYWx1ZXMiLCJjcmVhdGVEeW5hbWljQXR0cmlidXRlIiwidmFySW5kZXgiLCJfY29udGV4dHMiLCJwcm9jZXNzVGFnSnNBdHRyaWJ1dGUiLCJwcm9jZXNzRHluYW1pY05hbWVWYWx1ZUF0dHJpYnV0ZSIsImdldFRhZ0pzVmFyIiwiYXR0clBhcnQiLCJpc05hbWVWYXIiLCJ2YWx1ZUluVmFsdWVzIiwib2xkVGFnSnNWYXIiLCJwcm9jZXNzVGFnSnNWYXJBdHRyaWJ1dGUiLCJ2YWx1ZVZhciIsInNwZWNpYWwiLCJwYWludENvbnRlbnRQdXNoIiwiaW5uZXJWYWx1ZSIsInRhZ0pzVmFyT3ZlcnJpZGUiLCJwcm9jZXNzRnVuY3Rpb25BdHRyIiwicHJvY2Vzc1NpbXBsZUF0dHJpYnV0ZSIsImRlbGV0ZVNpbXBsZUF0dHJpYnV0ZSIsImNoZWNrU2ltcGxlVmFsdWVDaGFuZ2UiLCJnZXRTaW1wbGVUYWdWYXIiLCJwcm9jZXNzU2ltcGxlVmFsdWVJbml0IiwiZGVsZXRlU2ltcGxlVmFsdWUiLCJjaGVja1VwZGF0ZURlbGV0ZVNpbXBsZVZhbHVlQ2hhbmdlIiwicHJvY2Vzc1N0cmluZ1VwZGF0ZSIsImNhc3RlZFZhbHVlIiwib2xkQ2xvbmUiLCJwcm9jZXNzVXBkYXRlUmVndWxhclZhbHVlIiwiY2hlY2tBcnJheVZhbHVlQ2hhbmdlIiwicHJvY2Vzc1RhZ0FycmF5Iiwibm9MYXN0IiwicnVudGltZUluc2VydEJlZm9yZSIsImZpbHRlcmVkTGFzdCIsIm5ld1JlbW92ZWQiLCJyZXZpZXdBcnJheUl0ZW0iLCJwcmV2aW91cyIsIml0ZW1TdWJqZWN0IiwiY291bGRCZVNhbWUiLCJjcmVhdGVBbmRQcm9jZXNzQ29udGV4dEl0ZW0iLCJyZXZpZXdQcmV2aW91c0FycmF5SXRlbSIsImdldEFycmF5VGFnVmFyIiwicHJvY2Vzc0FycmF5SW5pdCIsInByb2Nlc3NBcnJheVVwZGF0ZXMiLCJnZXRCYXNpY1RhZ1ZhciIsInByb2Nlc3NVcGRhdGVTdWJzY3JpYmUiLCJyZXN1bHROdW0iLCJ1cGRhdGVWYWx1ZSIsImFDb250ZXh0IiwidmFsdWVzSGFuZGxlciIsIm5ld2VzdFBhcmVudFRhZ0pzVmFyIiwicmVzcG9uc2VWYWx1ZSIsInByb2Nlc3NTaWduYWwiLCJpbml0aWFsVmFsdWUiLCJTaWduYWwiLCJTZXQiLCJ1bnN1YiIsImRlbGV0ZSIsIlZhbHVlU3ViamVjdCIsInN1cGVyIiwiVmFsdWVTdWJqZWN0aXZlIiwid2F0Y2giLCJjdXJyZW50VmFsdWVzIiwic2V0dXBXYXRjaCIsImRlZmF1bHRGaW5hbGx5IiwiaW5pdCIsImJlZm9yZSIsImZpbmFsIiwicGFzdFJlc3VsdCIsInByZXZpb3VzVmFsdWVzIiwiZGVmaW5lT25NZXRob2QiLCJnZXRXYXRjaCIsImF0dGFjaFRvIiwic2V0dXAiLCJvbGRXYXRjaCIsImZpcnN0U3VwcG9ydCIsIm9sZFN0YXRlIiwibWV0aG9kIiwibm93U3VwcG9ydCIsInNldFRvIiwibmV3ZXN0U3RhdGUiLCJvbGRlc3RTdGF0ZVN1cHBvcnQiLCJsZXRQcm9wIiwicHJvcFN0YXRlczIiLCJwYXNzZXMiLCJwYXNzZWRPbiIsIm5vd1ZhbHVlcyIsIl94IiwiZGlyZWN0aW9uIiwiZ2V0QmxhbmtEaWZmTWVtb3J5Iiwic3RhdGVEaWZmIiwibmV3V2F0Y2giLCJvbGRlc3RTdGF0ZSIsImNvbnN0cnVjdE1ldGhvZCIsInN0YXRlRGlmZk1lbW9yeSIsIm9sZFN0YXRlQ291bnQiLCJpbnN0YW5jZSIsImNtIiwib3duZXJQcm92aWRlcnMiLCJmaW5kIiwid2FybiIsIlRhZ0Vycm9yIiwiZXJyb3JDb2RlIiwiZGV0YWlscyIsIlN5bmNDYWxsYmFja0Vycm9yIiwiY2FsbGJhY2tTdGF0ZVVwZGF0ZSIsIl9vbGRTdGF0ZXMiLCJtYXliZVByb21pc2UiLCJmaW5hbGx5IiwiY2FsbGJhY2tTdGF0ZSIsImNhbGxiYWNrVHJpZ2dlciIsImNyZWF0ZVRyaWdnZXIiLCJjYWxsYmFja01ha2VyIiwic3luY0Vycm9yIiwiZmlyc3RTaWduYWwiLCJzaWciLCJlZGl0b3JzIiwicmVhZGVycyIsInJlc2lnbmFsIiwiUHJveHkiLCJhY3Rpb24iLCJnZXRFbGVtZW50IiwicHJvY2Vzc1VwZGF0ZU9uZUNvbnRleHQiLCJvbGRlclN1cHBvcnQiLCJuZXdlclN1cHBvcnQiLCJuZXdUZW1wbGF0ZSIsInRlbXBUYWciLCJ1cGRhdGVTdXBwb3J0VmFsdWVzQnkiLCJwcm9jZXNzVXBkYXRlQ29udGV4dCIsInByZXBhcmVVcGRhdGVUb0NvbXBvbmVudCIsIm9sZFR0YWciLCJ2YWx1ZVN1cHBvcnQiLCJoYW5kbGVTdGlsbFRhZyIsInByb2Nlc3NOb3dSZWd1bGFyVmFsdWUiLCJvcmlnaW5hbFR5cGUiLCJwcm9jZXNzRG9tVGFnSW5pdCIsInByb2Nlc3NPdXRlckRvbVRhZ0luaXQiLCJjaGVja091dGVyVGFnVmFsdWVDaGFuZ2UiLCJnZXRTdHJpbmdUYWciLCJrZXlUYWciLCJzZXRIVE1MIiwiYWNjZXB0SW5uZXJIVE1MIiwidXNlVGFnVmFyIiwic3RyaW5nVGFnIiwiZ2V0RG9tVGFnIiwicmVnaXN0ZXJUYWdFbGVtZW50IiwibmV3RnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiaXNBcHAiLCJhcHBFbGVtZW50cyIsImRvbUl0ZW0iLCJwdXRPbmVEb21Eb3duIiwicHV0RG93blRhZ0RvbSIsImxvYWROZXdCYXNlU3VwcG9ydCIsInJlbmRlclRhZ0VsZW1lbnQiLCJ0ZW1wbGF0ZXIyIiwiaXNBcHBGdW5jdGlvbiIsImlzRmlyc3RSZW5kZXIiLCJleGVjdXRlU3RhdGVXcmFwIiwicnVuV3JhcHBlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b0F3YWl0IiwidGFnZ2VkSnMiLCJhcHBFbG1JbmRleCIsImFwcEVsbSIsImRlYnVnIiwiZ2V0TmV3U3ViamVjdCIsImNhbGxiYWNrV3JhcHBlcjIiLCJ3cmFwQ2FsbGJhY2siLCJlIiwibGlzdGVuZXJzIiwiYWxsTGlzdGVuZXJzIiwiYXR0cjIiLCJpc1ZhbHVlRm9yQ29udGV4dCIsInJlZ2lzdGVyTW9ja0F0dHJDb250ZXh0IiwiZWxlbWVudEZ1bmN0aW9ucyIsIm1ha2VDYWxsYmFjayIsImdldFB1c2hLaWQiLCJjYWxsYmFja1dyYXBwZXIiLCJjYWxsYWJsZXMiLCJvbkNoYW5nZSIsIm9uS2V5dXAiLCJtb2NrRWxtIiwic2V0dXBBdHRyIiwic2VsZWN0ZWQiLCJjbGFzcyIsInByb2Nlc3NDaGlsZHJlbiIsImFkZGVkQ29udGV4dHMiLCJwYWludEJ5IiwiaGFuZGxlU2ltcGxlSW5uZXJWYWx1ZSIsInN1YkNvbnRleHRzIiwiX2MiLCJzdWJTdWIiLCJhU3ViQ29udGV4dCIsInByb2Nlc3NOb25FbGVtZW50IiwicHJvY2Vzc0VsZW1lbnRWYXJGdW5jdGlvbiIsIm5ld0VsZW1lbnQiLCJwcm9jZXNzRWxlbWVudFZhciIsInN0YXRlU3VwcG9ydCIsImRlc3Ryb3lEZXNpZ25FbGVtZW50IiwiZGVzdHJveURlc2lnbkJ5Q29udGV4dHMiLCJwcm9jZXNzRGVzaWduRWxlbWVudFVwZGF0ZSIsImNoZWNrVGFnRWxlbWVudFZhbHVlQ2hhbmdlIiwidkNvbnRleHRzIiwib2dMaXN0ZW5lcnMiLCJuZXdMaXN0ZW5lciIsImRlc2lnbkVsZW1lbnQiLCJwdXNoS2lkIiwiX2VsbUZ1bmN0aW9ucyIsIm5vRWxlbWVudCIsInByb2Nlc3NOb0VsbUluaXQiLCJkZXN0cm95Tm9FbGVtZW50Iiwibm9FbGVtZW50TWFrZXIiLCJociIsImgxIiwiaDIiLCJoMyIsIm9sIiwibGkiLCJkaXYiLCJmaWVsZHNldCIsImxlZ2VuZCIsInAiLCJhIiwic3BhbiIsInN0cm9uZyIsInNtYWxsIiwibGFiZWwiLCJzdXAiLCJobXIiLCJnZXRIYXNoIiwic3Vic3RyaW5nIiwiSGFzaFJvdXRlciIsIm9uSGFzaENoYW5nZSIsInVzZUhhc2hSb3V0ZXIiLCJoYXNoUm91dGVyU3ViamVjdCIsIm1lbnUiLCJtZW51TmFtZSIsInJvdXRlciIsInBhdGhuYW1lIiwiZ2V0TWVudU5hbWVCeUl0ZW0iLCJocmVmIiwibW91c2VPdmVyVGFnIiwibW91c2VPdmVyRWRpdFNob3ciLCJlZGl0IiwiYWxsU3RyaW5nczE0MDQwNyIsInJlbmRlckNvdW50RGl2IiwibG9hZFN0YXJ0VGltZSIsImNvdW50ZXJzIiwiYXBwQ291bnRlclN1YmplY3QiLCJnbG9iYWxTdWJzIiwiaW5uZXJDb3VudGVyQ29udGVudCIsImlubmVyQ291bnRlcnMiLCJpbmNyZWFzZVByb3BDb3VudGVyIiwib3RoZXJDb3VudGVyIiwiZWxtSW5pdENvdW50IiwiX18iLCJzaGFsbG93UHJvcENvdW50ZXJzIiwiYWxsU3RyaW5nczk3MzI4MDciLCJpbW11dGFibGVQcm9wQ291bnRlcnMiLCJub1dhdGNoUHJvcENvdW50ZXJzIiwic3RhdGVzUmVuZGVyQ291bnQiLCJzdGF0ZXNSZW5kZXJDb3VudDIiLCJjb3VudGVyMiIsImluaXRDb3VudGVyIiwiY2FsbGJhY2tzIiwiY2FsbGJhY2tUbyIsInoiLCJjYWxsYmFja1Rlc3RTdWIiLCJjYWxsYmFja1Rlc3RTdWIyIiwiY2FsbGJhY2tUZXN0U3ViMyIsInBpcGVkU3ViamVjdDAiLCJwaXBlZFN1YmplY3QxIiwicGlwZWRTdWJqZWN0MiIsInBpcGVkU3ViamVjdDMiLCJyZWFkU3RhcnRUaW1lIiwieSIsImJvbGQiLCJjb2x1bW5FZGl0b3IiLCJpbmNsdWRlZCIsImNvbHVtbk5hbWVzIiwiYWxsQ29sdW1uTmFtZXMiLCJlZGl0Rm9ybXVsYSIsImZvcm11bGFzIiwiYWxsU3RyaW5nczQzMTY5MSIsImluZGV4T2YiLCJldnQiLCJ1cGRhdGVGb3JtdWxhIiwiZm9ybXVsYSIsIm5ld0Zvcm11bGEiLCJzdHJpbmdGb3JtdWxhIiwic2FuZGJveFJ1bkV2YWwiLCJ0aXRsZSIsInNyYyIsImN0eCIsImhhcyIsIkZ1bmN0aW9uIiwic2FuZGJveEV2YWwiLCJNYXRoIiwiYXJyYXlUYWJsZSIsInNob3dBbGwiLCJzaG93S2lkcyIsInRvZ2dsZUNvbHVtbkRpYWxvZyIsImZvcm1hdENoYW5nZSIsImFsbG93TWF4aW1pemUiLCJldmVyeVNpbXBsZVZhbHVlIiwiYWxsU3RyaW5nczEyMjE4NCIsInJvdyIsImR1bXAiLCJzaG93TGV2ZWxzIiwiaXNSb290RHVtcCIsImFycmF5RGlzcGxheSIsImFsbFN0cmluZ3MxNTIxMjciLCJpbnB1dE9iamVjdCIsImtleXNBcnJheSIsImZpbHRlcmVkT2JqZWN0IiwiZmlsdGVyT2JqZWN0QnlLZXlzIiwicGFyYW1WYWx1ZUtleXMiLCJvbkhlYWRlckNsaWNrIiwiYXJyYXlzRGlzcGxheSIsImFycmF5VmlldyIsImdldEFsbEtleXMiLCJkZWZhdWx0Q29sdW1uTmFtZXMiLCJzaG93Q29sdW1uRGlhbG9nIiwidW5pcXVlSWQiLCJwZXJmb3JtYW5jZSIsIm5vSW5pdCIsInNob3dNb2RhbCIsImNsb3NlIiwiYXJyYXlUYWciLCJhbGxTdHJpbmdzNDYzMTcxIiwiZHVtcEFycmF5Iiwic2hvdyIsInNob3dMb3dlciIsIm1heGltaXplIiwibWF4aW1pemVJZCIsInRvZ2dsZU1heGltaXplIiwiZHVtcEJvZHkiLCJnZXRIZWFkZXIiLCJhbGxTdHJpbmdzNDc5MzcwIiwiZGlzcGxheU9wdGlvbnMiLCJjb3B5VGV4dCIsInNldFNlbGVjdGlvblJhbmdlIiwiZXhlY0NvbW1hbmQiLCJkdW1wU2ltcGxlIiwiaXNMaW5rVmFsdWUiLCJkaXNwbGF5VmFsdWUiLCJzaW1wbGVWYWx1ZSIsImxpbmtWYWx1ZSIsImFsbFN0cmluZ3MyNDY5NzgiLCJpc0xpa2VOdWxsIiwibnVtYmVyIiwidG9Mb2NhbGVTdHJpbmciLCJnZXRMYXJnZU51bWJlclRpdGxlIiwiZG93blRpbWUiLCJwcmV2ZW50RGVmYXVsdCIsImR1bXBPYmplY3QiLCJjb250aW51ZUR1bXAiLCJnZXRIZWFkIiwiYWxsU3RyaW5nczQ3MDI0NCIsImdldER1bXBCb2R5IiwiY29udHJvbFBhbmVsIiwiZm9ybWF0Iiwic2hvd0FsbENoYW5nZSIsImFsbFN0cmluZ3M0NDA4MzMiLCJjb3B5QXNKc29uVGV4dCIsInR5cGluZyIsImdldE9iamVjdFRlbXBsYXRlIiwiZHVtcENvdW50IiwiYWxsU3RyaW5nczMwNjE4OCIsImR1bXBDb250ZW50IiwidXNlckpzb25TdHJpbmciLCJ1c2VySnNvbiIsImJhZEV2YWwiLCJzYW1wbGVEdW1wIiwiYW5vdGhlck9uZSIsImFycmF5VGVzdCIsInN0cmVldCIsImFsbFN0cmluZ3MxODM2MzIiLCJlcnIiLCJwYXJzZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJmeEluIiwiZnhPdXQiLCJvdXRQb3NpdGlvbkFic29sdXRlIiwiaW4iLCJzdGFnZ2VyIiwiYW5pbWF0ZUluaXQiLCJmeE5hbWUiLCJvdXQiLCJhbmltYXRlRGVzdHJveSIsIm9wYWNpdHkiLCJ3YWl0IiwiYWRkQ2xhc3Nlc1RvIiwiekluZGV4IiwidG9Ub3AiLCJvZmZzZXRUb3AiLCJ0b0xlZnQiLCJvZmZzZXRMZWZ0IiwidG9XaWR0aCIsImNsaWVudFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJ0b0hlaWdodCIsImNsaWVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsInRvcCIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsImNhcHR1cmVFbGVtZW50UG9zaXRpb24iLCJwcm9taXNlIiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwiZmFkZUluVXAiLCJmYWRlT3V0RG93biIsImZhZGVJbkRvd24iLCJmYWRlT3V0VXAiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZngiLCJpbk5hbWUiLCJvdXROYW1lIiwiZHVyYXRpb24iLCJzZXR1cEZ4IiwiZGVzdHJveVByb21pc2UiLCJjcmVhdGVkIiwiY29uY2F0U3R5bGVzIiwibWluIiwibWF4Iiwic3RlcCIsInZzMCIsIm9yYW5nZVRvZ2dsZSIsImJvbGRUb2dnbGUiLCJzdGFnZ2VyQnkiLCJzaG93SGlkZUZ4IiwiY291bnRzIiwiYWRkZWQiLCJhbGxTdHJpbmdzNjQ3NjYzIiwib3V0ZXJIdG1sIiwiaW5uZXJIdG1sVGFnIiwibnVtYmVyZWROb1BhcmVudHMiLCJvdXRzaWRlQ291bnQiLCJpbnNpZGVNdWx0aVJlbmRlciIsImNvdW50ZXIkIiwiY291bnRlclNpZ25hbCQiLCJhbGxTdHJpbmdzMjI3NzY4NiIsInRlc3RUaW1lb3V0IiwicnVuVGVzdGluZyIsIm1hbnVhbCIsInJ1blN0YXJ0RW5kVGVzdHMiLCJjbGVhclRpbWVvdXQiLCJzdG9yYWdlIiwidmlld3MiLCJ0ZXN0Q291bnQiLCJWaWV3VHlwZXMiLCJDb250ZW50IiwiU3Vic2NyaXB0aW9ucyIsIkNvdW50ZXJzIiwiUHJvcHMiLCJQcm92aWRlckRlYnVnIiwiVGFnU3dpdGNoRGVidWciLCJDaGlsZCIsIkFycmF5cyIsIk1pcnJvcmluZyIsIldhdGNoVGVzdGluZyIsIkZ1bkluUHJvcHNUYWciLCJBdHRyaWJ1dGVEZWJ1ZyIsIk9uZVJlbmRlciIsIlRvZG8iLCJEZXN0cm95cyIsIkJhc2ljIiwic3RhcnQiLCJydW5Jc29sYXRlZFRlc3RzIiwiYWxlcnQiLCJsb2NhbFN0b3JhZ2UiLCJ0YWdnZWRqcyIsImF1dG9UZXN0IiwiZ2V0U2NvcGVkU3RvcmFnZSIsInNhdmVTY29wZWRTdG9yYWdlIiwiZGVmYXVsdFZpZXdUeXBlcyIsInNlY3Rpb25TZWxlY3RvciIsInZpZXdUeXBlcyIsInNvcnRlZFZpZXdUeXBlcyIsInNvcnQiLCJiIiwibG9jYWxlQ29tcGFyZSIsIm1ldGEiLCJvdXRwdXRTZWN0aW9ucyIsInMiLCJjaGVja1Rlc3RpbmciLCJkZWFjdGl2YXRlIiwidmlld0NoYW5nZWQiLCJ0b2dnbGVWaWV3VHlwZSIsImVtb2ppIiwiZm9yIiwidmlld1R5cGUiLCJhY3RpdmF0ZSIsImFycmF5RnVuVGFnIiwiZGVsZXRlSXRlbSIsImFsbFN0cmluZ3MxOTM0NyIsImZ1bkluUHJvcHNDaGlsZCIsImFyZzAiLCJtYWluUHJvcCIsIm15RnVuY3Rpb24zIiwib3RoZXIiLCJhZGRBcnJheUl0ZW0iLCJteUZ1bmN0aW9uIiwiYWxsU3RyaW5nczU5ODY2OSIsIm15Q2hpbGRGdW5jdGlvbiIsIm1haW4iLCJhZGRBcnJheUNvbXBvbmVudCIsImhhbmRsZUtleVVwIiwic2hvd0NoaWxkIiwic29tZXRoaW5nRWxzZSIsIkl0ZW0iLCJ0b2RvIiwiZGlzcGF0Y2giLCJlZGl0aW5nIiwiYWxsU3RyaW5nczM0OTk3NiIsImNvbXBsZXRlZCIsImhhbmRsZUtleSIsInJlbW92ZUl0ZW0iLCJ1cGRhdGVUb0J5SW5kZXgiLCJoYW5kbGVVcGRhdGUiLCJ0b2dnbGVJdGVtIiwicmVtb3ZlSXRlbUJ5SW5kZXgiLCJvblZhbGlkIiwiYWxsU3RyaW5nczQ3ODYwIiwiRm9vdGVyIiwidG9kb3NDb3VudCIsInJlbW92ZUNvbXBsZXRlZCIsImFjdGl2ZVRvZG9Db3VudCIsImFsbFN0cmluZ3M3NzE1NiIsInRvZG9zIiwicGFydGlhbCIsImFkZEl0ZW0iLCJyYW5kb20iLCJ0IiwicmVtb3ZlQWxsIiwidG9nZ2xlQWxsIiwiY29tcGxldGVJdGVtIiwidXBkYXRlSXRlbUJ5SW5kZXgiLCJ0b2RvUmVkdWNlciIsInRvZG9BcHAiLCJpc0NvbXBsZXRlZFJvdXRlIiwidmlzaWJsZVRvZG9zIiwidG9kb0NvdW50IiwibmV3TWFwIiwiYWxsU3RyaW5nczE0MzE4MCIsImVudGVyIiwiSGVhZGVyIiwiaW5uZXJIdG1sVGVzdCIsIl9wcm9wcyIsImlubmVySHRtbFByb3BzVGVzdCIsImFsbFN0cmluZ3MxMjcwOTAiLCJ0ZXN0MjIiLCJhbGxTdHJpbmdzODAxOTc0Iiwibm9UYWdUZXN0IiwiY2hpbGRBc1Byb3BUZXN0IiwiZGVzdHJveXMiLCJvbiIsInRvRGVzdHJveSIsImFycmF5U2NvcmVEYXRhIiwic2NvcmUiLCJwbGF5ZXJJbmRleCIsImFsbFN0cmluZ3M2Nzg3OCIsImZyYW1lIiwiYXJyYXlzIiwicGxheWVycyIsInNpZ25hbEFycmF5Iiwic2ltcGxlQXJyYXkiLCJhcnJheUZ4Iiwic3RhZ2dlclRpbWUiLCJ0b3RhbFN0YWdnZXIiLCJmeEdyb3VwIiwiZ2V0TmV3UGxheWVyIiwic2NvcmVzIiwicmVwZWF0IiwiX3YiLCJmbG9vciIsInJlbW92ZVBsYXllckJ5SW5kZXgiLCJwbGF5ZXIiLCJhZGRBcnJheVNpZ25hbCIsImxvb3BUaW1lcyIsImdldFBsYXllckRpc3BsYXkiLCJwbGF5ZXJTY29yZURpc3BsYXkiLCJ0YWdTd2l0Y2hEZWJ1ZyIsIl90Iiwic2VsZWN0ZWRUYWciLCJ0YWcxIiwidGFnMiIsInRhZzMiLCJ0ZXJuYXJ5UHJvcFRlc3QiLCJhcnJheVN3aXRjaGluZyIsIm1pcnJvcmluZyIsInRhZ0NvdW50ZXIiLCJhbGxTdHJpbmdzMTU2NzM0IiwiX19fIiwiYWxsU3RyaW5nczUzOTI5IiwicHJvcHNEZWJ1Z01haW4iLCJzeW5jUHJvcE51bWJlciIsInByb3BOdW1iZXIiLCJwcm9wc0pzb24iLCJkYXRlIiwianNvbiIsInN0YXRlUHJvcERpc3BsYXkiLCJhbGxTdHJpbmdzMzE5ODMxNSIsInByb3BzRGVidWciLCJwcm9wTnVtYmVyQ2hhbmdlIiwic3luY1Byb3BEZWJ1ZyIsInBhcmVudFRlc3QiLCJ0aW1lc3RhbXAiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsIlN0cmluZyIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJkYXkiLCJnZXREYXRlIiwiaG91cnMiLCJnZXRIb3VycyIsIm1pbnV0ZXMiLCJnZXRNaW51dGVzIiwidGltZXN0YW1wVG9WYWx1ZXMiLCJuZXdEYXRlU3RyaW5nIiwicHJvcERhdGVEZWJ1ZyIsInByb3BOdW1iZXJDaGFuZ2VDb3VudCIsIm15UHJvcE51bWJlciIsIl9zdGF0ZXMiLCJ3YXRjaFJlc3VsdHMiLCJwcm9wRm5VcGRhdGVUZXN0IiwiZGlhbG9nIiwicHJvdmlkZXJDbGFzcyIsImFsbFN0cmluZ3MyNDg4MDUiLCJzaG93RGlhbG9nIiwiaW5qZWN0aW9uV3JhcCIsInNlbGVjdGVkQ2hhbmdlIiwidGFyZ2V0cyIsImluamVjdGlvblRhcmdldCIsIndyYXBIb3N0IiwiaW5qZWN0aW9uVGFnIiwic2VsZWN0ZWRUZXN0IiwibmV3U2VsZWN0ZWQiLCJhbGxTdHJpbmdzMTcxNTI0IiwiVGFnRGVidWdQcm92aWRlciIsInRhZ0RlYnVnIiwiUHJvdmlkZXJGdW5jIiwidGFnRGVidWdQcm92aWRlciIsInVwcGVyIiwidXBwZXJUYWdEZWJ1Z1Byb3ZpZGVyIiwicHJvdmlkZXJEZWJ1ZyIsImFsbFN0cmluZ3M2ODU3OTI5IiwicHJvdmlkZXJDaGlsZERlYnVnIiwicHJvcENvdW50ZXJDaGFuZ2UiLCJpbkN5Y2xlQ29udGV4dENvbW1zIiwiZnVuY1Byb3ZpZGVyIiwidXBwZXJQcm92aWRlciIsInNob3dQcm9Qcm9wcyIsInRlc3RQcm92aWRlckFzUHJvcHMiLCJpbkN5Y2xlUGFyZW50IiwiZ2FwIiwiaW5DeWNsZUNoaWxkIiwicGFyZW50IiwiZmxleCIsImluQ3ljbGVDaGlsZDIiLCJpbkN5Y2xlQ2hpbGQzIiwiY29sb3JPcHRpb25zIiwiY3ljbGVDb2xvclBhcmVudCIsImN5Y2xlQ29sb3JDaGlsZCIsImN5Y2xlQ29sb3JDaGlsZDIiLCJoaWRlU2hvd0N5Y2xlcyIsInRhYmxlRGVidWciLCJzaG93Q2VsbCIsImFsbFN0cmluZ3M1Mjc4MiIsIndhdGNoVGVzdGluZyIsInN0YXRlTnVtIiwic3RhdGVOdW1DaGFuZ2VDb3VudCIsInNsb3dDaGFuZ2VDb3VudCIsInN1YmplY3RDaGFuZ2VDb3VudCIsInRydXRoQ2hhbmdlIiwidHJ1dGhDaGFuZ2VDb3VudCIsInRydXRoU3ViQ2hhbmdlQ291bnQiLCJ3YXRjaFByb3BOdW1TbG93Iiwid2F0Y2hQcm9wTnVtU3ViamVjdCIsImFzU3ViamVjdCIsIndhdGNoVHJ1dGgiLCJ0cnV0aHkiLCJ3YXRjaFRydXRoQXNTdWIiLCJhbGxTdHJpbmdzMjE4NzYxMyIsInN1YnNjcmliZUF0dHJpYnV0ZXMiLCJzdWJDb2xvciQiLCJzdWJDb2xvclB1cnBsZU9yYW5nZSQiLCJzdWJDb2xvckdyZWVuWWVsbG93JCIsInNob3VsZEhpZGVBdHRyaWJ1dGVzIiwic3ViQ29sb3IiLCJjdXJyZW50Q29sb3IiLCJhdHRyaWJ1dGVEZWJ1ZyIsImlzT3JhbmdlIiwiYmFzaWMiLCJzaG93RGl2IiwiYm9sdFRhZyIsInBhcmVudENvdW50ZXIiLCJhcnJheUJvbHRUZXN0IiwiaW5uZXJDb3VudGVyIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX19leHRlbmRzIiwiVHlwZUVycm9yIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJkb25lIiwiX19nZW5lcmF0b3IiLCJmIiwic2VudCIsInRyeXMiLCJvcHMiLCJnIiwiSXRlcmF0b3IiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJuIiwib3AiLCJfX3ZhbHVlcyIsIm0iLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkQXJyYXkiLCJwYWNrIiwibCIsImNvbmNhdCIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsIkFzeW5jSXRlcmF0b3IiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY1ZhbHVlcyIsIlN1cHByZXNzZWRFcnJvciIsImNyZWF0ZUVycm9yQ2xhc3MiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiX3N1cGVyIiwiZXJyb3JzIiwiYXJyUmVtb3ZlIiwiYXJyIiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl9maW5hbGl6ZXJzIiwiZV8xIiwiX2EiLCJlXzIiLCJfYiIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwiZV8xXzEiLCJyZXR1cm4iLCJpbml0aWFsRmluYWxpemVyIiwiX2ZpbmFsaXplcnNfMSIsIl9maW5hbGl6ZXJzXzFfMSIsImZpbmFsaXplciIsImV4ZWNGaW5hbGl6ZXIiLCJlXzJfMSIsInRlYXJkb3duIiwiX2hhc1BhcmVudCIsIl9hZGRQYXJlbnQiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJFTVBUWV9TVUJTQ1JJUFRJT04iLCJpc1N1YnNjcmlwdGlvbiIsIm9uVW5oYW5kbGVkRXJyb3IiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJ1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidGltZW91dFByb3ZpZGVyIiwidGltZW91dCIsIl9pIiwiZGVsZWdhdGUiLCJoYW5kbGUiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiZXJyb3JDb250ZXh0IiwiaXNSb290IiwiZXJyb3JUaHJvd24iLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb24iLCJfdGhpcyIsImlzU3RvcHBlZCIsIkVNUFRZX09CU0VSVkVSIiwiY29tcGxldGUiLCJTYWZlU3Vic2NyaWJlciIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJfYmluZCIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwibm90aWZpY2F0aW9uIiwic3Vic2NyaWJlciIsImlkZW50aXR5IiwicGlwZUZyb21BcnJheSIsImZucyIsInByZXYiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsIl90cnlTdWJzY3JpYmUiLCJzaW5rIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiY3VycmVudE9ic2VydmVycyIsIm9ic2VydmVycyIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJBbm9ueW1vdXNTdWJqZWN0IiwiX3Rocm93SWZDbG9zZWQiLCJjb25maWd1cmFibGUiLCJfY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyIsIl9pbm5lclN1YnNjcmliZSIsImFzT2JzZXJ2YWJsZSIsIm9wZXJhdGUiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25FcnJvciIsIm9uRmluYWxpemUiLCJPcGVyYXRvclN1YnNjcmliZXIiLCJzaG91bGRVbnN1YnNjcmliZSIsImNsb3NlZF8xIiwiaXNBcnJheUxpa2UiLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwiaXNBc3luY0l0ZXJhYmxlIiwiY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IiLCJpc0l0ZXJhYmxlIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsInJlYWRhYmxlU3RyZWFtIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJpbm5lckZyb20iLCJvYnMiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJpdGVyYWJsZSIsIml0ZXJhYmxlXzEiLCJpdGVyYWJsZV8xXzEiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJwcm9jZXNzIiwiY2F0Y2giLCJleGVjdXRlU2NoZWR1bGUiLCJwYXJlbnRTdWJzY3JpcHRpb24iLCJzY2hlZHVsZXIiLCJ3b3JrIiwic2NoZWR1bGVTdWJzY3JpcHRpb24iLCJzY2hlZHVsZSIsIm1lcmdlTWFwIiwicHJvamVjdCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIkluZmluaXR5IiwiaWkiLCJvbkJlZm9yZU5leHQiLCJleHBhbmQiLCJpbm5lclN1YlNjaGVkdWxlciIsImFkZGl0aW9uYWxGaW5hbGl6ZXIiLCJidWZmZXIiLCJhY3RpdmUiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiX2xvb3BfMSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZUludGVybmFscyIsImNvbmNhdEFsbCIsInBvcFNjaGVkdWxlciIsIm9ic2VydmVPbiIsInN1YnNjcmliZU9uIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic2NoZWR1bGVkIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlSXRlcmFibGUiLCJzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSIsInN0YXJ0V2l0aCIsInN1YjAiLCJzdWIxIiwic3ViQXJyYXkiLCJ2czEiLCJhbGxTdHJpbmdzNjc4NTI3IiwidGVzdEhvc3QiLCJ1dGlscyIsIndpbGxQcm9taXNlIiwicGFzc1N1YnNjcmlwdGlvbiIsIm9uT2ZmIiwibnVtYmVyRnVuIiwibnVtYmVyVGFnIiwiY2xpY2tDb3VudGVyIiwiVGFibGVEZWJ1ZyIsInJlbmRlcmVkU2VjdGlvbnMiLCJ2aXNpYmxlU2VjdGlvbnMiLCJzZWN0aW9uIiwiZXh0cmEiLCJnZXRTZWN0aW9uIiwiY29udGVudEhpZGUiLCJ0ZXN0MGludGVydmFsIiwidGVzdDFpbnRlcnZhbCIsImludGVydmFsVGVzdGVyMCIsImludGVydmFsSWQiLCJpbnRlcnZhbElkMiIsImludGVydmFsQ291bnQiLCJyZW5kZXJDb3VudGVyIiwiY3VycmVudFRpbWUiLCJzdGFydEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJzdG9wSW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiYWxsU3RyaW5nczgzODAwOCIsImludGVydmFsVGVzdGVyMSIsInRvZ2dsZUludGVydmFsIiwiX2ZpcnN0U3RhdGUiLCJzaG93SW50ZXJ2YWxzIiwiYWxsU3RyaW5nczc3NTAwIiwiaG9tZVBhZ2UiLCJzaG93U2VjdGlvbnMiLCJhcHBDb3VudGVyIiwidG9nZ2xlVmFsdWUiLCJ0ZXN0RW1vamkiLCJvblRlc3RDb21wbGV0ZSIsInN1Y2Nlc3MiLCJmaXJlVGVzdGluZyIsIm1vY2hhIiwicnVuVGVzdHMiLCJhcHBEYXRlIiwiYXBwRnVuIiwidXNlTWVudU5hbWUiLCJzaG93SGlkZSIsImZ4VGFnIiwiQXBwIiwiYXV0b1Rlc3RpbmdDb250cm9scyIsInRvZ2dsZUF1dG9UZXN0aW5nIiwiaGFzTGVuZ3RoIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsb2NhdGlvblNwbGl0IiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==